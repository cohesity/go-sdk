/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// PhysicalVolume Specifies volume information about a Physical Protection Source.
type PhysicalVolume struct {
	// Specifies the path to the device that hosts the volume locally.
	DevicePath NullableString `json:"devicePath,omitempty"`
	// Specifies an id for the Physical Volume.
	Guid NullableString `json:"guid,omitempty"`
	// Specifies whether the volume is boot volume.
	IsBootVolume NullableBool `json:"isBootVolume,omitempty"`
	// Specifies whether this volume supports extended attributes (like ACLs) when performing file backups.
	IsExtendedAttributesSupported NullableBool `json:"isExtendedAttributesSupported,omitempty"`
	// Specifies if a volume is protected by a Job.
	IsProtected NullableBool `json:"isProtected,omitempty"`
	// Specifies whether the volume is shared volume.
	IsSharedVolume NullableBool `json:"isSharedVolume,omitempty"`
	// Specifies a volume label that can be used for displaying additional identifying information about a volume.
	Label NullableString `json:"label,omitempty"`
	// Specifies the logical size of the volume in bytes that is not reduced by change-block tracking, compression and deduplication.
	LogicalSizeBytes NullableInt32 `json:"logicalSizeBytes,omitempty"`
	// Array of Mount Points.  Specifies the mount points where the volume is mounted, for example: 'C:\\', '/mnt/foo' etc.
	MountPoints []string `json:"mountPoints,omitempty"`
	// Specifies mount type of volume e.g. nfs, autofs, ext4 etc.
	MountType NullableString `json:"mountType,omitempty"`
	// Specifies the full path to connect to the network attached volume. For example, (IP or hostname):/path/to/share for NFS volumes).
	NetworkPath NullableString `json:"networkPath,omitempty"`
	// Specifies the size used by the volume in bytes.
	UsedSizeBytes NullableInt32 `json:"usedSizeBytes,omitempty"`
}

// NewPhysicalVolume instantiates a new PhysicalVolume object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhysicalVolume() *PhysicalVolume {
	this := PhysicalVolume{}
	return &this
}

// NewPhysicalVolumeWithDefaults instantiates a new PhysicalVolume object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhysicalVolumeWithDefaults() *PhysicalVolume {
	this := PhysicalVolume{}
	return &this
}

// GetDevicePath returns the DevicePath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalVolume) GetDevicePath() string {
	if o == nil || o.DevicePath.Get() == nil {
		var ret string
		return ret
	}
	return *o.DevicePath.Get()
}

// GetDevicePathOk returns a tuple with the DevicePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalVolume) GetDevicePathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DevicePath.Get(), o.DevicePath.IsSet()
}

// HasDevicePath returns a boolean if a field has been set.
func (o *PhysicalVolume) HasDevicePath() bool {
	if o != nil && o.DevicePath.IsSet() {
		return true
	}

	return false
}

// SetDevicePath gets a reference to the given NullableString and assigns it to the DevicePath field.
func (o *PhysicalVolume) SetDevicePath(v string) {
	o.DevicePath.Set(&v)
}
// SetDevicePathNil sets the value for DevicePath to be an explicit nil
func (o *PhysicalVolume) SetDevicePathNil() {
	o.DevicePath.Set(nil)
}

// UnsetDevicePath ensures that no value is present for DevicePath, not even an explicit nil
func (o *PhysicalVolume) UnsetDevicePath() {
	o.DevicePath.Unset()
}

// GetGuid returns the Guid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalVolume) GetGuid() string {
	if o == nil || o.Guid.Get() == nil {
		var ret string
		return ret
	}
	return *o.Guid.Get()
}

// GetGuidOk returns a tuple with the Guid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalVolume) GetGuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Guid.Get(), o.Guid.IsSet()
}

// HasGuid returns a boolean if a field has been set.
func (o *PhysicalVolume) HasGuid() bool {
	if o != nil && o.Guid.IsSet() {
		return true
	}

	return false
}

// SetGuid gets a reference to the given NullableString and assigns it to the Guid field.
func (o *PhysicalVolume) SetGuid(v string) {
	o.Guid.Set(&v)
}
// SetGuidNil sets the value for Guid to be an explicit nil
func (o *PhysicalVolume) SetGuidNil() {
	o.Guid.Set(nil)
}

// UnsetGuid ensures that no value is present for Guid, not even an explicit nil
func (o *PhysicalVolume) UnsetGuid() {
	o.Guid.Unset()
}

// GetIsBootVolume returns the IsBootVolume field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalVolume) GetIsBootVolume() bool {
	if o == nil || o.IsBootVolume.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsBootVolume.Get()
}

// GetIsBootVolumeOk returns a tuple with the IsBootVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalVolume) GetIsBootVolumeOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsBootVolume.Get(), o.IsBootVolume.IsSet()
}

// HasIsBootVolume returns a boolean if a field has been set.
func (o *PhysicalVolume) HasIsBootVolume() bool {
	if o != nil && o.IsBootVolume.IsSet() {
		return true
	}

	return false
}

// SetIsBootVolume gets a reference to the given NullableBool and assigns it to the IsBootVolume field.
func (o *PhysicalVolume) SetIsBootVolume(v bool) {
	o.IsBootVolume.Set(&v)
}
// SetIsBootVolumeNil sets the value for IsBootVolume to be an explicit nil
func (o *PhysicalVolume) SetIsBootVolumeNil() {
	o.IsBootVolume.Set(nil)
}

// UnsetIsBootVolume ensures that no value is present for IsBootVolume, not even an explicit nil
func (o *PhysicalVolume) UnsetIsBootVolume() {
	o.IsBootVolume.Unset()
}

// GetIsExtendedAttributesSupported returns the IsExtendedAttributesSupported field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalVolume) GetIsExtendedAttributesSupported() bool {
	if o == nil || o.IsExtendedAttributesSupported.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsExtendedAttributesSupported.Get()
}

// GetIsExtendedAttributesSupportedOk returns a tuple with the IsExtendedAttributesSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalVolume) GetIsExtendedAttributesSupportedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsExtendedAttributesSupported.Get(), o.IsExtendedAttributesSupported.IsSet()
}

// HasIsExtendedAttributesSupported returns a boolean if a field has been set.
func (o *PhysicalVolume) HasIsExtendedAttributesSupported() bool {
	if o != nil && o.IsExtendedAttributesSupported.IsSet() {
		return true
	}

	return false
}

// SetIsExtendedAttributesSupported gets a reference to the given NullableBool and assigns it to the IsExtendedAttributesSupported field.
func (o *PhysicalVolume) SetIsExtendedAttributesSupported(v bool) {
	o.IsExtendedAttributesSupported.Set(&v)
}
// SetIsExtendedAttributesSupportedNil sets the value for IsExtendedAttributesSupported to be an explicit nil
func (o *PhysicalVolume) SetIsExtendedAttributesSupportedNil() {
	o.IsExtendedAttributesSupported.Set(nil)
}

// UnsetIsExtendedAttributesSupported ensures that no value is present for IsExtendedAttributesSupported, not even an explicit nil
func (o *PhysicalVolume) UnsetIsExtendedAttributesSupported() {
	o.IsExtendedAttributesSupported.Unset()
}

// GetIsProtected returns the IsProtected field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalVolume) GetIsProtected() bool {
	if o == nil || o.IsProtected.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsProtected.Get()
}

// GetIsProtectedOk returns a tuple with the IsProtected field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalVolume) GetIsProtectedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsProtected.Get(), o.IsProtected.IsSet()
}

// HasIsProtected returns a boolean if a field has been set.
func (o *PhysicalVolume) HasIsProtected() bool {
	if o != nil && o.IsProtected.IsSet() {
		return true
	}

	return false
}

// SetIsProtected gets a reference to the given NullableBool and assigns it to the IsProtected field.
func (o *PhysicalVolume) SetIsProtected(v bool) {
	o.IsProtected.Set(&v)
}
// SetIsProtectedNil sets the value for IsProtected to be an explicit nil
func (o *PhysicalVolume) SetIsProtectedNil() {
	o.IsProtected.Set(nil)
}

// UnsetIsProtected ensures that no value is present for IsProtected, not even an explicit nil
func (o *PhysicalVolume) UnsetIsProtected() {
	o.IsProtected.Unset()
}

// GetIsSharedVolume returns the IsSharedVolume field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalVolume) GetIsSharedVolume() bool {
	if o == nil || o.IsSharedVolume.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsSharedVolume.Get()
}

// GetIsSharedVolumeOk returns a tuple with the IsSharedVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalVolume) GetIsSharedVolumeOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsSharedVolume.Get(), o.IsSharedVolume.IsSet()
}

// HasIsSharedVolume returns a boolean if a field has been set.
func (o *PhysicalVolume) HasIsSharedVolume() bool {
	if o != nil && o.IsSharedVolume.IsSet() {
		return true
	}

	return false
}

// SetIsSharedVolume gets a reference to the given NullableBool and assigns it to the IsSharedVolume field.
func (o *PhysicalVolume) SetIsSharedVolume(v bool) {
	o.IsSharedVolume.Set(&v)
}
// SetIsSharedVolumeNil sets the value for IsSharedVolume to be an explicit nil
func (o *PhysicalVolume) SetIsSharedVolumeNil() {
	o.IsSharedVolume.Set(nil)
}

// UnsetIsSharedVolume ensures that no value is present for IsSharedVolume, not even an explicit nil
func (o *PhysicalVolume) UnsetIsSharedVolume() {
	o.IsSharedVolume.Unset()
}

// GetLabel returns the Label field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalVolume) GetLabel() string {
	if o == nil || o.Label.Get() == nil {
		var ret string
		return ret
	}
	return *o.Label.Get()
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalVolume) GetLabelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Label.Get(), o.Label.IsSet()
}

// HasLabel returns a boolean if a field has been set.
func (o *PhysicalVolume) HasLabel() bool {
	if o != nil && o.Label.IsSet() {
		return true
	}

	return false
}

// SetLabel gets a reference to the given NullableString and assigns it to the Label field.
func (o *PhysicalVolume) SetLabel(v string) {
	o.Label.Set(&v)
}
// SetLabelNil sets the value for Label to be an explicit nil
func (o *PhysicalVolume) SetLabelNil() {
	o.Label.Set(nil)
}

// UnsetLabel ensures that no value is present for Label, not even an explicit nil
func (o *PhysicalVolume) UnsetLabel() {
	o.Label.Unset()
}

// GetLogicalSizeBytes returns the LogicalSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalVolume) GetLogicalSizeBytes() int32 {
	if o == nil || o.LogicalSizeBytes.Get() == nil {
		var ret int32
		return ret
	}
	return *o.LogicalSizeBytes.Get()
}

// GetLogicalSizeBytesOk returns a tuple with the LogicalSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalVolume) GetLogicalSizeBytesOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogicalSizeBytes.Get(), o.LogicalSizeBytes.IsSet()
}

// HasLogicalSizeBytes returns a boolean if a field has been set.
func (o *PhysicalVolume) HasLogicalSizeBytes() bool {
	if o != nil && o.LogicalSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetLogicalSizeBytes gets a reference to the given NullableInt32 and assigns it to the LogicalSizeBytes field.
func (o *PhysicalVolume) SetLogicalSizeBytes(v int32) {
	o.LogicalSizeBytes.Set(&v)
}
// SetLogicalSizeBytesNil sets the value for LogicalSizeBytes to be an explicit nil
func (o *PhysicalVolume) SetLogicalSizeBytesNil() {
	o.LogicalSizeBytes.Set(nil)
}

// UnsetLogicalSizeBytes ensures that no value is present for LogicalSizeBytes, not even an explicit nil
func (o *PhysicalVolume) UnsetLogicalSizeBytes() {
	o.LogicalSizeBytes.Unset()
}

// GetMountPoints returns the MountPoints field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalVolume) GetMountPoints() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.MountPoints
}

// GetMountPointsOk returns a tuple with the MountPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalVolume) GetMountPointsOk() (*[]string, bool) {
	if o == nil || o.MountPoints == nil {
		return nil, false
	}
	return &o.MountPoints, true
}

// HasMountPoints returns a boolean if a field has been set.
func (o *PhysicalVolume) HasMountPoints() bool {
	if o != nil && o.MountPoints != nil {
		return true
	}

	return false
}

// SetMountPoints gets a reference to the given []string and assigns it to the MountPoints field.
func (o *PhysicalVolume) SetMountPoints(v []string) {
	o.MountPoints = v
}

// GetMountType returns the MountType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalVolume) GetMountType() string {
	if o == nil || o.MountType.Get() == nil {
		var ret string
		return ret
	}
	return *o.MountType.Get()
}

// GetMountTypeOk returns a tuple with the MountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalVolume) GetMountTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MountType.Get(), o.MountType.IsSet()
}

// HasMountType returns a boolean if a field has been set.
func (o *PhysicalVolume) HasMountType() bool {
	if o != nil && o.MountType.IsSet() {
		return true
	}

	return false
}

// SetMountType gets a reference to the given NullableString and assigns it to the MountType field.
func (o *PhysicalVolume) SetMountType(v string) {
	o.MountType.Set(&v)
}
// SetMountTypeNil sets the value for MountType to be an explicit nil
func (o *PhysicalVolume) SetMountTypeNil() {
	o.MountType.Set(nil)
}

// UnsetMountType ensures that no value is present for MountType, not even an explicit nil
func (o *PhysicalVolume) UnsetMountType() {
	o.MountType.Unset()
}

// GetNetworkPath returns the NetworkPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalVolume) GetNetworkPath() string {
	if o == nil || o.NetworkPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.NetworkPath.Get()
}

// GetNetworkPathOk returns a tuple with the NetworkPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalVolume) GetNetworkPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NetworkPath.Get(), o.NetworkPath.IsSet()
}

// HasNetworkPath returns a boolean if a field has been set.
func (o *PhysicalVolume) HasNetworkPath() bool {
	if o != nil && o.NetworkPath.IsSet() {
		return true
	}

	return false
}

// SetNetworkPath gets a reference to the given NullableString and assigns it to the NetworkPath field.
func (o *PhysicalVolume) SetNetworkPath(v string) {
	o.NetworkPath.Set(&v)
}
// SetNetworkPathNil sets the value for NetworkPath to be an explicit nil
func (o *PhysicalVolume) SetNetworkPathNil() {
	o.NetworkPath.Set(nil)
}

// UnsetNetworkPath ensures that no value is present for NetworkPath, not even an explicit nil
func (o *PhysicalVolume) UnsetNetworkPath() {
	o.NetworkPath.Unset()
}

// GetUsedSizeBytes returns the UsedSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalVolume) GetUsedSizeBytes() int32 {
	if o == nil || o.UsedSizeBytes.Get() == nil {
		var ret int32
		return ret
	}
	return *o.UsedSizeBytes.Get()
}

// GetUsedSizeBytesOk returns a tuple with the UsedSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalVolume) GetUsedSizeBytesOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UsedSizeBytes.Get(), o.UsedSizeBytes.IsSet()
}

// HasUsedSizeBytes returns a boolean if a field has been set.
func (o *PhysicalVolume) HasUsedSizeBytes() bool {
	if o != nil && o.UsedSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetUsedSizeBytes gets a reference to the given NullableInt32 and assigns it to the UsedSizeBytes field.
func (o *PhysicalVolume) SetUsedSizeBytes(v int32) {
	o.UsedSizeBytes.Set(&v)
}
// SetUsedSizeBytesNil sets the value for UsedSizeBytes to be an explicit nil
func (o *PhysicalVolume) SetUsedSizeBytesNil() {
	o.UsedSizeBytes.Set(nil)
}

// UnsetUsedSizeBytes ensures that no value is present for UsedSizeBytes, not even an explicit nil
func (o *PhysicalVolume) UnsetUsedSizeBytes() {
	o.UsedSizeBytes.Unset()
}

func (o PhysicalVolume) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DevicePath.IsSet() {
		toSerialize["devicePath"] = o.DevicePath.Get()
	}
	if o.Guid.IsSet() {
		toSerialize["guid"] = o.Guid.Get()
	}
	if o.IsBootVolume.IsSet() {
		toSerialize["isBootVolume"] = o.IsBootVolume.Get()
	}
	if o.IsExtendedAttributesSupported.IsSet() {
		toSerialize["isExtendedAttributesSupported"] = o.IsExtendedAttributesSupported.Get()
	}
	if o.IsProtected.IsSet() {
		toSerialize["isProtected"] = o.IsProtected.Get()
	}
	if o.IsSharedVolume.IsSet() {
		toSerialize["isSharedVolume"] = o.IsSharedVolume.Get()
	}
	if o.Label.IsSet() {
		toSerialize["label"] = o.Label.Get()
	}
	if o.LogicalSizeBytes.IsSet() {
		toSerialize["logicalSizeBytes"] = o.LogicalSizeBytes.Get()
	}
	if o.MountPoints != nil {
		toSerialize["mountPoints"] = o.MountPoints
	}
	if o.MountType.IsSet() {
		toSerialize["mountType"] = o.MountType.Get()
	}
	if o.NetworkPath.IsSet() {
		toSerialize["networkPath"] = o.NetworkPath.Get()
	}
	if o.UsedSizeBytes.IsSet() {
		toSerialize["usedSizeBytes"] = o.UsedSizeBytes.Get()
	}
	return json.Marshal(toSerialize)
}

type NullablePhysicalVolume struct {
	value *PhysicalVolume
	isSet bool
}

func (v NullablePhysicalVolume) Get() *PhysicalVolume {
	return v.value
}

func (v *NullablePhysicalVolume) Set(val *PhysicalVolume) {
	v.value = val
	v.isSet = true
}

func (v NullablePhysicalVolume) IsSet() bool {
	return v.isSet
}

func (v *NullablePhysicalVolume) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhysicalVolume(val *PhysicalVolume) *NullablePhysicalVolume {
	return &NullablePhysicalVolume{value: val, isSet: true}
}

func (v NullablePhysicalVolume) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhysicalVolume) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


