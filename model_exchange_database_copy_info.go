/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ExchangeDatabaseCopyInfo Specifies the information about the copy of the Exchange Database on particular Exchange Application Server that is part of DAG.
type ExchangeDatabaseCopyInfo struct {
	// Specifies the activation preference number assigned for this database copy.
	ActivationPreferenceNumber NullableInt32 `json:"activationPreferenceNumber,omitempty"`
	// Specifies the entity id of the Exchange Application Server which has this database copy.
	AppServerId NullableInt64 `json:"appServerId,omitempty"`
	// Specifies if backup is supported for the Exchange database copy.
	BackupSupported NullableBool `json:"backupSupported,omitempty"`
	// Specifies any reason(s) for Exchange database backup not supported.
	BackupUnsupportedReasons []string `json:"backupUnsupportedReasons,omitempty"`
	// Specifies the Guid of the Exchange Database Copy.
	CopyGuid NullableString `json:"copyGuid,omitempty"`
	// Specifies the time when the database is created in Unix epoch time in milliseconds.
	CreatedTimeMsecs NullableInt64 `json:"createdTimeMsecs,omitempty"`
	// Specifies the state of the Exchange database copy. Specifies the state of Exchange Database Copy.   'kUnknown' indicates the status is not known. 'kMounted' indicates the exchange database copy is mounted and healthy. 'kError' indicates  the  exchange  database  copy  is unmounted or partially mounted or is in error state.
	DatabaseState NullableString `json:"databaseState,omitempty"`
	// Specifies the size of the Exchange database copy in bytes.
	DbSizeBytes NullableInt64 `json:"dbSizeBytes,omitempty"`
	// Specifies the guid of the Exchange Database.
	Dbguid NullableString `json:"dbguid,omitempty"`
	// Specifies the fully qualified domain name of the Exchange Server on which the database copy is hosted.
	Fqdn NullableString `json:"fqdn,omitempty"`
	// Specifies if the Exchange database copy present on the Exchange Application server is active or passive.
	IsActiveCopy NullableBool `json:"isActiveCopy,omitempty"`
	// Specifes the name of the Exchange Database.
	Name NullableString `json:"name,omitempty"`
	// Specifies the owner entity id of the Exchange Application Server which has this database copy.
	OwnerId NullableInt64 `json:"ownerId,omitempty"`
	// Specifies the display name of the Exchange Application Server on which the database copy is hosted.
	ServerName NullableString `json:"serverName,omitempty"`
	// Specifies UTC time offset of database creation time.
	UtcOffsetMin NullableInt64 `json:"utcOffsetMin,omitempty"`
}

// NewExchangeDatabaseCopyInfo instantiates a new ExchangeDatabaseCopyInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExchangeDatabaseCopyInfo() *ExchangeDatabaseCopyInfo {
	this := ExchangeDatabaseCopyInfo{}
	return &this
}

// NewExchangeDatabaseCopyInfoWithDefaults instantiates a new ExchangeDatabaseCopyInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExchangeDatabaseCopyInfoWithDefaults() *ExchangeDatabaseCopyInfo {
	this := ExchangeDatabaseCopyInfo{}
	return &this
}

// GetActivationPreferenceNumber returns the ActivationPreferenceNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeDatabaseCopyInfo) GetActivationPreferenceNumber() int32 {
	if o == nil || o.ActivationPreferenceNumber.Get() == nil {
		var ret int32
		return ret
	}
	return *o.ActivationPreferenceNumber.Get()
}

// GetActivationPreferenceNumberOk returns a tuple with the ActivationPreferenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeDatabaseCopyInfo) GetActivationPreferenceNumberOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ActivationPreferenceNumber.Get(), o.ActivationPreferenceNumber.IsSet()
}

// HasActivationPreferenceNumber returns a boolean if a field has been set.
func (o *ExchangeDatabaseCopyInfo) HasActivationPreferenceNumber() bool {
	if o != nil && o.ActivationPreferenceNumber.IsSet() {
		return true
	}

	return false
}

// SetActivationPreferenceNumber gets a reference to the given NullableInt32 and assigns it to the ActivationPreferenceNumber field.
func (o *ExchangeDatabaseCopyInfo) SetActivationPreferenceNumber(v int32) {
	o.ActivationPreferenceNumber.Set(&v)
}
// SetActivationPreferenceNumberNil sets the value for ActivationPreferenceNumber to be an explicit nil
func (o *ExchangeDatabaseCopyInfo) SetActivationPreferenceNumberNil() {
	o.ActivationPreferenceNumber.Set(nil)
}

// UnsetActivationPreferenceNumber ensures that no value is present for ActivationPreferenceNumber, not even an explicit nil
func (o *ExchangeDatabaseCopyInfo) UnsetActivationPreferenceNumber() {
	o.ActivationPreferenceNumber.Unset()
}

// GetAppServerId returns the AppServerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeDatabaseCopyInfo) GetAppServerId() int64 {
	if o == nil || o.AppServerId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.AppServerId.Get()
}

// GetAppServerIdOk returns a tuple with the AppServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeDatabaseCopyInfo) GetAppServerIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AppServerId.Get(), o.AppServerId.IsSet()
}

// HasAppServerId returns a boolean if a field has been set.
func (o *ExchangeDatabaseCopyInfo) HasAppServerId() bool {
	if o != nil && o.AppServerId.IsSet() {
		return true
	}

	return false
}

// SetAppServerId gets a reference to the given NullableInt64 and assigns it to the AppServerId field.
func (o *ExchangeDatabaseCopyInfo) SetAppServerId(v int64) {
	o.AppServerId.Set(&v)
}
// SetAppServerIdNil sets the value for AppServerId to be an explicit nil
func (o *ExchangeDatabaseCopyInfo) SetAppServerIdNil() {
	o.AppServerId.Set(nil)
}

// UnsetAppServerId ensures that no value is present for AppServerId, not even an explicit nil
func (o *ExchangeDatabaseCopyInfo) UnsetAppServerId() {
	o.AppServerId.Unset()
}

// GetBackupSupported returns the BackupSupported field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeDatabaseCopyInfo) GetBackupSupported() bool {
	if o == nil || o.BackupSupported.Get() == nil {
		var ret bool
		return ret
	}
	return *o.BackupSupported.Get()
}

// GetBackupSupportedOk returns a tuple with the BackupSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeDatabaseCopyInfo) GetBackupSupportedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BackupSupported.Get(), o.BackupSupported.IsSet()
}

// HasBackupSupported returns a boolean if a field has been set.
func (o *ExchangeDatabaseCopyInfo) HasBackupSupported() bool {
	if o != nil && o.BackupSupported.IsSet() {
		return true
	}

	return false
}

// SetBackupSupported gets a reference to the given NullableBool and assigns it to the BackupSupported field.
func (o *ExchangeDatabaseCopyInfo) SetBackupSupported(v bool) {
	o.BackupSupported.Set(&v)
}
// SetBackupSupportedNil sets the value for BackupSupported to be an explicit nil
func (o *ExchangeDatabaseCopyInfo) SetBackupSupportedNil() {
	o.BackupSupported.Set(nil)
}

// UnsetBackupSupported ensures that no value is present for BackupSupported, not even an explicit nil
func (o *ExchangeDatabaseCopyInfo) UnsetBackupSupported() {
	o.BackupSupported.Unset()
}

// GetBackupUnsupportedReasons returns the BackupUnsupportedReasons field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeDatabaseCopyInfo) GetBackupUnsupportedReasons() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.BackupUnsupportedReasons
}

// GetBackupUnsupportedReasonsOk returns a tuple with the BackupUnsupportedReasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeDatabaseCopyInfo) GetBackupUnsupportedReasonsOk() (*[]string, bool) {
	if o == nil || o.BackupUnsupportedReasons == nil {
		return nil, false
	}
	return &o.BackupUnsupportedReasons, true
}

// HasBackupUnsupportedReasons returns a boolean if a field has been set.
func (o *ExchangeDatabaseCopyInfo) HasBackupUnsupportedReasons() bool {
	if o != nil && o.BackupUnsupportedReasons != nil {
		return true
	}

	return false
}

// SetBackupUnsupportedReasons gets a reference to the given []string and assigns it to the BackupUnsupportedReasons field.
func (o *ExchangeDatabaseCopyInfo) SetBackupUnsupportedReasons(v []string) {
	o.BackupUnsupportedReasons = v
}

// GetCopyGuid returns the CopyGuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeDatabaseCopyInfo) GetCopyGuid() string {
	if o == nil || o.CopyGuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.CopyGuid.Get()
}

// GetCopyGuidOk returns a tuple with the CopyGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeDatabaseCopyInfo) GetCopyGuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CopyGuid.Get(), o.CopyGuid.IsSet()
}

// HasCopyGuid returns a boolean if a field has been set.
func (o *ExchangeDatabaseCopyInfo) HasCopyGuid() bool {
	if o != nil && o.CopyGuid.IsSet() {
		return true
	}

	return false
}

// SetCopyGuid gets a reference to the given NullableString and assigns it to the CopyGuid field.
func (o *ExchangeDatabaseCopyInfo) SetCopyGuid(v string) {
	o.CopyGuid.Set(&v)
}
// SetCopyGuidNil sets the value for CopyGuid to be an explicit nil
func (o *ExchangeDatabaseCopyInfo) SetCopyGuidNil() {
	o.CopyGuid.Set(nil)
}

// UnsetCopyGuid ensures that no value is present for CopyGuid, not even an explicit nil
func (o *ExchangeDatabaseCopyInfo) UnsetCopyGuid() {
	o.CopyGuid.Unset()
}

// GetCreatedTimeMsecs returns the CreatedTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeDatabaseCopyInfo) GetCreatedTimeMsecs() int64 {
	if o == nil || o.CreatedTimeMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.CreatedTimeMsecs.Get()
}

// GetCreatedTimeMsecsOk returns a tuple with the CreatedTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeDatabaseCopyInfo) GetCreatedTimeMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CreatedTimeMsecs.Get(), o.CreatedTimeMsecs.IsSet()
}

// HasCreatedTimeMsecs returns a boolean if a field has been set.
func (o *ExchangeDatabaseCopyInfo) HasCreatedTimeMsecs() bool {
	if o != nil && o.CreatedTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetCreatedTimeMsecs gets a reference to the given NullableInt64 and assigns it to the CreatedTimeMsecs field.
func (o *ExchangeDatabaseCopyInfo) SetCreatedTimeMsecs(v int64) {
	o.CreatedTimeMsecs.Set(&v)
}
// SetCreatedTimeMsecsNil sets the value for CreatedTimeMsecs to be an explicit nil
func (o *ExchangeDatabaseCopyInfo) SetCreatedTimeMsecsNil() {
	o.CreatedTimeMsecs.Set(nil)
}

// UnsetCreatedTimeMsecs ensures that no value is present for CreatedTimeMsecs, not even an explicit nil
func (o *ExchangeDatabaseCopyInfo) UnsetCreatedTimeMsecs() {
	o.CreatedTimeMsecs.Unset()
}

// GetDatabaseState returns the DatabaseState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeDatabaseCopyInfo) GetDatabaseState() string {
	if o == nil || o.DatabaseState.Get() == nil {
		var ret string
		return ret
	}
	return *o.DatabaseState.Get()
}

// GetDatabaseStateOk returns a tuple with the DatabaseState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeDatabaseCopyInfo) GetDatabaseStateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DatabaseState.Get(), o.DatabaseState.IsSet()
}

// HasDatabaseState returns a boolean if a field has been set.
func (o *ExchangeDatabaseCopyInfo) HasDatabaseState() bool {
	if o != nil && o.DatabaseState.IsSet() {
		return true
	}

	return false
}

// SetDatabaseState gets a reference to the given NullableString and assigns it to the DatabaseState field.
func (o *ExchangeDatabaseCopyInfo) SetDatabaseState(v string) {
	o.DatabaseState.Set(&v)
}
// SetDatabaseStateNil sets the value for DatabaseState to be an explicit nil
func (o *ExchangeDatabaseCopyInfo) SetDatabaseStateNil() {
	o.DatabaseState.Set(nil)
}

// UnsetDatabaseState ensures that no value is present for DatabaseState, not even an explicit nil
func (o *ExchangeDatabaseCopyInfo) UnsetDatabaseState() {
	o.DatabaseState.Unset()
}

// GetDbSizeBytes returns the DbSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeDatabaseCopyInfo) GetDbSizeBytes() int64 {
	if o == nil || o.DbSizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DbSizeBytes.Get()
}

// GetDbSizeBytesOk returns a tuple with the DbSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeDatabaseCopyInfo) GetDbSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DbSizeBytes.Get(), o.DbSizeBytes.IsSet()
}

// HasDbSizeBytes returns a boolean if a field has been set.
func (o *ExchangeDatabaseCopyInfo) HasDbSizeBytes() bool {
	if o != nil && o.DbSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetDbSizeBytes gets a reference to the given NullableInt64 and assigns it to the DbSizeBytes field.
func (o *ExchangeDatabaseCopyInfo) SetDbSizeBytes(v int64) {
	o.DbSizeBytes.Set(&v)
}
// SetDbSizeBytesNil sets the value for DbSizeBytes to be an explicit nil
func (o *ExchangeDatabaseCopyInfo) SetDbSizeBytesNil() {
	o.DbSizeBytes.Set(nil)
}

// UnsetDbSizeBytes ensures that no value is present for DbSizeBytes, not even an explicit nil
func (o *ExchangeDatabaseCopyInfo) UnsetDbSizeBytes() {
	o.DbSizeBytes.Unset()
}

// GetDbguid returns the Dbguid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeDatabaseCopyInfo) GetDbguid() string {
	if o == nil || o.Dbguid.Get() == nil {
		var ret string
		return ret
	}
	return *o.Dbguid.Get()
}

// GetDbguidOk returns a tuple with the Dbguid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeDatabaseCopyInfo) GetDbguidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Dbguid.Get(), o.Dbguid.IsSet()
}

// HasDbguid returns a boolean if a field has been set.
func (o *ExchangeDatabaseCopyInfo) HasDbguid() bool {
	if o != nil && o.Dbguid.IsSet() {
		return true
	}

	return false
}

// SetDbguid gets a reference to the given NullableString and assigns it to the Dbguid field.
func (o *ExchangeDatabaseCopyInfo) SetDbguid(v string) {
	o.Dbguid.Set(&v)
}
// SetDbguidNil sets the value for Dbguid to be an explicit nil
func (o *ExchangeDatabaseCopyInfo) SetDbguidNil() {
	o.Dbguid.Set(nil)
}

// UnsetDbguid ensures that no value is present for Dbguid, not even an explicit nil
func (o *ExchangeDatabaseCopyInfo) UnsetDbguid() {
	o.Dbguid.Unset()
}

// GetFqdn returns the Fqdn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeDatabaseCopyInfo) GetFqdn() string {
	if o == nil || o.Fqdn.Get() == nil {
		var ret string
		return ret
	}
	return *o.Fqdn.Get()
}

// GetFqdnOk returns a tuple with the Fqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeDatabaseCopyInfo) GetFqdnOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Fqdn.Get(), o.Fqdn.IsSet()
}

// HasFqdn returns a boolean if a field has been set.
func (o *ExchangeDatabaseCopyInfo) HasFqdn() bool {
	if o != nil && o.Fqdn.IsSet() {
		return true
	}

	return false
}

// SetFqdn gets a reference to the given NullableString and assigns it to the Fqdn field.
func (o *ExchangeDatabaseCopyInfo) SetFqdn(v string) {
	o.Fqdn.Set(&v)
}
// SetFqdnNil sets the value for Fqdn to be an explicit nil
func (o *ExchangeDatabaseCopyInfo) SetFqdnNil() {
	o.Fqdn.Set(nil)
}

// UnsetFqdn ensures that no value is present for Fqdn, not even an explicit nil
func (o *ExchangeDatabaseCopyInfo) UnsetFqdn() {
	o.Fqdn.Unset()
}

// GetIsActiveCopy returns the IsActiveCopy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeDatabaseCopyInfo) GetIsActiveCopy() bool {
	if o == nil || o.IsActiveCopy.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsActiveCopy.Get()
}

// GetIsActiveCopyOk returns a tuple with the IsActiveCopy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeDatabaseCopyInfo) GetIsActiveCopyOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsActiveCopy.Get(), o.IsActiveCopy.IsSet()
}

// HasIsActiveCopy returns a boolean if a field has been set.
func (o *ExchangeDatabaseCopyInfo) HasIsActiveCopy() bool {
	if o != nil && o.IsActiveCopy.IsSet() {
		return true
	}

	return false
}

// SetIsActiveCopy gets a reference to the given NullableBool and assigns it to the IsActiveCopy field.
func (o *ExchangeDatabaseCopyInfo) SetIsActiveCopy(v bool) {
	o.IsActiveCopy.Set(&v)
}
// SetIsActiveCopyNil sets the value for IsActiveCopy to be an explicit nil
func (o *ExchangeDatabaseCopyInfo) SetIsActiveCopyNil() {
	o.IsActiveCopy.Set(nil)
}

// UnsetIsActiveCopy ensures that no value is present for IsActiveCopy, not even an explicit nil
func (o *ExchangeDatabaseCopyInfo) UnsetIsActiveCopy() {
	o.IsActiveCopy.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeDatabaseCopyInfo) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeDatabaseCopyInfo) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ExchangeDatabaseCopyInfo) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ExchangeDatabaseCopyInfo) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *ExchangeDatabaseCopyInfo) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ExchangeDatabaseCopyInfo) UnsetName() {
	o.Name.Unset()
}

// GetOwnerId returns the OwnerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeDatabaseCopyInfo) GetOwnerId() int64 {
	if o == nil || o.OwnerId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.OwnerId.Get()
}

// GetOwnerIdOk returns a tuple with the OwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeDatabaseCopyInfo) GetOwnerIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OwnerId.Get(), o.OwnerId.IsSet()
}

// HasOwnerId returns a boolean if a field has been set.
func (o *ExchangeDatabaseCopyInfo) HasOwnerId() bool {
	if o != nil && o.OwnerId.IsSet() {
		return true
	}

	return false
}

// SetOwnerId gets a reference to the given NullableInt64 and assigns it to the OwnerId field.
func (o *ExchangeDatabaseCopyInfo) SetOwnerId(v int64) {
	o.OwnerId.Set(&v)
}
// SetOwnerIdNil sets the value for OwnerId to be an explicit nil
func (o *ExchangeDatabaseCopyInfo) SetOwnerIdNil() {
	o.OwnerId.Set(nil)
}

// UnsetOwnerId ensures that no value is present for OwnerId, not even an explicit nil
func (o *ExchangeDatabaseCopyInfo) UnsetOwnerId() {
	o.OwnerId.Unset()
}

// GetServerName returns the ServerName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeDatabaseCopyInfo) GetServerName() string {
	if o == nil || o.ServerName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ServerName.Get()
}

// GetServerNameOk returns a tuple with the ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeDatabaseCopyInfo) GetServerNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ServerName.Get(), o.ServerName.IsSet()
}

// HasServerName returns a boolean if a field has been set.
func (o *ExchangeDatabaseCopyInfo) HasServerName() bool {
	if o != nil && o.ServerName.IsSet() {
		return true
	}

	return false
}

// SetServerName gets a reference to the given NullableString and assigns it to the ServerName field.
func (o *ExchangeDatabaseCopyInfo) SetServerName(v string) {
	o.ServerName.Set(&v)
}
// SetServerNameNil sets the value for ServerName to be an explicit nil
func (o *ExchangeDatabaseCopyInfo) SetServerNameNil() {
	o.ServerName.Set(nil)
}

// UnsetServerName ensures that no value is present for ServerName, not even an explicit nil
func (o *ExchangeDatabaseCopyInfo) UnsetServerName() {
	o.ServerName.Unset()
}

// GetUtcOffsetMin returns the UtcOffsetMin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeDatabaseCopyInfo) GetUtcOffsetMin() int64 {
	if o == nil || o.UtcOffsetMin.Get() == nil {
		var ret int64
		return ret
	}
	return *o.UtcOffsetMin.Get()
}

// GetUtcOffsetMinOk returns a tuple with the UtcOffsetMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeDatabaseCopyInfo) GetUtcOffsetMinOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UtcOffsetMin.Get(), o.UtcOffsetMin.IsSet()
}

// HasUtcOffsetMin returns a boolean if a field has been set.
func (o *ExchangeDatabaseCopyInfo) HasUtcOffsetMin() bool {
	if o != nil && o.UtcOffsetMin.IsSet() {
		return true
	}

	return false
}

// SetUtcOffsetMin gets a reference to the given NullableInt64 and assigns it to the UtcOffsetMin field.
func (o *ExchangeDatabaseCopyInfo) SetUtcOffsetMin(v int64) {
	o.UtcOffsetMin.Set(&v)
}
// SetUtcOffsetMinNil sets the value for UtcOffsetMin to be an explicit nil
func (o *ExchangeDatabaseCopyInfo) SetUtcOffsetMinNil() {
	o.UtcOffsetMin.Set(nil)
}

// UnsetUtcOffsetMin ensures that no value is present for UtcOffsetMin, not even an explicit nil
func (o *ExchangeDatabaseCopyInfo) UnsetUtcOffsetMin() {
	o.UtcOffsetMin.Unset()
}

func (o ExchangeDatabaseCopyInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ActivationPreferenceNumber.IsSet() {
		toSerialize["activationPreferenceNumber"] = o.ActivationPreferenceNumber.Get()
	}
	if o.AppServerId.IsSet() {
		toSerialize["appServerId"] = o.AppServerId.Get()
	}
	if o.BackupSupported.IsSet() {
		toSerialize["backupSupported"] = o.BackupSupported.Get()
	}
	if o.BackupUnsupportedReasons != nil {
		toSerialize["backupUnsupportedReasons"] = o.BackupUnsupportedReasons
	}
	if o.CopyGuid.IsSet() {
		toSerialize["copyGuid"] = o.CopyGuid.Get()
	}
	if o.CreatedTimeMsecs.IsSet() {
		toSerialize["createdTimeMsecs"] = o.CreatedTimeMsecs.Get()
	}
	if o.DatabaseState.IsSet() {
		toSerialize["databaseState"] = o.DatabaseState.Get()
	}
	if o.DbSizeBytes.IsSet() {
		toSerialize["dbSizeBytes"] = o.DbSizeBytes.Get()
	}
	if o.Dbguid.IsSet() {
		toSerialize["dbguid"] = o.Dbguid.Get()
	}
	if o.Fqdn.IsSet() {
		toSerialize["fqdn"] = o.Fqdn.Get()
	}
	if o.IsActiveCopy.IsSet() {
		toSerialize["isActiveCopy"] = o.IsActiveCopy.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.OwnerId.IsSet() {
		toSerialize["ownerId"] = o.OwnerId.Get()
	}
	if o.ServerName.IsSet() {
		toSerialize["serverName"] = o.ServerName.Get()
	}
	if o.UtcOffsetMin.IsSet() {
		toSerialize["utcOffsetMin"] = o.UtcOffsetMin.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableExchangeDatabaseCopyInfo struct {
	value *ExchangeDatabaseCopyInfo
	isSet bool
}

func (v NullableExchangeDatabaseCopyInfo) Get() *ExchangeDatabaseCopyInfo {
	return v.value
}

func (v *NullableExchangeDatabaseCopyInfo) Set(val *ExchangeDatabaseCopyInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableExchangeDatabaseCopyInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableExchangeDatabaseCopyInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchangeDatabaseCopyInfo(val *ExchangeDatabaseCopyInfo) *NullableExchangeDatabaseCopyInfo {
	return &NullableExchangeDatabaseCopyInfo{value: val, isSet: true}
}

func (v NullableExchangeDatabaseCopyInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchangeDatabaseCopyInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


