/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// Tenant Specifies details about a tenant.
type Tenant struct {
	// Specifies the active directories this tenant is associated to.
	ActiveDirectories []ActiveDirectoryEntry `json:"activeDirectories,omitempty"`
	// Specifies whether bifrost (Ambassador proxy) is enabled for tenant.
	BifrostEnabled NullableBool `json:"bifrostEnabled,omitempty"`
	// The hostname for Cohesity cluster as seen by tenants and as is routable from the tenant's network. Tenant's VLAN's hostname, if available can be used instead but it is mandatory to provide this value if there's no VLAN hostname to use. Also, when set, this field would take precedence over VLAN hostname.
	ClusterHostname NullableString `json:"clusterHostname,omitempty"`
	// Set of IPs as seen from the tenant's network for the Cohesity cluster. Only one from 'ClusterHostname' and 'ClusterIps' is needed.
	ClusterIps []string `json:"clusterIps,omitempty"`
	// Specifies the epoch time in milliseconds when the tenant account was created on the Cohesity Cluster.
	CreatedTimeMsecs NullableInt64 `json:"createdTimeMsecs,omitempty"`
	// Specifies if the Tenant is deleted.
	Deleted NullableBool `json:"deleted,omitempty"`
	// Specifies the timestamp at which the tenant was deleted.
	DeletedTimeMsecs NullableInt64 `json:"deletedTimeMsecs,omitempty"`
	// Specifies if the object collection is complete for the tenant.
	DeletionFinished NullableBool `json:"deletionFinished,omitempty"`
	// Specifies the current deletion state of object categories.
	DeletionInfoVec []TenantDeletionInfo `json:"deletionInfoVec,omitempty"`
	// Specifies the description of this tenant.
	Description NullableString `json:"description,omitempty"`
	// Specifies the EntityIds this tenant is associated to.
	EntityIds []int64 `json:"entityIds,omitempty"`
	// Specifies the epoch time in milliseconds when the tenant account was last modified on the Cohesity Cluster.
	LastUpdatedTimeMsecs NullableInt64 `json:"lastUpdatedTimeMsecs,omitempty"`
	// Specifies the ldap providers this tenant is associated to.
	LdapProviders []LdapProviderResponse `json:"ldapProviders,omitempty"`
	// Specifies the name of the tenant.
	Name NullableString `json:"name,omitempty"`
	// Specifies the organization suffix needed to construct tenant id. Tenant id is not completely auto generated rather chosen by tenant/SP admin as we needed same tenant id on multiple clusters to support replication across clusters, etc.
	OrgSuffix NullableString `json:"orgSuffix,omitempty"`
	// Specifies the parent tenant of this tenant if available.
	ParentTenantId NullableString `json:"parentTenantId,omitempty"`
	// Specifies the PolicyIds this tenant is associated to.
	PolicyIds []string `json:"policyIds,omitempty"`
	// Specifies the ProtectionJobs this tenant is associated to.
	ProtectionJobs []BackupJobProto `json:"protectionJobs,omitempty"`
	// Service provider can optionally unsubscribe from the Tenant Alert Emails.
	SubscribeToAlertEmails NullableBool `json:"subscribeToAlertEmails,omitempty"`
	SwiftConfig *SwiftParams `json:"swiftConfig,omitempty"`
	// Specifies the unique id of the tenant.
	TenantId NullableString `json:"tenantId,omitempty"`
	// Specifies the ViewBoxIds this tenant is associated to.
	ViewBoxIds []int64 `json:"viewBoxIds,omitempty"`
	// Specifies the Views this tenant is associated to.
	Views []View `json:"views,omitempty"`
	// Specifies the VlanIfaceNames this tenant is associated to, in the format of bond1.200.
	VlanIfaceNames []string `json:"vlanIfaceNames,omitempty"`
}

// NewTenant instantiates a new Tenant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenant() *Tenant {
	this := Tenant{}
	return &this
}

// NewTenantWithDefaults instantiates a new Tenant object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantWithDefaults() *Tenant {
	this := Tenant{}
	return &this
}

// GetActiveDirectories returns the ActiveDirectories field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Tenant) GetActiveDirectories() []ActiveDirectoryEntry {
	if o == nil  {
		var ret []ActiveDirectoryEntry
		return ret
	}
	return o.ActiveDirectories
}

// GetActiveDirectoriesOk returns a tuple with the ActiveDirectories field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Tenant) GetActiveDirectoriesOk() (*[]ActiveDirectoryEntry, bool) {
	if o == nil || o.ActiveDirectories == nil {
		return nil, false
	}
	return &o.ActiveDirectories, true
}

// HasActiveDirectories returns a boolean if a field has been set.
func (o *Tenant) HasActiveDirectories() bool {
	if o != nil && o.ActiveDirectories != nil {
		return true
	}

	return false
}

// SetActiveDirectories gets a reference to the given []ActiveDirectoryEntry and assigns it to the ActiveDirectories field.
func (o *Tenant) SetActiveDirectories(v []ActiveDirectoryEntry) {
	o.ActiveDirectories = v
}

// GetBifrostEnabled returns the BifrostEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Tenant) GetBifrostEnabled() bool {
	if o == nil || o.BifrostEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.BifrostEnabled.Get()
}

// GetBifrostEnabledOk returns a tuple with the BifrostEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Tenant) GetBifrostEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BifrostEnabled.Get(), o.BifrostEnabled.IsSet()
}

// HasBifrostEnabled returns a boolean if a field has been set.
func (o *Tenant) HasBifrostEnabled() bool {
	if o != nil && o.BifrostEnabled.IsSet() {
		return true
	}

	return false
}

// SetBifrostEnabled gets a reference to the given NullableBool and assigns it to the BifrostEnabled field.
func (o *Tenant) SetBifrostEnabled(v bool) {
	o.BifrostEnabled.Set(&v)
}
// SetBifrostEnabledNil sets the value for BifrostEnabled to be an explicit nil
func (o *Tenant) SetBifrostEnabledNil() {
	o.BifrostEnabled.Set(nil)
}

// UnsetBifrostEnabled ensures that no value is present for BifrostEnabled, not even an explicit nil
func (o *Tenant) UnsetBifrostEnabled() {
	o.BifrostEnabled.Unset()
}

// GetClusterHostname returns the ClusterHostname field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Tenant) GetClusterHostname() string {
	if o == nil || o.ClusterHostname.Get() == nil {
		var ret string
		return ret
	}
	return *o.ClusterHostname.Get()
}

// GetClusterHostnameOk returns a tuple with the ClusterHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Tenant) GetClusterHostnameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterHostname.Get(), o.ClusterHostname.IsSet()
}

// HasClusterHostname returns a boolean if a field has been set.
func (o *Tenant) HasClusterHostname() bool {
	if o != nil && o.ClusterHostname.IsSet() {
		return true
	}

	return false
}

// SetClusterHostname gets a reference to the given NullableString and assigns it to the ClusterHostname field.
func (o *Tenant) SetClusterHostname(v string) {
	o.ClusterHostname.Set(&v)
}
// SetClusterHostnameNil sets the value for ClusterHostname to be an explicit nil
func (o *Tenant) SetClusterHostnameNil() {
	o.ClusterHostname.Set(nil)
}

// UnsetClusterHostname ensures that no value is present for ClusterHostname, not even an explicit nil
func (o *Tenant) UnsetClusterHostname() {
	o.ClusterHostname.Unset()
}

// GetClusterIps returns the ClusterIps field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Tenant) GetClusterIps() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.ClusterIps
}

// GetClusterIpsOk returns a tuple with the ClusterIps field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Tenant) GetClusterIpsOk() (*[]string, bool) {
	if o == nil || o.ClusterIps == nil {
		return nil, false
	}
	return &o.ClusterIps, true
}

// HasClusterIps returns a boolean if a field has been set.
func (o *Tenant) HasClusterIps() bool {
	if o != nil && o.ClusterIps != nil {
		return true
	}

	return false
}

// SetClusterIps gets a reference to the given []string and assigns it to the ClusterIps field.
func (o *Tenant) SetClusterIps(v []string) {
	o.ClusterIps = v
}

// GetCreatedTimeMsecs returns the CreatedTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Tenant) GetCreatedTimeMsecs() int64 {
	if o == nil || o.CreatedTimeMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.CreatedTimeMsecs.Get()
}

// GetCreatedTimeMsecsOk returns a tuple with the CreatedTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Tenant) GetCreatedTimeMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CreatedTimeMsecs.Get(), o.CreatedTimeMsecs.IsSet()
}

// HasCreatedTimeMsecs returns a boolean if a field has been set.
func (o *Tenant) HasCreatedTimeMsecs() bool {
	if o != nil && o.CreatedTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetCreatedTimeMsecs gets a reference to the given NullableInt64 and assigns it to the CreatedTimeMsecs field.
func (o *Tenant) SetCreatedTimeMsecs(v int64) {
	o.CreatedTimeMsecs.Set(&v)
}
// SetCreatedTimeMsecsNil sets the value for CreatedTimeMsecs to be an explicit nil
func (o *Tenant) SetCreatedTimeMsecsNil() {
	o.CreatedTimeMsecs.Set(nil)
}

// UnsetCreatedTimeMsecs ensures that no value is present for CreatedTimeMsecs, not even an explicit nil
func (o *Tenant) UnsetCreatedTimeMsecs() {
	o.CreatedTimeMsecs.Unset()
}

// GetDeleted returns the Deleted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Tenant) GetDeleted() bool {
	if o == nil || o.Deleted.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Deleted.Get()
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Tenant) GetDeletedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Deleted.Get(), o.Deleted.IsSet()
}

// HasDeleted returns a boolean if a field has been set.
func (o *Tenant) HasDeleted() bool {
	if o != nil && o.Deleted.IsSet() {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given NullableBool and assigns it to the Deleted field.
func (o *Tenant) SetDeleted(v bool) {
	o.Deleted.Set(&v)
}
// SetDeletedNil sets the value for Deleted to be an explicit nil
func (o *Tenant) SetDeletedNil() {
	o.Deleted.Set(nil)
}

// UnsetDeleted ensures that no value is present for Deleted, not even an explicit nil
func (o *Tenant) UnsetDeleted() {
	o.Deleted.Unset()
}

// GetDeletedTimeMsecs returns the DeletedTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Tenant) GetDeletedTimeMsecs() int64 {
	if o == nil || o.DeletedTimeMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DeletedTimeMsecs.Get()
}

// GetDeletedTimeMsecsOk returns a tuple with the DeletedTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Tenant) GetDeletedTimeMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DeletedTimeMsecs.Get(), o.DeletedTimeMsecs.IsSet()
}

// HasDeletedTimeMsecs returns a boolean if a field has been set.
func (o *Tenant) HasDeletedTimeMsecs() bool {
	if o != nil && o.DeletedTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetDeletedTimeMsecs gets a reference to the given NullableInt64 and assigns it to the DeletedTimeMsecs field.
func (o *Tenant) SetDeletedTimeMsecs(v int64) {
	o.DeletedTimeMsecs.Set(&v)
}
// SetDeletedTimeMsecsNil sets the value for DeletedTimeMsecs to be an explicit nil
func (o *Tenant) SetDeletedTimeMsecsNil() {
	o.DeletedTimeMsecs.Set(nil)
}

// UnsetDeletedTimeMsecs ensures that no value is present for DeletedTimeMsecs, not even an explicit nil
func (o *Tenant) UnsetDeletedTimeMsecs() {
	o.DeletedTimeMsecs.Unset()
}

// GetDeletionFinished returns the DeletionFinished field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Tenant) GetDeletionFinished() bool {
	if o == nil || o.DeletionFinished.Get() == nil {
		var ret bool
		return ret
	}
	return *o.DeletionFinished.Get()
}

// GetDeletionFinishedOk returns a tuple with the DeletionFinished field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Tenant) GetDeletionFinishedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DeletionFinished.Get(), o.DeletionFinished.IsSet()
}

// HasDeletionFinished returns a boolean if a field has been set.
func (o *Tenant) HasDeletionFinished() bool {
	if o != nil && o.DeletionFinished.IsSet() {
		return true
	}

	return false
}

// SetDeletionFinished gets a reference to the given NullableBool and assigns it to the DeletionFinished field.
func (o *Tenant) SetDeletionFinished(v bool) {
	o.DeletionFinished.Set(&v)
}
// SetDeletionFinishedNil sets the value for DeletionFinished to be an explicit nil
func (o *Tenant) SetDeletionFinishedNil() {
	o.DeletionFinished.Set(nil)
}

// UnsetDeletionFinished ensures that no value is present for DeletionFinished, not even an explicit nil
func (o *Tenant) UnsetDeletionFinished() {
	o.DeletionFinished.Unset()
}

// GetDeletionInfoVec returns the DeletionInfoVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Tenant) GetDeletionInfoVec() []TenantDeletionInfo {
	if o == nil  {
		var ret []TenantDeletionInfo
		return ret
	}
	return o.DeletionInfoVec
}

// GetDeletionInfoVecOk returns a tuple with the DeletionInfoVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Tenant) GetDeletionInfoVecOk() (*[]TenantDeletionInfo, bool) {
	if o == nil || o.DeletionInfoVec == nil {
		return nil, false
	}
	return &o.DeletionInfoVec, true
}

// HasDeletionInfoVec returns a boolean if a field has been set.
func (o *Tenant) HasDeletionInfoVec() bool {
	if o != nil && o.DeletionInfoVec != nil {
		return true
	}

	return false
}

// SetDeletionInfoVec gets a reference to the given []TenantDeletionInfo and assigns it to the DeletionInfoVec field.
func (o *Tenant) SetDeletionInfoVec(v []TenantDeletionInfo) {
	o.DeletionInfoVec = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Tenant) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Tenant) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *Tenant) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *Tenant) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *Tenant) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *Tenant) UnsetDescription() {
	o.Description.Unset()
}

// GetEntityIds returns the EntityIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Tenant) GetEntityIds() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.EntityIds
}

// GetEntityIdsOk returns a tuple with the EntityIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Tenant) GetEntityIdsOk() (*[]int64, bool) {
	if o == nil || o.EntityIds == nil {
		return nil, false
	}
	return &o.EntityIds, true
}

// HasEntityIds returns a boolean if a field has been set.
func (o *Tenant) HasEntityIds() bool {
	if o != nil && o.EntityIds != nil {
		return true
	}

	return false
}

// SetEntityIds gets a reference to the given []int64 and assigns it to the EntityIds field.
func (o *Tenant) SetEntityIds(v []int64) {
	o.EntityIds = v
}

// GetLastUpdatedTimeMsecs returns the LastUpdatedTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Tenant) GetLastUpdatedTimeMsecs() int64 {
	if o == nil || o.LastUpdatedTimeMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LastUpdatedTimeMsecs.Get()
}

// GetLastUpdatedTimeMsecsOk returns a tuple with the LastUpdatedTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Tenant) GetLastUpdatedTimeMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastUpdatedTimeMsecs.Get(), o.LastUpdatedTimeMsecs.IsSet()
}

// HasLastUpdatedTimeMsecs returns a boolean if a field has been set.
func (o *Tenant) HasLastUpdatedTimeMsecs() bool {
	if o != nil && o.LastUpdatedTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetLastUpdatedTimeMsecs gets a reference to the given NullableInt64 and assigns it to the LastUpdatedTimeMsecs field.
func (o *Tenant) SetLastUpdatedTimeMsecs(v int64) {
	o.LastUpdatedTimeMsecs.Set(&v)
}
// SetLastUpdatedTimeMsecsNil sets the value for LastUpdatedTimeMsecs to be an explicit nil
func (o *Tenant) SetLastUpdatedTimeMsecsNil() {
	o.LastUpdatedTimeMsecs.Set(nil)
}

// UnsetLastUpdatedTimeMsecs ensures that no value is present for LastUpdatedTimeMsecs, not even an explicit nil
func (o *Tenant) UnsetLastUpdatedTimeMsecs() {
	o.LastUpdatedTimeMsecs.Unset()
}

// GetLdapProviders returns the LdapProviders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Tenant) GetLdapProviders() []LdapProviderResponse {
	if o == nil  {
		var ret []LdapProviderResponse
		return ret
	}
	return o.LdapProviders
}

// GetLdapProvidersOk returns a tuple with the LdapProviders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Tenant) GetLdapProvidersOk() (*[]LdapProviderResponse, bool) {
	if o == nil || o.LdapProviders == nil {
		return nil, false
	}
	return &o.LdapProviders, true
}

// HasLdapProviders returns a boolean if a field has been set.
func (o *Tenant) HasLdapProviders() bool {
	if o != nil && o.LdapProviders != nil {
		return true
	}

	return false
}

// SetLdapProviders gets a reference to the given []LdapProviderResponse and assigns it to the LdapProviders field.
func (o *Tenant) SetLdapProviders(v []LdapProviderResponse) {
	o.LdapProviders = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Tenant) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Tenant) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Tenant) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *Tenant) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *Tenant) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Tenant) UnsetName() {
	o.Name.Unset()
}

// GetOrgSuffix returns the OrgSuffix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Tenant) GetOrgSuffix() string {
	if o == nil || o.OrgSuffix.Get() == nil {
		var ret string
		return ret
	}
	return *o.OrgSuffix.Get()
}

// GetOrgSuffixOk returns a tuple with the OrgSuffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Tenant) GetOrgSuffixOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OrgSuffix.Get(), o.OrgSuffix.IsSet()
}

// HasOrgSuffix returns a boolean if a field has been set.
func (o *Tenant) HasOrgSuffix() bool {
	if o != nil && o.OrgSuffix.IsSet() {
		return true
	}

	return false
}

// SetOrgSuffix gets a reference to the given NullableString and assigns it to the OrgSuffix field.
func (o *Tenant) SetOrgSuffix(v string) {
	o.OrgSuffix.Set(&v)
}
// SetOrgSuffixNil sets the value for OrgSuffix to be an explicit nil
func (o *Tenant) SetOrgSuffixNil() {
	o.OrgSuffix.Set(nil)
}

// UnsetOrgSuffix ensures that no value is present for OrgSuffix, not even an explicit nil
func (o *Tenant) UnsetOrgSuffix() {
	o.OrgSuffix.Unset()
}

// GetParentTenantId returns the ParentTenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Tenant) GetParentTenantId() string {
	if o == nil || o.ParentTenantId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ParentTenantId.Get()
}

// GetParentTenantIdOk returns a tuple with the ParentTenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Tenant) GetParentTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ParentTenantId.Get(), o.ParentTenantId.IsSet()
}

// HasParentTenantId returns a boolean if a field has been set.
func (o *Tenant) HasParentTenantId() bool {
	if o != nil && o.ParentTenantId.IsSet() {
		return true
	}

	return false
}

// SetParentTenantId gets a reference to the given NullableString and assigns it to the ParentTenantId field.
func (o *Tenant) SetParentTenantId(v string) {
	o.ParentTenantId.Set(&v)
}
// SetParentTenantIdNil sets the value for ParentTenantId to be an explicit nil
func (o *Tenant) SetParentTenantIdNil() {
	o.ParentTenantId.Set(nil)
}

// UnsetParentTenantId ensures that no value is present for ParentTenantId, not even an explicit nil
func (o *Tenant) UnsetParentTenantId() {
	o.ParentTenantId.Unset()
}

// GetPolicyIds returns the PolicyIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Tenant) GetPolicyIds() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.PolicyIds
}

// GetPolicyIdsOk returns a tuple with the PolicyIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Tenant) GetPolicyIdsOk() (*[]string, bool) {
	if o == nil || o.PolicyIds == nil {
		return nil, false
	}
	return &o.PolicyIds, true
}

// HasPolicyIds returns a boolean if a field has been set.
func (o *Tenant) HasPolicyIds() bool {
	if o != nil && o.PolicyIds != nil {
		return true
	}

	return false
}

// SetPolicyIds gets a reference to the given []string and assigns it to the PolicyIds field.
func (o *Tenant) SetPolicyIds(v []string) {
	o.PolicyIds = v
}

// GetProtectionJobs returns the ProtectionJobs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Tenant) GetProtectionJobs() []BackupJobProto {
	if o == nil  {
		var ret []BackupJobProto
		return ret
	}
	return o.ProtectionJobs
}

// GetProtectionJobsOk returns a tuple with the ProtectionJobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Tenant) GetProtectionJobsOk() (*[]BackupJobProto, bool) {
	if o == nil || o.ProtectionJobs == nil {
		return nil, false
	}
	return &o.ProtectionJobs, true
}

// HasProtectionJobs returns a boolean if a field has been set.
func (o *Tenant) HasProtectionJobs() bool {
	if o != nil && o.ProtectionJobs != nil {
		return true
	}

	return false
}

// SetProtectionJobs gets a reference to the given []BackupJobProto and assigns it to the ProtectionJobs field.
func (o *Tenant) SetProtectionJobs(v []BackupJobProto) {
	o.ProtectionJobs = v
}

// GetSubscribeToAlertEmails returns the SubscribeToAlertEmails field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Tenant) GetSubscribeToAlertEmails() bool {
	if o == nil || o.SubscribeToAlertEmails.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SubscribeToAlertEmails.Get()
}

// GetSubscribeToAlertEmailsOk returns a tuple with the SubscribeToAlertEmails field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Tenant) GetSubscribeToAlertEmailsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SubscribeToAlertEmails.Get(), o.SubscribeToAlertEmails.IsSet()
}

// HasSubscribeToAlertEmails returns a boolean if a field has been set.
func (o *Tenant) HasSubscribeToAlertEmails() bool {
	if o != nil && o.SubscribeToAlertEmails.IsSet() {
		return true
	}

	return false
}

// SetSubscribeToAlertEmails gets a reference to the given NullableBool and assigns it to the SubscribeToAlertEmails field.
func (o *Tenant) SetSubscribeToAlertEmails(v bool) {
	o.SubscribeToAlertEmails.Set(&v)
}
// SetSubscribeToAlertEmailsNil sets the value for SubscribeToAlertEmails to be an explicit nil
func (o *Tenant) SetSubscribeToAlertEmailsNil() {
	o.SubscribeToAlertEmails.Set(nil)
}

// UnsetSubscribeToAlertEmails ensures that no value is present for SubscribeToAlertEmails, not even an explicit nil
func (o *Tenant) UnsetSubscribeToAlertEmails() {
	o.SubscribeToAlertEmails.Unset()
}

// GetSwiftConfig returns the SwiftConfig field value if set, zero value otherwise.
func (o *Tenant) GetSwiftConfig() SwiftParams {
	if o == nil || o.SwiftConfig == nil {
		var ret SwiftParams
		return ret
	}
	return *o.SwiftConfig
}

// GetSwiftConfigOk returns a tuple with the SwiftConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tenant) GetSwiftConfigOk() (*SwiftParams, bool) {
	if o == nil || o.SwiftConfig == nil {
		return nil, false
	}
	return o.SwiftConfig, true
}

// HasSwiftConfig returns a boolean if a field has been set.
func (o *Tenant) HasSwiftConfig() bool {
	if o != nil && o.SwiftConfig != nil {
		return true
	}

	return false
}

// SetSwiftConfig gets a reference to the given SwiftParams and assigns it to the SwiftConfig field.
func (o *Tenant) SetSwiftConfig(v SwiftParams) {
	o.SwiftConfig = &v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Tenant) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Tenant) GetTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *Tenant) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *Tenant) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *Tenant) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *Tenant) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetViewBoxIds returns the ViewBoxIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Tenant) GetViewBoxIds() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.ViewBoxIds
}

// GetViewBoxIdsOk returns a tuple with the ViewBoxIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Tenant) GetViewBoxIdsOk() (*[]int64, bool) {
	if o == nil || o.ViewBoxIds == nil {
		return nil, false
	}
	return &o.ViewBoxIds, true
}

// HasViewBoxIds returns a boolean if a field has been set.
func (o *Tenant) HasViewBoxIds() bool {
	if o != nil && o.ViewBoxIds != nil {
		return true
	}

	return false
}

// SetViewBoxIds gets a reference to the given []int64 and assigns it to the ViewBoxIds field.
func (o *Tenant) SetViewBoxIds(v []int64) {
	o.ViewBoxIds = v
}

// GetViews returns the Views field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Tenant) GetViews() []View {
	if o == nil  {
		var ret []View
		return ret
	}
	return o.Views
}

// GetViewsOk returns a tuple with the Views field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Tenant) GetViewsOk() (*[]View, bool) {
	if o == nil || o.Views == nil {
		return nil, false
	}
	return &o.Views, true
}

// HasViews returns a boolean if a field has been set.
func (o *Tenant) HasViews() bool {
	if o != nil && o.Views != nil {
		return true
	}

	return false
}

// SetViews gets a reference to the given []View and assigns it to the Views field.
func (o *Tenant) SetViews(v []View) {
	o.Views = v
}

// GetVlanIfaceNames returns the VlanIfaceNames field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Tenant) GetVlanIfaceNames() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.VlanIfaceNames
}

// GetVlanIfaceNamesOk returns a tuple with the VlanIfaceNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Tenant) GetVlanIfaceNamesOk() (*[]string, bool) {
	if o == nil || o.VlanIfaceNames == nil {
		return nil, false
	}
	return &o.VlanIfaceNames, true
}

// HasVlanIfaceNames returns a boolean if a field has been set.
func (o *Tenant) HasVlanIfaceNames() bool {
	if o != nil && o.VlanIfaceNames != nil {
		return true
	}

	return false
}

// SetVlanIfaceNames gets a reference to the given []string and assigns it to the VlanIfaceNames field.
func (o *Tenant) SetVlanIfaceNames(v []string) {
	o.VlanIfaceNames = v
}

func (o Tenant) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ActiveDirectories != nil {
		toSerialize["activeDirectories"] = o.ActiveDirectories
	}
	if o.BifrostEnabled.IsSet() {
		toSerialize["bifrostEnabled"] = o.BifrostEnabled.Get()
	}
	if o.ClusterHostname.IsSet() {
		toSerialize["clusterHostname"] = o.ClusterHostname.Get()
	}
	if o.ClusterIps != nil {
		toSerialize["clusterIps"] = o.ClusterIps
	}
	if o.CreatedTimeMsecs.IsSet() {
		toSerialize["createdTimeMsecs"] = o.CreatedTimeMsecs.Get()
	}
	if o.Deleted.IsSet() {
		toSerialize["deleted"] = o.Deleted.Get()
	}
	if o.DeletedTimeMsecs.IsSet() {
		toSerialize["deletedTimeMsecs"] = o.DeletedTimeMsecs.Get()
	}
	if o.DeletionFinished.IsSet() {
		toSerialize["deletionFinished"] = o.DeletionFinished.Get()
	}
	if o.DeletionInfoVec != nil {
		toSerialize["deletionInfoVec"] = o.DeletionInfoVec
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.EntityIds != nil {
		toSerialize["entityIds"] = o.EntityIds
	}
	if o.LastUpdatedTimeMsecs.IsSet() {
		toSerialize["lastUpdatedTimeMsecs"] = o.LastUpdatedTimeMsecs.Get()
	}
	if o.LdapProviders != nil {
		toSerialize["ldapProviders"] = o.LdapProviders
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.OrgSuffix.IsSet() {
		toSerialize["orgSuffix"] = o.OrgSuffix.Get()
	}
	if o.ParentTenantId.IsSet() {
		toSerialize["parentTenantId"] = o.ParentTenantId.Get()
	}
	if o.PolicyIds != nil {
		toSerialize["policyIds"] = o.PolicyIds
	}
	if o.ProtectionJobs != nil {
		toSerialize["protectionJobs"] = o.ProtectionJobs
	}
	if o.SubscribeToAlertEmails.IsSet() {
		toSerialize["subscribeToAlertEmails"] = o.SubscribeToAlertEmails.Get()
	}
	if o.SwiftConfig != nil {
		toSerialize["swiftConfig"] = o.SwiftConfig
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.ViewBoxIds != nil {
		toSerialize["viewBoxIds"] = o.ViewBoxIds
	}
	if o.Views != nil {
		toSerialize["views"] = o.Views
	}
	if o.VlanIfaceNames != nil {
		toSerialize["vlanIfaceNames"] = o.VlanIfaceNames
	}
	return json.Marshal(toSerialize)
}

type NullableTenant struct {
	value *Tenant
	isSet bool
}

func (v NullableTenant) Get() *Tenant {
	return v.value
}

func (v *NullableTenant) Set(val *Tenant) {
	v.value = val
	v.isSet = true
}

func (v NullableTenant) IsSet() bool {
	return v.isSet
}

func (v *NullableTenant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenant(val *Tenant) *NullableTenant {
	return &NullableTenant{value: val, isSet: true}
}

func (v NullableTenant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


