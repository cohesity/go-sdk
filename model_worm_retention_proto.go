/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// WormRetentionProto Message that specifies the WORM attributes. WORM attributes can be associated with any of the following: 1. backup policy: compliance or administrative policy with worm retention. 2. backup runs: worm retention inherited from policy at successful backup run completion.. 3. backup tasks do not inherit WORM retention. Instead they check for WORM property on the corresponding backup run. There are no WORM attributes associated with the backup job.
type WormRetentionProto struct {
	// The type of WORM policy set on this run. This field is irrelevant while objects are on legal hold. Objects put on legal hold automatically raise the WORM level on the object behaviorally to the strictest level i.e. kCompliance.
	PolicyType NullableInt32 `json:"policyType,omitempty"`
	// Retention time for datalock in seconds. This will be always relative time.
	RetentionSecs NullableInt64 `json:"retentionSecs,omitempty"`
	// Version number for this proto.
	Version NullableInt32 `json:"version,omitempty"`
}

// NewWormRetentionProto instantiates a new WormRetentionProto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWormRetentionProto() *WormRetentionProto {
	this := WormRetentionProto{}
	return &this
}

// NewWormRetentionProtoWithDefaults instantiates a new WormRetentionProto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWormRetentionProtoWithDefaults() *WormRetentionProto {
	this := WormRetentionProto{}
	return &this
}

// GetPolicyType returns the PolicyType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WormRetentionProto) GetPolicyType() int32 {
	if o == nil || o.PolicyType.Get() == nil {
		var ret int32
		return ret
	}
	return *o.PolicyType.Get()
}

// GetPolicyTypeOk returns a tuple with the PolicyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WormRetentionProto) GetPolicyTypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PolicyType.Get(), o.PolicyType.IsSet()
}

// HasPolicyType returns a boolean if a field has been set.
func (o *WormRetentionProto) HasPolicyType() bool {
	if o != nil && o.PolicyType.IsSet() {
		return true
	}

	return false
}

// SetPolicyType gets a reference to the given NullableInt32 and assigns it to the PolicyType field.
func (o *WormRetentionProto) SetPolicyType(v int32) {
	o.PolicyType.Set(&v)
}
// SetPolicyTypeNil sets the value for PolicyType to be an explicit nil
func (o *WormRetentionProto) SetPolicyTypeNil() {
	o.PolicyType.Set(nil)
}

// UnsetPolicyType ensures that no value is present for PolicyType, not even an explicit nil
func (o *WormRetentionProto) UnsetPolicyType() {
	o.PolicyType.Unset()
}

// GetRetentionSecs returns the RetentionSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WormRetentionProto) GetRetentionSecs() int64 {
	if o == nil || o.RetentionSecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RetentionSecs.Get()
}

// GetRetentionSecsOk returns a tuple with the RetentionSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WormRetentionProto) GetRetentionSecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RetentionSecs.Get(), o.RetentionSecs.IsSet()
}

// HasRetentionSecs returns a boolean if a field has been set.
func (o *WormRetentionProto) HasRetentionSecs() bool {
	if o != nil && o.RetentionSecs.IsSet() {
		return true
	}

	return false
}

// SetRetentionSecs gets a reference to the given NullableInt64 and assigns it to the RetentionSecs field.
func (o *WormRetentionProto) SetRetentionSecs(v int64) {
	o.RetentionSecs.Set(&v)
}
// SetRetentionSecsNil sets the value for RetentionSecs to be an explicit nil
func (o *WormRetentionProto) SetRetentionSecsNil() {
	o.RetentionSecs.Set(nil)
}

// UnsetRetentionSecs ensures that no value is present for RetentionSecs, not even an explicit nil
func (o *WormRetentionProto) UnsetRetentionSecs() {
	o.RetentionSecs.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WormRetentionProto) GetVersion() int32 {
	if o == nil || o.Version.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WormRetentionProto) GetVersionOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *WormRetentionProto) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableInt32 and assigns it to the Version field.
func (o *WormRetentionProto) SetVersion(v int32) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *WormRetentionProto) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *WormRetentionProto) UnsetVersion() {
	o.Version.Unset()
}

func (o WormRetentionProto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PolicyType.IsSet() {
		toSerialize["policyType"] = o.PolicyType.Get()
	}
	if o.RetentionSecs.IsSet() {
		toSerialize["retentionSecs"] = o.RetentionSecs.Get()
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableWormRetentionProto struct {
	value *WormRetentionProto
	isSet bool
}

func (v NullableWormRetentionProto) Get() *WormRetentionProto {
	return v.value
}

func (v *NullableWormRetentionProto) Set(val *WormRetentionProto) {
	v.value = val
	v.isSet = true
}

func (v NullableWormRetentionProto) IsSet() bool {
	return v.isSet
}

func (v *NullableWormRetentionProto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWormRetentionProto(val *WormRetentionProto) *NullableWormRetentionProto {
	return &NullableWormRetentionProto{value: val, isSet: true}
}

func (v NullableWormRetentionProto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWormRetentionProto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


