/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ProtectionSourceTreeInfo Specifies the registration and protection information of a registered Protection Source Tree on the Cohesity Cluster.  Many different Protection Source trees are supported such as 'kVMware', 'kAcropolis', 'kPhysical' etc.,
type ProtectionSourceTreeInfo struct {
	// Array of applications hierarchy registered on this node.  Specifies the application type and the list of instances of the application objects. For example for SQL Server, this list provides the SQL Server instances running on a VM or a Physical Server.
	Applications []ApplicationInfo `json:"applications,omitempty"`
	EntityPermissionInfo *EntityPermissionInformation `json:"entityPermissionInfo,omitempty"`
	// Specifies the logical size of the Protection Source in bytes.
	LogicalSizeBytes NullableInt64 `json:"logicalSizeBytes,omitempty"`
	// Specifies registration information for a root node in a Protection Sources tree. A root node represents a registered Source on the Cohesity Cluster, such as a vCenter Server.
	RegistrationInfo NullableRegisteredSourceInfo `json:"registrationInfo,omitempty"`
	// Specifies the Protection Source for the root node of the Protection Source tree.
	RootNode NullableProtectionSource `json:"rootNode,omitempty"`
	// Specifies the stats of protection for a Protection Source Tree.
	Stats NullableProtectionSummary `json:"stats,omitempty"`
	// Specifies the breakdown of the stats of protection by environment. overrideDescription: true
	StatsByEnv []ProtectionSummaryByEnv `json:"statsByEnv,omitempty"`
}

// NewProtectionSourceTreeInfo instantiates a new ProtectionSourceTreeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtectionSourceTreeInfo() *ProtectionSourceTreeInfo {
	this := ProtectionSourceTreeInfo{}
	return &this
}

// NewProtectionSourceTreeInfoWithDefaults instantiates a new ProtectionSourceTreeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtectionSourceTreeInfoWithDefaults() *ProtectionSourceTreeInfo {
	this := ProtectionSourceTreeInfo{}
	return &this
}

// GetApplications returns the Applications field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSourceTreeInfo) GetApplications() []ApplicationInfo {
	if o == nil  {
		var ret []ApplicationInfo
		return ret
	}
	return o.Applications
}

// GetApplicationsOk returns a tuple with the Applications field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSourceTreeInfo) GetApplicationsOk() (*[]ApplicationInfo, bool) {
	if o == nil || o.Applications == nil {
		return nil, false
	}
	return &o.Applications, true
}

// HasApplications returns a boolean if a field has been set.
func (o *ProtectionSourceTreeInfo) HasApplications() bool {
	if o != nil && o.Applications != nil {
		return true
	}

	return false
}

// SetApplications gets a reference to the given []ApplicationInfo and assigns it to the Applications field.
func (o *ProtectionSourceTreeInfo) SetApplications(v []ApplicationInfo) {
	o.Applications = v
}

// GetEntityPermissionInfo returns the EntityPermissionInfo field value if set, zero value otherwise.
func (o *ProtectionSourceTreeInfo) GetEntityPermissionInfo() EntityPermissionInformation {
	if o == nil || o.EntityPermissionInfo == nil {
		var ret EntityPermissionInformation
		return ret
	}
	return *o.EntityPermissionInfo
}

// GetEntityPermissionInfoOk returns a tuple with the EntityPermissionInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectionSourceTreeInfo) GetEntityPermissionInfoOk() (*EntityPermissionInformation, bool) {
	if o == nil || o.EntityPermissionInfo == nil {
		return nil, false
	}
	return o.EntityPermissionInfo, true
}

// HasEntityPermissionInfo returns a boolean if a field has been set.
func (o *ProtectionSourceTreeInfo) HasEntityPermissionInfo() bool {
	if o != nil && o.EntityPermissionInfo != nil {
		return true
	}

	return false
}

// SetEntityPermissionInfo gets a reference to the given EntityPermissionInformation and assigns it to the EntityPermissionInfo field.
func (o *ProtectionSourceTreeInfo) SetEntityPermissionInfo(v EntityPermissionInformation) {
	o.EntityPermissionInfo = &v
}

// GetLogicalSizeBytes returns the LogicalSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSourceTreeInfo) GetLogicalSizeBytes() int64 {
	if o == nil || o.LogicalSizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LogicalSizeBytes.Get()
}

// GetLogicalSizeBytesOk returns a tuple with the LogicalSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSourceTreeInfo) GetLogicalSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogicalSizeBytes.Get(), o.LogicalSizeBytes.IsSet()
}

// HasLogicalSizeBytes returns a boolean if a field has been set.
func (o *ProtectionSourceTreeInfo) HasLogicalSizeBytes() bool {
	if o != nil && o.LogicalSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetLogicalSizeBytes gets a reference to the given NullableInt64 and assigns it to the LogicalSizeBytes field.
func (o *ProtectionSourceTreeInfo) SetLogicalSizeBytes(v int64) {
	o.LogicalSizeBytes.Set(&v)
}
// SetLogicalSizeBytesNil sets the value for LogicalSizeBytes to be an explicit nil
func (o *ProtectionSourceTreeInfo) SetLogicalSizeBytesNil() {
	o.LogicalSizeBytes.Set(nil)
}

// UnsetLogicalSizeBytes ensures that no value is present for LogicalSizeBytes, not even an explicit nil
func (o *ProtectionSourceTreeInfo) UnsetLogicalSizeBytes() {
	o.LogicalSizeBytes.Unset()
}

// GetRegistrationInfo returns the RegistrationInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSourceTreeInfo) GetRegistrationInfo() RegisteredSourceInfo {
	if o == nil || o.RegistrationInfo.Get() == nil {
		var ret RegisteredSourceInfo
		return ret
	}
	return *o.RegistrationInfo.Get()
}

// GetRegistrationInfoOk returns a tuple with the RegistrationInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSourceTreeInfo) GetRegistrationInfoOk() (*RegisteredSourceInfo, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RegistrationInfo.Get(), o.RegistrationInfo.IsSet()
}

// HasRegistrationInfo returns a boolean if a field has been set.
func (o *ProtectionSourceTreeInfo) HasRegistrationInfo() bool {
	if o != nil && o.RegistrationInfo.IsSet() {
		return true
	}

	return false
}

// SetRegistrationInfo gets a reference to the given NullableRegisteredSourceInfo and assigns it to the RegistrationInfo field.
func (o *ProtectionSourceTreeInfo) SetRegistrationInfo(v RegisteredSourceInfo) {
	o.RegistrationInfo.Set(&v)
}
// SetRegistrationInfoNil sets the value for RegistrationInfo to be an explicit nil
func (o *ProtectionSourceTreeInfo) SetRegistrationInfoNil() {
	o.RegistrationInfo.Set(nil)
}

// UnsetRegistrationInfo ensures that no value is present for RegistrationInfo, not even an explicit nil
func (o *ProtectionSourceTreeInfo) UnsetRegistrationInfo() {
	o.RegistrationInfo.Unset()
}

// GetRootNode returns the RootNode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSourceTreeInfo) GetRootNode() ProtectionSource {
	if o == nil || o.RootNode.Get() == nil {
		var ret ProtectionSource
		return ret
	}
	return *o.RootNode.Get()
}

// GetRootNodeOk returns a tuple with the RootNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSourceTreeInfo) GetRootNodeOk() (*ProtectionSource, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RootNode.Get(), o.RootNode.IsSet()
}

// HasRootNode returns a boolean if a field has been set.
func (o *ProtectionSourceTreeInfo) HasRootNode() bool {
	if o != nil && o.RootNode.IsSet() {
		return true
	}

	return false
}

// SetRootNode gets a reference to the given NullableProtectionSource and assigns it to the RootNode field.
func (o *ProtectionSourceTreeInfo) SetRootNode(v ProtectionSource) {
	o.RootNode.Set(&v)
}
// SetRootNodeNil sets the value for RootNode to be an explicit nil
func (o *ProtectionSourceTreeInfo) SetRootNodeNil() {
	o.RootNode.Set(nil)
}

// UnsetRootNode ensures that no value is present for RootNode, not even an explicit nil
func (o *ProtectionSourceTreeInfo) UnsetRootNode() {
	o.RootNode.Unset()
}

// GetStats returns the Stats field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSourceTreeInfo) GetStats() ProtectionSummary {
	if o == nil || o.Stats.Get() == nil {
		var ret ProtectionSummary
		return ret
	}
	return *o.Stats.Get()
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSourceTreeInfo) GetStatsOk() (*ProtectionSummary, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Stats.Get(), o.Stats.IsSet()
}

// HasStats returns a boolean if a field has been set.
func (o *ProtectionSourceTreeInfo) HasStats() bool {
	if o != nil && o.Stats.IsSet() {
		return true
	}

	return false
}

// SetStats gets a reference to the given NullableProtectionSummary and assigns it to the Stats field.
func (o *ProtectionSourceTreeInfo) SetStats(v ProtectionSummary) {
	o.Stats.Set(&v)
}
// SetStatsNil sets the value for Stats to be an explicit nil
func (o *ProtectionSourceTreeInfo) SetStatsNil() {
	o.Stats.Set(nil)
}

// UnsetStats ensures that no value is present for Stats, not even an explicit nil
func (o *ProtectionSourceTreeInfo) UnsetStats() {
	o.Stats.Unset()
}

// GetStatsByEnv returns the StatsByEnv field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSourceTreeInfo) GetStatsByEnv() []ProtectionSummaryByEnv {
	if o == nil  {
		var ret []ProtectionSummaryByEnv
		return ret
	}
	return o.StatsByEnv
}

// GetStatsByEnvOk returns a tuple with the StatsByEnv field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSourceTreeInfo) GetStatsByEnvOk() (*[]ProtectionSummaryByEnv, bool) {
	if o == nil || o.StatsByEnv == nil {
		return nil, false
	}
	return &o.StatsByEnv, true
}

// HasStatsByEnv returns a boolean if a field has been set.
func (o *ProtectionSourceTreeInfo) HasStatsByEnv() bool {
	if o != nil && o.StatsByEnv != nil {
		return true
	}

	return false
}

// SetStatsByEnv gets a reference to the given []ProtectionSummaryByEnv and assigns it to the StatsByEnv field.
func (o *ProtectionSourceTreeInfo) SetStatsByEnv(v []ProtectionSummaryByEnv) {
	o.StatsByEnv = v
}

func (o ProtectionSourceTreeInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Applications != nil {
		toSerialize["applications"] = o.Applications
	}
	if o.EntityPermissionInfo != nil {
		toSerialize["entityPermissionInfo"] = o.EntityPermissionInfo
	}
	if o.LogicalSizeBytes.IsSet() {
		toSerialize["logicalSizeBytes"] = o.LogicalSizeBytes.Get()
	}
	if o.RegistrationInfo.IsSet() {
		toSerialize["registrationInfo"] = o.RegistrationInfo.Get()
	}
	if o.RootNode.IsSet() {
		toSerialize["rootNode"] = o.RootNode.Get()
	}
	if o.Stats.IsSet() {
		toSerialize["stats"] = o.Stats.Get()
	}
	if o.StatsByEnv != nil {
		toSerialize["statsByEnv"] = o.StatsByEnv
	}
	return json.Marshal(toSerialize)
}

type NullableProtectionSourceTreeInfo struct {
	value *ProtectionSourceTreeInfo
	isSet bool
}

func (v NullableProtectionSourceTreeInfo) Get() *ProtectionSourceTreeInfo {
	return v.value
}

func (v *NullableProtectionSourceTreeInfo) Set(val *ProtectionSourceTreeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableProtectionSourceTreeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableProtectionSourceTreeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtectionSourceTreeInfo(val *ProtectionSourceTreeInfo) *NullableProtectionSourceTreeInfo {
	return &NullableProtectionSourceTreeInfo{value: val, isSet: true}
}

func (v NullableProtectionSourceTreeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtectionSourceTreeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


