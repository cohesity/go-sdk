/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// CreateIpConfigParameters Specifies the parameters needed for an ipconfig request.
type CreateIpConfigParameters struct {
	// Specifies the interface ips.
	Ips []string `json:"ips,omitempty"`
	// Specifies the interface mtu.
	Mtu NullableInt32 `json:"mtu,omitempty"`
	// Specifies the interface name.
	Name NullableString `json:"name"`
	// Specifies the interface role. 'kPrimary' indicates a primary role. 'kSecondary' indicates a secondary role.
	Role NullableString `json:"role,omitempty"`
	// Specifies the interface gateway.
	SubnetGateway NullableString `json:"subnetGateway,omitempty"`
	// Specifies the interface subnet mask.
	SubnetMask NullableString `json:"subnetMask,omitempty"`
}

// NewCreateIpConfigParameters instantiates a new CreateIpConfigParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateIpConfigParameters(name NullableString) *CreateIpConfigParameters {
	this := CreateIpConfigParameters{}
	this.Name = name
	return &this
}

// NewCreateIpConfigParametersWithDefaults instantiates a new CreateIpConfigParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateIpConfigParametersWithDefaults() *CreateIpConfigParameters {
	this := CreateIpConfigParameters{}
	return &this
}

// GetIps returns the Ips field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateIpConfigParameters) GetIps() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Ips
}

// GetIpsOk returns a tuple with the Ips field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateIpConfigParameters) GetIpsOk() (*[]string, bool) {
	if o == nil || o.Ips == nil {
		return nil, false
	}
	return &o.Ips, true
}

// HasIps returns a boolean if a field has been set.
func (o *CreateIpConfigParameters) HasIps() bool {
	if o != nil && o.Ips != nil {
		return true
	}

	return false
}

// SetIps gets a reference to the given []string and assigns it to the Ips field.
func (o *CreateIpConfigParameters) SetIps(v []string) {
	o.Ips = v
}

// GetMtu returns the Mtu field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateIpConfigParameters) GetMtu() int32 {
	if o == nil || o.Mtu.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Mtu.Get()
}

// GetMtuOk returns a tuple with the Mtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateIpConfigParameters) GetMtuOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Mtu.Get(), o.Mtu.IsSet()
}

// HasMtu returns a boolean if a field has been set.
func (o *CreateIpConfigParameters) HasMtu() bool {
	if o != nil && o.Mtu.IsSet() {
		return true
	}

	return false
}

// SetMtu gets a reference to the given NullableInt32 and assigns it to the Mtu field.
func (o *CreateIpConfigParameters) SetMtu(v int32) {
	o.Mtu.Set(&v)
}
// SetMtuNil sets the value for Mtu to be an explicit nil
func (o *CreateIpConfigParameters) SetMtuNil() {
	o.Mtu.Set(nil)
}

// UnsetMtu ensures that no value is present for Mtu, not even an explicit nil
func (o *CreateIpConfigParameters) UnsetMtu() {
	o.Mtu.Unset()
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CreateIpConfigParameters) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateIpConfigParameters) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *CreateIpConfigParameters) SetName(v string) {
	o.Name.Set(&v)
}

// GetRole returns the Role field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateIpConfigParameters) GetRole() string {
	if o == nil || o.Role.Get() == nil {
		var ret string
		return ret
	}
	return *o.Role.Get()
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateIpConfigParameters) GetRoleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Role.Get(), o.Role.IsSet()
}

// HasRole returns a boolean if a field has been set.
func (o *CreateIpConfigParameters) HasRole() bool {
	if o != nil && o.Role.IsSet() {
		return true
	}

	return false
}

// SetRole gets a reference to the given NullableString and assigns it to the Role field.
func (o *CreateIpConfigParameters) SetRole(v string) {
	o.Role.Set(&v)
}
// SetRoleNil sets the value for Role to be an explicit nil
func (o *CreateIpConfigParameters) SetRoleNil() {
	o.Role.Set(nil)
}

// UnsetRole ensures that no value is present for Role, not even an explicit nil
func (o *CreateIpConfigParameters) UnsetRole() {
	o.Role.Unset()
}

// GetSubnetGateway returns the SubnetGateway field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateIpConfigParameters) GetSubnetGateway() string {
	if o == nil || o.SubnetGateway.Get() == nil {
		var ret string
		return ret
	}
	return *o.SubnetGateway.Get()
}

// GetSubnetGatewayOk returns a tuple with the SubnetGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateIpConfigParameters) GetSubnetGatewayOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SubnetGateway.Get(), o.SubnetGateway.IsSet()
}

// HasSubnetGateway returns a boolean if a field has been set.
func (o *CreateIpConfigParameters) HasSubnetGateway() bool {
	if o != nil && o.SubnetGateway.IsSet() {
		return true
	}

	return false
}

// SetSubnetGateway gets a reference to the given NullableString and assigns it to the SubnetGateway field.
func (o *CreateIpConfigParameters) SetSubnetGateway(v string) {
	o.SubnetGateway.Set(&v)
}
// SetSubnetGatewayNil sets the value for SubnetGateway to be an explicit nil
func (o *CreateIpConfigParameters) SetSubnetGatewayNil() {
	o.SubnetGateway.Set(nil)
}

// UnsetSubnetGateway ensures that no value is present for SubnetGateway, not even an explicit nil
func (o *CreateIpConfigParameters) UnsetSubnetGateway() {
	o.SubnetGateway.Unset()
}

// GetSubnetMask returns the SubnetMask field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateIpConfigParameters) GetSubnetMask() string {
	if o == nil || o.SubnetMask.Get() == nil {
		var ret string
		return ret
	}
	return *o.SubnetMask.Get()
}

// GetSubnetMaskOk returns a tuple with the SubnetMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateIpConfigParameters) GetSubnetMaskOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SubnetMask.Get(), o.SubnetMask.IsSet()
}

// HasSubnetMask returns a boolean if a field has been set.
func (o *CreateIpConfigParameters) HasSubnetMask() bool {
	if o != nil && o.SubnetMask.IsSet() {
		return true
	}

	return false
}

// SetSubnetMask gets a reference to the given NullableString and assigns it to the SubnetMask field.
func (o *CreateIpConfigParameters) SetSubnetMask(v string) {
	o.SubnetMask.Set(&v)
}
// SetSubnetMaskNil sets the value for SubnetMask to be an explicit nil
func (o *CreateIpConfigParameters) SetSubnetMaskNil() {
	o.SubnetMask.Set(nil)
}

// UnsetSubnetMask ensures that no value is present for SubnetMask, not even an explicit nil
func (o *CreateIpConfigParameters) UnsetSubnetMask() {
	o.SubnetMask.Unset()
}

func (o CreateIpConfigParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ips != nil {
		toSerialize["ips"] = o.Ips
	}
	if o.Mtu.IsSet() {
		toSerialize["mtu"] = o.Mtu.Get()
	}
	if true {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Role.IsSet() {
		toSerialize["role"] = o.Role.Get()
	}
	if o.SubnetGateway.IsSet() {
		toSerialize["subnetGateway"] = o.SubnetGateway.Get()
	}
	if o.SubnetMask.IsSet() {
		toSerialize["subnetMask"] = o.SubnetMask.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCreateIpConfigParameters struct {
	value *CreateIpConfigParameters
	isSet bool
}

func (v NullableCreateIpConfigParameters) Get() *CreateIpConfigParameters {
	return v.value
}

func (v *NullableCreateIpConfigParameters) Set(val *CreateIpConfigParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateIpConfigParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateIpConfigParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateIpConfigParameters(val *CreateIpConfigParameters) *NullableCreateIpConfigParameters {
	return &NullableCreateIpConfigParameters{value: val, isSet: true}
}

func (v NullableCreateIpConfigParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateIpConfigParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


