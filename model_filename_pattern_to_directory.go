/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// FilenamePatternToDirectory Specifies a filename pattern and the directory path where to keep files matching that pattern.
type FilenamePatternToDirectory struct {
	// Specifies the directory where to keep the files matching the pattern.
	Directory NullableString `json:"directory,omitempty"`
	// Specifies a pattern to be matched with filenames. This can be a regex expression.
	FilenamePattern NullableString `json:"filenamePattern,omitempty"`
}

// NewFilenamePatternToDirectory instantiates a new FilenamePatternToDirectory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilenamePatternToDirectory() *FilenamePatternToDirectory {
	this := FilenamePatternToDirectory{}
	return &this
}

// NewFilenamePatternToDirectoryWithDefaults instantiates a new FilenamePatternToDirectory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilenamePatternToDirectoryWithDefaults() *FilenamePatternToDirectory {
	this := FilenamePatternToDirectory{}
	return &this
}

// GetDirectory returns the Directory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilenamePatternToDirectory) GetDirectory() string {
	if o == nil || o.Directory.Get() == nil {
		var ret string
		return ret
	}
	return *o.Directory.Get()
}

// GetDirectoryOk returns a tuple with the Directory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilenamePatternToDirectory) GetDirectoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Directory.Get(), o.Directory.IsSet()
}

// HasDirectory returns a boolean if a field has been set.
func (o *FilenamePatternToDirectory) HasDirectory() bool {
	if o != nil && o.Directory.IsSet() {
		return true
	}

	return false
}

// SetDirectory gets a reference to the given NullableString and assigns it to the Directory field.
func (o *FilenamePatternToDirectory) SetDirectory(v string) {
	o.Directory.Set(&v)
}
// SetDirectoryNil sets the value for Directory to be an explicit nil
func (o *FilenamePatternToDirectory) SetDirectoryNil() {
	o.Directory.Set(nil)
}

// UnsetDirectory ensures that no value is present for Directory, not even an explicit nil
func (o *FilenamePatternToDirectory) UnsetDirectory() {
	o.Directory.Unset()
}

// GetFilenamePattern returns the FilenamePattern field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilenamePatternToDirectory) GetFilenamePattern() string {
	if o == nil || o.FilenamePattern.Get() == nil {
		var ret string
		return ret
	}
	return *o.FilenamePattern.Get()
}

// GetFilenamePatternOk returns a tuple with the FilenamePattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilenamePatternToDirectory) GetFilenamePatternOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FilenamePattern.Get(), o.FilenamePattern.IsSet()
}

// HasFilenamePattern returns a boolean if a field has been set.
func (o *FilenamePatternToDirectory) HasFilenamePattern() bool {
	if o != nil && o.FilenamePattern.IsSet() {
		return true
	}

	return false
}

// SetFilenamePattern gets a reference to the given NullableString and assigns it to the FilenamePattern field.
func (o *FilenamePatternToDirectory) SetFilenamePattern(v string) {
	o.FilenamePattern.Set(&v)
}
// SetFilenamePatternNil sets the value for FilenamePattern to be an explicit nil
func (o *FilenamePatternToDirectory) SetFilenamePatternNil() {
	o.FilenamePattern.Set(nil)
}

// UnsetFilenamePattern ensures that no value is present for FilenamePattern, not even an explicit nil
func (o *FilenamePatternToDirectory) UnsetFilenamePattern() {
	o.FilenamePattern.Unset()
}

func (o FilenamePatternToDirectory) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Directory.IsSet() {
		toSerialize["directory"] = o.Directory.Get()
	}
	if o.FilenamePattern.IsSet() {
		toSerialize["filenamePattern"] = o.FilenamePattern.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableFilenamePatternToDirectory struct {
	value *FilenamePatternToDirectory
	isSet bool
}

func (v NullableFilenamePatternToDirectory) Get() *FilenamePatternToDirectory {
	return v.value
}

func (v *NullableFilenamePatternToDirectory) Set(val *FilenamePatternToDirectory) {
	v.value = val
	v.isSet = true
}

func (v NullableFilenamePatternToDirectory) IsSet() bool {
	return v.isSet
}

func (v *NullableFilenamePatternToDirectory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilenamePatternToDirectory(val *FilenamePatternToDirectory) *NullableFilenamePatternToDirectory {
	return &NullableFilenamePatternToDirectory{value: val, isSet: true}
}

func (v NullableFilenamePatternToDirectory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilenamePatternToDirectory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


