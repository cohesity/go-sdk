/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// SmbActiveOpen Specifies an active open of an SMB file, its access and sharing information.
type SmbActiveOpen struct {
	// Specifies the access information. 'kFileReadData' indicates the right to read data from the file or named pipe. 'kFileWriteData' indicates the right to write data into the file or named pipe beyond the end of the file. 'kFileAppendData' indicates the right to append data into the file or named pipe. 'kFileReadEa' indicates the right to read the extended attributes of the file or named pipe. 'kFileWriteEa' indicates the right to write or change the extended attributes to the file or named pipe. 'kFileExecute' indicates the right to delete entries within a directory. 'kFileDeleteChild' indicates the right to execute the file. 'kFileReadAttributes' indicates the right to read the attributes of the file. 'kFileWriteAttributes' indicates the right to change the attributes of the file. 'kDelete' indicates the right to delete the file. 'kReadControl' indicates the right to read the security descriptor for the file or named pipe. 'kWriteDac' indicates the right to change the discretionary access control list (DACL) in the security descriptor for the file or named pipe. For the DACL data structure, see ACL in [MS-DTYP]. 'kWriteOwner' indicates the right to change the owner in the security descriptor for the file or named pipe. 'kSynchronize' is used only by SMB2 clients. 'kAccessSystemSecurity' indicates the right to read or change the system access control list (SACL) in the security descriptor for the file or named pipe. For the SACL data structure, see ACL in [MS-DTYP].<42> 'kMaximumAllowed' indicates that the client is requesting an open to the file with the highest level of access the client has on this file. If no access is granted for the client on this file, the server MUST fail the open with STATUS_ACCESS_DENIED. 'kGenericAll' indicates a request for all the access flags that are previously listed except kMaximumAllowed and kAccessSystemSecurity. 'kGenericExecute' indicates a request for the following combination of access flags listed above: kFileReadAttributes| kFileExecute| kSynchronize| kReadControl. 'kGenericWrite' indicates a request for the following combination of access flags listed above: kFileWriteData| kFileAppendData| kFileWriteAttributes| kFileWriteEa| kSynchronize| kReadControl. 'kGenericRead' indicates a request for the following combination of access flags listed above: kFileReadData| kFileReadAttributes| kFileReadEa| kSynchronize| kReadControl.
	AccessInfoList []string `json:"accessInfoList,omitempty"`
	// Specifies the id of the active open.
	OpenId NullableInt64 `json:"openId,omitempty"`
	// Specifies whether others are allowed to delete.
	OthersCanDelete NullableBool `json:"othersCanDelete,omitempty"`
	// Specifies whether others are allowed to read.
	OthersCanRead NullableBool `json:"othersCanRead,omitempty"`
	// Specifies whether others are allowed to write.
	OthersCanWrite NullableBool `json:"othersCanWrite,omitempty"`
}

// NewSmbActiveOpen instantiates a new SmbActiveOpen object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmbActiveOpen() *SmbActiveOpen {
	this := SmbActiveOpen{}
	return &this
}

// NewSmbActiveOpenWithDefaults instantiates a new SmbActiveOpen object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmbActiveOpenWithDefaults() *SmbActiveOpen {
	this := SmbActiveOpen{}
	return &this
}

// GetAccessInfoList returns the AccessInfoList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmbActiveOpen) GetAccessInfoList() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.AccessInfoList
}

// GetAccessInfoListOk returns a tuple with the AccessInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmbActiveOpen) GetAccessInfoListOk() (*[]string, bool) {
	if o == nil || o.AccessInfoList == nil {
		return nil, false
	}
	return &o.AccessInfoList, true
}

// HasAccessInfoList returns a boolean if a field has been set.
func (o *SmbActiveOpen) HasAccessInfoList() bool {
	if o != nil && o.AccessInfoList != nil {
		return true
	}

	return false
}

// SetAccessInfoList gets a reference to the given []string and assigns it to the AccessInfoList field.
func (o *SmbActiveOpen) SetAccessInfoList(v []string) {
	o.AccessInfoList = v
}

// GetOpenId returns the OpenId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmbActiveOpen) GetOpenId() int64 {
	if o == nil || o.OpenId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.OpenId.Get()
}

// GetOpenIdOk returns a tuple with the OpenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmbActiveOpen) GetOpenIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OpenId.Get(), o.OpenId.IsSet()
}

// HasOpenId returns a boolean if a field has been set.
func (o *SmbActiveOpen) HasOpenId() bool {
	if o != nil && o.OpenId.IsSet() {
		return true
	}

	return false
}

// SetOpenId gets a reference to the given NullableInt64 and assigns it to the OpenId field.
func (o *SmbActiveOpen) SetOpenId(v int64) {
	o.OpenId.Set(&v)
}
// SetOpenIdNil sets the value for OpenId to be an explicit nil
func (o *SmbActiveOpen) SetOpenIdNil() {
	o.OpenId.Set(nil)
}

// UnsetOpenId ensures that no value is present for OpenId, not even an explicit nil
func (o *SmbActiveOpen) UnsetOpenId() {
	o.OpenId.Unset()
}

// GetOthersCanDelete returns the OthersCanDelete field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmbActiveOpen) GetOthersCanDelete() bool {
	if o == nil || o.OthersCanDelete.Get() == nil {
		var ret bool
		return ret
	}
	return *o.OthersCanDelete.Get()
}

// GetOthersCanDeleteOk returns a tuple with the OthersCanDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmbActiveOpen) GetOthersCanDeleteOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OthersCanDelete.Get(), o.OthersCanDelete.IsSet()
}

// HasOthersCanDelete returns a boolean if a field has been set.
func (o *SmbActiveOpen) HasOthersCanDelete() bool {
	if o != nil && o.OthersCanDelete.IsSet() {
		return true
	}

	return false
}

// SetOthersCanDelete gets a reference to the given NullableBool and assigns it to the OthersCanDelete field.
func (o *SmbActiveOpen) SetOthersCanDelete(v bool) {
	o.OthersCanDelete.Set(&v)
}
// SetOthersCanDeleteNil sets the value for OthersCanDelete to be an explicit nil
func (o *SmbActiveOpen) SetOthersCanDeleteNil() {
	o.OthersCanDelete.Set(nil)
}

// UnsetOthersCanDelete ensures that no value is present for OthersCanDelete, not even an explicit nil
func (o *SmbActiveOpen) UnsetOthersCanDelete() {
	o.OthersCanDelete.Unset()
}

// GetOthersCanRead returns the OthersCanRead field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmbActiveOpen) GetOthersCanRead() bool {
	if o == nil || o.OthersCanRead.Get() == nil {
		var ret bool
		return ret
	}
	return *o.OthersCanRead.Get()
}

// GetOthersCanReadOk returns a tuple with the OthersCanRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmbActiveOpen) GetOthersCanReadOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OthersCanRead.Get(), o.OthersCanRead.IsSet()
}

// HasOthersCanRead returns a boolean if a field has been set.
func (o *SmbActiveOpen) HasOthersCanRead() bool {
	if o != nil && o.OthersCanRead.IsSet() {
		return true
	}

	return false
}

// SetOthersCanRead gets a reference to the given NullableBool and assigns it to the OthersCanRead field.
func (o *SmbActiveOpen) SetOthersCanRead(v bool) {
	o.OthersCanRead.Set(&v)
}
// SetOthersCanReadNil sets the value for OthersCanRead to be an explicit nil
func (o *SmbActiveOpen) SetOthersCanReadNil() {
	o.OthersCanRead.Set(nil)
}

// UnsetOthersCanRead ensures that no value is present for OthersCanRead, not even an explicit nil
func (o *SmbActiveOpen) UnsetOthersCanRead() {
	o.OthersCanRead.Unset()
}

// GetOthersCanWrite returns the OthersCanWrite field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmbActiveOpen) GetOthersCanWrite() bool {
	if o == nil || o.OthersCanWrite.Get() == nil {
		var ret bool
		return ret
	}
	return *o.OthersCanWrite.Get()
}

// GetOthersCanWriteOk returns a tuple with the OthersCanWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmbActiveOpen) GetOthersCanWriteOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OthersCanWrite.Get(), o.OthersCanWrite.IsSet()
}

// HasOthersCanWrite returns a boolean if a field has been set.
func (o *SmbActiveOpen) HasOthersCanWrite() bool {
	if o != nil && o.OthersCanWrite.IsSet() {
		return true
	}

	return false
}

// SetOthersCanWrite gets a reference to the given NullableBool and assigns it to the OthersCanWrite field.
func (o *SmbActiveOpen) SetOthersCanWrite(v bool) {
	o.OthersCanWrite.Set(&v)
}
// SetOthersCanWriteNil sets the value for OthersCanWrite to be an explicit nil
func (o *SmbActiveOpen) SetOthersCanWriteNil() {
	o.OthersCanWrite.Set(nil)
}

// UnsetOthersCanWrite ensures that no value is present for OthersCanWrite, not even an explicit nil
func (o *SmbActiveOpen) UnsetOthersCanWrite() {
	o.OthersCanWrite.Unset()
}

func (o SmbActiveOpen) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessInfoList != nil {
		toSerialize["accessInfoList"] = o.AccessInfoList
	}
	if o.OpenId.IsSet() {
		toSerialize["openId"] = o.OpenId.Get()
	}
	if o.OthersCanDelete.IsSet() {
		toSerialize["othersCanDelete"] = o.OthersCanDelete.Get()
	}
	if o.OthersCanRead.IsSet() {
		toSerialize["othersCanRead"] = o.OthersCanRead.Get()
	}
	if o.OthersCanWrite.IsSet() {
		toSerialize["othersCanWrite"] = o.OthersCanWrite.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSmbActiveOpen struct {
	value *SmbActiveOpen
	isSet bool
}

func (v NullableSmbActiveOpen) Get() *SmbActiveOpen {
	return v.value
}

func (v *NullableSmbActiveOpen) Set(val *SmbActiveOpen) {
	v.value = val
	v.isSet = true
}

func (v NullableSmbActiveOpen) IsSet() bool {
	return v.isSet
}

func (v *NullableSmbActiveOpen) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmbActiveOpen(val *SmbActiveOpen) *NullableSmbActiveOpen {
	return &NullableSmbActiveOpen{value: val, isSet: true}
}

func (v NullableSmbActiveOpen) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmbActiveOpen) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


