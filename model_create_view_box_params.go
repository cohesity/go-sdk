/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// CreateViewBoxParams Provides details about the Storage Domain (View Box).
type CreateViewBoxParams struct {
	// Specifies an active directory domain that this view box is mapped to.
	AdDomainName NullableString `json:"adDomainName,omitempty"`
	// Array of Subnets.  Specifies the Subnets from which this Storage Domain (View Box) accepts requests.
	ClientSubnetWhiteList []Subnet `json:"clientSubnetWhiteList,omitempty"`
	// Specifies the cloud down water-fall threshold percentage. This indicates how full should a viewbox at least be before we down water-fall its data to cloud tier. If this field is set, the physical quota limit must be set also and will be used as viewbox capacity.
	CloudDownWaterfallThresholdPct NullableInt32 `json:"cloudDownWaterfallThresholdPct,omitempty"`
	// Specifies the cloud down water-fall threshold seconds. This indicates what's the time threshold on water-falling data to cloud tier.
	CloudDownWaterfallThresholdSecs NullableInt32 `json:"cloudDownWaterfallThresholdSecs,omitempty"`
	// Specifies the Cluster Partition id where the Storage Domain (View Box) is located.
	ClusterPartitionId NullableInt64 `json:"clusterPartitionId"`
	// Specifies an optional quota policy/limits that are inherited by all users within the views in this viewbox.
	DefaultUserQuotaPolicy NullableQuotaPolicy `json:"defaultUserQuotaPolicy,omitempty"`
	// Specifies an optional default logical quota limit (in bytes) for the Views in this Storage Domain (View Box). (Logical data is when the data is fully hydrated and expanded.) However, this inherited quota can be overwritten at the View level. A new write is not allowed if the Storage Domain (View Box) will exceed the specified quota. However, it takes time for the Cohesity Cluster to calculate the usage across Nodes, so the limit may be exceeded by a small amount. In addition, if the limit is increased or data is removed, there may be delay before the Cohesity Cluster allows more data to be written to the Storage Domain (View Box), as the Cluster is calculating the usage across Nodes.
	DefaultViewQuotaPolicy NullableQuotaPolicy `json:"defaultViewQuotaPolicy,omitempty"`
	// Specifies whether this viewbox can be used as a staging area while copying a largedataset that can't fit on the cluster to an external target. The amount of data that can be stored on the viewbox can be specified using 'physical_quota'.
	DirectArchiveEnabled NullableBool `json:"directArchiveEnabled,omitempty"`
	// When set, the following provides the LDAP provider the view box is mapped to. For any view from this view box, when accessed via NFS the following LDAP provider is looked up for getting Unix IDs of the corresponding user. Similarly, when a view is accessed via SMB and if the AD user's domain matches with the view box's AD, the following LDAP provider will be used to lookup Unix IDs for the corresponding AD user. Additionally there is also a mapping between LDAP provider and AD domain that is stored in AD provider config. It will be used if AD is not set on the view box.
	LdapProviderId NullableInt64 `json:"ldapProviderId,omitempty"`
	// Specifies the name of the Storage Domain (View Box).
	Name NullableString `json:"name"`
	// Specifies the NIS domain that this view box is mapped to.
	NisDomainNameVec []string `json:"nisDomainNameVec,omitempty"`
	// Specifies an optional quota limit (in bytes) for the physical usage of this Storage Domain (View Box). This quota limit defines a physical limit for size of the data that can be physically stored on the Storage Domain (View Box), after the data has been reduced by change block tracking, compression and deduplication. The physical usage is the aggregate sum of the data stored for this Storage Domain (View Box) on all disks in the Cluster. (The usage includes Cloud Tier data and user data.) A new write is not allowed if the Storage Domain (View Box) will exceed the specified quota. However, it takes time for the Cohesity Cluster to calculate the usage across Nodes, so the limit may be exceeded by a small amount. In addition, if the limit is increased or data is removed, there may be a delay before the Cohesity Cluster allows more data to be written to the Storage Domain (View Box), as the Cluster is calculating the usage across Nodes.
	PhysicalQuota NullableQuotaPolicy `json:"physicalQuota,omitempty"`
	// Specifies whether creation of a S3 bucket is allowed in this Storage Domain (View Box). When a new S3 bucket creation request arrives, we'll look at all the View Boxes and the first Storage Domain (View Box) that allows creating S3 buckets in it will be the one where the bucket will be placed.
	S3BucketsAllowed NullableBool `json:"s3BucketsAllowed,omitempty"`
	StoragePolicy *StoragePolicy `json:"storagePolicy,omitempty"`
	// Optional ids for the tenants that this view box belongs. This must be checked before granting access to users. Unless the cluster enables view box sharing between tenants is allowed, there shall be at most one item in this list. Note that if all tenant may be deleted - such viewboxes must be garbage collected. This is currently done by a background thread in iris.
	TenantIdVec []string `json:"tenantIdVec,omitempty"`
}

// NewCreateViewBoxParams instantiates a new CreateViewBoxParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateViewBoxParams(clusterPartitionId NullableInt64, name NullableString) *CreateViewBoxParams {
	this := CreateViewBoxParams{}
	this.ClusterPartitionId = clusterPartitionId
	this.Name = name
	return &this
}

// NewCreateViewBoxParamsWithDefaults instantiates a new CreateViewBoxParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateViewBoxParamsWithDefaults() *CreateViewBoxParams {
	this := CreateViewBoxParams{}
	return &this
}

// GetAdDomainName returns the AdDomainName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateViewBoxParams) GetAdDomainName() string {
	if o == nil || o.AdDomainName.Get() == nil {
		var ret string
		return ret
	}
	return *o.AdDomainName.Get()
}

// GetAdDomainNameOk returns a tuple with the AdDomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateViewBoxParams) GetAdDomainNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AdDomainName.Get(), o.AdDomainName.IsSet()
}

// HasAdDomainName returns a boolean if a field has been set.
func (o *CreateViewBoxParams) HasAdDomainName() bool {
	if o != nil && o.AdDomainName.IsSet() {
		return true
	}

	return false
}

// SetAdDomainName gets a reference to the given NullableString and assigns it to the AdDomainName field.
func (o *CreateViewBoxParams) SetAdDomainName(v string) {
	o.AdDomainName.Set(&v)
}
// SetAdDomainNameNil sets the value for AdDomainName to be an explicit nil
func (o *CreateViewBoxParams) SetAdDomainNameNil() {
	o.AdDomainName.Set(nil)
}

// UnsetAdDomainName ensures that no value is present for AdDomainName, not even an explicit nil
func (o *CreateViewBoxParams) UnsetAdDomainName() {
	o.AdDomainName.Unset()
}

// GetClientSubnetWhiteList returns the ClientSubnetWhiteList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateViewBoxParams) GetClientSubnetWhiteList() []Subnet {
	if o == nil  {
		var ret []Subnet
		return ret
	}
	return o.ClientSubnetWhiteList
}

// GetClientSubnetWhiteListOk returns a tuple with the ClientSubnetWhiteList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateViewBoxParams) GetClientSubnetWhiteListOk() (*[]Subnet, bool) {
	if o == nil || o.ClientSubnetWhiteList == nil {
		return nil, false
	}
	return &o.ClientSubnetWhiteList, true
}

// HasClientSubnetWhiteList returns a boolean if a field has been set.
func (o *CreateViewBoxParams) HasClientSubnetWhiteList() bool {
	if o != nil && o.ClientSubnetWhiteList != nil {
		return true
	}

	return false
}

// SetClientSubnetWhiteList gets a reference to the given []Subnet and assigns it to the ClientSubnetWhiteList field.
func (o *CreateViewBoxParams) SetClientSubnetWhiteList(v []Subnet) {
	o.ClientSubnetWhiteList = v
}

// GetCloudDownWaterfallThresholdPct returns the CloudDownWaterfallThresholdPct field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateViewBoxParams) GetCloudDownWaterfallThresholdPct() int32 {
	if o == nil || o.CloudDownWaterfallThresholdPct.Get() == nil {
		var ret int32
		return ret
	}
	return *o.CloudDownWaterfallThresholdPct.Get()
}

// GetCloudDownWaterfallThresholdPctOk returns a tuple with the CloudDownWaterfallThresholdPct field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateViewBoxParams) GetCloudDownWaterfallThresholdPctOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CloudDownWaterfallThresholdPct.Get(), o.CloudDownWaterfallThresholdPct.IsSet()
}

// HasCloudDownWaterfallThresholdPct returns a boolean if a field has been set.
func (o *CreateViewBoxParams) HasCloudDownWaterfallThresholdPct() bool {
	if o != nil && o.CloudDownWaterfallThresholdPct.IsSet() {
		return true
	}

	return false
}

// SetCloudDownWaterfallThresholdPct gets a reference to the given NullableInt32 and assigns it to the CloudDownWaterfallThresholdPct field.
func (o *CreateViewBoxParams) SetCloudDownWaterfallThresholdPct(v int32) {
	o.CloudDownWaterfallThresholdPct.Set(&v)
}
// SetCloudDownWaterfallThresholdPctNil sets the value for CloudDownWaterfallThresholdPct to be an explicit nil
func (o *CreateViewBoxParams) SetCloudDownWaterfallThresholdPctNil() {
	o.CloudDownWaterfallThresholdPct.Set(nil)
}

// UnsetCloudDownWaterfallThresholdPct ensures that no value is present for CloudDownWaterfallThresholdPct, not even an explicit nil
func (o *CreateViewBoxParams) UnsetCloudDownWaterfallThresholdPct() {
	o.CloudDownWaterfallThresholdPct.Unset()
}

// GetCloudDownWaterfallThresholdSecs returns the CloudDownWaterfallThresholdSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateViewBoxParams) GetCloudDownWaterfallThresholdSecs() int32 {
	if o == nil || o.CloudDownWaterfallThresholdSecs.Get() == nil {
		var ret int32
		return ret
	}
	return *o.CloudDownWaterfallThresholdSecs.Get()
}

// GetCloudDownWaterfallThresholdSecsOk returns a tuple with the CloudDownWaterfallThresholdSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateViewBoxParams) GetCloudDownWaterfallThresholdSecsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CloudDownWaterfallThresholdSecs.Get(), o.CloudDownWaterfallThresholdSecs.IsSet()
}

// HasCloudDownWaterfallThresholdSecs returns a boolean if a field has been set.
func (o *CreateViewBoxParams) HasCloudDownWaterfallThresholdSecs() bool {
	if o != nil && o.CloudDownWaterfallThresholdSecs.IsSet() {
		return true
	}

	return false
}

// SetCloudDownWaterfallThresholdSecs gets a reference to the given NullableInt32 and assigns it to the CloudDownWaterfallThresholdSecs field.
func (o *CreateViewBoxParams) SetCloudDownWaterfallThresholdSecs(v int32) {
	o.CloudDownWaterfallThresholdSecs.Set(&v)
}
// SetCloudDownWaterfallThresholdSecsNil sets the value for CloudDownWaterfallThresholdSecs to be an explicit nil
func (o *CreateViewBoxParams) SetCloudDownWaterfallThresholdSecsNil() {
	o.CloudDownWaterfallThresholdSecs.Set(nil)
}

// UnsetCloudDownWaterfallThresholdSecs ensures that no value is present for CloudDownWaterfallThresholdSecs, not even an explicit nil
func (o *CreateViewBoxParams) UnsetCloudDownWaterfallThresholdSecs() {
	o.CloudDownWaterfallThresholdSecs.Unset()
}

// GetClusterPartitionId returns the ClusterPartitionId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *CreateViewBoxParams) GetClusterPartitionId() int64 {
	if o == nil || o.ClusterPartitionId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.ClusterPartitionId.Get()
}

// GetClusterPartitionIdOk returns a tuple with the ClusterPartitionId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateViewBoxParams) GetClusterPartitionIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterPartitionId.Get(), o.ClusterPartitionId.IsSet()
}

// SetClusterPartitionId sets field value
func (o *CreateViewBoxParams) SetClusterPartitionId(v int64) {
	o.ClusterPartitionId.Set(&v)
}

// GetDefaultUserQuotaPolicy returns the DefaultUserQuotaPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateViewBoxParams) GetDefaultUserQuotaPolicy() QuotaPolicy {
	if o == nil || o.DefaultUserQuotaPolicy.Get() == nil {
		var ret QuotaPolicy
		return ret
	}
	return *o.DefaultUserQuotaPolicy.Get()
}

// GetDefaultUserQuotaPolicyOk returns a tuple with the DefaultUserQuotaPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateViewBoxParams) GetDefaultUserQuotaPolicyOk() (*QuotaPolicy, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DefaultUserQuotaPolicy.Get(), o.DefaultUserQuotaPolicy.IsSet()
}

// HasDefaultUserQuotaPolicy returns a boolean if a field has been set.
func (o *CreateViewBoxParams) HasDefaultUserQuotaPolicy() bool {
	if o != nil && o.DefaultUserQuotaPolicy.IsSet() {
		return true
	}

	return false
}

// SetDefaultUserQuotaPolicy gets a reference to the given NullableQuotaPolicy and assigns it to the DefaultUserQuotaPolicy field.
func (o *CreateViewBoxParams) SetDefaultUserQuotaPolicy(v QuotaPolicy) {
	o.DefaultUserQuotaPolicy.Set(&v)
}
// SetDefaultUserQuotaPolicyNil sets the value for DefaultUserQuotaPolicy to be an explicit nil
func (o *CreateViewBoxParams) SetDefaultUserQuotaPolicyNil() {
	o.DefaultUserQuotaPolicy.Set(nil)
}

// UnsetDefaultUserQuotaPolicy ensures that no value is present for DefaultUserQuotaPolicy, not even an explicit nil
func (o *CreateViewBoxParams) UnsetDefaultUserQuotaPolicy() {
	o.DefaultUserQuotaPolicy.Unset()
}

// GetDefaultViewQuotaPolicy returns the DefaultViewQuotaPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateViewBoxParams) GetDefaultViewQuotaPolicy() QuotaPolicy {
	if o == nil || o.DefaultViewQuotaPolicy.Get() == nil {
		var ret QuotaPolicy
		return ret
	}
	return *o.DefaultViewQuotaPolicy.Get()
}

// GetDefaultViewQuotaPolicyOk returns a tuple with the DefaultViewQuotaPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateViewBoxParams) GetDefaultViewQuotaPolicyOk() (*QuotaPolicy, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DefaultViewQuotaPolicy.Get(), o.DefaultViewQuotaPolicy.IsSet()
}

// HasDefaultViewQuotaPolicy returns a boolean if a field has been set.
func (o *CreateViewBoxParams) HasDefaultViewQuotaPolicy() bool {
	if o != nil && o.DefaultViewQuotaPolicy.IsSet() {
		return true
	}

	return false
}

// SetDefaultViewQuotaPolicy gets a reference to the given NullableQuotaPolicy and assigns it to the DefaultViewQuotaPolicy field.
func (o *CreateViewBoxParams) SetDefaultViewQuotaPolicy(v QuotaPolicy) {
	o.DefaultViewQuotaPolicy.Set(&v)
}
// SetDefaultViewQuotaPolicyNil sets the value for DefaultViewQuotaPolicy to be an explicit nil
func (o *CreateViewBoxParams) SetDefaultViewQuotaPolicyNil() {
	o.DefaultViewQuotaPolicy.Set(nil)
}

// UnsetDefaultViewQuotaPolicy ensures that no value is present for DefaultViewQuotaPolicy, not even an explicit nil
func (o *CreateViewBoxParams) UnsetDefaultViewQuotaPolicy() {
	o.DefaultViewQuotaPolicy.Unset()
}

// GetDirectArchiveEnabled returns the DirectArchiveEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateViewBoxParams) GetDirectArchiveEnabled() bool {
	if o == nil || o.DirectArchiveEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.DirectArchiveEnabled.Get()
}

// GetDirectArchiveEnabledOk returns a tuple with the DirectArchiveEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateViewBoxParams) GetDirectArchiveEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DirectArchiveEnabled.Get(), o.DirectArchiveEnabled.IsSet()
}

// HasDirectArchiveEnabled returns a boolean if a field has been set.
func (o *CreateViewBoxParams) HasDirectArchiveEnabled() bool {
	if o != nil && o.DirectArchiveEnabled.IsSet() {
		return true
	}

	return false
}

// SetDirectArchiveEnabled gets a reference to the given NullableBool and assigns it to the DirectArchiveEnabled field.
func (o *CreateViewBoxParams) SetDirectArchiveEnabled(v bool) {
	o.DirectArchiveEnabled.Set(&v)
}
// SetDirectArchiveEnabledNil sets the value for DirectArchiveEnabled to be an explicit nil
func (o *CreateViewBoxParams) SetDirectArchiveEnabledNil() {
	o.DirectArchiveEnabled.Set(nil)
}

// UnsetDirectArchiveEnabled ensures that no value is present for DirectArchiveEnabled, not even an explicit nil
func (o *CreateViewBoxParams) UnsetDirectArchiveEnabled() {
	o.DirectArchiveEnabled.Unset()
}

// GetLdapProviderId returns the LdapProviderId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateViewBoxParams) GetLdapProviderId() int64 {
	if o == nil || o.LdapProviderId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LdapProviderId.Get()
}

// GetLdapProviderIdOk returns a tuple with the LdapProviderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateViewBoxParams) GetLdapProviderIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LdapProviderId.Get(), o.LdapProviderId.IsSet()
}

// HasLdapProviderId returns a boolean if a field has been set.
func (o *CreateViewBoxParams) HasLdapProviderId() bool {
	if o != nil && o.LdapProviderId.IsSet() {
		return true
	}

	return false
}

// SetLdapProviderId gets a reference to the given NullableInt64 and assigns it to the LdapProviderId field.
func (o *CreateViewBoxParams) SetLdapProviderId(v int64) {
	o.LdapProviderId.Set(&v)
}
// SetLdapProviderIdNil sets the value for LdapProviderId to be an explicit nil
func (o *CreateViewBoxParams) SetLdapProviderIdNil() {
	o.LdapProviderId.Set(nil)
}

// UnsetLdapProviderId ensures that no value is present for LdapProviderId, not even an explicit nil
func (o *CreateViewBoxParams) UnsetLdapProviderId() {
	o.LdapProviderId.Unset()
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CreateViewBoxParams) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateViewBoxParams) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *CreateViewBoxParams) SetName(v string) {
	o.Name.Set(&v)
}

// GetNisDomainNameVec returns the NisDomainNameVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateViewBoxParams) GetNisDomainNameVec() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.NisDomainNameVec
}

// GetNisDomainNameVecOk returns a tuple with the NisDomainNameVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateViewBoxParams) GetNisDomainNameVecOk() (*[]string, bool) {
	if o == nil || o.NisDomainNameVec == nil {
		return nil, false
	}
	return &o.NisDomainNameVec, true
}

// HasNisDomainNameVec returns a boolean if a field has been set.
func (o *CreateViewBoxParams) HasNisDomainNameVec() bool {
	if o != nil && o.NisDomainNameVec != nil {
		return true
	}

	return false
}

// SetNisDomainNameVec gets a reference to the given []string and assigns it to the NisDomainNameVec field.
func (o *CreateViewBoxParams) SetNisDomainNameVec(v []string) {
	o.NisDomainNameVec = v
}

// GetPhysicalQuota returns the PhysicalQuota field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateViewBoxParams) GetPhysicalQuota() QuotaPolicy {
	if o == nil || o.PhysicalQuota.Get() == nil {
		var ret QuotaPolicy
		return ret
	}
	return *o.PhysicalQuota.Get()
}

// GetPhysicalQuotaOk returns a tuple with the PhysicalQuota field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateViewBoxParams) GetPhysicalQuotaOk() (*QuotaPolicy, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PhysicalQuota.Get(), o.PhysicalQuota.IsSet()
}

// HasPhysicalQuota returns a boolean if a field has been set.
func (o *CreateViewBoxParams) HasPhysicalQuota() bool {
	if o != nil && o.PhysicalQuota.IsSet() {
		return true
	}

	return false
}

// SetPhysicalQuota gets a reference to the given NullableQuotaPolicy and assigns it to the PhysicalQuota field.
func (o *CreateViewBoxParams) SetPhysicalQuota(v QuotaPolicy) {
	o.PhysicalQuota.Set(&v)
}
// SetPhysicalQuotaNil sets the value for PhysicalQuota to be an explicit nil
func (o *CreateViewBoxParams) SetPhysicalQuotaNil() {
	o.PhysicalQuota.Set(nil)
}

// UnsetPhysicalQuota ensures that no value is present for PhysicalQuota, not even an explicit nil
func (o *CreateViewBoxParams) UnsetPhysicalQuota() {
	o.PhysicalQuota.Unset()
}

// GetS3BucketsAllowed returns the S3BucketsAllowed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateViewBoxParams) GetS3BucketsAllowed() bool {
	if o == nil || o.S3BucketsAllowed.Get() == nil {
		var ret bool
		return ret
	}
	return *o.S3BucketsAllowed.Get()
}

// GetS3BucketsAllowedOk returns a tuple with the S3BucketsAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateViewBoxParams) GetS3BucketsAllowedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.S3BucketsAllowed.Get(), o.S3BucketsAllowed.IsSet()
}

// HasS3BucketsAllowed returns a boolean if a field has been set.
func (o *CreateViewBoxParams) HasS3BucketsAllowed() bool {
	if o != nil && o.S3BucketsAllowed.IsSet() {
		return true
	}

	return false
}

// SetS3BucketsAllowed gets a reference to the given NullableBool and assigns it to the S3BucketsAllowed field.
func (o *CreateViewBoxParams) SetS3BucketsAllowed(v bool) {
	o.S3BucketsAllowed.Set(&v)
}
// SetS3BucketsAllowedNil sets the value for S3BucketsAllowed to be an explicit nil
func (o *CreateViewBoxParams) SetS3BucketsAllowedNil() {
	o.S3BucketsAllowed.Set(nil)
}

// UnsetS3BucketsAllowed ensures that no value is present for S3BucketsAllowed, not even an explicit nil
func (o *CreateViewBoxParams) UnsetS3BucketsAllowed() {
	o.S3BucketsAllowed.Unset()
}

// GetStoragePolicy returns the StoragePolicy field value if set, zero value otherwise.
func (o *CreateViewBoxParams) GetStoragePolicy() StoragePolicy {
	if o == nil || o.StoragePolicy == nil {
		var ret StoragePolicy
		return ret
	}
	return *o.StoragePolicy
}

// GetStoragePolicyOk returns a tuple with the StoragePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateViewBoxParams) GetStoragePolicyOk() (*StoragePolicy, bool) {
	if o == nil || o.StoragePolicy == nil {
		return nil, false
	}
	return o.StoragePolicy, true
}

// HasStoragePolicy returns a boolean if a field has been set.
func (o *CreateViewBoxParams) HasStoragePolicy() bool {
	if o != nil && o.StoragePolicy != nil {
		return true
	}

	return false
}

// SetStoragePolicy gets a reference to the given StoragePolicy and assigns it to the StoragePolicy field.
func (o *CreateViewBoxParams) SetStoragePolicy(v StoragePolicy) {
	o.StoragePolicy = &v
}

// GetTenantIdVec returns the TenantIdVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateViewBoxParams) GetTenantIdVec() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.TenantIdVec
}

// GetTenantIdVecOk returns a tuple with the TenantIdVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateViewBoxParams) GetTenantIdVecOk() (*[]string, bool) {
	if o == nil || o.TenantIdVec == nil {
		return nil, false
	}
	return &o.TenantIdVec, true
}

// HasTenantIdVec returns a boolean if a field has been set.
func (o *CreateViewBoxParams) HasTenantIdVec() bool {
	if o != nil && o.TenantIdVec != nil {
		return true
	}

	return false
}

// SetTenantIdVec gets a reference to the given []string and assigns it to the TenantIdVec field.
func (o *CreateViewBoxParams) SetTenantIdVec(v []string) {
	o.TenantIdVec = v
}

func (o CreateViewBoxParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AdDomainName.IsSet() {
		toSerialize["adDomainName"] = o.AdDomainName.Get()
	}
	if o.ClientSubnetWhiteList != nil {
		toSerialize["clientSubnetWhiteList"] = o.ClientSubnetWhiteList
	}
	if o.CloudDownWaterfallThresholdPct.IsSet() {
		toSerialize["cloudDownWaterfallThresholdPct"] = o.CloudDownWaterfallThresholdPct.Get()
	}
	if o.CloudDownWaterfallThresholdSecs.IsSet() {
		toSerialize["cloudDownWaterfallThresholdSecs"] = o.CloudDownWaterfallThresholdSecs.Get()
	}
	if true {
		toSerialize["clusterPartitionId"] = o.ClusterPartitionId.Get()
	}
	if o.DefaultUserQuotaPolicy.IsSet() {
		toSerialize["defaultUserQuotaPolicy"] = o.DefaultUserQuotaPolicy.Get()
	}
	if o.DefaultViewQuotaPolicy.IsSet() {
		toSerialize["defaultViewQuotaPolicy"] = o.DefaultViewQuotaPolicy.Get()
	}
	if o.DirectArchiveEnabled.IsSet() {
		toSerialize["directArchiveEnabled"] = o.DirectArchiveEnabled.Get()
	}
	if o.LdapProviderId.IsSet() {
		toSerialize["ldapProviderId"] = o.LdapProviderId.Get()
	}
	if true {
		toSerialize["name"] = o.Name.Get()
	}
	if o.NisDomainNameVec != nil {
		toSerialize["nisDomainNameVec"] = o.NisDomainNameVec
	}
	if o.PhysicalQuota.IsSet() {
		toSerialize["physicalQuota"] = o.PhysicalQuota.Get()
	}
	if o.S3BucketsAllowed.IsSet() {
		toSerialize["s3BucketsAllowed"] = o.S3BucketsAllowed.Get()
	}
	if o.StoragePolicy != nil {
		toSerialize["storagePolicy"] = o.StoragePolicy
	}
	if o.TenantIdVec != nil {
		toSerialize["tenantIdVec"] = o.TenantIdVec
	}
	return json.Marshal(toSerialize)
}

type NullableCreateViewBoxParams struct {
	value *CreateViewBoxParams
	isSet bool
}

func (v NullableCreateViewBoxParams) Get() *CreateViewBoxParams {
	return v.value
}

func (v *NullableCreateViewBoxParams) Set(val *CreateViewBoxParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateViewBoxParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateViewBoxParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateViewBoxParams(val *CreateViewBoxParams) *NullableCreateViewBoxParams {
	return &NullableCreateViewBoxParams{value: val, isSet: true}
}

func (v NullableCreateViewBoxParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateViewBoxParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


