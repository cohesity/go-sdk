/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// QoSPolicy Specifies the Quality of Service (QoS) Policy details.
type QoSPolicy struct {
	// Specifies whether to always write to SSD even if SeqWriteSsdPct is 0.
	AlwaysUseSsd NullableBool `json:"alwaysUseSsd,omitempty"`
	// Specifies Id of the QoS Policy.
	Id NullableInt64 `json:"id,omitempty"`
	// Specifies minimum number of requests,  corresponding to this Policy, executed in the QoS queue.
	MinRequests NullableInt32 `json:"minRequests,omitempty"`
	// Specifies Name of the Qos Policy.
	Name NullableString `json:"name,omitempty"`
	// Specifies Priority of the Qos Policy. Priority of QoS Policy as defined in cluster config proto.
	Priority NullableString `json:"priority,omitempty"`
	// Specifies percentage of a random write request belonging to this Policy that hits hydra.
	RandomWriteHydraPct NullableInt32 `json:"randomWriteHydraPct,omitempty"`
	// Specifies percentage of a random write request belonging to this Policy that hits SSD.
	RandomWriteSsdPct NullableInt32 `json:"randomWriteSsdPct,omitempty"`
	// Specifies percentage of a sequential write request belonging to this Policy that hits hydra.
	SeqWriteHydraPct NullableInt32 `json:"seqWriteHydraPct,omitempty"`
	// Specifies percentage of a sequential write request belonging to this Policy that hits SSD.
	SeqWriteSsdPct NullableInt32 `json:"seqWriteSsdPct,omitempty"`
	// Specifies Weight of the QoS Policy used in QoS queue.
	Weight NullableInt32 `json:"weight,omitempty"`
	// Specifies Workload type attribute associated with this Policy.
	WorkLoadType NullableString `json:"workLoadType,omitempty"`
}

// NewQoSPolicy instantiates a new QoSPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQoSPolicy() *QoSPolicy {
	this := QoSPolicy{}
	return &this
}

// NewQoSPolicyWithDefaults instantiates a new QoSPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQoSPolicyWithDefaults() *QoSPolicy {
	this := QoSPolicy{}
	return &this
}

// GetAlwaysUseSsd returns the AlwaysUseSsd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QoSPolicy) GetAlwaysUseSsd() bool {
	if o == nil || o.AlwaysUseSsd.Get() == nil {
		var ret bool
		return ret
	}
	return *o.AlwaysUseSsd.Get()
}

// GetAlwaysUseSsdOk returns a tuple with the AlwaysUseSsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QoSPolicy) GetAlwaysUseSsdOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AlwaysUseSsd.Get(), o.AlwaysUseSsd.IsSet()
}

// HasAlwaysUseSsd returns a boolean if a field has been set.
func (o *QoSPolicy) HasAlwaysUseSsd() bool {
	if o != nil && o.AlwaysUseSsd.IsSet() {
		return true
	}

	return false
}

// SetAlwaysUseSsd gets a reference to the given NullableBool and assigns it to the AlwaysUseSsd field.
func (o *QoSPolicy) SetAlwaysUseSsd(v bool) {
	o.AlwaysUseSsd.Set(&v)
}
// SetAlwaysUseSsdNil sets the value for AlwaysUseSsd to be an explicit nil
func (o *QoSPolicy) SetAlwaysUseSsdNil() {
	o.AlwaysUseSsd.Set(nil)
}

// UnsetAlwaysUseSsd ensures that no value is present for AlwaysUseSsd, not even an explicit nil
func (o *QoSPolicy) UnsetAlwaysUseSsd() {
	o.AlwaysUseSsd.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QoSPolicy) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QoSPolicy) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *QoSPolicy) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *QoSPolicy) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *QoSPolicy) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *QoSPolicy) UnsetId() {
	o.Id.Unset()
}

// GetMinRequests returns the MinRequests field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QoSPolicy) GetMinRequests() int32 {
	if o == nil || o.MinRequests.Get() == nil {
		var ret int32
		return ret
	}
	return *o.MinRequests.Get()
}

// GetMinRequestsOk returns a tuple with the MinRequests field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QoSPolicy) GetMinRequestsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MinRequests.Get(), o.MinRequests.IsSet()
}

// HasMinRequests returns a boolean if a field has been set.
func (o *QoSPolicy) HasMinRequests() bool {
	if o != nil && o.MinRequests.IsSet() {
		return true
	}

	return false
}

// SetMinRequests gets a reference to the given NullableInt32 and assigns it to the MinRequests field.
func (o *QoSPolicy) SetMinRequests(v int32) {
	o.MinRequests.Set(&v)
}
// SetMinRequestsNil sets the value for MinRequests to be an explicit nil
func (o *QoSPolicy) SetMinRequestsNil() {
	o.MinRequests.Set(nil)
}

// UnsetMinRequests ensures that no value is present for MinRequests, not even an explicit nil
func (o *QoSPolicy) UnsetMinRequests() {
	o.MinRequests.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QoSPolicy) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QoSPolicy) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *QoSPolicy) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *QoSPolicy) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *QoSPolicy) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *QoSPolicy) UnsetName() {
	o.Name.Unset()
}

// GetPriority returns the Priority field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QoSPolicy) GetPriority() string {
	if o == nil || o.Priority.Get() == nil {
		var ret string
		return ret
	}
	return *o.Priority.Get()
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QoSPolicy) GetPriorityOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Priority.Get(), o.Priority.IsSet()
}

// HasPriority returns a boolean if a field has been set.
func (o *QoSPolicy) HasPriority() bool {
	if o != nil && o.Priority.IsSet() {
		return true
	}

	return false
}

// SetPriority gets a reference to the given NullableString and assigns it to the Priority field.
func (o *QoSPolicy) SetPriority(v string) {
	o.Priority.Set(&v)
}
// SetPriorityNil sets the value for Priority to be an explicit nil
func (o *QoSPolicy) SetPriorityNil() {
	o.Priority.Set(nil)
}

// UnsetPriority ensures that no value is present for Priority, not even an explicit nil
func (o *QoSPolicy) UnsetPriority() {
	o.Priority.Unset()
}

// GetRandomWriteHydraPct returns the RandomWriteHydraPct field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QoSPolicy) GetRandomWriteHydraPct() int32 {
	if o == nil || o.RandomWriteHydraPct.Get() == nil {
		var ret int32
		return ret
	}
	return *o.RandomWriteHydraPct.Get()
}

// GetRandomWriteHydraPctOk returns a tuple with the RandomWriteHydraPct field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QoSPolicy) GetRandomWriteHydraPctOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RandomWriteHydraPct.Get(), o.RandomWriteHydraPct.IsSet()
}

// HasRandomWriteHydraPct returns a boolean if a field has been set.
func (o *QoSPolicy) HasRandomWriteHydraPct() bool {
	if o != nil && o.RandomWriteHydraPct.IsSet() {
		return true
	}

	return false
}

// SetRandomWriteHydraPct gets a reference to the given NullableInt32 and assigns it to the RandomWriteHydraPct field.
func (o *QoSPolicy) SetRandomWriteHydraPct(v int32) {
	o.RandomWriteHydraPct.Set(&v)
}
// SetRandomWriteHydraPctNil sets the value for RandomWriteHydraPct to be an explicit nil
func (o *QoSPolicy) SetRandomWriteHydraPctNil() {
	o.RandomWriteHydraPct.Set(nil)
}

// UnsetRandomWriteHydraPct ensures that no value is present for RandomWriteHydraPct, not even an explicit nil
func (o *QoSPolicy) UnsetRandomWriteHydraPct() {
	o.RandomWriteHydraPct.Unset()
}

// GetRandomWriteSsdPct returns the RandomWriteSsdPct field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QoSPolicy) GetRandomWriteSsdPct() int32 {
	if o == nil || o.RandomWriteSsdPct.Get() == nil {
		var ret int32
		return ret
	}
	return *o.RandomWriteSsdPct.Get()
}

// GetRandomWriteSsdPctOk returns a tuple with the RandomWriteSsdPct field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QoSPolicy) GetRandomWriteSsdPctOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RandomWriteSsdPct.Get(), o.RandomWriteSsdPct.IsSet()
}

// HasRandomWriteSsdPct returns a boolean if a field has been set.
func (o *QoSPolicy) HasRandomWriteSsdPct() bool {
	if o != nil && o.RandomWriteSsdPct.IsSet() {
		return true
	}

	return false
}

// SetRandomWriteSsdPct gets a reference to the given NullableInt32 and assigns it to the RandomWriteSsdPct field.
func (o *QoSPolicy) SetRandomWriteSsdPct(v int32) {
	o.RandomWriteSsdPct.Set(&v)
}
// SetRandomWriteSsdPctNil sets the value for RandomWriteSsdPct to be an explicit nil
func (o *QoSPolicy) SetRandomWriteSsdPctNil() {
	o.RandomWriteSsdPct.Set(nil)
}

// UnsetRandomWriteSsdPct ensures that no value is present for RandomWriteSsdPct, not even an explicit nil
func (o *QoSPolicy) UnsetRandomWriteSsdPct() {
	o.RandomWriteSsdPct.Unset()
}

// GetSeqWriteHydraPct returns the SeqWriteHydraPct field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QoSPolicy) GetSeqWriteHydraPct() int32 {
	if o == nil || o.SeqWriteHydraPct.Get() == nil {
		var ret int32
		return ret
	}
	return *o.SeqWriteHydraPct.Get()
}

// GetSeqWriteHydraPctOk returns a tuple with the SeqWriteHydraPct field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QoSPolicy) GetSeqWriteHydraPctOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SeqWriteHydraPct.Get(), o.SeqWriteHydraPct.IsSet()
}

// HasSeqWriteHydraPct returns a boolean if a field has been set.
func (o *QoSPolicy) HasSeqWriteHydraPct() bool {
	if o != nil && o.SeqWriteHydraPct.IsSet() {
		return true
	}

	return false
}

// SetSeqWriteHydraPct gets a reference to the given NullableInt32 and assigns it to the SeqWriteHydraPct field.
func (o *QoSPolicy) SetSeqWriteHydraPct(v int32) {
	o.SeqWriteHydraPct.Set(&v)
}
// SetSeqWriteHydraPctNil sets the value for SeqWriteHydraPct to be an explicit nil
func (o *QoSPolicy) SetSeqWriteHydraPctNil() {
	o.SeqWriteHydraPct.Set(nil)
}

// UnsetSeqWriteHydraPct ensures that no value is present for SeqWriteHydraPct, not even an explicit nil
func (o *QoSPolicy) UnsetSeqWriteHydraPct() {
	o.SeqWriteHydraPct.Unset()
}

// GetSeqWriteSsdPct returns the SeqWriteSsdPct field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QoSPolicy) GetSeqWriteSsdPct() int32 {
	if o == nil || o.SeqWriteSsdPct.Get() == nil {
		var ret int32
		return ret
	}
	return *o.SeqWriteSsdPct.Get()
}

// GetSeqWriteSsdPctOk returns a tuple with the SeqWriteSsdPct field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QoSPolicy) GetSeqWriteSsdPctOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SeqWriteSsdPct.Get(), o.SeqWriteSsdPct.IsSet()
}

// HasSeqWriteSsdPct returns a boolean if a field has been set.
func (o *QoSPolicy) HasSeqWriteSsdPct() bool {
	if o != nil && o.SeqWriteSsdPct.IsSet() {
		return true
	}

	return false
}

// SetSeqWriteSsdPct gets a reference to the given NullableInt32 and assigns it to the SeqWriteSsdPct field.
func (o *QoSPolicy) SetSeqWriteSsdPct(v int32) {
	o.SeqWriteSsdPct.Set(&v)
}
// SetSeqWriteSsdPctNil sets the value for SeqWriteSsdPct to be an explicit nil
func (o *QoSPolicy) SetSeqWriteSsdPctNil() {
	o.SeqWriteSsdPct.Set(nil)
}

// UnsetSeqWriteSsdPct ensures that no value is present for SeqWriteSsdPct, not even an explicit nil
func (o *QoSPolicy) UnsetSeqWriteSsdPct() {
	o.SeqWriteSsdPct.Unset()
}

// GetWeight returns the Weight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QoSPolicy) GetWeight() int32 {
	if o == nil || o.Weight.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Weight.Get()
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QoSPolicy) GetWeightOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Weight.Get(), o.Weight.IsSet()
}

// HasWeight returns a boolean if a field has been set.
func (o *QoSPolicy) HasWeight() bool {
	if o != nil && o.Weight.IsSet() {
		return true
	}

	return false
}

// SetWeight gets a reference to the given NullableInt32 and assigns it to the Weight field.
func (o *QoSPolicy) SetWeight(v int32) {
	o.Weight.Set(&v)
}
// SetWeightNil sets the value for Weight to be an explicit nil
func (o *QoSPolicy) SetWeightNil() {
	o.Weight.Set(nil)
}

// UnsetWeight ensures that no value is present for Weight, not even an explicit nil
func (o *QoSPolicy) UnsetWeight() {
	o.Weight.Unset()
}

// GetWorkLoadType returns the WorkLoadType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QoSPolicy) GetWorkLoadType() string {
	if o == nil || o.WorkLoadType.Get() == nil {
		var ret string
		return ret
	}
	return *o.WorkLoadType.Get()
}

// GetWorkLoadTypeOk returns a tuple with the WorkLoadType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QoSPolicy) GetWorkLoadTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.WorkLoadType.Get(), o.WorkLoadType.IsSet()
}

// HasWorkLoadType returns a boolean if a field has been set.
func (o *QoSPolicy) HasWorkLoadType() bool {
	if o != nil && o.WorkLoadType.IsSet() {
		return true
	}

	return false
}

// SetWorkLoadType gets a reference to the given NullableString and assigns it to the WorkLoadType field.
func (o *QoSPolicy) SetWorkLoadType(v string) {
	o.WorkLoadType.Set(&v)
}
// SetWorkLoadTypeNil sets the value for WorkLoadType to be an explicit nil
func (o *QoSPolicy) SetWorkLoadTypeNil() {
	o.WorkLoadType.Set(nil)
}

// UnsetWorkLoadType ensures that no value is present for WorkLoadType, not even an explicit nil
func (o *QoSPolicy) UnsetWorkLoadType() {
	o.WorkLoadType.Unset()
}

func (o QoSPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AlwaysUseSsd.IsSet() {
		toSerialize["alwaysUseSsd"] = o.AlwaysUseSsd.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.MinRequests.IsSet() {
		toSerialize["minRequests"] = o.MinRequests.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Priority.IsSet() {
		toSerialize["priority"] = o.Priority.Get()
	}
	if o.RandomWriteHydraPct.IsSet() {
		toSerialize["randomWriteHydraPct"] = o.RandomWriteHydraPct.Get()
	}
	if o.RandomWriteSsdPct.IsSet() {
		toSerialize["randomWriteSsdPct"] = o.RandomWriteSsdPct.Get()
	}
	if o.SeqWriteHydraPct.IsSet() {
		toSerialize["seqWriteHydraPct"] = o.SeqWriteHydraPct.Get()
	}
	if o.SeqWriteSsdPct.IsSet() {
		toSerialize["seqWriteSsdPct"] = o.SeqWriteSsdPct.Get()
	}
	if o.Weight.IsSet() {
		toSerialize["weight"] = o.Weight.Get()
	}
	if o.WorkLoadType.IsSet() {
		toSerialize["workLoadType"] = o.WorkLoadType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableQoSPolicy struct {
	value *QoSPolicy
	isSet bool
}

func (v NullableQoSPolicy) Get() *QoSPolicy {
	return v.value
}

func (v *NullableQoSPolicy) Set(val *QoSPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableQoSPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableQoSPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQoSPolicy(val *QoSPolicy) *NullableQoSPolicy {
	return &NullableQoSPolicy{value: val, isSet: true}
}

func (v NullableQoSPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQoSPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


