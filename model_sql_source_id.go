/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// SqlSourceId Specifies a unique id for a SQL Protection Source.
type SqlSourceId struct {
	// Specifies a unique identifier generated from the date the database is created or renamed. Cohesity uses this identifier in combination with the databaseId to uniquely identify a database.
	CreatedDateMsecs NullableInt64 `json:"createdDateMsecs,omitempty"`
	// Specifies a unique id of the database but only for the life of the database. SQL Server may reuse database ids. Cohesity uses the createDateMsecs in combination with this databaseId to uniquely identify a database.
	DatabaseId NullableInt64 `json:"databaseId,omitempty"`
	// Array of bytes that stores the SQL Server Instance id.  Specifies unique id for the SQL Server instance. This id does not change during the life of the instance.
	InstanceId []int32 `json:"instanceId,omitempty"`
}

// NewSqlSourceId instantiates a new SqlSourceId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSqlSourceId() *SqlSourceId {
	this := SqlSourceId{}
	return &this
}

// NewSqlSourceIdWithDefaults instantiates a new SqlSourceId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSqlSourceIdWithDefaults() *SqlSourceId {
	this := SqlSourceId{}
	return &this
}

// GetCreatedDateMsecs returns the CreatedDateMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlSourceId) GetCreatedDateMsecs() int64 {
	if o == nil || o.CreatedDateMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.CreatedDateMsecs.Get()
}

// GetCreatedDateMsecsOk returns a tuple with the CreatedDateMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlSourceId) GetCreatedDateMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CreatedDateMsecs.Get(), o.CreatedDateMsecs.IsSet()
}

// HasCreatedDateMsecs returns a boolean if a field has been set.
func (o *SqlSourceId) HasCreatedDateMsecs() bool {
	if o != nil && o.CreatedDateMsecs.IsSet() {
		return true
	}

	return false
}

// SetCreatedDateMsecs gets a reference to the given NullableInt64 and assigns it to the CreatedDateMsecs field.
func (o *SqlSourceId) SetCreatedDateMsecs(v int64) {
	o.CreatedDateMsecs.Set(&v)
}
// SetCreatedDateMsecsNil sets the value for CreatedDateMsecs to be an explicit nil
func (o *SqlSourceId) SetCreatedDateMsecsNil() {
	o.CreatedDateMsecs.Set(nil)
}

// UnsetCreatedDateMsecs ensures that no value is present for CreatedDateMsecs, not even an explicit nil
func (o *SqlSourceId) UnsetCreatedDateMsecs() {
	o.CreatedDateMsecs.Unset()
}

// GetDatabaseId returns the DatabaseId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlSourceId) GetDatabaseId() int64 {
	if o == nil || o.DatabaseId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DatabaseId.Get()
}

// GetDatabaseIdOk returns a tuple with the DatabaseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlSourceId) GetDatabaseIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DatabaseId.Get(), o.DatabaseId.IsSet()
}

// HasDatabaseId returns a boolean if a field has been set.
func (o *SqlSourceId) HasDatabaseId() bool {
	if o != nil && o.DatabaseId.IsSet() {
		return true
	}

	return false
}

// SetDatabaseId gets a reference to the given NullableInt64 and assigns it to the DatabaseId field.
func (o *SqlSourceId) SetDatabaseId(v int64) {
	o.DatabaseId.Set(&v)
}
// SetDatabaseIdNil sets the value for DatabaseId to be an explicit nil
func (o *SqlSourceId) SetDatabaseIdNil() {
	o.DatabaseId.Set(nil)
}

// UnsetDatabaseId ensures that no value is present for DatabaseId, not even an explicit nil
func (o *SqlSourceId) UnsetDatabaseId() {
	o.DatabaseId.Unset()
}

// GetInstanceId returns the InstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlSourceId) GetInstanceId() []int32 {
	if o == nil  {
		var ret []int32
		return ret
	}
	return o.InstanceId
}

// GetInstanceIdOk returns a tuple with the InstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlSourceId) GetInstanceIdOk() (*[]int32, bool) {
	if o == nil || o.InstanceId == nil {
		return nil, false
	}
	return &o.InstanceId, true
}

// HasInstanceId returns a boolean if a field has been set.
func (o *SqlSourceId) HasInstanceId() bool {
	if o != nil && o.InstanceId != nil {
		return true
	}

	return false
}

// SetInstanceId gets a reference to the given []int32 and assigns it to the InstanceId field.
func (o *SqlSourceId) SetInstanceId(v []int32) {
	o.InstanceId = v
}

func (o SqlSourceId) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedDateMsecs.IsSet() {
		toSerialize["createdDateMsecs"] = o.CreatedDateMsecs.Get()
	}
	if o.DatabaseId.IsSet() {
		toSerialize["databaseId"] = o.DatabaseId.Get()
	}
	if o.InstanceId != nil {
		toSerialize["instanceId"] = o.InstanceId
	}
	return json.Marshal(toSerialize)
}

type NullableSqlSourceId struct {
	value *SqlSourceId
	isSet bool
}

func (v NullableSqlSourceId) Get() *SqlSourceId {
	return v.value
}

func (v *NullableSqlSourceId) Set(val *SqlSourceId) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlSourceId) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlSourceId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlSourceId(val *SqlSourceId) *NullableSqlSourceId {
	return &NullableSqlSourceId{value: val, isSet: true}
}

func (v NullableSqlSourceId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSqlSourceId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


