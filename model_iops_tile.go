/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// IopsTile IOPs information for dashboard.
type IopsTile struct {
	// Maximum Read IOs per second in last 24 hours.
	MaxReadIops NullableInt64 `json:"maxReadIops,omitempty"`
	// Maximum number of Write IOs per second in last 24 hours.
	MaxWriteIops NullableInt64 `json:"maxWriteIops,omitempty"`
	// Read IOs per second samples taken for the past 24 hours at 10 minutes interval given in descending order of time.
	ReadIopsSamples []Sample `json:"readIopsSamples,omitempty"`
	// Write IOs per second samples taken for the past 24 hours at 10 minutes interval given in descending order of time.
	WriteIopsSamples []Sample `json:"writeIopsSamples,omitempty"`
}

// NewIopsTile instantiates a new IopsTile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIopsTile() *IopsTile {
	this := IopsTile{}
	return &this
}

// NewIopsTileWithDefaults instantiates a new IopsTile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIopsTileWithDefaults() *IopsTile {
	this := IopsTile{}
	return &this
}

// GetMaxReadIops returns the MaxReadIops field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IopsTile) GetMaxReadIops() int64 {
	if o == nil || o.MaxReadIops.Get() == nil {
		var ret int64
		return ret
	}
	return *o.MaxReadIops.Get()
}

// GetMaxReadIopsOk returns a tuple with the MaxReadIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IopsTile) GetMaxReadIopsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MaxReadIops.Get(), o.MaxReadIops.IsSet()
}

// HasMaxReadIops returns a boolean if a field has been set.
func (o *IopsTile) HasMaxReadIops() bool {
	if o != nil && o.MaxReadIops.IsSet() {
		return true
	}

	return false
}

// SetMaxReadIops gets a reference to the given NullableInt64 and assigns it to the MaxReadIops field.
func (o *IopsTile) SetMaxReadIops(v int64) {
	o.MaxReadIops.Set(&v)
}
// SetMaxReadIopsNil sets the value for MaxReadIops to be an explicit nil
func (o *IopsTile) SetMaxReadIopsNil() {
	o.MaxReadIops.Set(nil)
}

// UnsetMaxReadIops ensures that no value is present for MaxReadIops, not even an explicit nil
func (o *IopsTile) UnsetMaxReadIops() {
	o.MaxReadIops.Unset()
}

// GetMaxWriteIops returns the MaxWriteIops field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IopsTile) GetMaxWriteIops() int64 {
	if o == nil || o.MaxWriteIops.Get() == nil {
		var ret int64
		return ret
	}
	return *o.MaxWriteIops.Get()
}

// GetMaxWriteIopsOk returns a tuple with the MaxWriteIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IopsTile) GetMaxWriteIopsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MaxWriteIops.Get(), o.MaxWriteIops.IsSet()
}

// HasMaxWriteIops returns a boolean if a field has been set.
func (o *IopsTile) HasMaxWriteIops() bool {
	if o != nil && o.MaxWriteIops.IsSet() {
		return true
	}

	return false
}

// SetMaxWriteIops gets a reference to the given NullableInt64 and assigns it to the MaxWriteIops field.
func (o *IopsTile) SetMaxWriteIops(v int64) {
	o.MaxWriteIops.Set(&v)
}
// SetMaxWriteIopsNil sets the value for MaxWriteIops to be an explicit nil
func (o *IopsTile) SetMaxWriteIopsNil() {
	o.MaxWriteIops.Set(nil)
}

// UnsetMaxWriteIops ensures that no value is present for MaxWriteIops, not even an explicit nil
func (o *IopsTile) UnsetMaxWriteIops() {
	o.MaxWriteIops.Unset()
}

// GetReadIopsSamples returns the ReadIopsSamples field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IopsTile) GetReadIopsSamples() []Sample {
	if o == nil  {
		var ret []Sample
		return ret
	}
	return o.ReadIopsSamples
}

// GetReadIopsSamplesOk returns a tuple with the ReadIopsSamples field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IopsTile) GetReadIopsSamplesOk() (*[]Sample, bool) {
	if o == nil || o.ReadIopsSamples == nil {
		return nil, false
	}
	return &o.ReadIopsSamples, true
}

// HasReadIopsSamples returns a boolean if a field has been set.
func (o *IopsTile) HasReadIopsSamples() bool {
	if o != nil && o.ReadIopsSamples != nil {
		return true
	}

	return false
}

// SetReadIopsSamples gets a reference to the given []Sample and assigns it to the ReadIopsSamples field.
func (o *IopsTile) SetReadIopsSamples(v []Sample) {
	o.ReadIopsSamples = v
}

// GetWriteIopsSamples returns the WriteIopsSamples field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IopsTile) GetWriteIopsSamples() []Sample {
	if o == nil  {
		var ret []Sample
		return ret
	}
	return o.WriteIopsSamples
}

// GetWriteIopsSamplesOk returns a tuple with the WriteIopsSamples field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IopsTile) GetWriteIopsSamplesOk() (*[]Sample, bool) {
	if o == nil || o.WriteIopsSamples == nil {
		return nil, false
	}
	return &o.WriteIopsSamples, true
}

// HasWriteIopsSamples returns a boolean if a field has been set.
func (o *IopsTile) HasWriteIopsSamples() bool {
	if o != nil && o.WriteIopsSamples != nil {
		return true
	}

	return false
}

// SetWriteIopsSamples gets a reference to the given []Sample and assigns it to the WriteIopsSamples field.
func (o *IopsTile) SetWriteIopsSamples(v []Sample) {
	o.WriteIopsSamples = v
}

func (o IopsTile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MaxReadIops.IsSet() {
		toSerialize["maxReadIops"] = o.MaxReadIops.Get()
	}
	if o.MaxWriteIops.IsSet() {
		toSerialize["maxWriteIops"] = o.MaxWriteIops.Get()
	}
	if o.ReadIopsSamples != nil {
		toSerialize["readIopsSamples"] = o.ReadIopsSamples
	}
	if o.WriteIopsSamples != nil {
		toSerialize["writeIopsSamples"] = o.WriteIopsSamples
	}
	return json.Marshal(toSerialize)
}

type NullableIopsTile struct {
	value *IopsTile
	isSet bool
}

func (v NullableIopsTile) Get() *IopsTile {
	return v.value
}

func (v *NullableIopsTile) Set(val *IopsTile) {
	v.value = val
	v.isSet = true
}

func (v NullableIopsTile) IsSet() bool {
	return v.isSet
}

func (v *NullableIopsTile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIopsTile(val *IopsTile) *NullableIopsTile {
	return &NullableIopsTile{value: val, isSet: true}
}

func (v NullableIopsTile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIopsTile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


