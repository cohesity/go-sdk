/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// VMwareObjectId Specifies a unique Protection Source id across Cohesity Clusters. It is derived from the id of the VMware Protection Source.
type VMwareObjectId struct {
	// Specifies the Managed Object Reference Item.
	MorItem NullableString `json:"morItem,omitempty"`
	// Specifies the Managed Object Reference Type.
	MorType NullableString `json:"morType,omitempty"`
	// Specifies a Universally Unique Identifier (UUID) of a VMware Object.
	Uuid NullableString `json:"uuid,omitempty"`
}

// NewVMwareObjectId instantiates a new VMwareObjectId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVMwareObjectId() *VMwareObjectId {
	this := VMwareObjectId{}
	return &this
}

// NewVMwareObjectIdWithDefaults instantiates a new VMwareObjectId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVMwareObjectIdWithDefaults() *VMwareObjectId {
	this := VMwareObjectId{}
	return &this
}

// GetMorItem returns the MorItem field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VMwareObjectId) GetMorItem() string {
	if o == nil || o.MorItem.Get() == nil {
		var ret string
		return ret
	}
	return *o.MorItem.Get()
}

// GetMorItemOk returns a tuple with the MorItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VMwareObjectId) GetMorItemOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MorItem.Get(), o.MorItem.IsSet()
}

// HasMorItem returns a boolean if a field has been set.
func (o *VMwareObjectId) HasMorItem() bool {
	if o != nil && o.MorItem.IsSet() {
		return true
	}

	return false
}

// SetMorItem gets a reference to the given NullableString and assigns it to the MorItem field.
func (o *VMwareObjectId) SetMorItem(v string) {
	o.MorItem.Set(&v)
}
// SetMorItemNil sets the value for MorItem to be an explicit nil
func (o *VMwareObjectId) SetMorItemNil() {
	o.MorItem.Set(nil)
}

// UnsetMorItem ensures that no value is present for MorItem, not even an explicit nil
func (o *VMwareObjectId) UnsetMorItem() {
	o.MorItem.Unset()
}

// GetMorType returns the MorType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VMwareObjectId) GetMorType() string {
	if o == nil || o.MorType.Get() == nil {
		var ret string
		return ret
	}
	return *o.MorType.Get()
}

// GetMorTypeOk returns a tuple with the MorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VMwareObjectId) GetMorTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MorType.Get(), o.MorType.IsSet()
}

// HasMorType returns a boolean if a field has been set.
func (o *VMwareObjectId) HasMorType() bool {
	if o != nil && o.MorType.IsSet() {
		return true
	}

	return false
}

// SetMorType gets a reference to the given NullableString and assigns it to the MorType field.
func (o *VMwareObjectId) SetMorType(v string) {
	o.MorType.Set(&v)
}
// SetMorTypeNil sets the value for MorType to be an explicit nil
func (o *VMwareObjectId) SetMorTypeNil() {
	o.MorType.Set(nil)
}

// UnsetMorType ensures that no value is present for MorType, not even an explicit nil
func (o *VMwareObjectId) UnsetMorType() {
	o.MorType.Unset()
}

// GetUuid returns the Uuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VMwareObjectId) GetUuid() string {
	if o == nil || o.Uuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.Uuid.Get()
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VMwareObjectId) GetUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Uuid.Get(), o.Uuid.IsSet()
}

// HasUuid returns a boolean if a field has been set.
func (o *VMwareObjectId) HasUuid() bool {
	if o != nil && o.Uuid.IsSet() {
		return true
	}

	return false
}

// SetUuid gets a reference to the given NullableString and assigns it to the Uuid field.
func (o *VMwareObjectId) SetUuid(v string) {
	o.Uuid.Set(&v)
}
// SetUuidNil sets the value for Uuid to be an explicit nil
func (o *VMwareObjectId) SetUuidNil() {
	o.Uuid.Set(nil)
}

// UnsetUuid ensures that no value is present for Uuid, not even an explicit nil
func (o *VMwareObjectId) UnsetUuid() {
	o.Uuid.Unset()
}

func (o VMwareObjectId) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MorItem.IsSet() {
		toSerialize["morItem"] = o.MorItem.Get()
	}
	if o.MorType.IsSet() {
		toSerialize["morType"] = o.MorType.Get()
	}
	if o.Uuid.IsSet() {
		toSerialize["uuid"] = o.Uuid.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableVMwareObjectId struct {
	value *VMwareObjectId
	isSet bool
}

func (v NullableVMwareObjectId) Get() *VMwareObjectId {
	return v.value
}

func (v *NullableVMwareObjectId) Set(val *VMwareObjectId) {
	v.value = val
	v.isSet = true
}

func (v NullableVMwareObjectId) IsSet() bool {
	return v.isSet
}

func (v *NullableVMwareObjectId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVMwareObjectId(val *VMwareObjectId) *NullableVMwareObjectId {
	return &NullableVMwareObjectId{value: val, isSet: true}
}

func (v NullableVMwareObjectId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVMwareObjectId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


