/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// InputSpec struct for InputSpec
type InputSpec struct {
	FilesSelector *InputSpecInputFilesSelector `json:"filesSelector,omitempty"`
	// Selects whether input is files inside vmdks or files on NFS. One of vm_selector or files_selector will be chosen based on this flag.
	OnNfsFiles NullableBool `json:"onNfsFiles,omitempty"`
	VmSelector *InputSpecInputVMsSelector `json:"vmSelector,omitempty"`
}

// NewInputSpec instantiates a new InputSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputSpec() *InputSpec {
	this := InputSpec{}
	return &this
}

// NewInputSpecWithDefaults instantiates a new InputSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputSpecWithDefaults() *InputSpec {
	this := InputSpec{}
	return &this
}

// GetFilesSelector returns the FilesSelector field value if set, zero value otherwise.
func (o *InputSpec) GetFilesSelector() InputSpecInputFilesSelector {
	if o == nil || o.FilesSelector == nil {
		var ret InputSpecInputFilesSelector
		return ret
	}
	return *o.FilesSelector
}

// GetFilesSelectorOk returns a tuple with the FilesSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputSpec) GetFilesSelectorOk() (*InputSpecInputFilesSelector, bool) {
	if o == nil || o.FilesSelector == nil {
		return nil, false
	}
	return o.FilesSelector, true
}

// HasFilesSelector returns a boolean if a field has been set.
func (o *InputSpec) HasFilesSelector() bool {
	if o != nil && o.FilesSelector != nil {
		return true
	}

	return false
}

// SetFilesSelector gets a reference to the given InputSpecInputFilesSelector and assigns it to the FilesSelector field.
func (o *InputSpec) SetFilesSelector(v InputSpecInputFilesSelector) {
	o.FilesSelector = &v
}

// GetOnNfsFiles returns the OnNfsFiles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InputSpec) GetOnNfsFiles() bool {
	if o == nil || o.OnNfsFiles.Get() == nil {
		var ret bool
		return ret
	}
	return *o.OnNfsFiles.Get()
}

// GetOnNfsFilesOk returns a tuple with the OnNfsFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InputSpec) GetOnNfsFilesOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OnNfsFiles.Get(), o.OnNfsFiles.IsSet()
}

// HasOnNfsFiles returns a boolean if a field has been set.
func (o *InputSpec) HasOnNfsFiles() bool {
	if o != nil && o.OnNfsFiles.IsSet() {
		return true
	}

	return false
}

// SetOnNfsFiles gets a reference to the given NullableBool and assigns it to the OnNfsFiles field.
func (o *InputSpec) SetOnNfsFiles(v bool) {
	o.OnNfsFiles.Set(&v)
}
// SetOnNfsFilesNil sets the value for OnNfsFiles to be an explicit nil
func (o *InputSpec) SetOnNfsFilesNil() {
	o.OnNfsFiles.Set(nil)
}

// UnsetOnNfsFiles ensures that no value is present for OnNfsFiles, not even an explicit nil
func (o *InputSpec) UnsetOnNfsFiles() {
	o.OnNfsFiles.Unset()
}

// GetVmSelector returns the VmSelector field value if set, zero value otherwise.
func (o *InputSpec) GetVmSelector() InputSpecInputVMsSelector {
	if o == nil || o.VmSelector == nil {
		var ret InputSpecInputVMsSelector
		return ret
	}
	return *o.VmSelector
}

// GetVmSelectorOk returns a tuple with the VmSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputSpec) GetVmSelectorOk() (*InputSpecInputVMsSelector, bool) {
	if o == nil || o.VmSelector == nil {
		return nil, false
	}
	return o.VmSelector, true
}

// HasVmSelector returns a boolean if a field has been set.
func (o *InputSpec) HasVmSelector() bool {
	if o != nil && o.VmSelector != nil {
		return true
	}

	return false
}

// SetVmSelector gets a reference to the given InputSpecInputVMsSelector and assigns it to the VmSelector field.
func (o *InputSpec) SetVmSelector(v InputSpecInputVMsSelector) {
	o.VmSelector = &v
}

func (o InputSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FilesSelector != nil {
		toSerialize["filesSelector"] = o.FilesSelector
	}
	if o.OnNfsFiles.IsSet() {
		toSerialize["onNfsFiles"] = o.OnNfsFiles.Get()
	}
	if o.VmSelector != nil {
		toSerialize["vmSelector"] = o.VmSelector
	}
	return json.Marshal(toSerialize)
}

type NullableInputSpec struct {
	value *InputSpec
	isSet bool
}

func (v NullableInputSpec) Get() *InputSpec {
	return v.value
}

func (v *NullableInputSpec) Set(val *InputSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableInputSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableInputSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputSpec(val *InputSpec) *NullableInputSpec {
	return &NullableInputSpec{value: val, isSet: true}
}

func (v NullableInputSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


