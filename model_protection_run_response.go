/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ProtectionRunResponse Specifies the information about the Protection Runs across all snapshot target locations.
type ProtectionRunResponse struct {
	// Specifies the list of archival job information.
	ArchivalRuns []LatestProtectionJobRunInfo `json:"archivalRuns,omitempty"`
	// Specifies the list of local backup job information.
	BackupRuns []LatestProtectionJobRunInfo `json:"backupRuns,omitempty"`
	// Specifies the list of replication job information.
	ReplicationRuns []LatestProtectionJobRunInfo `json:"replicationRuns,omitempty"`
}

// NewProtectionRunResponse instantiates a new ProtectionRunResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtectionRunResponse() *ProtectionRunResponse {
	this := ProtectionRunResponse{}
	return &this
}

// NewProtectionRunResponseWithDefaults instantiates a new ProtectionRunResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtectionRunResponseWithDefaults() *ProtectionRunResponse {
	this := ProtectionRunResponse{}
	return &this
}

// GetArchivalRuns returns the ArchivalRuns field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionRunResponse) GetArchivalRuns() []LatestProtectionJobRunInfo {
	if o == nil  {
		var ret []LatestProtectionJobRunInfo
		return ret
	}
	return o.ArchivalRuns
}

// GetArchivalRunsOk returns a tuple with the ArchivalRuns field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionRunResponse) GetArchivalRunsOk() (*[]LatestProtectionJobRunInfo, bool) {
	if o == nil || o.ArchivalRuns == nil {
		return nil, false
	}
	return &o.ArchivalRuns, true
}

// HasArchivalRuns returns a boolean if a field has been set.
func (o *ProtectionRunResponse) HasArchivalRuns() bool {
	if o != nil && o.ArchivalRuns != nil {
		return true
	}

	return false
}

// SetArchivalRuns gets a reference to the given []LatestProtectionJobRunInfo and assigns it to the ArchivalRuns field.
func (o *ProtectionRunResponse) SetArchivalRuns(v []LatestProtectionJobRunInfo) {
	o.ArchivalRuns = v
}

// GetBackupRuns returns the BackupRuns field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionRunResponse) GetBackupRuns() []LatestProtectionJobRunInfo {
	if o == nil  {
		var ret []LatestProtectionJobRunInfo
		return ret
	}
	return o.BackupRuns
}

// GetBackupRunsOk returns a tuple with the BackupRuns field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionRunResponse) GetBackupRunsOk() (*[]LatestProtectionJobRunInfo, bool) {
	if o == nil || o.BackupRuns == nil {
		return nil, false
	}
	return &o.BackupRuns, true
}

// HasBackupRuns returns a boolean if a field has been set.
func (o *ProtectionRunResponse) HasBackupRuns() bool {
	if o != nil && o.BackupRuns != nil {
		return true
	}

	return false
}

// SetBackupRuns gets a reference to the given []LatestProtectionJobRunInfo and assigns it to the BackupRuns field.
func (o *ProtectionRunResponse) SetBackupRuns(v []LatestProtectionJobRunInfo) {
	o.BackupRuns = v
}

// GetReplicationRuns returns the ReplicationRuns field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionRunResponse) GetReplicationRuns() []LatestProtectionJobRunInfo {
	if o == nil  {
		var ret []LatestProtectionJobRunInfo
		return ret
	}
	return o.ReplicationRuns
}

// GetReplicationRunsOk returns a tuple with the ReplicationRuns field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionRunResponse) GetReplicationRunsOk() (*[]LatestProtectionJobRunInfo, bool) {
	if o == nil || o.ReplicationRuns == nil {
		return nil, false
	}
	return &o.ReplicationRuns, true
}

// HasReplicationRuns returns a boolean if a field has been set.
func (o *ProtectionRunResponse) HasReplicationRuns() bool {
	if o != nil && o.ReplicationRuns != nil {
		return true
	}

	return false
}

// SetReplicationRuns gets a reference to the given []LatestProtectionJobRunInfo and assigns it to the ReplicationRuns field.
func (o *ProtectionRunResponse) SetReplicationRuns(v []LatestProtectionJobRunInfo) {
	o.ReplicationRuns = v
}

func (o ProtectionRunResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ArchivalRuns != nil {
		toSerialize["archivalRuns"] = o.ArchivalRuns
	}
	if o.BackupRuns != nil {
		toSerialize["backupRuns"] = o.BackupRuns
	}
	if o.ReplicationRuns != nil {
		toSerialize["replicationRuns"] = o.ReplicationRuns
	}
	return json.Marshal(toSerialize)
}

type NullableProtectionRunResponse struct {
	value *ProtectionRunResponse
	isSet bool
}

func (v NullableProtectionRunResponse) Get() *ProtectionRunResponse {
	return v.value
}

func (v *NullableProtectionRunResponse) Set(val *ProtectionRunResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableProtectionRunResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableProtectionRunResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtectionRunResponse(val *ProtectionRunResponse) *NullableProtectionRunResponse {
	return &NullableProtectionRunResponse{value: val, isSet: true}
}

func (v NullableProtectionRunResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtectionRunResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


