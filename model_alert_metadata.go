/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// AlertMetadata AlertMetadata specifies metadata for a given alert type. All the alerts of a given alert type share the same metadata.
type AlertMetadata struct {
	// Specifies alert documentation one per each language supported.
	AlertDocumentList []AlertDocument `json:"alertDocumentList,omitempty"`
	// Specifies the Alert type bucket. Specifies the Alert type bucket. kSoftware - Alerts which are related to Cohesity services. kHardware - Alerts related to hardware on which Cohesity software is running. kService - Alerts related to other external services. kOther - Alerts not of one of above categories.
	AlertTypeBucket NullableString `json:"alertTypeBucket,omitempty"`
	// Specifies unique id for the alert type.
	AlertTypeId NullableInt32 `json:"alertTypeId,omitempty"`
	// Specifies category of the alert type. Specifies the category of an Alert. kDisk - Alerts that are related to Disk. kNode - Alerts that are related to Node. kCluster - Alerts that are related to Cluster. kNodeHealth - Alerts that are related to Node Health. kClusterHealth - Alerts that are related to Cluster Health. kBackupRestore - Alerts that are related to Backup/Restore. kEncryption - Alerts that are related to Encryption. kArchivalRestore - Alerts that are related to Archival/Restore. kRemoteReplication - Alerts that are related to Remote Replication. kQuota - Alerts that are related to Quota. kLicense - Alerts that are related to License. kHeliosProActiveWellness - Alerts that are related to Helios ProActive Wellness. kHeliosAnalyticsJobs - Alerts that are related to Helios Analytics Jobs. kHeliosSignatureJobs - Alerts that are related to Helios Signature Jobs. kSecurity - Alerts that are related to Security. kAppsInfra - Alerts that are related to applications infra. kAntivirus - Alerts that are related to antivirus. kArchivalCopy - Alerts that are related to archival copies.
	Category NullableString `json:"category,omitempty"`
	// Specifies dedup interval in seconds. If the same alert is raised multiple times by any client in this duration, only one of them will be reported.
	DedupIntervalSeconds NullableInt32 `json:"dedupIntervalSeconds,omitempty"`
	// Specifies if the alerts are to be deduped until the current one (if any) is resolved.
	DedupUntilResolved NullableBool `json:"dedupUntilResolved,omitempty"`
	// Specifies whether to show the alert in the iris UI and CLI.
	HideAlertFromUser NullableBool `json:"hideAlertFromUser,omitempty"`
	// Specifies whether to ignore duplicate occurrences completely.
	IgnoreDuplicateOccurrences NullableBool `json:"ignoreDuplicateOccurrences,omitempty"`
	// Specifies properties that serve as primary keys.
	PrimaryKeyList []string `json:"primaryKeyList,omitempty"`
	// Specifies list of properties that the client is supposed to provide when alert of this type is raised.
	PropertyList []string `json:"propertyList,omitempty"`
	// Specifies whether to send support notification for the alert.
	SendSupportNotification NullableBool `json:"sendSupportNotification,omitempty"`
	// Specifies whether an SNMP notification is sent when an alert is raised.
	SnmpNotification NullableBool `json:"snmpNotification,omitempty"`
	// Specifies whether an syslog notification is sent when an alert is raised.
	SyslogNotification NullableBool `json:"syslogNotification,omitempty"`
	// Specifies version of the metadata.
	Version NullableInt32 `json:"version,omitempty"`
}

// NewAlertMetadata instantiates a new AlertMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertMetadata() *AlertMetadata {
	this := AlertMetadata{}
	return &this
}

// NewAlertMetadataWithDefaults instantiates a new AlertMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertMetadataWithDefaults() *AlertMetadata {
	this := AlertMetadata{}
	return &this
}

// GetAlertDocumentList returns the AlertDocumentList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertMetadata) GetAlertDocumentList() []AlertDocument {
	if o == nil  {
		var ret []AlertDocument
		return ret
	}
	return o.AlertDocumentList
}

// GetAlertDocumentListOk returns a tuple with the AlertDocumentList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertMetadata) GetAlertDocumentListOk() (*[]AlertDocument, bool) {
	if o == nil || o.AlertDocumentList == nil {
		return nil, false
	}
	return &o.AlertDocumentList, true
}

// HasAlertDocumentList returns a boolean if a field has been set.
func (o *AlertMetadata) HasAlertDocumentList() bool {
	if o != nil && o.AlertDocumentList != nil {
		return true
	}

	return false
}

// SetAlertDocumentList gets a reference to the given []AlertDocument and assigns it to the AlertDocumentList field.
func (o *AlertMetadata) SetAlertDocumentList(v []AlertDocument) {
	o.AlertDocumentList = v
}

// GetAlertTypeBucket returns the AlertTypeBucket field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertMetadata) GetAlertTypeBucket() string {
	if o == nil || o.AlertTypeBucket.Get() == nil {
		var ret string
		return ret
	}
	return *o.AlertTypeBucket.Get()
}

// GetAlertTypeBucketOk returns a tuple with the AlertTypeBucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertMetadata) GetAlertTypeBucketOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AlertTypeBucket.Get(), o.AlertTypeBucket.IsSet()
}

// HasAlertTypeBucket returns a boolean if a field has been set.
func (o *AlertMetadata) HasAlertTypeBucket() bool {
	if o != nil && o.AlertTypeBucket.IsSet() {
		return true
	}

	return false
}

// SetAlertTypeBucket gets a reference to the given NullableString and assigns it to the AlertTypeBucket field.
func (o *AlertMetadata) SetAlertTypeBucket(v string) {
	o.AlertTypeBucket.Set(&v)
}
// SetAlertTypeBucketNil sets the value for AlertTypeBucket to be an explicit nil
func (o *AlertMetadata) SetAlertTypeBucketNil() {
	o.AlertTypeBucket.Set(nil)
}

// UnsetAlertTypeBucket ensures that no value is present for AlertTypeBucket, not even an explicit nil
func (o *AlertMetadata) UnsetAlertTypeBucket() {
	o.AlertTypeBucket.Unset()
}

// GetAlertTypeId returns the AlertTypeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertMetadata) GetAlertTypeId() int32 {
	if o == nil || o.AlertTypeId.Get() == nil {
		var ret int32
		return ret
	}
	return *o.AlertTypeId.Get()
}

// GetAlertTypeIdOk returns a tuple with the AlertTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertMetadata) GetAlertTypeIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AlertTypeId.Get(), o.AlertTypeId.IsSet()
}

// HasAlertTypeId returns a boolean if a field has been set.
func (o *AlertMetadata) HasAlertTypeId() bool {
	if o != nil && o.AlertTypeId.IsSet() {
		return true
	}

	return false
}

// SetAlertTypeId gets a reference to the given NullableInt32 and assigns it to the AlertTypeId field.
func (o *AlertMetadata) SetAlertTypeId(v int32) {
	o.AlertTypeId.Set(&v)
}
// SetAlertTypeIdNil sets the value for AlertTypeId to be an explicit nil
func (o *AlertMetadata) SetAlertTypeIdNil() {
	o.AlertTypeId.Set(nil)
}

// UnsetAlertTypeId ensures that no value is present for AlertTypeId, not even an explicit nil
func (o *AlertMetadata) UnsetAlertTypeId() {
	o.AlertTypeId.Unset()
}

// GetCategory returns the Category field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertMetadata) GetCategory() string {
	if o == nil || o.Category.Get() == nil {
		var ret string
		return ret
	}
	return *o.Category.Get()
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertMetadata) GetCategoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Category.Get(), o.Category.IsSet()
}

// HasCategory returns a boolean if a field has been set.
func (o *AlertMetadata) HasCategory() bool {
	if o != nil && o.Category.IsSet() {
		return true
	}

	return false
}

// SetCategory gets a reference to the given NullableString and assigns it to the Category field.
func (o *AlertMetadata) SetCategory(v string) {
	o.Category.Set(&v)
}
// SetCategoryNil sets the value for Category to be an explicit nil
func (o *AlertMetadata) SetCategoryNil() {
	o.Category.Set(nil)
}

// UnsetCategory ensures that no value is present for Category, not even an explicit nil
func (o *AlertMetadata) UnsetCategory() {
	o.Category.Unset()
}

// GetDedupIntervalSeconds returns the DedupIntervalSeconds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertMetadata) GetDedupIntervalSeconds() int32 {
	if o == nil || o.DedupIntervalSeconds.Get() == nil {
		var ret int32
		return ret
	}
	return *o.DedupIntervalSeconds.Get()
}

// GetDedupIntervalSecondsOk returns a tuple with the DedupIntervalSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertMetadata) GetDedupIntervalSecondsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DedupIntervalSeconds.Get(), o.DedupIntervalSeconds.IsSet()
}

// HasDedupIntervalSeconds returns a boolean if a field has been set.
func (o *AlertMetadata) HasDedupIntervalSeconds() bool {
	if o != nil && o.DedupIntervalSeconds.IsSet() {
		return true
	}

	return false
}

// SetDedupIntervalSeconds gets a reference to the given NullableInt32 and assigns it to the DedupIntervalSeconds field.
func (o *AlertMetadata) SetDedupIntervalSeconds(v int32) {
	o.DedupIntervalSeconds.Set(&v)
}
// SetDedupIntervalSecondsNil sets the value for DedupIntervalSeconds to be an explicit nil
func (o *AlertMetadata) SetDedupIntervalSecondsNil() {
	o.DedupIntervalSeconds.Set(nil)
}

// UnsetDedupIntervalSeconds ensures that no value is present for DedupIntervalSeconds, not even an explicit nil
func (o *AlertMetadata) UnsetDedupIntervalSeconds() {
	o.DedupIntervalSeconds.Unset()
}

// GetDedupUntilResolved returns the DedupUntilResolved field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertMetadata) GetDedupUntilResolved() bool {
	if o == nil || o.DedupUntilResolved.Get() == nil {
		var ret bool
		return ret
	}
	return *o.DedupUntilResolved.Get()
}

// GetDedupUntilResolvedOk returns a tuple with the DedupUntilResolved field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertMetadata) GetDedupUntilResolvedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DedupUntilResolved.Get(), o.DedupUntilResolved.IsSet()
}

// HasDedupUntilResolved returns a boolean if a field has been set.
func (o *AlertMetadata) HasDedupUntilResolved() bool {
	if o != nil && o.DedupUntilResolved.IsSet() {
		return true
	}

	return false
}

// SetDedupUntilResolved gets a reference to the given NullableBool and assigns it to the DedupUntilResolved field.
func (o *AlertMetadata) SetDedupUntilResolved(v bool) {
	o.DedupUntilResolved.Set(&v)
}
// SetDedupUntilResolvedNil sets the value for DedupUntilResolved to be an explicit nil
func (o *AlertMetadata) SetDedupUntilResolvedNil() {
	o.DedupUntilResolved.Set(nil)
}

// UnsetDedupUntilResolved ensures that no value is present for DedupUntilResolved, not even an explicit nil
func (o *AlertMetadata) UnsetDedupUntilResolved() {
	o.DedupUntilResolved.Unset()
}

// GetHideAlertFromUser returns the HideAlertFromUser field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertMetadata) GetHideAlertFromUser() bool {
	if o == nil || o.HideAlertFromUser.Get() == nil {
		var ret bool
		return ret
	}
	return *o.HideAlertFromUser.Get()
}

// GetHideAlertFromUserOk returns a tuple with the HideAlertFromUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertMetadata) GetHideAlertFromUserOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HideAlertFromUser.Get(), o.HideAlertFromUser.IsSet()
}

// HasHideAlertFromUser returns a boolean if a field has been set.
func (o *AlertMetadata) HasHideAlertFromUser() bool {
	if o != nil && o.HideAlertFromUser.IsSet() {
		return true
	}

	return false
}

// SetHideAlertFromUser gets a reference to the given NullableBool and assigns it to the HideAlertFromUser field.
func (o *AlertMetadata) SetHideAlertFromUser(v bool) {
	o.HideAlertFromUser.Set(&v)
}
// SetHideAlertFromUserNil sets the value for HideAlertFromUser to be an explicit nil
func (o *AlertMetadata) SetHideAlertFromUserNil() {
	o.HideAlertFromUser.Set(nil)
}

// UnsetHideAlertFromUser ensures that no value is present for HideAlertFromUser, not even an explicit nil
func (o *AlertMetadata) UnsetHideAlertFromUser() {
	o.HideAlertFromUser.Unset()
}

// GetIgnoreDuplicateOccurrences returns the IgnoreDuplicateOccurrences field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertMetadata) GetIgnoreDuplicateOccurrences() bool {
	if o == nil || o.IgnoreDuplicateOccurrences.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IgnoreDuplicateOccurrences.Get()
}

// GetIgnoreDuplicateOccurrencesOk returns a tuple with the IgnoreDuplicateOccurrences field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertMetadata) GetIgnoreDuplicateOccurrencesOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IgnoreDuplicateOccurrences.Get(), o.IgnoreDuplicateOccurrences.IsSet()
}

// HasIgnoreDuplicateOccurrences returns a boolean if a field has been set.
func (o *AlertMetadata) HasIgnoreDuplicateOccurrences() bool {
	if o != nil && o.IgnoreDuplicateOccurrences.IsSet() {
		return true
	}

	return false
}

// SetIgnoreDuplicateOccurrences gets a reference to the given NullableBool and assigns it to the IgnoreDuplicateOccurrences field.
func (o *AlertMetadata) SetIgnoreDuplicateOccurrences(v bool) {
	o.IgnoreDuplicateOccurrences.Set(&v)
}
// SetIgnoreDuplicateOccurrencesNil sets the value for IgnoreDuplicateOccurrences to be an explicit nil
func (o *AlertMetadata) SetIgnoreDuplicateOccurrencesNil() {
	o.IgnoreDuplicateOccurrences.Set(nil)
}

// UnsetIgnoreDuplicateOccurrences ensures that no value is present for IgnoreDuplicateOccurrences, not even an explicit nil
func (o *AlertMetadata) UnsetIgnoreDuplicateOccurrences() {
	o.IgnoreDuplicateOccurrences.Unset()
}

// GetPrimaryKeyList returns the PrimaryKeyList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertMetadata) GetPrimaryKeyList() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.PrimaryKeyList
}

// GetPrimaryKeyListOk returns a tuple with the PrimaryKeyList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertMetadata) GetPrimaryKeyListOk() (*[]string, bool) {
	if o == nil || o.PrimaryKeyList == nil {
		return nil, false
	}
	return &o.PrimaryKeyList, true
}

// HasPrimaryKeyList returns a boolean if a field has been set.
func (o *AlertMetadata) HasPrimaryKeyList() bool {
	if o != nil && o.PrimaryKeyList != nil {
		return true
	}

	return false
}

// SetPrimaryKeyList gets a reference to the given []string and assigns it to the PrimaryKeyList field.
func (o *AlertMetadata) SetPrimaryKeyList(v []string) {
	o.PrimaryKeyList = v
}

// GetPropertyList returns the PropertyList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertMetadata) GetPropertyList() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.PropertyList
}

// GetPropertyListOk returns a tuple with the PropertyList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertMetadata) GetPropertyListOk() (*[]string, bool) {
	if o == nil || o.PropertyList == nil {
		return nil, false
	}
	return &o.PropertyList, true
}

// HasPropertyList returns a boolean if a field has been set.
func (o *AlertMetadata) HasPropertyList() bool {
	if o != nil && o.PropertyList != nil {
		return true
	}

	return false
}

// SetPropertyList gets a reference to the given []string and assigns it to the PropertyList field.
func (o *AlertMetadata) SetPropertyList(v []string) {
	o.PropertyList = v
}

// GetSendSupportNotification returns the SendSupportNotification field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertMetadata) GetSendSupportNotification() bool {
	if o == nil || o.SendSupportNotification.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SendSupportNotification.Get()
}

// GetSendSupportNotificationOk returns a tuple with the SendSupportNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertMetadata) GetSendSupportNotificationOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SendSupportNotification.Get(), o.SendSupportNotification.IsSet()
}

// HasSendSupportNotification returns a boolean if a field has been set.
func (o *AlertMetadata) HasSendSupportNotification() bool {
	if o != nil && o.SendSupportNotification.IsSet() {
		return true
	}

	return false
}

// SetSendSupportNotification gets a reference to the given NullableBool and assigns it to the SendSupportNotification field.
func (o *AlertMetadata) SetSendSupportNotification(v bool) {
	o.SendSupportNotification.Set(&v)
}
// SetSendSupportNotificationNil sets the value for SendSupportNotification to be an explicit nil
func (o *AlertMetadata) SetSendSupportNotificationNil() {
	o.SendSupportNotification.Set(nil)
}

// UnsetSendSupportNotification ensures that no value is present for SendSupportNotification, not even an explicit nil
func (o *AlertMetadata) UnsetSendSupportNotification() {
	o.SendSupportNotification.Unset()
}

// GetSnmpNotification returns the SnmpNotification field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertMetadata) GetSnmpNotification() bool {
	if o == nil || o.SnmpNotification.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SnmpNotification.Get()
}

// GetSnmpNotificationOk returns a tuple with the SnmpNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertMetadata) GetSnmpNotificationOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SnmpNotification.Get(), o.SnmpNotification.IsSet()
}

// HasSnmpNotification returns a boolean if a field has been set.
func (o *AlertMetadata) HasSnmpNotification() bool {
	if o != nil && o.SnmpNotification.IsSet() {
		return true
	}

	return false
}

// SetSnmpNotification gets a reference to the given NullableBool and assigns it to the SnmpNotification field.
func (o *AlertMetadata) SetSnmpNotification(v bool) {
	o.SnmpNotification.Set(&v)
}
// SetSnmpNotificationNil sets the value for SnmpNotification to be an explicit nil
func (o *AlertMetadata) SetSnmpNotificationNil() {
	o.SnmpNotification.Set(nil)
}

// UnsetSnmpNotification ensures that no value is present for SnmpNotification, not even an explicit nil
func (o *AlertMetadata) UnsetSnmpNotification() {
	o.SnmpNotification.Unset()
}

// GetSyslogNotification returns the SyslogNotification field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertMetadata) GetSyslogNotification() bool {
	if o == nil || o.SyslogNotification.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SyslogNotification.Get()
}

// GetSyslogNotificationOk returns a tuple with the SyslogNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertMetadata) GetSyslogNotificationOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SyslogNotification.Get(), o.SyslogNotification.IsSet()
}

// HasSyslogNotification returns a boolean if a field has been set.
func (o *AlertMetadata) HasSyslogNotification() bool {
	if o != nil && o.SyslogNotification.IsSet() {
		return true
	}

	return false
}

// SetSyslogNotification gets a reference to the given NullableBool and assigns it to the SyslogNotification field.
func (o *AlertMetadata) SetSyslogNotification(v bool) {
	o.SyslogNotification.Set(&v)
}
// SetSyslogNotificationNil sets the value for SyslogNotification to be an explicit nil
func (o *AlertMetadata) SetSyslogNotificationNil() {
	o.SyslogNotification.Set(nil)
}

// UnsetSyslogNotification ensures that no value is present for SyslogNotification, not even an explicit nil
func (o *AlertMetadata) UnsetSyslogNotification() {
	o.SyslogNotification.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertMetadata) GetVersion() int32 {
	if o == nil || o.Version.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertMetadata) GetVersionOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *AlertMetadata) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableInt32 and assigns it to the Version field.
func (o *AlertMetadata) SetVersion(v int32) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *AlertMetadata) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *AlertMetadata) UnsetVersion() {
	o.Version.Unset()
}

func (o AlertMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AlertDocumentList != nil {
		toSerialize["alertDocumentList"] = o.AlertDocumentList
	}
	if o.AlertTypeBucket.IsSet() {
		toSerialize["alertTypeBucket"] = o.AlertTypeBucket.Get()
	}
	if o.AlertTypeId.IsSet() {
		toSerialize["alertTypeId"] = o.AlertTypeId.Get()
	}
	if o.Category.IsSet() {
		toSerialize["category"] = o.Category.Get()
	}
	if o.DedupIntervalSeconds.IsSet() {
		toSerialize["dedupIntervalSeconds"] = o.DedupIntervalSeconds.Get()
	}
	if o.DedupUntilResolved.IsSet() {
		toSerialize["dedupUntilResolved"] = o.DedupUntilResolved.Get()
	}
	if o.HideAlertFromUser.IsSet() {
		toSerialize["hideAlertFromUser"] = o.HideAlertFromUser.Get()
	}
	if o.IgnoreDuplicateOccurrences.IsSet() {
		toSerialize["ignoreDuplicateOccurrences"] = o.IgnoreDuplicateOccurrences.Get()
	}
	if o.PrimaryKeyList != nil {
		toSerialize["primaryKeyList"] = o.PrimaryKeyList
	}
	if o.PropertyList != nil {
		toSerialize["propertyList"] = o.PropertyList
	}
	if o.SendSupportNotification.IsSet() {
		toSerialize["sendSupportNotification"] = o.SendSupportNotification.Get()
	}
	if o.SnmpNotification.IsSet() {
		toSerialize["snmpNotification"] = o.SnmpNotification.Get()
	}
	if o.SyslogNotification.IsSet() {
		toSerialize["syslogNotification"] = o.SyslogNotification.Get()
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAlertMetadata struct {
	value *AlertMetadata
	isSet bool
}

func (v NullableAlertMetadata) Get() *AlertMetadata {
	return v.value
}

func (v *NullableAlertMetadata) Set(val *AlertMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertMetadata(val *AlertMetadata) *NullableAlertMetadata {
	return &NullableAlertMetadata{value: val, isSet: true}
}

func (v NullableAlertMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


