/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// MongoDBProtectionSource Specifies an Object representing MongoDB.
type MongoDBProtectionSource struct {
	ClusterInfo *MongoDBCluster `json:"clusterInfo,omitempty"`
	CollectionInfo *MongoDBCollection `json:"collectionInfo,omitempty"`
	DatabaseInfo *MongoDBDatabase `json:"databaseInfo,omitempty"`
	// Specifies the instance name of the MongoDB entity.
	Name NullableString `json:"name,omitempty"`
	// Specifies the type of the managed Object in MongoDB Protection Source. Specifies the type of an MongoDB source entity. 'kCluster' indicates a mongodb cluster distributed over several physical nodes. 'kDatabase' indicates a Database within the MongoDB environment. 'kCollection' indicates a Collection in the MongoDB enironment.
	Type NullableString `json:"type,omitempty"`
	// Specifies the UUID for the MongoDB entity.
	Uuid NullableString `json:"uuid,omitempty"`
}

// NewMongoDBProtectionSource instantiates a new MongoDBProtectionSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMongoDBProtectionSource() *MongoDBProtectionSource {
	this := MongoDBProtectionSource{}
	return &this
}

// NewMongoDBProtectionSourceWithDefaults instantiates a new MongoDBProtectionSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMongoDBProtectionSourceWithDefaults() *MongoDBProtectionSource {
	this := MongoDBProtectionSource{}
	return &this
}

// GetClusterInfo returns the ClusterInfo field value if set, zero value otherwise.
func (o *MongoDBProtectionSource) GetClusterInfo() MongoDBCluster {
	if o == nil || o.ClusterInfo == nil {
		var ret MongoDBCluster
		return ret
	}
	return *o.ClusterInfo
}

// GetClusterInfoOk returns a tuple with the ClusterInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MongoDBProtectionSource) GetClusterInfoOk() (*MongoDBCluster, bool) {
	if o == nil || o.ClusterInfo == nil {
		return nil, false
	}
	return o.ClusterInfo, true
}

// HasClusterInfo returns a boolean if a field has been set.
func (o *MongoDBProtectionSource) HasClusterInfo() bool {
	if o != nil && o.ClusterInfo != nil {
		return true
	}

	return false
}

// SetClusterInfo gets a reference to the given MongoDBCluster and assigns it to the ClusterInfo field.
func (o *MongoDBProtectionSource) SetClusterInfo(v MongoDBCluster) {
	o.ClusterInfo = &v
}

// GetCollectionInfo returns the CollectionInfo field value if set, zero value otherwise.
func (o *MongoDBProtectionSource) GetCollectionInfo() MongoDBCollection {
	if o == nil || o.CollectionInfo == nil {
		var ret MongoDBCollection
		return ret
	}
	return *o.CollectionInfo
}

// GetCollectionInfoOk returns a tuple with the CollectionInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MongoDBProtectionSource) GetCollectionInfoOk() (*MongoDBCollection, bool) {
	if o == nil || o.CollectionInfo == nil {
		return nil, false
	}
	return o.CollectionInfo, true
}

// HasCollectionInfo returns a boolean if a field has been set.
func (o *MongoDBProtectionSource) HasCollectionInfo() bool {
	if o != nil && o.CollectionInfo != nil {
		return true
	}

	return false
}

// SetCollectionInfo gets a reference to the given MongoDBCollection and assigns it to the CollectionInfo field.
func (o *MongoDBProtectionSource) SetCollectionInfo(v MongoDBCollection) {
	o.CollectionInfo = &v
}

// GetDatabaseInfo returns the DatabaseInfo field value if set, zero value otherwise.
func (o *MongoDBProtectionSource) GetDatabaseInfo() MongoDBDatabase {
	if o == nil || o.DatabaseInfo == nil {
		var ret MongoDBDatabase
		return ret
	}
	return *o.DatabaseInfo
}

// GetDatabaseInfoOk returns a tuple with the DatabaseInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MongoDBProtectionSource) GetDatabaseInfoOk() (*MongoDBDatabase, bool) {
	if o == nil || o.DatabaseInfo == nil {
		return nil, false
	}
	return o.DatabaseInfo, true
}

// HasDatabaseInfo returns a boolean if a field has been set.
func (o *MongoDBProtectionSource) HasDatabaseInfo() bool {
	if o != nil && o.DatabaseInfo != nil {
		return true
	}

	return false
}

// SetDatabaseInfo gets a reference to the given MongoDBDatabase and assigns it to the DatabaseInfo field.
func (o *MongoDBProtectionSource) SetDatabaseInfo(v MongoDBDatabase) {
	o.DatabaseInfo = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MongoDBProtectionSource) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MongoDBProtectionSource) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *MongoDBProtectionSource) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *MongoDBProtectionSource) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *MongoDBProtectionSource) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *MongoDBProtectionSource) UnsetName() {
	o.Name.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MongoDBProtectionSource) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MongoDBProtectionSource) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *MongoDBProtectionSource) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *MongoDBProtectionSource) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *MongoDBProtectionSource) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *MongoDBProtectionSource) UnsetType() {
	o.Type.Unset()
}

// GetUuid returns the Uuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MongoDBProtectionSource) GetUuid() string {
	if o == nil || o.Uuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.Uuid.Get()
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MongoDBProtectionSource) GetUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Uuid.Get(), o.Uuid.IsSet()
}

// HasUuid returns a boolean if a field has been set.
func (o *MongoDBProtectionSource) HasUuid() bool {
	if o != nil && o.Uuid.IsSet() {
		return true
	}

	return false
}

// SetUuid gets a reference to the given NullableString and assigns it to the Uuid field.
func (o *MongoDBProtectionSource) SetUuid(v string) {
	o.Uuid.Set(&v)
}
// SetUuidNil sets the value for Uuid to be an explicit nil
func (o *MongoDBProtectionSource) SetUuidNil() {
	o.Uuid.Set(nil)
}

// UnsetUuid ensures that no value is present for Uuid, not even an explicit nil
func (o *MongoDBProtectionSource) UnsetUuid() {
	o.Uuid.Unset()
}

func (o MongoDBProtectionSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClusterInfo != nil {
		toSerialize["clusterInfo"] = o.ClusterInfo
	}
	if o.CollectionInfo != nil {
		toSerialize["collectionInfo"] = o.CollectionInfo
	}
	if o.DatabaseInfo != nil {
		toSerialize["databaseInfo"] = o.DatabaseInfo
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Uuid.IsSet() {
		toSerialize["uuid"] = o.Uuid.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMongoDBProtectionSource struct {
	value *MongoDBProtectionSource
	isSet bool
}

func (v NullableMongoDBProtectionSource) Get() *MongoDBProtectionSource {
	return v.value
}

func (v *NullableMongoDBProtectionSource) Set(val *MongoDBProtectionSource) {
	v.value = val
	v.isSet = true
}

func (v NullableMongoDBProtectionSource) IsSet() bool {
	return v.isSet
}

func (v *NullableMongoDBProtectionSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMongoDBProtectionSource(val *MongoDBProtectionSource) *NullableMongoDBProtectionSource {
	return &NullableMongoDBProtectionSource{value: val, isSet: true}
}

func (v NullableMongoDBProtectionSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMongoDBProtectionSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


