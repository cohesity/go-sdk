/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ADRestoreStatus Represents AD restore status for object/attribute recovery. Each ADRestoreStatus entry will contain object_info: information about the object getting restored and status: status of the restore operation. object_info is used to generate the audit information of the AD restore operations.
type ADRestoreStatus struct {
	ObjectInfo *CompareADObjectsResultADObject `json:"objectInfo,omitempty"`
	Status *ADObjectRestoreStatus `json:"status,omitempty"`
}

// NewADRestoreStatus instantiates a new ADRestoreStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewADRestoreStatus() *ADRestoreStatus {
	this := ADRestoreStatus{}
	return &this
}

// NewADRestoreStatusWithDefaults instantiates a new ADRestoreStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewADRestoreStatusWithDefaults() *ADRestoreStatus {
	this := ADRestoreStatus{}
	return &this
}

// GetObjectInfo returns the ObjectInfo field value if set, zero value otherwise.
func (o *ADRestoreStatus) GetObjectInfo() CompareADObjectsResultADObject {
	if o == nil || o.ObjectInfo == nil {
		var ret CompareADObjectsResultADObject
		return ret
	}
	return *o.ObjectInfo
}

// GetObjectInfoOk returns a tuple with the ObjectInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADRestoreStatus) GetObjectInfoOk() (*CompareADObjectsResultADObject, bool) {
	if o == nil || o.ObjectInfo == nil {
		return nil, false
	}
	return o.ObjectInfo, true
}

// HasObjectInfo returns a boolean if a field has been set.
func (o *ADRestoreStatus) HasObjectInfo() bool {
	if o != nil && o.ObjectInfo != nil {
		return true
	}

	return false
}

// SetObjectInfo gets a reference to the given CompareADObjectsResultADObject and assigns it to the ObjectInfo field.
func (o *ADRestoreStatus) SetObjectInfo(v CompareADObjectsResultADObject) {
	o.ObjectInfo = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ADRestoreStatus) GetStatus() ADObjectRestoreStatus {
	if o == nil || o.Status == nil {
		var ret ADObjectRestoreStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ADRestoreStatus) GetStatusOk() (*ADObjectRestoreStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ADRestoreStatus) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ADObjectRestoreStatus and assigns it to the Status field.
func (o *ADRestoreStatus) SetStatus(v ADObjectRestoreStatus) {
	o.Status = &v
}

func (o ADRestoreStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ObjectInfo != nil {
		toSerialize["objectInfo"] = o.ObjectInfo
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableADRestoreStatus struct {
	value *ADRestoreStatus
	isSet bool
}

func (v NullableADRestoreStatus) Get() *ADRestoreStatus {
	return v.value
}

func (v *NullableADRestoreStatus) Set(val *ADRestoreStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableADRestoreStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableADRestoreStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableADRestoreStatus(val *ADRestoreStatus) *NullableADRestoreStatus {
	return &NullableADRestoreStatus{value: val, isSet: true}
}

func (v NullableADRestoreStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableADRestoreStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


