/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// DataTransferToVaultPerProtectionJob Specifies statistics about the transfer of data from this Cohesity Cluster to this Vault for a Protection Job.
type DataTransferToVaultPerProtectionJob struct {
	// Specifies the total number of logical bytes that are transferred from this Cohesity Cluster to this Vault for this Protection Job. The logical size is when the data is fully hydrated or expanded.
	NumLogicalBytesTransferred NullableInt64 `json:"numLogicalBytesTransferred,omitempty"`
	// Specifies the total number of physical bytes that are transferred from this Cohesity Cluster to this Vault for this Protection Job.
	NumPhysicalBytesTransferred NullableInt64 `json:"numPhysicalBytesTransferred,omitempty"`
	// Specifies the name of the Protection Job.
	ProtectionJobName NullableString `json:"protectionJobName,omitempty"`
	// Specifies the total number of storage bytes consumed that are transferred from this Cohesity Cluster to this vault for this Protection Job.
	StorageConsumed NullableInt64 `json:"storageConsumed,omitempty"`
}

// NewDataTransferToVaultPerProtectionJob instantiates a new DataTransferToVaultPerProtectionJob object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataTransferToVaultPerProtectionJob() *DataTransferToVaultPerProtectionJob {
	this := DataTransferToVaultPerProtectionJob{}
	return &this
}

// NewDataTransferToVaultPerProtectionJobWithDefaults instantiates a new DataTransferToVaultPerProtectionJob object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataTransferToVaultPerProtectionJobWithDefaults() *DataTransferToVaultPerProtectionJob {
	this := DataTransferToVaultPerProtectionJob{}
	return &this
}

// GetNumLogicalBytesTransferred returns the NumLogicalBytesTransferred field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTransferToVaultPerProtectionJob) GetNumLogicalBytesTransferred() int64 {
	if o == nil || o.NumLogicalBytesTransferred.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NumLogicalBytesTransferred.Get()
}

// GetNumLogicalBytesTransferredOk returns a tuple with the NumLogicalBytesTransferred field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTransferToVaultPerProtectionJob) GetNumLogicalBytesTransferredOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumLogicalBytesTransferred.Get(), o.NumLogicalBytesTransferred.IsSet()
}

// HasNumLogicalBytesTransferred returns a boolean if a field has been set.
func (o *DataTransferToVaultPerProtectionJob) HasNumLogicalBytesTransferred() bool {
	if o != nil && o.NumLogicalBytesTransferred.IsSet() {
		return true
	}

	return false
}

// SetNumLogicalBytesTransferred gets a reference to the given NullableInt64 and assigns it to the NumLogicalBytesTransferred field.
func (o *DataTransferToVaultPerProtectionJob) SetNumLogicalBytesTransferred(v int64) {
	o.NumLogicalBytesTransferred.Set(&v)
}
// SetNumLogicalBytesTransferredNil sets the value for NumLogicalBytesTransferred to be an explicit nil
func (o *DataTransferToVaultPerProtectionJob) SetNumLogicalBytesTransferredNil() {
	o.NumLogicalBytesTransferred.Set(nil)
}

// UnsetNumLogicalBytesTransferred ensures that no value is present for NumLogicalBytesTransferred, not even an explicit nil
func (o *DataTransferToVaultPerProtectionJob) UnsetNumLogicalBytesTransferred() {
	o.NumLogicalBytesTransferred.Unset()
}

// GetNumPhysicalBytesTransferred returns the NumPhysicalBytesTransferred field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTransferToVaultPerProtectionJob) GetNumPhysicalBytesTransferred() int64 {
	if o == nil || o.NumPhysicalBytesTransferred.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NumPhysicalBytesTransferred.Get()
}

// GetNumPhysicalBytesTransferredOk returns a tuple with the NumPhysicalBytesTransferred field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTransferToVaultPerProtectionJob) GetNumPhysicalBytesTransferredOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumPhysicalBytesTransferred.Get(), o.NumPhysicalBytesTransferred.IsSet()
}

// HasNumPhysicalBytesTransferred returns a boolean if a field has been set.
func (o *DataTransferToVaultPerProtectionJob) HasNumPhysicalBytesTransferred() bool {
	if o != nil && o.NumPhysicalBytesTransferred.IsSet() {
		return true
	}

	return false
}

// SetNumPhysicalBytesTransferred gets a reference to the given NullableInt64 and assigns it to the NumPhysicalBytesTransferred field.
func (o *DataTransferToVaultPerProtectionJob) SetNumPhysicalBytesTransferred(v int64) {
	o.NumPhysicalBytesTransferred.Set(&v)
}
// SetNumPhysicalBytesTransferredNil sets the value for NumPhysicalBytesTransferred to be an explicit nil
func (o *DataTransferToVaultPerProtectionJob) SetNumPhysicalBytesTransferredNil() {
	o.NumPhysicalBytesTransferred.Set(nil)
}

// UnsetNumPhysicalBytesTransferred ensures that no value is present for NumPhysicalBytesTransferred, not even an explicit nil
func (o *DataTransferToVaultPerProtectionJob) UnsetNumPhysicalBytesTransferred() {
	o.NumPhysicalBytesTransferred.Unset()
}

// GetProtectionJobName returns the ProtectionJobName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTransferToVaultPerProtectionJob) GetProtectionJobName() string {
	if o == nil || o.ProtectionJobName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProtectionJobName.Get()
}

// GetProtectionJobNameOk returns a tuple with the ProtectionJobName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTransferToVaultPerProtectionJob) GetProtectionJobNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProtectionJobName.Get(), o.ProtectionJobName.IsSet()
}

// HasProtectionJobName returns a boolean if a field has been set.
func (o *DataTransferToVaultPerProtectionJob) HasProtectionJobName() bool {
	if o != nil && o.ProtectionJobName.IsSet() {
		return true
	}

	return false
}

// SetProtectionJobName gets a reference to the given NullableString and assigns it to the ProtectionJobName field.
func (o *DataTransferToVaultPerProtectionJob) SetProtectionJobName(v string) {
	o.ProtectionJobName.Set(&v)
}
// SetProtectionJobNameNil sets the value for ProtectionJobName to be an explicit nil
func (o *DataTransferToVaultPerProtectionJob) SetProtectionJobNameNil() {
	o.ProtectionJobName.Set(nil)
}

// UnsetProtectionJobName ensures that no value is present for ProtectionJobName, not even an explicit nil
func (o *DataTransferToVaultPerProtectionJob) UnsetProtectionJobName() {
	o.ProtectionJobName.Unset()
}

// GetStorageConsumed returns the StorageConsumed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTransferToVaultPerProtectionJob) GetStorageConsumed() int64 {
	if o == nil || o.StorageConsumed.Get() == nil {
		var ret int64
		return ret
	}
	return *o.StorageConsumed.Get()
}

// GetStorageConsumedOk returns a tuple with the StorageConsumed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTransferToVaultPerProtectionJob) GetStorageConsumedOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageConsumed.Get(), o.StorageConsumed.IsSet()
}

// HasStorageConsumed returns a boolean if a field has been set.
func (o *DataTransferToVaultPerProtectionJob) HasStorageConsumed() bool {
	if o != nil && o.StorageConsumed.IsSet() {
		return true
	}

	return false
}

// SetStorageConsumed gets a reference to the given NullableInt64 and assigns it to the StorageConsumed field.
func (o *DataTransferToVaultPerProtectionJob) SetStorageConsumed(v int64) {
	o.StorageConsumed.Set(&v)
}
// SetStorageConsumedNil sets the value for StorageConsumed to be an explicit nil
func (o *DataTransferToVaultPerProtectionJob) SetStorageConsumedNil() {
	o.StorageConsumed.Set(nil)
}

// UnsetStorageConsumed ensures that no value is present for StorageConsumed, not even an explicit nil
func (o *DataTransferToVaultPerProtectionJob) UnsetStorageConsumed() {
	o.StorageConsumed.Unset()
}

func (o DataTransferToVaultPerProtectionJob) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NumLogicalBytesTransferred.IsSet() {
		toSerialize["numLogicalBytesTransferred"] = o.NumLogicalBytesTransferred.Get()
	}
	if o.NumPhysicalBytesTransferred.IsSet() {
		toSerialize["numPhysicalBytesTransferred"] = o.NumPhysicalBytesTransferred.Get()
	}
	if o.ProtectionJobName.IsSet() {
		toSerialize["protectionJobName"] = o.ProtectionJobName.Get()
	}
	if o.StorageConsumed.IsSet() {
		toSerialize["storageConsumed"] = o.StorageConsumed.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDataTransferToVaultPerProtectionJob struct {
	value *DataTransferToVaultPerProtectionJob
	isSet bool
}

func (v NullableDataTransferToVaultPerProtectionJob) Get() *DataTransferToVaultPerProtectionJob {
	return v.value
}

func (v *NullableDataTransferToVaultPerProtectionJob) Set(val *DataTransferToVaultPerProtectionJob) {
	v.value = val
	v.isSet = true
}

func (v NullableDataTransferToVaultPerProtectionJob) IsSet() bool {
	return v.isSet
}

func (v *NullableDataTransferToVaultPerProtectionJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataTransferToVaultPerProtectionJob(val *DataTransferToVaultPerProtectionJob) *NullableDataTransferToVaultPerProtectionJob {
	return &NullableDataTransferToVaultPerProtectionJob{value: val, isSet: true}
}

func (v NullableDataTransferToVaultPerProtectionJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataTransferToVaultPerProtectionJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


