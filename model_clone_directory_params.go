/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// CloneDirectoryParams Specifies the params that have to be provided to clone a directory.
type CloneDirectoryParams struct {
	// Name of the new directory which will contain the clone contents.
	DestinationDirectoryName NullableString `json:"destinationDirectoryName,omitempty"`
	// Specifies the path of the destination parent directory. The source dir would be cloned as a child of destination parent dir.
	DestinationParentDirectoryPath NullableString `json:"destinationParentDirectoryPath,omitempty"`
	// Specifies the path of the source directory
	SourceDirectoryPath NullableString `json:"sourceDirectoryPath,omitempty"`
}

// NewCloneDirectoryParams instantiates a new CloneDirectoryParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloneDirectoryParams() *CloneDirectoryParams {
	this := CloneDirectoryParams{}
	return &this
}

// NewCloneDirectoryParamsWithDefaults instantiates a new CloneDirectoryParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloneDirectoryParamsWithDefaults() *CloneDirectoryParams {
	this := CloneDirectoryParams{}
	return &this
}

// GetDestinationDirectoryName returns the DestinationDirectoryName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloneDirectoryParams) GetDestinationDirectoryName() string {
	if o == nil || o.DestinationDirectoryName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DestinationDirectoryName.Get()
}

// GetDestinationDirectoryNameOk returns a tuple with the DestinationDirectoryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloneDirectoryParams) GetDestinationDirectoryNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DestinationDirectoryName.Get(), o.DestinationDirectoryName.IsSet()
}

// HasDestinationDirectoryName returns a boolean if a field has been set.
func (o *CloneDirectoryParams) HasDestinationDirectoryName() bool {
	if o != nil && o.DestinationDirectoryName.IsSet() {
		return true
	}

	return false
}

// SetDestinationDirectoryName gets a reference to the given NullableString and assigns it to the DestinationDirectoryName field.
func (o *CloneDirectoryParams) SetDestinationDirectoryName(v string) {
	o.DestinationDirectoryName.Set(&v)
}
// SetDestinationDirectoryNameNil sets the value for DestinationDirectoryName to be an explicit nil
func (o *CloneDirectoryParams) SetDestinationDirectoryNameNil() {
	o.DestinationDirectoryName.Set(nil)
}

// UnsetDestinationDirectoryName ensures that no value is present for DestinationDirectoryName, not even an explicit nil
func (o *CloneDirectoryParams) UnsetDestinationDirectoryName() {
	o.DestinationDirectoryName.Unset()
}

// GetDestinationParentDirectoryPath returns the DestinationParentDirectoryPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloneDirectoryParams) GetDestinationParentDirectoryPath() string {
	if o == nil || o.DestinationParentDirectoryPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.DestinationParentDirectoryPath.Get()
}

// GetDestinationParentDirectoryPathOk returns a tuple with the DestinationParentDirectoryPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloneDirectoryParams) GetDestinationParentDirectoryPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DestinationParentDirectoryPath.Get(), o.DestinationParentDirectoryPath.IsSet()
}

// HasDestinationParentDirectoryPath returns a boolean if a field has been set.
func (o *CloneDirectoryParams) HasDestinationParentDirectoryPath() bool {
	if o != nil && o.DestinationParentDirectoryPath.IsSet() {
		return true
	}

	return false
}

// SetDestinationParentDirectoryPath gets a reference to the given NullableString and assigns it to the DestinationParentDirectoryPath field.
func (o *CloneDirectoryParams) SetDestinationParentDirectoryPath(v string) {
	o.DestinationParentDirectoryPath.Set(&v)
}
// SetDestinationParentDirectoryPathNil sets the value for DestinationParentDirectoryPath to be an explicit nil
func (o *CloneDirectoryParams) SetDestinationParentDirectoryPathNil() {
	o.DestinationParentDirectoryPath.Set(nil)
}

// UnsetDestinationParentDirectoryPath ensures that no value is present for DestinationParentDirectoryPath, not even an explicit nil
func (o *CloneDirectoryParams) UnsetDestinationParentDirectoryPath() {
	o.DestinationParentDirectoryPath.Unset()
}

// GetSourceDirectoryPath returns the SourceDirectoryPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloneDirectoryParams) GetSourceDirectoryPath() string {
	if o == nil || o.SourceDirectoryPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.SourceDirectoryPath.Get()
}

// GetSourceDirectoryPathOk returns a tuple with the SourceDirectoryPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloneDirectoryParams) GetSourceDirectoryPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceDirectoryPath.Get(), o.SourceDirectoryPath.IsSet()
}

// HasSourceDirectoryPath returns a boolean if a field has been set.
func (o *CloneDirectoryParams) HasSourceDirectoryPath() bool {
	if o != nil && o.SourceDirectoryPath.IsSet() {
		return true
	}

	return false
}

// SetSourceDirectoryPath gets a reference to the given NullableString and assigns it to the SourceDirectoryPath field.
func (o *CloneDirectoryParams) SetSourceDirectoryPath(v string) {
	o.SourceDirectoryPath.Set(&v)
}
// SetSourceDirectoryPathNil sets the value for SourceDirectoryPath to be an explicit nil
func (o *CloneDirectoryParams) SetSourceDirectoryPathNil() {
	o.SourceDirectoryPath.Set(nil)
}

// UnsetSourceDirectoryPath ensures that no value is present for SourceDirectoryPath, not even an explicit nil
func (o *CloneDirectoryParams) UnsetSourceDirectoryPath() {
	o.SourceDirectoryPath.Unset()
}

func (o CloneDirectoryParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DestinationDirectoryName.IsSet() {
		toSerialize["destinationDirectoryName"] = o.DestinationDirectoryName.Get()
	}
	if o.DestinationParentDirectoryPath.IsSet() {
		toSerialize["destinationParentDirectoryPath"] = o.DestinationParentDirectoryPath.Get()
	}
	if o.SourceDirectoryPath.IsSet() {
		toSerialize["sourceDirectoryPath"] = o.SourceDirectoryPath.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCloneDirectoryParams struct {
	value *CloneDirectoryParams
	isSet bool
}

func (v NullableCloneDirectoryParams) Get() *CloneDirectoryParams {
	return v.value
}

func (v *NullableCloneDirectoryParams) Set(val *CloneDirectoryParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCloneDirectoryParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCloneDirectoryParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloneDirectoryParams(val *CloneDirectoryParams) *NullableCloneDirectoryParams {
	return &NullableCloneDirectoryParams{value: val, isSet: true}
}

func (v NullableCloneDirectoryParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloneDirectoryParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


