/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// SiteOwner Specifies the details about a SharePoint Site owner.
type SiteOwner struct {
	// Specifies the Document Libraries within a Site which are to be restored.
	DriveInfoList []SiteDriveInfo `json:"driveInfoList,omitempty"`
	SiteDetailObject *RestoreObjectDetails `json:"siteDetailObject,omitempty"`
}

// NewSiteOwner instantiates a new SiteOwner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSiteOwner() *SiteOwner {
	this := SiteOwner{}
	return &this
}

// NewSiteOwnerWithDefaults instantiates a new SiteOwner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteOwnerWithDefaults() *SiteOwner {
	this := SiteOwner{}
	return &this
}

// GetDriveInfoList returns the DriveInfoList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteOwner) GetDriveInfoList() []SiteDriveInfo {
	if o == nil  {
		var ret []SiteDriveInfo
		return ret
	}
	return o.DriveInfoList
}

// GetDriveInfoListOk returns a tuple with the DriveInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteOwner) GetDriveInfoListOk() (*[]SiteDriveInfo, bool) {
	if o == nil || o.DriveInfoList == nil {
		return nil, false
	}
	return &o.DriveInfoList, true
}

// HasDriveInfoList returns a boolean if a field has been set.
func (o *SiteOwner) HasDriveInfoList() bool {
	if o != nil && o.DriveInfoList != nil {
		return true
	}

	return false
}

// SetDriveInfoList gets a reference to the given []SiteDriveInfo and assigns it to the DriveInfoList field.
func (o *SiteOwner) SetDriveInfoList(v []SiteDriveInfo) {
	o.DriveInfoList = v
}

// GetSiteDetailObject returns the SiteDetailObject field value if set, zero value otherwise.
func (o *SiteOwner) GetSiteDetailObject() RestoreObjectDetails {
	if o == nil || o.SiteDetailObject == nil {
		var ret RestoreObjectDetails
		return ret
	}
	return *o.SiteDetailObject
}

// GetSiteDetailObjectOk returns a tuple with the SiteDetailObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteOwner) GetSiteDetailObjectOk() (*RestoreObjectDetails, bool) {
	if o == nil || o.SiteDetailObject == nil {
		return nil, false
	}
	return o.SiteDetailObject, true
}

// HasSiteDetailObject returns a boolean if a field has been set.
func (o *SiteOwner) HasSiteDetailObject() bool {
	if o != nil && o.SiteDetailObject != nil {
		return true
	}

	return false
}

// SetSiteDetailObject gets a reference to the given RestoreObjectDetails and assigns it to the SiteDetailObject field.
func (o *SiteOwner) SetSiteDetailObject(v RestoreObjectDetails) {
	o.SiteDetailObject = &v
}

func (o SiteOwner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DriveInfoList != nil {
		toSerialize["driveInfoList"] = o.DriveInfoList
	}
	if o.SiteDetailObject != nil {
		toSerialize["siteDetailObject"] = o.SiteDetailObject
	}
	return json.Marshal(toSerialize)
}

type NullableSiteOwner struct {
	value *SiteOwner
	isSet bool
}

func (v NullableSiteOwner) Get() *SiteOwner {
	return v.value
}

func (v *NullableSiteOwner) Set(val *SiteOwner) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteOwner) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteOwner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteOwner(val *SiteOwner) *NullableSiteOwner {
	return &NullableSiteOwner{value: val, isSet: true}
}

func (v NullableSiteOwner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteOwner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


