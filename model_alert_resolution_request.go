/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// AlertResolutionRequest Request that provides the details of a resolution and the list of Alert Ids to be marked resolved.
type AlertResolutionRequest struct {
	// Specifies list of alerts resolved by a Resolution, which are specified by Alert Ids.
	AlertIdList []string `json:"alertIdList,omitempty"`
	ResolutionDetails *AlertResolutionInfo `json:"resolutionDetails,omitempty"`
}

// NewAlertResolutionRequest instantiates a new AlertResolutionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertResolutionRequest() *AlertResolutionRequest {
	this := AlertResolutionRequest{}
	return &this
}

// NewAlertResolutionRequestWithDefaults instantiates a new AlertResolutionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertResolutionRequestWithDefaults() *AlertResolutionRequest {
	this := AlertResolutionRequest{}
	return &this
}

// GetAlertIdList returns the AlertIdList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertResolutionRequest) GetAlertIdList() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.AlertIdList
}

// GetAlertIdListOk returns a tuple with the AlertIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertResolutionRequest) GetAlertIdListOk() (*[]string, bool) {
	if o == nil || o.AlertIdList == nil {
		return nil, false
	}
	return &o.AlertIdList, true
}

// HasAlertIdList returns a boolean if a field has been set.
func (o *AlertResolutionRequest) HasAlertIdList() bool {
	if o != nil && o.AlertIdList != nil {
		return true
	}

	return false
}

// SetAlertIdList gets a reference to the given []string and assigns it to the AlertIdList field.
func (o *AlertResolutionRequest) SetAlertIdList(v []string) {
	o.AlertIdList = v
}

// GetResolutionDetails returns the ResolutionDetails field value if set, zero value otherwise.
func (o *AlertResolutionRequest) GetResolutionDetails() AlertResolutionInfo {
	if o == nil || o.ResolutionDetails == nil {
		var ret AlertResolutionInfo
		return ret
	}
	return *o.ResolutionDetails
}

// GetResolutionDetailsOk returns a tuple with the ResolutionDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertResolutionRequest) GetResolutionDetailsOk() (*AlertResolutionInfo, bool) {
	if o == nil || o.ResolutionDetails == nil {
		return nil, false
	}
	return o.ResolutionDetails, true
}

// HasResolutionDetails returns a boolean if a field has been set.
func (o *AlertResolutionRequest) HasResolutionDetails() bool {
	if o != nil && o.ResolutionDetails != nil {
		return true
	}

	return false
}

// SetResolutionDetails gets a reference to the given AlertResolutionInfo and assigns it to the ResolutionDetails field.
func (o *AlertResolutionRequest) SetResolutionDetails(v AlertResolutionInfo) {
	o.ResolutionDetails = &v
}

func (o AlertResolutionRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AlertIdList != nil {
		toSerialize["alertIdList"] = o.AlertIdList
	}
	if o.ResolutionDetails != nil {
		toSerialize["resolutionDetails"] = o.ResolutionDetails
	}
	return json.Marshal(toSerialize)
}

type NullableAlertResolutionRequest struct {
	value *AlertResolutionRequest
	isSet bool
}

func (v NullableAlertResolutionRequest) Get() *AlertResolutionRequest {
	return v.value
}

func (v *NullableAlertResolutionRequest) Set(val *AlertResolutionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertResolutionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertResolutionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertResolutionRequest(val *AlertResolutionRequest) *NullableAlertResolutionRequest {
	return &NullableAlertResolutionRequest{value: val, isSet: true}
}

func (v NullableAlertResolutionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertResolutionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


