/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// TenantViewBoxUpdate Specifies view box update details response about a tenant.
type TenantViewBoxUpdate struct {
	// Specifies the unique id of the tenant.
	TenantId NullableString `json:"tenantId,omitempty"`
	// Specifies the ViewBoxIds for respective tenant.
	ViewBoxIds []int64 `json:"viewBoxIds,omitempty"`
}

// NewTenantViewBoxUpdate instantiates a new TenantViewBoxUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantViewBoxUpdate() *TenantViewBoxUpdate {
	this := TenantViewBoxUpdate{}
	return &this
}

// NewTenantViewBoxUpdateWithDefaults instantiates a new TenantViewBoxUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantViewBoxUpdateWithDefaults() *TenantViewBoxUpdate {
	this := TenantViewBoxUpdate{}
	return &this
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantViewBoxUpdate) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantViewBoxUpdate) GetTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *TenantViewBoxUpdate) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *TenantViewBoxUpdate) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *TenantViewBoxUpdate) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *TenantViewBoxUpdate) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetViewBoxIds returns the ViewBoxIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantViewBoxUpdate) GetViewBoxIds() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.ViewBoxIds
}

// GetViewBoxIdsOk returns a tuple with the ViewBoxIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantViewBoxUpdate) GetViewBoxIdsOk() (*[]int64, bool) {
	if o == nil || o.ViewBoxIds == nil {
		return nil, false
	}
	return &o.ViewBoxIds, true
}

// HasViewBoxIds returns a boolean if a field has been set.
func (o *TenantViewBoxUpdate) HasViewBoxIds() bool {
	if o != nil && o.ViewBoxIds != nil {
		return true
	}

	return false
}

// SetViewBoxIds gets a reference to the given []int64 and assigns it to the ViewBoxIds field.
func (o *TenantViewBoxUpdate) SetViewBoxIds(v []int64) {
	o.ViewBoxIds = v
}

func (o TenantViewBoxUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.ViewBoxIds != nil {
		toSerialize["viewBoxIds"] = o.ViewBoxIds
	}
	return json.Marshal(toSerialize)
}

type NullableTenantViewBoxUpdate struct {
	value *TenantViewBoxUpdate
	isSet bool
}

func (v NullableTenantViewBoxUpdate) Get() *TenantViewBoxUpdate {
	return v.value
}

func (v *NullableTenantViewBoxUpdate) Set(val *TenantViewBoxUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantViewBoxUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantViewBoxUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantViewBoxUpdate(val *TenantViewBoxUpdate) *NullableTenantViewBoxUpdate {
	return &NullableTenantViewBoxUpdate{value: val, isSet: true}
}

func (v NullableTenantViewBoxUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantViewBoxUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


