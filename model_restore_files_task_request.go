/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// RestoreFilesTaskRequest Specifies information about a Restore Task that recovers files and folders.
type RestoreFilesTaskRequest struct {
	// Specifies if the Restore Task should continue even if the copy operation of some files and folders fails. If true, the Cohesity Cluster ignores intermittent errors and recovers as many files and folders as possible. If false, the Restore Task stops recovering when a copy operation fails.
	ContinueOnError NullableBool `json:"continueOnError,omitempty"`
	// Specifies the type of method to be used to perform file recovery. 'kAutoDeploy' indicates that file restore operation wiil be performed using an ephemeral agent. 'kUseExistingAgent' indicates that file restore operation wiil be performed using an persistent agent. 'kUseHypervisorAPIs' indicates that file restore operation wiil be performed using an hypervisor API's.
	FileRecoveryMethod NullableString `json:"fileRecoveryMethod,omitempty"`
	// Array of Files or Folders.  Specifies the files and folders to recover from the snapshot.
	Filenames []string `json:"filenames,omitempty"`
	// Specifies whether this is a file based volume restore.
	IsFileBasedVolumeRestore NullableBool `json:"isFileBasedVolumeRestore,omitempty"`
	// Sepcifies whether this will attach disks or mount disks on the VM side OR use Storage Proxy RPCs to stream data
	MountDisksOnVm NullableBool `json:"mountDisksOnVm,omitempty"`
	// Specifies the name of the Restore Task. This field must be set and must be a unique name.
	Name NullableString `json:"name,omitempty"`
	// Specifies an optional root folder where to recover the selected files and folders. By default, files and folders are restored to their original path.
	NewBaseDirectory NullableString `json:"newBaseDirectory,omitempty"`
	// If true, any existing files and folders on the operating system are overwritten by the recovered files or folders. This is the default. If false, existing files and folders are not overwritten.
	Overwrite NullableBool `json:"overwrite,omitempty"`
	// Specifies password of the username to access the target source.
	Password NullableString `json:"password,omitempty"`
	// If true, the Restore Tasks preserves the original file and folder attributes. This is the default.
	PreserveAttributes NullableBool `json:"preserveAttributes,omitempty"`
	// Specifies information regarding files and directories.
	RestoredFileInfoList []RestoredFileInfoList `json:"restoredFileInfoList,omitempty"`
	// Specifies information about the source object (such as a VM) that contains the files and folders to recover. In addition, it contains information about the Protection Job and Job Run that captured the snapshot to recover from. To specify a particular snapshot, you must specify a jobRunId and a startTimeUsecs. If jobRunId and startTimeUsecs are not specified, the last Job Run of the specified Job is used.
	SourceObjectInfo NullableRestoreObjectDetails `json:"sourceObjectInfo,omitempty"`
	// Specifies the target host types to be restored. 'kLinux' indicates the Linux operating system. 'kWindows' indicates the Microsoft Windows operating system. 'kAix' indicates the IBM AIX operating system. 'kSolaris' indicates the Oracle Solaris operating system. 'kSapHana' indicates the Sap Hana database system developed by SAP SE. 'kOther' indicates the other types of operating system.
	TargetHostType NullableString `json:"targetHostType,omitempty"`
	// Specifies the registered source (such as a vCenter Server) that contains the target protection source (such as a VM) where the files and folders are recovered to. This field is not required for a Physical Server.
	TargetParentSourceId NullableInt64 `json:"targetParentSourceId,omitempty"`
	// Specifies the id of the target protection source (such as a VM) where the files and folders are recovered to.
	TargetSourceId NullableInt64 `json:"targetSourceId,omitempty"`
	// Specifies whether this will use an existing agent on the target vm to do restore. Following field is deprecated and shall not be used. Please refer to the FileRecoveryMethod field for more information.
	UseExistingAgent NullableBool `json:"useExistingAgent,omitempty"`
	// Specifies username to access the target source.
	Username NullableString `json:"username,omitempty"`
}

// NewRestoreFilesTaskRequest instantiates a new RestoreFilesTaskRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreFilesTaskRequest() *RestoreFilesTaskRequest {
	this := RestoreFilesTaskRequest{}
	return &this
}

// NewRestoreFilesTaskRequestWithDefaults instantiates a new RestoreFilesTaskRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreFilesTaskRequestWithDefaults() *RestoreFilesTaskRequest {
	this := RestoreFilesTaskRequest{}
	return &this
}

// GetContinueOnError returns the ContinueOnError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesTaskRequest) GetContinueOnError() bool {
	if o == nil || o.ContinueOnError.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ContinueOnError.Get()
}

// GetContinueOnErrorOk returns a tuple with the ContinueOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesTaskRequest) GetContinueOnErrorOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ContinueOnError.Get(), o.ContinueOnError.IsSet()
}

// HasContinueOnError returns a boolean if a field has been set.
func (o *RestoreFilesTaskRequest) HasContinueOnError() bool {
	if o != nil && o.ContinueOnError.IsSet() {
		return true
	}

	return false
}

// SetContinueOnError gets a reference to the given NullableBool and assigns it to the ContinueOnError field.
func (o *RestoreFilesTaskRequest) SetContinueOnError(v bool) {
	o.ContinueOnError.Set(&v)
}
// SetContinueOnErrorNil sets the value for ContinueOnError to be an explicit nil
func (o *RestoreFilesTaskRequest) SetContinueOnErrorNil() {
	o.ContinueOnError.Set(nil)
}

// UnsetContinueOnError ensures that no value is present for ContinueOnError, not even an explicit nil
func (o *RestoreFilesTaskRequest) UnsetContinueOnError() {
	o.ContinueOnError.Unset()
}

// GetFileRecoveryMethod returns the FileRecoveryMethod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesTaskRequest) GetFileRecoveryMethod() string {
	if o == nil || o.FileRecoveryMethod.Get() == nil {
		var ret string
		return ret
	}
	return *o.FileRecoveryMethod.Get()
}

// GetFileRecoveryMethodOk returns a tuple with the FileRecoveryMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesTaskRequest) GetFileRecoveryMethodOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FileRecoveryMethod.Get(), o.FileRecoveryMethod.IsSet()
}

// HasFileRecoveryMethod returns a boolean if a field has been set.
func (o *RestoreFilesTaskRequest) HasFileRecoveryMethod() bool {
	if o != nil && o.FileRecoveryMethod.IsSet() {
		return true
	}

	return false
}

// SetFileRecoveryMethod gets a reference to the given NullableString and assigns it to the FileRecoveryMethod field.
func (o *RestoreFilesTaskRequest) SetFileRecoveryMethod(v string) {
	o.FileRecoveryMethod.Set(&v)
}
// SetFileRecoveryMethodNil sets the value for FileRecoveryMethod to be an explicit nil
func (o *RestoreFilesTaskRequest) SetFileRecoveryMethodNil() {
	o.FileRecoveryMethod.Set(nil)
}

// UnsetFileRecoveryMethod ensures that no value is present for FileRecoveryMethod, not even an explicit nil
func (o *RestoreFilesTaskRequest) UnsetFileRecoveryMethod() {
	o.FileRecoveryMethod.Unset()
}

// GetFilenames returns the Filenames field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesTaskRequest) GetFilenames() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Filenames
}

// GetFilenamesOk returns a tuple with the Filenames field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesTaskRequest) GetFilenamesOk() (*[]string, bool) {
	if o == nil || o.Filenames == nil {
		return nil, false
	}
	return &o.Filenames, true
}

// HasFilenames returns a boolean if a field has been set.
func (o *RestoreFilesTaskRequest) HasFilenames() bool {
	if o != nil && o.Filenames != nil {
		return true
	}

	return false
}

// SetFilenames gets a reference to the given []string and assigns it to the Filenames field.
func (o *RestoreFilesTaskRequest) SetFilenames(v []string) {
	o.Filenames = v
}

// GetIsFileBasedVolumeRestore returns the IsFileBasedVolumeRestore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesTaskRequest) GetIsFileBasedVolumeRestore() bool {
	if o == nil || o.IsFileBasedVolumeRestore.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsFileBasedVolumeRestore.Get()
}

// GetIsFileBasedVolumeRestoreOk returns a tuple with the IsFileBasedVolumeRestore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesTaskRequest) GetIsFileBasedVolumeRestoreOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsFileBasedVolumeRestore.Get(), o.IsFileBasedVolumeRestore.IsSet()
}

// HasIsFileBasedVolumeRestore returns a boolean if a field has been set.
func (o *RestoreFilesTaskRequest) HasIsFileBasedVolumeRestore() bool {
	if o != nil && o.IsFileBasedVolumeRestore.IsSet() {
		return true
	}

	return false
}

// SetIsFileBasedVolumeRestore gets a reference to the given NullableBool and assigns it to the IsFileBasedVolumeRestore field.
func (o *RestoreFilesTaskRequest) SetIsFileBasedVolumeRestore(v bool) {
	o.IsFileBasedVolumeRestore.Set(&v)
}
// SetIsFileBasedVolumeRestoreNil sets the value for IsFileBasedVolumeRestore to be an explicit nil
func (o *RestoreFilesTaskRequest) SetIsFileBasedVolumeRestoreNil() {
	o.IsFileBasedVolumeRestore.Set(nil)
}

// UnsetIsFileBasedVolumeRestore ensures that no value is present for IsFileBasedVolumeRestore, not even an explicit nil
func (o *RestoreFilesTaskRequest) UnsetIsFileBasedVolumeRestore() {
	o.IsFileBasedVolumeRestore.Unset()
}

// GetMountDisksOnVm returns the MountDisksOnVm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesTaskRequest) GetMountDisksOnVm() bool {
	if o == nil || o.MountDisksOnVm.Get() == nil {
		var ret bool
		return ret
	}
	return *o.MountDisksOnVm.Get()
}

// GetMountDisksOnVmOk returns a tuple with the MountDisksOnVm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesTaskRequest) GetMountDisksOnVmOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MountDisksOnVm.Get(), o.MountDisksOnVm.IsSet()
}

// HasMountDisksOnVm returns a boolean if a field has been set.
func (o *RestoreFilesTaskRequest) HasMountDisksOnVm() bool {
	if o != nil && o.MountDisksOnVm.IsSet() {
		return true
	}

	return false
}

// SetMountDisksOnVm gets a reference to the given NullableBool and assigns it to the MountDisksOnVm field.
func (o *RestoreFilesTaskRequest) SetMountDisksOnVm(v bool) {
	o.MountDisksOnVm.Set(&v)
}
// SetMountDisksOnVmNil sets the value for MountDisksOnVm to be an explicit nil
func (o *RestoreFilesTaskRequest) SetMountDisksOnVmNil() {
	o.MountDisksOnVm.Set(nil)
}

// UnsetMountDisksOnVm ensures that no value is present for MountDisksOnVm, not even an explicit nil
func (o *RestoreFilesTaskRequest) UnsetMountDisksOnVm() {
	o.MountDisksOnVm.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesTaskRequest) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesTaskRequest) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *RestoreFilesTaskRequest) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *RestoreFilesTaskRequest) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *RestoreFilesTaskRequest) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *RestoreFilesTaskRequest) UnsetName() {
	o.Name.Unset()
}

// GetNewBaseDirectory returns the NewBaseDirectory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesTaskRequest) GetNewBaseDirectory() string {
	if o == nil || o.NewBaseDirectory.Get() == nil {
		var ret string
		return ret
	}
	return *o.NewBaseDirectory.Get()
}

// GetNewBaseDirectoryOk returns a tuple with the NewBaseDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesTaskRequest) GetNewBaseDirectoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NewBaseDirectory.Get(), o.NewBaseDirectory.IsSet()
}

// HasNewBaseDirectory returns a boolean if a field has been set.
func (o *RestoreFilesTaskRequest) HasNewBaseDirectory() bool {
	if o != nil && o.NewBaseDirectory.IsSet() {
		return true
	}

	return false
}

// SetNewBaseDirectory gets a reference to the given NullableString and assigns it to the NewBaseDirectory field.
func (o *RestoreFilesTaskRequest) SetNewBaseDirectory(v string) {
	o.NewBaseDirectory.Set(&v)
}
// SetNewBaseDirectoryNil sets the value for NewBaseDirectory to be an explicit nil
func (o *RestoreFilesTaskRequest) SetNewBaseDirectoryNil() {
	o.NewBaseDirectory.Set(nil)
}

// UnsetNewBaseDirectory ensures that no value is present for NewBaseDirectory, not even an explicit nil
func (o *RestoreFilesTaskRequest) UnsetNewBaseDirectory() {
	o.NewBaseDirectory.Unset()
}

// GetOverwrite returns the Overwrite field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesTaskRequest) GetOverwrite() bool {
	if o == nil || o.Overwrite.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Overwrite.Get()
}

// GetOverwriteOk returns a tuple with the Overwrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesTaskRequest) GetOverwriteOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Overwrite.Get(), o.Overwrite.IsSet()
}

// HasOverwrite returns a boolean if a field has been set.
func (o *RestoreFilesTaskRequest) HasOverwrite() bool {
	if o != nil && o.Overwrite.IsSet() {
		return true
	}

	return false
}

// SetOverwrite gets a reference to the given NullableBool and assigns it to the Overwrite field.
func (o *RestoreFilesTaskRequest) SetOverwrite(v bool) {
	o.Overwrite.Set(&v)
}
// SetOverwriteNil sets the value for Overwrite to be an explicit nil
func (o *RestoreFilesTaskRequest) SetOverwriteNil() {
	o.Overwrite.Set(nil)
}

// UnsetOverwrite ensures that no value is present for Overwrite, not even an explicit nil
func (o *RestoreFilesTaskRequest) UnsetOverwrite() {
	o.Overwrite.Unset()
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesTaskRequest) GetPassword() string {
	if o == nil || o.Password.Get() == nil {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesTaskRequest) GetPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *RestoreFilesTaskRequest) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *RestoreFilesTaskRequest) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *RestoreFilesTaskRequest) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *RestoreFilesTaskRequest) UnsetPassword() {
	o.Password.Unset()
}

// GetPreserveAttributes returns the PreserveAttributes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesTaskRequest) GetPreserveAttributes() bool {
	if o == nil || o.PreserveAttributes.Get() == nil {
		var ret bool
		return ret
	}
	return *o.PreserveAttributes.Get()
}

// GetPreserveAttributesOk returns a tuple with the PreserveAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesTaskRequest) GetPreserveAttributesOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PreserveAttributes.Get(), o.PreserveAttributes.IsSet()
}

// HasPreserveAttributes returns a boolean if a field has been set.
func (o *RestoreFilesTaskRequest) HasPreserveAttributes() bool {
	if o != nil && o.PreserveAttributes.IsSet() {
		return true
	}

	return false
}

// SetPreserveAttributes gets a reference to the given NullableBool and assigns it to the PreserveAttributes field.
func (o *RestoreFilesTaskRequest) SetPreserveAttributes(v bool) {
	o.PreserveAttributes.Set(&v)
}
// SetPreserveAttributesNil sets the value for PreserveAttributes to be an explicit nil
func (o *RestoreFilesTaskRequest) SetPreserveAttributesNil() {
	o.PreserveAttributes.Set(nil)
}

// UnsetPreserveAttributes ensures that no value is present for PreserveAttributes, not even an explicit nil
func (o *RestoreFilesTaskRequest) UnsetPreserveAttributes() {
	o.PreserveAttributes.Unset()
}

// GetRestoredFileInfoList returns the RestoredFileInfoList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesTaskRequest) GetRestoredFileInfoList() []RestoredFileInfoList {
	if o == nil  {
		var ret []RestoredFileInfoList
		return ret
	}
	return o.RestoredFileInfoList
}

// GetRestoredFileInfoListOk returns a tuple with the RestoredFileInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesTaskRequest) GetRestoredFileInfoListOk() (*[]RestoredFileInfoList, bool) {
	if o == nil || o.RestoredFileInfoList == nil {
		return nil, false
	}
	return &o.RestoredFileInfoList, true
}

// HasRestoredFileInfoList returns a boolean if a field has been set.
func (o *RestoreFilesTaskRequest) HasRestoredFileInfoList() bool {
	if o != nil && o.RestoredFileInfoList != nil {
		return true
	}

	return false
}

// SetRestoredFileInfoList gets a reference to the given []RestoredFileInfoList and assigns it to the RestoredFileInfoList field.
func (o *RestoreFilesTaskRequest) SetRestoredFileInfoList(v []RestoredFileInfoList) {
	o.RestoredFileInfoList = v
}

// GetSourceObjectInfo returns the SourceObjectInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesTaskRequest) GetSourceObjectInfo() RestoreObjectDetails {
	if o == nil || o.SourceObjectInfo.Get() == nil {
		var ret RestoreObjectDetails
		return ret
	}
	return *o.SourceObjectInfo.Get()
}

// GetSourceObjectInfoOk returns a tuple with the SourceObjectInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesTaskRequest) GetSourceObjectInfoOk() (*RestoreObjectDetails, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceObjectInfo.Get(), o.SourceObjectInfo.IsSet()
}

// HasSourceObjectInfo returns a boolean if a field has been set.
func (o *RestoreFilesTaskRequest) HasSourceObjectInfo() bool {
	if o != nil && o.SourceObjectInfo.IsSet() {
		return true
	}

	return false
}

// SetSourceObjectInfo gets a reference to the given NullableRestoreObjectDetails and assigns it to the SourceObjectInfo field.
func (o *RestoreFilesTaskRequest) SetSourceObjectInfo(v RestoreObjectDetails) {
	o.SourceObjectInfo.Set(&v)
}
// SetSourceObjectInfoNil sets the value for SourceObjectInfo to be an explicit nil
func (o *RestoreFilesTaskRequest) SetSourceObjectInfoNil() {
	o.SourceObjectInfo.Set(nil)
}

// UnsetSourceObjectInfo ensures that no value is present for SourceObjectInfo, not even an explicit nil
func (o *RestoreFilesTaskRequest) UnsetSourceObjectInfo() {
	o.SourceObjectInfo.Unset()
}

// GetTargetHostType returns the TargetHostType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesTaskRequest) GetTargetHostType() string {
	if o == nil || o.TargetHostType.Get() == nil {
		var ret string
		return ret
	}
	return *o.TargetHostType.Get()
}

// GetTargetHostTypeOk returns a tuple with the TargetHostType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesTaskRequest) GetTargetHostTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetHostType.Get(), o.TargetHostType.IsSet()
}

// HasTargetHostType returns a boolean if a field has been set.
func (o *RestoreFilesTaskRequest) HasTargetHostType() bool {
	if o != nil && o.TargetHostType.IsSet() {
		return true
	}

	return false
}

// SetTargetHostType gets a reference to the given NullableString and assigns it to the TargetHostType field.
func (o *RestoreFilesTaskRequest) SetTargetHostType(v string) {
	o.TargetHostType.Set(&v)
}
// SetTargetHostTypeNil sets the value for TargetHostType to be an explicit nil
func (o *RestoreFilesTaskRequest) SetTargetHostTypeNil() {
	o.TargetHostType.Set(nil)
}

// UnsetTargetHostType ensures that no value is present for TargetHostType, not even an explicit nil
func (o *RestoreFilesTaskRequest) UnsetTargetHostType() {
	o.TargetHostType.Unset()
}

// GetTargetParentSourceId returns the TargetParentSourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesTaskRequest) GetTargetParentSourceId() int64 {
	if o == nil || o.TargetParentSourceId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TargetParentSourceId.Get()
}

// GetTargetParentSourceIdOk returns a tuple with the TargetParentSourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesTaskRequest) GetTargetParentSourceIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetParentSourceId.Get(), o.TargetParentSourceId.IsSet()
}

// HasTargetParentSourceId returns a boolean if a field has been set.
func (o *RestoreFilesTaskRequest) HasTargetParentSourceId() bool {
	if o != nil && o.TargetParentSourceId.IsSet() {
		return true
	}

	return false
}

// SetTargetParentSourceId gets a reference to the given NullableInt64 and assigns it to the TargetParentSourceId field.
func (o *RestoreFilesTaskRequest) SetTargetParentSourceId(v int64) {
	o.TargetParentSourceId.Set(&v)
}
// SetTargetParentSourceIdNil sets the value for TargetParentSourceId to be an explicit nil
func (o *RestoreFilesTaskRequest) SetTargetParentSourceIdNil() {
	o.TargetParentSourceId.Set(nil)
}

// UnsetTargetParentSourceId ensures that no value is present for TargetParentSourceId, not even an explicit nil
func (o *RestoreFilesTaskRequest) UnsetTargetParentSourceId() {
	o.TargetParentSourceId.Unset()
}

// GetTargetSourceId returns the TargetSourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesTaskRequest) GetTargetSourceId() int64 {
	if o == nil || o.TargetSourceId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TargetSourceId.Get()
}

// GetTargetSourceIdOk returns a tuple with the TargetSourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesTaskRequest) GetTargetSourceIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetSourceId.Get(), o.TargetSourceId.IsSet()
}

// HasTargetSourceId returns a boolean if a field has been set.
func (o *RestoreFilesTaskRequest) HasTargetSourceId() bool {
	if o != nil && o.TargetSourceId.IsSet() {
		return true
	}

	return false
}

// SetTargetSourceId gets a reference to the given NullableInt64 and assigns it to the TargetSourceId field.
func (o *RestoreFilesTaskRequest) SetTargetSourceId(v int64) {
	o.TargetSourceId.Set(&v)
}
// SetTargetSourceIdNil sets the value for TargetSourceId to be an explicit nil
func (o *RestoreFilesTaskRequest) SetTargetSourceIdNil() {
	o.TargetSourceId.Set(nil)
}

// UnsetTargetSourceId ensures that no value is present for TargetSourceId, not even an explicit nil
func (o *RestoreFilesTaskRequest) UnsetTargetSourceId() {
	o.TargetSourceId.Unset()
}

// GetUseExistingAgent returns the UseExistingAgent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesTaskRequest) GetUseExistingAgent() bool {
	if o == nil || o.UseExistingAgent.Get() == nil {
		var ret bool
		return ret
	}
	return *o.UseExistingAgent.Get()
}

// GetUseExistingAgentOk returns a tuple with the UseExistingAgent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesTaskRequest) GetUseExistingAgentOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UseExistingAgent.Get(), o.UseExistingAgent.IsSet()
}

// HasUseExistingAgent returns a boolean if a field has been set.
func (o *RestoreFilesTaskRequest) HasUseExistingAgent() bool {
	if o != nil && o.UseExistingAgent.IsSet() {
		return true
	}

	return false
}

// SetUseExistingAgent gets a reference to the given NullableBool and assigns it to the UseExistingAgent field.
func (o *RestoreFilesTaskRequest) SetUseExistingAgent(v bool) {
	o.UseExistingAgent.Set(&v)
}
// SetUseExistingAgentNil sets the value for UseExistingAgent to be an explicit nil
func (o *RestoreFilesTaskRequest) SetUseExistingAgentNil() {
	o.UseExistingAgent.Set(nil)
}

// UnsetUseExistingAgent ensures that no value is present for UseExistingAgent, not even an explicit nil
func (o *RestoreFilesTaskRequest) UnsetUseExistingAgent() {
	o.UseExistingAgent.Unset()
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesTaskRequest) GetUsername() string {
	if o == nil || o.Username.Get() == nil {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesTaskRequest) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *RestoreFilesTaskRequest) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *RestoreFilesTaskRequest) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *RestoreFilesTaskRequest) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *RestoreFilesTaskRequest) UnsetUsername() {
	o.Username.Unset()
}

func (o RestoreFilesTaskRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ContinueOnError.IsSet() {
		toSerialize["continueOnError"] = o.ContinueOnError.Get()
	}
	if o.FileRecoveryMethod.IsSet() {
		toSerialize["fileRecoveryMethod"] = o.FileRecoveryMethod.Get()
	}
	if o.Filenames != nil {
		toSerialize["filenames"] = o.Filenames
	}
	if o.IsFileBasedVolumeRestore.IsSet() {
		toSerialize["isFileBasedVolumeRestore"] = o.IsFileBasedVolumeRestore.Get()
	}
	if o.MountDisksOnVm.IsSet() {
		toSerialize["mountDisksOnVm"] = o.MountDisksOnVm.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.NewBaseDirectory.IsSet() {
		toSerialize["newBaseDirectory"] = o.NewBaseDirectory.Get()
	}
	if o.Overwrite.IsSet() {
		toSerialize["overwrite"] = o.Overwrite.Get()
	}
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	if o.PreserveAttributes.IsSet() {
		toSerialize["preserveAttributes"] = o.PreserveAttributes.Get()
	}
	if o.RestoredFileInfoList != nil {
		toSerialize["restoredFileInfoList"] = o.RestoredFileInfoList
	}
	if o.SourceObjectInfo.IsSet() {
		toSerialize["sourceObjectInfo"] = o.SourceObjectInfo.Get()
	}
	if o.TargetHostType.IsSet() {
		toSerialize["targetHostType"] = o.TargetHostType.Get()
	}
	if o.TargetParentSourceId.IsSet() {
		toSerialize["targetParentSourceId"] = o.TargetParentSourceId.Get()
	}
	if o.TargetSourceId.IsSet() {
		toSerialize["targetSourceId"] = o.TargetSourceId.Get()
	}
	if o.UseExistingAgent.IsSet() {
		toSerialize["useExistingAgent"] = o.UseExistingAgent.Get()
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRestoreFilesTaskRequest struct {
	value *RestoreFilesTaskRequest
	isSet bool
}

func (v NullableRestoreFilesTaskRequest) Get() *RestoreFilesTaskRequest {
	return v.value
}

func (v *NullableRestoreFilesTaskRequest) Set(val *RestoreFilesTaskRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreFilesTaskRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreFilesTaskRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreFilesTaskRequest(val *RestoreFilesTaskRequest) *NullableRestoreFilesTaskRequest {
	return &NullableRestoreFilesTaskRequest{value: val, isSet: true}
}

func (v NullableRestoreFilesTaskRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreFilesTaskRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


