/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// RestoreAcropolisVMParamNetworkConfigInfoNICSpec struct for RestoreAcropolisVMParamNetworkConfigInfoNICSpec
type RestoreAcropolisVMParamNetworkConfigInfoNICSpec struct {
	// IP address to assign to the NIC.
	IpAddress NullableString `json:"ipAddress,omitempty"`
	// The UUID of the network to which the NIC is to be attached.
	NetworkUuid NullableString `json:"networkUuid,omitempty"`
}

// NewRestoreAcropolisVMParamNetworkConfigInfoNICSpec instantiates a new RestoreAcropolisVMParamNetworkConfigInfoNICSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreAcropolisVMParamNetworkConfigInfoNICSpec() *RestoreAcropolisVMParamNetworkConfigInfoNICSpec {
	this := RestoreAcropolisVMParamNetworkConfigInfoNICSpec{}
	return &this
}

// NewRestoreAcropolisVMParamNetworkConfigInfoNICSpecWithDefaults instantiates a new RestoreAcropolisVMParamNetworkConfigInfoNICSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreAcropolisVMParamNetworkConfigInfoNICSpecWithDefaults() *RestoreAcropolisVMParamNetworkConfigInfoNICSpec {
	this := RestoreAcropolisVMParamNetworkConfigInfoNICSpec{}
	return &this
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreAcropolisVMParamNetworkConfigInfoNICSpec) GetIpAddress() string {
	if o == nil || o.IpAddress.Get() == nil {
		var ret string
		return ret
	}
	return *o.IpAddress.Get()
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreAcropolisVMParamNetworkConfigInfoNICSpec) GetIpAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IpAddress.Get(), o.IpAddress.IsSet()
}

// HasIpAddress returns a boolean if a field has been set.
func (o *RestoreAcropolisVMParamNetworkConfigInfoNICSpec) HasIpAddress() bool {
	if o != nil && o.IpAddress.IsSet() {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given NullableString and assigns it to the IpAddress field.
func (o *RestoreAcropolisVMParamNetworkConfigInfoNICSpec) SetIpAddress(v string) {
	o.IpAddress.Set(&v)
}
// SetIpAddressNil sets the value for IpAddress to be an explicit nil
func (o *RestoreAcropolisVMParamNetworkConfigInfoNICSpec) SetIpAddressNil() {
	o.IpAddress.Set(nil)
}

// UnsetIpAddress ensures that no value is present for IpAddress, not even an explicit nil
func (o *RestoreAcropolisVMParamNetworkConfigInfoNICSpec) UnsetIpAddress() {
	o.IpAddress.Unset()
}

// GetNetworkUuid returns the NetworkUuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreAcropolisVMParamNetworkConfigInfoNICSpec) GetNetworkUuid() string {
	if o == nil || o.NetworkUuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.NetworkUuid.Get()
}

// GetNetworkUuidOk returns a tuple with the NetworkUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreAcropolisVMParamNetworkConfigInfoNICSpec) GetNetworkUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NetworkUuid.Get(), o.NetworkUuid.IsSet()
}

// HasNetworkUuid returns a boolean if a field has been set.
func (o *RestoreAcropolisVMParamNetworkConfigInfoNICSpec) HasNetworkUuid() bool {
	if o != nil && o.NetworkUuid.IsSet() {
		return true
	}

	return false
}

// SetNetworkUuid gets a reference to the given NullableString and assigns it to the NetworkUuid field.
func (o *RestoreAcropolisVMParamNetworkConfigInfoNICSpec) SetNetworkUuid(v string) {
	o.NetworkUuid.Set(&v)
}
// SetNetworkUuidNil sets the value for NetworkUuid to be an explicit nil
func (o *RestoreAcropolisVMParamNetworkConfigInfoNICSpec) SetNetworkUuidNil() {
	o.NetworkUuid.Set(nil)
}

// UnsetNetworkUuid ensures that no value is present for NetworkUuid, not even an explicit nil
func (o *RestoreAcropolisVMParamNetworkConfigInfoNICSpec) UnsetNetworkUuid() {
	o.NetworkUuid.Unset()
}

func (o RestoreAcropolisVMParamNetworkConfigInfoNICSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IpAddress.IsSet() {
		toSerialize["ipAddress"] = o.IpAddress.Get()
	}
	if o.NetworkUuid.IsSet() {
		toSerialize["networkUuid"] = o.NetworkUuid.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRestoreAcropolisVMParamNetworkConfigInfoNICSpec struct {
	value *RestoreAcropolisVMParamNetworkConfigInfoNICSpec
	isSet bool
}

func (v NullableRestoreAcropolisVMParamNetworkConfigInfoNICSpec) Get() *RestoreAcropolisVMParamNetworkConfigInfoNICSpec {
	return v.value
}

func (v *NullableRestoreAcropolisVMParamNetworkConfigInfoNICSpec) Set(val *RestoreAcropolisVMParamNetworkConfigInfoNICSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreAcropolisVMParamNetworkConfigInfoNICSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreAcropolisVMParamNetworkConfigInfoNICSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreAcropolisVMParamNetworkConfigInfoNICSpec(val *RestoreAcropolisVMParamNetworkConfigInfoNICSpec) *NullableRestoreAcropolisVMParamNetworkConfigInfoNICSpec {
	return &NullableRestoreAcropolisVMParamNetworkConfigInfoNICSpec{value: val, isSet: true}
}

func (v NullableRestoreAcropolisVMParamNetworkConfigInfoNICSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreAcropolisVMParamNetworkConfigInfoNICSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


