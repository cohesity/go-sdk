/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// SourcesForSid Protection Sources and Views With Access Permissions. Specifies the Protection Sources objects and Views that the specified principal has permissions to access. The principal is specified using a security identifier (SID).
type SourcesForSid struct {
	// Array of Protection Sources.  Specifies the Protection Source objects that the specified principal has permissions to access.
	ProtectionSources []ProtectionSource `json:"protectionSources,omitempty"`
	// Specifies the security identifier (SID) of the principal.
	Sid NullableString `json:"sid,omitempty"`
	// Array of View Names.  Specifies the names of the Views that the specified principal has permissions to access.
	Views []View `json:"views,omitempty"`
}

// NewSourcesForSid instantiates a new SourcesForSid object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourcesForSid() *SourcesForSid {
	this := SourcesForSid{}
	return &this
}

// NewSourcesForSidWithDefaults instantiates a new SourcesForSid object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourcesForSidWithDefaults() *SourcesForSid {
	this := SourcesForSid{}
	return &this
}

// GetProtectionSources returns the ProtectionSources field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourcesForSid) GetProtectionSources() []ProtectionSource {
	if o == nil  {
		var ret []ProtectionSource
		return ret
	}
	return o.ProtectionSources
}

// GetProtectionSourcesOk returns a tuple with the ProtectionSources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourcesForSid) GetProtectionSourcesOk() (*[]ProtectionSource, bool) {
	if o == nil || o.ProtectionSources == nil {
		return nil, false
	}
	return &o.ProtectionSources, true
}

// HasProtectionSources returns a boolean if a field has been set.
func (o *SourcesForSid) HasProtectionSources() bool {
	if o != nil && o.ProtectionSources != nil {
		return true
	}

	return false
}

// SetProtectionSources gets a reference to the given []ProtectionSource and assigns it to the ProtectionSources field.
func (o *SourcesForSid) SetProtectionSources(v []ProtectionSource) {
	o.ProtectionSources = v
}

// GetSid returns the Sid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourcesForSid) GetSid() string {
	if o == nil || o.Sid.Get() == nil {
		var ret string
		return ret
	}
	return *o.Sid.Get()
}

// GetSidOk returns a tuple with the Sid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourcesForSid) GetSidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Sid.Get(), o.Sid.IsSet()
}

// HasSid returns a boolean if a field has been set.
func (o *SourcesForSid) HasSid() bool {
	if o != nil && o.Sid.IsSet() {
		return true
	}

	return false
}

// SetSid gets a reference to the given NullableString and assigns it to the Sid field.
func (o *SourcesForSid) SetSid(v string) {
	o.Sid.Set(&v)
}
// SetSidNil sets the value for Sid to be an explicit nil
func (o *SourcesForSid) SetSidNil() {
	o.Sid.Set(nil)
}

// UnsetSid ensures that no value is present for Sid, not even an explicit nil
func (o *SourcesForSid) UnsetSid() {
	o.Sid.Unset()
}

// GetViews returns the Views field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourcesForSid) GetViews() []View {
	if o == nil  {
		var ret []View
		return ret
	}
	return o.Views
}

// GetViewsOk returns a tuple with the Views field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourcesForSid) GetViewsOk() (*[]View, bool) {
	if o == nil || o.Views == nil {
		return nil, false
	}
	return &o.Views, true
}

// HasViews returns a boolean if a field has been set.
func (o *SourcesForSid) HasViews() bool {
	if o != nil && o.Views != nil {
		return true
	}

	return false
}

// SetViews gets a reference to the given []View and assigns it to the Views field.
func (o *SourcesForSid) SetViews(v []View) {
	o.Views = v
}

func (o SourcesForSid) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ProtectionSources != nil {
		toSerialize["protectionSources"] = o.ProtectionSources
	}
	if o.Sid.IsSet() {
		toSerialize["sid"] = o.Sid.Get()
	}
	if o.Views != nil {
		toSerialize["views"] = o.Views
	}
	return json.Marshal(toSerialize)
}

type NullableSourcesForSid struct {
	value *SourcesForSid
	isSet bool
}

func (v NullableSourcesForSid) Get() *SourcesForSid {
	return v.value
}

func (v *NullableSourcesForSid) Set(val *SourcesForSid) {
	v.value = val
	v.isSet = true
}

func (v NullableSourcesForSid) IsSet() bool {
	return v.isSet
}

func (v *NullableSourcesForSid) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourcesForSid(val *SourcesForSid) *NullableSourcesForSid {
	return &NullableSourcesForSid{value: val, isSet: true}
}

func (v NullableSourcesForSid) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourcesForSid) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


