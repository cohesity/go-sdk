/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ThrottlingPolicyParameters Specifies the throttling policy for a registered Protection Source.
type ThrottlingPolicyParameters struct {
	// Specifies whether datastore streams are configured for all datastores that are part of the registered entity. If set to true, number of streams from Cohesity cluster to the registered entity will be limited to the value set for maxConcurrentStreams. If not set or set to false, there is no max limit for the number of concurrent streams.
	EnforceMaxStreams NullableBool `json:"enforceMaxStreams,omitempty"`
	// Specifies whether no. of backups are configured for the registered entity. If set to true, number of backups made by Cohesity cluster in the registered entity will be limited to the value set for RegisteredSourceMaxConcurrentBackups. If not set or set to false, there is no max limit for the number of concurrent backups.
	EnforceRegisteredSourceMaxBackups NullableBool `json:"enforceRegisteredSourceMaxBackups,omitempty"`
	// Indicates whether read operations to the datastores, which are part of the registered Protection Source, are throttled.
	IsEnabled NullableBool `json:"isEnabled,omitempty"`
	LatencyThresholds *LatencyThresholds `json:"latencyThresholds,omitempty"`
	// Specifies the limit on the number of streams Cohesity cluster will make concurrently to the datastores of the registered entity. This limit is enforced only when the flag enforceMaxStreams is set to true.
	MaxConcurrentStreams NullableInt32 `json:"maxConcurrentStreams,omitempty"`
	// Specifies the limit on the number of backups Cohesity cluster will make concurrently to the registered entity. This limit is enforced only when the flag enforceRegisteredSourceMaxBackups is set to true.
	RegisteredSourceMaxConcurrentBackups NullableInt32 `json:"registeredSourceMaxConcurrentBackups,omitempty"`
}

// NewThrottlingPolicyParameters instantiates a new ThrottlingPolicyParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThrottlingPolicyParameters() *ThrottlingPolicyParameters {
	this := ThrottlingPolicyParameters{}
	return &this
}

// NewThrottlingPolicyParametersWithDefaults instantiates a new ThrottlingPolicyParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThrottlingPolicyParametersWithDefaults() *ThrottlingPolicyParameters {
	this := ThrottlingPolicyParameters{}
	return &this
}

// GetEnforceMaxStreams returns the EnforceMaxStreams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThrottlingPolicyParameters) GetEnforceMaxStreams() bool {
	if o == nil || o.EnforceMaxStreams.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnforceMaxStreams.Get()
}

// GetEnforceMaxStreamsOk returns a tuple with the EnforceMaxStreams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThrottlingPolicyParameters) GetEnforceMaxStreamsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnforceMaxStreams.Get(), o.EnforceMaxStreams.IsSet()
}

// HasEnforceMaxStreams returns a boolean if a field has been set.
func (o *ThrottlingPolicyParameters) HasEnforceMaxStreams() bool {
	if o != nil && o.EnforceMaxStreams.IsSet() {
		return true
	}

	return false
}

// SetEnforceMaxStreams gets a reference to the given NullableBool and assigns it to the EnforceMaxStreams field.
func (o *ThrottlingPolicyParameters) SetEnforceMaxStreams(v bool) {
	o.EnforceMaxStreams.Set(&v)
}
// SetEnforceMaxStreamsNil sets the value for EnforceMaxStreams to be an explicit nil
func (o *ThrottlingPolicyParameters) SetEnforceMaxStreamsNil() {
	o.EnforceMaxStreams.Set(nil)
}

// UnsetEnforceMaxStreams ensures that no value is present for EnforceMaxStreams, not even an explicit nil
func (o *ThrottlingPolicyParameters) UnsetEnforceMaxStreams() {
	o.EnforceMaxStreams.Unset()
}

// GetEnforceRegisteredSourceMaxBackups returns the EnforceRegisteredSourceMaxBackups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThrottlingPolicyParameters) GetEnforceRegisteredSourceMaxBackups() bool {
	if o == nil || o.EnforceRegisteredSourceMaxBackups.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnforceRegisteredSourceMaxBackups.Get()
}

// GetEnforceRegisteredSourceMaxBackupsOk returns a tuple with the EnforceRegisteredSourceMaxBackups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThrottlingPolicyParameters) GetEnforceRegisteredSourceMaxBackupsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnforceRegisteredSourceMaxBackups.Get(), o.EnforceRegisteredSourceMaxBackups.IsSet()
}

// HasEnforceRegisteredSourceMaxBackups returns a boolean if a field has been set.
func (o *ThrottlingPolicyParameters) HasEnforceRegisteredSourceMaxBackups() bool {
	if o != nil && o.EnforceRegisteredSourceMaxBackups.IsSet() {
		return true
	}

	return false
}

// SetEnforceRegisteredSourceMaxBackups gets a reference to the given NullableBool and assigns it to the EnforceRegisteredSourceMaxBackups field.
func (o *ThrottlingPolicyParameters) SetEnforceRegisteredSourceMaxBackups(v bool) {
	o.EnforceRegisteredSourceMaxBackups.Set(&v)
}
// SetEnforceRegisteredSourceMaxBackupsNil sets the value for EnforceRegisteredSourceMaxBackups to be an explicit nil
func (o *ThrottlingPolicyParameters) SetEnforceRegisteredSourceMaxBackupsNil() {
	o.EnforceRegisteredSourceMaxBackups.Set(nil)
}

// UnsetEnforceRegisteredSourceMaxBackups ensures that no value is present for EnforceRegisteredSourceMaxBackups, not even an explicit nil
func (o *ThrottlingPolicyParameters) UnsetEnforceRegisteredSourceMaxBackups() {
	o.EnforceRegisteredSourceMaxBackups.Unset()
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThrottlingPolicyParameters) GetIsEnabled() bool {
	if o == nil || o.IsEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsEnabled.Get()
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThrottlingPolicyParameters) GetIsEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsEnabled.Get(), o.IsEnabled.IsSet()
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *ThrottlingPolicyParameters) HasIsEnabled() bool {
	if o != nil && o.IsEnabled.IsSet() {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given NullableBool and assigns it to the IsEnabled field.
func (o *ThrottlingPolicyParameters) SetIsEnabled(v bool) {
	o.IsEnabled.Set(&v)
}
// SetIsEnabledNil sets the value for IsEnabled to be an explicit nil
func (o *ThrottlingPolicyParameters) SetIsEnabledNil() {
	o.IsEnabled.Set(nil)
}

// UnsetIsEnabled ensures that no value is present for IsEnabled, not even an explicit nil
func (o *ThrottlingPolicyParameters) UnsetIsEnabled() {
	o.IsEnabled.Unset()
}

// GetLatencyThresholds returns the LatencyThresholds field value if set, zero value otherwise.
func (o *ThrottlingPolicyParameters) GetLatencyThresholds() LatencyThresholds {
	if o == nil || o.LatencyThresholds == nil {
		var ret LatencyThresholds
		return ret
	}
	return *o.LatencyThresholds
}

// GetLatencyThresholdsOk returns a tuple with the LatencyThresholds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThrottlingPolicyParameters) GetLatencyThresholdsOk() (*LatencyThresholds, bool) {
	if o == nil || o.LatencyThresholds == nil {
		return nil, false
	}
	return o.LatencyThresholds, true
}

// HasLatencyThresholds returns a boolean if a field has been set.
func (o *ThrottlingPolicyParameters) HasLatencyThresholds() bool {
	if o != nil && o.LatencyThresholds != nil {
		return true
	}

	return false
}

// SetLatencyThresholds gets a reference to the given LatencyThresholds and assigns it to the LatencyThresholds field.
func (o *ThrottlingPolicyParameters) SetLatencyThresholds(v LatencyThresholds) {
	o.LatencyThresholds = &v
}

// GetMaxConcurrentStreams returns the MaxConcurrentStreams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThrottlingPolicyParameters) GetMaxConcurrentStreams() int32 {
	if o == nil || o.MaxConcurrentStreams.Get() == nil {
		var ret int32
		return ret
	}
	return *o.MaxConcurrentStreams.Get()
}

// GetMaxConcurrentStreamsOk returns a tuple with the MaxConcurrentStreams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThrottlingPolicyParameters) GetMaxConcurrentStreamsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MaxConcurrentStreams.Get(), o.MaxConcurrentStreams.IsSet()
}

// HasMaxConcurrentStreams returns a boolean if a field has been set.
func (o *ThrottlingPolicyParameters) HasMaxConcurrentStreams() bool {
	if o != nil && o.MaxConcurrentStreams.IsSet() {
		return true
	}

	return false
}

// SetMaxConcurrentStreams gets a reference to the given NullableInt32 and assigns it to the MaxConcurrentStreams field.
func (o *ThrottlingPolicyParameters) SetMaxConcurrentStreams(v int32) {
	o.MaxConcurrentStreams.Set(&v)
}
// SetMaxConcurrentStreamsNil sets the value for MaxConcurrentStreams to be an explicit nil
func (o *ThrottlingPolicyParameters) SetMaxConcurrentStreamsNil() {
	o.MaxConcurrentStreams.Set(nil)
}

// UnsetMaxConcurrentStreams ensures that no value is present for MaxConcurrentStreams, not even an explicit nil
func (o *ThrottlingPolicyParameters) UnsetMaxConcurrentStreams() {
	o.MaxConcurrentStreams.Unset()
}

// GetRegisteredSourceMaxConcurrentBackups returns the RegisteredSourceMaxConcurrentBackups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThrottlingPolicyParameters) GetRegisteredSourceMaxConcurrentBackups() int32 {
	if o == nil || o.RegisteredSourceMaxConcurrentBackups.Get() == nil {
		var ret int32
		return ret
	}
	return *o.RegisteredSourceMaxConcurrentBackups.Get()
}

// GetRegisteredSourceMaxConcurrentBackupsOk returns a tuple with the RegisteredSourceMaxConcurrentBackups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThrottlingPolicyParameters) GetRegisteredSourceMaxConcurrentBackupsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RegisteredSourceMaxConcurrentBackups.Get(), o.RegisteredSourceMaxConcurrentBackups.IsSet()
}

// HasRegisteredSourceMaxConcurrentBackups returns a boolean if a field has been set.
func (o *ThrottlingPolicyParameters) HasRegisteredSourceMaxConcurrentBackups() bool {
	if o != nil && o.RegisteredSourceMaxConcurrentBackups.IsSet() {
		return true
	}

	return false
}

// SetRegisteredSourceMaxConcurrentBackups gets a reference to the given NullableInt32 and assigns it to the RegisteredSourceMaxConcurrentBackups field.
func (o *ThrottlingPolicyParameters) SetRegisteredSourceMaxConcurrentBackups(v int32) {
	o.RegisteredSourceMaxConcurrentBackups.Set(&v)
}
// SetRegisteredSourceMaxConcurrentBackupsNil sets the value for RegisteredSourceMaxConcurrentBackups to be an explicit nil
func (o *ThrottlingPolicyParameters) SetRegisteredSourceMaxConcurrentBackupsNil() {
	o.RegisteredSourceMaxConcurrentBackups.Set(nil)
}

// UnsetRegisteredSourceMaxConcurrentBackups ensures that no value is present for RegisteredSourceMaxConcurrentBackups, not even an explicit nil
func (o *ThrottlingPolicyParameters) UnsetRegisteredSourceMaxConcurrentBackups() {
	o.RegisteredSourceMaxConcurrentBackups.Unset()
}

func (o ThrottlingPolicyParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EnforceMaxStreams.IsSet() {
		toSerialize["enforceMaxStreams"] = o.EnforceMaxStreams.Get()
	}
	if o.EnforceRegisteredSourceMaxBackups.IsSet() {
		toSerialize["enforceRegisteredSourceMaxBackups"] = o.EnforceRegisteredSourceMaxBackups.Get()
	}
	if o.IsEnabled.IsSet() {
		toSerialize["isEnabled"] = o.IsEnabled.Get()
	}
	if o.LatencyThresholds != nil {
		toSerialize["latencyThresholds"] = o.LatencyThresholds
	}
	if o.MaxConcurrentStreams.IsSet() {
		toSerialize["maxConcurrentStreams"] = o.MaxConcurrentStreams.Get()
	}
	if o.RegisteredSourceMaxConcurrentBackups.IsSet() {
		toSerialize["registeredSourceMaxConcurrentBackups"] = o.RegisteredSourceMaxConcurrentBackups.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableThrottlingPolicyParameters struct {
	value *ThrottlingPolicyParameters
	isSet bool
}

func (v NullableThrottlingPolicyParameters) Get() *ThrottlingPolicyParameters {
	return v.value
}

func (v *NullableThrottlingPolicyParameters) Set(val *ThrottlingPolicyParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableThrottlingPolicyParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableThrottlingPolicyParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThrottlingPolicyParameters(val *ThrottlingPolicyParameters) *NullableThrottlingPolicyParameters {
	return &NullableThrottlingPolicyParameters{value: val, isSet: true}
}

func (v NullableThrottlingPolicyParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThrottlingPolicyParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


