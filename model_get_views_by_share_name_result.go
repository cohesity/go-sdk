/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// GetViewsByShareNameResult Specifies the list of Views and Aliases by share name that matched the specified filter criteria.
type GetViewsByShareNameResult struct {
	// If set, i.e. there are more results to display, use this value to get the next set of results, by using this value in paginationCookie param for the next request to GetViewsByShare.
	PaginationCookie NullableString `json:"paginationCookie,omitempty"`
	// Array of Views and Aliases by Share name. Specifies the list of Views returned in this response.
	SharesList []Share `json:"sharesList,omitempty"`
}

// NewGetViewsByShareNameResult instantiates a new GetViewsByShareNameResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetViewsByShareNameResult() *GetViewsByShareNameResult {
	this := GetViewsByShareNameResult{}
	return &this
}

// NewGetViewsByShareNameResultWithDefaults instantiates a new GetViewsByShareNameResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetViewsByShareNameResultWithDefaults() *GetViewsByShareNameResult {
	this := GetViewsByShareNameResult{}
	return &this
}

// GetPaginationCookie returns the PaginationCookie field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetViewsByShareNameResult) GetPaginationCookie() string {
	if o == nil || o.PaginationCookie.Get() == nil {
		var ret string
		return ret
	}
	return *o.PaginationCookie.Get()
}

// GetPaginationCookieOk returns a tuple with the PaginationCookie field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetViewsByShareNameResult) GetPaginationCookieOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PaginationCookie.Get(), o.PaginationCookie.IsSet()
}

// HasPaginationCookie returns a boolean if a field has been set.
func (o *GetViewsByShareNameResult) HasPaginationCookie() bool {
	if o != nil && o.PaginationCookie.IsSet() {
		return true
	}

	return false
}

// SetPaginationCookie gets a reference to the given NullableString and assigns it to the PaginationCookie field.
func (o *GetViewsByShareNameResult) SetPaginationCookie(v string) {
	o.PaginationCookie.Set(&v)
}
// SetPaginationCookieNil sets the value for PaginationCookie to be an explicit nil
func (o *GetViewsByShareNameResult) SetPaginationCookieNil() {
	o.PaginationCookie.Set(nil)
}

// UnsetPaginationCookie ensures that no value is present for PaginationCookie, not even an explicit nil
func (o *GetViewsByShareNameResult) UnsetPaginationCookie() {
	o.PaginationCookie.Unset()
}

// GetSharesList returns the SharesList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetViewsByShareNameResult) GetSharesList() []Share {
	if o == nil  {
		var ret []Share
		return ret
	}
	return o.SharesList
}

// GetSharesListOk returns a tuple with the SharesList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetViewsByShareNameResult) GetSharesListOk() (*[]Share, bool) {
	if o == nil || o.SharesList == nil {
		return nil, false
	}
	return &o.SharesList, true
}

// HasSharesList returns a boolean if a field has been set.
func (o *GetViewsByShareNameResult) HasSharesList() bool {
	if o != nil && o.SharesList != nil {
		return true
	}

	return false
}

// SetSharesList gets a reference to the given []Share and assigns it to the SharesList field.
func (o *GetViewsByShareNameResult) SetSharesList(v []Share) {
	o.SharesList = v
}

func (o GetViewsByShareNameResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PaginationCookie.IsSet() {
		toSerialize["paginationCookie"] = o.PaginationCookie.Get()
	}
	if o.SharesList != nil {
		toSerialize["sharesList"] = o.SharesList
	}
	return json.Marshal(toSerialize)
}

type NullableGetViewsByShareNameResult struct {
	value *GetViewsByShareNameResult
	isSet bool
}

func (v NullableGetViewsByShareNameResult) Get() *GetViewsByShareNameResult {
	return v.value
}

func (v *NullableGetViewsByShareNameResult) Set(val *GetViewsByShareNameResult) {
	v.value = val
	v.isSet = true
}

func (v NullableGetViewsByShareNameResult) IsSet() bool {
	return v.isSet
}

func (v *NullableGetViewsByShareNameResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetViewsByShareNameResult(val *GetViewsByShareNameResult) *NullableGetViewsByShareNameResult {
	return &NullableGetViewsByShareNameResult{value: val, isSet: true}
}

func (v NullableGetViewsByShareNameResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetViewsByShareNameResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


