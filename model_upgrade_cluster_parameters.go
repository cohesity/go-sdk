/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// UpgradeClusterParameters Specifies the parameters needed for a Cluster Upgrade request.
type UpgradeClusterParameters struct {
	// Specifies the target software version. If specified, all Nodes on the Cluster will be searched to see if they have had the specified software package uploaded to them. If the specified package is found, then it will be used for the upgrade.
	TargetSwVersion NullableString `json:"targetSwVersion"`
}

// NewUpgradeClusterParameters instantiates a new UpgradeClusterParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpgradeClusterParameters(targetSwVersion NullableString) *UpgradeClusterParameters {
	this := UpgradeClusterParameters{}
	this.TargetSwVersion = targetSwVersion
	return &this
}

// NewUpgradeClusterParametersWithDefaults instantiates a new UpgradeClusterParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpgradeClusterParametersWithDefaults() *UpgradeClusterParameters {
	this := UpgradeClusterParameters{}
	return &this
}

// GetTargetSwVersion returns the TargetSwVersion field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UpgradeClusterParameters) GetTargetSwVersion() string {
	if o == nil || o.TargetSwVersion.Get() == nil {
		var ret string
		return ret
	}

	return *o.TargetSwVersion.Get()
}

// GetTargetSwVersionOk returns a tuple with the TargetSwVersion field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradeClusterParameters) GetTargetSwVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetSwVersion.Get(), o.TargetSwVersion.IsSet()
}

// SetTargetSwVersion sets field value
func (o *UpgradeClusterParameters) SetTargetSwVersion(v string) {
	o.TargetSwVersion.Set(&v)
}

func (o UpgradeClusterParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["targetSwVersion"] = o.TargetSwVersion.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUpgradeClusterParameters struct {
	value *UpgradeClusterParameters
	isSet bool
}

func (v NullableUpgradeClusterParameters) Get() *UpgradeClusterParameters {
	return v.value
}

func (v *NullableUpgradeClusterParameters) Set(val *UpgradeClusterParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableUpgradeClusterParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableUpgradeClusterParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpgradeClusterParameters(val *UpgradeClusterParameters) *NullableUpgradeClusterParameters {
	return &NullableUpgradeClusterParameters{value: val, isSet: true}
}

func (v NullableUpgradeClusterParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpgradeClusterParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


