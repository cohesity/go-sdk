/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// PhysicalSpecialParameters Specifies additional special settings applicable for a Protection Source of 'kPhysical' type in a Protection Job.
type PhysicalSpecialParameters struct {
	ApplicationParameters *ApplicationParameters `json:"applicationParameters,omitempty"`
	// Specifies whether to allow system backup using 3rd party tools installed on the Protection Host. System backups are used for doing bare metal recovery later. This field is applicable only for System backups.
	EnableSystemBackup NullableBool `json:"enableSystemBackup,omitempty"`
	// Array of File Paths to Back Up.  Specifies a list of directories or files to protect in a Physical Server.
	FilePaths []FilePathParameters `json:"filePaths,omitempty"`
	// Specifies metadata path on source. This file contains absolute paths of files that needs to be backed up on the same source.
	MetadataFilePath NullableString `json:"metadataFilePath,omitempty"`
	// Specifies mounttypes of nested volumes to be skipped.
	SkipNestedVolumesVec []string `json:"skipNestedVolumesVec,omitempty"`
	// Specifies whether to use SkipNestedVolumes vec to skip nested mounts.
	UsesSkipNestedVolumesVec NullableBool `json:"usesSkipNestedVolumesVec,omitempty"`
	// Array of Mounted Volumes to Back Up.  Specifies the subset of mounted volumes to protect in a Physical Server. If not specified, all mounted volumes on a Physical Server are protected.
	VolumeGuid []string `json:"volumeGuid,omitempty"`
	WindowsParameters *WindowsHostSnapshotParameters `json:"windowsParameters,omitempty"`
}

// NewPhysicalSpecialParameters instantiates a new PhysicalSpecialParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhysicalSpecialParameters() *PhysicalSpecialParameters {
	this := PhysicalSpecialParameters{}
	return &this
}

// NewPhysicalSpecialParametersWithDefaults instantiates a new PhysicalSpecialParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhysicalSpecialParametersWithDefaults() *PhysicalSpecialParameters {
	this := PhysicalSpecialParameters{}
	return &this
}

// GetApplicationParameters returns the ApplicationParameters field value if set, zero value otherwise.
func (o *PhysicalSpecialParameters) GetApplicationParameters() ApplicationParameters {
	if o == nil || o.ApplicationParameters == nil {
		var ret ApplicationParameters
		return ret
	}
	return *o.ApplicationParameters
}

// GetApplicationParametersOk returns a tuple with the ApplicationParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalSpecialParameters) GetApplicationParametersOk() (*ApplicationParameters, bool) {
	if o == nil || o.ApplicationParameters == nil {
		return nil, false
	}
	return o.ApplicationParameters, true
}

// HasApplicationParameters returns a boolean if a field has been set.
func (o *PhysicalSpecialParameters) HasApplicationParameters() bool {
	if o != nil && o.ApplicationParameters != nil {
		return true
	}

	return false
}

// SetApplicationParameters gets a reference to the given ApplicationParameters and assigns it to the ApplicationParameters field.
func (o *PhysicalSpecialParameters) SetApplicationParameters(v ApplicationParameters) {
	o.ApplicationParameters = &v
}

// GetEnableSystemBackup returns the EnableSystemBackup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalSpecialParameters) GetEnableSystemBackup() bool {
	if o == nil || o.EnableSystemBackup.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableSystemBackup.Get()
}

// GetEnableSystemBackupOk returns a tuple with the EnableSystemBackup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalSpecialParameters) GetEnableSystemBackupOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableSystemBackup.Get(), o.EnableSystemBackup.IsSet()
}

// HasEnableSystemBackup returns a boolean if a field has been set.
func (o *PhysicalSpecialParameters) HasEnableSystemBackup() bool {
	if o != nil && o.EnableSystemBackup.IsSet() {
		return true
	}

	return false
}

// SetEnableSystemBackup gets a reference to the given NullableBool and assigns it to the EnableSystemBackup field.
func (o *PhysicalSpecialParameters) SetEnableSystemBackup(v bool) {
	o.EnableSystemBackup.Set(&v)
}
// SetEnableSystemBackupNil sets the value for EnableSystemBackup to be an explicit nil
func (o *PhysicalSpecialParameters) SetEnableSystemBackupNil() {
	o.EnableSystemBackup.Set(nil)
}

// UnsetEnableSystemBackup ensures that no value is present for EnableSystemBackup, not even an explicit nil
func (o *PhysicalSpecialParameters) UnsetEnableSystemBackup() {
	o.EnableSystemBackup.Unset()
}

// GetFilePaths returns the FilePaths field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalSpecialParameters) GetFilePaths() []FilePathParameters {
	if o == nil  {
		var ret []FilePathParameters
		return ret
	}
	return o.FilePaths
}

// GetFilePathsOk returns a tuple with the FilePaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalSpecialParameters) GetFilePathsOk() (*[]FilePathParameters, bool) {
	if o == nil || o.FilePaths == nil {
		return nil, false
	}
	return &o.FilePaths, true
}

// HasFilePaths returns a boolean if a field has been set.
func (o *PhysicalSpecialParameters) HasFilePaths() bool {
	if o != nil && o.FilePaths != nil {
		return true
	}

	return false
}

// SetFilePaths gets a reference to the given []FilePathParameters and assigns it to the FilePaths field.
func (o *PhysicalSpecialParameters) SetFilePaths(v []FilePathParameters) {
	o.FilePaths = v
}

// GetMetadataFilePath returns the MetadataFilePath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalSpecialParameters) GetMetadataFilePath() string {
	if o == nil || o.MetadataFilePath.Get() == nil {
		var ret string
		return ret
	}
	return *o.MetadataFilePath.Get()
}

// GetMetadataFilePathOk returns a tuple with the MetadataFilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalSpecialParameters) GetMetadataFilePathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MetadataFilePath.Get(), o.MetadataFilePath.IsSet()
}

// HasMetadataFilePath returns a boolean if a field has been set.
func (o *PhysicalSpecialParameters) HasMetadataFilePath() bool {
	if o != nil && o.MetadataFilePath.IsSet() {
		return true
	}

	return false
}

// SetMetadataFilePath gets a reference to the given NullableString and assigns it to the MetadataFilePath field.
func (o *PhysicalSpecialParameters) SetMetadataFilePath(v string) {
	o.MetadataFilePath.Set(&v)
}
// SetMetadataFilePathNil sets the value for MetadataFilePath to be an explicit nil
func (o *PhysicalSpecialParameters) SetMetadataFilePathNil() {
	o.MetadataFilePath.Set(nil)
}

// UnsetMetadataFilePath ensures that no value is present for MetadataFilePath, not even an explicit nil
func (o *PhysicalSpecialParameters) UnsetMetadataFilePath() {
	o.MetadataFilePath.Unset()
}

// GetSkipNestedVolumesVec returns the SkipNestedVolumesVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalSpecialParameters) GetSkipNestedVolumesVec() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.SkipNestedVolumesVec
}

// GetSkipNestedVolumesVecOk returns a tuple with the SkipNestedVolumesVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalSpecialParameters) GetSkipNestedVolumesVecOk() (*[]string, bool) {
	if o == nil || o.SkipNestedVolumesVec == nil {
		return nil, false
	}
	return &o.SkipNestedVolumesVec, true
}

// HasSkipNestedVolumesVec returns a boolean if a field has been set.
func (o *PhysicalSpecialParameters) HasSkipNestedVolumesVec() bool {
	if o != nil && o.SkipNestedVolumesVec != nil {
		return true
	}

	return false
}

// SetSkipNestedVolumesVec gets a reference to the given []string and assigns it to the SkipNestedVolumesVec field.
func (o *PhysicalSpecialParameters) SetSkipNestedVolumesVec(v []string) {
	o.SkipNestedVolumesVec = v
}

// GetUsesSkipNestedVolumesVec returns the UsesSkipNestedVolumesVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalSpecialParameters) GetUsesSkipNestedVolumesVec() bool {
	if o == nil || o.UsesSkipNestedVolumesVec.Get() == nil {
		var ret bool
		return ret
	}
	return *o.UsesSkipNestedVolumesVec.Get()
}

// GetUsesSkipNestedVolumesVecOk returns a tuple with the UsesSkipNestedVolumesVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalSpecialParameters) GetUsesSkipNestedVolumesVecOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UsesSkipNestedVolumesVec.Get(), o.UsesSkipNestedVolumesVec.IsSet()
}

// HasUsesSkipNestedVolumesVec returns a boolean if a field has been set.
func (o *PhysicalSpecialParameters) HasUsesSkipNestedVolumesVec() bool {
	if o != nil && o.UsesSkipNestedVolumesVec.IsSet() {
		return true
	}

	return false
}

// SetUsesSkipNestedVolumesVec gets a reference to the given NullableBool and assigns it to the UsesSkipNestedVolumesVec field.
func (o *PhysicalSpecialParameters) SetUsesSkipNestedVolumesVec(v bool) {
	o.UsesSkipNestedVolumesVec.Set(&v)
}
// SetUsesSkipNestedVolumesVecNil sets the value for UsesSkipNestedVolumesVec to be an explicit nil
func (o *PhysicalSpecialParameters) SetUsesSkipNestedVolumesVecNil() {
	o.UsesSkipNestedVolumesVec.Set(nil)
}

// UnsetUsesSkipNestedVolumesVec ensures that no value is present for UsesSkipNestedVolumesVec, not even an explicit nil
func (o *PhysicalSpecialParameters) UnsetUsesSkipNestedVolumesVec() {
	o.UsesSkipNestedVolumesVec.Unset()
}

// GetVolumeGuid returns the VolumeGuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalSpecialParameters) GetVolumeGuid() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.VolumeGuid
}

// GetVolumeGuidOk returns a tuple with the VolumeGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalSpecialParameters) GetVolumeGuidOk() (*[]string, bool) {
	if o == nil || o.VolumeGuid == nil {
		return nil, false
	}
	return &o.VolumeGuid, true
}

// HasVolumeGuid returns a boolean if a field has been set.
func (o *PhysicalSpecialParameters) HasVolumeGuid() bool {
	if o != nil && o.VolumeGuid != nil {
		return true
	}

	return false
}

// SetVolumeGuid gets a reference to the given []string and assigns it to the VolumeGuid field.
func (o *PhysicalSpecialParameters) SetVolumeGuid(v []string) {
	o.VolumeGuid = v
}

// GetWindowsParameters returns the WindowsParameters field value if set, zero value otherwise.
func (o *PhysicalSpecialParameters) GetWindowsParameters() WindowsHostSnapshotParameters {
	if o == nil || o.WindowsParameters == nil {
		var ret WindowsHostSnapshotParameters
		return ret
	}
	return *o.WindowsParameters
}

// GetWindowsParametersOk returns a tuple with the WindowsParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalSpecialParameters) GetWindowsParametersOk() (*WindowsHostSnapshotParameters, bool) {
	if o == nil || o.WindowsParameters == nil {
		return nil, false
	}
	return o.WindowsParameters, true
}

// HasWindowsParameters returns a boolean if a field has been set.
func (o *PhysicalSpecialParameters) HasWindowsParameters() bool {
	if o != nil && o.WindowsParameters != nil {
		return true
	}

	return false
}

// SetWindowsParameters gets a reference to the given WindowsHostSnapshotParameters and assigns it to the WindowsParameters field.
func (o *PhysicalSpecialParameters) SetWindowsParameters(v WindowsHostSnapshotParameters) {
	o.WindowsParameters = &v
}

func (o PhysicalSpecialParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApplicationParameters != nil {
		toSerialize["applicationParameters"] = o.ApplicationParameters
	}
	if o.EnableSystemBackup.IsSet() {
		toSerialize["enableSystemBackup"] = o.EnableSystemBackup.Get()
	}
	if o.FilePaths != nil {
		toSerialize["filePaths"] = o.FilePaths
	}
	if o.MetadataFilePath.IsSet() {
		toSerialize["metadataFilePath"] = o.MetadataFilePath.Get()
	}
	if o.SkipNestedVolumesVec != nil {
		toSerialize["skipNestedVolumesVec"] = o.SkipNestedVolumesVec
	}
	if o.UsesSkipNestedVolumesVec.IsSet() {
		toSerialize["usesSkipNestedVolumesVec"] = o.UsesSkipNestedVolumesVec.Get()
	}
	if o.VolumeGuid != nil {
		toSerialize["volumeGuid"] = o.VolumeGuid
	}
	if o.WindowsParameters != nil {
		toSerialize["windowsParameters"] = o.WindowsParameters
	}
	return json.Marshal(toSerialize)
}

type NullablePhysicalSpecialParameters struct {
	value *PhysicalSpecialParameters
	isSet bool
}

func (v NullablePhysicalSpecialParameters) Get() *PhysicalSpecialParameters {
	return v.value
}

func (v *NullablePhysicalSpecialParameters) Set(val *PhysicalSpecialParameters) {
	v.value = val
	v.isSet = true
}

func (v NullablePhysicalSpecialParameters) IsSet() bool {
	return v.isSet
}

func (v *NullablePhysicalSpecialParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhysicalSpecialParameters(val *PhysicalSpecialParameters) *NullablePhysicalSpecialParameters {
	return &NullablePhysicalSpecialParameters{value: val, isSet: true}
}

func (v NullablePhysicalSpecialParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhysicalSpecialParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


