/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// SourceSpecialParameter Specifies additional special settings for a single Source in a Protection Job. This Source must be a leaf node in the Source tree.
type SourceSpecialParameter struct {
	AdSpecialParameters *ApplicationSpecialParameters `json:"adSpecialParameters,omitempty"`
	ExchangeSpecialParameters *ApplicationSpecialParameters `json:"exchangeSpecialParameters,omitempty"`
	OracleSpecialParameters *OracleSpecialParameters `json:"oracleSpecialParameters,omitempty"`
	PhysicalSpecialParameters *PhysicalSpecialParameters `json:"physicalSpecialParameters,omitempty"`
	// Specifies not to index the objects in the Protection Source when backing up.
	SkipIndexing NullableBool `json:"skipIndexing,omitempty"`
	// Specifies the object id of the Protection Source that these special settings apply. This field must refer to a leaf node such a VM or a Physical Server.
	SourceId NullableInt64 `json:"sourceId,omitempty"`
	SqlSpecialParameters *ApplicationSpecialParameters `json:"sqlSpecialParameters,omitempty"`
	// If true, after the Cohesity Cluster successfully captures a Snapshot during a Job Run, the Cluster truncates the Exchange transaction logs on a Microsoft Exchange Server. The default value is false. This field is deprecated. Use the field in ApplicationParameters inside source specific parameter. deprecated: true
	TruncateExchangeLog NullableBool `json:"truncateExchangeLog,omitempty"`
	// Specifies the administrator credentials to log in to the guest Windows system of a VM that hosts the Microsoft Exchange Server. If truncateExchangeLog is set to true and the specified source is a VM, administrator credentials to log in to the guest Windows system of the VM must be provided to truncate the logs. This field is only applicable to Sources in the kVMware environment. This field is deprecated. Use the field in VmCredentials inside source specific parameter. deprecated: true
	VmCredentials NullableCredentials `json:"vmCredentials,omitempty"`
	VmwareSpecialParameters *VmwareSpecialParameters `json:"vmwareSpecialParameters,omitempty"`
}

// NewSourceSpecialParameter instantiates a new SourceSpecialParameter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceSpecialParameter() *SourceSpecialParameter {
	this := SourceSpecialParameter{}
	return &this
}

// NewSourceSpecialParameterWithDefaults instantiates a new SourceSpecialParameter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceSpecialParameterWithDefaults() *SourceSpecialParameter {
	this := SourceSpecialParameter{}
	return &this
}

// GetAdSpecialParameters returns the AdSpecialParameters field value if set, zero value otherwise.
func (o *SourceSpecialParameter) GetAdSpecialParameters() ApplicationSpecialParameters {
	if o == nil || o.AdSpecialParameters == nil {
		var ret ApplicationSpecialParameters
		return ret
	}
	return *o.AdSpecialParameters
}

// GetAdSpecialParametersOk returns a tuple with the AdSpecialParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceSpecialParameter) GetAdSpecialParametersOk() (*ApplicationSpecialParameters, bool) {
	if o == nil || o.AdSpecialParameters == nil {
		return nil, false
	}
	return o.AdSpecialParameters, true
}

// HasAdSpecialParameters returns a boolean if a field has been set.
func (o *SourceSpecialParameter) HasAdSpecialParameters() bool {
	if o != nil && o.AdSpecialParameters != nil {
		return true
	}

	return false
}

// SetAdSpecialParameters gets a reference to the given ApplicationSpecialParameters and assigns it to the AdSpecialParameters field.
func (o *SourceSpecialParameter) SetAdSpecialParameters(v ApplicationSpecialParameters) {
	o.AdSpecialParameters = &v
}

// GetExchangeSpecialParameters returns the ExchangeSpecialParameters field value if set, zero value otherwise.
func (o *SourceSpecialParameter) GetExchangeSpecialParameters() ApplicationSpecialParameters {
	if o == nil || o.ExchangeSpecialParameters == nil {
		var ret ApplicationSpecialParameters
		return ret
	}
	return *o.ExchangeSpecialParameters
}

// GetExchangeSpecialParametersOk returns a tuple with the ExchangeSpecialParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceSpecialParameter) GetExchangeSpecialParametersOk() (*ApplicationSpecialParameters, bool) {
	if o == nil || o.ExchangeSpecialParameters == nil {
		return nil, false
	}
	return o.ExchangeSpecialParameters, true
}

// HasExchangeSpecialParameters returns a boolean if a field has been set.
func (o *SourceSpecialParameter) HasExchangeSpecialParameters() bool {
	if o != nil && o.ExchangeSpecialParameters != nil {
		return true
	}

	return false
}

// SetExchangeSpecialParameters gets a reference to the given ApplicationSpecialParameters and assigns it to the ExchangeSpecialParameters field.
func (o *SourceSpecialParameter) SetExchangeSpecialParameters(v ApplicationSpecialParameters) {
	o.ExchangeSpecialParameters = &v
}

// GetOracleSpecialParameters returns the OracleSpecialParameters field value if set, zero value otherwise.
func (o *SourceSpecialParameter) GetOracleSpecialParameters() OracleSpecialParameters {
	if o == nil || o.OracleSpecialParameters == nil {
		var ret OracleSpecialParameters
		return ret
	}
	return *o.OracleSpecialParameters
}

// GetOracleSpecialParametersOk returns a tuple with the OracleSpecialParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceSpecialParameter) GetOracleSpecialParametersOk() (*OracleSpecialParameters, bool) {
	if o == nil || o.OracleSpecialParameters == nil {
		return nil, false
	}
	return o.OracleSpecialParameters, true
}

// HasOracleSpecialParameters returns a boolean if a field has been set.
func (o *SourceSpecialParameter) HasOracleSpecialParameters() bool {
	if o != nil && o.OracleSpecialParameters != nil {
		return true
	}

	return false
}

// SetOracleSpecialParameters gets a reference to the given OracleSpecialParameters and assigns it to the OracleSpecialParameters field.
func (o *SourceSpecialParameter) SetOracleSpecialParameters(v OracleSpecialParameters) {
	o.OracleSpecialParameters = &v
}

// GetPhysicalSpecialParameters returns the PhysicalSpecialParameters field value if set, zero value otherwise.
func (o *SourceSpecialParameter) GetPhysicalSpecialParameters() PhysicalSpecialParameters {
	if o == nil || o.PhysicalSpecialParameters == nil {
		var ret PhysicalSpecialParameters
		return ret
	}
	return *o.PhysicalSpecialParameters
}

// GetPhysicalSpecialParametersOk returns a tuple with the PhysicalSpecialParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceSpecialParameter) GetPhysicalSpecialParametersOk() (*PhysicalSpecialParameters, bool) {
	if o == nil || o.PhysicalSpecialParameters == nil {
		return nil, false
	}
	return o.PhysicalSpecialParameters, true
}

// HasPhysicalSpecialParameters returns a boolean if a field has been set.
func (o *SourceSpecialParameter) HasPhysicalSpecialParameters() bool {
	if o != nil && o.PhysicalSpecialParameters != nil {
		return true
	}

	return false
}

// SetPhysicalSpecialParameters gets a reference to the given PhysicalSpecialParameters and assigns it to the PhysicalSpecialParameters field.
func (o *SourceSpecialParameter) SetPhysicalSpecialParameters(v PhysicalSpecialParameters) {
	o.PhysicalSpecialParameters = &v
}

// GetSkipIndexing returns the SkipIndexing field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceSpecialParameter) GetSkipIndexing() bool {
	if o == nil || o.SkipIndexing.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SkipIndexing.Get()
}

// GetSkipIndexingOk returns a tuple with the SkipIndexing field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceSpecialParameter) GetSkipIndexingOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SkipIndexing.Get(), o.SkipIndexing.IsSet()
}

// HasSkipIndexing returns a boolean if a field has been set.
func (o *SourceSpecialParameter) HasSkipIndexing() bool {
	if o != nil && o.SkipIndexing.IsSet() {
		return true
	}

	return false
}

// SetSkipIndexing gets a reference to the given NullableBool and assigns it to the SkipIndexing field.
func (o *SourceSpecialParameter) SetSkipIndexing(v bool) {
	o.SkipIndexing.Set(&v)
}
// SetSkipIndexingNil sets the value for SkipIndexing to be an explicit nil
func (o *SourceSpecialParameter) SetSkipIndexingNil() {
	o.SkipIndexing.Set(nil)
}

// UnsetSkipIndexing ensures that no value is present for SkipIndexing, not even an explicit nil
func (o *SourceSpecialParameter) UnsetSkipIndexing() {
	o.SkipIndexing.Unset()
}

// GetSourceId returns the SourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceSpecialParameter) GetSourceId() int64 {
	if o == nil || o.SourceId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SourceId.Get()
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceSpecialParameter) GetSourceIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceId.Get(), o.SourceId.IsSet()
}

// HasSourceId returns a boolean if a field has been set.
func (o *SourceSpecialParameter) HasSourceId() bool {
	if o != nil && o.SourceId.IsSet() {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given NullableInt64 and assigns it to the SourceId field.
func (o *SourceSpecialParameter) SetSourceId(v int64) {
	o.SourceId.Set(&v)
}
// SetSourceIdNil sets the value for SourceId to be an explicit nil
func (o *SourceSpecialParameter) SetSourceIdNil() {
	o.SourceId.Set(nil)
}

// UnsetSourceId ensures that no value is present for SourceId, not even an explicit nil
func (o *SourceSpecialParameter) UnsetSourceId() {
	o.SourceId.Unset()
}

// GetSqlSpecialParameters returns the SqlSpecialParameters field value if set, zero value otherwise.
func (o *SourceSpecialParameter) GetSqlSpecialParameters() ApplicationSpecialParameters {
	if o == nil || o.SqlSpecialParameters == nil {
		var ret ApplicationSpecialParameters
		return ret
	}
	return *o.SqlSpecialParameters
}

// GetSqlSpecialParametersOk returns a tuple with the SqlSpecialParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceSpecialParameter) GetSqlSpecialParametersOk() (*ApplicationSpecialParameters, bool) {
	if o == nil || o.SqlSpecialParameters == nil {
		return nil, false
	}
	return o.SqlSpecialParameters, true
}

// HasSqlSpecialParameters returns a boolean if a field has been set.
func (o *SourceSpecialParameter) HasSqlSpecialParameters() bool {
	if o != nil && o.SqlSpecialParameters != nil {
		return true
	}

	return false
}

// SetSqlSpecialParameters gets a reference to the given ApplicationSpecialParameters and assigns it to the SqlSpecialParameters field.
func (o *SourceSpecialParameter) SetSqlSpecialParameters(v ApplicationSpecialParameters) {
	o.SqlSpecialParameters = &v
}

// GetTruncateExchangeLog returns the TruncateExchangeLog field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceSpecialParameter) GetTruncateExchangeLog() bool {
	if o == nil || o.TruncateExchangeLog.Get() == nil {
		var ret bool
		return ret
	}
	return *o.TruncateExchangeLog.Get()
}

// GetTruncateExchangeLogOk returns a tuple with the TruncateExchangeLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceSpecialParameter) GetTruncateExchangeLogOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TruncateExchangeLog.Get(), o.TruncateExchangeLog.IsSet()
}

// HasTruncateExchangeLog returns a boolean if a field has been set.
func (o *SourceSpecialParameter) HasTruncateExchangeLog() bool {
	if o != nil && o.TruncateExchangeLog.IsSet() {
		return true
	}

	return false
}

// SetTruncateExchangeLog gets a reference to the given NullableBool and assigns it to the TruncateExchangeLog field.
func (o *SourceSpecialParameter) SetTruncateExchangeLog(v bool) {
	o.TruncateExchangeLog.Set(&v)
}
// SetTruncateExchangeLogNil sets the value for TruncateExchangeLog to be an explicit nil
func (o *SourceSpecialParameter) SetTruncateExchangeLogNil() {
	o.TruncateExchangeLog.Set(nil)
}

// UnsetTruncateExchangeLog ensures that no value is present for TruncateExchangeLog, not even an explicit nil
func (o *SourceSpecialParameter) UnsetTruncateExchangeLog() {
	o.TruncateExchangeLog.Unset()
}

// GetVmCredentials returns the VmCredentials field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceSpecialParameter) GetVmCredentials() Credentials {
	if o == nil || o.VmCredentials.Get() == nil {
		var ret Credentials
		return ret
	}
	return *o.VmCredentials.Get()
}

// GetVmCredentialsOk returns a tuple with the VmCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceSpecialParameter) GetVmCredentialsOk() (*Credentials, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VmCredentials.Get(), o.VmCredentials.IsSet()
}

// HasVmCredentials returns a boolean if a field has been set.
func (o *SourceSpecialParameter) HasVmCredentials() bool {
	if o != nil && o.VmCredentials.IsSet() {
		return true
	}

	return false
}

// SetVmCredentials gets a reference to the given NullableCredentials and assigns it to the VmCredentials field.
func (o *SourceSpecialParameter) SetVmCredentials(v Credentials) {
	o.VmCredentials.Set(&v)
}
// SetVmCredentialsNil sets the value for VmCredentials to be an explicit nil
func (o *SourceSpecialParameter) SetVmCredentialsNil() {
	o.VmCredentials.Set(nil)
}

// UnsetVmCredentials ensures that no value is present for VmCredentials, not even an explicit nil
func (o *SourceSpecialParameter) UnsetVmCredentials() {
	o.VmCredentials.Unset()
}

// GetVmwareSpecialParameters returns the VmwareSpecialParameters field value if set, zero value otherwise.
func (o *SourceSpecialParameter) GetVmwareSpecialParameters() VmwareSpecialParameters {
	if o == nil || o.VmwareSpecialParameters == nil {
		var ret VmwareSpecialParameters
		return ret
	}
	return *o.VmwareSpecialParameters
}

// GetVmwareSpecialParametersOk returns a tuple with the VmwareSpecialParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceSpecialParameter) GetVmwareSpecialParametersOk() (*VmwareSpecialParameters, bool) {
	if o == nil || o.VmwareSpecialParameters == nil {
		return nil, false
	}
	return o.VmwareSpecialParameters, true
}

// HasVmwareSpecialParameters returns a boolean if a field has been set.
func (o *SourceSpecialParameter) HasVmwareSpecialParameters() bool {
	if o != nil && o.VmwareSpecialParameters != nil {
		return true
	}

	return false
}

// SetVmwareSpecialParameters gets a reference to the given VmwareSpecialParameters and assigns it to the VmwareSpecialParameters field.
func (o *SourceSpecialParameter) SetVmwareSpecialParameters(v VmwareSpecialParameters) {
	o.VmwareSpecialParameters = &v
}

func (o SourceSpecialParameter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AdSpecialParameters != nil {
		toSerialize["adSpecialParameters"] = o.AdSpecialParameters
	}
	if o.ExchangeSpecialParameters != nil {
		toSerialize["exchangeSpecialParameters"] = o.ExchangeSpecialParameters
	}
	if o.OracleSpecialParameters != nil {
		toSerialize["oracleSpecialParameters"] = o.OracleSpecialParameters
	}
	if o.PhysicalSpecialParameters != nil {
		toSerialize["physicalSpecialParameters"] = o.PhysicalSpecialParameters
	}
	if o.SkipIndexing.IsSet() {
		toSerialize["skipIndexing"] = o.SkipIndexing.Get()
	}
	if o.SourceId.IsSet() {
		toSerialize["sourceId"] = o.SourceId.Get()
	}
	if o.SqlSpecialParameters != nil {
		toSerialize["sqlSpecialParameters"] = o.SqlSpecialParameters
	}
	if o.TruncateExchangeLog.IsSet() {
		toSerialize["truncateExchangeLog"] = o.TruncateExchangeLog.Get()
	}
	if o.VmCredentials.IsSet() {
		toSerialize["vmCredentials"] = o.VmCredentials.Get()
	}
	if o.VmwareSpecialParameters != nil {
		toSerialize["vmwareSpecialParameters"] = o.VmwareSpecialParameters
	}
	return json.Marshal(toSerialize)
}

type NullableSourceSpecialParameter struct {
	value *SourceSpecialParameter
	isSet bool
}

func (v NullableSourceSpecialParameter) Get() *SourceSpecialParameter {
	return v.value
}

func (v *NullableSourceSpecialParameter) Set(val *SourceSpecialParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceSpecialParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceSpecialParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceSpecialParameter(val *SourceSpecialParameter) *NullableSourceSpecialParameter {
	return &NullableSourceSpecialParameter{value: val, isSet: true}
}

func (v NullableSourceSpecialParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceSpecialParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


