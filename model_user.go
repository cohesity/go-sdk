/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// User Specifies details about a user.
type User struct {
	// Array of Additional Groups.  Specifies the names of additional groups this User may belong to.
	AdditionalGroupNames []string `json:"additionalGroupNames,omitempty"`
	// Specifies the authentication type of the user. 'kAuthLocal' implies authenticated user is a local user. 'kAuthAd' implies authenticated user is an Active Directory user. 'kAuthSalesforce' implies authenticated user is a Salesforce user. 'kAuthGoogle' implies authenticated user is a Google user. 'kAuthSso' implies authenticated user is an SSO user.
	AuthenticationType NullableString `json:"authenticationType,omitempty"`
	// Specifies the list of clusters this user has access to. If this is not specified, access will be granted to all clusters.
	ClusterIdentifiers []ClusterIdentifier `json:"clusterIdentifiers,omitempty"`
	// Specifies the epoch time in milliseconds when the user account was created on the Cohesity Cluster.
	CreatedTimeMsecs NullableInt64 `json:"createdTimeMsecs,omitempty"`
	// Specifies a description about the user.
	Description NullableString `json:"description,omitempty"`
	// Specifies the fully qualified domain name (FQDN) of an Active Directory or LOCAL for the default LOCAL domain on the Cohesity Cluster. A user is uniquely identified by combination of the username and the domain.
	Domain NullableString `json:"domain,omitempty"`
	// Specifies the epoch time in milliseconds when the user becomes effective. Until that time, the user cannot log in.
	EffectiveTimeMsecs NullableInt64 `json:"effectiveTimeMsecs,omitempty"`
	// Specifies the email address of the user.
	EmailAddress NullableString `json:"emailAddress,omitempty"`
	// Specifies the epoch time in milliseconds when the user becomes expired. After that, the user cannot log in.
	ExpiredTimeMsecs NullableInt64 `json:"expiredTimeMsecs,omitempty"`
	// Specifies whether to force user to change password.
	ForcePasswordChange NullableBool `json:"forcePasswordChange,omitempty"`
	GoogleAccount *GoogleAccountInfo `json:"googleAccount,omitempty"`
	// Specifies the Cohesity roles to associate with the user' group. These roles can only be edited from group.
	GroupRoles []string `json:"groupRoles,omitempty"`
	IdpUserInfo *IdpUserInfo `json:"idpUserInfo,omitempty"`
	// Specifies the epoch time in milliseconds when the user account was last modified on the Cohesity Cluster.
	LastUpdatedTimeMsecs NullableInt64 `json:"lastUpdatedTimeMsecs,omitempty"`
	// OrgMembership contains the list of all available tenantIds for this user to switch to. Only when creating the session user, this field is populated on the fly. We discover the tenantIds from various groups assigned to the users.
	OrgMembership []TenantConfig `json:"orgMembership,omitempty"`
	// Specifies the password of this user.
	Password NullableString `json:"password,omitempty"`
	Preferences *Preferences `json:"preferences,omitempty"`
	// Specifies the name of the primary group of this User.
	PrimaryGroupName NullableString `json:"primaryGroupName,omitempty"`
	// Array of Privileges.  Specifies the Cohesity privileges from the roles. This will be populated based on the union of all privileges in roles. Type for unique privilege Id values. All below enum values specify a value for all uniquely defined privileges in Cohesity.
	PrivilegeIds []string `json:"privilegeIds,omitempty"`
	// Whether the user is a restricted user. A restricted user can only view the objects he has permissions to.
	Restricted NullableBool `json:"restricted,omitempty"`
	// Array of Roles.  Specifies the Cohesity roles to associate with the user such as such as 'Admin', 'Ops' or 'View'. The Cohesity roles determine privileges on the Cohesity Cluster for this user.
	Roles []string `json:"roles,omitempty"`
	// Specifies the S3 Account Access Key ID.
	S3AccessKeyId NullableString `json:"s3AccessKeyId,omitempty"`
	// Specifies the S3 Account Canonical User ID.
	S3AccountId NullableString `json:"s3AccountId,omitempty"`
	// Specifies the S3 Account Secret Key.
	S3SecretKey NullableString `json:"s3SecretKey,omitempty"`
	SalesforceAccount *SalesforceAccountInfo `json:"salesforceAccount,omitempty"`
	// Specifies the unique Security ID (SID) of the user. This field is mandatory in modifying user.
	Sid NullableString `json:"sid,omitempty"`
	// Specifies the effective Tenant ID of the user.
	TenantId NullableString `json:"tenantId,omitempty"`
	// Specifies the login name of the user.
	Username NullableString `json:"username,omitempty"`
}

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser() *User {
	this := User{}
	return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
	this := User{}
	return &this
}

// GetAdditionalGroupNames returns the AdditionalGroupNames field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetAdditionalGroupNames() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.AdditionalGroupNames
}

// GetAdditionalGroupNamesOk returns a tuple with the AdditionalGroupNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetAdditionalGroupNamesOk() (*[]string, bool) {
	if o == nil || o.AdditionalGroupNames == nil {
		return nil, false
	}
	return &o.AdditionalGroupNames, true
}

// HasAdditionalGroupNames returns a boolean if a field has been set.
func (o *User) HasAdditionalGroupNames() bool {
	if o != nil && o.AdditionalGroupNames != nil {
		return true
	}

	return false
}

// SetAdditionalGroupNames gets a reference to the given []string and assigns it to the AdditionalGroupNames field.
func (o *User) SetAdditionalGroupNames(v []string) {
	o.AdditionalGroupNames = v
}

// GetAuthenticationType returns the AuthenticationType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetAuthenticationType() string {
	if o == nil || o.AuthenticationType.Get() == nil {
		var ret string
		return ret
	}
	return *o.AuthenticationType.Get()
}

// GetAuthenticationTypeOk returns a tuple with the AuthenticationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetAuthenticationTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AuthenticationType.Get(), o.AuthenticationType.IsSet()
}

// HasAuthenticationType returns a boolean if a field has been set.
func (o *User) HasAuthenticationType() bool {
	if o != nil && o.AuthenticationType.IsSet() {
		return true
	}

	return false
}

// SetAuthenticationType gets a reference to the given NullableString and assigns it to the AuthenticationType field.
func (o *User) SetAuthenticationType(v string) {
	o.AuthenticationType.Set(&v)
}
// SetAuthenticationTypeNil sets the value for AuthenticationType to be an explicit nil
func (o *User) SetAuthenticationTypeNil() {
	o.AuthenticationType.Set(nil)
}

// UnsetAuthenticationType ensures that no value is present for AuthenticationType, not even an explicit nil
func (o *User) UnsetAuthenticationType() {
	o.AuthenticationType.Unset()
}

// GetClusterIdentifiers returns the ClusterIdentifiers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetClusterIdentifiers() []ClusterIdentifier {
	if o == nil  {
		var ret []ClusterIdentifier
		return ret
	}
	return o.ClusterIdentifiers
}

// GetClusterIdentifiersOk returns a tuple with the ClusterIdentifiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetClusterIdentifiersOk() (*[]ClusterIdentifier, bool) {
	if o == nil || o.ClusterIdentifiers == nil {
		return nil, false
	}
	return &o.ClusterIdentifiers, true
}

// HasClusterIdentifiers returns a boolean if a field has been set.
func (o *User) HasClusterIdentifiers() bool {
	if o != nil && o.ClusterIdentifiers != nil {
		return true
	}

	return false
}

// SetClusterIdentifiers gets a reference to the given []ClusterIdentifier and assigns it to the ClusterIdentifiers field.
func (o *User) SetClusterIdentifiers(v []ClusterIdentifier) {
	o.ClusterIdentifiers = v
}

// GetCreatedTimeMsecs returns the CreatedTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetCreatedTimeMsecs() int64 {
	if o == nil || o.CreatedTimeMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.CreatedTimeMsecs.Get()
}

// GetCreatedTimeMsecsOk returns a tuple with the CreatedTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetCreatedTimeMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CreatedTimeMsecs.Get(), o.CreatedTimeMsecs.IsSet()
}

// HasCreatedTimeMsecs returns a boolean if a field has been set.
func (o *User) HasCreatedTimeMsecs() bool {
	if o != nil && o.CreatedTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetCreatedTimeMsecs gets a reference to the given NullableInt64 and assigns it to the CreatedTimeMsecs field.
func (o *User) SetCreatedTimeMsecs(v int64) {
	o.CreatedTimeMsecs.Set(&v)
}
// SetCreatedTimeMsecsNil sets the value for CreatedTimeMsecs to be an explicit nil
func (o *User) SetCreatedTimeMsecsNil() {
	o.CreatedTimeMsecs.Set(nil)
}

// UnsetCreatedTimeMsecs ensures that no value is present for CreatedTimeMsecs, not even an explicit nil
func (o *User) UnsetCreatedTimeMsecs() {
	o.CreatedTimeMsecs.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *User) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *User) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *User) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *User) UnsetDescription() {
	o.Description.Unset()
}

// GetDomain returns the Domain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetDomain() string {
	if o == nil || o.Domain.Get() == nil {
		var ret string
		return ret
	}
	return *o.Domain.Get()
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetDomainOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Domain.Get(), o.Domain.IsSet()
}

// HasDomain returns a boolean if a field has been set.
func (o *User) HasDomain() bool {
	if o != nil && o.Domain.IsSet() {
		return true
	}

	return false
}

// SetDomain gets a reference to the given NullableString and assigns it to the Domain field.
func (o *User) SetDomain(v string) {
	o.Domain.Set(&v)
}
// SetDomainNil sets the value for Domain to be an explicit nil
func (o *User) SetDomainNil() {
	o.Domain.Set(nil)
}

// UnsetDomain ensures that no value is present for Domain, not even an explicit nil
func (o *User) UnsetDomain() {
	o.Domain.Unset()
}

// GetEffectiveTimeMsecs returns the EffectiveTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetEffectiveTimeMsecs() int64 {
	if o == nil || o.EffectiveTimeMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.EffectiveTimeMsecs.Get()
}

// GetEffectiveTimeMsecsOk returns a tuple with the EffectiveTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetEffectiveTimeMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EffectiveTimeMsecs.Get(), o.EffectiveTimeMsecs.IsSet()
}

// HasEffectiveTimeMsecs returns a boolean if a field has been set.
func (o *User) HasEffectiveTimeMsecs() bool {
	if o != nil && o.EffectiveTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetEffectiveTimeMsecs gets a reference to the given NullableInt64 and assigns it to the EffectiveTimeMsecs field.
func (o *User) SetEffectiveTimeMsecs(v int64) {
	o.EffectiveTimeMsecs.Set(&v)
}
// SetEffectiveTimeMsecsNil sets the value for EffectiveTimeMsecs to be an explicit nil
func (o *User) SetEffectiveTimeMsecsNil() {
	o.EffectiveTimeMsecs.Set(nil)
}

// UnsetEffectiveTimeMsecs ensures that no value is present for EffectiveTimeMsecs, not even an explicit nil
func (o *User) UnsetEffectiveTimeMsecs() {
	o.EffectiveTimeMsecs.Unset()
}

// GetEmailAddress returns the EmailAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetEmailAddress() string {
	if o == nil || o.EmailAddress.Get() == nil {
		var ret string
		return ret
	}
	return *o.EmailAddress.Get()
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetEmailAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EmailAddress.Get(), o.EmailAddress.IsSet()
}

// HasEmailAddress returns a boolean if a field has been set.
func (o *User) HasEmailAddress() bool {
	if o != nil && o.EmailAddress.IsSet() {
		return true
	}

	return false
}

// SetEmailAddress gets a reference to the given NullableString and assigns it to the EmailAddress field.
func (o *User) SetEmailAddress(v string) {
	o.EmailAddress.Set(&v)
}
// SetEmailAddressNil sets the value for EmailAddress to be an explicit nil
func (o *User) SetEmailAddressNil() {
	o.EmailAddress.Set(nil)
}

// UnsetEmailAddress ensures that no value is present for EmailAddress, not even an explicit nil
func (o *User) UnsetEmailAddress() {
	o.EmailAddress.Unset()
}

// GetExpiredTimeMsecs returns the ExpiredTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetExpiredTimeMsecs() int64 {
	if o == nil || o.ExpiredTimeMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ExpiredTimeMsecs.Get()
}

// GetExpiredTimeMsecsOk returns a tuple with the ExpiredTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetExpiredTimeMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExpiredTimeMsecs.Get(), o.ExpiredTimeMsecs.IsSet()
}

// HasExpiredTimeMsecs returns a boolean if a field has been set.
func (o *User) HasExpiredTimeMsecs() bool {
	if o != nil && o.ExpiredTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetExpiredTimeMsecs gets a reference to the given NullableInt64 and assigns it to the ExpiredTimeMsecs field.
func (o *User) SetExpiredTimeMsecs(v int64) {
	o.ExpiredTimeMsecs.Set(&v)
}
// SetExpiredTimeMsecsNil sets the value for ExpiredTimeMsecs to be an explicit nil
func (o *User) SetExpiredTimeMsecsNil() {
	o.ExpiredTimeMsecs.Set(nil)
}

// UnsetExpiredTimeMsecs ensures that no value is present for ExpiredTimeMsecs, not even an explicit nil
func (o *User) UnsetExpiredTimeMsecs() {
	o.ExpiredTimeMsecs.Unset()
}

// GetForcePasswordChange returns the ForcePasswordChange field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetForcePasswordChange() bool {
	if o == nil || o.ForcePasswordChange.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ForcePasswordChange.Get()
}

// GetForcePasswordChangeOk returns a tuple with the ForcePasswordChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetForcePasswordChangeOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ForcePasswordChange.Get(), o.ForcePasswordChange.IsSet()
}

// HasForcePasswordChange returns a boolean if a field has been set.
func (o *User) HasForcePasswordChange() bool {
	if o != nil && o.ForcePasswordChange.IsSet() {
		return true
	}

	return false
}

// SetForcePasswordChange gets a reference to the given NullableBool and assigns it to the ForcePasswordChange field.
func (o *User) SetForcePasswordChange(v bool) {
	o.ForcePasswordChange.Set(&v)
}
// SetForcePasswordChangeNil sets the value for ForcePasswordChange to be an explicit nil
func (o *User) SetForcePasswordChangeNil() {
	o.ForcePasswordChange.Set(nil)
}

// UnsetForcePasswordChange ensures that no value is present for ForcePasswordChange, not even an explicit nil
func (o *User) UnsetForcePasswordChange() {
	o.ForcePasswordChange.Unset()
}

// GetGoogleAccount returns the GoogleAccount field value if set, zero value otherwise.
func (o *User) GetGoogleAccount() GoogleAccountInfo {
	if o == nil || o.GoogleAccount == nil {
		var ret GoogleAccountInfo
		return ret
	}
	return *o.GoogleAccount
}

// GetGoogleAccountOk returns a tuple with the GoogleAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetGoogleAccountOk() (*GoogleAccountInfo, bool) {
	if o == nil || o.GoogleAccount == nil {
		return nil, false
	}
	return o.GoogleAccount, true
}

// HasGoogleAccount returns a boolean if a field has been set.
func (o *User) HasGoogleAccount() bool {
	if o != nil && o.GoogleAccount != nil {
		return true
	}

	return false
}

// SetGoogleAccount gets a reference to the given GoogleAccountInfo and assigns it to the GoogleAccount field.
func (o *User) SetGoogleAccount(v GoogleAccountInfo) {
	o.GoogleAccount = &v
}

// GetGroupRoles returns the GroupRoles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetGroupRoles() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.GroupRoles
}

// GetGroupRolesOk returns a tuple with the GroupRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetGroupRolesOk() (*[]string, bool) {
	if o == nil || o.GroupRoles == nil {
		return nil, false
	}
	return &o.GroupRoles, true
}

// HasGroupRoles returns a boolean if a field has been set.
func (o *User) HasGroupRoles() bool {
	if o != nil && o.GroupRoles != nil {
		return true
	}

	return false
}

// SetGroupRoles gets a reference to the given []string and assigns it to the GroupRoles field.
func (o *User) SetGroupRoles(v []string) {
	o.GroupRoles = v
}

// GetIdpUserInfo returns the IdpUserInfo field value if set, zero value otherwise.
func (o *User) GetIdpUserInfo() IdpUserInfo {
	if o == nil || o.IdpUserInfo == nil {
		var ret IdpUserInfo
		return ret
	}
	return *o.IdpUserInfo
}

// GetIdpUserInfoOk returns a tuple with the IdpUserInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetIdpUserInfoOk() (*IdpUserInfo, bool) {
	if o == nil || o.IdpUserInfo == nil {
		return nil, false
	}
	return o.IdpUserInfo, true
}

// HasIdpUserInfo returns a boolean if a field has been set.
func (o *User) HasIdpUserInfo() bool {
	if o != nil && o.IdpUserInfo != nil {
		return true
	}

	return false
}

// SetIdpUserInfo gets a reference to the given IdpUserInfo and assigns it to the IdpUserInfo field.
func (o *User) SetIdpUserInfo(v IdpUserInfo) {
	o.IdpUserInfo = &v
}

// GetLastUpdatedTimeMsecs returns the LastUpdatedTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetLastUpdatedTimeMsecs() int64 {
	if o == nil || o.LastUpdatedTimeMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LastUpdatedTimeMsecs.Get()
}

// GetLastUpdatedTimeMsecsOk returns a tuple with the LastUpdatedTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetLastUpdatedTimeMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastUpdatedTimeMsecs.Get(), o.LastUpdatedTimeMsecs.IsSet()
}

// HasLastUpdatedTimeMsecs returns a boolean if a field has been set.
func (o *User) HasLastUpdatedTimeMsecs() bool {
	if o != nil && o.LastUpdatedTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetLastUpdatedTimeMsecs gets a reference to the given NullableInt64 and assigns it to the LastUpdatedTimeMsecs field.
func (o *User) SetLastUpdatedTimeMsecs(v int64) {
	o.LastUpdatedTimeMsecs.Set(&v)
}
// SetLastUpdatedTimeMsecsNil sets the value for LastUpdatedTimeMsecs to be an explicit nil
func (o *User) SetLastUpdatedTimeMsecsNil() {
	o.LastUpdatedTimeMsecs.Set(nil)
}

// UnsetLastUpdatedTimeMsecs ensures that no value is present for LastUpdatedTimeMsecs, not even an explicit nil
func (o *User) UnsetLastUpdatedTimeMsecs() {
	o.LastUpdatedTimeMsecs.Unset()
}

// GetOrgMembership returns the OrgMembership field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetOrgMembership() []TenantConfig {
	if o == nil  {
		var ret []TenantConfig
		return ret
	}
	return o.OrgMembership
}

// GetOrgMembershipOk returns a tuple with the OrgMembership field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetOrgMembershipOk() (*[]TenantConfig, bool) {
	if o == nil || o.OrgMembership == nil {
		return nil, false
	}
	return &o.OrgMembership, true
}

// HasOrgMembership returns a boolean if a field has been set.
func (o *User) HasOrgMembership() bool {
	if o != nil && o.OrgMembership != nil {
		return true
	}

	return false
}

// SetOrgMembership gets a reference to the given []TenantConfig and assigns it to the OrgMembership field.
func (o *User) SetOrgMembership(v []TenantConfig) {
	o.OrgMembership = v
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetPassword() string {
	if o == nil || o.Password.Get() == nil {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *User) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *User) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *User) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *User) UnsetPassword() {
	o.Password.Unset()
}

// GetPreferences returns the Preferences field value if set, zero value otherwise.
func (o *User) GetPreferences() Preferences {
	if o == nil || o.Preferences == nil {
		var ret Preferences
		return ret
	}
	return *o.Preferences
}

// GetPreferencesOk returns a tuple with the Preferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetPreferencesOk() (*Preferences, bool) {
	if o == nil || o.Preferences == nil {
		return nil, false
	}
	return o.Preferences, true
}

// HasPreferences returns a boolean if a field has been set.
func (o *User) HasPreferences() bool {
	if o != nil && o.Preferences != nil {
		return true
	}

	return false
}

// SetPreferences gets a reference to the given Preferences and assigns it to the Preferences field.
func (o *User) SetPreferences(v Preferences) {
	o.Preferences = &v
}

// GetPrimaryGroupName returns the PrimaryGroupName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetPrimaryGroupName() string {
	if o == nil || o.PrimaryGroupName.Get() == nil {
		var ret string
		return ret
	}
	return *o.PrimaryGroupName.Get()
}

// GetPrimaryGroupNameOk returns a tuple with the PrimaryGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetPrimaryGroupNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PrimaryGroupName.Get(), o.PrimaryGroupName.IsSet()
}

// HasPrimaryGroupName returns a boolean if a field has been set.
func (o *User) HasPrimaryGroupName() bool {
	if o != nil && o.PrimaryGroupName.IsSet() {
		return true
	}

	return false
}

// SetPrimaryGroupName gets a reference to the given NullableString and assigns it to the PrimaryGroupName field.
func (o *User) SetPrimaryGroupName(v string) {
	o.PrimaryGroupName.Set(&v)
}
// SetPrimaryGroupNameNil sets the value for PrimaryGroupName to be an explicit nil
func (o *User) SetPrimaryGroupNameNil() {
	o.PrimaryGroupName.Set(nil)
}

// UnsetPrimaryGroupName ensures that no value is present for PrimaryGroupName, not even an explicit nil
func (o *User) UnsetPrimaryGroupName() {
	o.PrimaryGroupName.Unset()
}

// GetPrivilegeIds returns the PrivilegeIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetPrivilegeIds() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.PrivilegeIds
}

// GetPrivilegeIdsOk returns a tuple with the PrivilegeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetPrivilegeIdsOk() (*[]string, bool) {
	if o == nil || o.PrivilegeIds == nil {
		return nil, false
	}
	return &o.PrivilegeIds, true
}

// HasPrivilegeIds returns a boolean if a field has been set.
func (o *User) HasPrivilegeIds() bool {
	if o != nil && o.PrivilegeIds != nil {
		return true
	}

	return false
}

// SetPrivilegeIds gets a reference to the given []string and assigns it to the PrivilegeIds field.
func (o *User) SetPrivilegeIds(v []string) {
	o.PrivilegeIds = v
}

// GetRestricted returns the Restricted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetRestricted() bool {
	if o == nil || o.Restricted.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Restricted.Get()
}

// GetRestrictedOk returns a tuple with the Restricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetRestrictedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Restricted.Get(), o.Restricted.IsSet()
}

// HasRestricted returns a boolean if a field has been set.
func (o *User) HasRestricted() bool {
	if o != nil && o.Restricted.IsSet() {
		return true
	}

	return false
}

// SetRestricted gets a reference to the given NullableBool and assigns it to the Restricted field.
func (o *User) SetRestricted(v bool) {
	o.Restricted.Set(&v)
}
// SetRestrictedNil sets the value for Restricted to be an explicit nil
func (o *User) SetRestrictedNil() {
	o.Restricted.Set(nil)
}

// UnsetRestricted ensures that no value is present for Restricted, not even an explicit nil
func (o *User) UnsetRestricted() {
	o.Restricted.Unset()
}

// GetRoles returns the Roles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetRoles() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetRolesOk() (*[]string, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return &o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *User) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *User) SetRoles(v []string) {
	o.Roles = v
}

// GetS3AccessKeyId returns the S3AccessKeyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetS3AccessKeyId() string {
	if o == nil || o.S3AccessKeyId.Get() == nil {
		var ret string
		return ret
	}
	return *o.S3AccessKeyId.Get()
}

// GetS3AccessKeyIdOk returns a tuple with the S3AccessKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetS3AccessKeyIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.S3AccessKeyId.Get(), o.S3AccessKeyId.IsSet()
}

// HasS3AccessKeyId returns a boolean if a field has been set.
func (o *User) HasS3AccessKeyId() bool {
	if o != nil && o.S3AccessKeyId.IsSet() {
		return true
	}

	return false
}

// SetS3AccessKeyId gets a reference to the given NullableString and assigns it to the S3AccessKeyId field.
func (o *User) SetS3AccessKeyId(v string) {
	o.S3AccessKeyId.Set(&v)
}
// SetS3AccessKeyIdNil sets the value for S3AccessKeyId to be an explicit nil
func (o *User) SetS3AccessKeyIdNil() {
	o.S3AccessKeyId.Set(nil)
}

// UnsetS3AccessKeyId ensures that no value is present for S3AccessKeyId, not even an explicit nil
func (o *User) UnsetS3AccessKeyId() {
	o.S3AccessKeyId.Unset()
}

// GetS3AccountId returns the S3AccountId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetS3AccountId() string {
	if o == nil || o.S3AccountId.Get() == nil {
		var ret string
		return ret
	}
	return *o.S3AccountId.Get()
}

// GetS3AccountIdOk returns a tuple with the S3AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetS3AccountIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.S3AccountId.Get(), o.S3AccountId.IsSet()
}

// HasS3AccountId returns a boolean if a field has been set.
func (o *User) HasS3AccountId() bool {
	if o != nil && o.S3AccountId.IsSet() {
		return true
	}

	return false
}

// SetS3AccountId gets a reference to the given NullableString and assigns it to the S3AccountId field.
func (o *User) SetS3AccountId(v string) {
	o.S3AccountId.Set(&v)
}
// SetS3AccountIdNil sets the value for S3AccountId to be an explicit nil
func (o *User) SetS3AccountIdNil() {
	o.S3AccountId.Set(nil)
}

// UnsetS3AccountId ensures that no value is present for S3AccountId, not even an explicit nil
func (o *User) UnsetS3AccountId() {
	o.S3AccountId.Unset()
}

// GetS3SecretKey returns the S3SecretKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetS3SecretKey() string {
	if o == nil || o.S3SecretKey.Get() == nil {
		var ret string
		return ret
	}
	return *o.S3SecretKey.Get()
}

// GetS3SecretKeyOk returns a tuple with the S3SecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetS3SecretKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.S3SecretKey.Get(), o.S3SecretKey.IsSet()
}

// HasS3SecretKey returns a boolean if a field has been set.
func (o *User) HasS3SecretKey() bool {
	if o != nil && o.S3SecretKey.IsSet() {
		return true
	}

	return false
}

// SetS3SecretKey gets a reference to the given NullableString and assigns it to the S3SecretKey field.
func (o *User) SetS3SecretKey(v string) {
	o.S3SecretKey.Set(&v)
}
// SetS3SecretKeyNil sets the value for S3SecretKey to be an explicit nil
func (o *User) SetS3SecretKeyNil() {
	o.S3SecretKey.Set(nil)
}

// UnsetS3SecretKey ensures that no value is present for S3SecretKey, not even an explicit nil
func (o *User) UnsetS3SecretKey() {
	o.S3SecretKey.Unset()
}

// GetSalesforceAccount returns the SalesforceAccount field value if set, zero value otherwise.
func (o *User) GetSalesforceAccount() SalesforceAccountInfo {
	if o == nil || o.SalesforceAccount == nil {
		var ret SalesforceAccountInfo
		return ret
	}
	return *o.SalesforceAccount
}

// GetSalesforceAccountOk returns a tuple with the SalesforceAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetSalesforceAccountOk() (*SalesforceAccountInfo, bool) {
	if o == nil || o.SalesforceAccount == nil {
		return nil, false
	}
	return o.SalesforceAccount, true
}

// HasSalesforceAccount returns a boolean if a field has been set.
func (o *User) HasSalesforceAccount() bool {
	if o != nil && o.SalesforceAccount != nil {
		return true
	}

	return false
}

// SetSalesforceAccount gets a reference to the given SalesforceAccountInfo and assigns it to the SalesforceAccount field.
func (o *User) SetSalesforceAccount(v SalesforceAccountInfo) {
	o.SalesforceAccount = &v
}

// GetSid returns the Sid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetSid() string {
	if o == nil || o.Sid.Get() == nil {
		var ret string
		return ret
	}
	return *o.Sid.Get()
}

// GetSidOk returns a tuple with the Sid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetSidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Sid.Get(), o.Sid.IsSet()
}

// HasSid returns a boolean if a field has been set.
func (o *User) HasSid() bool {
	if o != nil && o.Sid.IsSet() {
		return true
	}

	return false
}

// SetSid gets a reference to the given NullableString and assigns it to the Sid field.
func (o *User) SetSid(v string) {
	o.Sid.Set(&v)
}
// SetSidNil sets the value for Sid to be an explicit nil
func (o *User) SetSidNil() {
	o.Sid.Set(nil)
}

// UnsetSid ensures that no value is present for Sid, not even an explicit nil
func (o *User) UnsetSid() {
	o.Sid.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *User) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *User) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *User) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *User) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetUsername() string {
	if o == nil || o.Username.Get() == nil {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *User) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *User) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *User) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *User) UnsetUsername() {
	o.Username.Unset()
}

func (o User) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AdditionalGroupNames != nil {
		toSerialize["additionalGroupNames"] = o.AdditionalGroupNames
	}
	if o.AuthenticationType.IsSet() {
		toSerialize["authenticationType"] = o.AuthenticationType.Get()
	}
	if o.ClusterIdentifiers != nil {
		toSerialize["clusterIdentifiers"] = o.ClusterIdentifiers
	}
	if o.CreatedTimeMsecs.IsSet() {
		toSerialize["createdTimeMsecs"] = o.CreatedTimeMsecs.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Domain.IsSet() {
		toSerialize["domain"] = o.Domain.Get()
	}
	if o.EffectiveTimeMsecs.IsSet() {
		toSerialize["effectiveTimeMsecs"] = o.EffectiveTimeMsecs.Get()
	}
	if o.EmailAddress.IsSet() {
		toSerialize["emailAddress"] = o.EmailAddress.Get()
	}
	if o.ExpiredTimeMsecs.IsSet() {
		toSerialize["expiredTimeMsecs"] = o.ExpiredTimeMsecs.Get()
	}
	if o.ForcePasswordChange.IsSet() {
		toSerialize["forcePasswordChange"] = o.ForcePasswordChange.Get()
	}
	if o.GoogleAccount != nil {
		toSerialize["googleAccount"] = o.GoogleAccount
	}
	if o.GroupRoles != nil {
		toSerialize["groupRoles"] = o.GroupRoles
	}
	if o.IdpUserInfo != nil {
		toSerialize["idpUserInfo"] = o.IdpUserInfo
	}
	if o.LastUpdatedTimeMsecs.IsSet() {
		toSerialize["lastUpdatedTimeMsecs"] = o.LastUpdatedTimeMsecs.Get()
	}
	if o.OrgMembership != nil {
		toSerialize["orgMembership"] = o.OrgMembership
	}
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	if o.Preferences != nil {
		toSerialize["preferences"] = o.Preferences
	}
	if o.PrimaryGroupName.IsSet() {
		toSerialize["primaryGroupName"] = o.PrimaryGroupName.Get()
	}
	if o.PrivilegeIds != nil {
		toSerialize["privilegeIds"] = o.PrivilegeIds
	}
	if o.Restricted.IsSet() {
		toSerialize["restricted"] = o.Restricted.Get()
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	if o.S3AccessKeyId.IsSet() {
		toSerialize["s3AccessKeyId"] = o.S3AccessKeyId.Get()
	}
	if o.S3AccountId.IsSet() {
		toSerialize["s3AccountId"] = o.S3AccountId.Get()
	}
	if o.S3SecretKey.IsSet() {
		toSerialize["s3SecretKey"] = o.S3SecretKey.Get()
	}
	if o.SalesforceAccount != nil {
		toSerialize["salesforceAccount"] = o.SalesforceAccount
	}
	if o.Sid.IsSet() {
		toSerialize["sid"] = o.Sid.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUser struct {
	value *User
	isSet bool
}

func (v NullableUser) Get() *User {
	return v.value
}

func (v *NullableUser) Set(val *User) {
	v.value = val
	v.isSet = true
}

func (v NullableUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser(val *User) *NullableUser {
	return &NullableUser{value: val, isSet: true}
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


