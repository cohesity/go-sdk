/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// BackupJobPreOrPostScript A message to encapsulate the pre and post scripts associated with a backup job. Pre script is executed before backup run of a job starts. Post script is executed after backup run of a job finishes. Currently, pre and post script is only supported for backup job of type 'kPuppeteer' and agent-based backup jobs.
type BackupJobPreOrPostScript struct {
	BackupScript *ScriptPathAndParams `json:"backupScript,omitempty"`
	FullBackupScript *ScriptPathAndParams `json:"fullBackupScript,omitempty"`
	LogBackupScript *ScriptPathAndParams `json:"logBackupScript,omitempty"`
	RemoteHostParams *RemoteHostConnectorParams `json:"remoteHostParams,omitempty"`
}

// NewBackupJobPreOrPostScript instantiates a new BackupJobPreOrPostScript object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupJobPreOrPostScript() *BackupJobPreOrPostScript {
	this := BackupJobPreOrPostScript{}
	return &this
}

// NewBackupJobPreOrPostScriptWithDefaults instantiates a new BackupJobPreOrPostScript object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupJobPreOrPostScriptWithDefaults() *BackupJobPreOrPostScript {
	this := BackupJobPreOrPostScript{}
	return &this
}

// GetBackupScript returns the BackupScript field value if set, zero value otherwise.
func (o *BackupJobPreOrPostScript) GetBackupScript() ScriptPathAndParams {
	if o == nil || o.BackupScript == nil {
		var ret ScriptPathAndParams
		return ret
	}
	return *o.BackupScript
}

// GetBackupScriptOk returns a tuple with the BackupScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupJobPreOrPostScript) GetBackupScriptOk() (*ScriptPathAndParams, bool) {
	if o == nil || o.BackupScript == nil {
		return nil, false
	}
	return o.BackupScript, true
}

// HasBackupScript returns a boolean if a field has been set.
func (o *BackupJobPreOrPostScript) HasBackupScript() bool {
	if o != nil && o.BackupScript != nil {
		return true
	}

	return false
}

// SetBackupScript gets a reference to the given ScriptPathAndParams and assigns it to the BackupScript field.
func (o *BackupJobPreOrPostScript) SetBackupScript(v ScriptPathAndParams) {
	o.BackupScript = &v
}

// GetFullBackupScript returns the FullBackupScript field value if set, zero value otherwise.
func (o *BackupJobPreOrPostScript) GetFullBackupScript() ScriptPathAndParams {
	if o == nil || o.FullBackupScript == nil {
		var ret ScriptPathAndParams
		return ret
	}
	return *o.FullBackupScript
}

// GetFullBackupScriptOk returns a tuple with the FullBackupScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupJobPreOrPostScript) GetFullBackupScriptOk() (*ScriptPathAndParams, bool) {
	if o == nil || o.FullBackupScript == nil {
		return nil, false
	}
	return o.FullBackupScript, true
}

// HasFullBackupScript returns a boolean if a field has been set.
func (o *BackupJobPreOrPostScript) HasFullBackupScript() bool {
	if o != nil && o.FullBackupScript != nil {
		return true
	}

	return false
}

// SetFullBackupScript gets a reference to the given ScriptPathAndParams and assigns it to the FullBackupScript field.
func (o *BackupJobPreOrPostScript) SetFullBackupScript(v ScriptPathAndParams) {
	o.FullBackupScript = &v
}

// GetLogBackupScript returns the LogBackupScript field value if set, zero value otherwise.
func (o *BackupJobPreOrPostScript) GetLogBackupScript() ScriptPathAndParams {
	if o == nil || o.LogBackupScript == nil {
		var ret ScriptPathAndParams
		return ret
	}
	return *o.LogBackupScript
}

// GetLogBackupScriptOk returns a tuple with the LogBackupScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupJobPreOrPostScript) GetLogBackupScriptOk() (*ScriptPathAndParams, bool) {
	if o == nil || o.LogBackupScript == nil {
		return nil, false
	}
	return o.LogBackupScript, true
}

// HasLogBackupScript returns a boolean if a field has been set.
func (o *BackupJobPreOrPostScript) HasLogBackupScript() bool {
	if o != nil && o.LogBackupScript != nil {
		return true
	}

	return false
}

// SetLogBackupScript gets a reference to the given ScriptPathAndParams and assigns it to the LogBackupScript field.
func (o *BackupJobPreOrPostScript) SetLogBackupScript(v ScriptPathAndParams) {
	o.LogBackupScript = &v
}

// GetRemoteHostParams returns the RemoteHostParams field value if set, zero value otherwise.
func (o *BackupJobPreOrPostScript) GetRemoteHostParams() RemoteHostConnectorParams {
	if o == nil || o.RemoteHostParams == nil {
		var ret RemoteHostConnectorParams
		return ret
	}
	return *o.RemoteHostParams
}

// GetRemoteHostParamsOk returns a tuple with the RemoteHostParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupJobPreOrPostScript) GetRemoteHostParamsOk() (*RemoteHostConnectorParams, bool) {
	if o == nil || o.RemoteHostParams == nil {
		return nil, false
	}
	return o.RemoteHostParams, true
}

// HasRemoteHostParams returns a boolean if a field has been set.
func (o *BackupJobPreOrPostScript) HasRemoteHostParams() bool {
	if o != nil && o.RemoteHostParams != nil {
		return true
	}

	return false
}

// SetRemoteHostParams gets a reference to the given RemoteHostConnectorParams and assigns it to the RemoteHostParams field.
func (o *BackupJobPreOrPostScript) SetRemoteHostParams(v RemoteHostConnectorParams) {
	o.RemoteHostParams = &v
}

func (o BackupJobPreOrPostScript) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BackupScript != nil {
		toSerialize["backupScript"] = o.BackupScript
	}
	if o.FullBackupScript != nil {
		toSerialize["fullBackupScript"] = o.FullBackupScript
	}
	if o.LogBackupScript != nil {
		toSerialize["logBackupScript"] = o.LogBackupScript
	}
	if o.RemoteHostParams != nil {
		toSerialize["remoteHostParams"] = o.RemoteHostParams
	}
	return json.Marshal(toSerialize)
}

type NullableBackupJobPreOrPostScript struct {
	value *BackupJobPreOrPostScript
	isSet bool
}

func (v NullableBackupJobPreOrPostScript) Get() *BackupJobPreOrPostScript {
	return v.value
}

func (v *NullableBackupJobPreOrPostScript) Set(val *BackupJobPreOrPostScript) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupJobPreOrPostScript) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupJobPreOrPostScript) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupJobPreOrPostScript(val *BackupJobPreOrPostScript) *NullableBackupJobPreOrPostScript {
	return &NullableBackupJobPreOrPostScript{value: val, isSet: true}
}

func (v NullableBackupJobPreOrPostScript) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupJobPreOrPostScript) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


