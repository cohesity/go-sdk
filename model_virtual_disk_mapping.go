/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// VirtualDiskMapping Specifies the request data struct for virtual disk mapping with only the disk ids.
type VirtualDiskMapping struct {
	DiskToOverwrite *VirtualDiskIdInformation `json:"diskToOverwrite,omitempty"`
	SourceDisk *VirtualDiskIdInformation `json:"sourceDisk,omitempty"`
	// Specifies the target location information, for e.g. a datastore in VMware environment. If diskToOverwrite is specified, then the target location is automatically deduced.
	TargetLocationId NullableInt64 `json:"targetLocationId,omitempty"`
}

// NewVirtualDiskMapping instantiates a new VirtualDiskMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualDiskMapping() *VirtualDiskMapping {
	this := VirtualDiskMapping{}
	return &this
}

// NewVirtualDiskMappingWithDefaults instantiates a new VirtualDiskMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualDiskMappingWithDefaults() *VirtualDiskMapping {
	this := VirtualDiskMapping{}
	return &this
}

// GetDiskToOverwrite returns the DiskToOverwrite field value if set, zero value otherwise.
func (o *VirtualDiskMapping) GetDiskToOverwrite() VirtualDiskIdInformation {
	if o == nil || o.DiskToOverwrite == nil {
		var ret VirtualDiskIdInformation
		return ret
	}
	return *o.DiskToOverwrite
}

// GetDiskToOverwriteOk returns a tuple with the DiskToOverwrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDiskMapping) GetDiskToOverwriteOk() (*VirtualDiskIdInformation, bool) {
	if o == nil || o.DiskToOverwrite == nil {
		return nil, false
	}
	return o.DiskToOverwrite, true
}

// HasDiskToOverwrite returns a boolean if a field has been set.
func (o *VirtualDiskMapping) HasDiskToOverwrite() bool {
	if o != nil && o.DiskToOverwrite != nil {
		return true
	}

	return false
}

// SetDiskToOverwrite gets a reference to the given VirtualDiskIdInformation and assigns it to the DiskToOverwrite field.
func (o *VirtualDiskMapping) SetDiskToOverwrite(v VirtualDiskIdInformation) {
	o.DiskToOverwrite = &v
}

// GetSourceDisk returns the SourceDisk field value if set, zero value otherwise.
func (o *VirtualDiskMapping) GetSourceDisk() VirtualDiskIdInformation {
	if o == nil || o.SourceDisk == nil {
		var ret VirtualDiskIdInformation
		return ret
	}
	return *o.SourceDisk
}

// GetSourceDiskOk returns a tuple with the SourceDisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDiskMapping) GetSourceDiskOk() (*VirtualDiskIdInformation, bool) {
	if o == nil || o.SourceDisk == nil {
		return nil, false
	}
	return o.SourceDisk, true
}

// HasSourceDisk returns a boolean if a field has been set.
func (o *VirtualDiskMapping) HasSourceDisk() bool {
	if o != nil && o.SourceDisk != nil {
		return true
	}

	return false
}

// SetSourceDisk gets a reference to the given VirtualDiskIdInformation and assigns it to the SourceDisk field.
func (o *VirtualDiskMapping) SetSourceDisk(v VirtualDiskIdInformation) {
	o.SourceDisk = &v
}

// GetTargetLocationId returns the TargetLocationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualDiskMapping) GetTargetLocationId() int64 {
	if o == nil || o.TargetLocationId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TargetLocationId.Get()
}

// GetTargetLocationIdOk returns a tuple with the TargetLocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualDiskMapping) GetTargetLocationIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetLocationId.Get(), o.TargetLocationId.IsSet()
}

// HasTargetLocationId returns a boolean if a field has been set.
func (o *VirtualDiskMapping) HasTargetLocationId() bool {
	if o != nil && o.TargetLocationId.IsSet() {
		return true
	}

	return false
}

// SetTargetLocationId gets a reference to the given NullableInt64 and assigns it to the TargetLocationId field.
func (o *VirtualDiskMapping) SetTargetLocationId(v int64) {
	o.TargetLocationId.Set(&v)
}
// SetTargetLocationIdNil sets the value for TargetLocationId to be an explicit nil
func (o *VirtualDiskMapping) SetTargetLocationIdNil() {
	o.TargetLocationId.Set(nil)
}

// UnsetTargetLocationId ensures that no value is present for TargetLocationId, not even an explicit nil
func (o *VirtualDiskMapping) UnsetTargetLocationId() {
	o.TargetLocationId.Unset()
}

func (o VirtualDiskMapping) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DiskToOverwrite != nil {
		toSerialize["diskToOverwrite"] = o.DiskToOverwrite
	}
	if o.SourceDisk != nil {
		toSerialize["sourceDisk"] = o.SourceDisk
	}
	if o.TargetLocationId.IsSet() {
		toSerialize["targetLocationId"] = o.TargetLocationId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableVirtualDiskMapping struct {
	value *VirtualDiskMapping
	isSet bool
}

func (v NullableVirtualDiskMapping) Get() *VirtualDiskMapping {
	return v.value
}

func (v *NullableVirtualDiskMapping) Set(val *VirtualDiskMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualDiskMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualDiskMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualDiskMapping(val *VirtualDiskMapping) *NullableVirtualDiskMapping {
	return &NullableVirtualDiskMapping{value: val, isSet: true}
}

func (v NullableVirtualDiskMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualDiskMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


