/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// FileUptieringParams struct for FileUptieringParams
type FileUptieringParams struct {
	// File uptier policy based on file access/modify time.
	FileSelectPolicy NullableInt32 `json:"fileSelectPolicy,omitempty"`
	// Gives the size criteria to be used for selecting the files to be uptiered. The hot files, which are greater or smaller than file_size, are uptiered.
	FileSize NullableInt64 `json:"fileSize,omitempty"`
	// File size policy for selecting files to uptier.
	FileSizePolicy NullableInt32 `json:"fileSizePolicy,omitempty"`
	// Identifies the hot files in the view. Files which are accessed num_file_access times in hot_file_window msecs, are uptiered. It is only applicable when file_select_policy is kLastAccessed and num_file_access is greater than 1.
	HotFileWindow NullableInt64 `json:"hotFileWindow,omitempty"`
	// Mount path where the Cohesity target view is mounted on NFS clients while migrating the data.
	NfsMountPath NullableString `json:"nfsMountPath,omitempty"`
	// Number of times file must be accessed within hot_file_window in order to qualify for uptiering. Applicable only when file_select_policy is kLastAccessed.
	NumFileAccess NullableInt32 `json:"numFileAccess,omitempty"`
	// The source view name from which the data will be uptiered.
	SourceViewName NullableString `json:"sourceViewName,omitempty"`
	// If set, all files in the view will be uptiered regardless of file_select_policy, num_file_access, hot_file_window, file_size constraints.
	UptierAllFiles NullableBool `json:"uptierAllFiles,omitempty"`
}

// NewFileUptieringParams instantiates a new FileUptieringParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileUptieringParams() *FileUptieringParams {
	this := FileUptieringParams{}
	return &this
}

// NewFileUptieringParamsWithDefaults instantiates a new FileUptieringParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileUptieringParamsWithDefaults() *FileUptieringParams {
	this := FileUptieringParams{}
	return &this
}

// GetFileSelectPolicy returns the FileSelectPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileUptieringParams) GetFileSelectPolicy() int32 {
	if o == nil || o.FileSelectPolicy.Get() == nil {
		var ret int32
		return ret
	}
	return *o.FileSelectPolicy.Get()
}

// GetFileSelectPolicyOk returns a tuple with the FileSelectPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileUptieringParams) GetFileSelectPolicyOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FileSelectPolicy.Get(), o.FileSelectPolicy.IsSet()
}

// HasFileSelectPolicy returns a boolean if a field has been set.
func (o *FileUptieringParams) HasFileSelectPolicy() bool {
	if o != nil && o.FileSelectPolicy.IsSet() {
		return true
	}

	return false
}

// SetFileSelectPolicy gets a reference to the given NullableInt32 and assigns it to the FileSelectPolicy field.
func (o *FileUptieringParams) SetFileSelectPolicy(v int32) {
	o.FileSelectPolicy.Set(&v)
}
// SetFileSelectPolicyNil sets the value for FileSelectPolicy to be an explicit nil
func (o *FileUptieringParams) SetFileSelectPolicyNil() {
	o.FileSelectPolicy.Set(nil)
}

// UnsetFileSelectPolicy ensures that no value is present for FileSelectPolicy, not even an explicit nil
func (o *FileUptieringParams) UnsetFileSelectPolicy() {
	o.FileSelectPolicy.Unset()
}

// GetFileSize returns the FileSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileUptieringParams) GetFileSize() int64 {
	if o == nil || o.FileSize.Get() == nil {
		var ret int64
		return ret
	}
	return *o.FileSize.Get()
}

// GetFileSizeOk returns a tuple with the FileSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileUptieringParams) GetFileSizeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FileSize.Get(), o.FileSize.IsSet()
}

// HasFileSize returns a boolean if a field has been set.
func (o *FileUptieringParams) HasFileSize() bool {
	if o != nil && o.FileSize.IsSet() {
		return true
	}

	return false
}

// SetFileSize gets a reference to the given NullableInt64 and assigns it to the FileSize field.
func (o *FileUptieringParams) SetFileSize(v int64) {
	o.FileSize.Set(&v)
}
// SetFileSizeNil sets the value for FileSize to be an explicit nil
func (o *FileUptieringParams) SetFileSizeNil() {
	o.FileSize.Set(nil)
}

// UnsetFileSize ensures that no value is present for FileSize, not even an explicit nil
func (o *FileUptieringParams) UnsetFileSize() {
	o.FileSize.Unset()
}

// GetFileSizePolicy returns the FileSizePolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileUptieringParams) GetFileSizePolicy() int32 {
	if o == nil || o.FileSizePolicy.Get() == nil {
		var ret int32
		return ret
	}
	return *o.FileSizePolicy.Get()
}

// GetFileSizePolicyOk returns a tuple with the FileSizePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileUptieringParams) GetFileSizePolicyOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FileSizePolicy.Get(), o.FileSizePolicy.IsSet()
}

// HasFileSizePolicy returns a boolean if a field has been set.
func (o *FileUptieringParams) HasFileSizePolicy() bool {
	if o != nil && o.FileSizePolicy.IsSet() {
		return true
	}

	return false
}

// SetFileSizePolicy gets a reference to the given NullableInt32 and assigns it to the FileSizePolicy field.
func (o *FileUptieringParams) SetFileSizePolicy(v int32) {
	o.FileSizePolicy.Set(&v)
}
// SetFileSizePolicyNil sets the value for FileSizePolicy to be an explicit nil
func (o *FileUptieringParams) SetFileSizePolicyNil() {
	o.FileSizePolicy.Set(nil)
}

// UnsetFileSizePolicy ensures that no value is present for FileSizePolicy, not even an explicit nil
func (o *FileUptieringParams) UnsetFileSizePolicy() {
	o.FileSizePolicy.Unset()
}

// GetHotFileWindow returns the HotFileWindow field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileUptieringParams) GetHotFileWindow() int64 {
	if o == nil || o.HotFileWindow.Get() == nil {
		var ret int64
		return ret
	}
	return *o.HotFileWindow.Get()
}

// GetHotFileWindowOk returns a tuple with the HotFileWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileUptieringParams) GetHotFileWindowOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HotFileWindow.Get(), o.HotFileWindow.IsSet()
}

// HasHotFileWindow returns a boolean if a field has been set.
func (o *FileUptieringParams) HasHotFileWindow() bool {
	if o != nil && o.HotFileWindow.IsSet() {
		return true
	}

	return false
}

// SetHotFileWindow gets a reference to the given NullableInt64 and assigns it to the HotFileWindow field.
func (o *FileUptieringParams) SetHotFileWindow(v int64) {
	o.HotFileWindow.Set(&v)
}
// SetHotFileWindowNil sets the value for HotFileWindow to be an explicit nil
func (o *FileUptieringParams) SetHotFileWindowNil() {
	o.HotFileWindow.Set(nil)
}

// UnsetHotFileWindow ensures that no value is present for HotFileWindow, not even an explicit nil
func (o *FileUptieringParams) UnsetHotFileWindow() {
	o.HotFileWindow.Unset()
}

// GetNfsMountPath returns the NfsMountPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileUptieringParams) GetNfsMountPath() string {
	if o == nil || o.NfsMountPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.NfsMountPath.Get()
}

// GetNfsMountPathOk returns a tuple with the NfsMountPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileUptieringParams) GetNfsMountPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NfsMountPath.Get(), o.NfsMountPath.IsSet()
}

// HasNfsMountPath returns a boolean if a field has been set.
func (o *FileUptieringParams) HasNfsMountPath() bool {
	if o != nil && o.NfsMountPath.IsSet() {
		return true
	}

	return false
}

// SetNfsMountPath gets a reference to the given NullableString and assigns it to the NfsMountPath field.
func (o *FileUptieringParams) SetNfsMountPath(v string) {
	o.NfsMountPath.Set(&v)
}
// SetNfsMountPathNil sets the value for NfsMountPath to be an explicit nil
func (o *FileUptieringParams) SetNfsMountPathNil() {
	o.NfsMountPath.Set(nil)
}

// UnsetNfsMountPath ensures that no value is present for NfsMountPath, not even an explicit nil
func (o *FileUptieringParams) UnsetNfsMountPath() {
	o.NfsMountPath.Unset()
}

// GetNumFileAccess returns the NumFileAccess field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileUptieringParams) GetNumFileAccess() int32 {
	if o == nil || o.NumFileAccess.Get() == nil {
		var ret int32
		return ret
	}
	return *o.NumFileAccess.Get()
}

// GetNumFileAccessOk returns a tuple with the NumFileAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileUptieringParams) GetNumFileAccessOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumFileAccess.Get(), o.NumFileAccess.IsSet()
}

// HasNumFileAccess returns a boolean if a field has been set.
func (o *FileUptieringParams) HasNumFileAccess() bool {
	if o != nil && o.NumFileAccess.IsSet() {
		return true
	}

	return false
}

// SetNumFileAccess gets a reference to the given NullableInt32 and assigns it to the NumFileAccess field.
func (o *FileUptieringParams) SetNumFileAccess(v int32) {
	o.NumFileAccess.Set(&v)
}
// SetNumFileAccessNil sets the value for NumFileAccess to be an explicit nil
func (o *FileUptieringParams) SetNumFileAccessNil() {
	o.NumFileAccess.Set(nil)
}

// UnsetNumFileAccess ensures that no value is present for NumFileAccess, not even an explicit nil
func (o *FileUptieringParams) UnsetNumFileAccess() {
	o.NumFileAccess.Unset()
}

// GetSourceViewName returns the SourceViewName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileUptieringParams) GetSourceViewName() string {
	if o == nil || o.SourceViewName.Get() == nil {
		var ret string
		return ret
	}
	return *o.SourceViewName.Get()
}

// GetSourceViewNameOk returns a tuple with the SourceViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileUptieringParams) GetSourceViewNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceViewName.Get(), o.SourceViewName.IsSet()
}

// HasSourceViewName returns a boolean if a field has been set.
func (o *FileUptieringParams) HasSourceViewName() bool {
	if o != nil && o.SourceViewName.IsSet() {
		return true
	}

	return false
}

// SetSourceViewName gets a reference to the given NullableString and assigns it to the SourceViewName field.
func (o *FileUptieringParams) SetSourceViewName(v string) {
	o.SourceViewName.Set(&v)
}
// SetSourceViewNameNil sets the value for SourceViewName to be an explicit nil
func (o *FileUptieringParams) SetSourceViewNameNil() {
	o.SourceViewName.Set(nil)
}

// UnsetSourceViewName ensures that no value is present for SourceViewName, not even an explicit nil
func (o *FileUptieringParams) UnsetSourceViewName() {
	o.SourceViewName.Unset()
}

// GetUptierAllFiles returns the UptierAllFiles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileUptieringParams) GetUptierAllFiles() bool {
	if o == nil || o.UptierAllFiles.Get() == nil {
		var ret bool
		return ret
	}
	return *o.UptierAllFiles.Get()
}

// GetUptierAllFilesOk returns a tuple with the UptierAllFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileUptieringParams) GetUptierAllFilesOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UptierAllFiles.Get(), o.UptierAllFiles.IsSet()
}

// HasUptierAllFiles returns a boolean if a field has been set.
func (o *FileUptieringParams) HasUptierAllFiles() bool {
	if o != nil && o.UptierAllFiles.IsSet() {
		return true
	}

	return false
}

// SetUptierAllFiles gets a reference to the given NullableBool and assigns it to the UptierAllFiles field.
func (o *FileUptieringParams) SetUptierAllFiles(v bool) {
	o.UptierAllFiles.Set(&v)
}
// SetUptierAllFilesNil sets the value for UptierAllFiles to be an explicit nil
func (o *FileUptieringParams) SetUptierAllFilesNil() {
	o.UptierAllFiles.Set(nil)
}

// UnsetUptierAllFiles ensures that no value is present for UptierAllFiles, not even an explicit nil
func (o *FileUptieringParams) UnsetUptierAllFiles() {
	o.UptierAllFiles.Unset()
}

func (o FileUptieringParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FileSelectPolicy.IsSet() {
		toSerialize["fileSelectPolicy"] = o.FileSelectPolicy.Get()
	}
	if o.FileSize.IsSet() {
		toSerialize["fileSize"] = o.FileSize.Get()
	}
	if o.FileSizePolicy.IsSet() {
		toSerialize["fileSizePolicy"] = o.FileSizePolicy.Get()
	}
	if o.HotFileWindow.IsSet() {
		toSerialize["hotFileWindow"] = o.HotFileWindow.Get()
	}
	if o.NfsMountPath.IsSet() {
		toSerialize["nfsMountPath"] = o.NfsMountPath.Get()
	}
	if o.NumFileAccess.IsSet() {
		toSerialize["numFileAccess"] = o.NumFileAccess.Get()
	}
	if o.SourceViewName.IsSet() {
		toSerialize["sourceViewName"] = o.SourceViewName.Get()
	}
	if o.UptierAllFiles.IsSet() {
		toSerialize["uptierAllFiles"] = o.UptierAllFiles.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableFileUptieringParams struct {
	value *FileUptieringParams
	isSet bool
}

func (v NullableFileUptieringParams) Get() *FileUptieringParams {
	return v.value
}

func (v *NullableFileUptieringParams) Set(val *FileUptieringParams) {
	v.value = val
	v.isSet = true
}

func (v NullableFileUptieringParams) IsSet() bool {
	return v.isSet
}

func (v *NullableFileUptieringParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileUptieringParams(val *FileUptieringParams) *NullableFileUptieringParams {
	return &NullableFileUptieringParams{value: val, isSet: true}
}

func (v NullableFileUptieringParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileUptieringParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


