/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// OracleSbtHostParams struct for OracleSbtHostParams
type OracleSbtHostParams struct {
	// The path of sbt library, This is set only when backup type is kSbt.
	SbtLibraryPath NullableString `json:"sbtLibraryPath,omitempty"`
	// Cohesity view path.
	ViewFsPath NullableString `json:"viewFsPath,omitempty"`
	// Vector of Cohesity primary VIPs.
	VipVec []string `json:"vipVec,omitempty"`
	// Vlan information for Cohesity cluster.
	VlanInfoVec []OracleVlanInfo `json:"vlanInfoVec,omitempty"`
}

// NewOracleSbtHostParams instantiates a new OracleSbtHostParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleSbtHostParams() *OracleSbtHostParams {
	this := OracleSbtHostParams{}
	return &this
}

// NewOracleSbtHostParamsWithDefaults instantiates a new OracleSbtHostParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleSbtHostParamsWithDefaults() *OracleSbtHostParams {
	this := OracleSbtHostParams{}
	return &this
}

// GetSbtLibraryPath returns the SbtLibraryPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleSbtHostParams) GetSbtLibraryPath() string {
	if o == nil || o.SbtLibraryPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.SbtLibraryPath.Get()
}

// GetSbtLibraryPathOk returns a tuple with the SbtLibraryPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleSbtHostParams) GetSbtLibraryPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SbtLibraryPath.Get(), o.SbtLibraryPath.IsSet()
}

// HasSbtLibraryPath returns a boolean if a field has been set.
func (o *OracleSbtHostParams) HasSbtLibraryPath() bool {
	if o != nil && o.SbtLibraryPath.IsSet() {
		return true
	}

	return false
}

// SetSbtLibraryPath gets a reference to the given NullableString and assigns it to the SbtLibraryPath field.
func (o *OracleSbtHostParams) SetSbtLibraryPath(v string) {
	o.SbtLibraryPath.Set(&v)
}
// SetSbtLibraryPathNil sets the value for SbtLibraryPath to be an explicit nil
func (o *OracleSbtHostParams) SetSbtLibraryPathNil() {
	o.SbtLibraryPath.Set(nil)
}

// UnsetSbtLibraryPath ensures that no value is present for SbtLibraryPath, not even an explicit nil
func (o *OracleSbtHostParams) UnsetSbtLibraryPath() {
	o.SbtLibraryPath.Unset()
}

// GetViewFsPath returns the ViewFsPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleSbtHostParams) GetViewFsPath() string {
	if o == nil || o.ViewFsPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.ViewFsPath.Get()
}

// GetViewFsPathOk returns a tuple with the ViewFsPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleSbtHostParams) GetViewFsPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewFsPath.Get(), o.ViewFsPath.IsSet()
}

// HasViewFsPath returns a boolean if a field has been set.
func (o *OracleSbtHostParams) HasViewFsPath() bool {
	if o != nil && o.ViewFsPath.IsSet() {
		return true
	}

	return false
}

// SetViewFsPath gets a reference to the given NullableString and assigns it to the ViewFsPath field.
func (o *OracleSbtHostParams) SetViewFsPath(v string) {
	o.ViewFsPath.Set(&v)
}
// SetViewFsPathNil sets the value for ViewFsPath to be an explicit nil
func (o *OracleSbtHostParams) SetViewFsPathNil() {
	o.ViewFsPath.Set(nil)
}

// UnsetViewFsPath ensures that no value is present for ViewFsPath, not even an explicit nil
func (o *OracleSbtHostParams) UnsetViewFsPath() {
	o.ViewFsPath.Unset()
}

// GetVipVec returns the VipVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleSbtHostParams) GetVipVec() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.VipVec
}

// GetVipVecOk returns a tuple with the VipVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleSbtHostParams) GetVipVecOk() (*[]string, bool) {
	if o == nil || o.VipVec == nil {
		return nil, false
	}
	return &o.VipVec, true
}

// HasVipVec returns a boolean if a field has been set.
func (o *OracleSbtHostParams) HasVipVec() bool {
	if o != nil && o.VipVec != nil {
		return true
	}

	return false
}

// SetVipVec gets a reference to the given []string and assigns it to the VipVec field.
func (o *OracleSbtHostParams) SetVipVec(v []string) {
	o.VipVec = v
}

// GetVlanInfoVec returns the VlanInfoVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleSbtHostParams) GetVlanInfoVec() []OracleVlanInfo {
	if o == nil  {
		var ret []OracleVlanInfo
		return ret
	}
	return o.VlanInfoVec
}

// GetVlanInfoVecOk returns a tuple with the VlanInfoVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleSbtHostParams) GetVlanInfoVecOk() (*[]OracleVlanInfo, bool) {
	if o == nil || o.VlanInfoVec == nil {
		return nil, false
	}
	return &o.VlanInfoVec, true
}

// HasVlanInfoVec returns a boolean if a field has been set.
func (o *OracleSbtHostParams) HasVlanInfoVec() bool {
	if o != nil && o.VlanInfoVec != nil {
		return true
	}

	return false
}

// SetVlanInfoVec gets a reference to the given []OracleVlanInfo and assigns it to the VlanInfoVec field.
func (o *OracleSbtHostParams) SetVlanInfoVec(v []OracleVlanInfo) {
	o.VlanInfoVec = v
}

func (o OracleSbtHostParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SbtLibraryPath.IsSet() {
		toSerialize["sbtLibraryPath"] = o.SbtLibraryPath.Get()
	}
	if o.ViewFsPath.IsSet() {
		toSerialize["viewFsPath"] = o.ViewFsPath.Get()
	}
	if o.VipVec != nil {
		toSerialize["vipVec"] = o.VipVec
	}
	if o.VlanInfoVec != nil {
		toSerialize["vlanInfoVec"] = o.VlanInfoVec
	}
	return json.Marshal(toSerialize)
}

type NullableOracleSbtHostParams struct {
	value *OracleSbtHostParams
	isSet bool
}

func (v NullableOracleSbtHostParams) Get() *OracleSbtHostParams {
	return v.value
}

func (v *NullableOracleSbtHostParams) Set(val *OracleSbtHostParams) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleSbtHostParams) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleSbtHostParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleSbtHostParams(val *OracleSbtHostParams) *NullableOracleSbtHostParams {
	return &NullableOracleSbtHostParams{value: val, isSet: true}
}

func (v NullableOracleSbtHostParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleSbtHostParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


