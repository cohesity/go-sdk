/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// RestoreObject struct for RestoreObject
type RestoreObject struct {
	ArchivalTarget *ArchivalTarget `json:"archivalTarget,omitempty"`
	// The attempt number of the job run to restore from.
	AttemptNum NullableInt32 `json:"attemptNum,omitempty"`
	CloudDeployTarget *CloudDeployTarget `json:"cloudDeployTarget,omitempty"`
	CloudReplicationTarget *CloudDeployTarget `json:"cloudReplicationTarget,omitempty"`
	Entity *EntityProto `json:"entity,omitempty"`
	// The job id from which to restore. This is used while communicating with yoda.
	JobId NullableInt64 `json:"jobId,omitempty"`
	// Id identifying a specific run to restore from. If this is not specified, and we need to restore from a run, the latest run is used. NOTE: This must be specified for RestoreFiles, RecoverDisks and GetVirtualDisks APIs.
	JobInstanceId NullableInt64 `json:"jobInstanceId,omitempty"`
	JobUid *UniversalIdProto `json:"jobUid,omitempty"`
	NosqlRecoverParams *NoSqlRecoverParams `json:"nosqlRecoverParams,omitempty"`
	ParentSource *EntityProto `json:"parentSource,omitempty"`
	// The time to which the object needs to be restored. If this is not set, then the object will be restored to the full/incremental snapshot. This is applicable only if the object is protected using CDP.
	PointInTimeRestoreTimeUsecs NullableInt64 `json:"pointInTimeRestoreTimeUsecs,omitempty"`
	RestoreAcropolisVmParam *RestoreAcropolisVMParam `json:"restoreAcropolisVmParam,omitempty"`
	// The relative path to the directory containing the entity's snapshot.
	SnapshotRelativeDirPath NullableString `json:"snapshotRelativeDirPath,omitempty"`
	// The start time of the specific job run. Iff 'job_instance_id' is set, this field must be set. In-memory indices on the Magneto master are laid-out by the start time of the job, and this is how the master pulls up a specific run. NOTE: This must be specified for RestoreFiles, RecoverDisks and GetVirtualDisks APIs
	StartTimeUsecs NullableInt64 `json:"startTimeUsecs,omitempty"`
	// The name of the view where the object's snapshot is located.
	ViewName NullableString `json:"viewName,omitempty"`
	// This is applicable only to VMs and is set to true when the VM being recovered or cloned contained independent disks when it was backed up.
	VmHadIndependentDisks NullableBool `json:"vmHadIndependentDisks,omitempty"`
}

// NewRestoreObject instantiates a new RestoreObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreObject() *RestoreObject {
	this := RestoreObject{}
	return &this
}

// NewRestoreObjectWithDefaults instantiates a new RestoreObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreObjectWithDefaults() *RestoreObject {
	this := RestoreObject{}
	return &this
}

// GetArchivalTarget returns the ArchivalTarget field value if set, zero value otherwise.
func (o *RestoreObject) GetArchivalTarget() ArchivalTarget {
	if o == nil || o.ArchivalTarget == nil {
		var ret ArchivalTarget
		return ret
	}
	return *o.ArchivalTarget
}

// GetArchivalTargetOk returns a tuple with the ArchivalTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreObject) GetArchivalTargetOk() (*ArchivalTarget, bool) {
	if o == nil || o.ArchivalTarget == nil {
		return nil, false
	}
	return o.ArchivalTarget, true
}

// HasArchivalTarget returns a boolean if a field has been set.
func (o *RestoreObject) HasArchivalTarget() bool {
	if o != nil && o.ArchivalTarget != nil {
		return true
	}

	return false
}

// SetArchivalTarget gets a reference to the given ArchivalTarget and assigns it to the ArchivalTarget field.
func (o *RestoreObject) SetArchivalTarget(v ArchivalTarget) {
	o.ArchivalTarget = &v
}

// GetAttemptNum returns the AttemptNum field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreObject) GetAttemptNum() int32 {
	if o == nil || o.AttemptNum.Get() == nil {
		var ret int32
		return ret
	}
	return *o.AttemptNum.Get()
}

// GetAttemptNumOk returns a tuple with the AttemptNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreObject) GetAttemptNumOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AttemptNum.Get(), o.AttemptNum.IsSet()
}

// HasAttemptNum returns a boolean if a field has been set.
func (o *RestoreObject) HasAttemptNum() bool {
	if o != nil && o.AttemptNum.IsSet() {
		return true
	}

	return false
}

// SetAttemptNum gets a reference to the given NullableInt32 and assigns it to the AttemptNum field.
func (o *RestoreObject) SetAttemptNum(v int32) {
	o.AttemptNum.Set(&v)
}
// SetAttemptNumNil sets the value for AttemptNum to be an explicit nil
func (o *RestoreObject) SetAttemptNumNil() {
	o.AttemptNum.Set(nil)
}

// UnsetAttemptNum ensures that no value is present for AttemptNum, not even an explicit nil
func (o *RestoreObject) UnsetAttemptNum() {
	o.AttemptNum.Unset()
}

// GetCloudDeployTarget returns the CloudDeployTarget field value if set, zero value otherwise.
func (o *RestoreObject) GetCloudDeployTarget() CloudDeployTarget {
	if o == nil || o.CloudDeployTarget == nil {
		var ret CloudDeployTarget
		return ret
	}
	return *o.CloudDeployTarget
}

// GetCloudDeployTargetOk returns a tuple with the CloudDeployTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreObject) GetCloudDeployTargetOk() (*CloudDeployTarget, bool) {
	if o == nil || o.CloudDeployTarget == nil {
		return nil, false
	}
	return o.CloudDeployTarget, true
}

// HasCloudDeployTarget returns a boolean if a field has been set.
func (o *RestoreObject) HasCloudDeployTarget() bool {
	if o != nil && o.CloudDeployTarget != nil {
		return true
	}

	return false
}

// SetCloudDeployTarget gets a reference to the given CloudDeployTarget and assigns it to the CloudDeployTarget field.
func (o *RestoreObject) SetCloudDeployTarget(v CloudDeployTarget) {
	o.CloudDeployTarget = &v
}

// GetCloudReplicationTarget returns the CloudReplicationTarget field value if set, zero value otherwise.
func (o *RestoreObject) GetCloudReplicationTarget() CloudDeployTarget {
	if o == nil || o.CloudReplicationTarget == nil {
		var ret CloudDeployTarget
		return ret
	}
	return *o.CloudReplicationTarget
}

// GetCloudReplicationTargetOk returns a tuple with the CloudReplicationTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreObject) GetCloudReplicationTargetOk() (*CloudDeployTarget, bool) {
	if o == nil || o.CloudReplicationTarget == nil {
		return nil, false
	}
	return o.CloudReplicationTarget, true
}

// HasCloudReplicationTarget returns a boolean if a field has been set.
func (o *RestoreObject) HasCloudReplicationTarget() bool {
	if o != nil && o.CloudReplicationTarget != nil {
		return true
	}

	return false
}

// SetCloudReplicationTarget gets a reference to the given CloudDeployTarget and assigns it to the CloudReplicationTarget field.
func (o *RestoreObject) SetCloudReplicationTarget(v CloudDeployTarget) {
	o.CloudReplicationTarget = &v
}

// GetEntity returns the Entity field value if set, zero value otherwise.
func (o *RestoreObject) GetEntity() EntityProto {
	if o == nil || o.Entity == nil {
		var ret EntityProto
		return ret
	}
	return *o.Entity
}

// GetEntityOk returns a tuple with the Entity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreObject) GetEntityOk() (*EntityProto, bool) {
	if o == nil || o.Entity == nil {
		return nil, false
	}
	return o.Entity, true
}

// HasEntity returns a boolean if a field has been set.
func (o *RestoreObject) HasEntity() bool {
	if o != nil && o.Entity != nil {
		return true
	}

	return false
}

// SetEntity gets a reference to the given EntityProto and assigns it to the Entity field.
func (o *RestoreObject) SetEntity(v EntityProto) {
	o.Entity = &v
}

// GetJobId returns the JobId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreObject) GetJobId() int64 {
	if o == nil || o.JobId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.JobId.Get()
}

// GetJobIdOk returns a tuple with the JobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreObject) GetJobIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.JobId.Get(), o.JobId.IsSet()
}

// HasJobId returns a boolean if a field has been set.
func (o *RestoreObject) HasJobId() bool {
	if o != nil && o.JobId.IsSet() {
		return true
	}

	return false
}

// SetJobId gets a reference to the given NullableInt64 and assigns it to the JobId field.
func (o *RestoreObject) SetJobId(v int64) {
	o.JobId.Set(&v)
}
// SetJobIdNil sets the value for JobId to be an explicit nil
func (o *RestoreObject) SetJobIdNil() {
	o.JobId.Set(nil)
}

// UnsetJobId ensures that no value is present for JobId, not even an explicit nil
func (o *RestoreObject) UnsetJobId() {
	o.JobId.Unset()
}

// GetJobInstanceId returns the JobInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreObject) GetJobInstanceId() int64 {
	if o == nil || o.JobInstanceId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.JobInstanceId.Get()
}

// GetJobInstanceIdOk returns a tuple with the JobInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreObject) GetJobInstanceIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.JobInstanceId.Get(), o.JobInstanceId.IsSet()
}

// HasJobInstanceId returns a boolean if a field has been set.
func (o *RestoreObject) HasJobInstanceId() bool {
	if o != nil && o.JobInstanceId.IsSet() {
		return true
	}

	return false
}

// SetJobInstanceId gets a reference to the given NullableInt64 and assigns it to the JobInstanceId field.
func (o *RestoreObject) SetJobInstanceId(v int64) {
	o.JobInstanceId.Set(&v)
}
// SetJobInstanceIdNil sets the value for JobInstanceId to be an explicit nil
func (o *RestoreObject) SetJobInstanceIdNil() {
	o.JobInstanceId.Set(nil)
}

// UnsetJobInstanceId ensures that no value is present for JobInstanceId, not even an explicit nil
func (o *RestoreObject) UnsetJobInstanceId() {
	o.JobInstanceId.Unset()
}

// GetJobUid returns the JobUid field value if set, zero value otherwise.
func (o *RestoreObject) GetJobUid() UniversalIdProto {
	if o == nil || o.JobUid == nil {
		var ret UniversalIdProto
		return ret
	}
	return *o.JobUid
}

// GetJobUidOk returns a tuple with the JobUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreObject) GetJobUidOk() (*UniversalIdProto, bool) {
	if o == nil || o.JobUid == nil {
		return nil, false
	}
	return o.JobUid, true
}

// HasJobUid returns a boolean if a field has been set.
func (o *RestoreObject) HasJobUid() bool {
	if o != nil && o.JobUid != nil {
		return true
	}

	return false
}

// SetJobUid gets a reference to the given UniversalIdProto and assigns it to the JobUid field.
func (o *RestoreObject) SetJobUid(v UniversalIdProto) {
	o.JobUid = &v
}

// GetNosqlRecoverParams returns the NosqlRecoverParams field value if set, zero value otherwise.
func (o *RestoreObject) GetNosqlRecoverParams() NoSqlRecoverParams {
	if o == nil || o.NosqlRecoverParams == nil {
		var ret NoSqlRecoverParams
		return ret
	}
	return *o.NosqlRecoverParams
}

// GetNosqlRecoverParamsOk returns a tuple with the NosqlRecoverParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreObject) GetNosqlRecoverParamsOk() (*NoSqlRecoverParams, bool) {
	if o == nil || o.NosqlRecoverParams == nil {
		return nil, false
	}
	return o.NosqlRecoverParams, true
}

// HasNosqlRecoverParams returns a boolean if a field has been set.
func (o *RestoreObject) HasNosqlRecoverParams() bool {
	if o != nil && o.NosqlRecoverParams != nil {
		return true
	}

	return false
}

// SetNosqlRecoverParams gets a reference to the given NoSqlRecoverParams and assigns it to the NosqlRecoverParams field.
func (o *RestoreObject) SetNosqlRecoverParams(v NoSqlRecoverParams) {
	o.NosqlRecoverParams = &v
}

// GetParentSource returns the ParentSource field value if set, zero value otherwise.
func (o *RestoreObject) GetParentSource() EntityProto {
	if o == nil || o.ParentSource == nil {
		var ret EntityProto
		return ret
	}
	return *o.ParentSource
}

// GetParentSourceOk returns a tuple with the ParentSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreObject) GetParentSourceOk() (*EntityProto, bool) {
	if o == nil || o.ParentSource == nil {
		return nil, false
	}
	return o.ParentSource, true
}

// HasParentSource returns a boolean if a field has been set.
func (o *RestoreObject) HasParentSource() bool {
	if o != nil && o.ParentSource != nil {
		return true
	}

	return false
}

// SetParentSource gets a reference to the given EntityProto and assigns it to the ParentSource field.
func (o *RestoreObject) SetParentSource(v EntityProto) {
	o.ParentSource = &v
}

// GetPointInTimeRestoreTimeUsecs returns the PointInTimeRestoreTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreObject) GetPointInTimeRestoreTimeUsecs() int64 {
	if o == nil || o.PointInTimeRestoreTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.PointInTimeRestoreTimeUsecs.Get()
}

// GetPointInTimeRestoreTimeUsecsOk returns a tuple with the PointInTimeRestoreTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreObject) GetPointInTimeRestoreTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PointInTimeRestoreTimeUsecs.Get(), o.PointInTimeRestoreTimeUsecs.IsSet()
}

// HasPointInTimeRestoreTimeUsecs returns a boolean if a field has been set.
func (o *RestoreObject) HasPointInTimeRestoreTimeUsecs() bool {
	if o != nil && o.PointInTimeRestoreTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetPointInTimeRestoreTimeUsecs gets a reference to the given NullableInt64 and assigns it to the PointInTimeRestoreTimeUsecs field.
func (o *RestoreObject) SetPointInTimeRestoreTimeUsecs(v int64) {
	o.PointInTimeRestoreTimeUsecs.Set(&v)
}
// SetPointInTimeRestoreTimeUsecsNil sets the value for PointInTimeRestoreTimeUsecs to be an explicit nil
func (o *RestoreObject) SetPointInTimeRestoreTimeUsecsNil() {
	o.PointInTimeRestoreTimeUsecs.Set(nil)
}

// UnsetPointInTimeRestoreTimeUsecs ensures that no value is present for PointInTimeRestoreTimeUsecs, not even an explicit nil
func (o *RestoreObject) UnsetPointInTimeRestoreTimeUsecs() {
	o.PointInTimeRestoreTimeUsecs.Unset()
}

// GetRestoreAcropolisVmParam returns the RestoreAcropolisVmParam field value if set, zero value otherwise.
func (o *RestoreObject) GetRestoreAcropolisVmParam() RestoreAcropolisVMParam {
	if o == nil || o.RestoreAcropolisVmParam == nil {
		var ret RestoreAcropolisVMParam
		return ret
	}
	return *o.RestoreAcropolisVmParam
}

// GetRestoreAcropolisVmParamOk returns a tuple with the RestoreAcropolisVmParam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreObject) GetRestoreAcropolisVmParamOk() (*RestoreAcropolisVMParam, bool) {
	if o == nil || o.RestoreAcropolisVmParam == nil {
		return nil, false
	}
	return o.RestoreAcropolisVmParam, true
}

// HasRestoreAcropolisVmParam returns a boolean if a field has been set.
func (o *RestoreObject) HasRestoreAcropolisVmParam() bool {
	if o != nil && o.RestoreAcropolisVmParam != nil {
		return true
	}

	return false
}

// SetRestoreAcropolisVmParam gets a reference to the given RestoreAcropolisVMParam and assigns it to the RestoreAcropolisVmParam field.
func (o *RestoreObject) SetRestoreAcropolisVmParam(v RestoreAcropolisVMParam) {
	o.RestoreAcropolisVmParam = &v
}

// GetSnapshotRelativeDirPath returns the SnapshotRelativeDirPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreObject) GetSnapshotRelativeDirPath() string {
	if o == nil || o.SnapshotRelativeDirPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.SnapshotRelativeDirPath.Get()
}

// GetSnapshotRelativeDirPathOk returns a tuple with the SnapshotRelativeDirPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreObject) GetSnapshotRelativeDirPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SnapshotRelativeDirPath.Get(), o.SnapshotRelativeDirPath.IsSet()
}

// HasSnapshotRelativeDirPath returns a boolean if a field has been set.
func (o *RestoreObject) HasSnapshotRelativeDirPath() bool {
	if o != nil && o.SnapshotRelativeDirPath.IsSet() {
		return true
	}

	return false
}

// SetSnapshotRelativeDirPath gets a reference to the given NullableString and assigns it to the SnapshotRelativeDirPath field.
func (o *RestoreObject) SetSnapshotRelativeDirPath(v string) {
	o.SnapshotRelativeDirPath.Set(&v)
}
// SetSnapshotRelativeDirPathNil sets the value for SnapshotRelativeDirPath to be an explicit nil
func (o *RestoreObject) SetSnapshotRelativeDirPathNil() {
	o.SnapshotRelativeDirPath.Set(nil)
}

// UnsetSnapshotRelativeDirPath ensures that no value is present for SnapshotRelativeDirPath, not even an explicit nil
func (o *RestoreObject) UnsetSnapshotRelativeDirPath() {
	o.SnapshotRelativeDirPath.Unset()
}

// GetStartTimeUsecs returns the StartTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreObject) GetStartTimeUsecs() int64 {
	if o == nil || o.StartTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.StartTimeUsecs.Get()
}

// GetStartTimeUsecsOk returns a tuple with the StartTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreObject) GetStartTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartTimeUsecs.Get(), o.StartTimeUsecs.IsSet()
}

// HasStartTimeUsecs returns a boolean if a field has been set.
func (o *RestoreObject) HasStartTimeUsecs() bool {
	if o != nil && o.StartTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetStartTimeUsecs gets a reference to the given NullableInt64 and assigns it to the StartTimeUsecs field.
func (o *RestoreObject) SetStartTimeUsecs(v int64) {
	o.StartTimeUsecs.Set(&v)
}
// SetStartTimeUsecsNil sets the value for StartTimeUsecs to be an explicit nil
func (o *RestoreObject) SetStartTimeUsecsNil() {
	o.StartTimeUsecs.Set(nil)
}

// UnsetStartTimeUsecs ensures that no value is present for StartTimeUsecs, not even an explicit nil
func (o *RestoreObject) UnsetStartTimeUsecs() {
	o.StartTimeUsecs.Unset()
}

// GetViewName returns the ViewName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreObject) GetViewName() string {
	if o == nil || o.ViewName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ViewName.Get()
}

// GetViewNameOk returns a tuple with the ViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreObject) GetViewNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewName.Get(), o.ViewName.IsSet()
}

// HasViewName returns a boolean if a field has been set.
func (o *RestoreObject) HasViewName() bool {
	if o != nil && o.ViewName.IsSet() {
		return true
	}

	return false
}

// SetViewName gets a reference to the given NullableString and assigns it to the ViewName field.
func (o *RestoreObject) SetViewName(v string) {
	o.ViewName.Set(&v)
}
// SetViewNameNil sets the value for ViewName to be an explicit nil
func (o *RestoreObject) SetViewNameNil() {
	o.ViewName.Set(nil)
}

// UnsetViewName ensures that no value is present for ViewName, not even an explicit nil
func (o *RestoreObject) UnsetViewName() {
	o.ViewName.Unset()
}

// GetVmHadIndependentDisks returns the VmHadIndependentDisks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreObject) GetVmHadIndependentDisks() bool {
	if o == nil || o.VmHadIndependentDisks.Get() == nil {
		var ret bool
		return ret
	}
	return *o.VmHadIndependentDisks.Get()
}

// GetVmHadIndependentDisksOk returns a tuple with the VmHadIndependentDisks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreObject) GetVmHadIndependentDisksOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VmHadIndependentDisks.Get(), o.VmHadIndependentDisks.IsSet()
}

// HasVmHadIndependentDisks returns a boolean if a field has been set.
func (o *RestoreObject) HasVmHadIndependentDisks() bool {
	if o != nil && o.VmHadIndependentDisks.IsSet() {
		return true
	}

	return false
}

// SetVmHadIndependentDisks gets a reference to the given NullableBool and assigns it to the VmHadIndependentDisks field.
func (o *RestoreObject) SetVmHadIndependentDisks(v bool) {
	o.VmHadIndependentDisks.Set(&v)
}
// SetVmHadIndependentDisksNil sets the value for VmHadIndependentDisks to be an explicit nil
func (o *RestoreObject) SetVmHadIndependentDisksNil() {
	o.VmHadIndependentDisks.Set(nil)
}

// UnsetVmHadIndependentDisks ensures that no value is present for VmHadIndependentDisks, not even an explicit nil
func (o *RestoreObject) UnsetVmHadIndependentDisks() {
	o.VmHadIndependentDisks.Unset()
}

func (o RestoreObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ArchivalTarget != nil {
		toSerialize["archivalTarget"] = o.ArchivalTarget
	}
	if o.AttemptNum.IsSet() {
		toSerialize["attemptNum"] = o.AttemptNum.Get()
	}
	if o.CloudDeployTarget != nil {
		toSerialize["cloudDeployTarget"] = o.CloudDeployTarget
	}
	if o.CloudReplicationTarget != nil {
		toSerialize["cloudReplicationTarget"] = o.CloudReplicationTarget
	}
	if o.Entity != nil {
		toSerialize["entity"] = o.Entity
	}
	if o.JobId.IsSet() {
		toSerialize["jobId"] = o.JobId.Get()
	}
	if o.JobInstanceId.IsSet() {
		toSerialize["jobInstanceId"] = o.JobInstanceId.Get()
	}
	if o.JobUid != nil {
		toSerialize["jobUid"] = o.JobUid
	}
	if o.NosqlRecoverParams != nil {
		toSerialize["nosqlRecoverParams"] = o.NosqlRecoverParams
	}
	if o.ParentSource != nil {
		toSerialize["parentSource"] = o.ParentSource
	}
	if o.PointInTimeRestoreTimeUsecs.IsSet() {
		toSerialize["pointInTimeRestoreTimeUsecs"] = o.PointInTimeRestoreTimeUsecs.Get()
	}
	if o.RestoreAcropolisVmParam != nil {
		toSerialize["restoreAcropolisVmParam"] = o.RestoreAcropolisVmParam
	}
	if o.SnapshotRelativeDirPath.IsSet() {
		toSerialize["snapshotRelativeDirPath"] = o.SnapshotRelativeDirPath.Get()
	}
	if o.StartTimeUsecs.IsSet() {
		toSerialize["startTimeUsecs"] = o.StartTimeUsecs.Get()
	}
	if o.ViewName.IsSet() {
		toSerialize["viewName"] = o.ViewName.Get()
	}
	if o.VmHadIndependentDisks.IsSet() {
		toSerialize["vmHadIndependentDisks"] = o.VmHadIndependentDisks.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRestoreObject struct {
	value *RestoreObject
	isSet bool
}

func (v NullableRestoreObject) Get() *RestoreObject {
	return v.value
}

func (v *NullableRestoreObject) Set(val *RestoreObject) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreObject) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreObject(val *RestoreObject) *NullableRestoreObject {
	return &NullableRestoreObject{value: val, isSet: true}
}

func (v NullableRestoreObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


