/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// MongoDBCluster Specifies an Object containing information about a mongodb cluster.
type MongoDBCluster struct {
	// Seeds of this MongoDB Cluster.
	Seeds []string `json:"seeds,omitempty"`
}

// NewMongoDBCluster instantiates a new MongoDBCluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMongoDBCluster() *MongoDBCluster {
	this := MongoDBCluster{}
	return &this
}

// NewMongoDBClusterWithDefaults instantiates a new MongoDBCluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMongoDBClusterWithDefaults() *MongoDBCluster {
	this := MongoDBCluster{}
	return &this
}

// GetSeeds returns the Seeds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MongoDBCluster) GetSeeds() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Seeds
}

// GetSeedsOk returns a tuple with the Seeds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MongoDBCluster) GetSeedsOk() (*[]string, bool) {
	if o == nil || o.Seeds == nil {
		return nil, false
	}
	return &o.Seeds, true
}

// HasSeeds returns a boolean if a field has been set.
func (o *MongoDBCluster) HasSeeds() bool {
	if o != nil && o.Seeds != nil {
		return true
	}

	return false
}

// SetSeeds gets a reference to the given []string and assigns it to the Seeds field.
func (o *MongoDBCluster) SetSeeds(v []string) {
	o.Seeds = v
}

func (o MongoDBCluster) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Seeds != nil {
		toSerialize["seeds"] = o.Seeds
	}
	return json.Marshal(toSerialize)
}

type NullableMongoDBCluster struct {
	value *MongoDBCluster
	isSet bool
}

func (v NullableMongoDBCluster) Get() *MongoDBCluster {
	return v.value
}

func (v *NullableMongoDBCluster) Set(val *MongoDBCluster) {
	v.value = val
	v.isSet = true
}

func (v NullableMongoDBCluster) IsSet() bool {
	return v.isSet
}

func (v *NullableMongoDBCluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMongoDBCluster(val *MongoDBCluster) *NullableMongoDBCluster {
	return &NullableMongoDBCluster{value: val, isSet: true}
}

func (v NullableMongoDBCluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMongoDBCluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


