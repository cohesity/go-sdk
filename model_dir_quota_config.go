/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// DirQuotaConfig Specifies the configuration object of a directory quota.
type DirQuotaConfig struct {
	// Specifies whether the directory quota is enabled on the view.
	Enabled NullableBool `json:"enabled,omitempty"`
	// Specifies the name of the view.
	ViewName NullableString `json:"viewName,omitempty"`
}

// NewDirQuotaConfig instantiates a new DirQuotaConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDirQuotaConfig() *DirQuotaConfig {
	this := DirQuotaConfig{}
	return &this
}

// NewDirQuotaConfigWithDefaults instantiates a new DirQuotaConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDirQuotaConfigWithDefaults() *DirQuotaConfig {
	this := DirQuotaConfig{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DirQuotaConfig) GetEnabled() bool {
	if o == nil || o.Enabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Enabled.Get()
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DirQuotaConfig) GetEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Enabled.Get(), o.Enabled.IsSet()
}

// HasEnabled returns a boolean if a field has been set.
func (o *DirQuotaConfig) HasEnabled() bool {
	if o != nil && o.Enabled.IsSet() {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given NullableBool and assigns it to the Enabled field.
func (o *DirQuotaConfig) SetEnabled(v bool) {
	o.Enabled.Set(&v)
}
// SetEnabledNil sets the value for Enabled to be an explicit nil
func (o *DirQuotaConfig) SetEnabledNil() {
	o.Enabled.Set(nil)
}

// UnsetEnabled ensures that no value is present for Enabled, not even an explicit nil
func (o *DirQuotaConfig) UnsetEnabled() {
	o.Enabled.Unset()
}

// GetViewName returns the ViewName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DirQuotaConfig) GetViewName() string {
	if o == nil || o.ViewName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ViewName.Get()
}

// GetViewNameOk returns a tuple with the ViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DirQuotaConfig) GetViewNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewName.Get(), o.ViewName.IsSet()
}

// HasViewName returns a boolean if a field has been set.
func (o *DirQuotaConfig) HasViewName() bool {
	if o != nil && o.ViewName.IsSet() {
		return true
	}

	return false
}

// SetViewName gets a reference to the given NullableString and assigns it to the ViewName field.
func (o *DirQuotaConfig) SetViewName(v string) {
	o.ViewName.Set(&v)
}
// SetViewNameNil sets the value for ViewName to be an explicit nil
func (o *DirQuotaConfig) SetViewNameNil() {
	o.ViewName.Set(nil)
}

// UnsetViewName ensures that no value is present for ViewName, not even an explicit nil
func (o *DirQuotaConfig) UnsetViewName() {
	o.ViewName.Unset()
}

func (o DirQuotaConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled.IsSet() {
		toSerialize["enabled"] = o.Enabled.Get()
	}
	if o.ViewName.IsSet() {
		toSerialize["viewName"] = o.ViewName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDirQuotaConfig struct {
	value *DirQuotaConfig
	isSet bool
}

func (v NullableDirQuotaConfig) Get() *DirQuotaConfig {
	return v.value
}

func (v *NullableDirQuotaConfig) Set(val *DirQuotaConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableDirQuotaConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableDirQuotaConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDirQuotaConfig(val *DirQuotaConfig) *NullableDirQuotaConfig {
	return &NullableDirQuotaConfig{value: val, isSet: true}
}

func (v NullableDirQuotaConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDirQuotaConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


