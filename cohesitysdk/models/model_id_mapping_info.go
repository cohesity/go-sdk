/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// IdMappingInfo Specifies the params required to update the user id mapping info of an Active Directory.
type IdMappingInfo struct {
	FallbackUserIdMappingInfo *UserIdMapping `json:"fallbackUserIdMappingInfo,omitempty"`
	// Specifies the SID of the Active Directory domain user to be mapped to Unix root user.
	UnixRootSid NullableString `json:"unixRootSid,omitempty"`
	UserIdMappingInfo *UserIdMapping `json:"userIdMappingInfo,omitempty"`
}

// NewIdMappingInfo instantiates a new IdMappingInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdMappingInfo() *IdMappingInfo {
	this := IdMappingInfo{}
	return &this
}

// NewIdMappingInfoWithDefaults instantiates a new IdMappingInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdMappingInfoWithDefaults() *IdMappingInfo {
	this := IdMappingInfo{}
	return &this
}

// GetFallbackUserIdMappingInfo returns the FallbackUserIdMappingInfo field value if set, zero value otherwise.
func (o *IdMappingInfo) GetFallbackUserIdMappingInfo() UserIdMapping {
	if o == nil || o.FallbackUserIdMappingInfo == nil {
		var ret UserIdMapping
		return ret
	}
	return *o.FallbackUserIdMappingInfo
}

// GetFallbackUserIdMappingInfoOk returns a tuple with the FallbackUserIdMappingInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdMappingInfo) GetFallbackUserIdMappingInfoOk() (*UserIdMapping, bool) {
	if o == nil || o.FallbackUserIdMappingInfo == nil {
		return nil, false
	}
	return o.FallbackUserIdMappingInfo, true
}

// HasFallbackUserIdMappingInfo returns a boolean if a field has been set.
func (o *IdMappingInfo) HasFallbackUserIdMappingInfo() bool {
	if o != nil && o.FallbackUserIdMappingInfo != nil {
		return true
	}

	return false
}

// SetFallbackUserIdMappingInfo gets a reference to the given UserIdMapping and assigns it to the FallbackUserIdMappingInfo field.
func (o *IdMappingInfo) SetFallbackUserIdMappingInfo(v UserIdMapping) {
	o.FallbackUserIdMappingInfo = &v
}

// GetUnixRootSid returns the UnixRootSid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdMappingInfo) GetUnixRootSid() string {
	if o == nil || o.UnixRootSid.Get() == nil {
		var ret string
		return ret
	}
	return *o.UnixRootSid.Get()
}

// GetUnixRootSidOk returns a tuple with the UnixRootSid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdMappingInfo) GetUnixRootSidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UnixRootSid.Get(), o.UnixRootSid.IsSet()
}

// HasUnixRootSid returns a boolean if a field has been set.
func (o *IdMappingInfo) HasUnixRootSid() bool {
	if o != nil && o.UnixRootSid.IsSet() {
		return true
	}

	return false
}

// SetUnixRootSid gets a reference to the given NullableString and assigns it to the UnixRootSid field.
func (o *IdMappingInfo) SetUnixRootSid(v string) {
	o.UnixRootSid.Set(&v)
}
// SetUnixRootSidNil sets the value for UnixRootSid to be an explicit nil
func (o *IdMappingInfo) SetUnixRootSidNil() {
	o.UnixRootSid.Set(nil)
}

// UnsetUnixRootSid ensures that no value is present for UnixRootSid, not even an explicit nil
func (o *IdMappingInfo) UnsetUnixRootSid() {
	o.UnixRootSid.Unset()
}

// GetUserIdMappingInfo returns the UserIdMappingInfo field value if set, zero value otherwise.
func (o *IdMappingInfo) GetUserIdMappingInfo() UserIdMapping {
	if o == nil || o.UserIdMappingInfo == nil {
		var ret UserIdMapping
		return ret
	}
	return *o.UserIdMappingInfo
}

// GetUserIdMappingInfoOk returns a tuple with the UserIdMappingInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdMappingInfo) GetUserIdMappingInfoOk() (*UserIdMapping, bool) {
	if o == nil || o.UserIdMappingInfo == nil {
		return nil, false
	}
	return o.UserIdMappingInfo, true
}

// HasUserIdMappingInfo returns a boolean if a field has been set.
func (o *IdMappingInfo) HasUserIdMappingInfo() bool {
	if o != nil && o.UserIdMappingInfo != nil {
		return true
	}

	return false
}

// SetUserIdMappingInfo gets a reference to the given UserIdMapping and assigns it to the UserIdMappingInfo field.
func (o *IdMappingInfo) SetUserIdMappingInfo(v UserIdMapping) {
	o.UserIdMappingInfo = &v
}

func (o IdMappingInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FallbackUserIdMappingInfo != nil {
		toSerialize["fallbackUserIdMappingInfo"] = o.FallbackUserIdMappingInfo
	}
	if o.UnixRootSid.IsSet() {
		toSerialize["unixRootSid"] = o.UnixRootSid.Get()
	}
	if o.UserIdMappingInfo != nil {
		toSerialize["userIdMappingInfo"] = o.UserIdMappingInfo
	}
	return json.Marshal(toSerialize)
}

type NullableIdMappingInfo struct {
	value *IdMappingInfo
	isSet bool
}

func (v NullableIdMappingInfo) Get() *IdMappingInfo {
	return v.value
}

func (v *NullableIdMappingInfo) Set(val *IdMappingInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableIdMappingInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableIdMappingInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdMappingInfo(val *IdMappingInfo) *NullableIdMappingInfo {
	return &NullableIdMappingInfo{value: val, isSet: true}
}

func (v NullableIdMappingInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdMappingInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


