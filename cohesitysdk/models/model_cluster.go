/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// Cluster Specifies information about the Cohesity Cluster.
type Cluster struct {
	AppsSubnet *Subnet `json:"appsSubnet,omitempty"`
	// Specifies the number of racks in cluster with at least one rack assigned.
	AssignedRacksCount NullableInt32 `json:"assignedRacksCount,omitempty"`
	// Information about storage available for metadata
	AvailableMetadataSpace NullableInt64 `json:"availableMetadataSpace,omitempty"`
	// Specifies whether UI banner is enabled on the cluster or not. When banner is enabled, UI will make an additional API call to fetch the banner and show at the login page.
	BannerEnabled NullableBool `json:"bannerEnabled,omitempty"`
	// Specifies the number of chassis in cluster.
	ChassisCount NullableInt32 `json:"chassisCount,omitempty"`
	ClusterAuditLogConfig *ClusterAuditLogConfiguration `json:"clusterAuditLogConfig,omitempty"`
	// Specifies the current release of the Cohesity software running on this Cohesity Cluster.
	ClusterSoftwareVersion NullableString `json:"clusterSoftwareVersion,omitempty"`
	// Specifies the type of Cluster such as kPhysical. 'kPhysical' indicates the Cohesity Cluster is hosted directly on hardware. 'kVirtualRobo' indicates the Cohesity Cluster is hosted in a VM on a ESXi Host of a VMware vCenter Server using Cohesity's Virtual Edition. 'kMicrosoftCloud' indicates the Cohesity Cluster is hosted in a VM on Microsoft Azure using Cohesity's Cloud Edition. 'kAmazonCloud' indicates the Cohesity Cluster is hosted in a VM on Amazon S3 using Cohesity's Cloud Edition. 'kGoogleCloud' indicates the Cohesity Cluster is hosted in a VM on Google Cloud Platform using Cohesity's Cloud Edition.
	ClusterType NullableString `json:"clusterType,omitempty"`
	// Specifies the time when the Cohesity Cluster was created. This value is specified as a Unix epoch Timestamp (in microseconds).
	CreatedTimeMsecs NullableInt64 `json:"createdTimeMsecs,omitempty"`
	// Specifies the time scheduled by the Cohesity Cluster to start the current running operation.
	CurrentOpScheduledTimeSecs NullableInt64 `json:"currentOpScheduledTimeSecs,omitempty"`
	// Specifies the current Cluster-level operation in progress. 'kUpgrade' indicates the Cohesity Cluster is upgrading to a new release. 'kRemoveNode' indicates the Cohesity Cluster is removing a Node from the Cluster. 'kNone' indicates no action is occurring on the Cohesity Cluster. 'kDestroy' indicates the Cohesity Cluster is getting destoryed. 'kClean' indicates the Cohesity Cluster is getting cleaned. 'kRestartServices' indicates the Cohesity Cluster is restarting the services.
	CurrentOperation NullableString `json:"currentOperation,omitempty"`
	// Specifies the current system time on the Cohesity Cluster. This value is specified as a Unix epoch Timestamp (in microseconds).
	CurrentTimeMsecs NullableInt64 `json:"currentTimeMsecs,omitempty"`
	// Array of IP Addresses of DNS Servers.  Specifies the IP addresses of the DNS Servers used by the Cohesity Cluster.
	DnsServerIps []string `json:"dnsServerIps,omitempty"`
	// Array of Domain Names.  The first domain name specified in the array is the fully qualified domain name assigned to the Cohesity Cluster. Any additional domain names specified are used for the domain search list for hostname look-up.
	DomainNames []string `json:"domainNames,omitempty"`
	// Specifies if Cohesity can receive monitoring information from the Cohesity Cluster. If 'true', remote monitoring of the Cohesity Cluster is allowed.
	EnableActiveMonitoring NullableBool `json:"enableActiveMonitoring,omitempty"`
	// If 'true', Cohesity's upgrade server is polled for new releases.
	EnableUpgradePkgPolling NullableBool `json:"enableUpgradePkgPolling,omitempty"`
	// If 'true', the entire Cohesity Cluster is encrypted including all View Boxes.
	EncryptionEnabled NullableBool `json:"encryptionEnabled,omitempty"`
	// Specifies the period of time (in seconds) when encryption keys are rotated. By default, the encryption keys are rotated every 77760000 seconds (30 days).
	EncryptionKeyRotationPeriodSecs NullableInt64 `json:"encryptionKeyRotationPeriodSecs,omitempty"`
	// Specifies the End User License Agreement (EULA) acceptance information.
	EulaConfig NullableEulaConfig `json:"eulaConfig,omitempty"`
	// Specifies the level which 'MetadataFaultToleranceFactor' applies to. 'kNode' indicates 'MetadataFaultToleranceFactor' applies to Node level. 'kChassis' indicates 'MetadataFaultToleranceFactor' applies to Chassis level. 'kRack' indicates 'MetadataFaultToleranceFactor' applies to Rack level.
	FaultToleranceLevel NullableString `json:"faultToleranceLevel,omitempty"`
	FilerAuditLogConfig *FilerAuditLogConfiguration `json:"filerAuditLogConfig,omitempty"`
	// Specifies if the Cohesity Cluster should operate in the FIPS mode, which is compliant with the Federal Information Processing Standard 140-2 certification.
	FipsModeEnabled NullableBool `json:"fipsModeEnabled,omitempty"`
	// Specifies the gateway IP address.
	Gateway NullableString `json:"gateway,omitempty"`
	// Specifies whether Google Analytics is enabled.
	GoogleAnalyticsEnabled NullableBool `json:"googleAnalyticsEnabled,omitempty"`
	HardwareInfo *ClusterHardwareInfo `json:"hardwareInfo,omitempty"`
	// Specifies the unique id of Cohesity Cluster.
	Id NullableInt64 `json:"id,omitempty"`
	// Specifies the unique incarnation id of the Cohesity Cluster.
	IncarnationId NullableInt64 `json:"incarnationId,omitempty"`
	// IP preference
	IpPreference NullableInt32 `json:"ipPreference,omitempty"`
	// Specifies what version of the documentation is used. If 'true', the version of documentation stored locally on the Cohesity Cluster is used. If 'false', the documentation stored on a Cohesity Web Server is used. The default is 'false'. Cohesity recommends accessing the Help from the Cohesity Web site which provides the newest and most complete version of Help.
	IsDocumentationLocal NullableBool `json:"isDocumentationLocal,omitempty"`
	// Specifies the language and locale for this Cohesity Cluster.
	LanguageLocale NullableString `json:"languageLocale,omitempty"`
	// Specifies the Licensing State information.
	LicenseState NullableLicenseState `json:"licenseState,omitempty"`
	// Domain name for SMB local authentication.
	LocalAuthDomainName NullableString `json:"localAuthDomainName,omitempty"`
	// Specifies whether to enable local groups on cluster. Once it is enabled, it cannot be disabled.
	LocalGroupsEnabled NullableBool `json:"localGroupsEnabled,omitempty"`
	// Specifies metadata fault tolerance setting for the cluster. This denotes the number of simultaneous failures[node] supported by metadata services like gandalf and scribe.
	MetadataFaultToleranceFactor NullableInt32 `json:"metadataFaultToleranceFactor,omitempty"`
	// Specifies if multi tenancy is enabled in the cluster. Authentication & Authorization will always use tenant_id, however, some UI elements may be disabled when multi tenancy is disabled.
	MultiTenancyEnabled NullableBool `json:"multiTenancyEnabled,omitempty"`
	// Specifies the name of the Cohesity Cluster.
	Name NullableString `json:"name,omitempty"`
	// Specifies the number of Nodes in the Cohesity Cluster.
	NodeCount NullableInt64 `json:"nodeCount,omitempty"`
	// IP addresses of nodes in the cluster
	NodeIps NullableString `json:"nodeIps,omitempty"`
	NtpSettings *NtpSettingsConfig `json:"ntpSettings,omitempty"`
	// Specifies the rebalance delay in seconds for cluster PcieSSD storage tier.
	PcieSsdTierRebalanceDelaySecs NullableInt32 `json:"pcieSsdTierRebalanceDelaySecs,omitempty"`
	// The subnet reserved for ProxyVM
	ProxyVMSubnet NullableString `json:"proxyVMSubnet,omitempty"`
	// If 'true', Cohesity's Remote Tunnel is enabled. Cohesity can access the Cluster and provide remote assistance via a Remote Tunnel.
	ReverseTunnelEnabled NullableBool `json:"reverseTunnelEnabled,omitempty"`
	// ReverseTunnelEndTimeMsecs specifies the end time in milliseconds since epoch until when the reverse tunnel will stay enabled.
	ReverseTunnelEndTimeMsecs NullableInt64 `json:"reverseTunnelEndTimeMsecs,omitempty"`
	// Specifies the time series schema info of the cluster.
	SchemaInfoList []SchemaInfo `json:"schemaInfoList,omitempty"`
	// Specifies if Active Directory should be disabled for authentication of SMB shares. If 'true', Active Directory is disabled.
	SmbAdDisabled NullableBool `json:"smbAdDisabled,omitempty"`
	// Specifies whether SMB multichannel is enabled on the cluster. When this is set to true, then any SMB3 multichannel enabled client can establish multiple TCP connection per session to the Server.
	SmbMultichannelEnabled NullableBool `json:"smbMultichannelEnabled,omitempty"`
	Stats *ClusterStats `json:"stats,omitempty"`
	// Specifies if STIG mode is enabled or not.
	StigMode NullableBool `json:"stigMode,omitempty"`
	SupportedConfig *SupportedConfig `json:"supportedConfig,omitempty"`
	// Syslog servers.
	SyslogServers []OldSyslogServer `json:"syslogServers,omitempty"`
	// Specifies the Cohesity release that this Cluster is being upgraded to if an upgrade operation is in progress.
	TargetSoftwareVersion NullableString `json:"targetSoftwareVersion,omitempty"`
	// In case multi tenancy is enabled, this flag controls whether multiple tenants can be placed on the same viewbox. Once set to true, this flag should never become false.
	TenantViewboxSharingEnabled NullableBool `json:"tenantViewboxSharingEnabled,omitempty"`
	// Specifies the timezone to use for showing time in emails, reports, filer audit logs, etc.
	Timezone NullableString `json:"timezone,omitempty"`
	// Specifies if the cluster is in Turbo mode.
	TurboMode NullableBool `json:"turboMode,omitempty"`
	// UsedMetadataSpacePct measures the percentage about storage used for metadata over the total storage available for metadata
	UsedMetadataSpacePct NullableFloat64 `json:"usedMetadataSpacePct,omitempty"`
}

// NewCluster instantiates a new Cluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCluster() *Cluster {
	this := Cluster{}
	return &this
}

// NewClusterWithDefaults instantiates a new Cluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterWithDefaults() *Cluster {
	this := Cluster{}
	return &this
}

// GetAppsSubnet returns the AppsSubnet field value if set, zero value otherwise.
func (o *Cluster) GetAppsSubnet() Subnet {
	if o == nil || o.AppsSubnet == nil {
		var ret Subnet
		return ret
	}
	return *o.AppsSubnet
}

// GetAppsSubnetOk returns a tuple with the AppsSubnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetAppsSubnetOk() (*Subnet, bool) {
	if o == nil || o.AppsSubnet == nil {
		return nil, false
	}
	return o.AppsSubnet, true
}

// HasAppsSubnet returns a boolean if a field has been set.
func (o *Cluster) HasAppsSubnet() bool {
	if o != nil && o.AppsSubnet != nil {
		return true
	}

	return false
}

// SetAppsSubnet gets a reference to the given Subnet and assigns it to the AppsSubnet field.
func (o *Cluster) SetAppsSubnet(v Subnet) {
	o.AppsSubnet = &v
}

// GetAssignedRacksCount returns the AssignedRacksCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetAssignedRacksCount() int32 {
	if o == nil || o.AssignedRacksCount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.AssignedRacksCount.Get()
}

// GetAssignedRacksCountOk returns a tuple with the AssignedRacksCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetAssignedRacksCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AssignedRacksCount.Get(), o.AssignedRacksCount.IsSet()
}

// HasAssignedRacksCount returns a boolean if a field has been set.
func (o *Cluster) HasAssignedRacksCount() bool {
	if o != nil && o.AssignedRacksCount.IsSet() {
		return true
	}

	return false
}

// SetAssignedRacksCount gets a reference to the given NullableInt32 and assigns it to the AssignedRacksCount field.
func (o *Cluster) SetAssignedRacksCount(v int32) {
	o.AssignedRacksCount.Set(&v)
}
// SetAssignedRacksCountNil sets the value for AssignedRacksCount to be an explicit nil
func (o *Cluster) SetAssignedRacksCountNil() {
	o.AssignedRacksCount.Set(nil)
}

// UnsetAssignedRacksCount ensures that no value is present for AssignedRacksCount, not even an explicit nil
func (o *Cluster) UnsetAssignedRacksCount() {
	o.AssignedRacksCount.Unset()
}

// GetAvailableMetadataSpace returns the AvailableMetadataSpace field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetAvailableMetadataSpace() int64 {
	if o == nil || o.AvailableMetadataSpace.Get() == nil {
		var ret int64
		return ret
	}
	return *o.AvailableMetadataSpace.Get()
}

// GetAvailableMetadataSpaceOk returns a tuple with the AvailableMetadataSpace field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetAvailableMetadataSpaceOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AvailableMetadataSpace.Get(), o.AvailableMetadataSpace.IsSet()
}

// HasAvailableMetadataSpace returns a boolean if a field has been set.
func (o *Cluster) HasAvailableMetadataSpace() bool {
	if o != nil && o.AvailableMetadataSpace.IsSet() {
		return true
	}

	return false
}

// SetAvailableMetadataSpace gets a reference to the given NullableInt64 and assigns it to the AvailableMetadataSpace field.
func (o *Cluster) SetAvailableMetadataSpace(v int64) {
	o.AvailableMetadataSpace.Set(&v)
}
// SetAvailableMetadataSpaceNil sets the value for AvailableMetadataSpace to be an explicit nil
func (o *Cluster) SetAvailableMetadataSpaceNil() {
	o.AvailableMetadataSpace.Set(nil)
}

// UnsetAvailableMetadataSpace ensures that no value is present for AvailableMetadataSpace, not even an explicit nil
func (o *Cluster) UnsetAvailableMetadataSpace() {
	o.AvailableMetadataSpace.Unset()
}

// GetBannerEnabled returns the BannerEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetBannerEnabled() bool {
	if o == nil || o.BannerEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.BannerEnabled.Get()
}

// GetBannerEnabledOk returns a tuple with the BannerEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetBannerEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BannerEnabled.Get(), o.BannerEnabled.IsSet()
}

// HasBannerEnabled returns a boolean if a field has been set.
func (o *Cluster) HasBannerEnabled() bool {
	if o != nil && o.BannerEnabled.IsSet() {
		return true
	}

	return false
}

// SetBannerEnabled gets a reference to the given NullableBool and assigns it to the BannerEnabled field.
func (o *Cluster) SetBannerEnabled(v bool) {
	o.BannerEnabled.Set(&v)
}
// SetBannerEnabledNil sets the value for BannerEnabled to be an explicit nil
func (o *Cluster) SetBannerEnabledNil() {
	o.BannerEnabled.Set(nil)
}

// UnsetBannerEnabled ensures that no value is present for BannerEnabled, not even an explicit nil
func (o *Cluster) UnsetBannerEnabled() {
	o.BannerEnabled.Unset()
}

// GetChassisCount returns the ChassisCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetChassisCount() int32 {
	if o == nil || o.ChassisCount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.ChassisCount.Get()
}

// GetChassisCountOk returns a tuple with the ChassisCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetChassisCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ChassisCount.Get(), o.ChassisCount.IsSet()
}

// HasChassisCount returns a boolean if a field has been set.
func (o *Cluster) HasChassisCount() bool {
	if o != nil && o.ChassisCount.IsSet() {
		return true
	}

	return false
}

// SetChassisCount gets a reference to the given NullableInt32 and assigns it to the ChassisCount field.
func (o *Cluster) SetChassisCount(v int32) {
	o.ChassisCount.Set(&v)
}
// SetChassisCountNil sets the value for ChassisCount to be an explicit nil
func (o *Cluster) SetChassisCountNil() {
	o.ChassisCount.Set(nil)
}

// UnsetChassisCount ensures that no value is present for ChassisCount, not even an explicit nil
func (o *Cluster) UnsetChassisCount() {
	o.ChassisCount.Unset()
}

// GetClusterAuditLogConfig returns the ClusterAuditLogConfig field value if set, zero value otherwise.
func (o *Cluster) GetClusterAuditLogConfig() ClusterAuditLogConfiguration {
	if o == nil || o.ClusterAuditLogConfig == nil {
		var ret ClusterAuditLogConfiguration
		return ret
	}
	return *o.ClusterAuditLogConfig
}

// GetClusterAuditLogConfigOk returns a tuple with the ClusterAuditLogConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetClusterAuditLogConfigOk() (*ClusterAuditLogConfiguration, bool) {
	if o == nil || o.ClusterAuditLogConfig == nil {
		return nil, false
	}
	return o.ClusterAuditLogConfig, true
}

// HasClusterAuditLogConfig returns a boolean if a field has been set.
func (o *Cluster) HasClusterAuditLogConfig() bool {
	if o != nil && o.ClusterAuditLogConfig != nil {
		return true
	}

	return false
}

// SetClusterAuditLogConfig gets a reference to the given ClusterAuditLogConfiguration and assigns it to the ClusterAuditLogConfig field.
func (o *Cluster) SetClusterAuditLogConfig(v ClusterAuditLogConfiguration) {
	o.ClusterAuditLogConfig = &v
}

// GetClusterSoftwareVersion returns the ClusterSoftwareVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetClusterSoftwareVersion() string {
	if o == nil || o.ClusterSoftwareVersion.Get() == nil {
		var ret string
		return ret
	}
	return *o.ClusterSoftwareVersion.Get()
}

// GetClusterSoftwareVersionOk returns a tuple with the ClusterSoftwareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetClusterSoftwareVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterSoftwareVersion.Get(), o.ClusterSoftwareVersion.IsSet()
}

// HasClusterSoftwareVersion returns a boolean if a field has been set.
func (o *Cluster) HasClusterSoftwareVersion() bool {
	if o != nil && o.ClusterSoftwareVersion.IsSet() {
		return true
	}

	return false
}

// SetClusterSoftwareVersion gets a reference to the given NullableString and assigns it to the ClusterSoftwareVersion field.
func (o *Cluster) SetClusterSoftwareVersion(v string) {
	o.ClusterSoftwareVersion.Set(&v)
}
// SetClusterSoftwareVersionNil sets the value for ClusterSoftwareVersion to be an explicit nil
func (o *Cluster) SetClusterSoftwareVersionNil() {
	o.ClusterSoftwareVersion.Set(nil)
}

// UnsetClusterSoftwareVersion ensures that no value is present for ClusterSoftwareVersion, not even an explicit nil
func (o *Cluster) UnsetClusterSoftwareVersion() {
	o.ClusterSoftwareVersion.Unset()
}

// GetClusterType returns the ClusterType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetClusterType() string {
	if o == nil || o.ClusterType.Get() == nil {
		var ret string
		return ret
	}
	return *o.ClusterType.Get()
}

// GetClusterTypeOk returns a tuple with the ClusterType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetClusterTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterType.Get(), o.ClusterType.IsSet()
}

// HasClusterType returns a boolean if a field has been set.
func (o *Cluster) HasClusterType() bool {
	if o != nil && o.ClusterType.IsSet() {
		return true
	}

	return false
}

// SetClusterType gets a reference to the given NullableString and assigns it to the ClusterType field.
func (o *Cluster) SetClusterType(v string) {
	o.ClusterType.Set(&v)
}
// SetClusterTypeNil sets the value for ClusterType to be an explicit nil
func (o *Cluster) SetClusterTypeNil() {
	o.ClusterType.Set(nil)
}

// UnsetClusterType ensures that no value is present for ClusterType, not even an explicit nil
func (o *Cluster) UnsetClusterType() {
	o.ClusterType.Unset()
}

// GetCreatedTimeMsecs returns the CreatedTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetCreatedTimeMsecs() int64 {
	if o == nil || o.CreatedTimeMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.CreatedTimeMsecs.Get()
}

// GetCreatedTimeMsecsOk returns a tuple with the CreatedTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetCreatedTimeMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CreatedTimeMsecs.Get(), o.CreatedTimeMsecs.IsSet()
}

// HasCreatedTimeMsecs returns a boolean if a field has been set.
func (o *Cluster) HasCreatedTimeMsecs() bool {
	if o != nil && o.CreatedTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetCreatedTimeMsecs gets a reference to the given NullableInt64 and assigns it to the CreatedTimeMsecs field.
func (o *Cluster) SetCreatedTimeMsecs(v int64) {
	o.CreatedTimeMsecs.Set(&v)
}
// SetCreatedTimeMsecsNil sets the value for CreatedTimeMsecs to be an explicit nil
func (o *Cluster) SetCreatedTimeMsecsNil() {
	o.CreatedTimeMsecs.Set(nil)
}

// UnsetCreatedTimeMsecs ensures that no value is present for CreatedTimeMsecs, not even an explicit nil
func (o *Cluster) UnsetCreatedTimeMsecs() {
	o.CreatedTimeMsecs.Unset()
}

// GetCurrentOpScheduledTimeSecs returns the CurrentOpScheduledTimeSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetCurrentOpScheduledTimeSecs() int64 {
	if o == nil || o.CurrentOpScheduledTimeSecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.CurrentOpScheduledTimeSecs.Get()
}

// GetCurrentOpScheduledTimeSecsOk returns a tuple with the CurrentOpScheduledTimeSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetCurrentOpScheduledTimeSecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CurrentOpScheduledTimeSecs.Get(), o.CurrentOpScheduledTimeSecs.IsSet()
}

// HasCurrentOpScheduledTimeSecs returns a boolean if a field has been set.
func (o *Cluster) HasCurrentOpScheduledTimeSecs() bool {
	if o != nil && o.CurrentOpScheduledTimeSecs.IsSet() {
		return true
	}

	return false
}

// SetCurrentOpScheduledTimeSecs gets a reference to the given NullableInt64 and assigns it to the CurrentOpScheduledTimeSecs field.
func (o *Cluster) SetCurrentOpScheduledTimeSecs(v int64) {
	o.CurrentOpScheduledTimeSecs.Set(&v)
}
// SetCurrentOpScheduledTimeSecsNil sets the value for CurrentOpScheduledTimeSecs to be an explicit nil
func (o *Cluster) SetCurrentOpScheduledTimeSecsNil() {
	o.CurrentOpScheduledTimeSecs.Set(nil)
}

// UnsetCurrentOpScheduledTimeSecs ensures that no value is present for CurrentOpScheduledTimeSecs, not even an explicit nil
func (o *Cluster) UnsetCurrentOpScheduledTimeSecs() {
	o.CurrentOpScheduledTimeSecs.Unset()
}

// GetCurrentOperation returns the CurrentOperation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetCurrentOperation() string {
	if o == nil || o.CurrentOperation.Get() == nil {
		var ret string
		return ret
	}
	return *o.CurrentOperation.Get()
}

// GetCurrentOperationOk returns a tuple with the CurrentOperation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetCurrentOperationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CurrentOperation.Get(), o.CurrentOperation.IsSet()
}

// HasCurrentOperation returns a boolean if a field has been set.
func (o *Cluster) HasCurrentOperation() bool {
	if o != nil && o.CurrentOperation.IsSet() {
		return true
	}

	return false
}

// SetCurrentOperation gets a reference to the given NullableString and assigns it to the CurrentOperation field.
func (o *Cluster) SetCurrentOperation(v string) {
	o.CurrentOperation.Set(&v)
}
// SetCurrentOperationNil sets the value for CurrentOperation to be an explicit nil
func (o *Cluster) SetCurrentOperationNil() {
	o.CurrentOperation.Set(nil)
}

// UnsetCurrentOperation ensures that no value is present for CurrentOperation, not even an explicit nil
func (o *Cluster) UnsetCurrentOperation() {
	o.CurrentOperation.Unset()
}

// GetCurrentTimeMsecs returns the CurrentTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetCurrentTimeMsecs() int64 {
	if o == nil || o.CurrentTimeMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.CurrentTimeMsecs.Get()
}

// GetCurrentTimeMsecsOk returns a tuple with the CurrentTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetCurrentTimeMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CurrentTimeMsecs.Get(), o.CurrentTimeMsecs.IsSet()
}

// HasCurrentTimeMsecs returns a boolean if a field has been set.
func (o *Cluster) HasCurrentTimeMsecs() bool {
	if o != nil && o.CurrentTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetCurrentTimeMsecs gets a reference to the given NullableInt64 and assigns it to the CurrentTimeMsecs field.
func (o *Cluster) SetCurrentTimeMsecs(v int64) {
	o.CurrentTimeMsecs.Set(&v)
}
// SetCurrentTimeMsecsNil sets the value for CurrentTimeMsecs to be an explicit nil
func (o *Cluster) SetCurrentTimeMsecsNil() {
	o.CurrentTimeMsecs.Set(nil)
}

// UnsetCurrentTimeMsecs ensures that no value is present for CurrentTimeMsecs, not even an explicit nil
func (o *Cluster) UnsetCurrentTimeMsecs() {
	o.CurrentTimeMsecs.Unset()
}

// GetDnsServerIps returns the DnsServerIps field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetDnsServerIps() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.DnsServerIps
}

// GetDnsServerIpsOk returns a tuple with the DnsServerIps field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetDnsServerIpsOk() (*[]string, bool) {
	if o == nil || o.DnsServerIps == nil {
		return nil, false
	}
	return &o.DnsServerIps, true
}

// HasDnsServerIps returns a boolean if a field has been set.
func (o *Cluster) HasDnsServerIps() bool {
	if o != nil && o.DnsServerIps != nil {
		return true
	}

	return false
}

// SetDnsServerIps gets a reference to the given []string and assigns it to the DnsServerIps field.
func (o *Cluster) SetDnsServerIps(v []string) {
	o.DnsServerIps = v
}

// GetDomainNames returns the DomainNames field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetDomainNames() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.DomainNames
}

// GetDomainNamesOk returns a tuple with the DomainNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetDomainNamesOk() (*[]string, bool) {
	if o == nil || o.DomainNames == nil {
		return nil, false
	}
	return &o.DomainNames, true
}

// HasDomainNames returns a boolean if a field has been set.
func (o *Cluster) HasDomainNames() bool {
	if o != nil && o.DomainNames != nil {
		return true
	}

	return false
}

// SetDomainNames gets a reference to the given []string and assigns it to the DomainNames field.
func (o *Cluster) SetDomainNames(v []string) {
	o.DomainNames = v
}

// GetEnableActiveMonitoring returns the EnableActiveMonitoring field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetEnableActiveMonitoring() bool {
	if o == nil || o.EnableActiveMonitoring.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableActiveMonitoring.Get()
}

// GetEnableActiveMonitoringOk returns a tuple with the EnableActiveMonitoring field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetEnableActiveMonitoringOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableActiveMonitoring.Get(), o.EnableActiveMonitoring.IsSet()
}

// HasEnableActiveMonitoring returns a boolean if a field has been set.
func (o *Cluster) HasEnableActiveMonitoring() bool {
	if o != nil && o.EnableActiveMonitoring.IsSet() {
		return true
	}

	return false
}

// SetEnableActiveMonitoring gets a reference to the given NullableBool and assigns it to the EnableActiveMonitoring field.
func (o *Cluster) SetEnableActiveMonitoring(v bool) {
	o.EnableActiveMonitoring.Set(&v)
}
// SetEnableActiveMonitoringNil sets the value for EnableActiveMonitoring to be an explicit nil
func (o *Cluster) SetEnableActiveMonitoringNil() {
	o.EnableActiveMonitoring.Set(nil)
}

// UnsetEnableActiveMonitoring ensures that no value is present for EnableActiveMonitoring, not even an explicit nil
func (o *Cluster) UnsetEnableActiveMonitoring() {
	o.EnableActiveMonitoring.Unset()
}

// GetEnableUpgradePkgPolling returns the EnableUpgradePkgPolling field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetEnableUpgradePkgPolling() bool {
	if o == nil || o.EnableUpgradePkgPolling.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableUpgradePkgPolling.Get()
}

// GetEnableUpgradePkgPollingOk returns a tuple with the EnableUpgradePkgPolling field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetEnableUpgradePkgPollingOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableUpgradePkgPolling.Get(), o.EnableUpgradePkgPolling.IsSet()
}

// HasEnableUpgradePkgPolling returns a boolean if a field has been set.
func (o *Cluster) HasEnableUpgradePkgPolling() bool {
	if o != nil && o.EnableUpgradePkgPolling.IsSet() {
		return true
	}

	return false
}

// SetEnableUpgradePkgPolling gets a reference to the given NullableBool and assigns it to the EnableUpgradePkgPolling field.
func (o *Cluster) SetEnableUpgradePkgPolling(v bool) {
	o.EnableUpgradePkgPolling.Set(&v)
}
// SetEnableUpgradePkgPollingNil sets the value for EnableUpgradePkgPolling to be an explicit nil
func (o *Cluster) SetEnableUpgradePkgPollingNil() {
	o.EnableUpgradePkgPolling.Set(nil)
}

// UnsetEnableUpgradePkgPolling ensures that no value is present for EnableUpgradePkgPolling, not even an explicit nil
func (o *Cluster) UnsetEnableUpgradePkgPolling() {
	o.EnableUpgradePkgPolling.Unset()
}

// GetEncryptionEnabled returns the EncryptionEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetEncryptionEnabled() bool {
	if o == nil || o.EncryptionEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EncryptionEnabled.Get()
}

// GetEncryptionEnabledOk returns a tuple with the EncryptionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetEncryptionEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EncryptionEnabled.Get(), o.EncryptionEnabled.IsSet()
}

// HasEncryptionEnabled returns a boolean if a field has been set.
func (o *Cluster) HasEncryptionEnabled() bool {
	if o != nil && o.EncryptionEnabled.IsSet() {
		return true
	}

	return false
}

// SetEncryptionEnabled gets a reference to the given NullableBool and assigns it to the EncryptionEnabled field.
func (o *Cluster) SetEncryptionEnabled(v bool) {
	o.EncryptionEnabled.Set(&v)
}
// SetEncryptionEnabledNil sets the value for EncryptionEnabled to be an explicit nil
func (o *Cluster) SetEncryptionEnabledNil() {
	o.EncryptionEnabled.Set(nil)
}

// UnsetEncryptionEnabled ensures that no value is present for EncryptionEnabled, not even an explicit nil
func (o *Cluster) UnsetEncryptionEnabled() {
	o.EncryptionEnabled.Unset()
}

// GetEncryptionKeyRotationPeriodSecs returns the EncryptionKeyRotationPeriodSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetEncryptionKeyRotationPeriodSecs() int64 {
	if o == nil || o.EncryptionKeyRotationPeriodSecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.EncryptionKeyRotationPeriodSecs.Get()
}

// GetEncryptionKeyRotationPeriodSecsOk returns a tuple with the EncryptionKeyRotationPeriodSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetEncryptionKeyRotationPeriodSecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EncryptionKeyRotationPeriodSecs.Get(), o.EncryptionKeyRotationPeriodSecs.IsSet()
}

// HasEncryptionKeyRotationPeriodSecs returns a boolean if a field has been set.
func (o *Cluster) HasEncryptionKeyRotationPeriodSecs() bool {
	if o != nil && o.EncryptionKeyRotationPeriodSecs.IsSet() {
		return true
	}

	return false
}

// SetEncryptionKeyRotationPeriodSecs gets a reference to the given NullableInt64 and assigns it to the EncryptionKeyRotationPeriodSecs field.
func (o *Cluster) SetEncryptionKeyRotationPeriodSecs(v int64) {
	o.EncryptionKeyRotationPeriodSecs.Set(&v)
}
// SetEncryptionKeyRotationPeriodSecsNil sets the value for EncryptionKeyRotationPeriodSecs to be an explicit nil
func (o *Cluster) SetEncryptionKeyRotationPeriodSecsNil() {
	o.EncryptionKeyRotationPeriodSecs.Set(nil)
}

// UnsetEncryptionKeyRotationPeriodSecs ensures that no value is present for EncryptionKeyRotationPeriodSecs, not even an explicit nil
func (o *Cluster) UnsetEncryptionKeyRotationPeriodSecs() {
	o.EncryptionKeyRotationPeriodSecs.Unset()
}

// GetEulaConfig returns the EulaConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetEulaConfig() EulaConfig {
	if o == nil || o.EulaConfig.Get() == nil {
		var ret EulaConfig
		return ret
	}
	return *o.EulaConfig.Get()
}

// GetEulaConfigOk returns a tuple with the EulaConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetEulaConfigOk() (*EulaConfig, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EulaConfig.Get(), o.EulaConfig.IsSet()
}

// HasEulaConfig returns a boolean if a field has been set.
func (o *Cluster) HasEulaConfig() bool {
	if o != nil && o.EulaConfig.IsSet() {
		return true
	}

	return false
}

// SetEulaConfig gets a reference to the given NullableEulaConfig and assigns it to the EulaConfig field.
func (o *Cluster) SetEulaConfig(v EulaConfig) {
	o.EulaConfig.Set(&v)
}
// SetEulaConfigNil sets the value for EulaConfig to be an explicit nil
func (o *Cluster) SetEulaConfigNil() {
	o.EulaConfig.Set(nil)
}

// UnsetEulaConfig ensures that no value is present for EulaConfig, not even an explicit nil
func (o *Cluster) UnsetEulaConfig() {
	o.EulaConfig.Unset()
}

// GetFaultToleranceLevel returns the FaultToleranceLevel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetFaultToleranceLevel() string {
	if o == nil || o.FaultToleranceLevel.Get() == nil {
		var ret string
		return ret
	}
	return *o.FaultToleranceLevel.Get()
}

// GetFaultToleranceLevelOk returns a tuple with the FaultToleranceLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetFaultToleranceLevelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FaultToleranceLevel.Get(), o.FaultToleranceLevel.IsSet()
}

// HasFaultToleranceLevel returns a boolean if a field has been set.
func (o *Cluster) HasFaultToleranceLevel() bool {
	if o != nil && o.FaultToleranceLevel.IsSet() {
		return true
	}

	return false
}

// SetFaultToleranceLevel gets a reference to the given NullableString and assigns it to the FaultToleranceLevel field.
func (o *Cluster) SetFaultToleranceLevel(v string) {
	o.FaultToleranceLevel.Set(&v)
}
// SetFaultToleranceLevelNil sets the value for FaultToleranceLevel to be an explicit nil
func (o *Cluster) SetFaultToleranceLevelNil() {
	o.FaultToleranceLevel.Set(nil)
}

// UnsetFaultToleranceLevel ensures that no value is present for FaultToleranceLevel, not even an explicit nil
func (o *Cluster) UnsetFaultToleranceLevel() {
	o.FaultToleranceLevel.Unset()
}

// GetFilerAuditLogConfig returns the FilerAuditLogConfig field value if set, zero value otherwise.
func (o *Cluster) GetFilerAuditLogConfig() FilerAuditLogConfiguration {
	if o == nil || o.FilerAuditLogConfig == nil {
		var ret FilerAuditLogConfiguration
		return ret
	}
	return *o.FilerAuditLogConfig
}

// GetFilerAuditLogConfigOk returns a tuple with the FilerAuditLogConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetFilerAuditLogConfigOk() (*FilerAuditLogConfiguration, bool) {
	if o == nil || o.FilerAuditLogConfig == nil {
		return nil, false
	}
	return o.FilerAuditLogConfig, true
}

// HasFilerAuditLogConfig returns a boolean if a field has been set.
func (o *Cluster) HasFilerAuditLogConfig() bool {
	if o != nil && o.FilerAuditLogConfig != nil {
		return true
	}

	return false
}

// SetFilerAuditLogConfig gets a reference to the given FilerAuditLogConfiguration and assigns it to the FilerAuditLogConfig field.
func (o *Cluster) SetFilerAuditLogConfig(v FilerAuditLogConfiguration) {
	o.FilerAuditLogConfig = &v
}

// GetFipsModeEnabled returns the FipsModeEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetFipsModeEnabled() bool {
	if o == nil || o.FipsModeEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.FipsModeEnabled.Get()
}

// GetFipsModeEnabledOk returns a tuple with the FipsModeEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetFipsModeEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FipsModeEnabled.Get(), o.FipsModeEnabled.IsSet()
}

// HasFipsModeEnabled returns a boolean if a field has been set.
func (o *Cluster) HasFipsModeEnabled() bool {
	if o != nil && o.FipsModeEnabled.IsSet() {
		return true
	}

	return false
}

// SetFipsModeEnabled gets a reference to the given NullableBool and assigns it to the FipsModeEnabled field.
func (o *Cluster) SetFipsModeEnabled(v bool) {
	o.FipsModeEnabled.Set(&v)
}
// SetFipsModeEnabledNil sets the value for FipsModeEnabled to be an explicit nil
func (o *Cluster) SetFipsModeEnabledNil() {
	o.FipsModeEnabled.Set(nil)
}

// UnsetFipsModeEnabled ensures that no value is present for FipsModeEnabled, not even an explicit nil
func (o *Cluster) UnsetFipsModeEnabled() {
	o.FipsModeEnabled.Unset()
}

// GetGateway returns the Gateway field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetGateway() string {
	if o == nil || o.Gateway.Get() == nil {
		var ret string
		return ret
	}
	return *o.Gateway.Get()
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetGatewayOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Gateway.Get(), o.Gateway.IsSet()
}

// HasGateway returns a boolean if a field has been set.
func (o *Cluster) HasGateway() bool {
	if o != nil && o.Gateway.IsSet() {
		return true
	}

	return false
}

// SetGateway gets a reference to the given NullableString and assigns it to the Gateway field.
func (o *Cluster) SetGateway(v string) {
	o.Gateway.Set(&v)
}
// SetGatewayNil sets the value for Gateway to be an explicit nil
func (o *Cluster) SetGatewayNil() {
	o.Gateway.Set(nil)
}

// UnsetGateway ensures that no value is present for Gateway, not even an explicit nil
func (o *Cluster) UnsetGateway() {
	o.Gateway.Unset()
}

// GetGoogleAnalyticsEnabled returns the GoogleAnalyticsEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetGoogleAnalyticsEnabled() bool {
	if o == nil || o.GoogleAnalyticsEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.GoogleAnalyticsEnabled.Get()
}

// GetGoogleAnalyticsEnabledOk returns a tuple with the GoogleAnalyticsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetGoogleAnalyticsEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.GoogleAnalyticsEnabled.Get(), o.GoogleAnalyticsEnabled.IsSet()
}

// HasGoogleAnalyticsEnabled returns a boolean if a field has been set.
func (o *Cluster) HasGoogleAnalyticsEnabled() bool {
	if o != nil && o.GoogleAnalyticsEnabled.IsSet() {
		return true
	}

	return false
}

// SetGoogleAnalyticsEnabled gets a reference to the given NullableBool and assigns it to the GoogleAnalyticsEnabled field.
func (o *Cluster) SetGoogleAnalyticsEnabled(v bool) {
	o.GoogleAnalyticsEnabled.Set(&v)
}
// SetGoogleAnalyticsEnabledNil sets the value for GoogleAnalyticsEnabled to be an explicit nil
func (o *Cluster) SetGoogleAnalyticsEnabledNil() {
	o.GoogleAnalyticsEnabled.Set(nil)
}

// UnsetGoogleAnalyticsEnabled ensures that no value is present for GoogleAnalyticsEnabled, not even an explicit nil
func (o *Cluster) UnsetGoogleAnalyticsEnabled() {
	o.GoogleAnalyticsEnabled.Unset()
}

// GetHardwareInfo returns the HardwareInfo field value if set, zero value otherwise.
func (o *Cluster) GetHardwareInfo() ClusterHardwareInfo {
	if o == nil || o.HardwareInfo == nil {
		var ret ClusterHardwareInfo
		return ret
	}
	return *o.HardwareInfo
}

// GetHardwareInfoOk returns a tuple with the HardwareInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetHardwareInfoOk() (*ClusterHardwareInfo, bool) {
	if o == nil || o.HardwareInfo == nil {
		return nil, false
	}
	return o.HardwareInfo, true
}

// HasHardwareInfo returns a boolean if a field has been set.
func (o *Cluster) HasHardwareInfo() bool {
	if o != nil && o.HardwareInfo != nil {
		return true
	}

	return false
}

// SetHardwareInfo gets a reference to the given ClusterHardwareInfo and assigns it to the HardwareInfo field.
func (o *Cluster) SetHardwareInfo(v ClusterHardwareInfo) {
	o.HardwareInfo = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *Cluster) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *Cluster) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *Cluster) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *Cluster) UnsetId() {
	o.Id.Unset()
}

// GetIncarnationId returns the IncarnationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetIncarnationId() int64 {
	if o == nil || o.IncarnationId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.IncarnationId.Get()
}

// GetIncarnationIdOk returns a tuple with the IncarnationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetIncarnationIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IncarnationId.Get(), o.IncarnationId.IsSet()
}

// HasIncarnationId returns a boolean if a field has been set.
func (o *Cluster) HasIncarnationId() bool {
	if o != nil && o.IncarnationId.IsSet() {
		return true
	}

	return false
}

// SetIncarnationId gets a reference to the given NullableInt64 and assigns it to the IncarnationId field.
func (o *Cluster) SetIncarnationId(v int64) {
	o.IncarnationId.Set(&v)
}
// SetIncarnationIdNil sets the value for IncarnationId to be an explicit nil
func (o *Cluster) SetIncarnationIdNil() {
	o.IncarnationId.Set(nil)
}

// UnsetIncarnationId ensures that no value is present for IncarnationId, not even an explicit nil
func (o *Cluster) UnsetIncarnationId() {
	o.IncarnationId.Unset()
}

// GetIpPreference returns the IpPreference field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetIpPreference() int32 {
	if o == nil || o.IpPreference.Get() == nil {
		var ret int32
		return ret
	}
	return *o.IpPreference.Get()
}

// GetIpPreferenceOk returns a tuple with the IpPreference field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetIpPreferenceOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IpPreference.Get(), o.IpPreference.IsSet()
}

// HasIpPreference returns a boolean if a field has been set.
func (o *Cluster) HasIpPreference() bool {
	if o != nil && o.IpPreference.IsSet() {
		return true
	}

	return false
}

// SetIpPreference gets a reference to the given NullableInt32 and assigns it to the IpPreference field.
func (o *Cluster) SetIpPreference(v int32) {
	o.IpPreference.Set(&v)
}
// SetIpPreferenceNil sets the value for IpPreference to be an explicit nil
func (o *Cluster) SetIpPreferenceNil() {
	o.IpPreference.Set(nil)
}

// UnsetIpPreference ensures that no value is present for IpPreference, not even an explicit nil
func (o *Cluster) UnsetIpPreference() {
	o.IpPreference.Unset()
}

// GetIsDocumentationLocal returns the IsDocumentationLocal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetIsDocumentationLocal() bool {
	if o == nil || o.IsDocumentationLocal.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsDocumentationLocal.Get()
}

// GetIsDocumentationLocalOk returns a tuple with the IsDocumentationLocal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetIsDocumentationLocalOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsDocumentationLocal.Get(), o.IsDocumentationLocal.IsSet()
}

// HasIsDocumentationLocal returns a boolean if a field has been set.
func (o *Cluster) HasIsDocumentationLocal() bool {
	if o != nil && o.IsDocumentationLocal.IsSet() {
		return true
	}

	return false
}

// SetIsDocumentationLocal gets a reference to the given NullableBool and assigns it to the IsDocumentationLocal field.
func (o *Cluster) SetIsDocumentationLocal(v bool) {
	o.IsDocumentationLocal.Set(&v)
}
// SetIsDocumentationLocalNil sets the value for IsDocumentationLocal to be an explicit nil
func (o *Cluster) SetIsDocumentationLocalNil() {
	o.IsDocumentationLocal.Set(nil)
}

// UnsetIsDocumentationLocal ensures that no value is present for IsDocumentationLocal, not even an explicit nil
func (o *Cluster) UnsetIsDocumentationLocal() {
	o.IsDocumentationLocal.Unset()
}

// GetLanguageLocale returns the LanguageLocale field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetLanguageLocale() string {
	if o == nil || o.LanguageLocale.Get() == nil {
		var ret string
		return ret
	}
	return *o.LanguageLocale.Get()
}

// GetLanguageLocaleOk returns a tuple with the LanguageLocale field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetLanguageLocaleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LanguageLocale.Get(), o.LanguageLocale.IsSet()
}

// HasLanguageLocale returns a boolean if a field has been set.
func (o *Cluster) HasLanguageLocale() bool {
	if o != nil && o.LanguageLocale.IsSet() {
		return true
	}

	return false
}

// SetLanguageLocale gets a reference to the given NullableString and assigns it to the LanguageLocale field.
func (o *Cluster) SetLanguageLocale(v string) {
	o.LanguageLocale.Set(&v)
}
// SetLanguageLocaleNil sets the value for LanguageLocale to be an explicit nil
func (o *Cluster) SetLanguageLocaleNil() {
	o.LanguageLocale.Set(nil)
}

// UnsetLanguageLocale ensures that no value is present for LanguageLocale, not even an explicit nil
func (o *Cluster) UnsetLanguageLocale() {
	o.LanguageLocale.Unset()
}

// GetLicenseState returns the LicenseState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetLicenseState() LicenseState {
	if o == nil || o.LicenseState.Get() == nil {
		var ret LicenseState
		return ret
	}
	return *o.LicenseState.Get()
}

// GetLicenseStateOk returns a tuple with the LicenseState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetLicenseStateOk() (*LicenseState, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LicenseState.Get(), o.LicenseState.IsSet()
}

// HasLicenseState returns a boolean if a field has been set.
func (o *Cluster) HasLicenseState() bool {
	if o != nil && o.LicenseState.IsSet() {
		return true
	}

	return false
}

// SetLicenseState gets a reference to the given NullableLicenseState and assigns it to the LicenseState field.
func (o *Cluster) SetLicenseState(v LicenseState) {
	o.LicenseState.Set(&v)
}
// SetLicenseStateNil sets the value for LicenseState to be an explicit nil
func (o *Cluster) SetLicenseStateNil() {
	o.LicenseState.Set(nil)
}

// UnsetLicenseState ensures that no value is present for LicenseState, not even an explicit nil
func (o *Cluster) UnsetLicenseState() {
	o.LicenseState.Unset()
}

// GetLocalAuthDomainName returns the LocalAuthDomainName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetLocalAuthDomainName() string {
	if o == nil || o.LocalAuthDomainName.Get() == nil {
		var ret string
		return ret
	}
	return *o.LocalAuthDomainName.Get()
}

// GetLocalAuthDomainNameOk returns a tuple with the LocalAuthDomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetLocalAuthDomainNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LocalAuthDomainName.Get(), o.LocalAuthDomainName.IsSet()
}

// HasLocalAuthDomainName returns a boolean if a field has been set.
func (o *Cluster) HasLocalAuthDomainName() bool {
	if o != nil && o.LocalAuthDomainName.IsSet() {
		return true
	}

	return false
}

// SetLocalAuthDomainName gets a reference to the given NullableString and assigns it to the LocalAuthDomainName field.
func (o *Cluster) SetLocalAuthDomainName(v string) {
	o.LocalAuthDomainName.Set(&v)
}
// SetLocalAuthDomainNameNil sets the value for LocalAuthDomainName to be an explicit nil
func (o *Cluster) SetLocalAuthDomainNameNil() {
	o.LocalAuthDomainName.Set(nil)
}

// UnsetLocalAuthDomainName ensures that no value is present for LocalAuthDomainName, not even an explicit nil
func (o *Cluster) UnsetLocalAuthDomainName() {
	o.LocalAuthDomainName.Unset()
}

// GetLocalGroupsEnabled returns the LocalGroupsEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetLocalGroupsEnabled() bool {
	if o == nil || o.LocalGroupsEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.LocalGroupsEnabled.Get()
}

// GetLocalGroupsEnabledOk returns a tuple with the LocalGroupsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetLocalGroupsEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LocalGroupsEnabled.Get(), o.LocalGroupsEnabled.IsSet()
}

// HasLocalGroupsEnabled returns a boolean if a field has been set.
func (o *Cluster) HasLocalGroupsEnabled() bool {
	if o != nil && o.LocalGroupsEnabled.IsSet() {
		return true
	}

	return false
}

// SetLocalGroupsEnabled gets a reference to the given NullableBool and assigns it to the LocalGroupsEnabled field.
func (o *Cluster) SetLocalGroupsEnabled(v bool) {
	o.LocalGroupsEnabled.Set(&v)
}
// SetLocalGroupsEnabledNil sets the value for LocalGroupsEnabled to be an explicit nil
func (o *Cluster) SetLocalGroupsEnabledNil() {
	o.LocalGroupsEnabled.Set(nil)
}

// UnsetLocalGroupsEnabled ensures that no value is present for LocalGroupsEnabled, not even an explicit nil
func (o *Cluster) UnsetLocalGroupsEnabled() {
	o.LocalGroupsEnabled.Unset()
}

// GetMetadataFaultToleranceFactor returns the MetadataFaultToleranceFactor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetMetadataFaultToleranceFactor() int32 {
	if o == nil || o.MetadataFaultToleranceFactor.Get() == nil {
		var ret int32
		return ret
	}
	return *o.MetadataFaultToleranceFactor.Get()
}

// GetMetadataFaultToleranceFactorOk returns a tuple with the MetadataFaultToleranceFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetMetadataFaultToleranceFactorOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MetadataFaultToleranceFactor.Get(), o.MetadataFaultToleranceFactor.IsSet()
}

// HasMetadataFaultToleranceFactor returns a boolean if a field has been set.
func (o *Cluster) HasMetadataFaultToleranceFactor() bool {
	if o != nil && o.MetadataFaultToleranceFactor.IsSet() {
		return true
	}

	return false
}

// SetMetadataFaultToleranceFactor gets a reference to the given NullableInt32 and assigns it to the MetadataFaultToleranceFactor field.
func (o *Cluster) SetMetadataFaultToleranceFactor(v int32) {
	o.MetadataFaultToleranceFactor.Set(&v)
}
// SetMetadataFaultToleranceFactorNil sets the value for MetadataFaultToleranceFactor to be an explicit nil
func (o *Cluster) SetMetadataFaultToleranceFactorNil() {
	o.MetadataFaultToleranceFactor.Set(nil)
}

// UnsetMetadataFaultToleranceFactor ensures that no value is present for MetadataFaultToleranceFactor, not even an explicit nil
func (o *Cluster) UnsetMetadataFaultToleranceFactor() {
	o.MetadataFaultToleranceFactor.Unset()
}

// GetMultiTenancyEnabled returns the MultiTenancyEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetMultiTenancyEnabled() bool {
	if o == nil || o.MultiTenancyEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.MultiTenancyEnabled.Get()
}

// GetMultiTenancyEnabledOk returns a tuple with the MultiTenancyEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetMultiTenancyEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MultiTenancyEnabled.Get(), o.MultiTenancyEnabled.IsSet()
}

// HasMultiTenancyEnabled returns a boolean if a field has been set.
func (o *Cluster) HasMultiTenancyEnabled() bool {
	if o != nil && o.MultiTenancyEnabled.IsSet() {
		return true
	}

	return false
}

// SetMultiTenancyEnabled gets a reference to the given NullableBool and assigns it to the MultiTenancyEnabled field.
func (o *Cluster) SetMultiTenancyEnabled(v bool) {
	o.MultiTenancyEnabled.Set(&v)
}
// SetMultiTenancyEnabledNil sets the value for MultiTenancyEnabled to be an explicit nil
func (o *Cluster) SetMultiTenancyEnabledNil() {
	o.MultiTenancyEnabled.Set(nil)
}

// UnsetMultiTenancyEnabled ensures that no value is present for MultiTenancyEnabled, not even an explicit nil
func (o *Cluster) UnsetMultiTenancyEnabled() {
	o.MultiTenancyEnabled.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Cluster) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *Cluster) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *Cluster) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Cluster) UnsetName() {
	o.Name.Unset()
}

// GetNodeCount returns the NodeCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetNodeCount() int64 {
	if o == nil || o.NodeCount.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NodeCount.Get()
}

// GetNodeCountOk returns a tuple with the NodeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetNodeCountOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NodeCount.Get(), o.NodeCount.IsSet()
}

// HasNodeCount returns a boolean if a field has been set.
func (o *Cluster) HasNodeCount() bool {
	if o != nil && o.NodeCount.IsSet() {
		return true
	}

	return false
}

// SetNodeCount gets a reference to the given NullableInt64 and assigns it to the NodeCount field.
func (o *Cluster) SetNodeCount(v int64) {
	o.NodeCount.Set(&v)
}
// SetNodeCountNil sets the value for NodeCount to be an explicit nil
func (o *Cluster) SetNodeCountNil() {
	o.NodeCount.Set(nil)
}

// UnsetNodeCount ensures that no value is present for NodeCount, not even an explicit nil
func (o *Cluster) UnsetNodeCount() {
	o.NodeCount.Unset()
}

// GetNodeIps returns the NodeIps field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetNodeIps() string {
	if o == nil || o.NodeIps.Get() == nil {
		var ret string
		return ret
	}
	return *o.NodeIps.Get()
}

// GetNodeIpsOk returns a tuple with the NodeIps field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetNodeIpsOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NodeIps.Get(), o.NodeIps.IsSet()
}

// HasNodeIps returns a boolean if a field has been set.
func (o *Cluster) HasNodeIps() bool {
	if o != nil && o.NodeIps.IsSet() {
		return true
	}

	return false
}

// SetNodeIps gets a reference to the given NullableString and assigns it to the NodeIps field.
func (o *Cluster) SetNodeIps(v string) {
	o.NodeIps.Set(&v)
}
// SetNodeIpsNil sets the value for NodeIps to be an explicit nil
func (o *Cluster) SetNodeIpsNil() {
	o.NodeIps.Set(nil)
}

// UnsetNodeIps ensures that no value is present for NodeIps, not even an explicit nil
func (o *Cluster) UnsetNodeIps() {
	o.NodeIps.Unset()
}

// GetNtpSettings returns the NtpSettings field value if set, zero value otherwise.
func (o *Cluster) GetNtpSettings() NtpSettingsConfig {
	if o == nil || o.NtpSettings == nil {
		var ret NtpSettingsConfig
		return ret
	}
	return *o.NtpSettings
}

// GetNtpSettingsOk returns a tuple with the NtpSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetNtpSettingsOk() (*NtpSettingsConfig, bool) {
	if o == nil || o.NtpSettings == nil {
		return nil, false
	}
	return o.NtpSettings, true
}

// HasNtpSettings returns a boolean if a field has been set.
func (o *Cluster) HasNtpSettings() bool {
	if o != nil && o.NtpSettings != nil {
		return true
	}

	return false
}

// SetNtpSettings gets a reference to the given NtpSettingsConfig and assigns it to the NtpSettings field.
func (o *Cluster) SetNtpSettings(v NtpSettingsConfig) {
	o.NtpSettings = &v
}

// GetPcieSsdTierRebalanceDelaySecs returns the PcieSsdTierRebalanceDelaySecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetPcieSsdTierRebalanceDelaySecs() int32 {
	if o == nil || o.PcieSsdTierRebalanceDelaySecs.Get() == nil {
		var ret int32
		return ret
	}
	return *o.PcieSsdTierRebalanceDelaySecs.Get()
}

// GetPcieSsdTierRebalanceDelaySecsOk returns a tuple with the PcieSsdTierRebalanceDelaySecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetPcieSsdTierRebalanceDelaySecsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PcieSsdTierRebalanceDelaySecs.Get(), o.PcieSsdTierRebalanceDelaySecs.IsSet()
}

// HasPcieSsdTierRebalanceDelaySecs returns a boolean if a field has been set.
func (o *Cluster) HasPcieSsdTierRebalanceDelaySecs() bool {
	if o != nil && o.PcieSsdTierRebalanceDelaySecs.IsSet() {
		return true
	}

	return false
}

// SetPcieSsdTierRebalanceDelaySecs gets a reference to the given NullableInt32 and assigns it to the PcieSsdTierRebalanceDelaySecs field.
func (o *Cluster) SetPcieSsdTierRebalanceDelaySecs(v int32) {
	o.PcieSsdTierRebalanceDelaySecs.Set(&v)
}
// SetPcieSsdTierRebalanceDelaySecsNil sets the value for PcieSsdTierRebalanceDelaySecs to be an explicit nil
func (o *Cluster) SetPcieSsdTierRebalanceDelaySecsNil() {
	o.PcieSsdTierRebalanceDelaySecs.Set(nil)
}

// UnsetPcieSsdTierRebalanceDelaySecs ensures that no value is present for PcieSsdTierRebalanceDelaySecs, not even an explicit nil
func (o *Cluster) UnsetPcieSsdTierRebalanceDelaySecs() {
	o.PcieSsdTierRebalanceDelaySecs.Unset()
}

// GetProxyVMSubnet returns the ProxyVMSubnet field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetProxyVMSubnet() string {
	if o == nil || o.ProxyVMSubnet.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProxyVMSubnet.Get()
}

// GetProxyVMSubnetOk returns a tuple with the ProxyVMSubnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetProxyVMSubnetOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProxyVMSubnet.Get(), o.ProxyVMSubnet.IsSet()
}

// HasProxyVMSubnet returns a boolean if a field has been set.
func (o *Cluster) HasProxyVMSubnet() bool {
	if o != nil && o.ProxyVMSubnet.IsSet() {
		return true
	}

	return false
}

// SetProxyVMSubnet gets a reference to the given NullableString and assigns it to the ProxyVMSubnet field.
func (o *Cluster) SetProxyVMSubnet(v string) {
	o.ProxyVMSubnet.Set(&v)
}
// SetProxyVMSubnetNil sets the value for ProxyVMSubnet to be an explicit nil
func (o *Cluster) SetProxyVMSubnetNil() {
	o.ProxyVMSubnet.Set(nil)
}

// UnsetProxyVMSubnet ensures that no value is present for ProxyVMSubnet, not even an explicit nil
func (o *Cluster) UnsetProxyVMSubnet() {
	o.ProxyVMSubnet.Unset()
}

// GetReverseTunnelEnabled returns the ReverseTunnelEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetReverseTunnelEnabled() bool {
	if o == nil || o.ReverseTunnelEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ReverseTunnelEnabled.Get()
}

// GetReverseTunnelEnabledOk returns a tuple with the ReverseTunnelEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetReverseTunnelEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ReverseTunnelEnabled.Get(), o.ReverseTunnelEnabled.IsSet()
}

// HasReverseTunnelEnabled returns a boolean if a field has been set.
func (o *Cluster) HasReverseTunnelEnabled() bool {
	if o != nil && o.ReverseTunnelEnabled.IsSet() {
		return true
	}

	return false
}

// SetReverseTunnelEnabled gets a reference to the given NullableBool and assigns it to the ReverseTunnelEnabled field.
func (o *Cluster) SetReverseTunnelEnabled(v bool) {
	o.ReverseTunnelEnabled.Set(&v)
}
// SetReverseTunnelEnabledNil sets the value for ReverseTunnelEnabled to be an explicit nil
func (o *Cluster) SetReverseTunnelEnabledNil() {
	o.ReverseTunnelEnabled.Set(nil)
}

// UnsetReverseTunnelEnabled ensures that no value is present for ReverseTunnelEnabled, not even an explicit nil
func (o *Cluster) UnsetReverseTunnelEnabled() {
	o.ReverseTunnelEnabled.Unset()
}

// GetReverseTunnelEndTimeMsecs returns the ReverseTunnelEndTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetReverseTunnelEndTimeMsecs() int64 {
	if o == nil || o.ReverseTunnelEndTimeMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ReverseTunnelEndTimeMsecs.Get()
}

// GetReverseTunnelEndTimeMsecsOk returns a tuple with the ReverseTunnelEndTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetReverseTunnelEndTimeMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ReverseTunnelEndTimeMsecs.Get(), o.ReverseTunnelEndTimeMsecs.IsSet()
}

// HasReverseTunnelEndTimeMsecs returns a boolean if a field has been set.
func (o *Cluster) HasReverseTunnelEndTimeMsecs() bool {
	if o != nil && o.ReverseTunnelEndTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetReverseTunnelEndTimeMsecs gets a reference to the given NullableInt64 and assigns it to the ReverseTunnelEndTimeMsecs field.
func (o *Cluster) SetReverseTunnelEndTimeMsecs(v int64) {
	o.ReverseTunnelEndTimeMsecs.Set(&v)
}
// SetReverseTunnelEndTimeMsecsNil sets the value for ReverseTunnelEndTimeMsecs to be an explicit nil
func (o *Cluster) SetReverseTunnelEndTimeMsecsNil() {
	o.ReverseTunnelEndTimeMsecs.Set(nil)
}

// UnsetReverseTunnelEndTimeMsecs ensures that no value is present for ReverseTunnelEndTimeMsecs, not even an explicit nil
func (o *Cluster) UnsetReverseTunnelEndTimeMsecs() {
	o.ReverseTunnelEndTimeMsecs.Unset()
}

// GetSchemaInfoList returns the SchemaInfoList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetSchemaInfoList() []SchemaInfo {
	if o == nil  {
		var ret []SchemaInfo
		return ret
	}
	return o.SchemaInfoList
}

// GetSchemaInfoListOk returns a tuple with the SchemaInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetSchemaInfoListOk() (*[]SchemaInfo, bool) {
	if o == nil || o.SchemaInfoList == nil {
		return nil, false
	}
	return &o.SchemaInfoList, true
}

// HasSchemaInfoList returns a boolean if a field has been set.
func (o *Cluster) HasSchemaInfoList() bool {
	if o != nil && o.SchemaInfoList != nil {
		return true
	}

	return false
}

// SetSchemaInfoList gets a reference to the given []SchemaInfo and assigns it to the SchemaInfoList field.
func (o *Cluster) SetSchemaInfoList(v []SchemaInfo) {
	o.SchemaInfoList = v
}

// GetSmbAdDisabled returns the SmbAdDisabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetSmbAdDisabled() bool {
	if o == nil || o.SmbAdDisabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SmbAdDisabled.Get()
}

// GetSmbAdDisabledOk returns a tuple with the SmbAdDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetSmbAdDisabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SmbAdDisabled.Get(), o.SmbAdDisabled.IsSet()
}

// HasSmbAdDisabled returns a boolean if a field has been set.
func (o *Cluster) HasSmbAdDisabled() bool {
	if o != nil && o.SmbAdDisabled.IsSet() {
		return true
	}

	return false
}

// SetSmbAdDisabled gets a reference to the given NullableBool and assigns it to the SmbAdDisabled field.
func (o *Cluster) SetSmbAdDisabled(v bool) {
	o.SmbAdDisabled.Set(&v)
}
// SetSmbAdDisabledNil sets the value for SmbAdDisabled to be an explicit nil
func (o *Cluster) SetSmbAdDisabledNil() {
	o.SmbAdDisabled.Set(nil)
}

// UnsetSmbAdDisabled ensures that no value is present for SmbAdDisabled, not even an explicit nil
func (o *Cluster) UnsetSmbAdDisabled() {
	o.SmbAdDisabled.Unset()
}

// GetSmbMultichannelEnabled returns the SmbMultichannelEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetSmbMultichannelEnabled() bool {
	if o == nil || o.SmbMultichannelEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SmbMultichannelEnabled.Get()
}

// GetSmbMultichannelEnabledOk returns a tuple with the SmbMultichannelEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetSmbMultichannelEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SmbMultichannelEnabled.Get(), o.SmbMultichannelEnabled.IsSet()
}

// HasSmbMultichannelEnabled returns a boolean if a field has been set.
func (o *Cluster) HasSmbMultichannelEnabled() bool {
	if o != nil && o.SmbMultichannelEnabled.IsSet() {
		return true
	}

	return false
}

// SetSmbMultichannelEnabled gets a reference to the given NullableBool and assigns it to the SmbMultichannelEnabled field.
func (o *Cluster) SetSmbMultichannelEnabled(v bool) {
	o.SmbMultichannelEnabled.Set(&v)
}
// SetSmbMultichannelEnabledNil sets the value for SmbMultichannelEnabled to be an explicit nil
func (o *Cluster) SetSmbMultichannelEnabledNil() {
	o.SmbMultichannelEnabled.Set(nil)
}

// UnsetSmbMultichannelEnabled ensures that no value is present for SmbMultichannelEnabled, not even an explicit nil
func (o *Cluster) UnsetSmbMultichannelEnabled() {
	o.SmbMultichannelEnabled.Unset()
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *Cluster) GetStats() ClusterStats {
	if o == nil || o.Stats == nil {
		var ret ClusterStats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetStatsOk() (*ClusterStats, bool) {
	if o == nil || o.Stats == nil {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *Cluster) HasStats() bool {
	if o != nil && o.Stats != nil {
		return true
	}

	return false
}

// SetStats gets a reference to the given ClusterStats and assigns it to the Stats field.
func (o *Cluster) SetStats(v ClusterStats) {
	o.Stats = &v
}

// GetStigMode returns the StigMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetStigMode() bool {
	if o == nil || o.StigMode.Get() == nil {
		var ret bool
		return ret
	}
	return *o.StigMode.Get()
}

// GetStigModeOk returns a tuple with the StigMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetStigModeOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StigMode.Get(), o.StigMode.IsSet()
}

// HasStigMode returns a boolean if a field has been set.
func (o *Cluster) HasStigMode() bool {
	if o != nil && o.StigMode.IsSet() {
		return true
	}

	return false
}

// SetStigMode gets a reference to the given NullableBool and assigns it to the StigMode field.
func (o *Cluster) SetStigMode(v bool) {
	o.StigMode.Set(&v)
}
// SetStigModeNil sets the value for StigMode to be an explicit nil
func (o *Cluster) SetStigModeNil() {
	o.StigMode.Set(nil)
}

// UnsetStigMode ensures that no value is present for StigMode, not even an explicit nil
func (o *Cluster) UnsetStigMode() {
	o.StigMode.Unset()
}

// GetSupportedConfig returns the SupportedConfig field value if set, zero value otherwise.
func (o *Cluster) GetSupportedConfig() SupportedConfig {
	if o == nil || o.SupportedConfig == nil {
		var ret SupportedConfig
		return ret
	}
	return *o.SupportedConfig
}

// GetSupportedConfigOk returns a tuple with the SupportedConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cluster) GetSupportedConfigOk() (*SupportedConfig, bool) {
	if o == nil || o.SupportedConfig == nil {
		return nil, false
	}
	return o.SupportedConfig, true
}

// HasSupportedConfig returns a boolean if a field has been set.
func (o *Cluster) HasSupportedConfig() bool {
	if o != nil && o.SupportedConfig != nil {
		return true
	}

	return false
}

// SetSupportedConfig gets a reference to the given SupportedConfig and assigns it to the SupportedConfig field.
func (o *Cluster) SetSupportedConfig(v SupportedConfig) {
	o.SupportedConfig = &v
}

// GetSyslogServers returns the SyslogServers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetSyslogServers() []OldSyslogServer {
	if o == nil  {
		var ret []OldSyslogServer
		return ret
	}
	return o.SyslogServers
}

// GetSyslogServersOk returns a tuple with the SyslogServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetSyslogServersOk() (*[]OldSyslogServer, bool) {
	if o == nil || o.SyslogServers == nil {
		return nil, false
	}
	return &o.SyslogServers, true
}

// HasSyslogServers returns a boolean if a field has been set.
func (o *Cluster) HasSyslogServers() bool {
	if o != nil && o.SyslogServers != nil {
		return true
	}

	return false
}

// SetSyslogServers gets a reference to the given []OldSyslogServer and assigns it to the SyslogServers field.
func (o *Cluster) SetSyslogServers(v []OldSyslogServer) {
	o.SyslogServers = v
}

// GetTargetSoftwareVersion returns the TargetSoftwareVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetTargetSoftwareVersion() string {
	if o == nil || o.TargetSoftwareVersion.Get() == nil {
		var ret string
		return ret
	}
	return *o.TargetSoftwareVersion.Get()
}

// GetTargetSoftwareVersionOk returns a tuple with the TargetSoftwareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetTargetSoftwareVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetSoftwareVersion.Get(), o.TargetSoftwareVersion.IsSet()
}

// HasTargetSoftwareVersion returns a boolean if a field has been set.
func (o *Cluster) HasTargetSoftwareVersion() bool {
	if o != nil && o.TargetSoftwareVersion.IsSet() {
		return true
	}

	return false
}

// SetTargetSoftwareVersion gets a reference to the given NullableString and assigns it to the TargetSoftwareVersion field.
func (o *Cluster) SetTargetSoftwareVersion(v string) {
	o.TargetSoftwareVersion.Set(&v)
}
// SetTargetSoftwareVersionNil sets the value for TargetSoftwareVersion to be an explicit nil
func (o *Cluster) SetTargetSoftwareVersionNil() {
	o.TargetSoftwareVersion.Set(nil)
}

// UnsetTargetSoftwareVersion ensures that no value is present for TargetSoftwareVersion, not even an explicit nil
func (o *Cluster) UnsetTargetSoftwareVersion() {
	o.TargetSoftwareVersion.Unset()
}

// GetTenantViewboxSharingEnabled returns the TenantViewboxSharingEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetTenantViewboxSharingEnabled() bool {
	if o == nil || o.TenantViewboxSharingEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.TenantViewboxSharingEnabled.Get()
}

// GetTenantViewboxSharingEnabledOk returns a tuple with the TenantViewboxSharingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetTenantViewboxSharingEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantViewboxSharingEnabled.Get(), o.TenantViewboxSharingEnabled.IsSet()
}

// HasTenantViewboxSharingEnabled returns a boolean if a field has been set.
func (o *Cluster) HasTenantViewboxSharingEnabled() bool {
	if o != nil && o.TenantViewboxSharingEnabled.IsSet() {
		return true
	}

	return false
}

// SetTenantViewboxSharingEnabled gets a reference to the given NullableBool and assigns it to the TenantViewboxSharingEnabled field.
func (o *Cluster) SetTenantViewboxSharingEnabled(v bool) {
	o.TenantViewboxSharingEnabled.Set(&v)
}
// SetTenantViewboxSharingEnabledNil sets the value for TenantViewboxSharingEnabled to be an explicit nil
func (o *Cluster) SetTenantViewboxSharingEnabledNil() {
	o.TenantViewboxSharingEnabled.Set(nil)
}

// UnsetTenantViewboxSharingEnabled ensures that no value is present for TenantViewboxSharingEnabled, not even an explicit nil
func (o *Cluster) UnsetTenantViewboxSharingEnabled() {
	o.TenantViewboxSharingEnabled.Unset()
}

// GetTimezone returns the Timezone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetTimezone() string {
	if o == nil || o.Timezone.Get() == nil {
		var ret string
		return ret
	}
	return *o.Timezone.Get()
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetTimezoneOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Timezone.Get(), o.Timezone.IsSet()
}

// HasTimezone returns a boolean if a field has been set.
func (o *Cluster) HasTimezone() bool {
	if o != nil && o.Timezone.IsSet() {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given NullableString and assigns it to the Timezone field.
func (o *Cluster) SetTimezone(v string) {
	o.Timezone.Set(&v)
}
// SetTimezoneNil sets the value for Timezone to be an explicit nil
func (o *Cluster) SetTimezoneNil() {
	o.Timezone.Set(nil)
}

// UnsetTimezone ensures that no value is present for Timezone, not even an explicit nil
func (o *Cluster) UnsetTimezone() {
	o.Timezone.Unset()
}

// GetTurboMode returns the TurboMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetTurboMode() bool {
	if o == nil || o.TurboMode.Get() == nil {
		var ret bool
		return ret
	}
	return *o.TurboMode.Get()
}

// GetTurboModeOk returns a tuple with the TurboMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetTurboModeOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TurboMode.Get(), o.TurboMode.IsSet()
}

// HasTurboMode returns a boolean if a field has been set.
func (o *Cluster) HasTurboMode() bool {
	if o != nil && o.TurboMode.IsSet() {
		return true
	}

	return false
}

// SetTurboMode gets a reference to the given NullableBool and assigns it to the TurboMode field.
func (o *Cluster) SetTurboMode(v bool) {
	o.TurboMode.Set(&v)
}
// SetTurboModeNil sets the value for TurboMode to be an explicit nil
func (o *Cluster) SetTurboModeNil() {
	o.TurboMode.Set(nil)
}

// UnsetTurboMode ensures that no value is present for TurboMode, not even an explicit nil
func (o *Cluster) UnsetTurboMode() {
	o.TurboMode.Unset()
}

// GetUsedMetadataSpacePct returns the UsedMetadataSpacePct field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Cluster) GetUsedMetadataSpacePct() float64 {
	if o == nil || o.UsedMetadataSpacePct.Get() == nil {
		var ret float64
		return ret
	}
	return *o.UsedMetadataSpacePct.Get()
}

// GetUsedMetadataSpacePctOk returns a tuple with the UsedMetadataSpacePct field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Cluster) GetUsedMetadataSpacePctOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UsedMetadataSpacePct.Get(), o.UsedMetadataSpacePct.IsSet()
}

// HasUsedMetadataSpacePct returns a boolean if a field has been set.
func (o *Cluster) HasUsedMetadataSpacePct() bool {
	if o != nil && o.UsedMetadataSpacePct.IsSet() {
		return true
	}

	return false
}

// SetUsedMetadataSpacePct gets a reference to the given NullableFloat64 and assigns it to the UsedMetadataSpacePct field.
func (o *Cluster) SetUsedMetadataSpacePct(v float64) {
	o.UsedMetadataSpacePct.Set(&v)
}
// SetUsedMetadataSpacePctNil sets the value for UsedMetadataSpacePct to be an explicit nil
func (o *Cluster) SetUsedMetadataSpacePctNil() {
	o.UsedMetadataSpacePct.Set(nil)
}

// UnsetUsedMetadataSpacePct ensures that no value is present for UsedMetadataSpacePct, not even an explicit nil
func (o *Cluster) UnsetUsedMetadataSpacePct() {
	o.UsedMetadataSpacePct.Unset()
}

func (o Cluster) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AppsSubnet != nil {
		toSerialize["appsSubnet"] = o.AppsSubnet
	}
	if o.AssignedRacksCount.IsSet() {
		toSerialize["assignedRacksCount"] = o.AssignedRacksCount.Get()
	}
	if o.AvailableMetadataSpace.IsSet() {
		toSerialize["availableMetadataSpace"] = o.AvailableMetadataSpace.Get()
	}
	if o.BannerEnabled.IsSet() {
		toSerialize["bannerEnabled"] = o.BannerEnabled.Get()
	}
	if o.ChassisCount.IsSet() {
		toSerialize["chassisCount"] = o.ChassisCount.Get()
	}
	if o.ClusterAuditLogConfig != nil {
		toSerialize["clusterAuditLogConfig"] = o.ClusterAuditLogConfig
	}
	if o.ClusterSoftwareVersion.IsSet() {
		toSerialize["clusterSoftwareVersion"] = o.ClusterSoftwareVersion.Get()
	}
	if o.ClusterType.IsSet() {
		toSerialize["clusterType"] = o.ClusterType.Get()
	}
	if o.CreatedTimeMsecs.IsSet() {
		toSerialize["createdTimeMsecs"] = o.CreatedTimeMsecs.Get()
	}
	if o.CurrentOpScheduledTimeSecs.IsSet() {
		toSerialize["currentOpScheduledTimeSecs"] = o.CurrentOpScheduledTimeSecs.Get()
	}
	if o.CurrentOperation.IsSet() {
		toSerialize["currentOperation"] = o.CurrentOperation.Get()
	}
	if o.CurrentTimeMsecs.IsSet() {
		toSerialize["currentTimeMsecs"] = o.CurrentTimeMsecs.Get()
	}
	if o.DnsServerIps != nil {
		toSerialize["dnsServerIps"] = o.DnsServerIps
	}
	if o.DomainNames != nil {
		toSerialize["domainNames"] = o.DomainNames
	}
	if o.EnableActiveMonitoring.IsSet() {
		toSerialize["enableActiveMonitoring"] = o.EnableActiveMonitoring.Get()
	}
	if o.EnableUpgradePkgPolling.IsSet() {
		toSerialize["enableUpgradePkgPolling"] = o.EnableUpgradePkgPolling.Get()
	}
	if o.EncryptionEnabled.IsSet() {
		toSerialize["encryptionEnabled"] = o.EncryptionEnabled.Get()
	}
	if o.EncryptionKeyRotationPeriodSecs.IsSet() {
		toSerialize["encryptionKeyRotationPeriodSecs"] = o.EncryptionKeyRotationPeriodSecs.Get()
	}
	if o.EulaConfig.IsSet() {
		toSerialize["eulaConfig"] = o.EulaConfig.Get()
	}
	if o.FaultToleranceLevel.IsSet() {
		toSerialize["faultToleranceLevel"] = o.FaultToleranceLevel.Get()
	}
	if o.FilerAuditLogConfig != nil {
		toSerialize["filerAuditLogConfig"] = o.FilerAuditLogConfig
	}
	if o.FipsModeEnabled.IsSet() {
		toSerialize["fipsModeEnabled"] = o.FipsModeEnabled.Get()
	}
	if o.Gateway.IsSet() {
		toSerialize["gateway"] = o.Gateway.Get()
	}
	if o.GoogleAnalyticsEnabled.IsSet() {
		toSerialize["googleAnalyticsEnabled"] = o.GoogleAnalyticsEnabled.Get()
	}
	if o.HardwareInfo != nil {
		toSerialize["hardwareInfo"] = o.HardwareInfo
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.IncarnationId.IsSet() {
		toSerialize["incarnationId"] = o.IncarnationId.Get()
	}
	if o.IpPreference.IsSet() {
		toSerialize["ipPreference"] = o.IpPreference.Get()
	}
	if o.IsDocumentationLocal.IsSet() {
		toSerialize["isDocumentationLocal"] = o.IsDocumentationLocal.Get()
	}
	if o.LanguageLocale.IsSet() {
		toSerialize["languageLocale"] = o.LanguageLocale.Get()
	}
	if o.LicenseState.IsSet() {
		toSerialize["licenseState"] = o.LicenseState.Get()
	}
	if o.LocalAuthDomainName.IsSet() {
		toSerialize["localAuthDomainName"] = o.LocalAuthDomainName.Get()
	}
	if o.LocalGroupsEnabled.IsSet() {
		toSerialize["localGroupsEnabled"] = o.LocalGroupsEnabled.Get()
	}
	if o.MetadataFaultToleranceFactor.IsSet() {
		toSerialize["metadataFaultToleranceFactor"] = o.MetadataFaultToleranceFactor.Get()
	}
	if o.MultiTenancyEnabled.IsSet() {
		toSerialize["multiTenancyEnabled"] = o.MultiTenancyEnabled.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.NodeCount.IsSet() {
		toSerialize["nodeCount"] = o.NodeCount.Get()
	}
	if o.NodeIps.IsSet() {
		toSerialize["nodeIps"] = o.NodeIps.Get()
	}
	if o.NtpSettings != nil {
		toSerialize["ntpSettings"] = o.NtpSettings
	}
	if o.PcieSsdTierRebalanceDelaySecs.IsSet() {
		toSerialize["pcieSsdTierRebalanceDelaySecs"] = o.PcieSsdTierRebalanceDelaySecs.Get()
	}
	if o.ProxyVMSubnet.IsSet() {
		toSerialize["proxyVMSubnet"] = o.ProxyVMSubnet.Get()
	}
	if o.ReverseTunnelEnabled.IsSet() {
		toSerialize["reverseTunnelEnabled"] = o.ReverseTunnelEnabled.Get()
	}
	if o.ReverseTunnelEndTimeMsecs.IsSet() {
		toSerialize["reverseTunnelEndTimeMsecs"] = o.ReverseTunnelEndTimeMsecs.Get()
	}
	if o.SchemaInfoList != nil {
		toSerialize["schemaInfoList"] = o.SchemaInfoList
	}
	if o.SmbAdDisabled.IsSet() {
		toSerialize["smbAdDisabled"] = o.SmbAdDisabled.Get()
	}
	if o.SmbMultichannelEnabled.IsSet() {
		toSerialize["smbMultichannelEnabled"] = o.SmbMultichannelEnabled.Get()
	}
	if o.Stats != nil {
		toSerialize["stats"] = o.Stats
	}
	if o.StigMode.IsSet() {
		toSerialize["stigMode"] = o.StigMode.Get()
	}
	if o.SupportedConfig != nil {
		toSerialize["supportedConfig"] = o.SupportedConfig
	}
	if o.SyslogServers != nil {
		toSerialize["syslogServers"] = o.SyslogServers
	}
	if o.TargetSoftwareVersion.IsSet() {
		toSerialize["targetSoftwareVersion"] = o.TargetSoftwareVersion.Get()
	}
	if o.TenantViewboxSharingEnabled.IsSet() {
		toSerialize["tenantViewboxSharingEnabled"] = o.TenantViewboxSharingEnabled.Get()
	}
	if o.Timezone.IsSet() {
		toSerialize["timezone"] = o.Timezone.Get()
	}
	if o.TurboMode.IsSet() {
		toSerialize["turboMode"] = o.TurboMode.Get()
	}
	if o.UsedMetadataSpacePct.IsSet() {
		toSerialize["usedMetadataSpacePct"] = o.UsedMetadataSpacePct.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCluster struct {
	value *Cluster
	isSet bool
}

func (v NullableCluster) Get() *Cluster {
	return v.value
}

func (v *NullableCluster) Set(val *Cluster) {
	v.value = val
	v.isSet = true
}

func (v NullableCluster) IsSet() bool {
	return v.isSet
}

func (v *NullableCluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCluster(val *Cluster) *NullableCluster {
	return &NullableCluster{value: val, isSet: true}
}

func (v NullableCluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


