/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// NodePort VmInfo specifies information of a NodePort per service and port combination within an application instance.
type NodePort struct {
	IsUiPort NullableBool `json:"isUiPort,omitempty"`
	Port NullableInt32 `json:"port,omitempty"`
	// Specifies use of the nodeport kDefault - No specific service. kHttp - HTTP server. kHttps -  Secure HTTP server. kSsh - Secure shell server.
	Tag NullableString `json:"tag,omitempty"`
}

// NewNodePort instantiates a new NodePort object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodePort() *NodePort {
	this := NodePort{}
	return &this
}

// NewNodePortWithDefaults instantiates a new NodePort object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodePortWithDefaults() *NodePort {
	this := NodePort{}
	return &this
}

// GetIsUiPort returns the IsUiPort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodePort) GetIsUiPort() bool {
	if o == nil || o.IsUiPort.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsUiPort.Get()
}

// GetIsUiPortOk returns a tuple with the IsUiPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodePort) GetIsUiPortOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsUiPort.Get(), o.IsUiPort.IsSet()
}

// HasIsUiPort returns a boolean if a field has been set.
func (o *NodePort) HasIsUiPort() bool {
	if o != nil && o.IsUiPort.IsSet() {
		return true
	}

	return false
}

// SetIsUiPort gets a reference to the given NullableBool and assigns it to the IsUiPort field.
func (o *NodePort) SetIsUiPort(v bool) {
	o.IsUiPort.Set(&v)
}
// SetIsUiPortNil sets the value for IsUiPort to be an explicit nil
func (o *NodePort) SetIsUiPortNil() {
	o.IsUiPort.Set(nil)
}

// UnsetIsUiPort ensures that no value is present for IsUiPort, not even an explicit nil
func (o *NodePort) UnsetIsUiPort() {
	o.IsUiPort.Unset()
}

// GetPort returns the Port field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodePort) GetPort() int32 {
	if o == nil || o.Port.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Port.Get()
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodePort) GetPortOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Port.Get(), o.Port.IsSet()
}

// HasPort returns a boolean if a field has been set.
func (o *NodePort) HasPort() bool {
	if o != nil && o.Port.IsSet() {
		return true
	}

	return false
}

// SetPort gets a reference to the given NullableInt32 and assigns it to the Port field.
func (o *NodePort) SetPort(v int32) {
	o.Port.Set(&v)
}
// SetPortNil sets the value for Port to be an explicit nil
func (o *NodePort) SetPortNil() {
	o.Port.Set(nil)
}

// UnsetPort ensures that no value is present for Port, not even an explicit nil
func (o *NodePort) UnsetPort() {
	o.Port.Unset()
}

// GetTag returns the Tag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodePort) GetTag() string {
	if o == nil || o.Tag.Get() == nil {
		var ret string
		return ret
	}
	return *o.Tag.Get()
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodePort) GetTagOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Tag.Get(), o.Tag.IsSet()
}

// HasTag returns a boolean if a field has been set.
func (o *NodePort) HasTag() bool {
	if o != nil && o.Tag.IsSet() {
		return true
	}

	return false
}

// SetTag gets a reference to the given NullableString and assigns it to the Tag field.
func (o *NodePort) SetTag(v string) {
	o.Tag.Set(&v)
}
// SetTagNil sets the value for Tag to be an explicit nil
func (o *NodePort) SetTagNil() {
	o.Tag.Set(nil)
}

// UnsetTag ensures that no value is present for Tag, not even an explicit nil
func (o *NodePort) UnsetTag() {
	o.Tag.Unset()
}

func (o NodePort) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsUiPort.IsSet() {
		toSerialize["isUiPort"] = o.IsUiPort.Get()
	}
	if o.Port.IsSet() {
		toSerialize["port"] = o.Port.Get()
	}
	if o.Tag.IsSet() {
		toSerialize["tag"] = o.Tag.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableNodePort struct {
	value *NodePort
	isSet bool
}

func (v NullableNodePort) Get() *NodePort {
	return v.value
}

func (v *NullableNodePort) Set(val *NodePort) {
	v.value = val
	v.isSet = true
}

func (v NullableNodePort) IsSet() bool {
	return v.isSet
}

func (v *NullableNodePort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodePort(val *NodePort) *NullableNodePort {
	return &NullableNodePort{value: val, isSet: true}
}

func (v NullableNodePort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodePort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


