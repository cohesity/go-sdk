/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// RunNowParameters Specifies the parameters of a Run Now operation. A Run Now operation will try to backup the a source and/or its databases instantly.
type RunNowParameters struct {
	// Specifies the ids of the DB's to perform run now on.
	DatabaseIds []int64 `json:"databaseIds,omitempty"`
	PhysicalParams *RunNowPhysicalParameters `json:"physicalParams,omitempty"`
	// Specifies the source id of the Databases to perform the Run Now operation on.
	SourceId NullableInt64 `json:"sourceId,omitempty"`
}

// NewRunNowParameters instantiates a new RunNowParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunNowParameters() *RunNowParameters {
	this := RunNowParameters{}
	return &this
}

// NewRunNowParametersWithDefaults instantiates a new RunNowParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunNowParametersWithDefaults() *RunNowParameters {
	this := RunNowParameters{}
	return &this
}

// GetDatabaseIds returns the DatabaseIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RunNowParameters) GetDatabaseIds() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.DatabaseIds
}

// GetDatabaseIdsOk returns a tuple with the DatabaseIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RunNowParameters) GetDatabaseIdsOk() (*[]int64, bool) {
	if o == nil || o.DatabaseIds == nil {
		return nil, false
	}
	return &o.DatabaseIds, true
}

// HasDatabaseIds returns a boolean if a field has been set.
func (o *RunNowParameters) HasDatabaseIds() bool {
	if o != nil && o.DatabaseIds != nil {
		return true
	}

	return false
}

// SetDatabaseIds gets a reference to the given []int64 and assigns it to the DatabaseIds field.
func (o *RunNowParameters) SetDatabaseIds(v []int64) {
	o.DatabaseIds = v
}

// GetPhysicalParams returns the PhysicalParams field value if set, zero value otherwise.
func (o *RunNowParameters) GetPhysicalParams() RunNowPhysicalParameters {
	if o == nil || o.PhysicalParams == nil {
		var ret RunNowPhysicalParameters
		return ret
	}
	return *o.PhysicalParams
}

// GetPhysicalParamsOk returns a tuple with the PhysicalParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunNowParameters) GetPhysicalParamsOk() (*RunNowPhysicalParameters, bool) {
	if o == nil || o.PhysicalParams == nil {
		return nil, false
	}
	return o.PhysicalParams, true
}

// HasPhysicalParams returns a boolean if a field has been set.
func (o *RunNowParameters) HasPhysicalParams() bool {
	if o != nil && o.PhysicalParams != nil {
		return true
	}

	return false
}

// SetPhysicalParams gets a reference to the given RunNowPhysicalParameters and assigns it to the PhysicalParams field.
func (o *RunNowParameters) SetPhysicalParams(v RunNowPhysicalParameters) {
	o.PhysicalParams = &v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RunNowParameters) GetSourceId() int64 {
	if o == nil || o.SourceId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SourceId.Get()
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RunNowParameters) GetSourceIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceId.Get(), o.SourceId.IsSet()
}

// HasSourceId returns a boolean if a field has been set.
func (o *RunNowParameters) HasSourceId() bool {
	if o != nil && o.SourceId.IsSet() {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given NullableInt64 and assigns it to the SourceId field.
func (o *RunNowParameters) SetSourceId(v int64) {
	o.SourceId.Set(&v)
}
// SetSourceIdNil sets the value for SourceId to be an explicit nil
func (o *RunNowParameters) SetSourceIdNil() {
	o.SourceId.Set(nil)
}

// UnsetSourceId ensures that no value is present for SourceId, not even an explicit nil
func (o *RunNowParameters) UnsetSourceId() {
	o.SourceId.Unset()
}

func (o RunNowParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DatabaseIds != nil {
		toSerialize["databaseIds"] = o.DatabaseIds
	}
	if o.PhysicalParams != nil {
		toSerialize["physicalParams"] = o.PhysicalParams
	}
	if o.SourceId.IsSet() {
		toSerialize["sourceId"] = o.SourceId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRunNowParameters struct {
	value *RunNowParameters
	isSet bool
}

func (v NullableRunNowParameters) Get() *RunNowParameters {
	return v.value
}

func (v *NullableRunNowParameters) Set(val *RunNowParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableRunNowParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableRunNowParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunNowParameters(val *RunNowParameters) *NullableRunNowParameters {
	return &NullableRunNowParameters{value: val, isSet: true}
}

func (v NullableRunNowParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunNowParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


