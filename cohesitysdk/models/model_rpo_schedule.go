/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// RpoSchedule Specifies an RPO Schedule.
type RpoSchedule struct {
	// Specifies an RPO policy interval unit which will be used along with the multiplier to calculate the interval for the RPO policy execution. this can be kHours, kDays, KWeeks, kMonths RPOIntervalUnit.  Specifies an RPO Schedule interval unit. kMinutes specifies that the rpo interval unit is hours. kHours specifies that the rpo interval unit is hours. kDays specifies that the rpo interval unit is days. kWeeks specifies that the rpo interval unit is weeks. kMonths specifies that the rpo interval unit is months.
	IntervalUnit NullableString `json:"intervalUnit,omitempty"`
	// Specifies the multiplier value to be used with the  RPO interval unit value.
	Multiplier NullableInt64 `json:"multiplier,omitempty"`
}

// NewRpoSchedule instantiates a new RpoSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRpoSchedule() *RpoSchedule {
	this := RpoSchedule{}
	return &this
}

// NewRpoScheduleWithDefaults instantiates a new RpoSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRpoScheduleWithDefaults() *RpoSchedule {
	this := RpoSchedule{}
	return &this
}

// GetIntervalUnit returns the IntervalUnit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RpoSchedule) GetIntervalUnit() string {
	if o == nil || o.IntervalUnit.Get() == nil {
		var ret string
		return ret
	}
	return *o.IntervalUnit.Get()
}

// GetIntervalUnitOk returns a tuple with the IntervalUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RpoSchedule) GetIntervalUnitOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IntervalUnit.Get(), o.IntervalUnit.IsSet()
}

// HasIntervalUnit returns a boolean if a field has been set.
func (o *RpoSchedule) HasIntervalUnit() bool {
	if o != nil && o.IntervalUnit.IsSet() {
		return true
	}

	return false
}

// SetIntervalUnit gets a reference to the given NullableString and assigns it to the IntervalUnit field.
func (o *RpoSchedule) SetIntervalUnit(v string) {
	o.IntervalUnit.Set(&v)
}
// SetIntervalUnitNil sets the value for IntervalUnit to be an explicit nil
func (o *RpoSchedule) SetIntervalUnitNil() {
	o.IntervalUnit.Set(nil)
}

// UnsetIntervalUnit ensures that no value is present for IntervalUnit, not even an explicit nil
func (o *RpoSchedule) UnsetIntervalUnit() {
	o.IntervalUnit.Unset()
}

// GetMultiplier returns the Multiplier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RpoSchedule) GetMultiplier() int64 {
	if o == nil || o.Multiplier.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Multiplier.Get()
}

// GetMultiplierOk returns a tuple with the Multiplier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RpoSchedule) GetMultiplierOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Multiplier.Get(), o.Multiplier.IsSet()
}

// HasMultiplier returns a boolean if a field has been set.
func (o *RpoSchedule) HasMultiplier() bool {
	if o != nil && o.Multiplier.IsSet() {
		return true
	}

	return false
}

// SetMultiplier gets a reference to the given NullableInt64 and assigns it to the Multiplier field.
func (o *RpoSchedule) SetMultiplier(v int64) {
	o.Multiplier.Set(&v)
}
// SetMultiplierNil sets the value for Multiplier to be an explicit nil
func (o *RpoSchedule) SetMultiplierNil() {
	o.Multiplier.Set(nil)
}

// UnsetMultiplier ensures that no value is present for Multiplier, not even an explicit nil
func (o *RpoSchedule) UnsetMultiplier() {
	o.Multiplier.Unset()
}

func (o RpoSchedule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IntervalUnit.IsSet() {
		toSerialize["intervalUnit"] = o.IntervalUnit.Get()
	}
	if o.Multiplier.IsSet() {
		toSerialize["multiplier"] = o.Multiplier.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRpoSchedule struct {
	value *RpoSchedule
	isSet bool
}

func (v NullableRpoSchedule) Get() *RpoSchedule {
	return v.value
}

func (v *NullableRpoSchedule) Set(val *RpoSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableRpoSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableRpoSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRpoSchedule(val *RpoSchedule) *NullableRpoSchedule {
	return &NullableRpoSchedule{value: val, isSet: true}
}

func (v NullableRpoSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRpoSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


