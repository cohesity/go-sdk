/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ThroughputTile Throughput information for dashboard.
type ThroughputTile struct {
	// Maxium Read throughput in last 24 hours.
	MaxReadThroughput NullableInt64 `json:"maxReadThroughput,omitempty"`
	// Maximum Write throughput in last 24 hours.
	MaxWriteThroughput NullableInt64 `json:"maxWriteThroughput,omitempty"`
	// Read throughput samples taken for the past 24 hours at 10 minutes interval given in descending order of time.
	ReadThroughputSamples []Sample `json:"readThroughputSamples,omitempty"`
	// Write throughput samples taken for the past 24 hours at 10 minutes interval given in descending order of time.
	WriteThroughputSamples []Sample `json:"writeThroughputSamples,omitempty"`
}

// NewThroughputTile instantiates a new ThroughputTile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThroughputTile() *ThroughputTile {
	this := ThroughputTile{}
	return &this
}

// NewThroughputTileWithDefaults instantiates a new ThroughputTile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThroughputTileWithDefaults() *ThroughputTile {
	this := ThroughputTile{}
	return &this
}

// GetMaxReadThroughput returns the MaxReadThroughput field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThroughputTile) GetMaxReadThroughput() int64 {
	if o == nil || o.MaxReadThroughput.Get() == nil {
		var ret int64
		return ret
	}
	return *o.MaxReadThroughput.Get()
}

// GetMaxReadThroughputOk returns a tuple with the MaxReadThroughput field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThroughputTile) GetMaxReadThroughputOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MaxReadThroughput.Get(), o.MaxReadThroughput.IsSet()
}

// HasMaxReadThroughput returns a boolean if a field has been set.
func (o *ThroughputTile) HasMaxReadThroughput() bool {
	if o != nil && o.MaxReadThroughput.IsSet() {
		return true
	}

	return false
}

// SetMaxReadThroughput gets a reference to the given NullableInt64 and assigns it to the MaxReadThroughput field.
func (o *ThroughputTile) SetMaxReadThroughput(v int64) {
	o.MaxReadThroughput.Set(&v)
}
// SetMaxReadThroughputNil sets the value for MaxReadThroughput to be an explicit nil
func (o *ThroughputTile) SetMaxReadThroughputNil() {
	o.MaxReadThroughput.Set(nil)
}

// UnsetMaxReadThroughput ensures that no value is present for MaxReadThroughput, not even an explicit nil
func (o *ThroughputTile) UnsetMaxReadThroughput() {
	o.MaxReadThroughput.Unset()
}

// GetMaxWriteThroughput returns the MaxWriteThroughput field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThroughputTile) GetMaxWriteThroughput() int64 {
	if o == nil || o.MaxWriteThroughput.Get() == nil {
		var ret int64
		return ret
	}
	return *o.MaxWriteThroughput.Get()
}

// GetMaxWriteThroughputOk returns a tuple with the MaxWriteThroughput field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThroughputTile) GetMaxWriteThroughputOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MaxWriteThroughput.Get(), o.MaxWriteThroughput.IsSet()
}

// HasMaxWriteThroughput returns a boolean if a field has been set.
func (o *ThroughputTile) HasMaxWriteThroughput() bool {
	if o != nil && o.MaxWriteThroughput.IsSet() {
		return true
	}

	return false
}

// SetMaxWriteThroughput gets a reference to the given NullableInt64 and assigns it to the MaxWriteThroughput field.
func (o *ThroughputTile) SetMaxWriteThroughput(v int64) {
	o.MaxWriteThroughput.Set(&v)
}
// SetMaxWriteThroughputNil sets the value for MaxWriteThroughput to be an explicit nil
func (o *ThroughputTile) SetMaxWriteThroughputNil() {
	o.MaxWriteThroughput.Set(nil)
}

// UnsetMaxWriteThroughput ensures that no value is present for MaxWriteThroughput, not even an explicit nil
func (o *ThroughputTile) UnsetMaxWriteThroughput() {
	o.MaxWriteThroughput.Unset()
}

// GetReadThroughputSamples returns the ReadThroughputSamples field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThroughputTile) GetReadThroughputSamples() []Sample {
	if o == nil  {
		var ret []Sample
		return ret
	}
	return o.ReadThroughputSamples
}

// GetReadThroughputSamplesOk returns a tuple with the ReadThroughputSamples field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThroughputTile) GetReadThroughputSamplesOk() (*[]Sample, bool) {
	if o == nil || o.ReadThroughputSamples == nil {
		return nil, false
	}
	return &o.ReadThroughputSamples, true
}

// HasReadThroughputSamples returns a boolean if a field has been set.
func (o *ThroughputTile) HasReadThroughputSamples() bool {
	if o != nil && o.ReadThroughputSamples != nil {
		return true
	}

	return false
}

// SetReadThroughputSamples gets a reference to the given []Sample and assigns it to the ReadThroughputSamples field.
func (o *ThroughputTile) SetReadThroughputSamples(v []Sample) {
	o.ReadThroughputSamples = v
}

// GetWriteThroughputSamples returns the WriteThroughputSamples field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThroughputTile) GetWriteThroughputSamples() []Sample {
	if o == nil  {
		var ret []Sample
		return ret
	}
	return o.WriteThroughputSamples
}

// GetWriteThroughputSamplesOk returns a tuple with the WriteThroughputSamples field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThroughputTile) GetWriteThroughputSamplesOk() (*[]Sample, bool) {
	if o == nil || o.WriteThroughputSamples == nil {
		return nil, false
	}
	return &o.WriteThroughputSamples, true
}

// HasWriteThroughputSamples returns a boolean if a field has been set.
func (o *ThroughputTile) HasWriteThroughputSamples() bool {
	if o != nil && o.WriteThroughputSamples != nil {
		return true
	}

	return false
}

// SetWriteThroughputSamples gets a reference to the given []Sample and assigns it to the WriteThroughputSamples field.
func (o *ThroughputTile) SetWriteThroughputSamples(v []Sample) {
	o.WriteThroughputSamples = v
}

func (o ThroughputTile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MaxReadThroughput.IsSet() {
		toSerialize["maxReadThroughput"] = o.MaxReadThroughput.Get()
	}
	if o.MaxWriteThroughput.IsSet() {
		toSerialize["maxWriteThroughput"] = o.MaxWriteThroughput.Get()
	}
	if o.ReadThroughputSamples != nil {
		toSerialize["readThroughputSamples"] = o.ReadThroughputSamples
	}
	if o.WriteThroughputSamples != nil {
		toSerialize["writeThroughputSamples"] = o.WriteThroughputSamples
	}
	return json.Marshal(toSerialize)
}

type NullableThroughputTile struct {
	value *ThroughputTile
	isSet bool
}

func (v NullableThroughputTile) Get() *ThroughputTile {
	return v.value
}

func (v *NullableThroughputTile) Set(val *ThroughputTile) {
	v.value = val
	v.isSet = true
}

func (v NullableThroughputTile) IsSet() bool {
	return v.isSet
}

func (v *NullableThroughputTile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThroughputTile(val *ThroughputTile) *NullableThroughputTile {
	return &NullableThroughputTile{value: val, isSet: true}
}

func (v NullableThroughputTile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThroughputTile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


