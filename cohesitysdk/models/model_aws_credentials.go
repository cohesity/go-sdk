/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// AwsCredentials Specifies the credentials to authenticate with AWS Cloud Platform.
type AwsCredentials struct {
	// Specifies Access key of the AWS account.
	AccessKey NullableString `json:"accessKey,omitempty"`
	// Specifies Amazon Resource Name (owner ID) of the IAM user, act as an unique identifier of as AWS entity.
	AmazonResourceName NullableString `json:"amazonResourceName,omitempty"`
	// Specifies the authentication method to be used for API calls. Specifies the authentication method to be used for API calls. 'kUseIAMUser' indicates a user based authentication. 'kUseIAMRole' indicates a role based authentication, used only for AWS CE.
	AuthMethod NullableString `json:"authMethod,omitempty"`
	// Specifies the entity type such as 'kIAMUser' if the environment is kAWS. Specifies the type of an AWS source entity. 'kIAMUser' indicates a unique user within an AWS account. 'kRegion' indicates a geographical region in the global infrastructure. 'kAvailabilityZone' indicates an availability zone within a region. 'kEC2Instance' indicates a Virtual Machine running in AWS environment. 'kVPC' indicates a virtual private cloud (VPC) network within AWS. 'kSubnet' indicates a subnet inside the VPC. 'kNetworkSecurityGroup' represents a network security group. 'kInstanceType' represents various machine types. 'kKeyPair' represents a pair of public and private key used to login into a Virtual Machine. 'kTag' represents a tag attached to EC2 instance. 'kRDSOptionGroup' represents a RDS option group for configuring database features. 'kRDSParameterGroup' represents a RDS parameter group. 'kRDSInstance' represents a RDS DB instance. 'kRDSSubnet' represents a RDS subnet. 'kRDSTag' represents a tag attached to RDS instance.
	AwsType NullableString `json:"awsType,omitempty"`
	// Specifies the IAM role which will be used to access the security credentials required for API calls.
	IamRoleArn NullableString `json:"iamRoleArn,omitempty"`
	// Specifies Secret Access key of the AWS account.
	SecretAccessKey NullableString `json:"secretAccessKey,omitempty"`
	// Specifies the subscription type of AWS such as 'kAWSCommercial' or 'kAWSGovCloud'. Specifies the subscription type of an AWS source entity. 'kAWSCommercial' indicates a standard AWS subscription. 'kAWSGovCloud' indicates a govt AWS subscription.
	SubscriptionType NullableString `json:"subscriptionType,omitempty"`
}

// NewAwsCredentials instantiates a new AwsCredentials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsCredentials() *AwsCredentials {
	this := AwsCredentials{}
	return &this
}

// NewAwsCredentialsWithDefaults instantiates a new AwsCredentials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsCredentialsWithDefaults() *AwsCredentials {
	this := AwsCredentials{}
	return &this
}

// GetAccessKey returns the AccessKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsCredentials) GetAccessKey() string {
	if o == nil || o.AccessKey.Get() == nil {
		var ret string
		return ret
	}
	return *o.AccessKey.Get()
}

// GetAccessKeyOk returns a tuple with the AccessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsCredentials) GetAccessKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AccessKey.Get(), o.AccessKey.IsSet()
}

// HasAccessKey returns a boolean if a field has been set.
func (o *AwsCredentials) HasAccessKey() bool {
	if o != nil && o.AccessKey.IsSet() {
		return true
	}

	return false
}

// SetAccessKey gets a reference to the given NullableString and assigns it to the AccessKey field.
func (o *AwsCredentials) SetAccessKey(v string) {
	o.AccessKey.Set(&v)
}
// SetAccessKeyNil sets the value for AccessKey to be an explicit nil
func (o *AwsCredentials) SetAccessKeyNil() {
	o.AccessKey.Set(nil)
}

// UnsetAccessKey ensures that no value is present for AccessKey, not even an explicit nil
func (o *AwsCredentials) UnsetAccessKey() {
	o.AccessKey.Unset()
}

// GetAmazonResourceName returns the AmazonResourceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsCredentials) GetAmazonResourceName() string {
	if o == nil || o.AmazonResourceName.Get() == nil {
		var ret string
		return ret
	}
	return *o.AmazonResourceName.Get()
}

// GetAmazonResourceNameOk returns a tuple with the AmazonResourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsCredentials) GetAmazonResourceNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AmazonResourceName.Get(), o.AmazonResourceName.IsSet()
}

// HasAmazonResourceName returns a boolean if a field has been set.
func (o *AwsCredentials) HasAmazonResourceName() bool {
	if o != nil && o.AmazonResourceName.IsSet() {
		return true
	}

	return false
}

// SetAmazonResourceName gets a reference to the given NullableString and assigns it to the AmazonResourceName field.
func (o *AwsCredentials) SetAmazonResourceName(v string) {
	o.AmazonResourceName.Set(&v)
}
// SetAmazonResourceNameNil sets the value for AmazonResourceName to be an explicit nil
func (o *AwsCredentials) SetAmazonResourceNameNil() {
	o.AmazonResourceName.Set(nil)
}

// UnsetAmazonResourceName ensures that no value is present for AmazonResourceName, not even an explicit nil
func (o *AwsCredentials) UnsetAmazonResourceName() {
	o.AmazonResourceName.Unset()
}

// GetAuthMethod returns the AuthMethod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsCredentials) GetAuthMethod() string {
	if o == nil || o.AuthMethod.Get() == nil {
		var ret string
		return ret
	}
	return *o.AuthMethod.Get()
}

// GetAuthMethodOk returns a tuple with the AuthMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsCredentials) GetAuthMethodOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AuthMethod.Get(), o.AuthMethod.IsSet()
}

// HasAuthMethod returns a boolean if a field has been set.
func (o *AwsCredentials) HasAuthMethod() bool {
	if o != nil && o.AuthMethod.IsSet() {
		return true
	}

	return false
}

// SetAuthMethod gets a reference to the given NullableString and assigns it to the AuthMethod field.
func (o *AwsCredentials) SetAuthMethod(v string) {
	o.AuthMethod.Set(&v)
}
// SetAuthMethodNil sets the value for AuthMethod to be an explicit nil
func (o *AwsCredentials) SetAuthMethodNil() {
	o.AuthMethod.Set(nil)
}

// UnsetAuthMethod ensures that no value is present for AuthMethod, not even an explicit nil
func (o *AwsCredentials) UnsetAuthMethod() {
	o.AuthMethod.Unset()
}

// GetAwsType returns the AwsType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsCredentials) GetAwsType() string {
	if o == nil || o.AwsType.Get() == nil {
		var ret string
		return ret
	}
	return *o.AwsType.Get()
}

// GetAwsTypeOk returns a tuple with the AwsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsCredentials) GetAwsTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AwsType.Get(), o.AwsType.IsSet()
}

// HasAwsType returns a boolean if a field has been set.
func (o *AwsCredentials) HasAwsType() bool {
	if o != nil && o.AwsType.IsSet() {
		return true
	}

	return false
}

// SetAwsType gets a reference to the given NullableString and assigns it to the AwsType field.
func (o *AwsCredentials) SetAwsType(v string) {
	o.AwsType.Set(&v)
}
// SetAwsTypeNil sets the value for AwsType to be an explicit nil
func (o *AwsCredentials) SetAwsTypeNil() {
	o.AwsType.Set(nil)
}

// UnsetAwsType ensures that no value is present for AwsType, not even an explicit nil
func (o *AwsCredentials) UnsetAwsType() {
	o.AwsType.Unset()
}

// GetIamRoleArn returns the IamRoleArn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsCredentials) GetIamRoleArn() string {
	if o == nil || o.IamRoleArn.Get() == nil {
		var ret string
		return ret
	}
	return *o.IamRoleArn.Get()
}

// GetIamRoleArnOk returns a tuple with the IamRoleArn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsCredentials) GetIamRoleArnOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IamRoleArn.Get(), o.IamRoleArn.IsSet()
}

// HasIamRoleArn returns a boolean if a field has been set.
func (o *AwsCredentials) HasIamRoleArn() bool {
	if o != nil && o.IamRoleArn.IsSet() {
		return true
	}

	return false
}

// SetIamRoleArn gets a reference to the given NullableString and assigns it to the IamRoleArn field.
func (o *AwsCredentials) SetIamRoleArn(v string) {
	o.IamRoleArn.Set(&v)
}
// SetIamRoleArnNil sets the value for IamRoleArn to be an explicit nil
func (o *AwsCredentials) SetIamRoleArnNil() {
	o.IamRoleArn.Set(nil)
}

// UnsetIamRoleArn ensures that no value is present for IamRoleArn, not even an explicit nil
func (o *AwsCredentials) UnsetIamRoleArn() {
	o.IamRoleArn.Unset()
}

// GetSecretAccessKey returns the SecretAccessKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsCredentials) GetSecretAccessKey() string {
	if o == nil || o.SecretAccessKey.Get() == nil {
		var ret string
		return ret
	}
	return *o.SecretAccessKey.Get()
}

// GetSecretAccessKeyOk returns a tuple with the SecretAccessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsCredentials) GetSecretAccessKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SecretAccessKey.Get(), o.SecretAccessKey.IsSet()
}

// HasSecretAccessKey returns a boolean if a field has been set.
func (o *AwsCredentials) HasSecretAccessKey() bool {
	if o != nil && o.SecretAccessKey.IsSet() {
		return true
	}

	return false
}

// SetSecretAccessKey gets a reference to the given NullableString and assigns it to the SecretAccessKey field.
func (o *AwsCredentials) SetSecretAccessKey(v string) {
	o.SecretAccessKey.Set(&v)
}
// SetSecretAccessKeyNil sets the value for SecretAccessKey to be an explicit nil
func (o *AwsCredentials) SetSecretAccessKeyNil() {
	o.SecretAccessKey.Set(nil)
}

// UnsetSecretAccessKey ensures that no value is present for SecretAccessKey, not even an explicit nil
func (o *AwsCredentials) UnsetSecretAccessKey() {
	o.SecretAccessKey.Unset()
}

// GetSubscriptionType returns the SubscriptionType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsCredentials) GetSubscriptionType() string {
	if o == nil || o.SubscriptionType.Get() == nil {
		var ret string
		return ret
	}
	return *o.SubscriptionType.Get()
}

// GetSubscriptionTypeOk returns a tuple with the SubscriptionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsCredentials) GetSubscriptionTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SubscriptionType.Get(), o.SubscriptionType.IsSet()
}

// HasSubscriptionType returns a boolean if a field has been set.
func (o *AwsCredentials) HasSubscriptionType() bool {
	if o != nil && o.SubscriptionType.IsSet() {
		return true
	}

	return false
}

// SetSubscriptionType gets a reference to the given NullableString and assigns it to the SubscriptionType field.
func (o *AwsCredentials) SetSubscriptionType(v string) {
	o.SubscriptionType.Set(&v)
}
// SetSubscriptionTypeNil sets the value for SubscriptionType to be an explicit nil
func (o *AwsCredentials) SetSubscriptionTypeNil() {
	o.SubscriptionType.Set(nil)
}

// UnsetSubscriptionType ensures that no value is present for SubscriptionType, not even an explicit nil
func (o *AwsCredentials) UnsetSubscriptionType() {
	o.SubscriptionType.Unset()
}

func (o AwsCredentials) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessKey.IsSet() {
		toSerialize["accessKey"] = o.AccessKey.Get()
	}
	if o.AmazonResourceName.IsSet() {
		toSerialize["amazonResourceName"] = o.AmazonResourceName.Get()
	}
	if o.AuthMethod.IsSet() {
		toSerialize["authMethod"] = o.AuthMethod.Get()
	}
	if o.AwsType.IsSet() {
		toSerialize["awsType"] = o.AwsType.Get()
	}
	if o.IamRoleArn.IsSet() {
		toSerialize["iamRoleArn"] = o.IamRoleArn.Get()
	}
	if o.SecretAccessKey.IsSet() {
		toSerialize["secretAccessKey"] = o.SecretAccessKey.Get()
	}
	if o.SubscriptionType.IsSet() {
		toSerialize["subscriptionType"] = o.SubscriptionType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAwsCredentials struct {
	value *AwsCredentials
	isSet bool
}

func (v NullableAwsCredentials) Get() *AwsCredentials {
	return v.value
}

func (v *NullableAwsCredentials) Set(val *AwsCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsCredentials(val *AwsCredentials) *NullableAwsCredentials {
	return &NullableAwsCredentials{value: val, isSet: true}
}

func (v NullableAwsCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


