/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// CloneRefreshRequest Specifies the settings for creating a new clone refresh task.
type CloneRefreshRequest struct {
	// Specifies the ID of the clone task. This is required to determine the details of the clone to be refreshed as clone task contains the details of the clone.
	CloneTaskId NullableInt64 `json:"cloneTaskId,omitempty"`
	// Specifies if the Restore Task should continue when some operations on some objects fail. If true, the Cohesity Cluster ignores intermittent errors and restores as many objects as possible.
	ContinueOnError NullableBool `json:"continueOnError,omitempty"`
	// Specifies the name of the Restore Task. This field must be set and must be a unique name.
	Name NullableString `json:"name"`
	// Specify a new registered parent Protection Source. If specified the selected objects are cloned or recovered to this new Protection Source. If not specified, objects are cloned or recovered to the original Protection Source that was managing them.
	NewParentId NullableInt64 `json:"newParentId,omitempty"`
	// Array of Objects.  Specifies a list of Protection Source objects or Protection Job objects (with specified Protection Source objects).
	Objects []RestoreObjectDetails `json:"objects,omitempty"`
	// Specifies a point in time (unix epoch) to which the database needs to be refreshed. This helps granular refresh of the database. If this is set, relevant archive logs (redo logs) will also be re-played to match with the specified time. For this, the log backup should be enabled in the backup policy. If this is not set, then only the incremental backup data will be used to refresh the target database.
	RefreshTimeSecs NullableInt64 `json:"refreshTimeSecs,omitempty"`
	// Specifies the ID of the source database in the backup job snapshot. This is the entity ID of the database, which needs to be used as a source during the refresh process.
	SourceDatabaseId NullableInt64 `json:"sourceDatabaseId,omitempty"`
	VlanParameters *VlanParameters `json:"vlanParameters,omitempty"`
}

// NewCloneRefreshRequest instantiates a new CloneRefreshRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloneRefreshRequest(name NullableString) *CloneRefreshRequest {
	this := CloneRefreshRequest{}
	this.Name = name
	return &this
}

// NewCloneRefreshRequestWithDefaults instantiates a new CloneRefreshRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloneRefreshRequestWithDefaults() *CloneRefreshRequest {
	this := CloneRefreshRequest{}
	return &this
}

// GetCloneTaskId returns the CloneTaskId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloneRefreshRequest) GetCloneTaskId() int64 {
	if o == nil || o.CloneTaskId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.CloneTaskId.Get()
}

// GetCloneTaskIdOk returns a tuple with the CloneTaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloneRefreshRequest) GetCloneTaskIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CloneTaskId.Get(), o.CloneTaskId.IsSet()
}

// HasCloneTaskId returns a boolean if a field has been set.
func (o *CloneRefreshRequest) HasCloneTaskId() bool {
	if o != nil && o.CloneTaskId.IsSet() {
		return true
	}

	return false
}

// SetCloneTaskId gets a reference to the given NullableInt64 and assigns it to the CloneTaskId field.
func (o *CloneRefreshRequest) SetCloneTaskId(v int64) {
	o.CloneTaskId.Set(&v)
}
// SetCloneTaskIdNil sets the value for CloneTaskId to be an explicit nil
func (o *CloneRefreshRequest) SetCloneTaskIdNil() {
	o.CloneTaskId.Set(nil)
}

// UnsetCloneTaskId ensures that no value is present for CloneTaskId, not even an explicit nil
func (o *CloneRefreshRequest) UnsetCloneTaskId() {
	o.CloneTaskId.Unset()
}

// GetContinueOnError returns the ContinueOnError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloneRefreshRequest) GetContinueOnError() bool {
	if o == nil || o.ContinueOnError.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ContinueOnError.Get()
}

// GetContinueOnErrorOk returns a tuple with the ContinueOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloneRefreshRequest) GetContinueOnErrorOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ContinueOnError.Get(), o.ContinueOnError.IsSet()
}

// HasContinueOnError returns a boolean if a field has been set.
func (o *CloneRefreshRequest) HasContinueOnError() bool {
	if o != nil && o.ContinueOnError.IsSet() {
		return true
	}

	return false
}

// SetContinueOnError gets a reference to the given NullableBool and assigns it to the ContinueOnError field.
func (o *CloneRefreshRequest) SetContinueOnError(v bool) {
	o.ContinueOnError.Set(&v)
}
// SetContinueOnErrorNil sets the value for ContinueOnError to be an explicit nil
func (o *CloneRefreshRequest) SetContinueOnErrorNil() {
	o.ContinueOnError.Set(nil)
}

// UnsetContinueOnError ensures that no value is present for ContinueOnError, not even an explicit nil
func (o *CloneRefreshRequest) UnsetContinueOnError() {
	o.ContinueOnError.Unset()
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CloneRefreshRequest) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloneRefreshRequest) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *CloneRefreshRequest) SetName(v string) {
	o.Name.Set(&v)
}

// GetNewParentId returns the NewParentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloneRefreshRequest) GetNewParentId() int64 {
	if o == nil || o.NewParentId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NewParentId.Get()
}

// GetNewParentIdOk returns a tuple with the NewParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloneRefreshRequest) GetNewParentIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NewParentId.Get(), o.NewParentId.IsSet()
}

// HasNewParentId returns a boolean if a field has been set.
func (o *CloneRefreshRequest) HasNewParentId() bool {
	if o != nil && o.NewParentId.IsSet() {
		return true
	}

	return false
}

// SetNewParentId gets a reference to the given NullableInt64 and assigns it to the NewParentId field.
func (o *CloneRefreshRequest) SetNewParentId(v int64) {
	o.NewParentId.Set(&v)
}
// SetNewParentIdNil sets the value for NewParentId to be an explicit nil
func (o *CloneRefreshRequest) SetNewParentIdNil() {
	o.NewParentId.Set(nil)
}

// UnsetNewParentId ensures that no value is present for NewParentId, not even an explicit nil
func (o *CloneRefreshRequest) UnsetNewParentId() {
	o.NewParentId.Unset()
}

// GetObjects returns the Objects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloneRefreshRequest) GetObjects() []RestoreObjectDetails {
	if o == nil  {
		var ret []RestoreObjectDetails
		return ret
	}
	return o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloneRefreshRequest) GetObjectsOk() (*[]RestoreObjectDetails, bool) {
	if o == nil || o.Objects == nil {
		return nil, false
	}
	return &o.Objects, true
}

// HasObjects returns a boolean if a field has been set.
func (o *CloneRefreshRequest) HasObjects() bool {
	if o != nil && o.Objects != nil {
		return true
	}

	return false
}

// SetObjects gets a reference to the given []RestoreObjectDetails and assigns it to the Objects field.
func (o *CloneRefreshRequest) SetObjects(v []RestoreObjectDetails) {
	o.Objects = v
}

// GetRefreshTimeSecs returns the RefreshTimeSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloneRefreshRequest) GetRefreshTimeSecs() int64 {
	if o == nil || o.RefreshTimeSecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RefreshTimeSecs.Get()
}

// GetRefreshTimeSecsOk returns a tuple with the RefreshTimeSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloneRefreshRequest) GetRefreshTimeSecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RefreshTimeSecs.Get(), o.RefreshTimeSecs.IsSet()
}

// HasRefreshTimeSecs returns a boolean if a field has been set.
func (o *CloneRefreshRequest) HasRefreshTimeSecs() bool {
	if o != nil && o.RefreshTimeSecs.IsSet() {
		return true
	}

	return false
}

// SetRefreshTimeSecs gets a reference to the given NullableInt64 and assigns it to the RefreshTimeSecs field.
func (o *CloneRefreshRequest) SetRefreshTimeSecs(v int64) {
	o.RefreshTimeSecs.Set(&v)
}
// SetRefreshTimeSecsNil sets the value for RefreshTimeSecs to be an explicit nil
func (o *CloneRefreshRequest) SetRefreshTimeSecsNil() {
	o.RefreshTimeSecs.Set(nil)
}

// UnsetRefreshTimeSecs ensures that no value is present for RefreshTimeSecs, not even an explicit nil
func (o *CloneRefreshRequest) UnsetRefreshTimeSecs() {
	o.RefreshTimeSecs.Unset()
}

// GetSourceDatabaseId returns the SourceDatabaseId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloneRefreshRequest) GetSourceDatabaseId() int64 {
	if o == nil || o.SourceDatabaseId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SourceDatabaseId.Get()
}

// GetSourceDatabaseIdOk returns a tuple with the SourceDatabaseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloneRefreshRequest) GetSourceDatabaseIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceDatabaseId.Get(), o.SourceDatabaseId.IsSet()
}

// HasSourceDatabaseId returns a boolean if a field has been set.
func (o *CloneRefreshRequest) HasSourceDatabaseId() bool {
	if o != nil && o.SourceDatabaseId.IsSet() {
		return true
	}

	return false
}

// SetSourceDatabaseId gets a reference to the given NullableInt64 and assigns it to the SourceDatabaseId field.
func (o *CloneRefreshRequest) SetSourceDatabaseId(v int64) {
	o.SourceDatabaseId.Set(&v)
}
// SetSourceDatabaseIdNil sets the value for SourceDatabaseId to be an explicit nil
func (o *CloneRefreshRequest) SetSourceDatabaseIdNil() {
	o.SourceDatabaseId.Set(nil)
}

// UnsetSourceDatabaseId ensures that no value is present for SourceDatabaseId, not even an explicit nil
func (o *CloneRefreshRequest) UnsetSourceDatabaseId() {
	o.SourceDatabaseId.Unset()
}

// GetVlanParameters returns the VlanParameters field value if set, zero value otherwise.
func (o *CloneRefreshRequest) GetVlanParameters() VlanParameters {
	if o == nil || o.VlanParameters == nil {
		var ret VlanParameters
		return ret
	}
	return *o.VlanParameters
}

// GetVlanParametersOk returns a tuple with the VlanParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloneRefreshRequest) GetVlanParametersOk() (*VlanParameters, bool) {
	if o == nil || o.VlanParameters == nil {
		return nil, false
	}
	return o.VlanParameters, true
}

// HasVlanParameters returns a boolean if a field has been set.
func (o *CloneRefreshRequest) HasVlanParameters() bool {
	if o != nil && o.VlanParameters != nil {
		return true
	}

	return false
}

// SetVlanParameters gets a reference to the given VlanParameters and assigns it to the VlanParameters field.
func (o *CloneRefreshRequest) SetVlanParameters(v VlanParameters) {
	o.VlanParameters = &v
}

func (o CloneRefreshRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CloneTaskId.IsSet() {
		toSerialize["cloneTaskId"] = o.CloneTaskId.Get()
	}
	if o.ContinueOnError.IsSet() {
		toSerialize["continueOnError"] = o.ContinueOnError.Get()
	}
	if true {
		toSerialize["name"] = o.Name.Get()
	}
	if o.NewParentId.IsSet() {
		toSerialize["newParentId"] = o.NewParentId.Get()
	}
	if o.Objects != nil {
		toSerialize["objects"] = o.Objects
	}
	if o.RefreshTimeSecs.IsSet() {
		toSerialize["refreshTimeSecs"] = o.RefreshTimeSecs.Get()
	}
	if o.SourceDatabaseId.IsSet() {
		toSerialize["sourceDatabaseId"] = o.SourceDatabaseId.Get()
	}
	if o.VlanParameters != nil {
		toSerialize["vlanParameters"] = o.VlanParameters
	}
	return json.Marshal(toSerialize)
}

type NullableCloneRefreshRequest struct {
	value *CloneRefreshRequest
	isSet bool
}

func (v NullableCloneRefreshRequest) Get() *CloneRefreshRequest {
	return v.value
}

func (v *NullableCloneRefreshRequest) Set(val *CloneRefreshRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCloneRefreshRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCloneRefreshRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloneRefreshRequest(val *CloneRefreshRequest) *NullableCloneRefreshRequest {
	return &NullableCloneRefreshRequest{value: val, isSet: true}
}

func (v NullableCloneRefreshRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloneRefreshRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


