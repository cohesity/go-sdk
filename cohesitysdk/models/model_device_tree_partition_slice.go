/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// DeviceTreePartitionSlice struct for DeviceTreePartitionSlice
type DeviceTreePartitionSlice struct {
	// The disk to use.
	DiskFileName NullableString `json:"diskFileName,omitempty"`
	// The length of data for the LVM volume (for which this device tree is being built) in bytes. It does not include size of the LVM meta data.
	Length NullableInt64 `json:"length,omitempty"`
	// Each LVM partition starts with LVM meta data. After the meta data there can be data for one or more LVM volumes.  This field indicates the offset in bytes (relative to partition) where data for various LVM volumes starts on the partition. NOTE: If this device tree represents first LVM volume on the  partition, 'lvm_data_offset' is equal to 'offset'.
	LvmDataOffset NullableInt64 `json:"lvmDataOffset,omitempty"`
	// This is the offset (in bytes) where data for the LVM volume (for which this device tree is being build) starts relative to the start of the partition above.
	Offset NullableInt64 `json:"offset,omitempty"`
	// The partition to use in the disk above.
	PartitionNumber NullableInt32 `json:"partitionNumber,omitempty"`
}

// NewDeviceTreePartitionSlice instantiates a new DeviceTreePartitionSlice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceTreePartitionSlice() *DeviceTreePartitionSlice {
	this := DeviceTreePartitionSlice{}
	return &this
}

// NewDeviceTreePartitionSliceWithDefaults instantiates a new DeviceTreePartitionSlice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceTreePartitionSliceWithDefaults() *DeviceTreePartitionSlice {
	this := DeviceTreePartitionSlice{}
	return &this
}

// GetDiskFileName returns the DiskFileName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceTreePartitionSlice) GetDiskFileName() string {
	if o == nil || o.DiskFileName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DiskFileName.Get()
}

// GetDiskFileNameOk returns a tuple with the DiskFileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceTreePartitionSlice) GetDiskFileNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DiskFileName.Get(), o.DiskFileName.IsSet()
}

// HasDiskFileName returns a boolean if a field has been set.
func (o *DeviceTreePartitionSlice) HasDiskFileName() bool {
	if o != nil && o.DiskFileName.IsSet() {
		return true
	}

	return false
}

// SetDiskFileName gets a reference to the given NullableString and assigns it to the DiskFileName field.
func (o *DeviceTreePartitionSlice) SetDiskFileName(v string) {
	o.DiskFileName.Set(&v)
}
// SetDiskFileNameNil sets the value for DiskFileName to be an explicit nil
func (o *DeviceTreePartitionSlice) SetDiskFileNameNil() {
	o.DiskFileName.Set(nil)
}

// UnsetDiskFileName ensures that no value is present for DiskFileName, not even an explicit nil
func (o *DeviceTreePartitionSlice) UnsetDiskFileName() {
	o.DiskFileName.Unset()
}

// GetLength returns the Length field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceTreePartitionSlice) GetLength() int64 {
	if o == nil || o.Length.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Length.Get()
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceTreePartitionSlice) GetLengthOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Length.Get(), o.Length.IsSet()
}

// HasLength returns a boolean if a field has been set.
func (o *DeviceTreePartitionSlice) HasLength() bool {
	if o != nil && o.Length.IsSet() {
		return true
	}

	return false
}

// SetLength gets a reference to the given NullableInt64 and assigns it to the Length field.
func (o *DeviceTreePartitionSlice) SetLength(v int64) {
	o.Length.Set(&v)
}
// SetLengthNil sets the value for Length to be an explicit nil
func (o *DeviceTreePartitionSlice) SetLengthNil() {
	o.Length.Set(nil)
}

// UnsetLength ensures that no value is present for Length, not even an explicit nil
func (o *DeviceTreePartitionSlice) UnsetLength() {
	o.Length.Unset()
}

// GetLvmDataOffset returns the LvmDataOffset field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceTreePartitionSlice) GetLvmDataOffset() int64 {
	if o == nil || o.LvmDataOffset.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LvmDataOffset.Get()
}

// GetLvmDataOffsetOk returns a tuple with the LvmDataOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceTreePartitionSlice) GetLvmDataOffsetOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LvmDataOffset.Get(), o.LvmDataOffset.IsSet()
}

// HasLvmDataOffset returns a boolean if a field has been set.
func (o *DeviceTreePartitionSlice) HasLvmDataOffset() bool {
	if o != nil && o.LvmDataOffset.IsSet() {
		return true
	}

	return false
}

// SetLvmDataOffset gets a reference to the given NullableInt64 and assigns it to the LvmDataOffset field.
func (o *DeviceTreePartitionSlice) SetLvmDataOffset(v int64) {
	o.LvmDataOffset.Set(&v)
}
// SetLvmDataOffsetNil sets the value for LvmDataOffset to be an explicit nil
func (o *DeviceTreePartitionSlice) SetLvmDataOffsetNil() {
	o.LvmDataOffset.Set(nil)
}

// UnsetLvmDataOffset ensures that no value is present for LvmDataOffset, not even an explicit nil
func (o *DeviceTreePartitionSlice) UnsetLvmDataOffset() {
	o.LvmDataOffset.Unset()
}

// GetOffset returns the Offset field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceTreePartitionSlice) GetOffset() int64 {
	if o == nil || o.Offset.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Offset.Get()
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceTreePartitionSlice) GetOffsetOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Offset.Get(), o.Offset.IsSet()
}

// HasOffset returns a boolean if a field has been set.
func (o *DeviceTreePartitionSlice) HasOffset() bool {
	if o != nil && o.Offset.IsSet() {
		return true
	}

	return false
}

// SetOffset gets a reference to the given NullableInt64 and assigns it to the Offset field.
func (o *DeviceTreePartitionSlice) SetOffset(v int64) {
	o.Offset.Set(&v)
}
// SetOffsetNil sets the value for Offset to be an explicit nil
func (o *DeviceTreePartitionSlice) SetOffsetNil() {
	o.Offset.Set(nil)
}

// UnsetOffset ensures that no value is present for Offset, not even an explicit nil
func (o *DeviceTreePartitionSlice) UnsetOffset() {
	o.Offset.Unset()
}

// GetPartitionNumber returns the PartitionNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceTreePartitionSlice) GetPartitionNumber() int32 {
	if o == nil || o.PartitionNumber.Get() == nil {
		var ret int32
		return ret
	}
	return *o.PartitionNumber.Get()
}

// GetPartitionNumberOk returns a tuple with the PartitionNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceTreePartitionSlice) GetPartitionNumberOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PartitionNumber.Get(), o.PartitionNumber.IsSet()
}

// HasPartitionNumber returns a boolean if a field has been set.
func (o *DeviceTreePartitionSlice) HasPartitionNumber() bool {
	if o != nil && o.PartitionNumber.IsSet() {
		return true
	}

	return false
}

// SetPartitionNumber gets a reference to the given NullableInt32 and assigns it to the PartitionNumber field.
func (o *DeviceTreePartitionSlice) SetPartitionNumber(v int32) {
	o.PartitionNumber.Set(&v)
}
// SetPartitionNumberNil sets the value for PartitionNumber to be an explicit nil
func (o *DeviceTreePartitionSlice) SetPartitionNumberNil() {
	o.PartitionNumber.Set(nil)
}

// UnsetPartitionNumber ensures that no value is present for PartitionNumber, not even an explicit nil
func (o *DeviceTreePartitionSlice) UnsetPartitionNumber() {
	o.PartitionNumber.Unset()
}

func (o DeviceTreePartitionSlice) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DiskFileName.IsSet() {
		toSerialize["diskFileName"] = o.DiskFileName.Get()
	}
	if o.Length.IsSet() {
		toSerialize["length"] = o.Length.Get()
	}
	if o.LvmDataOffset.IsSet() {
		toSerialize["lvmDataOffset"] = o.LvmDataOffset.Get()
	}
	if o.Offset.IsSet() {
		toSerialize["offset"] = o.Offset.Get()
	}
	if o.PartitionNumber.IsSet() {
		toSerialize["partitionNumber"] = o.PartitionNumber.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDeviceTreePartitionSlice struct {
	value *DeviceTreePartitionSlice
	isSet bool
}

func (v NullableDeviceTreePartitionSlice) Get() *DeviceTreePartitionSlice {
	return v.value
}

func (v *NullableDeviceTreePartitionSlice) Set(val *DeviceTreePartitionSlice) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceTreePartitionSlice) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceTreePartitionSlice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceTreePartitionSlice(val *DeviceTreePartitionSlice) *NullableDeviceTreePartitionSlice {
	return &NullableDeviceTreePartitionSlice{value: val, isSet: true}
}

func (v NullableDeviceTreePartitionSlice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceTreePartitionSlice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


