/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ClusterPartition Provides details about a Cluster Partition.
type ClusterPartition struct {
	// Specifies that hostname that resolves to one or more Virtual IP Addresses (VIPs).
	HostName NullableString `json:"hostName,omitempty"`
	// Specifies a unique identifier for the Cluster Partition.
	Id NullableInt64 `json:"id,omitempty"`
	// Specifies the name of the Cluster Partition.
	Name NullableString `json:"name,omitempty"`
	// Array of Node Ids.  Specifies a list of Node Ids that assigned to the Cluster Partition.
	NodeIds []int64 `json:"nodeIds,omitempty"`
	// Array of VIPs.  Specifies a list of Virtual IP Addresses (VIPs) that route network traffic to the Cluster Partition.
	Vips []string `json:"vips,omitempty"`
	// Array of VLAN IPs.  Specifies a list of VLAN IP Addresses that route network traffic within certain VLANs to the Cluster Partition.
	VlanIps []string `json:"vlanIps,omitempty"`
	// Array of VLANs.  Specifies a list of VLANs for the Cluster Partition.
	Vlans []Vlan `json:"vlans,omitempty"`
}

// NewClusterPartition instantiates a new ClusterPartition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterPartition() *ClusterPartition {
	this := ClusterPartition{}
	return &this
}

// NewClusterPartitionWithDefaults instantiates a new ClusterPartition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterPartitionWithDefaults() *ClusterPartition {
	this := ClusterPartition{}
	return &this
}

// GetHostName returns the HostName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterPartition) GetHostName() string {
	if o == nil || o.HostName.Get() == nil {
		var ret string
		return ret
	}
	return *o.HostName.Get()
}

// GetHostNameOk returns a tuple with the HostName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterPartition) GetHostNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HostName.Get(), o.HostName.IsSet()
}

// HasHostName returns a boolean if a field has been set.
func (o *ClusterPartition) HasHostName() bool {
	if o != nil && o.HostName.IsSet() {
		return true
	}

	return false
}

// SetHostName gets a reference to the given NullableString and assigns it to the HostName field.
func (o *ClusterPartition) SetHostName(v string) {
	o.HostName.Set(&v)
}
// SetHostNameNil sets the value for HostName to be an explicit nil
func (o *ClusterPartition) SetHostNameNil() {
	o.HostName.Set(nil)
}

// UnsetHostName ensures that no value is present for HostName, not even an explicit nil
func (o *ClusterPartition) UnsetHostName() {
	o.HostName.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterPartition) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterPartition) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *ClusterPartition) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *ClusterPartition) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *ClusterPartition) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *ClusterPartition) UnsetId() {
	o.Id.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterPartition) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterPartition) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ClusterPartition) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ClusterPartition) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *ClusterPartition) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ClusterPartition) UnsetName() {
	o.Name.Unset()
}

// GetNodeIds returns the NodeIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterPartition) GetNodeIds() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.NodeIds
}

// GetNodeIdsOk returns a tuple with the NodeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterPartition) GetNodeIdsOk() (*[]int64, bool) {
	if o == nil || o.NodeIds == nil {
		return nil, false
	}
	return &o.NodeIds, true
}

// HasNodeIds returns a boolean if a field has been set.
func (o *ClusterPartition) HasNodeIds() bool {
	if o != nil && o.NodeIds != nil {
		return true
	}

	return false
}

// SetNodeIds gets a reference to the given []int64 and assigns it to the NodeIds field.
func (o *ClusterPartition) SetNodeIds(v []int64) {
	o.NodeIds = v
}

// GetVips returns the Vips field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterPartition) GetVips() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Vips
}

// GetVipsOk returns a tuple with the Vips field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterPartition) GetVipsOk() (*[]string, bool) {
	if o == nil || o.Vips == nil {
		return nil, false
	}
	return &o.Vips, true
}

// HasVips returns a boolean if a field has been set.
func (o *ClusterPartition) HasVips() bool {
	if o != nil && o.Vips != nil {
		return true
	}

	return false
}

// SetVips gets a reference to the given []string and assigns it to the Vips field.
func (o *ClusterPartition) SetVips(v []string) {
	o.Vips = v
}

// GetVlanIps returns the VlanIps field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterPartition) GetVlanIps() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.VlanIps
}

// GetVlanIpsOk returns a tuple with the VlanIps field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterPartition) GetVlanIpsOk() (*[]string, bool) {
	if o == nil || o.VlanIps == nil {
		return nil, false
	}
	return &o.VlanIps, true
}

// HasVlanIps returns a boolean if a field has been set.
func (o *ClusterPartition) HasVlanIps() bool {
	if o != nil && o.VlanIps != nil {
		return true
	}

	return false
}

// SetVlanIps gets a reference to the given []string and assigns it to the VlanIps field.
func (o *ClusterPartition) SetVlanIps(v []string) {
	o.VlanIps = v
}

// GetVlans returns the Vlans field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterPartition) GetVlans() []Vlan {
	if o == nil  {
		var ret []Vlan
		return ret
	}
	return o.Vlans
}

// GetVlansOk returns a tuple with the Vlans field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterPartition) GetVlansOk() (*[]Vlan, bool) {
	if o == nil || o.Vlans == nil {
		return nil, false
	}
	return &o.Vlans, true
}

// HasVlans returns a boolean if a field has been set.
func (o *ClusterPartition) HasVlans() bool {
	if o != nil && o.Vlans != nil {
		return true
	}

	return false
}

// SetVlans gets a reference to the given []Vlan and assigns it to the Vlans field.
func (o *ClusterPartition) SetVlans(v []Vlan) {
	o.Vlans = v
}

func (o ClusterPartition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.HostName.IsSet() {
		toSerialize["hostName"] = o.HostName.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.NodeIds != nil {
		toSerialize["nodeIds"] = o.NodeIds
	}
	if o.Vips != nil {
		toSerialize["vips"] = o.Vips
	}
	if o.VlanIps != nil {
		toSerialize["vlanIps"] = o.VlanIps
	}
	if o.Vlans != nil {
		toSerialize["vlans"] = o.Vlans
	}
	return json.Marshal(toSerialize)
}

type NullableClusterPartition struct {
	value *ClusterPartition
	isSet bool
}

func (v NullableClusterPartition) Get() *ClusterPartition {
	return v.value
}

func (v *NullableClusterPartition) Set(val *ClusterPartition) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterPartition) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterPartition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterPartition(val *ClusterPartition) *NullableClusterPartition {
	return &NullableClusterPartition{value: val, isSet: true}
}

func (v NullableClusterPartition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterPartition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


