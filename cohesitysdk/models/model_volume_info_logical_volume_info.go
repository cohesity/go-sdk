/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// VolumeInfoLogicalVolumeInfo This is extra attribute which uniquely identifies a logical volume in LVM or LDM.
type VolumeInfoLogicalVolumeInfo struct {
	DeviceTree *DeviceTree `json:"deviceTree,omitempty"`
	// Logical volume name.
	LogicalVolumeName NullableString `json:"logicalVolumeName,omitempty"`
	// Logical volume uuid.
	LogicalVolumeUuid NullableString `json:"logicalVolumeUuid,omitempty"`
	// Volume group name.
	VolumeGroupName NullableString `json:"volumeGroupName,omitempty"`
	// Volume group uuid.
	VolumeGroupUuid NullableString `json:"volumeGroupUuid,omitempty"`
}

// NewVolumeInfoLogicalVolumeInfo instantiates a new VolumeInfoLogicalVolumeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeInfoLogicalVolumeInfo() *VolumeInfoLogicalVolumeInfo {
	this := VolumeInfoLogicalVolumeInfo{}
	return &this
}

// NewVolumeInfoLogicalVolumeInfoWithDefaults instantiates a new VolumeInfoLogicalVolumeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeInfoLogicalVolumeInfoWithDefaults() *VolumeInfoLogicalVolumeInfo {
	this := VolumeInfoLogicalVolumeInfo{}
	return &this
}

// GetDeviceTree returns the DeviceTree field value if set, zero value otherwise.
func (o *VolumeInfoLogicalVolumeInfo) GetDeviceTree() DeviceTree {
	if o == nil || o.DeviceTree == nil {
		var ret DeviceTree
		return ret
	}
	return *o.DeviceTree
}

// GetDeviceTreeOk returns a tuple with the DeviceTree field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInfoLogicalVolumeInfo) GetDeviceTreeOk() (*DeviceTree, bool) {
	if o == nil || o.DeviceTree == nil {
		return nil, false
	}
	return o.DeviceTree, true
}

// HasDeviceTree returns a boolean if a field has been set.
func (o *VolumeInfoLogicalVolumeInfo) HasDeviceTree() bool {
	if o != nil && o.DeviceTree != nil {
		return true
	}

	return false
}

// SetDeviceTree gets a reference to the given DeviceTree and assigns it to the DeviceTree field.
func (o *VolumeInfoLogicalVolumeInfo) SetDeviceTree(v DeviceTree) {
	o.DeviceTree = &v
}

// GetLogicalVolumeName returns the LogicalVolumeName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfoLogicalVolumeInfo) GetLogicalVolumeName() string {
	if o == nil || o.LogicalVolumeName.Get() == nil {
		var ret string
		return ret
	}
	return *o.LogicalVolumeName.Get()
}

// GetLogicalVolumeNameOk returns a tuple with the LogicalVolumeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfoLogicalVolumeInfo) GetLogicalVolumeNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogicalVolumeName.Get(), o.LogicalVolumeName.IsSet()
}

// HasLogicalVolumeName returns a boolean if a field has been set.
func (o *VolumeInfoLogicalVolumeInfo) HasLogicalVolumeName() bool {
	if o != nil && o.LogicalVolumeName.IsSet() {
		return true
	}

	return false
}

// SetLogicalVolumeName gets a reference to the given NullableString and assigns it to the LogicalVolumeName field.
func (o *VolumeInfoLogicalVolumeInfo) SetLogicalVolumeName(v string) {
	o.LogicalVolumeName.Set(&v)
}
// SetLogicalVolumeNameNil sets the value for LogicalVolumeName to be an explicit nil
func (o *VolumeInfoLogicalVolumeInfo) SetLogicalVolumeNameNil() {
	o.LogicalVolumeName.Set(nil)
}

// UnsetLogicalVolumeName ensures that no value is present for LogicalVolumeName, not even an explicit nil
func (o *VolumeInfoLogicalVolumeInfo) UnsetLogicalVolumeName() {
	o.LogicalVolumeName.Unset()
}

// GetLogicalVolumeUuid returns the LogicalVolumeUuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfoLogicalVolumeInfo) GetLogicalVolumeUuid() string {
	if o == nil || o.LogicalVolumeUuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.LogicalVolumeUuid.Get()
}

// GetLogicalVolumeUuidOk returns a tuple with the LogicalVolumeUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfoLogicalVolumeInfo) GetLogicalVolumeUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogicalVolumeUuid.Get(), o.LogicalVolumeUuid.IsSet()
}

// HasLogicalVolumeUuid returns a boolean if a field has been set.
func (o *VolumeInfoLogicalVolumeInfo) HasLogicalVolumeUuid() bool {
	if o != nil && o.LogicalVolumeUuid.IsSet() {
		return true
	}

	return false
}

// SetLogicalVolumeUuid gets a reference to the given NullableString and assigns it to the LogicalVolumeUuid field.
func (o *VolumeInfoLogicalVolumeInfo) SetLogicalVolumeUuid(v string) {
	o.LogicalVolumeUuid.Set(&v)
}
// SetLogicalVolumeUuidNil sets the value for LogicalVolumeUuid to be an explicit nil
func (o *VolumeInfoLogicalVolumeInfo) SetLogicalVolumeUuidNil() {
	o.LogicalVolumeUuid.Set(nil)
}

// UnsetLogicalVolumeUuid ensures that no value is present for LogicalVolumeUuid, not even an explicit nil
func (o *VolumeInfoLogicalVolumeInfo) UnsetLogicalVolumeUuid() {
	o.LogicalVolumeUuid.Unset()
}

// GetVolumeGroupName returns the VolumeGroupName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfoLogicalVolumeInfo) GetVolumeGroupName() string {
	if o == nil || o.VolumeGroupName.Get() == nil {
		var ret string
		return ret
	}
	return *o.VolumeGroupName.Get()
}

// GetVolumeGroupNameOk returns a tuple with the VolumeGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfoLogicalVolumeInfo) GetVolumeGroupNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VolumeGroupName.Get(), o.VolumeGroupName.IsSet()
}

// HasVolumeGroupName returns a boolean if a field has been set.
func (o *VolumeInfoLogicalVolumeInfo) HasVolumeGroupName() bool {
	if o != nil && o.VolumeGroupName.IsSet() {
		return true
	}

	return false
}

// SetVolumeGroupName gets a reference to the given NullableString and assigns it to the VolumeGroupName field.
func (o *VolumeInfoLogicalVolumeInfo) SetVolumeGroupName(v string) {
	o.VolumeGroupName.Set(&v)
}
// SetVolumeGroupNameNil sets the value for VolumeGroupName to be an explicit nil
func (o *VolumeInfoLogicalVolumeInfo) SetVolumeGroupNameNil() {
	o.VolumeGroupName.Set(nil)
}

// UnsetVolumeGroupName ensures that no value is present for VolumeGroupName, not even an explicit nil
func (o *VolumeInfoLogicalVolumeInfo) UnsetVolumeGroupName() {
	o.VolumeGroupName.Unset()
}

// GetVolumeGroupUuid returns the VolumeGroupUuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfoLogicalVolumeInfo) GetVolumeGroupUuid() string {
	if o == nil || o.VolumeGroupUuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.VolumeGroupUuid.Get()
}

// GetVolumeGroupUuidOk returns a tuple with the VolumeGroupUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfoLogicalVolumeInfo) GetVolumeGroupUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VolumeGroupUuid.Get(), o.VolumeGroupUuid.IsSet()
}

// HasVolumeGroupUuid returns a boolean if a field has been set.
func (o *VolumeInfoLogicalVolumeInfo) HasVolumeGroupUuid() bool {
	if o != nil && o.VolumeGroupUuid.IsSet() {
		return true
	}

	return false
}

// SetVolumeGroupUuid gets a reference to the given NullableString and assigns it to the VolumeGroupUuid field.
func (o *VolumeInfoLogicalVolumeInfo) SetVolumeGroupUuid(v string) {
	o.VolumeGroupUuid.Set(&v)
}
// SetVolumeGroupUuidNil sets the value for VolumeGroupUuid to be an explicit nil
func (o *VolumeInfoLogicalVolumeInfo) SetVolumeGroupUuidNil() {
	o.VolumeGroupUuid.Set(nil)
}

// UnsetVolumeGroupUuid ensures that no value is present for VolumeGroupUuid, not even an explicit nil
func (o *VolumeInfoLogicalVolumeInfo) UnsetVolumeGroupUuid() {
	o.VolumeGroupUuid.Unset()
}

func (o VolumeInfoLogicalVolumeInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DeviceTree != nil {
		toSerialize["deviceTree"] = o.DeviceTree
	}
	if o.LogicalVolumeName.IsSet() {
		toSerialize["logicalVolumeName"] = o.LogicalVolumeName.Get()
	}
	if o.LogicalVolumeUuid.IsSet() {
		toSerialize["logicalVolumeUuid"] = o.LogicalVolumeUuid.Get()
	}
	if o.VolumeGroupName.IsSet() {
		toSerialize["volumeGroupName"] = o.VolumeGroupName.Get()
	}
	if o.VolumeGroupUuid.IsSet() {
		toSerialize["volumeGroupUuid"] = o.VolumeGroupUuid.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableVolumeInfoLogicalVolumeInfo struct {
	value *VolumeInfoLogicalVolumeInfo
	isSet bool
}

func (v NullableVolumeInfoLogicalVolumeInfo) Get() *VolumeInfoLogicalVolumeInfo {
	return v.value
}

func (v *NullableVolumeInfoLogicalVolumeInfo) Set(val *VolumeInfoLogicalVolumeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeInfoLogicalVolumeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeInfoLogicalVolumeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeInfoLogicalVolumeInfo(val *VolumeInfoLogicalVolumeInfo) *NullableVolumeInfoLogicalVolumeInfo {
	return &NullableVolumeInfoLogicalVolumeInfo{value: val, isSet: true}
}

func (v NullableVolumeInfoLogicalVolumeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeInfoLogicalVolumeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


