/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ProtectionSummaryByEnv ProtectionSummaryByEnv specifies the number of protected and unprotected objects that is break down by environment.
type ProtectionSummaryByEnv struct {
	// Specifies the type of environment of the source object like kSQL etc. Supported environment types such as 'kView', 'kSQL', 'kVMware', etc. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter. 'kVMware' indicates the VMware Protection Source environment. 'kHyperV' indicates the HyperV Protection Source environment. 'kSQL' indicates the SQL Protection Source environment. 'kView' indicates the View Protection Source environment. 'kPuppeteer' indicates the Cohesity's Remote Adapter. 'kPhysical' indicates the physical Protection Source environment. 'kPure' indicates the Pure Storage Protection Source environment. 'Nimble' indicates the Nimble Storage Protection Source environment. 'kAzure' indicates the Microsoft's Azure Protection Source environment. 'kNetapp' indicates the Netapp Protection Source environment. 'kAgent' indicates the Agent Protection Source environment. 'kGenericNas' indicates the Generic Network Attached Storage Protection Source environment. 'kAcropolis' indicates the Acropolis Protection Source environment. 'kPhsicalFiles' indicates the Physical Files Protection Source environment. 'kIsilon' indicates the Dell EMC's Isilon Protection Source environment. 'kGPFS' indicates IBM's GPFS Protection Source environment. 'kKVM' indicates the KVM Protection Source environment. 'kAWS' indicates the AWS Protection Source environment. 'kExchange' indicates the Exchange Protection Source environment. 'kHyperVVSS' indicates the HyperV VSS Protection Source environment. 'kOracle' indicates the Oracle Protection Source environment. 'kGCP' indicates the Google Cloud Platform Protection Source environment. 'kFlashBlade' indicates the Flash Blade Protection Source environment. 'kAWSNative' indicates the AWS Native Protection Source environment. 'kO365' indicates the Office 365 Protection Source environment. 'kO365Outlook' indicates Office 365 outlook Protection Source environment. 'kHyperFlex' indicates the Hyper Flex Protection Source environment. 'kGCPNative' indicates the GCP Native Protection Source environment. 'kAzureNative' indicates the Azure Native Protection Source environment. 'kKubernetes' indicates a Kubernetes Protection Source environment. 'kElastifile' indicates Elastifile Protection Source environment. 'kAD' indicates Active Directory Protection Source environment. 'kRDSSnapshotManager' indicates AWS RDS Protection Source environment. 'kCassandra' indicates Cassandra Protection Source environment. 'kMongoDB' indicates MongoDB Protection Source environment. 'kCouchbase' indicates Couchbase Protection Source environment. 'kHdfs' indicates Hdfs Protection Source environment. 'kHive' indicates Hive Protection Source environment. 'kHBase' indicates HBase Protection Source environment.
	Environment NullableString `json:"environment,omitempty"`
	// Specifies the number of objects that are protected under the given entity.
	ProtectedCount NullableInt64 `json:"protectedCount,omitempty"`
	// Specifies the total size of the protected objects under the given entity.
	ProtectedSize NullableInt64 `json:"protectedSize,omitempty"`
	// Specifies the number of objects that are not protected under the given entity.
	UnprotectedCount NullableInt64 `json:"unprotectedCount,omitempty"`
	// Specifies the total size of the unprotected objects under the given entity.
	UnprotectedSize NullableInt64 `json:"unprotectedSize,omitempty"`
}

// NewProtectionSummaryByEnv instantiates a new ProtectionSummaryByEnv object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtectionSummaryByEnv() *ProtectionSummaryByEnv {
	this := ProtectionSummaryByEnv{}
	return &this
}

// NewProtectionSummaryByEnvWithDefaults instantiates a new ProtectionSummaryByEnv object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtectionSummaryByEnvWithDefaults() *ProtectionSummaryByEnv {
	this := ProtectionSummaryByEnv{}
	return &this
}

// GetEnvironment returns the Environment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSummaryByEnv) GetEnvironment() string {
	if o == nil || o.Environment.Get() == nil {
		var ret string
		return ret
	}
	return *o.Environment.Get()
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSummaryByEnv) GetEnvironmentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Environment.Get(), o.Environment.IsSet()
}

// HasEnvironment returns a boolean if a field has been set.
func (o *ProtectionSummaryByEnv) HasEnvironment() bool {
	if o != nil && o.Environment.IsSet() {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given NullableString and assigns it to the Environment field.
func (o *ProtectionSummaryByEnv) SetEnvironment(v string) {
	o.Environment.Set(&v)
}
// SetEnvironmentNil sets the value for Environment to be an explicit nil
func (o *ProtectionSummaryByEnv) SetEnvironmentNil() {
	o.Environment.Set(nil)
}

// UnsetEnvironment ensures that no value is present for Environment, not even an explicit nil
func (o *ProtectionSummaryByEnv) UnsetEnvironment() {
	o.Environment.Unset()
}

// GetProtectedCount returns the ProtectedCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSummaryByEnv) GetProtectedCount() int64 {
	if o == nil || o.ProtectedCount.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ProtectedCount.Get()
}

// GetProtectedCountOk returns a tuple with the ProtectedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSummaryByEnv) GetProtectedCountOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProtectedCount.Get(), o.ProtectedCount.IsSet()
}

// HasProtectedCount returns a boolean if a field has been set.
func (o *ProtectionSummaryByEnv) HasProtectedCount() bool {
	if o != nil && o.ProtectedCount.IsSet() {
		return true
	}

	return false
}

// SetProtectedCount gets a reference to the given NullableInt64 and assigns it to the ProtectedCount field.
func (o *ProtectionSummaryByEnv) SetProtectedCount(v int64) {
	o.ProtectedCount.Set(&v)
}
// SetProtectedCountNil sets the value for ProtectedCount to be an explicit nil
func (o *ProtectionSummaryByEnv) SetProtectedCountNil() {
	o.ProtectedCount.Set(nil)
}

// UnsetProtectedCount ensures that no value is present for ProtectedCount, not even an explicit nil
func (o *ProtectionSummaryByEnv) UnsetProtectedCount() {
	o.ProtectedCount.Unset()
}

// GetProtectedSize returns the ProtectedSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSummaryByEnv) GetProtectedSize() int64 {
	if o == nil || o.ProtectedSize.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ProtectedSize.Get()
}

// GetProtectedSizeOk returns a tuple with the ProtectedSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSummaryByEnv) GetProtectedSizeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProtectedSize.Get(), o.ProtectedSize.IsSet()
}

// HasProtectedSize returns a boolean if a field has been set.
func (o *ProtectionSummaryByEnv) HasProtectedSize() bool {
	if o != nil && o.ProtectedSize.IsSet() {
		return true
	}

	return false
}

// SetProtectedSize gets a reference to the given NullableInt64 and assigns it to the ProtectedSize field.
func (o *ProtectionSummaryByEnv) SetProtectedSize(v int64) {
	o.ProtectedSize.Set(&v)
}
// SetProtectedSizeNil sets the value for ProtectedSize to be an explicit nil
func (o *ProtectionSummaryByEnv) SetProtectedSizeNil() {
	o.ProtectedSize.Set(nil)
}

// UnsetProtectedSize ensures that no value is present for ProtectedSize, not even an explicit nil
func (o *ProtectionSummaryByEnv) UnsetProtectedSize() {
	o.ProtectedSize.Unset()
}

// GetUnprotectedCount returns the UnprotectedCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSummaryByEnv) GetUnprotectedCount() int64 {
	if o == nil || o.UnprotectedCount.Get() == nil {
		var ret int64
		return ret
	}
	return *o.UnprotectedCount.Get()
}

// GetUnprotectedCountOk returns a tuple with the UnprotectedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSummaryByEnv) GetUnprotectedCountOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UnprotectedCount.Get(), o.UnprotectedCount.IsSet()
}

// HasUnprotectedCount returns a boolean if a field has been set.
func (o *ProtectionSummaryByEnv) HasUnprotectedCount() bool {
	if o != nil && o.UnprotectedCount.IsSet() {
		return true
	}

	return false
}

// SetUnprotectedCount gets a reference to the given NullableInt64 and assigns it to the UnprotectedCount field.
func (o *ProtectionSummaryByEnv) SetUnprotectedCount(v int64) {
	o.UnprotectedCount.Set(&v)
}
// SetUnprotectedCountNil sets the value for UnprotectedCount to be an explicit nil
func (o *ProtectionSummaryByEnv) SetUnprotectedCountNil() {
	o.UnprotectedCount.Set(nil)
}

// UnsetUnprotectedCount ensures that no value is present for UnprotectedCount, not even an explicit nil
func (o *ProtectionSummaryByEnv) UnsetUnprotectedCount() {
	o.UnprotectedCount.Unset()
}

// GetUnprotectedSize returns the UnprotectedSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSummaryByEnv) GetUnprotectedSize() int64 {
	if o == nil || o.UnprotectedSize.Get() == nil {
		var ret int64
		return ret
	}
	return *o.UnprotectedSize.Get()
}

// GetUnprotectedSizeOk returns a tuple with the UnprotectedSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSummaryByEnv) GetUnprotectedSizeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UnprotectedSize.Get(), o.UnprotectedSize.IsSet()
}

// HasUnprotectedSize returns a boolean if a field has been set.
func (o *ProtectionSummaryByEnv) HasUnprotectedSize() bool {
	if o != nil && o.UnprotectedSize.IsSet() {
		return true
	}

	return false
}

// SetUnprotectedSize gets a reference to the given NullableInt64 and assigns it to the UnprotectedSize field.
func (o *ProtectionSummaryByEnv) SetUnprotectedSize(v int64) {
	o.UnprotectedSize.Set(&v)
}
// SetUnprotectedSizeNil sets the value for UnprotectedSize to be an explicit nil
func (o *ProtectionSummaryByEnv) SetUnprotectedSizeNil() {
	o.UnprotectedSize.Set(nil)
}

// UnsetUnprotectedSize ensures that no value is present for UnprotectedSize, not even an explicit nil
func (o *ProtectionSummaryByEnv) UnsetUnprotectedSize() {
	o.UnprotectedSize.Unset()
}

func (o ProtectionSummaryByEnv) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Environment.IsSet() {
		toSerialize["environment"] = o.Environment.Get()
	}
	if o.ProtectedCount.IsSet() {
		toSerialize["protectedCount"] = o.ProtectedCount.Get()
	}
	if o.ProtectedSize.IsSet() {
		toSerialize["protectedSize"] = o.ProtectedSize.Get()
	}
	if o.UnprotectedCount.IsSet() {
		toSerialize["unprotectedCount"] = o.UnprotectedCount.Get()
	}
	if o.UnprotectedSize.IsSet() {
		toSerialize["unprotectedSize"] = o.UnprotectedSize.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableProtectionSummaryByEnv struct {
	value *ProtectionSummaryByEnv
	isSet bool
}

func (v NullableProtectionSummaryByEnv) Get() *ProtectionSummaryByEnv {
	return v.value
}

func (v *NullableProtectionSummaryByEnv) Set(val *ProtectionSummaryByEnv) {
	v.value = val
	v.isSet = true
}

func (v NullableProtectionSummaryByEnv) IsSet() bool {
	return v.isSet
}

func (v *NullableProtectionSummaryByEnv) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtectionSummaryByEnv(val *ProtectionSummaryByEnv) *NullableProtectionSummaryByEnv {
	return &NullableProtectionSummaryByEnv{value: val, isSet: true}
}

func (v NullableProtectionSummaryByEnv) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtectionSummaryByEnv) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


