/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// VmDirEntry VmDirEntry is the struct to represent a file or a folder on a VM.
type VmDirEntry struct {
	FstatInfo *FileStatInfo `json:"fstatInfo,omitempty"`
	// FullPath is the full path of the file/directory.
	FullPath NullableString `json:"fullPath,omitempty"`
	// Name is the name of the file or folder. For /test/file.txt, name will be file.txt.
	Name NullableString `json:"name,omitempty"`
	// DirEntryType is the type of entry i.e. file/folder. Specifies the type of directory entry.  'kFile' indicates that current entry is of file type. 'kDirectory' indicates that current entry is of directory type. 'kSymlink' indicates that current entry is of symbolic link.
	Type NullableString `json:"type,omitempty"`
}

// NewVmDirEntry instantiates a new VmDirEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmDirEntry() *VmDirEntry {
	this := VmDirEntry{}
	return &this
}

// NewVmDirEntryWithDefaults instantiates a new VmDirEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmDirEntryWithDefaults() *VmDirEntry {
	this := VmDirEntry{}
	return &this
}

// GetFstatInfo returns the FstatInfo field value if set, zero value otherwise.
func (o *VmDirEntry) GetFstatInfo() FileStatInfo {
	if o == nil || o.FstatInfo == nil {
		var ret FileStatInfo
		return ret
	}
	return *o.FstatInfo
}

// GetFstatInfoOk returns a tuple with the FstatInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmDirEntry) GetFstatInfoOk() (*FileStatInfo, bool) {
	if o == nil || o.FstatInfo == nil {
		return nil, false
	}
	return o.FstatInfo, true
}

// HasFstatInfo returns a boolean if a field has been set.
func (o *VmDirEntry) HasFstatInfo() bool {
	if o != nil && o.FstatInfo != nil {
		return true
	}

	return false
}

// SetFstatInfo gets a reference to the given FileStatInfo and assigns it to the FstatInfo field.
func (o *VmDirEntry) SetFstatInfo(v FileStatInfo) {
	o.FstatInfo = &v
}

// GetFullPath returns the FullPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmDirEntry) GetFullPath() string {
	if o == nil || o.FullPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.FullPath.Get()
}

// GetFullPathOk returns a tuple with the FullPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmDirEntry) GetFullPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FullPath.Get(), o.FullPath.IsSet()
}

// HasFullPath returns a boolean if a field has been set.
func (o *VmDirEntry) HasFullPath() bool {
	if o != nil && o.FullPath.IsSet() {
		return true
	}

	return false
}

// SetFullPath gets a reference to the given NullableString and assigns it to the FullPath field.
func (o *VmDirEntry) SetFullPath(v string) {
	o.FullPath.Set(&v)
}
// SetFullPathNil sets the value for FullPath to be an explicit nil
func (o *VmDirEntry) SetFullPathNil() {
	o.FullPath.Set(nil)
}

// UnsetFullPath ensures that no value is present for FullPath, not even an explicit nil
func (o *VmDirEntry) UnsetFullPath() {
	o.FullPath.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmDirEntry) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmDirEntry) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *VmDirEntry) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *VmDirEntry) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *VmDirEntry) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *VmDirEntry) UnsetName() {
	o.Name.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmDirEntry) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmDirEntry) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *VmDirEntry) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *VmDirEntry) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *VmDirEntry) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *VmDirEntry) UnsetType() {
	o.Type.Unset()
}

func (o VmDirEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FstatInfo != nil {
		toSerialize["fstatInfo"] = o.FstatInfo
	}
	if o.FullPath.IsSet() {
		toSerialize["fullPath"] = o.FullPath.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableVmDirEntry struct {
	value *VmDirEntry
	isSet bool
}

func (v NullableVmDirEntry) Get() *VmDirEntry {
	return v.value
}

func (v *NullableVmDirEntry) Set(val *VmDirEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableVmDirEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableVmDirEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmDirEntry(val *VmDirEntry) *NullableVmDirEntry {
	return &NullableVmDirEntry{value: val, isSet: true}
}

func (v NullableVmDirEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmDirEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


