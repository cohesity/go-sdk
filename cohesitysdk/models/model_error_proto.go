/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ErrorProto struct for ErrorProto
type ErrorProto struct {
	// An optional detail.
	ErrorMsg NullableString `json:"errorMsg,omitempty"`
	// Error.
	Type NullableInt32 `json:"type,omitempty"`
}

// NewErrorProto instantiates a new ErrorProto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorProto() *ErrorProto {
	this := ErrorProto{}
	return &this
}

// NewErrorProtoWithDefaults instantiates a new ErrorProto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorProtoWithDefaults() *ErrorProto {
	this := ErrorProto{}
	return &this
}

// GetErrorMsg returns the ErrorMsg field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ErrorProto) GetErrorMsg() string {
	if o == nil || o.ErrorMsg.Get() == nil {
		var ret string
		return ret
	}
	return *o.ErrorMsg.Get()
}

// GetErrorMsgOk returns a tuple with the ErrorMsg field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ErrorProto) GetErrorMsgOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ErrorMsg.Get(), o.ErrorMsg.IsSet()
}

// HasErrorMsg returns a boolean if a field has been set.
func (o *ErrorProto) HasErrorMsg() bool {
	if o != nil && o.ErrorMsg.IsSet() {
		return true
	}

	return false
}

// SetErrorMsg gets a reference to the given NullableString and assigns it to the ErrorMsg field.
func (o *ErrorProto) SetErrorMsg(v string) {
	o.ErrorMsg.Set(&v)
}
// SetErrorMsgNil sets the value for ErrorMsg to be an explicit nil
func (o *ErrorProto) SetErrorMsgNil() {
	o.ErrorMsg.Set(nil)
}

// UnsetErrorMsg ensures that no value is present for ErrorMsg, not even an explicit nil
func (o *ErrorProto) UnsetErrorMsg() {
	o.ErrorMsg.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ErrorProto) GetType() int32 {
	if o == nil || o.Type.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ErrorProto) GetTypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *ErrorProto) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableInt32 and assigns it to the Type field.
func (o *ErrorProto) SetType(v int32) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *ErrorProto) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *ErrorProto) UnsetType() {
	o.Type.Unset()
}

func (o ErrorProto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ErrorMsg.IsSet() {
		toSerialize["errorMsg"] = o.ErrorMsg.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableErrorProto struct {
	value *ErrorProto
	isSet bool
}

func (v NullableErrorProto) Get() *ErrorProto {
	return v.value
}

func (v *NullableErrorProto) Set(val *ErrorProto) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorProto) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorProto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorProto(val *ErrorProto) *NullableErrorProto {
	return &NullableErrorProto{value: val, isSet: true}
}

func (v NullableErrorProto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorProto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


