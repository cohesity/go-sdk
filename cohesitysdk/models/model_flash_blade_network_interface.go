/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// FlashBladeNetworkInterface Specifies network interface detail of a Flash Blade Storage Array.
type FlashBladeNetworkInterface struct {
	// Specifies the IP address of the Pure Storage FlashBlade Array.
	IpAddress NullableString `json:"ipAddress,omitempty"`
	// Specifies the name of the network interface.
	Name NullableString `json:"name,omitempty"`
	// Specifies the id of the VLAN network of the Pure Storage FlashBlade Array.
	Vlan NullableInt32 `json:"vlan,omitempty"`
}

// NewFlashBladeNetworkInterface instantiates a new FlashBladeNetworkInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlashBladeNetworkInterface() *FlashBladeNetworkInterface {
	this := FlashBladeNetworkInterface{}
	return &this
}

// NewFlashBladeNetworkInterfaceWithDefaults instantiates a new FlashBladeNetworkInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlashBladeNetworkInterfaceWithDefaults() *FlashBladeNetworkInterface {
	this := FlashBladeNetworkInterface{}
	return &this
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FlashBladeNetworkInterface) GetIpAddress() string {
	if o == nil || o.IpAddress.Get() == nil {
		var ret string
		return ret
	}
	return *o.IpAddress.Get()
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FlashBladeNetworkInterface) GetIpAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IpAddress.Get(), o.IpAddress.IsSet()
}

// HasIpAddress returns a boolean if a field has been set.
func (o *FlashBladeNetworkInterface) HasIpAddress() bool {
	if o != nil && o.IpAddress.IsSet() {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given NullableString and assigns it to the IpAddress field.
func (o *FlashBladeNetworkInterface) SetIpAddress(v string) {
	o.IpAddress.Set(&v)
}
// SetIpAddressNil sets the value for IpAddress to be an explicit nil
func (o *FlashBladeNetworkInterface) SetIpAddressNil() {
	o.IpAddress.Set(nil)
}

// UnsetIpAddress ensures that no value is present for IpAddress, not even an explicit nil
func (o *FlashBladeNetworkInterface) UnsetIpAddress() {
	o.IpAddress.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FlashBladeNetworkInterface) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FlashBladeNetworkInterface) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *FlashBladeNetworkInterface) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *FlashBladeNetworkInterface) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *FlashBladeNetworkInterface) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *FlashBladeNetworkInterface) UnsetName() {
	o.Name.Unset()
}

// GetVlan returns the Vlan field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FlashBladeNetworkInterface) GetVlan() int32 {
	if o == nil || o.Vlan.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Vlan.Get()
}

// GetVlanOk returns a tuple with the Vlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FlashBladeNetworkInterface) GetVlanOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Vlan.Get(), o.Vlan.IsSet()
}

// HasVlan returns a boolean if a field has been set.
func (o *FlashBladeNetworkInterface) HasVlan() bool {
	if o != nil && o.Vlan.IsSet() {
		return true
	}

	return false
}

// SetVlan gets a reference to the given NullableInt32 and assigns it to the Vlan field.
func (o *FlashBladeNetworkInterface) SetVlan(v int32) {
	o.Vlan.Set(&v)
}
// SetVlanNil sets the value for Vlan to be an explicit nil
func (o *FlashBladeNetworkInterface) SetVlanNil() {
	o.Vlan.Set(nil)
}

// UnsetVlan ensures that no value is present for Vlan, not even an explicit nil
func (o *FlashBladeNetworkInterface) UnsetVlan() {
	o.Vlan.Unset()
}

func (o FlashBladeNetworkInterface) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IpAddress.IsSet() {
		toSerialize["ipAddress"] = o.IpAddress.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Vlan.IsSet() {
		toSerialize["vlan"] = o.Vlan.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableFlashBladeNetworkInterface struct {
	value *FlashBladeNetworkInterface
	isSet bool
}

func (v NullableFlashBladeNetworkInterface) Get() *FlashBladeNetworkInterface {
	return v.value
}

func (v *NullableFlashBladeNetworkInterface) Set(val *FlashBladeNetworkInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableFlashBladeNetworkInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableFlashBladeNetworkInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlashBladeNetworkInterface(val *FlashBladeNetworkInterface) *NullableFlashBladeNetworkInterface {
	return &NullableFlashBladeNetworkInterface{value: val, isSet: true}
}

func (v NullableFlashBladeNetworkInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlashBladeNetworkInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


