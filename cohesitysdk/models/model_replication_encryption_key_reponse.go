/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ReplicationEncryptionKeyReponse Specifies the encryption key that is used for encrypting replication data from this Cluster to a remote Cluster.
type ReplicationEncryptionKeyReponse struct {
	// Specifies a replication encryption key.
	EncryptionKey NullableString `json:"encryptionKey,omitempty"`
}

// NewReplicationEncryptionKeyReponse instantiates a new ReplicationEncryptionKeyReponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplicationEncryptionKeyReponse() *ReplicationEncryptionKeyReponse {
	this := ReplicationEncryptionKeyReponse{}
	return &this
}

// NewReplicationEncryptionKeyReponseWithDefaults instantiates a new ReplicationEncryptionKeyReponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplicationEncryptionKeyReponseWithDefaults() *ReplicationEncryptionKeyReponse {
	this := ReplicationEncryptionKeyReponse{}
	return &this
}

// GetEncryptionKey returns the EncryptionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicationEncryptionKeyReponse) GetEncryptionKey() string {
	if o == nil || o.EncryptionKey.Get() == nil {
		var ret string
		return ret
	}
	return *o.EncryptionKey.Get()
}

// GetEncryptionKeyOk returns a tuple with the EncryptionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationEncryptionKeyReponse) GetEncryptionKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EncryptionKey.Get(), o.EncryptionKey.IsSet()
}

// HasEncryptionKey returns a boolean if a field has been set.
func (o *ReplicationEncryptionKeyReponse) HasEncryptionKey() bool {
	if o != nil && o.EncryptionKey.IsSet() {
		return true
	}

	return false
}

// SetEncryptionKey gets a reference to the given NullableString and assigns it to the EncryptionKey field.
func (o *ReplicationEncryptionKeyReponse) SetEncryptionKey(v string) {
	o.EncryptionKey.Set(&v)
}
// SetEncryptionKeyNil sets the value for EncryptionKey to be an explicit nil
func (o *ReplicationEncryptionKeyReponse) SetEncryptionKeyNil() {
	o.EncryptionKey.Set(nil)
}

// UnsetEncryptionKey ensures that no value is present for EncryptionKey, not even an explicit nil
func (o *ReplicationEncryptionKeyReponse) UnsetEncryptionKey() {
	o.EncryptionKey.Unset()
}

func (o ReplicationEncryptionKeyReponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EncryptionKey.IsSet() {
		toSerialize["encryptionKey"] = o.EncryptionKey.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableReplicationEncryptionKeyReponse struct {
	value *ReplicationEncryptionKeyReponse
	isSet bool
}

func (v NullableReplicationEncryptionKeyReponse) Get() *ReplicationEncryptionKeyReponse {
	return v.value
}

func (v *NullableReplicationEncryptionKeyReponse) Set(val *ReplicationEncryptionKeyReponse) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicationEncryptionKeyReponse) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicationEncryptionKeyReponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicationEncryptionKeyReponse(val *ReplicationEncryptionKeyReponse) *NullableReplicationEncryptionKeyReponse {
	return &NullableReplicationEncryptionKeyReponse{value: val, isSet: true}
}

func (v NullableReplicationEncryptionKeyReponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicationEncryptionKeyReponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


