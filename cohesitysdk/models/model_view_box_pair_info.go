/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ViewBoxPairInfo Specifies a pairing between a Storage Domain (View Box) on local Cluster with a Storage Domain (View Box) on a remote Cluster. When replication is configured between a local Cluster and a remote Cluster, the Snapshots are replicated from the specified Storage Domain (View Box) on the local Cluster to the Storage Domain (View Box) on the remote Cluster. See the online help for details about the supported Storage Domains (View Box) pairings between Clusters.
type ViewBoxPairInfo struct {
	// Specifies the id of the Storage Domain (View Box) on the local Cluster.
	LocalViewBoxId NullableInt64 `json:"localViewBoxId,omitempty"`
	// Specifies the name of the Storage Domain (View Box) on the local Cluster.
	LocalViewBoxName NullableString `json:"localViewBoxName,omitempty"`
	// Specifies the id of the Storage Domain (View Box) on the remote Cluster.
	RemoteViewBoxId NullableInt64 `json:"remoteViewBoxId,omitempty"`
	// Specifies the name of the Storage Domain (View Box) on the remote Cluster.
	RemoteViewBoxName NullableString `json:"remoteViewBoxName,omitempty"`
}

// NewViewBoxPairInfo instantiates a new ViewBoxPairInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewBoxPairInfo() *ViewBoxPairInfo {
	this := ViewBoxPairInfo{}
	return &this
}

// NewViewBoxPairInfoWithDefaults instantiates a new ViewBoxPairInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewBoxPairInfoWithDefaults() *ViewBoxPairInfo {
	this := ViewBoxPairInfo{}
	return &this
}

// GetLocalViewBoxId returns the LocalViewBoxId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewBoxPairInfo) GetLocalViewBoxId() int64 {
	if o == nil || o.LocalViewBoxId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LocalViewBoxId.Get()
}

// GetLocalViewBoxIdOk returns a tuple with the LocalViewBoxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewBoxPairInfo) GetLocalViewBoxIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LocalViewBoxId.Get(), o.LocalViewBoxId.IsSet()
}

// HasLocalViewBoxId returns a boolean if a field has been set.
func (o *ViewBoxPairInfo) HasLocalViewBoxId() bool {
	if o != nil && o.LocalViewBoxId.IsSet() {
		return true
	}

	return false
}

// SetLocalViewBoxId gets a reference to the given NullableInt64 and assigns it to the LocalViewBoxId field.
func (o *ViewBoxPairInfo) SetLocalViewBoxId(v int64) {
	o.LocalViewBoxId.Set(&v)
}
// SetLocalViewBoxIdNil sets the value for LocalViewBoxId to be an explicit nil
func (o *ViewBoxPairInfo) SetLocalViewBoxIdNil() {
	o.LocalViewBoxId.Set(nil)
}

// UnsetLocalViewBoxId ensures that no value is present for LocalViewBoxId, not even an explicit nil
func (o *ViewBoxPairInfo) UnsetLocalViewBoxId() {
	o.LocalViewBoxId.Unset()
}

// GetLocalViewBoxName returns the LocalViewBoxName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewBoxPairInfo) GetLocalViewBoxName() string {
	if o == nil || o.LocalViewBoxName.Get() == nil {
		var ret string
		return ret
	}
	return *o.LocalViewBoxName.Get()
}

// GetLocalViewBoxNameOk returns a tuple with the LocalViewBoxName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewBoxPairInfo) GetLocalViewBoxNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LocalViewBoxName.Get(), o.LocalViewBoxName.IsSet()
}

// HasLocalViewBoxName returns a boolean if a field has been set.
func (o *ViewBoxPairInfo) HasLocalViewBoxName() bool {
	if o != nil && o.LocalViewBoxName.IsSet() {
		return true
	}

	return false
}

// SetLocalViewBoxName gets a reference to the given NullableString and assigns it to the LocalViewBoxName field.
func (o *ViewBoxPairInfo) SetLocalViewBoxName(v string) {
	o.LocalViewBoxName.Set(&v)
}
// SetLocalViewBoxNameNil sets the value for LocalViewBoxName to be an explicit nil
func (o *ViewBoxPairInfo) SetLocalViewBoxNameNil() {
	o.LocalViewBoxName.Set(nil)
}

// UnsetLocalViewBoxName ensures that no value is present for LocalViewBoxName, not even an explicit nil
func (o *ViewBoxPairInfo) UnsetLocalViewBoxName() {
	o.LocalViewBoxName.Unset()
}

// GetRemoteViewBoxId returns the RemoteViewBoxId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewBoxPairInfo) GetRemoteViewBoxId() int64 {
	if o == nil || o.RemoteViewBoxId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RemoteViewBoxId.Get()
}

// GetRemoteViewBoxIdOk returns a tuple with the RemoteViewBoxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewBoxPairInfo) GetRemoteViewBoxIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RemoteViewBoxId.Get(), o.RemoteViewBoxId.IsSet()
}

// HasRemoteViewBoxId returns a boolean if a field has been set.
func (o *ViewBoxPairInfo) HasRemoteViewBoxId() bool {
	if o != nil && o.RemoteViewBoxId.IsSet() {
		return true
	}

	return false
}

// SetRemoteViewBoxId gets a reference to the given NullableInt64 and assigns it to the RemoteViewBoxId field.
func (o *ViewBoxPairInfo) SetRemoteViewBoxId(v int64) {
	o.RemoteViewBoxId.Set(&v)
}
// SetRemoteViewBoxIdNil sets the value for RemoteViewBoxId to be an explicit nil
func (o *ViewBoxPairInfo) SetRemoteViewBoxIdNil() {
	o.RemoteViewBoxId.Set(nil)
}

// UnsetRemoteViewBoxId ensures that no value is present for RemoteViewBoxId, not even an explicit nil
func (o *ViewBoxPairInfo) UnsetRemoteViewBoxId() {
	o.RemoteViewBoxId.Unset()
}

// GetRemoteViewBoxName returns the RemoteViewBoxName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewBoxPairInfo) GetRemoteViewBoxName() string {
	if o == nil || o.RemoteViewBoxName.Get() == nil {
		var ret string
		return ret
	}
	return *o.RemoteViewBoxName.Get()
}

// GetRemoteViewBoxNameOk returns a tuple with the RemoteViewBoxName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewBoxPairInfo) GetRemoteViewBoxNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RemoteViewBoxName.Get(), o.RemoteViewBoxName.IsSet()
}

// HasRemoteViewBoxName returns a boolean if a field has been set.
func (o *ViewBoxPairInfo) HasRemoteViewBoxName() bool {
	if o != nil && o.RemoteViewBoxName.IsSet() {
		return true
	}

	return false
}

// SetRemoteViewBoxName gets a reference to the given NullableString and assigns it to the RemoteViewBoxName field.
func (o *ViewBoxPairInfo) SetRemoteViewBoxName(v string) {
	o.RemoteViewBoxName.Set(&v)
}
// SetRemoteViewBoxNameNil sets the value for RemoteViewBoxName to be an explicit nil
func (o *ViewBoxPairInfo) SetRemoteViewBoxNameNil() {
	o.RemoteViewBoxName.Set(nil)
}

// UnsetRemoteViewBoxName ensures that no value is present for RemoteViewBoxName, not even an explicit nil
func (o *ViewBoxPairInfo) UnsetRemoteViewBoxName() {
	o.RemoteViewBoxName.Unset()
}

func (o ViewBoxPairInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LocalViewBoxId.IsSet() {
		toSerialize["localViewBoxId"] = o.LocalViewBoxId.Get()
	}
	if o.LocalViewBoxName.IsSet() {
		toSerialize["localViewBoxName"] = o.LocalViewBoxName.Get()
	}
	if o.RemoteViewBoxId.IsSet() {
		toSerialize["remoteViewBoxId"] = o.RemoteViewBoxId.Get()
	}
	if o.RemoteViewBoxName.IsSet() {
		toSerialize["remoteViewBoxName"] = o.RemoteViewBoxName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableViewBoxPairInfo struct {
	value *ViewBoxPairInfo
	isSet bool
}

func (v NullableViewBoxPairInfo) Get() *ViewBoxPairInfo {
	return v.value
}

func (v *NullableViewBoxPairInfo) Set(val *ViewBoxPairInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableViewBoxPairInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableViewBoxPairInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewBoxPairInfo(val *ViewBoxPairInfo) *NullableViewBoxPairInfo {
	return &NullableViewBoxPairInfo{value: val, isSet: true}
}

func (v NullableViewBoxPairInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewBoxPairInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


