/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// NoSqlBackupJobParams struct for NoSqlBackupJobParams
type NoSqlBackupJobParams struct {
	// Net bandwidth bytes per second.
	BandwidthBytesPerSecond NullableInt64 `json:"bandwidthBytesPerSecond,omitempty"`
	CassandraBackupJobParams *CassandraBackupJobParams `json:"cassandraBackupJobParams,omitempty"`
	// Frequency at which compaction jobs should run in seconds. Will be only applicable for Cassandra, Mongo and Couchbase environment.
	CompactionJobIntervalSecs NullableInt64 `json:"compactionJobIntervalSecs,omitempty"`
	// Max number of mappers.
	Concurrency NullableInt32 `json:"concurrency,omitempty"`
	// Contains any additional couchbase environment specific backup params at the job level.
	CouchbaseBackupJobParams *map[string]interface{} `json:"couchbaseBackupJobParams,omitempty"`
	// Frequency at which garbage collection jobs should run in seconds.
	GcJobIntervalSecs NullableInt64 `json:"gcJobIntervalSecs,omitempty"`
	// Retention period for logs of this job in days.
	GcRetentionPeriodDays NullableInt32 `json:"gcRetentionPeriodDays,omitempty"`
	HbaseBackupJobParams *HBaseBackupJobParams `json:"hbaseBackupJobParams,omitempty"`
	HdfsBackupJobParams *HdfsBackupJobParams `json:"hdfsBackupJobParams,omitempty"`
	HiveBackupJobParams *HiveBackupJobParams `json:"hiveBackupJobParams,omitempty"`
	// The last time (in usecs) when the compaction ran for this jobs.
	LastCompactionRunTimeUsecs NullableInt64 `json:"lastCompactionRunTimeUsecs,omitempty"`
	// The last time (in usecs) when the gc ran for this jobs.
	LastGcRunTimeUsecs NullableInt64 `json:"lastGcRunTimeUsecs,omitempty"`
	MongodbBackupJobParams *MongoDBBackupJobParams `json:"mongodbBackupJobParams,omitempty"`
}

// NewNoSqlBackupJobParams instantiates a new NoSqlBackupJobParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNoSqlBackupJobParams() *NoSqlBackupJobParams {
	this := NoSqlBackupJobParams{}
	return &this
}

// NewNoSqlBackupJobParamsWithDefaults instantiates a new NoSqlBackupJobParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNoSqlBackupJobParamsWithDefaults() *NoSqlBackupJobParams {
	this := NoSqlBackupJobParams{}
	return &this
}

// GetBandwidthBytesPerSecond returns the BandwidthBytesPerSecond field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NoSqlBackupJobParams) GetBandwidthBytesPerSecond() int64 {
	if o == nil || o.BandwidthBytesPerSecond.Get() == nil {
		var ret int64
		return ret
	}
	return *o.BandwidthBytesPerSecond.Get()
}

// GetBandwidthBytesPerSecondOk returns a tuple with the BandwidthBytesPerSecond field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NoSqlBackupJobParams) GetBandwidthBytesPerSecondOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BandwidthBytesPerSecond.Get(), o.BandwidthBytesPerSecond.IsSet()
}

// HasBandwidthBytesPerSecond returns a boolean if a field has been set.
func (o *NoSqlBackupJobParams) HasBandwidthBytesPerSecond() bool {
	if o != nil && o.BandwidthBytesPerSecond.IsSet() {
		return true
	}

	return false
}

// SetBandwidthBytesPerSecond gets a reference to the given NullableInt64 and assigns it to the BandwidthBytesPerSecond field.
func (o *NoSqlBackupJobParams) SetBandwidthBytesPerSecond(v int64) {
	o.BandwidthBytesPerSecond.Set(&v)
}
// SetBandwidthBytesPerSecondNil sets the value for BandwidthBytesPerSecond to be an explicit nil
func (o *NoSqlBackupJobParams) SetBandwidthBytesPerSecondNil() {
	o.BandwidthBytesPerSecond.Set(nil)
}

// UnsetBandwidthBytesPerSecond ensures that no value is present for BandwidthBytesPerSecond, not even an explicit nil
func (o *NoSqlBackupJobParams) UnsetBandwidthBytesPerSecond() {
	o.BandwidthBytesPerSecond.Unset()
}

// GetCassandraBackupJobParams returns the CassandraBackupJobParams field value if set, zero value otherwise.
func (o *NoSqlBackupJobParams) GetCassandraBackupJobParams() CassandraBackupJobParams {
	if o == nil || o.CassandraBackupJobParams == nil {
		var ret CassandraBackupJobParams
		return ret
	}
	return *o.CassandraBackupJobParams
}

// GetCassandraBackupJobParamsOk returns a tuple with the CassandraBackupJobParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoSqlBackupJobParams) GetCassandraBackupJobParamsOk() (*CassandraBackupJobParams, bool) {
	if o == nil || o.CassandraBackupJobParams == nil {
		return nil, false
	}
	return o.CassandraBackupJobParams, true
}

// HasCassandraBackupJobParams returns a boolean if a field has been set.
func (o *NoSqlBackupJobParams) HasCassandraBackupJobParams() bool {
	if o != nil && o.CassandraBackupJobParams != nil {
		return true
	}

	return false
}

// SetCassandraBackupJobParams gets a reference to the given CassandraBackupJobParams and assigns it to the CassandraBackupJobParams field.
func (o *NoSqlBackupJobParams) SetCassandraBackupJobParams(v CassandraBackupJobParams) {
	o.CassandraBackupJobParams = &v
}

// GetCompactionJobIntervalSecs returns the CompactionJobIntervalSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NoSqlBackupJobParams) GetCompactionJobIntervalSecs() int64 {
	if o == nil || o.CompactionJobIntervalSecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.CompactionJobIntervalSecs.Get()
}

// GetCompactionJobIntervalSecsOk returns a tuple with the CompactionJobIntervalSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NoSqlBackupJobParams) GetCompactionJobIntervalSecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CompactionJobIntervalSecs.Get(), o.CompactionJobIntervalSecs.IsSet()
}

// HasCompactionJobIntervalSecs returns a boolean if a field has been set.
func (o *NoSqlBackupJobParams) HasCompactionJobIntervalSecs() bool {
	if o != nil && o.CompactionJobIntervalSecs.IsSet() {
		return true
	}

	return false
}

// SetCompactionJobIntervalSecs gets a reference to the given NullableInt64 and assigns it to the CompactionJobIntervalSecs field.
func (o *NoSqlBackupJobParams) SetCompactionJobIntervalSecs(v int64) {
	o.CompactionJobIntervalSecs.Set(&v)
}
// SetCompactionJobIntervalSecsNil sets the value for CompactionJobIntervalSecs to be an explicit nil
func (o *NoSqlBackupJobParams) SetCompactionJobIntervalSecsNil() {
	o.CompactionJobIntervalSecs.Set(nil)
}

// UnsetCompactionJobIntervalSecs ensures that no value is present for CompactionJobIntervalSecs, not even an explicit nil
func (o *NoSqlBackupJobParams) UnsetCompactionJobIntervalSecs() {
	o.CompactionJobIntervalSecs.Unset()
}

// GetConcurrency returns the Concurrency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NoSqlBackupJobParams) GetConcurrency() int32 {
	if o == nil || o.Concurrency.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Concurrency.Get()
}

// GetConcurrencyOk returns a tuple with the Concurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NoSqlBackupJobParams) GetConcurrencyOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Concurrency.Get(), o.Concurrency.IsSet()
}

// HasConcurrency returns a boolean if a field has been set.
func (o *NoSqlBackupJobParams) HasConcurrency() bool {
	if o != nil && o.Concurrency.IsSet() {
		return true
	}

	return false
}

// SetConcurrency gets a reference to the given NullableInt32 and assigns it to the Concurrency field.
func (o *NoSqlBackupJobParams) SetConcurrency(v int32) {
	o.Concurrency.Set(&v)
}
// SetConcurrencyNil sets the value for Concurrency to be an explicit nil
func (o *NoSqlBackupJobParams) SetConcurrencyNil() {
	o.Concurrency.Set(nil)
}

// UnsetConcurrency ensures that no value is present for Concurrency, not even an explicit nil
func (o *NoSqlBackupJobParams) UnsetConcurrency() {
	o.Concurrency.Unset()
}

// GetCouchbaseBackupJobParams returns the CouchbaseBackupJobParams field value if set, zero value otherwise.
func (o *NoSqlBackupJobParams) GetCouchbaseBackupJobParams() map[string]interface{} {
	if o == nil || o.CouchbaseBackupJobParams == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.CouchbaseBackupJobParams
}

// GetCouchbaseBackupJobParamsOk returns a tuple with the CouchbaseBackupJobParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoSqlBackupJobParams) GetCouchbaseBackupJobParamsOk() (*map[string]interface{}, bool) {
	if o == nil || o.CouchbaseBackupJobParams == nil {
		return nil, false
	}
	return o.CouchbaseBackupJobParams, true
}

// HasCouchbaseBackupJobParams returns a boolean if a field has been set.
func (o *NoSqlBackupJobParams) HasCouchbaseBackupJobParams() bool {
	if o != nil && o.CouchbaseBackupJobParams != nil {
		return true
	}

	return false
}

// SetCouchbaseBackupJobParams gets a reference to the given map[string]interface{} and assigns it to the CouchbaseBackupJobParams field.
func (o *NoSqlBackupJobParams) SetCouchbaseBackupJobParams(v map[string]interface{}) {
	o.CouchbaseBackupJobParams = &v
}

// GetGcJobIntervalSecs returns the GcJobIntervalSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NoSqlBackupJobParams) GetGcJobIntervalSecs() int64 {
	if o == nil || o.GcJobIntervalSecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.GcJobIntervalSecs.Get()
}

// GetGcJobIntervalSecsOk returns a tuple with the GcJobIntervalSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NoSqlBackupJobParams) GetGcJobIntervalSecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.GcJobIntervalSecs.Get(), o.GcJobIntervalSecs.IsSet()
}

// HasGcJobIntervalSecs returns a boolean if a field has been set.
func (o *NoSqlBackupJobParams) HasGcJobIntervalSecs() bool {
	if o != nil && o.GcJobIntervalSecs.IsSet() {
		return true
	}

	return false
}

// SetGcJobIntervalSecs gets a reference to the given NullableInt64 and assigns it to the GcJobIntervalSecs field.
func (o *NoSqlBackupJobParams) SetGcJobIntervalSecs(v int64) {
	o.GcJobIntervalSecs.Set(&v)
}
// SetGcJobIntervalSecsNil sets the value for GcJobIntervalSecs to be an explicit nil
func (o *NoSqlBackupJobParams) SetGcJobIntervalSecsNil() {
	o.GcJobIntervalSecs.Set(nil)
}

// UnsetGcJobIntervalSecs ensures that no value is present for GcJobIntervalSecs, not even an explicit nil
func (o *NoSqlBackupJobParams) UnsetGcJobIntervalSecs() {
	o.GcJobIntervalSecs.Unset()
}

// GetGcRetentionPeriodDays returns the GcRetentionPeriodDays field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NoSqlBackupJobParams) GetGcRetentionPeriodDays() int32 {
	if o == nil || o.GcRetentionPeriodDays.Get() == nil {
		var ret int32
		return ret
	}
	return *o.GcRetentionPeriodDays.Get()
}

// GetGcRetentionPeriodDaysOk returns a tuple with the GcRetentionPeriodDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NoSqlBackupJobParams) GetGcRetentionPeriodDaysOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.GcRetentionPeriodDays.Get(), o.GcRetentionPeriodDays.IsSet()
}

// HasGcRetentionPeriodDays returns a boolean if a field has been set.
func (o *NoSqlBackupJobParams) HasGcRetentionPeriodDays() bool {
	if o != nil && o.GcRetentionPeriodDays.IsSet() {
		return true
	}

	return false
}

// SetGcRetentionPeriodDays gets a reference to the given NullableInt32 and assigns it to the GcRetentionPeriodDays field.
func (o *NoSqlBackupJobParams) SetGcRetentionPeriodDays(v int32) {
	o.GcRetentionPeriodDays.Set(&v)
}
// SetGcRetentionPeriodDaysNil sets the value for GcRetentionPeriodDays to be an explicit nil
func (o *NoSqlBackupJobParams) SetGcRetentionPeriodDaysNil() {
	o.GcRetentionPeriodDays.Set(nil)
}

// UnsetGcRetentionPeriodDays ensures that no value is present for GcRetentionPeriodDays, not even an explicit nil
func (o *NoSqlBackupJobParams) UnsetGcRetentionPeriodDays() {
	o.GcRetentionPeriodDays.Unset()
}

// GetHbaseBackupJobParams returns the HbaseBackupJobParams field value if set, zero value otherwise.
func (o *NoSqlBackupJobParams) GetHbaseBackupJobParams() HBaseBackupJobParams {
	if o == nil || o.HbaseBackupJobParams == nil {
		var ret HBaseBackupJobParams
		return ret
	}
	return *o.HbaseBackupJobParams
}

// GetHbaseBackupJobParamsOk returns a tuple with the HbaseBackupJobParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoSqlBackupJobParams) GetHbaseBackupJobParamsOk() (*HBaseBackupJobParams, bool) {
	if o == nil || o.HbaseBackupJobParams == nil {
		return nil, false
	}
	return o.HbaseBackupJobParams, true
}

// HasHbaseBackupJobParams returns a boolean if a field has been set.
func (o *NoSqlBackupJobParams) HasHbaseBackupJobParams() bool {
	if o != nil && o.HbaseBackupJobParams != nil {
		return true
	}

	return false
}

// SetHbaseBackupJobParams gets a reference to the given HBaseBackupJobParams and assigns it to the HbaseBackupJobParams field.
func (o *NoSqlBackupJobParams) SetHbaseBackupJobParams(v HBaseBackupJobParams) {
	o.HbaseBackupJobParams = &v
}

// GetHdfsBackupJobParams returns the HdfsBackupJobParams field value if set, zero value otherwise.
func (o *NoSqlBackupJobParams) GetHdfsBackupJobParams() HdfsBackupJobParams {
	if o == nil || o.HdfsBackupJobParams == nil {
		var ret HdfsBackupJobParams
		return ret
	}
	return *o.HdfsBackupJobParams
}

// GetHdfsBackupJobParamsOk returns a tuple with the HdfsBackupJobParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoSqlBackupJobParams) GetHdfsBackupJobParamsOk() (*HdfsBackupJobParams, bool) {
	if o == nil || o.HdfsBackupJobParams == nil {
		return nil, false
	}
	return o.HdfsBackupJobParams, true
}

// HasHdfsBackupJobParams returns a boolean if a field has been set.
func (o *NoSqlBackupJobParams) HasHdfsBackupJobParams() bool {
	if o != nil && o.HdfsBackupJobParams != nil {
		return true
	}

	return false
}

// SetHdfsBackupJobParams gets a reference to the given HdfsBackupJobParams and assigns it to the HdfsBackupJobParams field.
func (o *NoSqlBackupJobParams) SetHdfsBackupJobParams(v HdfsBackupJobParams) {
	o.HdfsBackupJobParams = &v
}

// GetHiveBackupJobParams returns the HiveBackupJobParams field value if set, zero value otherwise.
func (o *NoSqlBackupJobParams) GetHiveBackupJobParams() HiveBackupJobParams {
	if o == nil || o.HiveBackupJobParams == nil {
		var ret HiveBackupJobParams
		return ret
	}
	return *o.HiveBackupJobParams
}

// GetHiveBackupJobParamsOk returns a tuple with the HiveBackupJobParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoSqlBackupJobParams) GetHiveBackupJobParamsOk() (*HiveBackupJobParams, bool) {
	if o == nil || o.HiveBackupJobParams == nil {
		return nil, false
	}
	return o.HiveBackupJobParams, true
}

// HasHiveBackupJobParams returns a boolean if a field has been set.
func (o *NoSqlBackupJobParams) HasHiveBackupJobParams() bool {
	if o != nil && o.HiveBackupJobParams != nil {
		return true
	}

	return false
}

// SetHiveBackupJobParams gets a reference to the given HiveBackupJobParams and assigns it to the HiveBackupJobParams field.
func (o *NoSqlBackupJobParams) SetHiveBackupJobParams(v HiveBackupJobParams) {
	o.HiveBackupJobParams = &v
}

// GetLastCompactionRunTimeUsecs returns the LastCompactionRunTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NoSqlBackupJobParams) GetLastCompactionRunTimeUsecs() int64 {
	if o == nil || o.LastCompactionRunTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LastCompactionRunTimeUsecs.Get()
}

// GetLastCompactionRunTimeUsecsOk returns a tuple with the LastCompactionRunTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NoSqlBackupJobParams) GetLastCompactionRunTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastCompactionRunTimeUsecs.Get(), o.LastCompactionRunTimeUsecs.IsSet()
}

// HasLastCompactionRunTimeUsecs returns a boolean if a field has been set.
func (o *NoSqlBackupJobParams) HasLastCompactionRunTimeUsecs() bool {
	if o != nil && o.LastCompactionRunTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetLastCompactionRunTimeUsecs gets a reference to the given NullableInt64 and assigns it to the LastCompactionRunTimeUsecs field.
func (o *NoSqlBackupJobParams) SetLastCompactionRunTimeUsecs(v int64) {
	o.LastCompactionRunTimeUsecs.Set(&v)
}
// SetLastCompactionRunTimeUsecsNil sets the value for LastCompactionRunTimeUsecs to be an explicit nil
func (o *NoSqlBackupJobParams) SetLastCompactionRunTimeUsecsNil() {
	o.LastCompactionRunTimeUsecs.Set(nil)
}

// UnsetLastCompactionRunTimeUsecs ensures that no value is present for LastCompactionRunTimeUsecs, not even an explicit nil
func (o *NoSqlBackupJobParams) UnsetLastCompactionRunTimeUsecs() {
	o.LastCompactionRunTimeUsecs.Unset()
}

// GetLastGcRunTimeUsecs returns the LastGcRunTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NoSqlBackupJobParams) GetLastGcRunTimeUsecs() int64 {
	if o == nil || o.LastGcRunTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LastGcRunTimeUsecs.Get()
}

// GetLastGcRunTimeUsecsOk returns a tuple with the LastGcRunTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NoSqlBackupJobParams) GetLastGcRunTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastGcRunTimeUsecs.Get(), o.LastGcRunTimeUsecs.IsSet()
}

// HasLastGcRunTimeUsecs returns a boolean if a field has been set.
func (o *NoSqlBackupJobParams) HasLastGcRunTimeUsecs() bool {
	if o != nil && o.LastGcRunTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetLastGcRunTimeUsecs gets a reference to the given NullableInt64 and assigns it to the LastGcRunTimeUsecs field.
func (o *NoSqlBackupJobParams) SetLastGcRunTimeUsecs(v int64) {
	o.LastGcRunTimeUsecs.Set(&v)
}
// SetLastGcRunTimeUsecsNil sets the value for LastGcRunTimeUsecs to be an explicit nil
func (o *NoSqlBackupJobParams) SetLastGcRunTimeUsecsNil() {
	o.LastGcRunTimeUsecs.Set(nil)
}

// UnsetLastGcRunTimeUsecs ensures that no value is present for LastGcRunTimeUsecs, not even an explicit nil
func (o *NoSqlBackupJobParams) UnsetLastGcRunTimeUsecs() {
	o.LastGcRunTimeUsecs.Unset()
}

// GetMongodbBackupJobParams returns the MongodbBackupJobParams field value if set, zero value otherwise.
func (o *NoSqlBackupJobParams) GetMongodbBackupJobParams() MongoDBBackupJobParams {
	if o == nil || o.MongodbBackupJobParams == nil {
		var ret MongoDBBackupJobParams
		return ret
	}
	return *o.MongodbBackupJobParams
}

// GetMongodbBackupJobParamsOk returns a tuple with the MongodbBackupJobParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoSqlBackupJobParams) GetMongodbBackupJobParamsOk() (*MongoDBBackupJobParams, bool) {
	if o == nil || o.MongodbBackupJobParams == nil {
		return nil, false
	}
	return o.MongodbBackupJobParams, true
}

// HasMongodbBackupJobParams returns a boolean if a field has been set.
func (o *NoSqlBackupJobParams) HasMongodbBackupJobParams() bool {
	if o != nil && o.MongodbBackupJobParams != nil {
		return true
	}

	return false
}

// SetMongodbBackupJobParams gets a reference to the given MongoDBBackupJobParams and assigns it to the MongodbBackupJobParams field.
func (o *NoSqlBackupJobParams) SetMongodbBackupJobParams(v MongoDBBackupJobParams) {
	o.MongodbBackupJobParams = &v
}

func (o NoSqlBackupJobParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BandwidthBytesPerSecond.IsSet() {
		toSerialize["bandwidthBytesPerSecond"] = o.BandwidthBytesPerSecond.Get()
	}
	if o.CassandraBackupJobParams != nil {
		toSerialize["cassandraBackupJobParams"] = o.CassandraBackupJobParams
	}
	if o.CompactionJobIntervalSecs.IsSet() {
		toSerialize["compactionJobIntervalSecs"] = o.CompactionJobIntervalSecs.Get()
	}
	if o.Concurrency.IsSet() {
		toSerialize["concurrency"] = o.Concurrency.Get()
	}
	if o.CouchbaseBackupJobParams != nil {
		toSerialize["couchbaseBackupJobParams"] = o.CouchbaseBackupJobParams
	}
	if o.GcJobIntervalSecs.IsSet() {
		toSerialize["gcJobIntervalSecs"] = o.GcJobIntervalSecs.Get()
	}
	if o.GcRetentionPeriodDays.IsSet() {
		toSerialize["gcRetentionPeriodDays"] = o.GcRetentionPeriodDays.Get()
	}
	if o.HbaseBackupJobParams != nil {
		toSerialize["hbaseBackupJobParams"] = o.HbaseBackupJobParams
	}
	if o.HdfsBackupJobParams != nil {
		toSerialize["hdfsBackupJobParams"] = o.HdfsBackupJobParams
	}
	if o.HiveBackupJobParams != nil {
		toSerialize["hiveBackupJobParams"] = o.HiveBackupJobParams
	}
	if o.LastCompactionRunTimeUsecs.IsSet() {
		toSerialize["lastCompactionRunTimeUsecs"] = o.LastCompactionRunTimeUsecs.Get()
	}
	if o.LastGcRunTimeUsecs.IsSet() {
		toSerialize["lastGcRunTimeUsecs"] = o.LastGcRunTimeUsecs.Get()
	}
	if o.MongodbBackupJobParams != nil {
		toSerialize["mongodbBackupJobParams"] = o.MongodbBackupJobParams
	}
	return json.Marshal(toSerialize)
}

type NullableNoSqlBackupJobParams struct {
	value *NoSqlBackupJobParams
	isSet bool
}

func (v NullableNoSqlBackupJobParams) Get() *NoSqlBackupJobParams {
	return v.value
}

func (v *NullableNoSqlBackupJobParams) Set(val *NoSqlBackupJobParams) {
	v.value = val
	v.isSet = true
}

func (v NullableNoSqlBackupJobParams) IsSet() bool {
	return v.isSet
}

func (v *NullableNoSqlBackupJobParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNoSqlBackupJobParams(val *NoSqlBackupJobParams) *NullableNoSqlBackupJobParams {
	return &NullableNoSqlBackupJobParams{value: val, isSet: true}
}

func (v NullableNoSqlBackupJobParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNoSqlBackupJobParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


