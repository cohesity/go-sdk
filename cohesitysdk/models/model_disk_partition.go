/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// DiskPartition Specifies information about each partition in a physical disk.
type DiskPartition struct {
	// Specifies the length of the block in bytes.
	LengthBytes NullableInt64 `json:"lengthBytes,omitempty"`
	// Specifies a unique number of the partition within the linear disk file.
	Number NullableInt64 `json:"number,omitempty"`
	// Specifies the offset of the block (in bytes) from the beginning of the containing object such as a physical disk or a virtual disk file.
	OffsetBytes NullableInt64 `json:"offsetBytes,omitempty"`
	// Specifies the partition type uuid. If disk is unpartitioned, this field is not set. If disk is MBR partitioned, this field is set to a partition type. If disk is GPT partitioned, this field is set to a partition type GUID.
	TypeUuid NullableString `json:"typeUuid,omitempty"`
	// Specifies the partition uuid. If disk is unpartitioned, this field is not set. If disk is MBR partitioned, this field is not set. If disk is GPT partitioned, this field is set to a partition GUID.
	Uuid NullableString `json:"uuid,omitempty"`
}

// NewDiskPartition instantiates a new DiskPartition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiskPartition() *DiskPartition {
	this := DiskPartition{}
	return &this
}

// NewDiskPartitionWithDefaults instantiates a new DiskPartition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskPartitionWithDefaults() *DiskPartition {
	this := DiskPartition{}
	return &this
}

// GetLengthBytes returns the LengthBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DiskPartition) GetLengthBytes() int64 {
	if o == nil || o.LengthBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LengthBytes.Get()
}

// GetLengthBytesOk returns a tuple with the LengthBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiskPartition) GetLengthBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LengthBytes.Get(), o.LengthBytes.IsSet()
}

// HasLengthBytes returns a boolean if a field has been set.
func (o *DiskPartition) HasLengthBytes() bool {
	if o != nil && o.LengthBytes.IsSet() {
		return true
	}

	return false
}

// SetLengthBytes gets a reference to the given NullableInt64 and assigns it to the LengthBytes field.
func (o *DiskPartition) SetLengthBytes(v int64) {
	o.LengthBytes.Set(&v)
}
// SetLengthBytesNil sets the value for LengthBytes to be an explicit nil
func (o *DiskPartition) SetLengthBytesNil() {
	o.LengthBytes.Set(nil)
}

// UnsetLengthBytes ensures that no value is present for LengthBytes, not even an explicit nil
func (o *DiskPartition) UnsetLengthBytes() {
	o.LengthBytes.Unset()
}

// GetNumber returns the Number field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DiskPartition) GetNumber() int64 {
	if o == nil || o.Number.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Number.Get()
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiskPartition) GetNumberOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Number.Get(), o.Number.IsSet()
}

// HasNumber returns a boolean if a field has been set.
func (o *DiskPartition) HasNumber() bool {
	if o != nil && o.Number.IsSet() {
		return true
	}

	return false
}

// SetNumber gets a reference to the given NullableInt64 and assigns it to the Number field.
func (o *DiskPartition) SetNumber(v int64) {
	o.Number.Set(&v)
}
// SetNumberNil sets the value for Number to be an explicit nil
func (o *DiskPartition) SetNumberNil() {
	o.Number.Set(nil)
}

// UnsetNumber ensures that no value is present for Number, not even an explicit nil
func (o *DiskPartition) UnsetNumber() {
	o.Number.Unset()
}

// GetOffsetBytes returns the OffsetBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DiskPartition) GetOffsetBytes() int64 {
	if o == nil || o.OffsetBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.OffsetBytes.Get()
}

// GetOffsetBytesOk returns a tuple with the OffsetBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiskPartition) GetOffsetBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OffsetBytes.Get(), o.OffsetBytes.IsSet()
}

// HasOffsetBytes returns a boolean if a field has been set.
func (o *DiskPartition) HasOffsetBytes() bool {
	if o != nil && o.OffsetBytes.IsSet() {
		return true
	}

	return false
}

// SetOffsetBytes gets a reference to the given NullableInt64 and assigns it to the OffsetBytes field.
func (o *DiskPartition) SetOffsetBytes(v int64) {
	o.OffsetBytes.Set(&v)
}
// SetOffsetBytesNil sets the value for OffsetBytes to be an explicit nil
func (o *DiskPartition) SetOffsetBytesNil() {
	o.OffsetBytes.Set(nil)
}

// UnsetOffsetBytes ensures that no value is present for OffsetBytes, not even an explicit nil
func (o *DiskPartition) UnsetOffsetBytes() {
	o.OffsetBytes.Unset()
}

// GetTypeUuid returns the TypeUuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DiskPartition) GetTypeUuid() string {
	if o == nil || o.TypeUuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.TypeUuid.Get()
}

// GetTypeUuidOk returns a tuple with the TypeUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiskPartition) GetTypeUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TypeUuid.Get(), o.TypeUuid.IsSet()
}

// HasTypeUuid returns a boolean if a field has been set.
func (o *DiskPartition) HasTypeUuid() bool {
	if o != nil && o.TypeUuid.IsSet() {
		return true
	}

	return false
}

// SetTypeUuid gets a reference to the given NullableString and assigns it to the TypeUuid field.
func (o *DiskPartition) SetTypeUuid(v string) {
	o.TypeUuid.Set(&v)
}
// SetTypeUuidNil sets the value for TypeUuid to be an explicit nil
func (o *DiskPartition) SetTypeUuidNil() {
	o.TypeUuid.Set(nil)
}

// UnsetTypeUuid ensures that no value is present for TypeUuid, not even an explicit nil
func (o *DiskPartition) UnsetTypeUuid() {
	o.TypeUuid.Unset()
}

// GetUuid returns the Uuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DiskPartition) GetUuid() string {
	if o == nil || o.Uuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.Uuid.Get()
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiskPartition) GetUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Uuid.Get(), o.Uuid.IsSet()
}

// HasUuid returns a boolean if a field has been set.
func (o *DiskPartition) HasUuid() bool {
	if o != nil && o.Uuid.IsSet() {
		return true
	}

	return false
}

// SetUuid gets a reference to the given NullableString and assigns it to the Uuid field.
func (o *DiskPartition) SetUuid(v string) {
	o.Uuid.Set(&v)
}
// SetUuidNil sets the value for Uuid to be an explicit nil
func (o *DiskPartition) SetUuidNil() {
	o.Uuid.Set(nil)
}

// UnsetUuid ensures that no value is present for Uuid, not even an explicit nil
func (o *DiskPartition) UnsetUuid() {
	o.Uuid.Unset()
}

func (o DiskPartition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LengthBytes.IsSet() {
		toSerialize["lengthBytes"] = o.LengthBytes.Get()
	}
	if o.Number.IsSet() {
		toSerialize["number"] = o.Number.Get()
	}
	if o.OffsetBytes.IsSet() {
		toSerialize["offsetBytes"] = o.OffsetBytes.Get()
	}
	if o.TypeUuid.IsSet() {
		toSerialize["typeUuid"] = o.TypeUuid.Get()
	}
	if o.Uuid.IsSet() {
		toSerialize["uuid"] = o.Uuid.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDiskPartition struct {
	value *DiskPartition
	isSet bool
}

func (v NullableDiskPartition) Get() *DiskPartition {
	return v.value
}

func (v *NullableDiskPartition) Set(val *DiskPartition) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskPartition) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskPartition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskPartition(val *DiskPartition) *NullableDiskPartition {
	return &NullableDiskPartition{value: val, isSet: true}
}

func (v NullableDiskPartition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskPartition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


