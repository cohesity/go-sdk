/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// FixedUnixIdMapping Specifies the fields when mapping type is set to 'kFixed'. It maps all Active Directory users of a domain to a fixed Unix uid, and gid.
type FixedUnixIdMapping struct {
	// Specifies the fixed Unix GID, when mapping type is set to kFixed.
	Gid NullableInt64 `json:"gid,omitempty"`
	// Specifies the fixed Unix UID, when mapping type is set to kFixed.
	Uid NullableInt64 `json:"uid,omitempty"`
}

// NewFixedUnixIdMapping instantiates a new FixedUnixIdMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFixedUnixIdMapping() *FixedUnixIdMapping {
	this := FixedUnixIdMapping{}
	return &this
}

// NewFixedUnixIdMappingWithDefaults instantiates a new FixedUnixIdMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFixedUnixIdMappingWithDefaults() *FixedUnixIdMapping {
	this := FixedUnixIdMapping{}
	return &this
}

// GetGid returns the Gid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FixedUnixIdMapping) GetGid() int64 {
	if o == nil || o.Gid.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Gid.Get()
}

// GetGidOk returns a tuple with the Gid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FixedUnixIdMapping) GetGidOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Gid.Get(), o.Gid.IsSet()
}

// HasGid returns a boolean if a field has been set.
func (o *FixedUnixIdMapping) HasGid() bool {
	if o != nil && o.Gid.IsSet() {
		return true
	}

	return false
}

// SetGid gets a reference to the given NullableInt64 and assigns it to the Gid field.
func (o *FixedUnixIdMapping) SetGid(v int64) {
	o.Gid.Set(&v)
}
// SetGidNil sets the value for Gid to be an explicit nil
func (o *FixedUnixIdMapping) SetGidNil() {
	o.Gid.Set(nil)
}

// UnsetGid ensures that no value is present for Gid, not even an explicit nil
func (o *FixedUnixIdMapping) UnsetGid() {
	o.Gid.Unset()
}

// GetUid returns the Uid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FixedUnixIdMapping) GetUid() int64 {
	if o == nil || o.Uid.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Uid.Get()
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FixedUnixIdMapping) GetUidOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Uid.Get(), o.Uid.IsSet()
}

// HasUid returns a boolean if a field has been set.
func (o *FixedUnixIdMapping) HasUid() bool {
	if o != nil && o.Uid.IsSet() {
		return true
	}

	return false
}

// SetUid gets a reference to the given NullableInt64 and assigns it to the Uid field.
func (o *FixedUnixIdMapping) SetUid(v int64) {
	o.Uid.Set(&v)
}
// SetUidNil sets the value for Uid to be an explicit nil
func (o *FixedUnixIdMapping) SetUidNil() {
	o.Uid.Set(nil)
}

// UnsetUid ensures that no value is present for Uid, not even an explicit nil
func (o *FixedUnixIdMapping) UnsetUid() {
	o.Uid.Unset()
}

func (o FixedUnixIdMapping) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Gid.IsSet() {
		toSerialize["gid"] = o.Gid.Get()
	}
	if o.Uid.IsSet() {
		toSerialize["uid"] = o.Uid.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableFixedUnixIdMapping struct {
	value *FixedUnixIdMapping
	isSet bool
}

func (v NullableFixedUnixIdMapping) Get() *FixedUnixIdMapping {
	return v.value
}

func (v *NullableFixedUnixIdMapping) Set(val *FixedUnixIdMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableFixedUnixIdMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableFixedUnixIdMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFixedUnixIdMapping(val *FixedUnixIdMapping) *NullableFixedUnixIdMapping {
	return &NullableFixedUnixIdMapping{value: val, isSet: true}
}

func (v NullableFixedUnixIdMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFixedUnixIdMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


