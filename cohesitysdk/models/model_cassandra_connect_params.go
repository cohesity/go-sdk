/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// CassandraConnectParams Specifies an Object containing information about a registered cassandra source.
type CassandraConnectParams struct {
	CassandraPortsInfo *CassandraPortsInfo `json:"cassandraPortsInfo,omitempty"`
	CassandraSecurityInfo *CassandraSecurityInfo `json:"cassandraSecurityInfo,omitempty"`
	// Cassandra version
	CassandraVersion NullableString `json:"cassandraVersion,omitempty"`
	// Specifies the Directory path containing Config YAML for discovery.
	ConfigDirectory NullableString `json:"configDirectory,omitempty"`
	// Specifies the List of all physical data center or virtual data center. In most cases, the data centers will be listed after discovery operation however, if they are not listed, you must manually type the data center names. Leaving the field blank will disallow data center-specific backup or restore. Entering a subset of all data centers may cause problems in data movement.
	DataCenters []string `json:"dataCenters,omitempty"`
	// Specifies the Directory from where DSE specific configuration can be read.
	DseConfigDirectory NullableString `json:"dseConfigDirectory,omitempty"`
	// Specifies whether this cluster has DSE Authenticator.
	IsDseAuthenticator NullableBool `json:"isDseAuthenticator,omitempty"`
	// Specifies whether this cluster has DSE tiered storage.
	IsDseTieredStorage NullableBool `json:"isDseTieredStorage,omitempty"`
	// Specifies if JMX Authentication enabled in this cluster.
	IsJmxAuthEnable NullableBool `json:"isJmxAuthEnable,omitempty"`
	// Specifies the Kerberos Principal for Kerberos connection
	KerberosPrincipal NullableString `json:"kerberosPrincipal,omitempty"`
	// Specifies the Primary Host for the Cassandra cluster.
	PrimaryHost NullableString `json:"primaryHost,omitempty"`
	// Specifies the Seed nodes of this Cassandra cluster.
	Seeds []string `json:"seeds,omitempty"`
	// Specifies the Solr node IP Addresses
	SolrNodes []string `json:"solrNodes,omitempty"`
	// Specifies the Solr node Port.
	SolrPort NullableInt32 `json:"solrPort,omitempty"`
}

// NewCassandraConnectParams instantiates a new CassandraConnectParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCassandraConnectParams() *CassandraConnectParams {
	this := CassandraConnectParams{}
	return &this
}

// NewCassandraConnectParamsWithDefaults instantiates a new CassandraConnectParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCassandraConnectParamsWithDefaults() *CassandraConnectParams {
	this := CassandraConnectParams{}
	return &this
}

// GetCassandraPortsInfo returns the CassandraPortsInfo field value if set, zero value otherwise.
func (o *CassandraConnectParams) GetCassandraPortsInfo() CassandraPortsInfo {
	if o == nil || o.CassandraPortsInfo == nil {
		var ret CassandraPortsInfo
		return ret
	}
	return *o.CassandraPortsInfo
}

// GetCassandraPortsInfoOk returns a tuple with the CassandraPortsInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CassandraConnectParams) GetCassandraPortsInfoOk() (*CassandraPortsInfo, bool) {
	if o == nil || o.CassandraPortsInfo == nil {
		return nil, false
	}
	return o.CassandraPortsInfo, true
}

// HasCassandraPortsInfo returns a boolean if a field has been set.
func (o *CassandraConnectParams) HasCassandraPortsInfo() bool {
	if o != nil && o.CassandraPortsInfo != nil {
		return true
	}

	return false
}

// SetCassandraPortsInfo gets a reference to the given CassandraPortsInfo and assigns it to the CassandraPortsInfo field.
func (o *CassandraConnectParams) SetCassandraPortsInfo(v CassandraPortsInfo) {
	o.CassandraPortsInfo = &v
}

// GetCassandraSecurityInfo returns the CassandraSecurityInfo field value if set, zero value otherwise.
func (o *CassandraConnectParams) GetCassandraSecurityInfo() CassandraSecurityInfo {
	if o == nil || o.CassandraSecurityInfo == nil {
		var ret CassandraSecurityInfo
		return ret
	}
	return *o.CassandraSecurityInfo
}

// GetCassandraSecurityInfoOk returns a tuple with the CassandraSecurityInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CassandraConnectParams) GetCassandraSecurityInfoOk() (*CassandraSecurityInfo, bool) {
	if o == nil || o.CassandraSecurityInfo == nil {
		return nil, false
	}
	return o.CassandraSecurityInfo, true
}

// HasCassandraSecurityInfo returns a boolean if a field has been set.
func (o *CassandraConnectParams) HasCassandraSecurityInfo() bool {
	if o != nil && o.CassandraSecurityInfo != nil {
		return true
	}

	return false
}

// SetCassandraSecurityInfo gets a reference to the given CassandraSecurityInfo and assigns it to the CassandraSecurityInfo field.
func (o *CassandraConnectParams) SetCassandraSecurityInfo(v CassandraSecurityInfo) {
	o.CassandraSecurityInfo = &v
}

// GetCassandraVersion returns the CassandraVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraConnectParams) GetCassandraVersion() string {
	if o == nil || o.CassandraVersion.Get() == nil {
		var ret string
		return ret
	}
	return *o.CassandraVersion.Get()
}

// GetCassandraVersionOk returns a tuple with the CassandraVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraConnectParams) GetCassandraVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CassandraVersion.Get(), o.CassandraVersion.IsSet()
}

// HasCassandraVersion returns a boolean if a field has been set.
func (o *CassandraConnectParams) HasCassandraVersion() bool {
	if o != nil && o.CassandraVersion.IsSet() {
		return true
	}

	return false
}

// SetCassandraVersion gets a reference to the given NullableString and assigns it to the CassandraVersion field.
func (o *CassandraConnectParams) SetCassandraVersion(v string) {
	o.CassandraVersion.Set(&v)
}
// SetCassandraVersionNil sets the value for CassandraVersion to be an explicit nil
func (o *CassandraConnectParams) SetCassandraVersionNil() {
	o.CassandraVersion.Set(nil)
}

// UnsetCassandraVersion ensures that no value is present for CassandraVersion, not even an explicit nil
func (o *CassandraConnectParams) UnsetCassandraVersion() {
	o.CassandraVersion.Unset()
}

// GetConfigDirectory returns the ConfigDirectory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraConnectParams) GetConfigDirectory() string {
	if o == nil || o.ConfigDirectory.Get() == nil {
		var ret string
		return ret
	}
	return *o.ConfigDirectory.Get()
}

// GetConfigDirectoryOk returns a tuple with the ConfigDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraConnectParams) GetConfigDirectoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ConfigDirectory.Get(), o.ConfigDirectory.IsSet()
}

// HasConfigDirectory returns a boolean if a field has been set.
func (o *CassandraConnectParams) HasConfigDirectory() bool {
	if o != nil && o.ConfigDirectory.IsSet() {
		return true
	}

	return false
}

// SetConfigDirectory gets a reference to the given NullableString and assigns it to the ConfigDirectory field.
func (o *CassandraConnectParams) SetConfigDirectory(v string) {
	o.ConfigDirectory.Set(&v)
}
// SetConfigDirectoryNil sets the value for ConfigDirectory to be an explicit nil
func (o *CassandraConnectParams) SetConfigDirectoryNil() {
	o.ConfigDirectory.Set(nil)
}

// UnsetConfigDirectory ensures that no value is present for ConfigDirectory, not even an explicit nil
func (o *CassandraConnectParams) UnsetConfigDirectory() {
	o.ConfigDirectory.Unset()
}

// GetDataCenters returns the DataCenters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraConnectParams) GetDataCenters() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.DataCenters
}

// GetDataCentersOk returns a tuple with the DataCenters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraConnectParams) GetDataCentersOk() (*[]string, bool) {
	if o == nil || o.DataCenters == nil {
		return nil, false
	}
	return &o.DataCenters, true
}

// HasDataCenters returns a boolean if a field has been set.
func (o *CassandraConnectParams) HasDataCenters() bool {
	if o != nil && o.DataCenters != nil {
		return true
	}

	return false
}

// SetDataCenters gets a reference to the given []string and assigns it to the DataCenters field.
func (o *CassandraConnectParams) SetDataCenters(v []string) {
	o.DataCenters = v
}

// GetDseConfigDirectory returns the DseConfigDirectory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraConnectParams) GetDseConfigDirectory() string {
	if o == nil || o.DseConfigDirectory.Get() == nil {
		var ret string
		return ret
	}
	return *o.DseConfigDirectory.Get()
}

// GetDseConfigDirectoryOk returns a tuple with the DseConfigDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraConnectParams) GetDseConfigDirectoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DseConfigDirectory.Get(), o.DseConfigDirectory.IsSet()
}

// HasDseConfigDirectory returns a boolean if a field has been set.
func (o *CassandraConnectParams) HasDseConfigDirectory() bool {
	if o != nil && o.DseConfigDirectory.IsSet() {
		return true
	}

	return false
}

// SetDseConfigDirectory gets a reference to the given NullableString and assigns it to the DseConfigDirectory field.
func (o *CassandraConnectParams) SetDseConfigDirectory(v string) {
	o.DseConfigDirectory.Set(&v)
}
// SetDseConfigDirectoryNil sets the value for DseConfigDirectory to be an explicit nil
func (o *CassandraConnectParams) SetDseConfigDirectoryNil() {
	o.DseConfigDirectory.Set(nil)
}

// UnsetDseConfigDirectory ensures that no value is present for DseConfigDirectory, not even an explicit nil
func (o *CassandraConnectParams) UnsetDseConfigDirectory() {
	o.DseConfigDirectory.Unset()
}

// GetIsDseAuthenticator returns the IsDseAuthenticator field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraConnectParams) GetIsDseAuthenticator() bool {
	if o == nil || o.IsDseAuthenticator.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsDseAuthenticator.Get()
}

// GetIsDseAuthenticatorOk returns a tuple with the IsDseAuthenticator field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraConnectParams) GetIsDseAuthenticatorOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsDseAuthenticator.Get(), o.IsDseAuthenticator.IsSet()
}

// HasIsDseAuthenticator returns a boolean if a field has been set.
func (o *CassandraConnectParams) HasIsDseAuthenticator() bool {
	if o != nil && o.IsDseAuthenticator.IsSet() {
		return true
	}

	return false
}

// SetIsDseAuthenticator gets a reference to the given NullableBool and assigns it to the IsDseAuthenticator field.
func (o *CassandraConnectParams) SetIsDseAuthenticator(v bool) {
	o.IsDseAuthenticator.Set(&v)
}
// SetIsDseAuthenticatorNil sets the value for IsDseAuthenticator to be an explicit nil
func (o *CassandraConnectParams) SetIsDseAuthenticatorNil() {
	o.IsDseAuthenticator.Set(nil)
}

// UnsetIsDseAuthenticator ensures that no value is present for IsDseAuthenticator, not even an explicit nil
func (o *CassandraConnectParams) UnsetIsDseAuthenticator() {
	o.IsDseAuthenticator.Unset()
}

// GetIsDseTieredStorage returns the IsDseTieredStorage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraConnectParams) GetIsDseTieredStorage() bool {
	if o == nil || o.IsDseTieredStorage.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsDseTieredStorage.Get()
}

// GetIsDseTieredStorageOk returns a tuple with the IsDseTieredStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraConnectParams) GetIsDseTieredStorageOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsDseTieredStorage.Get(), o.IsDseTieredStorage.IsSet()
}

// HasIsDseTieredStorage returns a boolean if a field has been set.
func (o *CassandraConnectParams) HasIsDseTieredStorage() bool {
	if o != nil && o.IsDseTieredStorage.IsSet() {
		return true
	}

	return false
}

// SetIsDseTieredStorage gets a reference to the given NullableBool and assigns it to the IsDseTieredStorage field.
func (o *CassandraConnectParams) SetIsDseTieredStorage(v bool) {
	o.IsDseTieredStorage.Set(&v)
}
// SetIsDseTieredStorageNil sets the value for IsDseTieredStorage to be an explicit nil
func (o *CassandraConnectParams) SetIsDseTieredStorageNil() {
	o.IsDseTieredStorage.Set(nil)
}

// UnsetIsDseTieredStorage ensures that no value is present for IsDseTieredStorage, not even an explicit nil
func (o *CassandraConnectParams) UnsetIsDseTieredStorage() {
	o.IsDseTieredStorage.Unset()
}

// GetIsJmxAuthEnable returns the IsJmxAuthEnable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraConnectParams) GetIsJmxAuthEnable() bool {
	if o == nil || o.IsJmxAuthEnable.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsJmxAuthEnable.Get()
}

// GetIsJmxAuthEnableOk returns a tuple with the IsJmxAuthEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraConnectParams) GetIsJmxAuthEnableOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsJmxAuthEnable.Get(), o.IsJmxAuthEnable.IsSet()
}

// HasIsJmxAuthEnable returns a boolean if a field has been set.
func (o *CassandraConnectParams) HasIsJmxAuthEnable() bool {
	if o != nil && o.IsJmxAuthEnable.IsSet() {
		return true
	}

	return false
}

// SetIsJmxAuthEnable gets a reference to the given NullableBool and assigns it to the IsJmxAuthEnable field.
func (o *CassandraConnectParams) SetIsJmxAuthEnable(v bool) {
	o.IsJmxAuthEnable.Set(&v)
}
// SetIsJmxAuthEnableNil sets the value for IsJmxAuthEnable to be an explicit nil
func (o *CassandraConnectParams) SetIsJmxAuthEnableNil() {
	o.IsJmxAuthEnable.Set(nil)
}

// UnsetIsJmxAuthEnable ensures that no value is present for IsJmxAuthEnable, not even an explicit nil
func (o *CassandraConnectParams) UnsetIsJmxAuthEnable() {
	o.IsJmxAuthEnable.Unset()
}

// GetKerberosPrincipal returns the KerberosPrincipal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraConnectParams) GetKerberosPrincipal() string {
	if o == nil || o.KerberosPrincipal.Get() == nil {
		var ret string
		return ret
	}
	return *o.KerberosPrincipal.Get()
}

// GetKerberosPrincipalOk returns a tuple with the KerberosPrincipal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraConnectParams) GetKerberosPrincipalOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.KerberosPrincipal.Get(), o.KerberosPrincipal.IsSet()
}

// HasKerberosPrincipal returns a boolean if a field has been set.
func (o *CassandraConnectParams) HasKerberosPrincipal() bool {
	if o != nil && o.KerberosPrincipal.IsSet() {
		return true
	}

	return false
}

// SetKerberosPrincipal gets a reference to the given NullableString and assigns it to the KerberosPrincipal field.
func (o *CassandraConnectParams) SetKerberosPrincipal(v string) {
	o.KerberosPrincipal.Set(&v)
}
// SetKerberosPrincipalNil sets the value for KerberosPrincipal to be an explicit nil
func (o *CassandraConnectParams) SetKerberosPrincipalNil() {
	o.KerberosPrincipal.Set(nil)
}

// UnsetKerberosPrincipal ensures that no value is present for KerberosPrincipal, not even an explicit nil
func (o *CassandraConnectParams) UnsetKerberosPrincipal() {
	o.KerberosPrincipal.Unset()
}

// GetPrimaryHost returns the PrimaryHost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraConnectParams) GetPrimaryHost() string {
	if o == nil || o.PrimaryHost.Get() == nil {
		var ret string
		return ret
	}
	return *o.PrimaryHost.Get()
}

// GetPrimaryHostOk returns a tuple with the PrimaryHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraConnectParams) GetPrimaryHostOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PrimaryHost.Get(), o.PrimaryHost.IsSet()
}

// HasPrimaryHost returns a boolean if a field has been set.
func (o *CassandraConnectParams) HasPrimaryHost() bool {
	if o != nil && o.PrimaryHost.IsSet() {
		return true
	}

	return false
}

// SetPrimaryHost gets a reference to the given NullableString and assigns it to the PrimaryHost field.
func (o *CassandraConnectParams) SetPrimaryHost(v string) {
	o.PrimaryHost.Set(&v)
}
// SetPrimaryHostNil sets the value for PrimaryHost to be an explicit nil
func (o *CassandraConnectParams) SetPrimaryHostNil() {
	o.PrimaryHost.Set(nil)
}

// UnsetPrimaryHost ensures that no value is present for PrimaryHost, not even an explicit nil
func (o *CassandraConnectParams) UnsetPrimaryHost() {
	o.PrimaryHost.Unset()
}

// GetSeeds returns the Seeds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraConnectParams) GetSeeds() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Seeds
}

// GetSeedsOk returns a tuple with the Seeds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraConnectParams) GetSeedsOk() (*[]string, bool) {
	if o == nil || o.Seeds == nil {
		return nil, false
	}
	return &o.Seeds, true
}

// HasSeeds returns a boolean if a field has been set.
func (o *CassandraConnectParams) HasSeeds() bool {
	if o != nil && o.Seeds != nil {
		return true
	}

	return false
}

// SetSeeds gets a reference to the given []string and assigns it to the Seeds field.
func (o *CassandraConnectParams) SetSeeds(v []string) {
	o.Seeds = v
}

// GetSolrNodes returns the SolrNodes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraConnectParams) GetSolrNodes() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.SolrNodes
}

// GetSolrNodesOk returns a tuple with the SolrNodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraConnectParams) GetSolrNodesOk() (*[]string, bool) {
	if o == nil || o.SolrNodes == nil {
		return nil, false
	}
	return &o.SolrNodes, true
}

// HasSolrNodes returns a boolean if a field has been set.
func (o *CassandraConnectParams) HasSolrNodes() bool {
	if o != nil && o.SolrNodes != nil {
		return true
	}

	return false
}

// SetSolrNodes gets a reference to the given []string and assigns it to the SolrNodes field.
func (o *CassandraConnectParams) SetSolrNodes(v []string) {
	o.SolrNodes = v
}

// GetSolrPort returns the SolrPort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraConnectParams) GetSolrPort() int32 {
	if o == nil || o.SolrPort.Get() == nil {
		var ret int32
		return ret
	}
	return *o.SolrPort.Get()
}

// GetSolrPortOk returns a tuple with the SolrPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraConnectParams) GetSolrPortOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SolrPort.Get(), o.SolrPort.IsSet()
}

// HasSolrPort returns a boolean if a field has been set.
func (o *CassandraConnectParams) HasSolrPort() bool {
	if o != nil && o.SolrPort.IsSet() {
		return true
	}

	return false
}

// SetSolrPort gets a reference to the given NullableInt32 and assigns it to the SolrPort field.
func (o *CassandraConnectParams) SetSolrPort(v int32) {
	o.SolrPort.Set(&v)
}
// SetSolrPortNil sets the value for SolrPort to be an explicit nil
func (o *CassandraConnectParams) SetSolrPortNil() {
	o.SolrPort.Set(nil)
}

// UnsetSolrPort ensures that no value is present for SolrPort, not even an explicit nil
func (o *CassandraConnectParams) UnsetSolrPort() {
	o.SolrPort.Unset()
}

func (o CassandraConnectParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CassandraPortsInfo != nil {
		toSerialize["cassandraPortsInfo"] = o.CassandraPortsInfo
	}
	if o.CassandraSecurityInfo != nil {
		toSerialize["cassandraSecurityInfo"] = o.CassandraSecurityInfo
	}
	if o.CassandraVersion.IsSet() {
		toSerialize["cassandraVersion"] = o.CassandraVersion.Get()
	}
	if o.ConfigDirectory.IsSet() {
		toSerialize["configDirectory"] = o.ConfigDirectory.Get()
	}
	if o.DataCenters != nil {
		toSerialize["dataCenters"] = o.DataCenters
	}
	if o.DseConfigDirectory.IsSet() {
		toSerialize["dseConfigDirectory"] = o.DseConfigDirectory.Get()
	}
	if o.IsDseAuthenticator.IsSet() {
		toSerialize["isDseAuthenticator"] = o.IsDseAuthenticator.Get()
	}
	if o.IsDseTieredStorage.IsSet() {
		toSerialize["isDseTieredStorage"] = o.IsDseTieredStorage.Get()
	}
	if o.IsJmxAuthEnable.IsSet() {
		toSerialize["isJmxAuthEnable"] = o.IsJmxAuthEnable.Get()
	}
	if o.KerberosPrincipal.IsSet() {
		toSerialize["kerberosPrincipal"] = o.KerberosPrincipal.Get()
	}
	if o.PrimaryHost.IsSet() {
		toSerialize["primaryHost"] = o.PrimaryHost.Get()
	}
	if o.Seeds != nil {
		toSerialize["seeds"] = o.Seeds
	}
	if o.SolrNodes != nil {
		toSerialize["solrNodes"] = o.SolrNodes
	}
	if o.SolrPort.IsSet() {
		toSerialize["solrPort"] = o.SolrPort.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCassandraConnectParams struct {
	value *CassandraConnectParams
	isSet bool
}

func (v NullableCassandraConnectParams) Get() *CassandraConnectParams {
	return v.value
}

func (v *NullableCassandraConnectParams) Set(val *CassandraConnectParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCassandraConnectParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCassandraConnectParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCassandraConnectParams(val *CassandraConnectParams) *NullableCassandraConnectParams {
	return &NullableCassandraConnectParams{value: val, isSet: true}
}

func (v NullableCassandraConnectParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCassandraConnectParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


