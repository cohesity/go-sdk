/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// OracleDatabaseNode Oracle Database Node.  Specifies database node required for the backup and restore.
type OracleDatabaseNode struct {
	// Specifies the number of channels user wants for the backup/recovery of this node.
	ChannelCount NullableInt32 `json:"channelCount,omitempty"`
	// Specifies the ip of the database node.
	Node NullableString `json:"node,omitempty"`
	// Specifies the port on which user wants to run the backup/recovery.
	Port NullableInt64 `json:"port,omitempty"`
	SbtHostParams *OracleSbtHostParams `json:"sbtHostParams,omitempty"`
}

// NewOracleDatabaseNode instantiates a new OracleDatabaseNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleDatabaseNode() *OracleDatabaseNode {
	this := OracleDatabaseNode{}
	return &this
}

// NewOracleDatabaseNodeWithDefaults instantiates a new OracleDatabaseNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleDatabaseNodeWithDefaults() *OracleDatabaseNode {
	this := OracleDatabaseNode{}
	return &this
}

// GetChannelCount returns the ChannelCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDatabaseNode) GetChannelCount() int32 {
	if o == nil || o.ChannelCount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.ChannelCount.Get()
}

// GetChannelCountOk returns a tuple with the ChannelCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDatabaseNode) GetChannelCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ChannelCount.Get(), o.ChannelCount.IsSet()
}

// HasChannelCount returns a boolean if a field has been set.
func (o *OracleDatabaseNode) HasChannelCount() bool {
	if o != nil && o.ChannelCount.IsSet() {
		return true
	}

	return false
}

// SetChannelCount gets a reference to the given NullableInt32 and assigns it to the ChannelCount field.
func (o *OracleDatabaseNode) SetChannelCount(v int32) {
	o.ChannelCount.Set(&v)
}
// SetChannelCountNil sets the value for ChannelCount to be an explicit nil
func (o *OracleDatabaseNode) SetChannelCountNil() {
	o.ChannelCount.Set(nil)
}

// UnsetChannelCount ensures that no value is present for ChannelCount, not even an explicit nil
func (o *OracleDatabaseNode) UnsetChannelCount() {
	o.ChannelCount.Unset()
}

// GetNode returns the Node field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDatabaseNode) GetNode() string {
	if o == nil || o.Node.Get() == nil {
		var ret string
		return ret
	}
	return *o.Node.Get()
}

// GetNodeOk returns a tuple with the Node field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDatabaseNode) GetNodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Node.Get(), o.Node.IsSet()
}

// HasNode returns a boolean if a field has been set.
func (o *OracleDatabaseNode) HasNode() bool {
	if o != nil && o.Node.IsSet() {
		return true
	}

	return false
}

// SetNode gets a reference to the given NullableString and assigns it to the Node field.
func (o *OracleDatabaseNode) SetNode(v string) {
	o.Node.Set(&v)
}
// SetNodeNil sets the value for Node to be an explicit nil
func (o *OracleDatabaseNode) SetNodeNil() {
	o.Node.Set(nil)
}

// UnsetNode ensures that no value is present for Node, not even an explicit nil
func (o *OracleDatabaseNode) UnsetNode() {
	o.Node.Unset()
}

// GetPort returns the Port field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDatabaseNode) GetPort() int64 {
	if o == nil || o.Port.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Port.Get()
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDatabaseNode) GetPortOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Port.Get(), o.Port.IsSet()
}

// HasPort returns a boolean if a field has been set.
func (o *OracleDatabaseNode) HasPort() bool {
	if o != nil && o.Port.IsSet() {
		return true
	}

	return false
}

// SetPort gets a reference to the given NullableInt64 and assigns it to the Port field.
func (o *OracleDatabaseNode) SetPort(v int64) {
	o.Port.Set(&v)
}
// SetPortNil sets the value for Port to be an explicit nil
func (o *OracleDatabaseNode) SetPortNil() {
	o.Port.Set(nil)
}

// UnsetPort ensures that no value is present for Port, not even an explicit nil
func (o *OracleDatabaseNode) UnsetPort() {
	o.Port.Unset()
}

// GetSbtHostParams returns the SbtHostParams field value if set, zero value otherwise.
func (o *OracleDatabaseNode) GetSbtHostParams() OracleSbtHostParams {
	if o == nil || o.SbtHostParams == nil {
		var ret OracleSbtHostParams
		return ret
	}
	return *o.SbtHostParams
}

// GetSbtHostParamsOk returns a tuple with the SbtHostParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDatabaseNode) GetSbtHostParamsOk() (*OracleSbtHostParams, bool) {
	if o == nil || o.SbtHostParams == nil {
		return nil, false
	}
	return o.SbtHostParams, true
}

// HasSbtHostParams returns a boolean if a field has been set.
func (o *OracleDatabaseNode) HasSbtHostParams() bool {
	if o != nil && o.SbtHostParams != nil {
		return true
	}

	return false
}

// SetSbtHostParams gets a reference to the given OracleSbtHostParams and assigns it to the SbtHostParams field.
func (o *OracleDatabaseNode) SetSbtHostParams(v OracleSbtHostParams) {
	o.SbtHostParams = &v
}

func (o OracleDatabaseNode) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ChannelCount.IsSet() {
		toSerialize["channelCount"] = o.ChannelCount.Get()
	}
	if o.Node.IsSet() {
		toSerialize["node"] = o.Node.Get()
	}
	if o.Port.IsSet() {
		toSerialize["port"] = o.Port.Get()
	}
	if o.SbtHostParams != nil {
		toSerialize["sbtHostParams"] = o.SbtHostParams
	}
	return json.Marshal(toSerialize)
}

type NullableOracleDatabaseNode struct {
	value *OracleDatabaseNode
	isSet bool
}

func (v NullableOracleDatabaseNode) Get() *OracleDatabaseNode {
	return v.value
}

func (v *NullableOracleDatabaseNode) Set(val *OracleDatabaseNode) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleDatabaseNode) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleDatabaseNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleDatabaseNode(val *OracleDatabaseNode) *NullableOracleDatabaseNode {
	return &NullableOracleDatabaseNode{value: val, isSet: true}
}

func (v NullableOracleDatabaseNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleDatabaseNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


