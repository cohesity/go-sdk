/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// VmVolumesInformation Specifies information about a logical volume found a VM.
type VmVolumesInformation struct {
	// Array of Filesystem Volumes.  Specifies information about the filesystem volumes found in a logical volume.
	FilesystemVolumes []FilesystemVolume `json:"filesystemVolumes,omitempty"`
}

// NewVmVolumesInformation instantiates a new VmVolumesInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmVolumesInformation() *VmVolumesInformation {
	this := VmVolumesInformation{}
	return &this
}

// NewVmVolumesInformationWithDefaults instantiates a new VmVolumesInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmVolumesInformationWithDefaults() *VmVolumesInformation {
	this := VmVolumesInformation{}
	return &this
}

// GetFilesystemVolumes returns the FilesystemVolumes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmVolumesInformation) GetFilesystemVolumes() []FilesystemVolume {
	if o == nil  {
		var ret []FilesystemVolume
		return ret
	}
	return o.FilesystemVolumes
}

// GetFilesystemVolumesOk returns a tuple with the FilesystemVolumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmVolumesInformation) GetFilesystemVolumesOk() (*[]FilesystemVolume, bool) {
	if o == nil || o.FilesystemVolumes == nil {
		return nil, false
	}
	return &o.FilesystemVolumes, true
}

// HasFilesystemVolumes returns a boolean if a field has been set.
func (o *VmVolumesInformation) HasFilesystemVolumes() bool {
	if o != nil && o.FilesystemVolumes != nil {
		return true
	}

	return false
}

// SetFilesystemVolumes gets a reference to the given []FilesystemVolume and assigns it to the FilesystemVolumes field.
func (o *VmVolumesInformation) SetFilesystemVolumes(v []FilesystemVolume) {
	o.FilesystemVolumes = v
}

func (o VmVolumesInformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FilesystemVolumes != nil {
		toSerialize["filesystemVolumes"] = o.FilesystemVolumes
	}
	return json.Marshal(toSerialize)
}

type NullableVmVolumesInformation struct {
	value *VmVolumesInformation
	isSet bool
}

func (v NullableVmVolumesInformation) Get() *VmVolumesInformation {
	return v.value
}

func (v *NullableVmVolumesInformation) Set(val *VmVolumesInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableVmVolumesInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableVmVolumesInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmVolumesInformation(val *VmVolumesInformation) *NullableVmVolumesInformation {
	return &NullableVmVolumesInformation{value: val, isSet: true}
}

func (v NullableVmVolumesInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmVolumesInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


