/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// UserQuotaAndUsage Specifies the quota override and usage statistics for a particular user.
type UserQuotaAndUsage struct {
	QuotaPolicy *QuotaPolicy `json:"quotaPolicy,omitempty"`
	// If interested in a user via smb_client, include SID. Otherwise, If a valid unix-id to SID mappings are available (i.e., when mixed mode is enabled) the server will perform the necessary id mapping and return the correct usage irrespective of whether the unix id / SID is provided. The string is of following format - S-1-IdentifierAuthority-SubAuthority1-SubAuthority2-...-SubAuthorityn.
	Sid NullableString `json:"sid,omitempty"`
	// If interested in a user via unix-identifier, include UnixUid. Otherwise, If a valid unix-id to SID mappings are available (i.e., when mixed mode is enabled) the server will perform the necessary id mapping and return the correct usage irrespective of whether the unix id / SID is provided.
	UnixUid NullableInt32 `json:"unixUid,omitempty"`
	// Current logical usage of user id in the input view.
	UsageBytes NullableInt64 `json:"usageBytes,omitempty"`
}

// NewUserQuotaAndUsage instantiates a new UserQuotaAndUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserQuotaAndUsage() *UserQuotaAndUsage {
	this := UserQuotaAndUsage{}
	return &this
}

// NewUserQuotaAndUsageWithDefaults instantiates a new UserQuotaAndUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserQuotaAndUsageWithDefaults() *UserQuotaAndUsage {
	this := UserQuotaAndUsage{}
	return &this
}

// GetQuotaPolicy returns the QuotaPolicy field value if set, zero value otherwise.
func (o *UserQuotaAndUsage) GetQuotaPolicy() QuotaPolicy {
	if o == nil || o.QuotaPolicy == nil {
		var ret QuotaPolicy
		return ret
	}
	return *o.QuotaPolicy
}

// GetQuotaPolicyOk returns a tuple with the QuotaPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserQuotaAndUsage) GetQuotaPolicyOk() (*QuotaPolicy, bool) {
	if o == nil || o.QuotaPolicy == nil {
		return nil, false
	}
	return o.QuotaPolicy, true
}

// HasQuotaPolicy returns a boolean if a field has been set.
func (o *UserQuotaAndUsage) HasQuotaPolicy() bool {
	if o != nil && o.QuotaPolicy != nil {
		return true
	}

	return false
}

// SetQuotaPolicy gets a reference to the given QuotaPolicy and assigns it to the QuotaPolicy field.
func (o *UserQuotaAndUsage) SetQuotaPolicy(v QuotaPolicy) {
	o.QuotaPolicy = &v
}

// GetSid returns the Sid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserQuotaAndUsage) GetSid() string {
	if o == nil || o.Sid.Get() == nil {
		var ret string
		return ret
	}
	return *o.Sid.Get()
}

// GetSidOk returns a tuple with the Sid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserQuotaAndUsage) GetSidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Sid.Get(), o.Sid.IsSet()
}

// HasSid returns a boolean if a field has been set.
func (o *UserQuotaAndUsage) HasSid() bool {
	if o != nil && o.Sid.IsSet() {
		return true
	}

	return false
}

// SetSid gets a reference to the given NullableString and assigns it to the Sid field.
func (o *UserQuotaAndUsage) SetSid(v string) {
	o.Sid.Set(&v)
}
// SetSidNil sets the value for Sid to be an explicit nil
func (o *UserQuotaAndUsage) SetSidNil() {
	o.Sid.Set(nil)
}

// UnsetSid ensures that no value is present for Sid, not even an explicit nil
func (o *UserQuotaAndUsage) UnsetSid() {
	o.Sid.Unset()
}

// GetUnixUid returns the UnixUid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserQuotaAndUsage) GetUnixUid() int32 {
	if o == nil || o.UnixUid.Get() == nil {
		var ret int32
		return ret
	}
	return *o.UnixUid.Get()
}

// GetUnixUidOk returns a tuple with the UnixUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserQuotaAndUsage) GetUnixUidOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UnixUid.Get(), o.UnixUid.IsSet()
}

// HasUnixUid returns a boolean if a field has been set.
func (o *UserQuotaAndUsage) HasUnixUid() bool {
	if o != nil && o.UnixUid.IsSet() {
		return true
	}

	return false
}

// SetUnixUid gets a reference to the given NullableInt32 and assigns it to the UnixUid field.
func (o *UserQuotaAndUsage) SetUnixUid(v int32) {
	o.UnixUid.Set(&v)
}
// SetUnixUidNil sets the value for UnixUid to be an explicit nil
func (o *UserQuotaAndUsage) SetUnixUidNil() {
	o.UnixUid.Set(nil)
}

// UnsetUnixUid ensures that no value is present for UnixUid, not even an explicit nil
func (o *UserQuotaAndUsage) UnsetUnixUid() {
	o.UnixUid.Unset()
}

// GetUsageBytes returns the UsageBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserQuotaAndUsage) GetUsageBytes() int64 {
	if o == nil || o.UsageBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.UsageBytes.Get()
}

// GetUsageBytesOk returns a tuple with the UsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserQuotaAndUsage) GetUsageBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UsageBytes.Get(), o.UsageBytes.IsSet()
}

// HasUsageBytes returns a boolean if a field has been set.
func (o *UserQuotaAndUsage) HasUsageBytes() bool {
	if o != nil && o.UsageBytes.IsSet() {
		return true
	}

	return false
}

// SetUsageBytes gets a reference to the given NullableInt64 and assigns it to the UsageBytes field.
func (o *UserQuotaAndUsage) SetUsageBytes(v int64) {
	o.UsageBytes.Set(&v)
}
// SetUsageBytesNil sets the value for UsageBytes to be an explicit nil
func (o *UserQuotaAndUsage) SetUsageBytesNil() {
	o.UsageBytes.Set(nil)
}

// UnsetUsageBytes ensures that no value is present for UsageBytes, not even an explicit nil
func (o *UserQuotaAndUsage) UnsetUsageBytes() {
	o.UsageBytes.Unset()
}

func (o UserQuotaAndUsage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.QuotaPolicy != nil {
		toSerialize["quotaPolicy"] = o.QuotaPolicy
	}
	if o.Sid.IsSet() {
		toSerialize["sid"] = o.Sid.Get()
	}
	if o.UnixUid.IsSet() {
		toSerialize["unixUid"] = o.UnixUid.Get()
	}
	if o.UsageBytes.IsSet() {
		toSerialize["usageBytes"] = o.UsageBytes.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUserQuotaAndUsage struct {
	value *UserQuotaAndUsage
	isSet bool
}

func (v NullableUserQuotaAndUsage) Get() *UserQuotaAndUsage {
	return v.value
}

func (v *NullableUserQuotaAndUsage) Set(val *UserQuotaAndUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableUserQuotaAndUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableUserQuotaAndUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserQuotaAndUsage(val *UserQuotaAndUsage) *NullableUserQuotaAndUsage {
	return &NullableUserQuotaAndUsage{value: val, isSet: true}
}

func (v NullableUserQuotaAndUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserQuotaAndUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


