/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// LatencyThresholds Specifies latency thresholds that trigger throttling for all datastores found in the registered Protection Source or specific to one datastore.
type LatencyThresholds struct {
	// If the latency of a datastore is above this value, existing backup tasks using the datastore are throttled.
	ActiveTaskMsecs NullableInt64 `json:"activeTaskMsecs,omitempty"`
	// If the latency of a datastore is above this value, then new backup tasks using the datastore will not be started.
	NewTaskMsecs NullableInt64 `json:"newTaskMsecs,omitempty"`
}

// NewLatencyThresholds instantiates a new LatencyThresholds object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLatencyThresholds() *LatencyThresholds {
	this := LatencyThresholds{}
	return &this
}

// NewLatencyThresholdsWithDefaults instantiates a new LatencyThresholds object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLatencyThresholdsWithDefaults() *LatencyThresholds {
	this := LatencyThresholds{}
	return &this
}

// GetActiveTaskMsecs returns the ActiveTaskMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LatencyThresholds) GetActiveTaskMsecs() int64 {
	if o == nil || o.ActiveTaskMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ActiveTaskMsecs.Get()
}

// GetActiveTaskMsecsOk returns a tuple with the ActiveTaskMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LatencyThresholds) GetActiveTaskMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ActiveTaskMsecs.Get(), o.ActiveTaskMsecs.IsSet()
}

// HasActiveTaskMsecs returns a boolean if a field has been set.
func (o *LatencyThresholds) HasActiveTaskMsecs() bool {
	if o != nil && o.ActiveTaskMsecs.IsSet() {
		return true
	}

	return false
}

// SetActiveTaskMsecs gets a reference to the given NullableInt64 and assigns it to the ActiveTaskMsecs field.
func (o *LatencyThresholds) SetActiveTaskMsecs(v int64) {
	o.ActiveTaskMsecs.Set(&v)
}
// SetActiveTaskMsecsNil sets the value for ActiveTaskMsecs to be an explicit nil
func (o *LatencyThresholds) SetActiveTaskMsecsNil() {
	o.ActiveTaskMsecs.Set(nil)
}

// UnsetActiveTaskMsecs ensures that no value is present for ActiveTaskMsecs, not even an explicit nil
func (o *LatencyThresholds) UnsetActiveTaskMsecs() {
	o.ActiveTaskMsecs.Unset()
}

// GetNewTaskMsecs returns the NewTaskMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LatencyThresholds) GetNewTaskMsecs() int64 {
	if o == nil || o.NewTaskMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NewTaskMsecs.Get()
}

// GetNewTaskMsecsOk returns a tuple with the NewTaskMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LatencyThresholds) GetNewTaskMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NewTaskMsecs.Get(), o.NewTaskMsecs.IsSet()
}

// HasNewTaskMsecs returns a boolean if a field has been set.
func (o *LatencyThresholds) HasNewTaskMsecs() bool {
	if o != nil && o.NewTaskMsecs.IsSet() {
		return true
	}

	return false
}

// SetNewTaskMsecs gets a reference to the given NullableInt64 and assigns it to the NewTaskMsecs field.
func (o *LatencyThresholds) SetNewTaskMsecs(v int64) {
	o.NewTaskMsecs.Set(&v)
}
// SetNewTaskMsecsNil sets the value for NewTaskMsecs to be an explicit nil
func (o *LatencyThresholds) SetNewTaskMsecsNil() {
	o.NewTaskMsecs.Set(nil)
}

// UnsetNewTaskMsecs ensures that no value is present for NewTaskMsecs, not even an explicit nil
func (o *LatencyThresholds) UnsetNewTaskMsecs() {
	o.NewTaskMsecs.Unset()
}

func (o LatencyThresholds) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ActiveTaskMsecs.IsSet() {
		toSerialize["activeTaskMsecs"] = o.ActiveTaskMsecs.Get()
	}
	if o.NewTaskMsecs.IsSet() {
		toSerialize["newTaskMsecs"] = o.NewTaskMsecs.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableLatencyThresholds struct {
	value *LatencyThresholds
	isSet bool
}

func (v NullableLatencyThresholds) Get() *LatencyThresholds {
	return v.value
}

func (v *NullableLatencyThresholds) Set(val *LatencyThresholds) {
	v.value = val
	v.isSet = true
}

func (v NullableLatencyThresholds) IsSet() bool {
	return v.isSet
}

func (v *NullableLatencyThresholds) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLatencyThresholds(val *LatencyThresholds) *NullableLatencyThresholds {
	return &NullableLatencyThresholds{value: val, isSet: true}
}

func (v NullableLatencyThresholds) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLatencyThresholds) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


