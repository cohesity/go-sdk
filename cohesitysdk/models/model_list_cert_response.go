/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ListCertResponse Specifies list of all certificates deployed from the cluster.
type ListCertResponse struct {
	CertificateList []CertificateDetails `json:"certificateList,omitempty"`
}

// NewListCertResponse instantiates a new ListCertResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListCertResponse() *ListCertResponse {
	this := ListCertResponse{}
	return &this
}

// NewListCertResponseWithDefaults instantiates a new ListCertResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListCertResponseWithDefaults() *ListCertResponse {
	this := ListCertResponse{}
	return &this
}

// GetCertificateList returns the CertificateList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ListCertResponse) GetCertificateList() []CertificateDetails {
	if o == nil  {
		var ret []CertificateDetails
		return ret
	}
	return o.CertificateList
}

// GetCertificateListOk returns a tuple with the CertificateList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListCertResponse) GetCertificateListOk() (*[]CertificateDetails, bool) {
	if o == nil || o.CertificateList == nil {
		return nil, false
	}
	return &o.CertificateList, true
}

// HasCertificateList returns a boolean if a field has been set.
func (o *ListCertResponse) HasCertificateList() bool {
	if o != nil && o.CertificateList != nil {
		return true
	}

	return false
}

// SetCertificateList gets a reference to the given []CertificateDetails and assigns it to the CertificateList field.
func (o *ListCertResponse) SetCertificateList(v []CertificateDetails) {
	o.CertificateList = v
}

func (o ListCertResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CertificateList != nil {
		toSerialize["certificateList"] = o.CertificateList
	}
	return json.Marshal(toSerialize)
}

type NullableListCertResponse struct {
	value *ListCertResponse
	isSet bool
}

func (v NullableListCertResponse) Get() *ListCertResponse {
	return v.value
}

func (v *NullableListCertResponse) Set(val *ListCertResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListCertResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListCertResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListCertResponse(val *ListCertResponse) *NullableListCertResponse {
	return &NullableListCertResponse{value: val, isSet: true}
}

func (v NullableListCertResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListCertResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


