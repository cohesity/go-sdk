/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// UpdateSourcesForPrincipalsParams Set Access Permissions for Principals. Specifies a list of principals to set access permissions for. For each principal, set the Protection Sources and View names that the specified principal has permissions to access.
type UpdateSourcesForPrincipalsParams struct {
	// Array of Principals, Sources and Views.  Specifies a list of principals. For each principal, specify the Protection Sources and Views that the principal has permissions to access.
	SourcesForPrincipals []SourceForPrincipalParam `json:"sourcesForPrincipals,omitempty"`
}

// NewUpdateSourcesForPrincipalsParams instantiates a new UpdateSourcesForPrincipalsParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateSourcesForPrincipalsParams() *UpdateSourcesForPrincipalsParams {
	this := UpdateSourcesForPrincipalsParams{}
	return &this
}

// NewUpdateSourcesForPrincipalsParamsWithDefaults instantiates a new UpdateSourcesForPrincipalsParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateSourcesForPrincipalsParamsWithDefaults() *UpdateSourcesForPrincipalsParams {
	this := UpdateSourcesForPrincipalsParams{}
	return &this
}

// GetSourcesForPrincipals returns the SourcesForPrincipals field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateSourcesForPrincipalsParams) GetSourcesForPrincipals() []SourceForPrincipalParam {
	if o == nil  {
		var ret []SourceForPrincipalParam
		return ret
	}
	return o.SourcesForPrincipals
}

// GetSourcesForPrincipalsOk returns a tuple with the SourcesForPrincipals field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateSourcesForPrincipalsParams) GetSourcesForPrincipalsOk() (*[]SourceForPrincipalParam, bool) {
	if o == nil || o.SourcesForPrincipals == nil {
		return nil, false
	}
	return &o.SourcesForPrincipals, true
}

// HasSourcesForPrincipals returns a boolean if a field has been set.
func (o *UpdateSourcesForPrincipalsParams) HasSourcesForPrincipals() bool {
	if o != nil && o.SourcesForPrincipals != nil {
		return true
	}

	return false
}

// SetSourcesForPrincipals gets a reference to the given []SourceForPrincipalParam and assigns it to the SourcesForPrincipals field.
func (o *UpdateSourcesForPrincipalsParams) SetSourcesForPrincipals(v []SourceForPrincipalParam) {
	o.SourcesForPrincipals = v
}

func (o UpdateSourcesForPrincipalsParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SourcesForPrincipals != nil {
		toSerialize["sourcesForPrincipals"] = o.SourcesForPrincipals
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateSourcesForPrincipalsParams struct {
	value *UpdateSourcesForPrincipalsParams
	isSet bool
}

func (v NullableUpdateSourcesForPrincipalsParams) Get() *UpdateSourcesForPrincipalsParams {
	return v.value
}

func (v *NullableUpdateSourcesForPrincipalsParams) Set(val *UpdateSourcesForPrincipalsParams) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateSourcesForPrincipalsParams) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateSourcesForPrincipalsParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateSourcesForPrincipalsParams(val *UpdateSourcesForPrincipalsParams) *NullableUpdateSourcesForPrincipalsParams {
	return &NullableUpdateSourcesForPrincipalsParams{value: val, isSet: true}
}

func (v NullableUpdateSourcesForPrincipalsParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateSourcesForPrincipalsParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


