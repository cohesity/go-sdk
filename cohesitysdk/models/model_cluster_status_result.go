/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ClusterStatusResult Specifies the result of getting the status of a Cluster.
type ClusterStatusResult struct {
	// Specifies the ID of the Cluster.
	ClusterId NullableInt64 `json:"clusterId,omitempty"`
	// Specifies the incarnation ID of the Cluster.
	ClusterIncarnationId NullableInt64 `json:"clusterIncarnationId,omitempty"`
	// Specifies the current operation being run on the Cluster. 'kNone' indicates that there is no current operation taking place. 'kDestroy' indicates that the Cluster is currently being destroyed. 'kUpgrade' indicates that the Cluster is currently being upgraded. 'kClean' indicates that the Cluster is being cleaned. 'kRemoveNode' indicates that a Node is being removed from the Cluster. 'kRestartServices' indicates that the services on the Cluster are currently being restarted.
	CurrentOperation NullableString `json:"currentOperation,omitempty"`
	// Specifies an optional message describing details of the Cluster status.
	Message NullableString `json:"message,omitempty"`
	// Specifies the name of the Cluster.
	Name NullableString `json:"name,omitempty"`
	// Specifies the status of each Node on the Cluster.
	NodeStatuses []NodeStatusResult `json:"nodeStatuses,omitempty"`
	// Specifies the current healing state of the Cluster. 'kNoRemoval' indicates that there are no removal operations currently happening on the Cluster. 'kNodeRemoval' indicates that there is a Node being removed from the Cluster. 'kDiskRemoval' indicates that there is a Disk being removed from the Cluster. 'kNodeAndDiskRemoval' indicates that there is a Node and a Disk being removed from the Cluster.
	RemovalState NullableString `json:"removalState,omitempty"`
	// Specifies whether or not the services are synced with the list of stopped services.
	ServicesSynced NullableBool `json:"servicesSynced,omitempty"`
	// Specifies the software version of the Cluster.
	SoftwareVersion NullableString `json:"softwareVersion,omitempty"`
	// Specifies the list of stopped services on the Cluster. 'kApollo' is a service for reclaiming freed disk sectors on Nodes in the SnapFS distributed file system. 'kBridge' is a service for managing the SnapFS distributed file system. 'kGenie' is a service that is responsible for monitoring hardware health on the Cluster. 'kGenieGofer' is a service that links the Genie service to other services on the Cluster. 'kMagneto' is the data protection service of the Cohesity Data Platform. 'kIris' is the service which serves REST API calls to the UI, CLI, and any scripts written by customers. 'kIrisProxy' is a service that links the Iris service to other services on the Cluster. 'kScribe' is the service responsible for storing filesystem metadata. 'kStats' is the service that is responsible for retrieving and aggregating disk metrics across the Cluster. 'kYoda' is an elastic search indexing service. 'kAlerts' is a publisher and subscribing service for alerts. 'kKeychain' is a service for managing disk encryption keys. 'kLogWatcher' is a service that scans the log directory and reduces the number of logs if required. 'kStatsCollector' is a service that periodically logs system stats. 'kGandalf' is a distributed lock service and coordination manager. 'kNexus' indicates the Nexus service. This is the service that is responsible for creation of Clusters and configuration of Nodes and networking. 'kNexusProxy' is a service that links the Nexus service to other services on the Cluster. 'kStorageProxy' is a service for accessing data on external entities. 'kTricorder' is a diagnostic health testing service for Clusters. 'kRtClient' is a reverse tunneling client service. 'kVaultProxy' is a service for managing external targets that Clusters can be backed up to. 'kSmbProxy' is an SMB protocol service. 'kBridgeProxy' is the service that links the Bridge service to other services on the Cluster. 'kLibrarian' is an elastic search indexing service. 'kGroot' is a service for managing replication of SQL databases across multiple nodes in a Cluster. 'kEagleAgent' is a service that is responsible for retrieving information on Cluster health. 'kAthena' is a service for running distributed containerized applications on the Cohesity Data Platform. 'kBifrostBroker' is a service for communicating with the Cohesity proxies for multitenancy. 'kSmb2Proxy' is a new SMB protocol service. 'kOs' can be specified in order to do a full reboot. 'kAtom' is a service for receiving data for the Continuous Data Protection.
	StoppedServices []string `json:"stoppedServices,omitempty"`
}

// NewClusterStatusResult instantiates a new ClusterStatusResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterStatusResult() *ClusterStatusResult {
	this := ClusterStatusResult{}
	return &this
}

// NewClusterStatusResultWithDefaults instantiates a new ClusterStatusResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterStatusResultWithDefaults() *ClusterStatusResult {
	this := ClusterStatusResult{}
	return &this
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterStatusResult) GetClusterId() int64 {
	if o == nil || o.ClusterId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ClusterId.Get()
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterStatusResult) GetClusterIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterId.Get(), o.ClusterId.IsSet()
}

// HasClusterId returns a boolean if a field has been set.
func (o *ClusterStatusResult) HasClusterId() bool {
	if o != nil && o.ClusterId.IsSet() {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given NullableInt64 and assigns it to the ClusterId field.
func (o *ClusterStatusResult) SetClusterId(v int64) {
	o.ClusterId.Set(&v)
}
// SetClusterIdNil sets the value for ClusterId to be an explicit nil
func (o *ClusterStatusResult) SetClusterIdNil() {
	o.ClusterId.Set(nil)
}

// UnsetClusterId ensures that no value is present for ClusterId, not even an explicit nil
func (o *ClusterStatusResult) UnsetClusterId() {
	o.ClusterId.Unset()
}

// GetClusterIncarnationId returns the ClusterIncarnationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterStatusResult) GetClusterIncarnationId() int64 {
	if o == nil || o.ClusterIncarnationId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ClusterIncarnationId.Get()
}

// GetClusterIncarnationIdOk returns a tuple with the ClusterIncarnationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterStatusResult) GetClusterIncarnationIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterIncarnationId.Get(), o.ClusterIncarnationId.IsSet()
}

// HasClusterIncarnationId returns a boolean if a field has been set.
func (o *ClusterStatusResult) HasClusterIncarnationId() bool {
	if o != nil && o.ClusterIncarnationId.IsSet() {
		return true
	}

	return false
}

// SetClusterIncarnationId gets a reference to the given NullableInt64 and assigns it to the ClusterIncarnationId field.
func (o *ClusterStatusResult) SetClusterIncarnationId(v int64) {
	o.ClusterIncarnationId.Set(&v)
}
// SetClusterIncarnationIdNil sets the value for ClusterIncarnationId to be an explicit nil
func (o *ClusterStatusResult) SetClusterIncarnationIdNil() {
	o.ClusterIncarnationId.Set(nil)
}

// UnsetClusterIncarnationId ensures that no value is present for ClusterIncarnationId, not even an explicit nil
func (o *ClusterStatusResult) UnsetClusterIncarnationId() {
	o.ClusterIncarnationId.Unset()
}

// GetCurrentOperation returns the CurrentOperation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterStatusResult) GetCurrentOperation() string {
	if o == nil || o.CurrentOperation.Get() == nil {
		var ret string
		return ret
	}
	return *o.CurrentOperation.Get()
}

// GetCurrentOperationOk returns a tuple with the CurrentOperation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterStatusResult) GetCurrentOperationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CurrentOperation.Get(), o.CurrentOperation.IsSet()
}

// HasCurrentOperation returns a boolean if a field has been set.
func (o *ClusterStatusResult) HasCurrentOperation() bool {
	if o != nil && o.CurrentOperation.IsSet() {
		return true
	}

	return false
}

// SetCurrentOperation gets a reference to the given NullableString and assigns it to the CurrentOperation field.
func (o *ClusterStatusResult) SetCurrentOperation(v string) {
	o.CurrentOperation.Set(&v)
}
// SetCurrentOperationNil sets the value for CurrentOperation to be an explicit nil
func (o *ClusterStatusResult) SetCurrentOperationNil() {
	o.CurrentOperation.Set(nil)
}

// UnsetCurrentOperation ensures that no value is present for CurrentOperation, not even an explicit nil
func (o *ClusterStatusResult) UnsetCurrentOperation() {
	o.CurrentOperation.Unset()
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterStatusResult) GetMessage() string {
	if o == nil || o.Message.Get() == nil {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterStatusResult) GetMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *ClusterStatusResult) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *ClusterStatusResult) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *ClusterStatusResult) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *ClusterStatusResult) UnsetMessage() {
	o.Message.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterStatusResult) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterStatusResult) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ClusterStatusResult) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ClusterStatusResult) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *ClusterStatusResult) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ClusterStatusResult) UnsetName() {
	o.Name.Unset()
}

// GetNodeStatuses returns the NodeStatuses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterStatusResult) GetNodeStatuses() []NodeStatusResult {
	if o == nil  {
		var ret []NodeStatusResult
		return ret
	}
	return o.NodeStatuses
}

// GetNodeStatusesOk returns a tuple with the NodeStatuses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterStatusResult) GetNodeStatusesOk() (*[]NodeStatusResult, bool) {
	if o == nil || o.NodeStatuses == nil {
		return nil, false
	}
	return &o.NodeStatuses, true
}

// HasNodeStatuses returns a boolean if a field has been set.
func (o *ClusterStatusResult) HasNodeStatuses() bool {
	if o != nil && o.NodeStatuses != nil {
		return true
	}

	return false
}

// SetNodeStatuses gets a reference to the given []NodeStatusResult and assigns it to the NodeStatuses field.
func (o *ClusterStatusResult) SetNodeStatuses(v []NodeStatusResult) {
	o.NodeStatuses = v
}

// GetRemovalState returns the RemovalState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterStatusResult) GetRemovalState() string {
	if o == nil || o.RemovalState.Get() == nil {
		var ret string
		return ret
	}
	return *o.RemovalState.Get()
}

// GetRemovalStateOk returns a tuple with the RemovalState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterStatusResult) GetRemovalStateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RemovalState.Get(), o.RemovalState.IsSet()
}

// HasRemovalState returns a boolean if a field has been set.
func (o *ClusterStatusResult) HasRemovalState() bool {
	if o != nil && o.RemovalState.IsSet() {
		return true
	}

	return false
}

// SetRemovalState gets a reference to the given NullableString and assigns it to the RemovalState field.
func (o *ClusterStatusResult) SetRemovalState(v string) {
	o.RemovalState.Set(&v)
}
// SetRemovalStateNil sets the value for RemovalState to be an explicit nil
func (o *ClusterStatusResult) SetRemovalStateNil() {
	o.RemovalState.Set(nil)
}

// UnsetRemovalState ensures that no value is present for RemovalState, not even an explicit nil
func (o *ClusterStatusResult) UnsetRemovalState() {
	o.RemovalState.Unset()
}

// GetServicesSynced returns the ServicesSynced field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterStatusResult) GetServicesSynced() bool {
	if o == nil || o.ServicesSynced.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ServicesSynced.Get()
}

// GetServicesSyncedOk returns a tuple with the ServicesSynced field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterStatusResult) GetServicesSyncedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ServicesSynced.Get(), o.ServicesSynced.IsSet()
}

// HasServicesSynced returns a boolean if a field has been set.
func (o *ClusterStatusResult) HasServicesSynced() bool {
	if o != nil && o.ServicesSynced.IsSet() {
		return true
	}

	return false
}

// SetServicesSynced gets a reference to the given NullableBool and assigns it to the ServicesSynced field.
func (o *ClusterStatusResult) SetServicesSynced(v bool) {
	o.ServicesSynced.Set(&v)
}
// SetServicesSyncedNil sets the value for ServicesSynced to be an explicit nil
func (o *ClusterStatusResult) SetServicesSyncedNil() {
	o.ServicesSynced.Set(nil)
}

// UnsetServicesSynced ensures that no value is present for ServicesSynced, not even an explicit nil
func (o *ClusterStatusResult) UnsetServicesSynced() {
	o.ServicesSynced.Unset()
}

// GetSoftwareVersion returns the SoftwareVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterStatusResult) GetSoftwareVersion() string {
	if o == nil || o.SoftwareVersion.Get() == nil {
		var ret string
		return ret
	}
	return *o.SoftwareVersion.Get()
}

// GetSoftwareVersionOk returns a tuple with the SoftwareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterStatusResult) GetSoftwareVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SoftwareVersion.Get(), o.SoftwareVersion.IsSet()
}

// HasSoftwareVersion returns a boolean if a field has been set.
func (o *ClusterStatusResult) HasSoftwareVersion() bool {
	if o != nil && o.SoftwareVersion.IsSet() {
		return true
	}

	return false
}

// SetSoftwareVersion gets a reference to the given NullableString and assigns it to the SoftwareVersion field.
func (o *ClusterStatusResult) SetSoftwareVersion(v string) {
	o.SoftwareVersion.Set(&v)
}
// SetSoftwareVersionNil sets the value for SoftwareVersion to be an explicit nil
func (o *ClusterStatusResult) SetSoftwareVersionNil() {
	o.SoftwareVersion.Set(nil)
}

// UnsetSoftwareVersion ensures that no value is present for SoftwareVersion, not even an explicit nil
func (o *ClusterStatusResult) UnsetSoftwareVersion() {
	o.SoftwareVersion.Unset()
}

// GetStoppedServices returns the StoppedServices field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterStatusResult) GetStoppedServices() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.StoppedServices
}

// GetStoppedServicesOk returns a tuple with the StoppedServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterStatusResult) GetStoppedServicesOk() (*[]string, bool) {
	if o == nil || o.StoppedServices == nil {
		return nil, false
	}
	return &o.StoppedServices, true
}

// HasStoppedServices returns a boolean if a field has been set.
func (o *ClusterStatusResult) HasStoppedServices() bool {
	if o != nil && o.StoppedServices != nil {
		return true
	}

	return false
}

// SetStoppedServices gets a reference to the given []string and assigns it to the StoppedServices field.
func (o *ClusterStatusResult) SetStoppedServices(v []string) {
	o.StoppedServices = v
}

func (o ClusterStatusResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClusterId.IsSet() {
		toSerialize["clusterId"] = o.ClusterId.Get()
	}
	if o.ClusterIncarnationId.IsSet() {
		toSerialize["clusterIncarnationId"] = o.ClusterIncarnationId.Get()
	}
	if o.CurrentOperation.IsSet() {
		toSerialize["currentOperation"] = o.CurrentOperation.Get()
	}
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.NodeStatuses != nil {
		toSerialize["nodeStatuses"] = o.NodeStatuses
	}
	if o.RemovalState.IsSet() {
		toSerialize["removalState"] = o.RemovalState.Get()
	}
	if o.ServicesSynced.IsSet() {
		toSerialize["servicesSynced"] = o.ServicesSynced.Get()
	}
	if o.SoftwareVersion.IsSet() {
		toSerialize["softwareVersion"] = o.SoftwareVersion.Get()
	}
	if o.StoppedServices != nil {
		toSerialize["stoppedServices"] = o.StoppedServices
	}
	return json.Marshal(toSerialize)
}

type NullableClusterStatusResult struct {
	value *ClusterStatusResult
	isSet bool
}

func (v NullableClusterStatusResult) Get() *ClusterStatusResult {
	return v.value
}

func (v *NullableClusterStatusResult) Set(val *ClusterStatusResult) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterStatusResult) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterStatusResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterStatusResult(val *ClusterStatusResult) *NullableClusterStatusResult {
	return &NullableClusterStatusResult{value: val, isSet: true}
}

func (v NullableClusterStatusResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterStatusResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


