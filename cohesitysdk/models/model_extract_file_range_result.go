/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ExtractFileRangeResult This will capture output of ExtractFileRange and ExtractNFSFileRange.
type ExtractFileRangeResult struct {
	// The actual data bytes.
	Data []int32 `json:"data,omitempty"`
	// Will be true if start_offset > file length or EOF is reached. This is an alternative to using file_length to determine when entire file is read. Used when fetching from a view.
	Eof NullableBool `json:"eof,omitempty"`
	Error *ErrorProto `json:"error,omitempty"`
	// The total length of the file. This field would be set provided no error had occurred (indicated by error field above).
	FileLength NullableInt64 `json:"fileLength,omitempty"`
	// The offset from which data was read.
	StartOffset NullableInt64 `json:"startOffset,omitempty"`
}

// NewExtractFileRangeResult instantiates a new ExtractFileRangeResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtractFileRangeResult() *ExtractFileRangeResult {
	this := ExtractFileRangeResult{}
	return &this
}

// NewExtractFileRangeResultWithDefaults instantiates a new ExtractFileRangeResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtractFileRangeResultWithDefaults() *ExtractFileRangeResult {
	this := ExtractFileRangeResult{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtractFileRangeResult) GetData() []int32 {
	if o == nil  {
		var ret []int32
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtractFileRangeResult) GetDataOk() (*[]int32, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return &o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ExtractFileRangeResult) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []int32 and assigns it to the Data field.
func (o *ExtractFileRangeResult) SetData(v []int32) {
	o.Data = v
}

// GetEof returns the Eof field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtractFileRangeResult) GetEof() bool {
	if o == nil || o.Eof.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Eof.Get()
}

// GetEofOk returns a tuple with the Eof field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtractFileRangeResult) GetEofOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Eof.Get(), o.Eof.IsSet()
}

// HasEof returns a boolean if a field has been set.
func (o *ExtractFileRangeResult) HasEof() bool {
	if o != nil && o.Eof.IsSet() {
		return true
	}

	return false
}

// SetEof gets a reference to the given NullableBool and assigns it to the Eof field.
func (o *ExtractFileRangeResult) SetEof(v bool) {
	o.Eof.Set(&v)
}
// SetEofNil sets the value for Eof to be an explicit nil
func (o *ExtractFileRangeResult) SetEofNil() {
	o.Eof.Set(nil)
}

// UnsetEof ensures that no value is present for Eof, not even an explicit nil
func (o *ExtractFileRangeResult) UnsetEof() {
	o.Eof.Unset()
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ExtractFileRangeResult) GetError() ErrorProto {
	if o == nil || o.Error == nil {
		var ret ErrorProto
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtractFileRangeResult) GetErrorOk() (*ErrorProto, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ExtractFileRangeResult) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given ErrorProto and assigns it to the Error field.
func (o *ExtractFileRangeResult) SetError(v ErrorProto) {
	o.Error = &v
}

// GetFileLength returns the FileLength field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtractFileRangeResult) GetFileLength() int64 {
	if o == nil || o.FileLength.Get() == nil {
		var ret int64
		return ret
	}
	return *o.FileLength.Get()
}

// GetFileLengthOk returns a tuple with the FileLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtractFileRangeResult) GetFileLengthOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FileLength.Get(), o.FileLength.IsSet()
}

// HasFileLength returns a boolean if a field has been set.
func (o *ExtractFileRangeResult) HasFileLength() bool {
	if o != nil && o.FileLength.IsSet() {
		return true
	}

	return false
}

// SetFileLength gets a reference to the given NullableInt64 and assigns it to the FileLength field.
func (o *ExtractFileRangeResult) SetFileLength(v int64) {
	o.FileLength.Set(&v)
}
// SetFileLengthNil sets the value for FileLength to be an explicit nil
func (o *ExtractFileRangeResult) SetFileLengthNil() {
	o.FileLength.Set(nil)
}

// UnsetFileLength ensures that no value is present for FileLength, not even an explicit nil
func (o *ExtractFileRangeResult) UnsetFileLength() {
	o.FileLength.Unset()
}

// GetStartOffset returns the StartOffset field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtractFileRangeResult) GetStartOffset() int64 {
	if o == nil || o.StartOffset.Get() == nil {
		var ret int64
		return ret
	}
	return *o.StartOffset.Get()
}

// GetStartOffsetOk returns a tuple with the StartOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtractFileRangeResult) GetStartOffsetOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartOffset.Get(), o.StartOffset.IsSet()
}

// HasStartOffset returns a boolean if a field has been set.
func (o *ExtractFileRangeResult) HasStartOffset() bool {
	if o != nil && o.StartOffset.IsSet() {
		return true
	}

	return false
}

// SetStartOffset gets a reference to the given NullableInt64 and assigns it to the StartOffset field.
func (o *ExtractFileRangeResult) SetStartOffset(v int64) {
	o.StartOffset.Set(&v)
}
// SetStartOffsetNil sets the value for StartOffset to be an explicit nil
func (o *ExtractFileRangeResult) SetStartOffsetNil() {
	o.StartOffset.Set(nil)
}

// UnsetStartOffset ensures that no value is present for StartOffset, not even an explicit nil
func (o *ExtractFileRangeResult) UnsetStartOffset() {
	o.StartOffset.Unset()
}

func (o ExtractFileRangeResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Eof.IsSet() {
		toSerialize["eof"] = o.Eof.Get()
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.FileLength.IsSet() {
		toSerialize["fileLength"] = o.FileLength.Get()
	}
	if o.StartOffset.IsSet() {
		toSerialize["startOffset"] = o.StartOffset.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableExtractFileRangeResult struct {
	value *ExtractFileRangeResult
	isSet bool
}

func (v NullableExtractFileRangeResult) Get() *ExtractFileRangeResult {
	return v.value
}

func (v *NullableExtractFileRangeResult) Set(val *ExtractFileRangeResult) {
	v.value = val
	v.isSet = true
}

func (v NullableExtractFileRangeResult) IsSet() bool {
	return v.isSet
}

func (v *NullableExtractFileRangeResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtractFileRangeResult(val *ExtractFileRangeResult) *NullableExtractFileRangeResult {
	return &NullableExtractFileRangeResult{value: val, isSet: true}
}

func (v NullableExtractFileRangeResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtractFileRangeResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


