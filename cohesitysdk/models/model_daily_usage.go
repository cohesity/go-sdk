/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// DailyUsage struct for DailyUsage
type DailyUsage struct {
	DailyUsage []int64 `json:"dailyUsage,omitempty"`
	FeatureName NullableString `json:"featureName,omitempty"`
}

// NewDailyUsage instantiates a new DailyUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDailyUsage() *DailyUsage {
	this := DailyUsage{}
	return &this
}

// NewDailyUsageWithDefaults instantiates a new DailyUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDailyUsageWithDefaults() *DailyUsage {
	this := DailyUsage{}
	return &this
}

// GetDailyUsage returns the DailyUsage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DailyUsage) GetDailyUsage() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.DailyUsage
}

// GetDailyUsageOk returns a tuple with the DailyUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DailyUsage) GetDailyUsageOk() (*[]int64, bool) {
	if o == nil || o.DailyUsage == nil {
		return nil, false
	}
	return &o.DailyUsage, true
}

// HasDailyUsage returns a boolean if a field has been set.
func (o *DailyUsage) HasDailyUsage() bool {
	if o != nil && o.DailyUsage != nil {
		return true
	}

	return false
}

// SetDailyUsage gets a reference to the given []int64 and assigns it to the DailyUsage field.
func (o *DailyUsage) SetDailyUsage(v []int64) {
	o.DailyUsage = v
}

// GetFeatureName returns the FeatureName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DailyUsage) GetFeatureName() string {
	if o == nil || o.FeatureName.Get() == nil {
		var ret string
		return ret
	}
	return *o.FeatureName.Get()
}

// GetFeatureNameOk returns a tuple with the FeatureName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DailyUsage) GetFeatureNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FeatureName.Get(), o.FeatureName.IsSet()
}

// HasFeatureName returns a boolean if a field has been set.
func (o *DailyUsage) HasFeatureName() bool {
	if o != nil && o.FeatureName.IsSet() {
		return true
	}

	return false
}

// SetFeatureName gets a reference to the given NullableString and assigns it to the FeatureName field.
func (o *DailyUsage) SetFeatureName(v string) {
	o.FeatureName.Set(&v)
}
// SetFeatureNameNil sets the value for FeatureName to be an explicit nil
func (o *DailyUsage) SetFeatureNameNil() {
	o.FeatureName.Set(nil)
}

// UnsetFeatureName ensures that no value is present for FeatureName, not even an explicit nil
func (o *DailyUsage) UnsetFeatureName() {
	o.FeatureName.Unset()
}

func (o DailyUsage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DailyUsage != nil {
		toSerialize["dailyUsage"] = o.DailyUsage
	}
	if o.FeatureName.IsSet() {
		toSerialize["featureName"] = o.FeatureName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDailyUsage struct {
	value *DailyUsage
	isSet bool
}

func (v NullableDailyUsage) Get() *DailyUsage {
	return v.value
}

func (v *NullableDailyUsage) Set(val *DailyUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableDailyUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableDailyUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDailyUsage(val *DailyUsage) *NullableDailyUsage {
	return &NullableDailyUsage{value: val, isSet: true}
}

func (v NullableDailyUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDailyUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


