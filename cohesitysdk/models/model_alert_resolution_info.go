/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// AlertResolutionInfo Short description and detailed notes about the Resolution.
type AlertResolutionInfo struct {
	// Specifies detailed notes about the Resolution.
	ResolutionDetails NullableString `json:"resolutionDetails,omitempty"`
	// Specifies short description about the Resolution.
	ResolutionSummary NullableString `json:"resolutionSummary,omitempty"`
}

// NewAlertResolutionInfo instantiates a new AlertResolutionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertResolutionInfo() *AlertResolutionInfo {
	this := AlertResolutionInfo{}
	return &this
}

// NewAlertResolutionInfoWithDefaults instantiates a new AlertResolutionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertResolutionInfoWithDefaults() *AlertResolutionInfo {
	this := AlertResolutionInfo{}
	return &this
}

// GetResolutionDetails returns the ResolutionDetails field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertResolutionInfo) GetResolutionDetails() string {
	if o == nil || o.ResolutionDetails.Get() == nil {
		var ret string
		return ret
	}
	return *o.ResolutionDetails.Get()
}

// GetResolutionDetailsOk returns a tuple with the ResolutionDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertResolutionInfo) GetResolutionDetailsOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ResolutionDetails.Get(), o.ResolutionDetails.IsSet()
}

// HasResolutionDetails returns a boolean if a field has been set.
func (o *AlertResolutionInfo) HasResolutionDetails() bool {
	if o != nil && o.ResolutionDetails.IsSet() {
		return true
	}

	return false
}

// SetResolutionDetails gets a reference to the given NullableString and assigns it to the ResolutionDetails field.
func (o *AlertResolutionInfo) SetResolutionDetails(v string) {
	o.ResolutionDetails.Set(&v)
}
// SetResolutionDetailsNil sets the value for ResolutionDetails to be an explicit nil
func (o *AlertResolutionInfo) SetResolutionDetailsNil() {
	o.ResolutionDetails.Set(nil)
}

// UnsetResolutionDetails ensures that no value is present for ResolutionDetails, not even an explicit nil
func (o *AlertResolutionInfo) UnsetResolutionDetails() {
	o.ResolutionDetails.Unset()
}

// GetResolutionSummary returns the ResolutionSummary field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertResolutionInfo) GetResolutionSummary() string {
	if o == nil || o.ResolutionSummary.Get() == nil {
		var ret string
		return ret
	}
	return *o.ResolutionSummary.Get()
}

// GetResolutionSummaryOk returns a tuple with the ResolutionSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertResolutionInfo) GetResolutionSummaryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ResolutionSummary.Get(), o.ResolutionSummary.IsSet()
}

// HasResolutionSummary returns a boolean if a field has been set.
func (o *AlertResolutionInfo) HasResolutionSummary() bool {
	if o != nil && o.ResolutionSummary.IsSet() {
		return true
	}

	return false
}

// SetResolutionSummary gets a reference to the given NullableString and assigns it to the ResolutionSummary field.
func (o *AlertResolutionInfo) SetResolutionSummary(v string) {
	o.ResolutionSummary.Set(&v)
}
// SetResolutionSummaryNil sets the value for ResolutionSummary to be an explicit nil
func (o *AlertResolutionInfo) SetResolutionSummaryNil() {
	o.ResolutionSummary.Set(nil)
}

// UnsetResolutionSummary ensures that no value is present for ResolutionSummary, not even an explicit nil
func (o *AlertResolutionInfo) UnsetResolutionSummary() {
	o.ResolutionSummary.Unset()
}

func (o AlertResolutionInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ResolutionDetails.IsSet() {
		toSerialize["resolutionDetails"] = o.ResolutionDetails.Get()
	}
	if o.ResolutionSummary.IsSet() {
		toSerialize["resolutionSummary"] = o.ResolutionSummary.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAlertResolutionInfo struct {
	value *AlertResolutionInfo
	isSet bool
}

func (v NullableAlertResolutionInfo) Get() *AlertResolutionInfo {
	return v.value
}

func (v *NullableAlertResolutionInfo) Set(val *AlertResolutionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertResolutionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertResolutionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertResolutionInfo(val *AlertResolutionInfo) *NullableAlertResolutionInfo {
	return &NullableAlertResolutionInfo{value: val, isSet: true}
}

func (v NullableAlertResolutionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertResolutionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


