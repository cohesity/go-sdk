/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// RestoreSiteParams struct for RestoreSiteParams
type RestoreSiteParams struct {
	// Whether or not all sites are restored to original location.
	RestoreToOriginal NullableBool `json:"restoreToOriginal,omitempty"`
	// The list of sites whose drives are being restored.
	SiteOwnerVec []RestoreSiteParamsSiteOwner `json:"siteOwnerVec,omitempty"`
	// Incase of alternate restore of granular items within document repositiories of sites to another site, a doc lib name has to be specified by the caller. NOTE: It can be safely assumed that this field will only be present in case of granular items restore only.
	TargetDocLibName NullableString `json:"targetDocLibName,omitempty"`
	// If alternate site is provided, customer may want to provide a custom prefix to document libraries that we create. In any case we would also have to distinguish the newly created document library as the alternate site provided by the customer may as well turn out to be the original backup site.
	TargetDocLibPrefix NullableString `json:"targetDocLibPrefix,omitempty"`
	TargetSite *EntityProto `json:"targetSite,omitempty"`
}

// NewRestoreSiteParams instantiates a new RestoreSiteParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreSiteParams() *RestoreSiteParams {
	this := RestoreSiteParams{}
	return &this
}

// NewRestoreSiteParamsWithDefaults instantiates a new RestoreSiteParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreSiteParamsWithDefaults() *RestoreSiteParams {
	this := RestoreSiteParams{}
	return &this
}

// GetRestoreToOriginal returns the RestoreToOriginal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreSiteParams) GetRestoreToOriginal() bool {
	if o == nil || o.RestoreToOriginal.Get() == nil {
		var ret bool
		return ret
	}
	return *o.RestoreToOriginal.Get()
}

// GetRestoreToOriginalOk returns a tuple with the RestoreToOriginal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreSiteParams) GetRestoreToOriginalOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RestoreToOriginal.Get(), o.RestoreToOriginal.IsSet()
}

// HasRestoreToOriginal returns a boolean if a field has been set.
func (o *RestoreSiteParams) HasRestoreToOriginal() bool {
	if o != nil && o.RestoreToOriginal.IsSet() {
		return true
	}

	return false
}

// SetRestoreToOriginal gets a reference to the given NullableBool and assigns it to the RestoreToOriginal field.
func (o *RestoreSiteParams) SetRestoreToOriginal(v bool) {
	o.RestoreToOriginal.Set(&v)
}
// SetRestoreToOriginalNil sets the value for RestoreToOriginal to be an explicit nil
func (o *RestoreSiteParams) SetRestoreToOriginalNil() {
	o.RestoreToOriginal.Set(nil)
}

// UnsetRestoreToOriginal ensures that no value is present for RestoreToOriginal, not even an explicit nil
func (o *RestoreSiteParams) UnsetRestoreToOriginal() {
	o.RestoreToOriginal.Unset()
}

// GetSiteOwnerVec returns the SiteOwnerVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreSiteParams) GetSiteOwnerVec() []RestoreSiteParamsSiteOwner {
	if o == nil  {
		var ret []RestoreSiteParamsSiteOwner
		return ret
	}
	return o.SiteOwnerVec
}

// GetSiteOwnerVecOk returns a tuple with the SiteOwnerVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreSiteParams) GetSiteOwnerVecOk() (*[]RestoreSiteParamsSiteOwner, bool) {
	if o == nil || o.SiteOwnerVec == nil {
		return nil, false
	}
	return &o.SiteOwnerVec, true
}

// HasSiteOwnerVec returns a boolean if a field has been set.
func (o *RestoreSiteParams) HasSiteOwnerVec() bool {
	if o != nil && o.SiteOwnerVec != nil {
		return true
	}

	return false
}

// SetSiteOwnerVec gets a reference to the given []RestoreSiteParamsSiteOwner and assigns it to the SiteOwnerVec field.
func (o *RestoreSiteParams) SetSiteOwnerVec(v []RestoreSiteParamsSiteOwner) {
	o.SiteOwnerVec = v
}

// GetTargetDocLibName returns the TargetDocLibName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreSiteParams) GetTargetDocLibName() string {
	if o == nil || o.TargetDocLibName.Get() == nil {
		var ret string
		return ret
	}
	return *o.TargetDocLibName.Get()
}

// GetTargetDocLibNameOk returns a tuple with the TargetDocLibName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreSiteParams) GetTargetDocLibNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetDocLibName.Get(), o.TargetDocLibName.IsSet()
}

// HasTargetDocLibName returns a boolean if a field has been set.
func (o *RestoreSiteParams) HasTargetDocLibName() bool {
	if o != nil && o.TargetDocLibName.IsSet() {
		return true
	}

	return false
}

// SetTargetDocLibName gets a reference to the given NullableString and assigns it to the TargetDocLibName field.
func (o *RestoreSiteParams) SetTargetDocLibName(v string) {
	o.TargetDocLibName.Set(&v)
}
// SetTargetDocLibNameNil sets the value for TargetDocLibName to be an explicit nil
func (o *RestoreSiteParams) SetTargetDocLibNameNil() {
	o.TargetDocLibName.Set(nil)
}

// UnsetTargetDocLibName ensures that no value is present for TargetDocLibName, not even an explicit nil
func (o *RestoreSiteParams) UnsetTargetDocLibName() {
	o.TargetDocLibName.Unset()
}

// GetTargetDocLibPrefix returns the TargetDocLibPrefix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreSiteParams) GetTargetDocLibPrefix() string {
	if o == nil || o.TargetDocLibPrefix.Get() == nil {
		var ret string
		return ret
	}
	return *o.TargetDocLibPrefix.Get()
}

// GetTargetDocLibPrefixOk returns a tuple with the TargetDocLibPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreSiteParams) GetTargetDocLibPrefixOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetDocLibPrefix.Get(), o.TargetDocLibPrefix.IsSet()
}

// HasTargetDocLibPrefix returns a boolean if a field has been set.
func (o *RestoreSiteParams) HasTargetDocLibPrefix() bool {
	if o != nil && o.TargetDocLibPrefix.IsSet() {
		return true
	}

	return false
}

// SetTargetDocLibPrefix gets a reference to the given NullableString and assigns it to the TargetDocLibPrefix field.
func (o *RestoreSiteParams) SetTargetDocLibPrefix(v string) {
	o.TargetDocLibPrefix.Set(&v)
}
// SetTargetDocLibPrefixNil sets the value for TargetDocLibPrefix to be an explicit nil
func (o *RestoreSiteParams) SetTargetDocLibPrefixNil() {
	o.TargetDocLibPrefix.Set(nil)
}

// UnsetTargetDocLibPrefix ensures that no value is present for TargetDocLibPrefix, not even an explicit nil
func (o *RestoreSiteParams) UnsetTargetDocLibPrefix() {
	o.TargetDocLibPrefix.Unset()
}

// GetTargetSite returns the TargetSite field value if set, zero value otherwise.
func (o *RestoreSiteParams) GetTargetSite() EntityProto {
	if o == nil || o.TargetSite == nil {
		var ret EntityProto
		return ret
	}
	return *o.TargetSite
}

// GetTargetSiteOk returns a tuple with the TargetSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreSiteParams) GetTargetSiteOk() (*EntityProto, bool) {
	if o == nil || o.TargetSite == nil {
		return nil, false
	}
	return o.TargetSite, true
}

// HasTargetSite returns a boolean if a field has been set.
func (o *RestoreSiteParams) HasTargetSite() bool {
	if o != nil && o.TargetSite != nil {
		return true
	}

	return false
}

// SetTargetSite gets a reference to the given EntityProto and assigns it to the TargetSite field.
func (o *RestoreSiteParams) SetTargetSite(v EntityProto) {
	o.TargetSite = &v
}

func (o RestoreSiteParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RestoreToOriginal.IsSet() {
		toSerialize["restoreToOriginal"] = o.RestoreToOriginal.Get()
	}
	if o.SiteOwnerVec != nil {
		toSerialize["siteOwnerVec"] = o.SiteOwnerVec
	}
	if o.TargetDocLibName.IsSet() {
		toSerialize["targetDocLibName"] = o.TargetDocLibName.Get()
	}
	if o.TargetDocLibPrefix.IsSet() {
		toSerialize["targetDocLibPrefix"] = o.TargetDocLibPrefix.Get()
	}
	if o.TargetSite != nil {
		toSerialize["targetSite"] = o.TargetSite
	}
	return json.Marshal(toSerialize)
}

type NullableRestoreSiteParams struct {
	value *RestoreSiteParams
	isSet bool
}

func (v NullableRestoreSiteParams) Get() *RestoreSiteParams {
	return v.value
}

func (v *NullableRestoreSiteParams) Set(val *RestoreSiteParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreSiteParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreSiteParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreSiteParams(val *RestoreSiteParams) *NullableRestoreSiteParams {
	return &NullableRestoreSiteParams{value: val, isSet: true}
}

func (v NullableRestoreSiteParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreSiteParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


