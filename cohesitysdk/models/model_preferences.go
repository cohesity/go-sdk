/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// Preferences struct for Preferences
type Preferences struct {
	// Locale reflects the language settings of the user. Populate using the user preferences stored in Scribe for the user wherever needed.
	Locale NullableString `json:"locale,omitempty"`
}

// NewPreferences instantiates a new Preferences object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPreferences() *Preferences {
	this := Preferences{}
	return &this
}

// NewPreferencesWithDefaults instantiates a new Preferences object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPreferencesWithDefaults() *Preferences {
	this := Preferences{}
	return &this
}

// GetLocale returns the Locale field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Preferences) GetLocale() string {
	if o == nil || o.Locale.Get() == nil {
		var ret string
		return ret
	}
	return *o.Locale.Get()
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Preferences) GetLocaleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Locale.Get(), o.Locale.IsSet()
}

// HasLocale returns a boolean if a field has been set.
func (o *Preferences) HasLocale() bool {
	if o != nil && o.Locale.IsSet() {
		return true
	}

	return false
}

// SetLocale gets a reference to the given NullableString and assigns it to the Locale field.
func (o *Preferences) SetLocale(v string) {
	o.Locale.Set(&v)
}
// SetLocaleNil sets the value for Locale to be an explicit nil
func (o *Preferences) SetLocaleNil() {
	o.Locale.Set(nil)
}

// UnsetLocale ensures that no value is present for Locale, not even an explicit nil
func (o *Preferences) UnsetLocale() {
	o.Locale.Unset()
}

func (o Preferences) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Locale.IsSet() {
		toSerialize["locale"] = o.Locale.Get()
	}
	return json.Marshal(toSerialize)
}

type NullablePreferences struct {
	value *Preferences
	isSet bool
}

func (v NullablePreferences) Get() *Preferences {
	return v.value
}

func (v *NullablePreferences) Set(val *Preferences) {
	v.value = val
	v.isSet = true
}

func (v NullablePreferences) IsSet() bool {
	return v.isSet
}

func (v *NullablePreferences) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePreferences(val *Preferences) *NullablePreferences {
	return &NullablePreferences{value: val, isSet: true}
}

func (v NullablePreferences) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePreferences) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


