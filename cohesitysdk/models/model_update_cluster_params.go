/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// UpdateClusterParams Specifies the configuration settings that can be updated on the Cohesity Cluster.
type UpdateClusterParams struct {
	AppsSubnet *Subnet `json:"appsSubnet,omitempty"`
	// Specifies whether UI banner is enabled on the cluster or not. When banner is enabled, UI will make an additional API call to fetch the banner and show at the login page.
	BannerEnabled NullableBool `json:"bannerEnabled,omitempty"`
	ClusterAuditLogConfig *ClusterAuditLogConfiguration `json:"clusterAuditLogConfig,omitempty"`
	// Array of IP Addresses of DNS Servers.  Specifies the IP addresses of the DNS Servers used by the Cohesity Cluster.
	DnsServerIps []string `json:"dnsServerIps,omitempty"`
	// Array of Domain Names.  The first domain name specified in the array is the fully qualified domain name assigned to the Cohesity Cluster. Any additional domain names specified are used for the domain search list for hostname look-up.
	DomainNames []string `json:"domainNames,omitempty"`
	// Specifies if Cohesity can receive monitoring information from the Cohesity Cluster. If 'true', remote monitoring of the Cohesity Cluster is allowed.
	EnableActiveMonitoring NullableBool `json:"enableActiveMonitoring,omitempty"`
	// If 'true', Cohesity's upgrade server is polled for new releases.
	EnableUpgradePkgPolling NullableBool `json:"enableUpgradePkgPolling,omitempty"`
	// Specifies the period of time (in seconds) when encryption keys are rotated. By default, the encryption keys are rotated every 77760000 seconds (30 days).
	EncryptionKeyRotationPeriodSecs NullableInt64 `json:"encryptionKeyRotationPeriodSecs,omitempty"`
	// Specifies the level which 'MetadataFaultToleranceFactor' applies to. 'kNode' indicates 'MetadataFaultToleranceFactor' applies to Node level. 'kChassis' indicates 'MetadataFaultToleranceFactor' applies to Chassis level. 'kRack' indicates 'MetadataFaultToleranceFactor' applies to Rack level.
	FaultToleranceLevel NullableString `json:"faultToleranceLevel,omitempty"`
	FilerAuditLogConfig *FilerAuditLogConfiguration `json:"filerAuditLogConfig,omitempty"`
	// Specifies the gateway IP address.
	Gateway NullableString `json:"gateway,omitempty"`
	// Specifies whether Google Analytics is enabled.
	GoogleAnalyticsEnabled NullableBool `json:"googleAnalyticsEnabled,omitempty"`
	// Specifies what version of the documentation is used. If 'true', the version of documentation stored locally on the Cohesity Cluster is used. If 'false', the documentation stored on a Cohesity Web Server is used. The default is 'false'. Cohesity recommends accessing the Help from the Cohesity Web site which provides the newest and most complete version of Help.
	IsDocumentationLocal NullableBool `json:"isDocumentationLocal,omitempty"`
	// Specifies the language and locale for this Cohesity Cluster.
	LanguageLocale NullableString `json:"languageLocale,omitempty"`
	// Domain name for SMB local authentication.
	LocalAuthDomainName NullableString `json:"localAuthDomainName,omitempty"`
	// Specifies whether to enable local groups on cluster. Once it is enabled, it cannot be disabled.
	LocalGroupsEnabled NullableBool `json:"localGroupsEnabled,omitempty"`
	// Specifies metadata fault tolerance setting for the cluster. This denotes the number of simultaneous failures[node] supported by metadata services like gandalf and scribe.
	MetadataFaultToleranceFactor NullableInt32 `json:"metadataFaultToleranceFactor,omitempty"`
	// Specifies if multi tenancy is enabled in the cluster. Authentication & Authorization will always use tenant_id, however, some UI elements may be disabled when multi tenancy is disabled.
	MultiTenancyEnabled NullableBool `json:"multiTenancyEnabled,omitempty"`
	// Specifies the name of the Cohesity Cluster.
	Name NullableString `json:"name,omitempty"`
	NtpSettings *NtpSettingsConfig `json:"ntpSettings,omitempty"`
	// Specifies the rebalance delay in seconds for cluster PcieSSD storage tier.
	PcieSsdTierRebalanceDelaySecs NullableInt32 `json:"pcieSsdTierRebalanceDelaySecs,omitempty"`
	// If 'true', Cohesity's Remote Tunnel is enabled. Cohesity can access the Cluster and provide remote assistance via a Remote Tunnel.
	ReverseTunnelEnabled NullableBool `json:"reverseTunnelEnabled,omitempty"`
	// ReverseTunnelEndTimeMsecs specifies the end time in milliseconds since epoch until when the reverse tunnel will stay enabled.
	ReverseTunnelEndTimeMsecs NullableInt64 `json:"reverseTunnelEndTimeMsecs,omitempty"`
	// Specifies if Active Directory should be disabled for authentication of SMB shares. If 'true', Active Directory is disabled.
	SmbAdDisabled NullableBool `json:"smbAdDisabled,omitempty"`
	// Specifies whether SMB multichannel is enabled on the cluster. When this is set to true, then any SMB3 multichannel enabled client can establish multiple TCP connection per session to the Server.
	SmbMultichannelEnabled NullableBool `json:"smbMultichannelEnabled,omitempty"`
	// Specifies if STIG mode is enabled or not.
	StigMode NullableBool `json:"stigMode,omitempty"`
	// Syslog servers.
	SyslogServers []OldSyslogServer `json:"syslogServers,omitempty"`
	// In case multi tenancy is enabled, this flag controls whether multiple tenants can be placed on the same viewbox. Once set to true, this flag should never become false.
	TenantViewboxSharingEnabled NullableBool `json:"tenantViewboxSharingEnabled,omitempty"`
	// Specifies the timezone to use for showing time in emails, reports, filer audit logs, etc.
	Timezone NullableString `json:"timezone,omitempty"`
	// Specifies if the cluster is in Turbo mode.
	TurboMode NullableBool `json:"turboMode,omitempty"`
}

// NewUpdateClusterParams instantiates a new UpdateClusterParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateClusterParams() *UpdateClusterParams {
	this := UpdateClusterParams{}
	return &this
}

// NewUpdateClusterParamsWithDefaults instantiates a new UpdateClusterParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateClusterParamsWithDefaults() *UpdateClusterParams {
	this := UpdateClusterParams{}
	return &this
}

// GetAppsSubnet returns the AppsSubnet field value if set, zero value otherwise.
func (o *UpdateClusterParams) GetAppsSubnet() Subnet {
	if o == nil || o.AppsSubnet == nil {
		var ret Subnet
		return ret
	}
	return *o.AppsSubnet
}

// GetAppsSubnetOk returns a tuple with the AppsSubnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateClusterParams) GetAppsSubnetOk() (*Subnet, bool) {
	if o == nil || o.AppsSubnet == nil {
		return nil, false
	}
	return o.AppsSubnet, true
}

// HasAppsSubnet returns a boolean if a field has been set.
func (o *UpdateClusterParams) HasAppsSubnet() bool {
	if o != nil && o.AppsSubnet != nil {
		return true
	}

	return false
}

// SetAppsSubnet gets a reference to the given Subnet and assigns it to the AppsSubnet field.
func (o *UpdateClusterParams) SetAppsSubnet(v Subnet) {
	o.AppsSubnet = &v
}

// GetBannerEnabled returns the BannerEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateClusterParams) GetBannerEnabled() bool {
	if o == nil || o.BannerEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.BannerEnabled.Get()
}

// GetBannerEnabledOk returns a tuple with the BannerEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateClusterParams) GetBannerEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BannerEnabled.Get(), o.BannerEnabled.IsSet()
}

// HasBannerEnabled returns a boolean if a field has been set.
func (o *UpdateClusterParams) HasBannerEnabled() bool {
	if o != nil && o.BannerEnabled.IsSet() {
		return true
	}

	return false
}

// SetBannerEnabled gets a reference to the given NullableBool and assigns it to the BannerEnabled field.
func (o *UpdateClusterParams) SetBannerEnabled(v bool) {
	o.BannerEnabled.Set(&v)
}
// SetBannerEnabledNil sets the value for BannerEnabled to be an explicit nil
func (o *UpdateClusterParams) SetBannerEnabledNil() {
	o.BannerEnabled.Set(nil)
}

// UnsetBannerEnabled ensures that no value is present for BannerEnabled, not even an explicit nil
func (o *UpdateClusterParams) UnsetBannerEnabled() {
	o.BannerEnabled.Unset()
}

// GetClusterAuditLogConfig returns the ClusterAuditLogConfig field value if set, zero value otherwise.
func (o *UpdateClusterParams) GetClusterAuditLogConfig() ClusterAuditLogConfiguration {
	if o == nil || o.ClusterAuditLogConfig == nil {
		var ret ClusterAuditLogConfiguration
		return ret
	}
	return *o.ClusterAuditLogConfig
}

// GetClusterAuditLogConfigOk returns a tuple with the ClusterAuditLogConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateClusterParams) GetClusterAuditLogConfigOk() (*ClusterAuditLogConfiguration, bool) {
	if o == nil || o.ClusterAuditLogConfig == nil {
		return nil, false
	}
	return o.ClusterAuditLogConfig, true
}

// HasClusterAuditLogConfig returns a boolean if a field has been set.
func (o *UpdateClusterParams) HasClusterAuditLogConfig() bool {
	if o != nil && o.ClusterAuditLogConfig != nil {
		return true
	}

	return false
}

// SetClusterAuditLogConfig gets a reference to the given ClusterAuditLogConfiguration and assigns it to the ClusterAuditLogConfig field.
func (o *UpdateClusterParams) SetClusterAuditLogConfig(v ClusterAuditLogConfiguration) {
	o.ClusterAuditLogConfig = &v
}

// GetDnsServerIps returns the DnsServerIps field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateClusterParams) GetDnsServerIps() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.DnsServerIps
}

// GetDnsServerIpsOk returns a tuple with the DnsServerIps field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateClusterParams) GetDnsServerIpsOk() (*[]string, bool) {
	if o == nil || o.DnsServerIps == nil {
		return nil, false
	}
	return &o.DnsServerIps, true
}

// HasDnsServerIps returns a boolean if a field has been set.
func (o *UpdateClusterParams) HasDnsServerIps() bool {
	if o != nil && o.DnsServerIps != nil {
		return true
	}

	return false
}

// SetDnsServerIps gets a reference to the given []string and assigns it to the DnsServerIps field.
func (o *UpdateClusterParams) SetDnsServerIps(v []string) {
	o.DnsServerIps = v
}

// GetDomainNames returns the DomainNames field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateClusterParams) GetDomainNames() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.DomainNames
}

// GetDomainNamesOk returns a tuple with the DomainNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateClusterParams) GetDomainNamesOk() (*[]string, bool) {
	if o == nil || o.DomainNames == nil {
		return nil, false
	}
	return &o.DomainNames, true
}

// HasDomainNames returns a boolean if a field has been set.
func (o *UpdateClusterParams) HasDomainNames() bool {
	if o != nil && o.DomainNames != nil {
		return true
	}

	return false
}

// SetDomainNames gets a reference to the given []string and assigns it to the DomainNames field.
func (o *UpdateClusterParams) SetDomainNames(v []string) {
	o.DomainNames = v
}

// GetEnableActiveMonitoring returns the EnableActiveMonitoring field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateClusterParams) GetEnableActiveMonitoring() bool {
	if o == nil || o.EnableActiveMonitoring.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableActiveMonitoring.Get()
}

// GetEnableActiveMonitoringOk returns a tuple with the EnableActiveMonitoring field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateClusterParams) GetEnableActiveMonitoringOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableActiveMonitoring.Get(), o.EnableActiveMonitoring.IsSet()
}

// HasEnableActiveMonitoring returns a boolean if a field has been set.
func (o *UpdateClusterParams) HasEnableActiveMonitoring() bool {
	if o != nil && o.EnableActiveMonitoring.IsSet() {
		return true
	}

	return false
}

// SetEnableActiveMonitoring gets a reference to the given NullableBool and assigns it to the EnableActiveMonitoring field.
func (o *UpdateClusterParams) SetEnableActiveMonitoring(v bool) {
	o.EnableActiveMonitoring.Set(&v)
}
// SetEnableActiveMonitoringNil sets the value for EnableActiveMonitoring to be an explicit nil
func (o *UpdateClusterParams) SetEnableActiveMonitoringNil() {
	o.EnableActiveMonitoring.Set(nil)
}

// UnsetEnableActiveMonitoring ensures that no value is present for EnableActiveMonitoring, not even an explicit nil
func (o *UpdateClusterParams) UnsetEnableActiveMonitoring() {
	o.EnableActiveMonitoring.Unset()
}

// GetEnableUpgradePkgPolling returns the EnableUpgradePkgPolling field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateClusterParams) GetEnableUpgradePkgPolling() bool {
	if o == nil || o.EnableUpgradePkgPolling.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableUpgradePkgPolling.Get()
}

// GetEnableUpgradePkgPollingOk returns a tuple with the EnableUpgradePkgPolling field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateClusterParams) GetEnableUpgradePkgPollingOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableUpgradePkgPolling.Get(), o.EnableUpgradePkgPolling.IsSet()
}

// HasEnableUpgradePkgPolling returns a boolean if a field has been set.
func (o *UpdateClusterParams) HasEnableUpgradePkgPolling() bool {
	if o != nil && o.EnableUpgradePkgPolling.IsSet() {
		return true
	}

	return false
}

// SetEnableUpgradePkgPolling gets a reference to the given NullableBool and assigns it to the EnableUpgradePkgPolling field.
func (o *UpdateClusterParams) SetEnableUpgradePkgPolling(v bool) {
	o.EnableUpgradePkgPolling.Set(&v)
}
// SetEnableUpgradePkgPollingNil sets the value for EnableUpgradePkgPolling to be an explicit nil
func (o *UpdateClusterParams) SetEnableUpgradePkgPollingNil() {
	o.EnableUpgradePkgPolling.Set(nil)
}

// UnsetEnableUpgradePkgPolling ensures that no value is present for EnableUpgradePkgPolling, not even an explicit nil
func (o *UpdateClusterParams) UnsetEnableUpgradePkgPolling() {
	o.EnableUpgradePkgPolling.Unset()
}

// GetEncryptionKeyRotationPeriodSecs returns the EncryptionKeyRotationPeriodSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateClusterParams) GetEncryptionKeyRotationPeriodSecs() int64 {
	if o == nil || o.EncryptionKeyRotationPeriodSecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.EncryptionKeyRotationPeriodSecs.Get()
}

// GetEncryptionKeyRotationPeriodSecsOk returns a tuple with the EncryptionKeyRotationPeriodSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateClusterParams) GetEncryptionKeyRotationPeriodSecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EncryptionKeyRotationPeriodSecs.Get(), o.EncryptionKeyRotationPeriodSecs.IsSet()
}

// HasEncryptionKeyRotationPeriodSecs returns a boolean if a field has been set.
func (o *UpdateClusterParams) HasEncryptionKeyRotationPeriodSecs() bool {
	if o != nil && o.EncryptionKeyRotationPeriodSecs.IsSet() {
		return true
	}

	return false
}

// SetEncryptionKeyRotationPeriodSecs gets a reference to the given NullableInt64 and assigns it to the EncryptionKeyRotationPeriodSecs field.
func (o *UpdateClusterParams) SetEncryptionKeyRotationPeriodSecs(v int64) {
	o.EncryptionKeyRotationPeriodSecs.Set(&v)
}
// SetEncryptionKeyRotationPeriodSecsNil sets the value for EncryptionKeyRotationPeriodSecs to be an explicit nil
func (o *UpdateClusterParams) SetEncryptionKeyRotationPeriodSecsNil() {
	o.EncryptionKeyRotationPeriodSecs.Set(nil)
}

// UnsetEncryptionKeyRotationPeriodSecs ensures that no value is present for EncryptionKeyRotationPeriodSecs, not even an explicit nil
func (o *UpdateClusterParams) UnsetEncryptionKeyRotationPeriodSecs() {
	o.EncryptionKeyRotationPeriodSecs.Unset()
}

// GetFaultToleranceLevel returns the FaultToleranceLevel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateClusterParams) GetFaultToleranceLevel() string {
	if o == nil || o.FaultToleranceLevel.Get() == nil {
		var ret string
		return ret
	}
	return *o.FaultToleranceLevel.Get()
}

// GetFaultToleranceLevelOk returns a tuple with the FaultToleranceLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateClusterParams) GetFaultToleranceLevelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FaultToleranceLevel.Get(), o.FaultToleranceLevel.IsSet()
}

// HasFaultToleranceLevel returns a boolean if a field has been set.
func (o *UpdateClusterParams) HasFaultToleranceLevel() bool {
	if o != nil && o.FaultToleranceLevel.IsSet() {
		return true
	}

	return false
}

// SetFaultToleranceLevel gets a reference to the given NullableString and assigns it to the FaultToleranceLevel field.
func (o *UpdateClusterParams) SetFaultToleranceLevel(v string) {
	o.FaultToleranceLevel.Set(&v)
}
// SetFaultToleranceLevelNil sets the value for FaultToleranceLevel to be an explicit nil
func (o *UpdateClusterParams) SetFaultToleranceLevelNil() {
	o.FaultToleranceLevel.Set(nil)
}

// UnsetFaultToleranceLevel ensures that no value is present for FaultToleranceLevel, not even an explicit nil
func (o *UpdateClusterParams) UnsetFaultToleranceLevel() {
	o.FaultToleranceLevel.Unset()
}

// GetFilerAuditLogConfig returns the FilerAuditLogConfig field value if set, zero value otherwise.
func (o *UpdateClusterParams) GetFilerAuditLogConfig() FilerAuditLogConfiguration {
	if o == nil || o.FilerAuditLogConfig == nil {
		var ret FilerAuditLogConfiguration
		return ret
	}
	return *o.FilerAuditLogConfig
}

// GetFilerAuditLogConfigOk returns a tuple with the FilerAuditLogConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateClusterParams) GetFilerAuditLogConfigOk() (*FilerAuditLogConfiguration, bool) {
	if o == nil || o.FilerAuditLogConfig == nil {
		return nil, false
	}
	return o.FilerAuditLogConfig, true
}

// HasFilerAuditLogConfig returns a boolean if a field has been set.
func (o *UpdateClusterParams) HasFilerAuditLogConfig() bool {
	if o != nil && o.FilerAuditLogConfig != nil {
		return true
	}

	return false
}

// SetFilerAuditLogConfig gets a reference to the given FilerAuditLogConfiguration and assigns it to the FilerAuditLogConfig field.
func (o *UpdateClusterParams) SetFilerAuditLogConfig(v FilerAuditLogConfiguration) {
	o.FilerAuditLogConfig = &v
}

// GetGateway returns the Gateway field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateClusterParams) GetGateway() string {
	if o == nil || o.Gateway.Get() == nil {
		var ret string
		return ret
	}
	return *o.Gateway.Get()
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateClusterParams) GetGatewayOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Gateway.Get(), o.Gateway.IsSet()
}

// HasGateway returns a boolean if a field has been set.
func (o *UpdateClusterParams) HasGateway() bool {
	if o != nil && o.Gateway.IsSet() {
		return true
	}

	return false
}

// SetGateway gets a reference to the given NullableString and assigns it to the Gateway field.
func (o *UpdateClusterParams) SetGateway(v string) {
	o.Gateway.Set(&v)
}
// SetGatewayNil sets the value for Gateway to be an explicit nil
func (o *UpdateClusterParams) SetGatewayNil() {
	o.Gateway.Set(nil)
}

// UnsetGateway ensures that no value is present for Gateway, not even an explicit nil
func (o *UpdateClusterParams) UnsetGateway() {
	o.Gateway.Unset()
}

// GetGoogleAnalyticsEnabled returns the GoogleAnalyticsEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateClusterParams) GetGoogleAnalyticsEnabled() bool {
	if o == nil || o.GoogleAnalyticsEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.GoogleAnalyticsEnabled.Get()
}

// GetGoogleAnalyticsEnabledOk returns a tuple with the GoogleAnalyticsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateClusterParams) GetGoogleAnalyticsEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.GoogleAnalyticsEnabled.Get(), o.GoogleAnalyticsEnabled.IsSet()
}

// HasGoogleAnalyticsEnabled returns a boolean if a field has been set.
func (o *UpdateClusterParams) HasGoogleAnalyticsEnabled() bool {
	if o != nil && o.GoogleAnalyticsEnabled.IsSet() {
		return true
	}

	return false
}

// SetGoogleAnalyticsEnabled gets a reference to the given NullableBool and assigns it to the GoogleAnalyticsEnabled field.
func (o *UpdateClusterParams) SetGoogleAnalyticsEnabled(v bool) {
	o.GoogleAnalyticsEnabled.Set(&v)
}
// SetGoogleAnalyticsEnabledNil sets the value for GoogleAnalyticsEnabled to be an explicit nil
func (o *UpdateClusterParams) SetGoogleAnalyticsEnabledNil() {
	o.GoogleAnalyticsEnabled.Set(nil)
}

// UnsetGoogleAnalyticsEnabled ensures that no value is present for GoogleAnalyticsEnabled, not even an explicit nil
func (o *UpdateClusterParams) UnsetGoogleAnalyticsEnabled() {
	o.GoogleAnalyticsEnabled.Unset()
}

// GetIsDocumentationLocal returns the IsDocumentationLocal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateClusterParams) GetIsDocumentationLocal() bool {
	if o == nil || o.IsDocumentationLocal.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsDocumentationLocal.Get()
}

// GetIsDocumentationLocalOk returns a tuple with the IsDocumentationLocal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateClusterParams) GetIsDocumentationLocalOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsDocumentationLocal.Get(), o.IsDocumentationLocal.IsSet()
}

// HasIsDocumentationLocal returns a boolean if a field has been set.
func (o *UpdateClusterParams) HasIsDocumentationLocal() bool {
	if o != nil && o.IsDocumentationLocal.IsSet() {
		return true
	}

	return false
}

// SetIsDocumentationLocal gets a reference to the given NullableBool and assigns it to the IsDocumentationLocal field.
func (o *UpdateClusterParams) SetIsDocumentationLocal(v bool) {
	o.IsDocumentationLocal.Set(&v)
}
// SetIsDocumentationLocalNil sets the value for IsDocumentationLocal to be an explicit nil
func (o *UpdateClusterParams) SetIsDocumentationLocalNil() {
	o.IsDocumentationLocal.Set(nil)
}

// UnsetIsDocumentationLocal ensures that no value is present for IsDocumentationLocal, not even an explicit nil
func (o *UpdateClusterParams) UnsetIsDocumentationLocal() {
	o.IsDocumentationLocal.Unset()
}

// GetLanguageLocale returns the LanguageLocale field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateClusterParams) GetLanguageLocale() string {
	if o == nil || o.LanguageLocale.Get() == nil {
		var ret string
		return ret
	}
	return *o.LanguageLocale.Get()
}

// GetLanguageLocaleOk returns a tuple with the LanguageLocale field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateClusterParams) GetLanguageLocaleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LanguageLocale.Get(), o.LanguageLocale.IsSet()
}

// HasLanguageLocale returns a boolean if a field has been set.
func (o *UpdateClusterParams) HasLanguageLocale() bool {
	if o != nil && o.LanguageLocale.IsSet() {
		return true
	}

	return false
}

// SetLanguageLocale gets a reference to the given NullableString and assigns it to the LanguageLocale field.
func (o *UpdateClusterParams) SetLanguageLocale(v string) {
	o.LanguageLocale.Set(&v)
}
// SetLanguageLocaleNil sets the value for LanguageLocale to be an explicit nil
func (o *UpdateClusterParams) SetLanguageLocaleNil() {
	o.LanguageLocale.Set(nil)
}

// UnsetLanguageLocale ensures that no value is present for LanguageLocale, not even an explicit nil
func (o *UpdateClusterParams) UnsetLanguageLocale() {
	o.LanguageLocale.Unset()
}

// GetLocalAuthDomainName returns the LocalAuthDomainName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateClusterParams) GetLocalAuthDomainName() string {
	if o == nil || o.LocalAuthDomainName.Get() == nil {
		var ret string
		return ret
	}
	return *o.LocalAuthDomainName.Get()
}

// GetLocalAuthDomainNameOk returns a tuple with the LocalAuthDomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateClusterParams) GetLocalAuthDomainNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LocalAuthDomainName.Get(), o.LocalAuthDomainName.IsSet()
}

// HasLocalAuthDomainName returns a boolean if a field has been set.
func (o *UpdateClusterParams) HasLocalAuthDomainName() bool {
	if o != nil && o.LocalAuthDomainName.IsSet() {
		return true
	}

	return false
}

// SetLocalAuthDomainName gets a reference to the given NullableString and assigns it to the LocalAuthDomainName field.
func (o *UpdateClusterParams) SetLocalAuthDomainName(v string) {
	o.LocalAuthDomainName.Set(&v)
}
// SetLocalAuthDomainNameNil sets the value for LocalAuthDomainName to be an explicit nil
func (o *UpdateClusterParams) SetLocalAuthDomainNameNil() {
	o.LocalAuthDomainName.Set(nil)
}

// UnsetLocalAuthDomainName ensures that no value is present for LocalAuthDomainName, not even an explicit nil
func (o *UpdateClusterParams) UnsetLocalAuthDomainName() {
	o.LocalAuthDomainName.Unset()
}

// GetLocalGroupsEnabled returns the LocalGroupsEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateClusterParams) GetLocalGroupsEnabled() bool {
	if o == nil || o.LocalGroupsEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.LocalGroupsEnabled.Get()
}

// GetLocalGroupsEnabledOk returns a tuple with the LocalGroupsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateClusterParams) GetLocalGroupsEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LocalGroupsEnabled.Get(), o.LocalGroupsEnabled.IsSet()
}

// HasLocalGroupsEnabled returns a boolean if a field has been set.
func (o *UpdateClusterParams) HasLocalGroupsEnabled() bool {
	if o != nil && o.LocalGroupsEnabled.IsSet() {
		return true
	}

	return false
}

// SetLocalGroupsEnabled gets a reference to the given NullableBool and assigns it to the LocalGroupsEnabled field.
func (o *UpdateClusterParams) SetLocalGroupsEnabled(v bool) {
	o.LocalGroupsEnabled.Set(&v)
}
// SetLocalGroupsEnabledNil sets the value for LocalGroupsEnabled to be an explicit nil
func (o *UpdateClusterParams) SetLocalGroupsEnabledNil() {
	o.LocalGroupsEnabled.Set(nil)
}

// UnsetLocalGroupsEnabled ensures that no value is present for LocalGroupsEnabled, not even an explicit nil
func (o *UpdateClusterParams) UnsetLocalGroupsEnabled() {
	o.LocalGroupsEnabled.Unset()
}

// GetMetadataFaultToleranceFactor returns the MetadataFaultToleranceFactor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateClusterParams) GetMetadataFaultToleranceFactor() int32 {
	if o == nil || o.MetadataFaultToleranceFactor.Get() == nil {
		var ret int32
		return ret
	}
	return *o.MetadataFaultToleranceFactor.Get()
}

// GetMetadataFaultToleranceFactorOk returns a tuple with the MetadataFaultToleranceFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateClusterParams) GetMetadataFaultToleranceFactorOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MetadataFaultToleranceFactor.Get(), o.MetadataFaultToleranceFactor.IsSet()
}

// HasMetadataFaultToleranceFactor returns a boolean if a field has been set.
func (o *UpdateClusterParams) HasMetadataFaultToleranceFactor() bool {
	if o != nil && o.MetadataFaultToleranceFactor.IsSet() {
		return true
	}

	return false
}

// SetMetadataFaultToleranceFactor gets a reference to the given NullableInt32 and assigns it to the MetadataFaultToleranceFactor field.
func (o *UpdateClusterParams) SetMetadataFaultToleranceFactor(v int32) {
	o.MetadataFaultToleranceFactor.Set(&v)
}
// SetMetadataFaultToleranceFactorNil sets the value for MetadataFaultToleranceFactor to be an explicit nil
func (o *UpdateClusterParams) SetMetadataFaultToleranceFactorNil() {
	o.MetadataFaultToleranceFactor.Set(nil)
}

// UnsetMetadataFaultToleranceFactor ensures that no value is present for MetadataFaultToleranceFactor, not even an explicit nil
func (o *UpdateClusterParams) UnsetMetadataFaultToleranceFactor() {
	o.MetadataFaultToleranceFactor.Unset()
}

// GetMultiTenancyEnabled returns the MultiTenancyEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateClusterParams) GetMultiTenancyEnabled() bool {
	if o == nil || o.MultiTenancyEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.MultiTenancyEnabled.Get()
}

// GetMultiTenancyEnabledOk returns a tuple with the MultiTenancyEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateClusterParams) GetMultiTenancyEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MultiTenancyEnabled.Get(), o.MultiTenancyEnabled.IsSet()
}

// HasMultiTenancyEnabled returns a boolean if a field has been set.
func (o *UpdateClusterParams) HasMultiTenancyEnabled() bool {
	if o != nil && o.MultiTenancyEnabled.IsSet() {
		return true
	}

	return false
}

// SetMultiTenancyEnabled gets a reference to the given NullableBool and assigns it to the MultiTenancyEnabled field.
func (o *UpdateClusterParams) SetMultiTenancyEnabled(v bool) {
	o.MultiTenancyEnabled.Set(&v)
}
// SetMultiTenancyEnabledNil sets the value for MultiTenancyEnabled to be an explicit nil
func (o *UpdateClusterParams) SetMultiTenancyEnabledNil() {
	o.MultiTenancyEnabled.Set(nil)
}

// UnsetMultiTenancyEnabled ensures that no value is present for MultiTenancyEnabled, not even an explicit nil
func (o *UpdateClusterParams) UnsetMultiTenancyEnabled() {
	o.MultiTenancyEnabled.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateClusterParams) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateClusterParams) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *UpdateClusterParams) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *UpdateClusterParams) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *UpdateClusterParams) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *UpdateClusterParams) UnsetName() {
	o.Name.Unset()
}

// GetNtpSettings returns the NtpSettings field value if set, zero value otherwise.
func (o *UpdateClusterParams) GetNtpSettings() NtpSettingsConfig {
	if o == nil || o.NtpSettings == nil {
		var ret NtpSettingsConfig
		return ret
	}
	return *o.NtpSettings
}

// GetNtpSettingsOk returns a tuple with the NtpSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateClusterParams) GetNtpSettingsOk() (*NtpSettingsConfig, bool) {
	if o == nil || o.NtpSettings == nil {
		return nil, false
	}
	return o.NtpSettings, true
}

// HasNtpSettings returns a boolean if a field has been set.
func (o *UpdateClusterParams) HasNtpSettings() bool {
	if o != nil && o.NtpSettings != nil {
		return true
	}

	return false
}

// SetNtpSettings gets a reference to the given NtpSettingsConfig and assigns it to the NtpSettings field.
func (o *UpdateClusterParams) SetNtpSettings(v NtpSettingsConfig) {
	o.NtpSettings = &v
}

// GetPcieSsdTierRebalanceDelaySecs returns the PcieSsdTierRebalanceDelaySecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateClusterParams) GetPcieSsdTierRebalanceDelaySecs() int32 {
	if o == nil || o.PcieSsdTierRebalanceDelaySecs.Get() == nil {
		var ret int32
		return ret
	}
	return *o.PcieSsdTierRebalanceDelaySecs.Get()
}

// GetPcieSsdTierRebalanceDelaySecsOk returns a tuple with the PcieSsdTierRebalanceDelaySecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateClusterParams) GetPcieSsdTierRebalanceDelaySecsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PcieSsdTierRebalanceDelaySecs.Get(), o.PcieSsdTierRebalanceDelaySecs.IsSet()
}

// HasPcieSsdTierRebalanceDelaySecs returns a boolean if a field has been set.
func (o *UpdateClusterParams) HasPcieSsdTierRebalanceDelaySecs() bool {
	if o != nil && o.PcieSsdTierRebalanceDelaySecs.IsSet() {
		return true
	}

	return false
}

// SetPcieSsdTierRebalanceDelaySecs gets a reference to the given NullableInt32 and assigns it to the PcieSsdTierRebalanceDelaySecs field.
func (o *UpdateClusterParams) SetPcieSsdTierRebalanceDelaySecs(v int32) {
	o.PcieSsdTierRebalanceDelaySecs.Set(&v)
}
// SetPcieSsdTierRebalanceDelaySecsNil sets the value for PcieSsdTierRebalanceDelaySecs to be an explicit nil
func (o *UpdateClusterParams) SetPcieSsdTierRebalanceDelaySecsNil() {
	o.PcieSsdTierRebalanceDelaySecs.Set(nil)
}

// UnsetPcieSsdTierRebalanceDelaySecs ensures that no value is present for PcieSsdTierRebalanceDelaySecs, not even an explicit nil
func (o *UpdateClusterParams) UnsetPcieSsdTierRebalanceDelaySecs() {
	o.PcieSsdTierRebalanceDelaySecs.Unset()
}

// GetReverseTunnelEnabled returns the ReverseTunnelEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateClusterParams) GetReverseTunnelEnabled() bool {
	if o == nil || o.ReverseTunnelEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ReverseTunnelEnabled.Get()
}

// GetReverseTunnelEnabledOk returns a tuple with the ReverseTunnelEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateClusterParams) GetReverseTunnelEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ReverseTunnelEnabled.Get(), o.ReverseTunnelEnabled.IsSet()
}

// HasReverseTunnelEnabled returns a boolean if a field has been set.
func (o *UpdateClusterParams) HasReverseTunnelEnabled() bool {
	if o != nil && o.ReverseTunnelEnabled.IsSet() {
		return true
	}

	return false
}

// SetReverseTunnelEnabled gets a reference to the given NullableBool and assigns it to the ReverseTunnelEnabled field.
func (o *UpdateClusterParams) SetReverseTunnelEnabled(v bool) {
	o.ReverseTunnelEnabled.Set(&v)
}
// SetReverseTunnelEnabledNil sets the value for ReverseTunnelEnabled to be an explicit nil
func (o *UpdateClusterParams) SetReverseTunnelEnabledNil() {
	o.ReverseTunnelEnabled.Set(nil)
}

// UnsetReverseTunnelEnabled ensures that no value is present for ReverseTunnelEnabled, not even an explicit nil
func (o *UpdateClusterParams) UnsetReverseTunnelEnabled() {
	o.ReverseTunnelEnabled.Unset()
}

// GetReverseTunnelEndTimeMsecs returns the ReverseTunnelEndTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateClusterParams) GetReverseTunnelEndTimeMsecs() int64 {
	if o == nil || o.ReverseTunnelEndTimeMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ReverseTunnelEndTimeMsecs.Get()
}

// GetReverseTunnelEndTimeMsecsOk returns a tuple with the ReverseTunnelEndTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateClusterParams) GetReverseTunnelEndTimeMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ReverseTunnelEndTimeMsecs.Get(), o.ReverseTunnelEndTimeMsecs.IsSet()
}

// HasReverseTunnelEndTimeMsecs returns a boolean if a field has been set.
func (o *UpdateClusterParams) HasReverseTunnelEndTimeMsecs() bool {
	if o != nil && o.ReverseTunnelEndTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetReverseTunnelEndTimeMsecs gets a reference to the given NullableInt64 and assigns it to the ReverseTunnelEndTimeMsecs field.
func (o *UpdateClusterParams) SetReverseTunnelEndTimeMsecs(v int64) {
	o.ReverseTunnelEndTimeMsecs.Set(&v)
}
// SetReverseTunnelEndTimeMsecsNil sets the value for ReverseTunnelEndTimeMsecs to be an explicit nil
func (o *UpdateClusterParams) SetReverseTunnelEndTimeMsecsNil() {
	o.ReverseTunnelEndTimeMsecs.Set(nil)
}

// UnsetReverseTunnelEndTimeMsecs ensures that no value is present for ReverseTunnelEndTimeMsecs, not even an explicit nil
func (o *UpdateClusterParams) UnsetReverseTunnelEndTimeMsecs() {
	o.ReverseTunnelEndTimeMsecs.Unset()
}

// GetSmbAdDisabled returns the SmbAdDisabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateClusterParams) GetSmbAdDisabled() bool {
	if o == nil || o.SmbAdDisabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SmbAdDisabled.Get()
}

// GetSmbAdDisabledOk returns a tuple with the SmbAdDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateClusterParams) GetSmbAdDisabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SmbAdDisabled.Get(), o.SmbAdDisabled.IsSet()
}

// HasSmbAdDisabled returns a boolean if a field has been set.
func (o *UpdateClusterParams) HasSmbAdDisabled() bool {
	if o != nil && o.SmbAdDisabled.IsSet() {
		return true
	}

	return false
}

// SetSmbAdDisabled gets a reference to the given NullableBool and assigns it to the SmbAdDisabled field.
func (o *UpdateClusterParams) SetSmbAdDisabled(v bool) {
	o.SmbAdDisabled.Set(&v)
}
// SetSmbAdDisabledNil sets the value for SmbAdDisabled to be an explicit nil
func (o *UpdateClusterParams) SetSmbAdDisabledNil() {
	o.SmbAdDisabled.Set(nil)
}

// UnsetSmbAdDisabled ensures that no value is present for SmbAdDisabled, not even an explicit nil
func (o *UpdateClusterParams) UnsetSmbAdDisabled() {
	o.SmbAdDisabled.Unset()
}

// GetSmbMultichannelEnabled returns the SmbMultichannelEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateClusterParams) GetSmbMultichannelEnabled() bool {
	if o == nil || o.SmbMultichannelEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SmbMultichannelEnabled.Get()
}

// GetSmbMultichannelEnabledOk returns a tuple with the SmbMultichannelEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateClusterParams) GetSmbMultichannelEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SmbMultichannelEnabled.Get(), o.SmbMultichannelEnabled.IsSet()
}

// HasSmbMultichannelEnabled returns a boolean if a field has been set.
func (o *UpdateClusterParams) HasSmbMultichannelEnabled() bool {
	if o != nil && o.SmbMultichannelEnabled.IsSet() {
		return true
	}

	return false
}

// SetSmbMultichannelEnabled gets a reference to the given NullableBool and assigns it to the SmbMultichannelEnabled field.
func (o *UpdateClusterParams) SetSmbMultichannelEnabled(v bool) {
	o.SmbMultichannelEnabled.Set(&v)
}
// SetSmbMultichannelEnabledNil sets the value for SmbMultichannelEnabled to be an explicit nil
func (o *UpdateClusterParams) SetSmbMultichannelEnabledNil() {
	o.SmbMultichannelEnabled.Set(nil)
}

// UnsetSmbMultichannelEnabled ensures that no value is present for SmbMultichannelEnabled, not even an explicit nil
func (o *UpdateClusterParams) UnsetSmbMultichannelEnabled() {
	o.SmbMultichannelEnabled.Unset()
}

// GetStigMode returns the StigMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateClusterParams) GetStigMode() bool {
	if o == nil || o.StigMode.Get() == nil {
		var ret bool
		return ret
	}
	return *o.StigMode.Get()
}

// GetStigModeOk returns a tuple with the StigMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateClusterParams) GetStigModeOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StigMode.Get(), o.StigMode.IsSet()
}

// HasStigMode returns a boolean if a field has been set.
func (o *UpdateClusterParams) HasStigMode() bool {
	if o != nil && o.StigMode.IsSet() {
		return true
	}

	return false
}

// SetStigMode gets a reference to the given NullableBool and assigns it to the StigMode field.
func (o *UpdateClusterParams) SetStigMode(v bool) {
	o.StigMode.Set(&v)
}
// SetStigModeNil sets the value for StigMode to be an explicit nil
func (o *UpdateClusterParams) SetStigModeNil() {
	o.StigMode.Set(nil)
}

// UnsetStigMode ensures that no value is present for StigMode, not even an explicit nil
func (o *UpdateClusterParams) UnsetStigMode() {
	o.StigMode.Unset()
}

// GetSyslogServers returns the SyslogServers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateClusterParams) GetSyslogServers() []OldSyslogServer {
	if o == nil  {
		var ret []OldSyslogServer
		return ret
	}
	return o.SyslogServers
}

// GetSyslogServersOk returns a tuple with the SyslogServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateClusterParams) GetSyslogServersOk() (*[]OldSyslogServer, bool) {
	if o == nil || o.SyslogServers == nil {
		return nil, false
	}
	return &o.SyslogServers, true
}

// HasSyslogServers returns a boolean if a field has been set.
func (o *UpdateClusterParams) HasSyslogServers() bool {
	if o != nil && o.SyslogServers != nil {
		return true
	}

	return false
}

// SetSyslogServers gets a reference to the given []OldSyslogServer and assigns it to the SyslogServers field.
func (o *UpdateClusterParams) SetSyslogServers(v []OldSyslogServer) {
	o.SyslogServers = v
}

// GetTenantViewboxSharingEnabled returns the TenantViewboxSharingEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateClusterParams) GetTenantViewboxSharingEnabled() bool {
	if o == nil || o.TenantViewboxSharingEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.TenantViewboxSharingEnabled.Get()
}

// GetTenantViewboxSharingEnabledOk returns a tuple with the TenantViewboxSharingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateClusterParams) GetTenantViewboxSharingEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantViewboxSharingEnabled.Get(), o.TenantViewboxSharingEnabled.IsSet()
}

// HasTenantViewboxSharingEnabled returns a boolean if a field has been set.
func (o *UpdateClusterParams) HasTenantViewboxSharingEnabled() bool {
	if o != nil && o.TenantViewboxSharingEnabled.IsSet() {
		return true
	}

	return false
}

// SetTenantViewboxSharingEnabled gets a reference to the given NullableBool and assigns it to the TenantViewboxSharingEnabled field.
func (o *UpdateClusterParams) SetTenantViewboxSharingEnabled(v bool) {
	o.TenantViewboxSharingEnabled.Set(&v)
}
// SetTenantViewboxSharingEnabledNil sets the value for TenantViewboxSharingEnabled to be an explicit nil
func (o *UpdateClusterParams) SetTenantViewboxSharingEnabledNil() {
	o.TenantViewboxSharingEnabled.Set(nil)
}

// UnsetTenantViewboxSharingEnabled ensures that no value is present for TenantViewboxSharingEnabled, not even an explicit nil
func (o *UpdateClusterParams) UnsetTenantViewboxSharingEnabled() {
	o.TenantViewboxSharingEnabled.Unset()
}

// GetTimezone returns the Timezone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateClusterParams) GetTimezone() string {
	if o == nil || o.Timezone.Get() == nil {
		var ret string
		return ret
	}
	return *o.Timezone.Get()
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateClusterParams) GetTimezoneOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Timezone.Get(), o.Timezone.IsSet()
}

// HasTimezone returns a boolean if a field has been set.
func (o *UpdateClusterParams) HasTimezone() bool {
	if o != nil && o.Timezone.IsSet() {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given NullableString and assigns it to the Timezone field.
func (o *UpdateClusterParams) SetTimezone(v string) {
	o.Timezone.Set(&v)
}
// SetTimezoneNil sets the value for Timezone to be an explicit nil
func (o *UpdateClusterParams) SetTimezoneNil() {
	o.Timezone.Set(nil)
}

// UnsetTimezone ensures that no value is present for Timezone, not even an explicit nil
func (o *UpdateClusterParams) UnsetTimezone() {
	o.Timezone.Unset()
}

// GetTurboMode returns the TurboMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateClusterParams) GetTurboMode() bool {
	if o == nil || o.TurboMode.Get() == nil {
		var ret bool
		return ret
	}
	return *o.TurboMode.Get()
}

// GetTurboModeOk returns a tuple with the TurboMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateClusterParams) GetTurboModeOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TurboMode.Get(), o.TurboMode.IsSet()
}

// HasTurboMode returns a boolean if a field has been set.
func (o *UpdateClusterParams) HasTurboMode() bool {
	if o != nil && o.TurboMode.IsSet() {
		return true
	}

	return false
}

// SetTurboMode gets a reference to the given NullableBool and assigns it to the TurboMode field.
func (o *UpdateClusterParams) SetTurboMode(v bool) {
	o.TurboMode.Set(&v)
}
// SetTurboModeNil sets the value for TurboMode to be an explicit nil
func (o *UpdateClusterParams) SetTurboModeNil() {
	o.TurboMode.Set(nil)
}

// UnsetTurboMode ensures that no value is present for TurboMode, not even an explicit nil
func (o *UpdateClusterParams) UnsetTurboMode() {
	o.TurboMode.Unset()
}

func (o UpdateClusterParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AppsSubnet != nil {
		toSerialize["appsSubnet"] = o.AppsSubnet
	}
	if o.BannerEnabled.IsSet() {
		toSerialize["bannerEnabled"] = o.BannerEnabled.Get()
	}
	if o.ClusterAuditLogConfig != nil {
		toSerialize["clusterAuditLogConfig"] = o.ClusterAuditLogConfig
	}
	if o.DnsServerIps != nil {
		toSerialize["dnsServerIps"] = o.DnsServerIps
	}
	if o.DomainNames != nil {
		toSerialize["domainNames"] = o.DomainNames
	}
	if o.EnableActiveMonitoring.IsSet() {
		toSerialize["enableActiveMonitoring"] = o.EnableActiveMonitoring.Get()
	}
	if o.EnableUpgradePkgPolling.IsSet() {
		toSerialize["enableUpgradePkgPolling"] = o.EnableUpgradePkgPolling.Get()
	}
	if o.EncryptionKeyRotationPeriodSecs.IsSet() {
		toSerialize["encryptionKeyRotationPeriodSecs"] = o.EncryptionKeyRotationPeriodSecs.Get()
	}
	if o.FaultToleranceLevel.IsSet() {
		toSerialize["faultToleranceLevel"] = o.FaultToleranceLevel.Get()
	}
	if o.FilerAuditLogConfig != nil {
		toSerialize["filerAuditLogConfig"] = o.FilerAuditLogConfig
	}
	if o.Gateway.IsSet() {
		toSerialize["gateway"] = o.Gateway.Get()
	}
	if o.GoogleAnalyticsEnabled.IsSet() {
		toSerialize["googleAnalyticsEnabled"] = o.GoogleAnalyticsEnabled.Get()
	}
	if o.IsDocumentationLocal.IsSet() {
		toSerialize["isDocumentationLocal"] = o.IsDocumentationLocal.Get()
	}
	if o.LanguageLocale.IsSet() {
		toSerialize["languageLocale"] = o.LanguageLocale.Get()
	}
	if o.LocalAuthDomainName.IsSet() {
		toSerialize["localAuthDomainName"] = o.LocalAuthDomainName.Get()
	}
	if o.LocalGroupsEnabled.IsSet() {
		toSerialize["localGroupsEnabled"] = o.LocalGroupsEnabled.Get()
	}
	if o.MetadataFaultToleranceFactor.IsSet() {
		toSerialize["metadataFaultToleranceFactor"] = o.MetadataFaultToleranceFactor.Get()
	}
	if o.MultiTenancyEnabled.IsSet() {
		toSerialize["multiTenancyEnabled"] = o.MultiTenancyEnabled.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.NtpSettings != nil {
		toSerialize["ntpSettings"] = o.NtpSettings
	}
	if o.PcieSsdTierRebalanceDelaySecs.IsSet() {
		toSerialize["pcieSsdTierRebalanceDelaySecs"] = o.PcieSsdTierRebalanceDelaySecs.Get()
	}
	if o.ReverseTunnelEnabled.IsSet() {
		toSerialize["reverseTunnelEnabled"] = o.ReverseTunnelEnabled.Get()
	}
	if o.ReverseTunnelEndTimeMsecs.IsSet() {
		toSerialize["reverseTunnelEndTimeMsecs"] = o.ReverseTunnelEndTimeMsecs.Get()
	}
	if o.SmbAdDisabled.IsSet() {
		toSerialize["smbAdDisabled"] = o.SmbAdDisabled.Get()
	}
	if o.SmbMultichannelEnabled.IsSet() {
		toSerialize["smbMultichannelEnabled"] = o.SmbMultichannelEnabled.Get()
	}
	if o.StigMode.IsSet() {
		toSerialize["stigMode"] = o.StigMode.Get()
	}
	if o.SyslogServers != nil {
		toSerialize["syslogServers"] = o.SyslogServers
	}
	if o.TenantViewboxSharingEnabled.IsSet() {
		toSerialize["tenantViewboxSharingEnabled"] = o.TenantViewboxSharingEnabled.Get()
	}
	if o.Timezone.IsSet() {
		toSerialize["timezone"] = o.Timezone.Get()
	}
	if o.TurboMode.IsSet() {
		toSerialize["turboMode"] = o.TurboMode.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateClusterParams struct {
	value *UpdateClusterParams
	isSet bool
}

func (v NullableUpdateClusterParams) Get() *UpdateClusterParams {
	return v.value
}

func (v *NullableUpdateClusterParams) Set(val *UpdateClusterParams) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateClusterParams) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateClusterParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateClusterParams(val *UpdateClusterParams) *NullableUpdateClusterParams {
	return &NullableUpdateClusterParams{value: val, isSet: true}
}

func (v NullableUpdateClusterParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateClusterParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


