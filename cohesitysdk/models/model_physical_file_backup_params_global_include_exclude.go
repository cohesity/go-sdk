/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// PhysicalFileBackupParamsGlobalIncludeExclude Descibes job level includes and excludes. Right now, only supports excludes but includes will be added in future.
type PhysicalFileBackupParamsGlobalIncludeExclude struct {
	// Describes exclude vec at job level used in combination with to exclude_paths to exclude files.
	ExcludeVec []string `json:"excludeVec,omitempty"`
}

// NewPhysicalFileBackupParamsGlobalIncludeExclude instantiates a new PhysicalFileBackupParamsGlobalIncludeExclude object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhysicalFileBackupParamsGlobalIncludeExclude() *PhysicalFileBackupParamsGlobalIncludeExclude {
	this := PhysicalFileBackupParamsGlobalIncludeExclude{}
	return &this
}

// NewPhysicalFileBackupParamsGlobalIncludeExcludeWithDefaults instantiates a new PhysicalFileBackupParamsGlobalIncludeExclude object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhysicalFileBackupParamsGlobalIncludeExcludeWithDefaults() *PhysicalFileBackupParamsGlobalIncludeExclude {
	this := PhysicalFileBackupParamsGlobalIncludeExclude{}
	return &this
}

// GetExcludeVec returns the ExcludeVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalFileBackupParamsGlobalIncludeExclude) GetExcludeVec() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.ExcludeVec
}

// GetExcludeVecOk returns a tuple with the ExcludeVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalFileBackupParamsGlobalIncludeExclude) GetExcludeVecOk() (*[]string, bool) {
	if o == nil || o.ExcludeVec == nil {
		return nil, false
	}
	return &o.ExcludeVec, true
}

// HasExcludeVec returns a boolean if a field has been set.
func (o *PhysicalFileBackupParamsGlobalIncludeExclude) HasExcludeVec() bool {
	if o != nil && o.ExcludeVec != nil {
		return true
	}

	return false
}

// SetExcludeVec gets a reference to the given []string and assigns it to the ExcludeVec field.
func (o *PhysicalFileBackupParamsGlobalIncludeExclude) SetExcludeVec(v []string) {
	o.ExcludeVec = v
}

func (o PhysicalFileBackupParamsGlobalIncludeExclude) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExcludeVec != nil {
		toSerialize["excludeVec"] = o.ExcludeVec
	}
	return json.Marshal(toSerialize)
}

type NullablePhysicalFileBackupParamsGlobalIncludeExclude struct {
	value *PhysicalFileBackupParamsGlobalIncludeExclude
	isSet bool
}

func (v NullablePhysicalFileBackupParamsGlobalIncludeExclude) Get() *PhysicalFileBackupParamsGlobalIncludeExclude {
	return v.value
}

func (v *NullablePhysicalFileBackupParamsGlobalIncludeExclude) Set(val *PhysicalFileBackupParamsGlobalIncludeExclude) {
	v.value = val
	v.isSet = true
}

func (v NullablePhysicalFileBackupParamsGlobalIncludeExclude) IsSet() bool {
	return v.isSet
}

func (v *NullablePhysicalFileBackupParamsGlobalIncludeExclude) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhysicalFileBackupParamsGlobalIncludeExclude(val *PhysicalFileBackupParamsGlobalIncludeExclude) *NullablePhysicalFileBackupParamsGlobalIncludeExclude {
	return &NullablePhysicalFileBackupParamsGlobalIncludeExclude{value: val, isSet: true}
}

func (v NullablePhysicalFileBackupParamsGlobalIncludeExclude) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhysicalFileBackupParamsGlobalIncludeExclude) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


