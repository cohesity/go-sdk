/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// BondingOpts Bonding Opts
type BondingOpts struct {
	LacpRate NullableString `json:"lacpRate,omitempty"`
	Mode NullableString `json:"mode,omitempty"`
	XmitHashPolicy NullableString `json:"xmitHashPolicy,omitempty"`
}

// NewBondingOpts instantiates a new BondingOpts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBondingOpts() *BondingOpts {
	this := BondingOpts{}
	return &this
}

// NewBondingOptsWithDefaults instantiates a new BondingOpts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBondingOptsWithDefaults() *BondingOpts {
	this := BondingOpts{}
	return &this
}

// GetLacpRate returns the LacpRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BondingOpts) GetLacpRate() string {
	if o == nil || o.LacpRate.Get() == nil {
		var ret string
		return ret
	}
	return *o.LacpRate.Get()
}

// GetLacpRateOk returns a tuple with the LacpRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BondingOpts) GetLacpRateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LacpRate.Get(), o.LacpRate.IsSet()
}

// HasLacpRate returns a boolean if a field has been set.
func (o *BondingOpts) HasLacpRate() bool {
	if o != nil && o.LacpRate.IsSet() {
		return true
	}

	return false
}

// SetLacpRate gets a reference to the given NullableString and assigns it to the LacpRate field.
func (o *BondingOpts) SetLacpRate(v string) {
	o.LacpRate.Set(&v)
}
// SetLacpRateNil sets the value for LacpRate to be an explicit nil
func (o *BondingOpts) SetLacpRateNil() {
	o.LacpRate.Set(nil)
}

// UnsetLacpRate ensures that no value is present for LacpRate, not even an explicit nil
func (o *BondingOpts) UnsetLacpRate() {
	o.LacpRate.Unset()
}

// GetMode returns the Mode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BondingOpts) GetMode() string {
	if o == nil || o.Mode.Get() == nil {
		var ret string
		return ret
	}
	return *o.Mode.Get()
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BondingOpts) GetModeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Mode.Get(), o.Mode.IsSet()
}

// HasMode returns a boolean if a field has been set.
func (o *BondingOpts) HasMode() bool {
	if o != nil && o.Mode.IsSet() {
		return true
	}

	return false
}

// SetMode gets a reference to the given NullableString and assigns it to the Mode field.
func (o *BondingOpts) SetMode(v string) {
	o.Mode.Set(&v)
}
// SetModeNil sets the value for Mode to be an explicit nil
func (o *BondingOpts) SetModeNil() {
	o.Mode.Set(nil)
}

// UnsetMode ensures that no value is present for Mode, not even an explicit nil
func (o *BondingOpts) UnsetMode() {
	o.Mode.Unset()
}

// GetXmitHashPolicy returns the XmitHashPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BondingOpts) GetXmitHashPolicy() string {
	if o == nil || o.XmitHashPolicy.Get() == nil {
		var ret string
		return ret
	}
	return *o.XmitHashPolicy.Get()
}

// GetXmitHashPolicyOk returns a tuple with the XmitHashPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BondingOpts) GetXmitHashPolicyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.XmitHashPolicy.Get(), o.XmitHashPolicy.IsSet()
}

// HasXmitHashPolicy returns a boolean if a field has been set.
func (o *BondingOpts) HasXmitHashPolicy() bool {
	if o != nil && o.XmitHashPolicy.IsSet() {
		return true
	}

	return false
}

// SetXmitHashPolicy gets a reference to the given NullableString and assigns it to the XmitHashPolicy field.
func (o *BondingOpts) SetXmitHashPolicy(v string) {
	o.XmitHashPolicy.Set(&v)
}
// SetXmitHashPolicyNil sets the value for XmitHashPolicy to be an explicit nil
func (o *BondingOpts) SetXmitHashPolicyNil() {
	o.XmitHashPolicy.Set(nil)
}

// UnsetXmitHashPolicy ensures that no value is present for XmitHashPolicy, not even an explicit nil
func (o *BondingOpts) UnsetXmitHashPolicy() {
	o.XmitHashPolicy.Unset()
}

func (o BondingOpts) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LacpRate.IsSet() {
		toSerialize["lacpRate"] = o.LacpRate.Get()
	}
	if o.Mode.IsSet() {
		toSerialize["mode"] = o.Mode.Get()
	}
	if o.XmitHashPolicy.IsSet() {
		toSerialize["xmitHashPolicy"] = o.XmitHashPolicy.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableBondingOpts struct {
	value *BondingOpts
	isSet bool
}

func (v NullableBondingOpts) Get() *BondingOpts {
	return v.value
}

func (v *NullableBondingOpts) Set(val *BondingOpts) {
	v.value = val
	v.isSet = true
}

func (v NullableBondingOpts) IsSet() bool {
	return v.isSet
}

func (v *NullableBondingOpts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBondingOpts(val *BondingOpts) *NullableBondingOpts {
	return &NullableBondingOpts{value: val, isSet: true}
}

func (v NullableBondingOpts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBondingOpts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


