/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// UpdateUserQuotaSettingsForView Specifies the parameters to update user quota metadata in a view.
type UpdateUserQuotaSettingsForView struct {
	DefaultUserQuotaPolicy *QuotaPolicy `json:"defaultUserQuotaPolicy,omitempty"`
	// If set, it enables/disables the user quota overrides for a view. Otherwise, it leaves it at it's previous state.
	EnableUserQuota NullableBool `json:"enableUserQuota,omitempty"`
	// If set to true, the default_policy in view metadata will be cleared and the default policy from viewbox will take effect for all users in the view.
	InheritDefaultPolicyFromViewbox NullableBool `json:"inheritDefaultPolicyFromViewbox,omitempty"`
	// View name of input view.
	ViewName NullableString `json:"viewName,omitempty"`
}

// NewUpdateUserQuotaSettingsForView instantiates a new UpdateUserQuotaSettingsForView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateUserQuotaSettingsForView() *UpdateUserQuotaSettingsForView {
	this := UpdateUserQuotaSettingsForView{}
	return &this
}

// NewUpdateUserQuotaSettingsForViewWithDefaults instantiates a new UpdateUserQuotaSettingsForView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateUserQuotaSettingsForViewWithDefaults() *UpdateUserQuotaSettingsForView {
	this := UpdateUserQuotaSettingsForView{}
	return &this
}

// GetDefaultUserQuotaPolicy returns the DefaultUserQuotaPolicy field value if set, zero value otherwise.
func (o *UpdateUserQuotaSettingsForView) GetDefaultUserQuotaPolicy() QuotaPolicy {
	if o == nil || o.DefaultUserQuotaPolicy == nil {
		var ret QuotaPolicy
		return ret
	}
	return *o.DefaultUserQuotaPolicy
}

// GetDefaultUserQuotaPolicyOk returns a tuple with the DefaultUserQuotaPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserQuotaSettingsForView) GetDefaultUserQuotaPolicyOk() (*QuotaPolicy, bool) {
	if o == nil || o.DefaultUserQuotaPolicy == nil {
		return nil, false
	}
	return o.DefaultUserQuotaPolicy, true
}

// HasDefaultUserQuotaPolicy returns a boolean if a field has been set.
func (o *UpdateUserQuotaSettingsForView) HasDefaultUserQuotaPolicy() bool {
	if o != nil && o.DefaultUserQuotaPolicy != nil {
		return true
	}

	return false
}

// SetDefaultUserQuotaPolicy gets a reference to the given QuotaPolicy and assigns it to the DefaultUserQuotaPolicy field.
func (o *UpdateUserQuotaSettingsForView) SetDefaultUserQuotaPolicy(v QuotaPolicy) {
	o.DefaultUserQuotaPolicy = &v
}

// GetEnableUserQuota returns the EnableUserQuota field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateUserQuotaSettingsForView) GetEnableUserQuota() bool {
	if o == nil || o.EnableUserQuota.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableUserQuota.Get()
}

// GetEnableUserQuotaOk returns a tuple with the EnableUserQuota field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateUserQuotaSettingsForView) GetEnableUserQuotaOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableUserQuota.Get(), o.EnableUserQuota.IsSet()
}

// HasEnableUserQuota returns a boolean if a field has been set.
func (o *UpdateUserQuotaSettingsForView) HasEnableUserQuota() bool {
	if o != nil && o.EnableUserQuota.IsSet() {
		return true
	}

	return false
}

// SetEnableUserQuota gets a reference to the given NullableBool and assigns it to the EnableUserQuota field.
func (o *UpdateUserQuotaSettingsForView) SetEnableUserQuota(v bool) {
	o.EnableUserQuota.Set(&v)
}
// SetEnableUserQuotaNil sets the value for EnableUserQuota to be an explicit nil
func (o *UpdateUserQuotaSettingsForView) SetEnableUserQuotaNil() {
	o.EnableUserQuota.Set(nil)
}

// UnsetEnableUserQuota ensures that no value is present for EnableUserQuota, not even an explicit nil
func (o *UpdateUserQuotaSettingsForView) UnsetEnableUserQuota() {
	o.EnableUserQuota.Unset()
}

// GetInheritDefaultPolicyFromViewbox returns the InheritDefaultPolicyFromViewbox field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateUserQuotaSettingsForView) GetInheritDefaultPolicyFromViewbox() bool {
	if o == nil || o.InheritDefaultPolicyFromViewbox.Get() == nil {
		var ret bool
		return ret
	}
	return *o.InheritDefaultPolicyFromViewbox.Get()
}

// GetInheritDefaultPolicyFromViewboxOk returns a tuple with the InheritDefaultPolicyFromViewbox field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateUserQuotaSettingsForView) GetInheritDefaultPolicyFromViewboxOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InheritDefaultPolicyFromViewbox.Get(), o.InheritDefaultPolicyFromViewbox.IsSet()
}

// HasInheritDefaultPolicyFromViewbox returns a boolean if a field has been set.
func (o *UpdateUserQuotaSettingsForView) HasInheritDefaultPolicyFromViewbox() bool {
	if o != nil && o.InheritDefaultPolicyFromViewbox.IsSet() {
		return true
	}

	return false
}

// SetInheritDefaultPolicyFromViewbox gets a reference to the given NullableBool and assigns it to the InheritDefaultPolicyFromViewbox field.
func (o *UpdateUserQuotaSettingsForView) SetInheritDefaultPolicyFromViewbox(v bool) {
	o.InheritDefaultPolicyFromViewbox.Set(&v)
}
// SetInheritDefaultPolicyFromViewboxNil sets the value for InheritDefaultPolicyFromViewbox to be an explicit nil
func (o *UpdateUserQuotaSettingsForView) SetInheritDefaultPolicyFromViewboxNil() {
	o.InheritDefaultPolicyFromViewbox.Set(nil)
}

// UnsetInheritDefaultPolicyFromViewbox ensures that no value is present for InheritDefaultPolicyFromViewbox, not even an explicit nil
func (o *UpdateUserQuotaSettingsForView) UnsetInheritDefaultPolicyFromViewbox() {
	o.InheritDefaultPolicyFromViewbox.Unset()
}

// GetViewName returns the ViewName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateUserQuotaSettingsForView) GetViewName() string {
	if o == nil || o.ViewName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ViewName.Get()
}

// GetViewNameOk returns a tuple with the ViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateUserQuotaSettingsForView) GetViewNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewName.Get(), o.ViewName.IsSet()
}

// HasViewName returns a boolean if a field has been set.
func (o *UpdateUserQuotaSettingsForView) HasViewName() bool {
	if o != nil && o.ViewName.IsSet() {
		return true
	}

	return false
}

// SetViewName gets a reference to the given NullableString and assigns it to the ViewName field.
func (o *UpdateUserQuotaSettingsForView) SetViewName(v string) {
	o.ViewName.Set(&v)
}
// SetViewNameNil sets the value for ViewName to be an explicit nil
func (o *UpdateUserQuotaSettingsForView) SetViewNameNil() {
	o.ViewName.Set(nil)
}

// UnsetViewName ensures that no value is present for ViewName, not even an explicit nil
func (o *UpdateUserQuotaSettingsForView) UnsetViewName() {
	o.ViewName.Unset()
}

func (o UpdateUserQuotaSettingsForView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DefaultUserQuotaPolicy != nil {
		toSerialize["defaultUserQuotaPolicy"] = o.DefaultUserQuotaPolicy
	}
	if o.EnableUserQuota.IsSet() {
		toSerialize["enableUserQuota"] = o.EnableUserQuota.Get()
	}
	if o.InheritDefaultPolicyFromViewbox.IsSet() {
		toSerialize["inheritDefaultPolicyFromViewbox"] = o.InheritDefaultPolicyFromViewbox.Get()
	}
	if o.ViewName.IsSet() {
		toSerialize["viewName"] = o.ViewName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateUserQuotaSettingsForView struct {
	value *UpdateUserQuotaSettingsForView
	isSet bool
}

func (v NullableUpdateUserQuotaSettingsForView) Get() *UpdateUserQuotaSettingsForView {
	return v.value
}

func (v *NullableUpdateUserQuotaSettingsForView) Set(val *UpdateUserQuotaSettingsForView) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateUserQuotaSettingsForView) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateUserQuotaSettingsForView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateUserQuotaSettingsForView(val *UpdateUserQuotaSettingsForView) *NullableUpdateUserQuotaSettingsForView {
	return &NullableUpdateUserQuotaSettingsForView{value: val, isSet: true}
}

func (v NullableUpdateUserQuotaSettingsForView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateUserQuotaSettingsForView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


