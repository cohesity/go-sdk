/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ProtectedObjectsTile Protected Objects information.
type ProtectedObjectsTile struct {
	// Protected Objects breakdown by object type.
	ObjectsProtected []ProtectedObjectsByEnv `json:"objectsProtected,omitempty"`
	// Number of Protected Objects.
	ProtectedCount NullableInt32 `json:"protectedCount,omitempty"`
	// Size of Protected Objects.
	ProtectedSizeBytes NullableInt64 `json:"protectedSizeBytes,omitempty"`
	// Number of Unprotected Objects.
	UnprotectedCount NullableInt32 `json:"unprotectedCount,omitempty"`
	// Size of Unprotected Objects.
	UnprotectedSizeBytes NullableInt64 `json:"unprotectedSizeBytes,omitempty"`
}

// NewProtectedObjectsTile instantiates a new ProtectedObjectsTile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtectedObjectsTile() *ProtectedObjectsTile {
	this := ProtectedObjectsTile{}
	return &this
}

// NewProtectedObjectsTileWithDefaults instantiates a new ProtectedObjectsTile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtectedObjectsTileWithDefaults() *ProtectedObjectsTile {
	this := ProtectedObjectsTile{}
	return &this
}

// GetObjectsProtected returns the ObjectsProtected field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectedObjectsTile) GetObjectsProtected() []ProtectedObjectsByEnv {
	if o == nil  {
		var ret []ProtectedObjectsByEnv
		return ret
	}
	return o.ObjectsProtected
}

// GetObjectsProtectedOk returns a tuple with the ObjectsProtected field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectedObjectsTile) GetObjectsProtectedOk() (*[]ProtectedObjectsByEnv, bool) {
	if o == nil || o.ObjectsProtected == nil {
		return nil, false
	}
	return &o.ObjectsProtected, true
}

// HasObjectsProtected returns a boolean if a field has been set.
func (o *ProtectedObjectsTile) HasObjectsProtected() bool {
	if o != nil && o.ObjectsProtected != nil {
		return true
	}

	return false
}

// SetObjectsProtected gets a reference to the given []ProtectedObjectsByEnv and assigns it to the ObjectsProtected field.
func (o *ProtectedObjectsTile) SetObjectsProtected(v []ProtectedObjectsByEnv) {
	o.ObjectsProtected = v
}

// GetProtectedCount returns the ProtectedCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectedObjectsTile) GetProtectedCount() int32 {
	if o == nil || o.ProtectedCount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.ProtectedCount.Get()
}

// GetProtectedCountOk returns a tuple with the ProtectedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectedObjectsTile) GetProtectedCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProtectedCount.Get(), o.ProtectedCount.IsSet()
}

// HasProtectedCount returns a boolean if a field has been set.
func (o *ProtectedObjectsTile) HasProtectedCount() bool {
	if o != nil && o.ProtectedCount.IsSet() {
		return true
	}

	return false
}

// SetProtectedCount gets a reference to the given NullableInt32 and assigns it to the ProtectedCount field.
func (o *ProtectedObjectsTile) SetProtectedCount(v int32) {
	o.ProtectedCount.Set(&v)
}
// SetProtectedCountNil sets the value for ProtectedCount to be an explicit nil
func (o *ProtectedObjectsTile) SetProtectedCountNil() {
	o.ProtectedCount.Set(nil)
}

// UnsetProtectedCount ensures that no value is present for ProtectedCount, not even an explicit nil
func (o *ProtectedObjectsTile) UnsetProtectedCount() {
	o.ProtectedCount.Unset()
}

// GetProtectedSizeBytes returns the ProtectedSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectedObjectsTile) GetProtectedSizeBytes() int64 {
	if o == nil || o.ProtectedSizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ProtectedSizeBytes.Get()
}

// GetProtectedSizeBytesOk returns a tuple with the ProtectedSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectedObjectsTile) GetProtectedSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProtectedSizeBytes.Get(), o.ProtectedSizeBytes.IsSet()
}

// HasProtectedSizeBytes returns a boolean if a field has been set.
func (o *ProtectedObjectsTile) HasProtectedSizeBytes() bool {
	if o != nil && o.ProtectedSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetProtectedSizeBytes gets a reference to the given NullableInt64 and assigns it to the ProtectedSizeBytes field.
func (o *ProtectedObjectsTile) SetProtectedSizeBytes(v int64) {
	o.ProtectedSizeBytes.Set(&v)
}
// SetProtectedSizeBytesNil sets the value for ProtectedSizeBytes to be an explicit nil
func (o *ProtectedObjectsTile) SetProtectedSizeBytesNil() {
	o.ProtectedSizeBytes.Set(nil)
}

// UnsetProtectedSizeBytes ensures that no value is present for ProtectedSizeBytes, not even an explicit nil
func (o *ProtectedObjectsTile) UnsetProtectedSizeBytes() {
	o.ProtectedSizeBytes.Unset()
}

// GetUnprotectedCount returns the UnprotectedCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectedObjectsTile) GetUnprotectedCount() int32 {
	if o == nil || o.UnprotectedCount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.UnprotectedCount.Get()
}

// GetUnprotectedCountOk returns a tuple with the UnprotectedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectedObjectsTile) GetUnprotectedCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UnprotectedCount.Get(), o.UnprotectedCount.IsSet()
}

// HasUnprotectedCount returns a boolean if a field has been set.
func (o *ProtectedObjectsTile) HasUnprotectedCount() bool {
	if o != nil && o.UnprotectedCount.IsSet() {
		return true
	}

	return false
}

// SetUnprotectedCount gets a reference to the given NullableInt32 and assigns it to the UnprotectedCount field.
func (o *ProtectedObjectsTile) SetUnprotectedCount(v int32) {
	o.UnprotectedCount.Set(&v)
}
// SetUnprotectedCountNil sets the value for UnprotectedCount to be an explicit nil
func (o *ProtectedObjectsTile) SetUnprotectedCountNil() {
	o.UnprotectedCount.Set(nil)
}

// UnsetUnprotectedCount ensures that no value is present for UnprotectedCount, not even an explicit nil
func (o *ProtectedObjectsTile) UnsetUnprotectedCount() {
	o.UnprotectedCount.Unset()
}

// GetUnprotectedSizeBytes returns the UnprotectedSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectedObjectsTile) GetUnprotectedSizeBytes() int64 {
	if o == nil || o.UnprotectedSizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.UnprotectedSizeBytes.Get()
}

// GetUnprotectedSizeBytesOk returns a tuple with the UnprotectedSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectedObjectsTile) GetUnprotectedSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UnprotectedSizeBytes.Get(), o.UnprotectedSizeBytes.IsSet()
}

// HasUnprotectedSizeBytes returns a boolean if a field has been set.
func (o *ProtectedObjectsTile) HasUnprotectedSizeBytes() bool {
	if o != nil && o.UnprotectedSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetUnprotectedSizeBytes gets a reference to the given NullableInt64 and assigns it to the UnprotectedSizeBytes field.
func (o *ProtectedObjectsTile) SetUnprotectedSizeBytes(v int64) {
	o.UnprotectedSizeBytes.Set(&v)
}
// SetUnprotectedSizeBytesNil sets the value for UnprotectedSizeBytes to be an explicit nil
func (o *ProtectedObjectsTile) SetUnprotectedSizeBytesNil() {
	o.UnprotectedSizeBytes.Set(nil)
}

// UnsetUnprotectedSizeBytes ensures that no value is present for UnprotectedSizeBytes, not even an explicit nil
func (o *ProtectedObjectsTile) UnsetUnprotectedSizeBytes() {
	o.UnprotectedSizeBytes.Unset()
}

func (o ProtectedObjectsTile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ObjectsProtected != nil {
		toSerialize["objectsProtected"] = o.ObjectsProtected
	}
	if o.ProtectedCount.IsSet() {
		toSerialize["protectedCount"] = o.ProtectedCount.Get()
	}
	if o.ProtectedSizeBytes.IsSet() {
		toSerialize["protectedSizeBytes"] = o.ProtectedSizeBytes.Get()
	}
	if o.UnprotectedCount.IsSet() {
		toSerialize["unprotectedCount"] = o.UnprotectedCount.Get()
	}
	if o.UnprotectedSizeBytes.IsSet() {
		toSerialize["unprotectedSizeBytes"] = o.UnprotectedSizeBytes.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableProtectedObjectsTile struct {
	value *ProtectedObjectsTile
	isSet bool
}

func (v NullableProtectedObjectsTile) Get() *ProtectedObjectsTile {
	return v.value
}

func (v *NullableProtectedObjectsTile) Set(val *ProtectedObjectsTile) {
	v.value = val
	v.isSet = true
}

func (v NullableProtectedObjectsTile) IsSet() bool {
	return v.isSet
}

func (v *NullableProtectedObjectsTile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtectedObjectsTile(val *ProtectedObjectsTile) *NullableProtectedObjectsTile {
	return &NullableProtectedObjectsTile{value: val, isSet: true}
}

func (v NullableProtectedObjectsTile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtectedObjectsTile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


