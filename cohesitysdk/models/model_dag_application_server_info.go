/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// DagApplicationServerInfo Specifies the information about the status of the Exchange Application Server which is a member of the DAG.
type DagApplicationServerInfo struct {
	// Specifies the fully qualified domain name of the Exchange Server.
	Fqdn NullableString `json:"fqdn,omitempty"`
	// Specifies the Guid of the Exchange Application Server.
	Guid NullableString `json:"guid,omitempty"`
	// Specifies the entity id of the Exchange Application server.
	Id NullableInt64 `json:"id,omitempty"`
	// Specifies the display name of the Exchange Application Server.
	Name NullableString `json:"name,omitempty"`
	// Specifies the entity id of the owner entity of the Exchange Application Server.
	OwnerId NullableInt64 `json:"ownerId,omitempty"`
	// Specifies the status of the registration of the Exchange Application Server. Specifies the status of registration of Exchange Application Server. 'kUnknown' indicates the status is not known. 'kHealthy' indicates the status is healty and is registered as Exchange Server. 'kUnHealthy' indicates the exchange application is registered on the physical server but it is unreachable now. 'kUnregistered' indicates the server is not registered as physical source. 'kUnreachable' indicates the server is not reachable from the cohesity cluster or the cohesity protection server is not installed on the exchange server. 'kDetached' indicates the server is removed from the ExchangeDAG.
	Status NullableString `json:"status,omitempty"`
	// Specifies the total size of all Exchange database copies in all the Exchange Application Servers that are part of the DAG.
	TotalSizeBytes NullableInt64 `json:"totalSizeBytes,omitempty"`
}

// NewDagApplicationServerInfo instantiates a new DagApplicationServerInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDagApplicationServerInfo() *DagApplicationServerInfo {
	this := DagApplicationServerInfo{}
	return &this
}

// NewDagApplicationServerInfoWithDefaults instantiates a new DagApplicationServerInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDagApplicationServerInfoWithDefaults() *DagApplicationServerInfo {
	this := DagApplicationServerInfo{}
	return &this
}

// GetFqdn returns the Fqdn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DagApplicationServerInfo) GetFqdn() string {
	if o == nil || o.Fqdn.Get() == nil {
		var ret string
		return ret
	}
	return *o.Fqdn.Get()
}

// GetFqdnOk returns a tuple with the Fqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DagApplicationServerInfo) GetFqdnOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Fqdn.Get(), o.Fqdn.IsSet()
}

// HasFqdn returns a boolean if a field has been set.
func (o *DagApplicationServerInfo) HasFqdn() bool {
	if o != nil && o.Fqdn.IsSet() {
		return true
	}

	return false
}

// SetFqdn gets a reference to the given NullableString and assigns it to the Fqdn field.
func (o *DagApplicationServerInfo) SetFqdn(v string) {
	o.Fqdn.Set(&v)
}
// SetFqdnNil sets the value for Fqdn to be an explicit nil
func (o *DagApplicationServerInfo) SetFqdnNil() {
	o.Fqdn.Set(nil)
}

// UnsetFqdn ensures that no value is present for Fqdn, not even an explicit nil
func (o *DagApplicationServerInfo) UnsetFqdn() {
	o.Fqdn.Unset()
}

// GetGuid returns the Guid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DagApplicationServerInfo) GetGuid() string {
	if o == nil || o.Guid.Get() == nil {
		var ret string
		return ret
	}
	return *o.Guid.Get()
}

// GetGuidOk returns a tuple with the Guid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DagApplicationServerInfo) GetGuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Guid.Get(), o.Guid.IsSet()
}

// HasGuid returns a boolean if a field has been set.
func (o *DagApplicationServerInfo) HasGuid() bool {
	if o != nil && o.Guid.IsSet() {
		return true
	}

	return false
}

// SetGuid gets a reference to the given NullableString and assigns it to the Guid field.
func (o *DagApplicationServerInfo) SetGuid(v string) {
	o.Guid.Set(&v)
}
// SetGuidNil sets the value for Guid to be an explicit nil
func (o *DagApplicationServerInfo) SetGuidNil() {
	o.Guid.Set(nil)
}

// UnsetGuid ensures that no value is present for Guid, not even an explicit nil
func (o *DagApplicationServerInfo) UnsetGuid() {
	o.Guid.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DagApplicationServerInfo) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DagApplicationServerInfo) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *DagApplicationServerInfo) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *DagApplicationServerInfo) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *DagApplicationServerInfo) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *DagApplicationServerInfo) UnsetId() {
	o.Id.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DagApplicationServerInfo) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DagApplicationServerInfo) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *DagApplicationServerInfo) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *DagApplicationServerInfo) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *DagApplicationServerInfo) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *DagApplicationServerInfo) UnsetName() {
	o.Name.Unset()
}

// GetOwnerId returns the OwnerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DagApplicationServerInfo) GetOwnerId() int64 {
	if o == nil || o.OwnerId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.OwnerId.Get()
}

// GetOwnerIdOk returns a tuple with the OwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DagApplicationServerInfo) GetOwnerIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OwnerId.Get(), o.OwnerId.IsSet()
}

// HasOwnerId returns a boolean if a field has been set.
func (o *DagApplicationServerInfo) HasOwnerId() bool {
	if o != nil && o.OwnerId.IsSet() {
		return true
	}

	return false
}

// SetOwnerId gets a reference to the given NullableInt64 and assigns it to the OwnerId field.
func (o *DagApplicationServerInfo) SetOwnerId(v int64) {
	o.OwnerId.Set(&v)
}
// SetOwnerIdNil sets the value for OwnerId to be an explicit nil
func (o *DagApplicationServerInfo) SetOwnerIdNil() {
	o.OwnerId.Set(nil)
}

// UnsetOwnerId ensures that no value is present for OwnerId, not even an explicit nil
func (o *DagApplicationServerInfo) UnsetOwnerId() {
	o.OwnerId.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DagApplicationServerInfo) GetStatus() string {
	if o == nil || o.Status.Get() == nil {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DagApplicationServerInfo) GetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *DagApplicationServerInfo) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *DagApplicationServerInfo) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *DagApplicationServerInfo) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *DagApplicationServerInfo) UnsetStatus() {
	o.Status.Unset()
}

// GetTotalSizeBytes returns the TotalSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DagApplicationServerInfo) GetTotalSizeBytes() int64 {
	if o == nil || o.TotalSizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TotalSizeBytes.Get()
}

// GetTotalSizeBytesOk returns a tuple with the TotalSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DagApplicationServerInfo) GetTotalSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TotalSizeBytes.Get(), o.TotalSizeBytes.IsSet()
}

// HasTotalSizeBytes returns a boolean if a field has been set.
func (o *DagApplicationServerInfo) HasTotalSizeBytes() bool {
	if o != nil && o.TotalSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetTotalSizeBytes gets a reference to the given NullableInt64 and assigns it to the TotalSizeBytes field.
func (o *DagApplicationServerInfo) SetTotalSizeBytes(v int64) {
	o.TotalSizeBytes.Set(&v)
}
// SetTotalSizeBytesNil sets the value for TotalSizeBytes to be an explicit nil
func (o *DagApplicationServerInfo) SetTotalSizeBytesNil() {
	o.TotalSizeBytes.Set(nil)
}

// UnsetTotalSizeBytes ensures that no value is present for TotalSizeBytes, not even an explicit nil
func (o *DagApplicationServerInfo) UnsetTotalSizeBytes() {
	o.TotalSizeBytes.Unset()
}

func (o DagApplicationServerInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Fqdn.IsSet() {
		toSerialize["fqdn"] = o.Fqdn.Get()
	}
	if o.Guid.IsSet() {
		toSerialize["guid"] = o.Guid.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.OwnerId.IsSet() {
		toSerialize["ownerId"] = o.OwnerId.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.TotalSizeBytes.IsSet() {
		toSerialize["totalSizeBytes"] = o.TotalSizeBytes.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDagApplicationServerInfo struct {
	value *DagApplicationServerInfo
	isSet bool
}

func (v NullableDagApplicationServerInfo) Get() *DagApplicationServerInfo {
	return v.value
}

func (v *NullableDagApplicationServerInfo) Set(val *DagApplicationServerInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDagApplicationServerInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDagApplicationServerInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDagApplicationServerInfo(val *DagApplicationServerInfo) *NullableDagApplicationServerInfo {
	return &NullableDagApplicationServerInfo{value: val, isSet: true}
}

func (v NullableDagApplicationServerInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDagApplicationServerInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


