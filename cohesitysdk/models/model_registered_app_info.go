/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// RegisteredAppInfo struct for RegisteredAppInfo
type RegisteredAppInfo struct {
	// Specifies an authentication error message. This indicates the given credentials are rejected and the registration of the application is not successful.
	AuthenticationErrorMessage NullableString `json:"authenticationErrorMessage,omitempty"`
	// Specifies the status of authenticating to the Protection Source when registering this application with Cohesity Cluster. If the status is 'kFinished' and there is no error, registration is successful. Specifies the status of the authentication during the registration of a Protection Source. 'kPending' indicates the authentication is in progress. 'kScheduled' indicates the authentication is scheduled. 'kFinished' indicates the authentication is completed. 'kRefreshInProgress' indicates the refresh is in progress.
	AuthenticationStatus NullableString `json:"authenticationStatus,omitempty"`
	// Specifies the application environment. Supported environment types such as 'kView', 'kSQL', 'kVMware', etc. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter. 'kVMware' indicates the VMware Protection Source environment. 'kHyperV' indicates the HyperV Protection Source environment. 'kSQL' indicates the SQL Protection Source environment. 'kView' indicates the View Protection Source environment. 'kPuppeteer' indicates the Cohesity's Remote Adapter. 'kPhysical' indicates the physical Protection Source environment. 'kPure' indicates the Pure Storage Protection Source environment. 'Nimble' indicates the Nimble Storage Protection Source environment. 'kAzure' indicates the Microsoft's Azure Protection Source environment. 'kNetapp' indicates the Netapp Protection Source environment. 'kAgent' indicates the Agent Protection Source environment. 'kGenericNas' indicates the Generic Network Attached Storage Protection Source environment. 'kAcropolis' indicates the Acropolis Protection Source environment. 'kPhsicalFiles' indicates the Physical Files Protection Source environment. 'kIsilon' indicates the Dell EMC's Isilon Protection Source environment. 'kGPFS' indicates IBM's GPFS Protection Source environment. 'kKVM' indicates the KVM Protection Source environment. 'kAWS' indicates the AWS Protection Source environment. 'kExchange' indicates the Exchange Protection Source environment. 'kHyperVVSS' indicates the HyperV VSS Protection Source environment. 'kOracle' indicates the Oracle Protection Source environment. 'kGCP' indicates the Google Cloud Platform Protection Source environment. 'kFlashBlade' indicates the Flash Blade Protection Source environment. 'kAWSNative' indicates the AWS Native Protection Source environment. 'kO365' indicates the Office 365 Protection Source environment. 'kO365Outlook' indicates Office 365 outlook Protection Source environment. 'kHyperFlex' indicates the Hyper Flex Protection Source environment. 'kGCPNative' indicates the GCP Native Protection Source environment. 'kAzureNative' indicates the Azure Native Protection Source environment. 'kKubernetes' indicates a Kubernetes Protection Source environment. 'kElastifile' indicates Elastifile Protection Source environment. 'kAD' indicates Active Directory Protection Source environment. 'kRDSSnapshotManager' indicates AWS RDS Protection Source environment. 'kCassandra' indicates Cassandra Protection Source environment. 'kMongoDB' indicates MongoDB Protection Source environment. 'kCouchbase' indicates Couchbase Protection Source environment. 'kHdfs' indicates Hdfs Protection Source environment. 'kHive' indicates Hive Protection Source environment. 'kHBase' indicates HBase Protection Source environment.
	Environment NullableString `json:"environment,omitempty"`
	// Specifies the list of check results internally performed to verify status of various services such as 'AgnetRunning', 'SQLWriterRunning' etc.
	HostSettingsCheckResults []HostSettingsCheckResult `json:"hostSettingsCheckResults,omitempty"`
	// Specifies a message if there was any error encountered during the last rebuild of the application tree. If there was no error during the last rebuild, this field is reset.
	RefreshErrorMessage NullableString `json:"refreshErrorMessage,omitempty"`
}

// NewRegisteredAppInfo instantiates a new RegisteredAppInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisteredAppInfo() *RegisteredAppInfo {
	this := RegisteredAppInfo{}
	return &this
}

// NewRegisteredAppInfoWithDefaults instantiates a new RegisteredAppInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisteredAppInfoWithDefaults() *RegisteredAppInfo {
	this := RegisteredAppInfo{}
	return &this
}

// GetAuthenticationErrorMessage returns the AuthenticationErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredAppInfo) GetAuthenticationErrorMessage() string {
	if o == nil || o.AuthenticationErrorMessage.Get() == nil {
		var ret string
		return ret
	}
	return *o.AuthenticationErrorMessage.Get()
}

// GetAuthenticationErrorMessageOk returns a tuple with the AuthenticationErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredAppInfo) GetAuthenticationErrorMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AuthenticationErrorMessage.Get(), o.AuthenticationErrorMessage.IsSet()
}

// HasAuthenticationErrorMessage returns a boolean if a field has been set.
func (o *RegisteredAppInfo) HasAuthenticationErrorMessage() bool {
	if o != nil && o.AuthenticationErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetAuthenticationErrorMessage gets a reference to the given NullableString and assigns it to the AuthenticationErrorMessage field.
func (o *RegisteredAppInfo) SetAuthenticationErrorMessage(v string) {
	o.AuthenticationErrorMessage.Set(&v)
}
// SetAuthenticationErrorMessageNil sets the value for AuthenticationErrorMessage to be an explicit nil
func (o *RegisteredAppInfo) SetAuthenticationErrorMessageNil() {
	o.AuthenticationErrorMessage.Set(nil)
}

// UnsetAuthenticationErrorMessage ensures that no value is present for AuthenticationErrorMessage, not even an explicit nil
func (o *RegisteredAppInfo) UnsetAuthenticationErrorMessage() {
	o.AuthenticationErrorMessage.Unset()
}

// GetAuthenticationStatus returns the AuthenticationStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredAppInfo) GetAuthenticationStatus() string {
	if o == nil || o.AuthenticationStatus.Get() == nil {
		var ret string
		return ret
	}
	return *o.AuthenticationStatus.Get()
}

// GetAuthenticationStatusOk returns a tuple with the AuthenticationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredAppInfo) GetAuthenticationStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AuthenticationStatus.Get(), o.AuthenticationStatus.IsSet()
}

// HasAuthenticationStatus returns a boolean if a field has been set.
func (o *RegisteredAppInfo) HasAuthenticationStatus() bool {
	if o != nil && o.AuthenticationStatus.IsSet() {
		return true
	}

	return false
}

// SetAuthenticationStatus gets a reference to the given NullableString and assigns it to the AuthenticationStatus field.
func (o *RegisteredAppInfo) SetAuthenticationStatus(v string) {
	o.AuthenticationStatus.Set(&v)
}
// SetAuthenticationStatusNil sets the value for AuthenticationStatus to be an explicit nil
func (o *RegisteredAppInfo) SetAuthenticationStatusNil() {
	o.AuthenticationStatus.Set(nil)
}

// UnsetAuthenticationStatus ensures that no value is present for AuthenticationStatus, not even an explicit nil
func (o *RegisteredAppInfo) UnsetAuthenticationStatus() {
	o.AuthenticationStatus.Unset()
}

// GetEnvironment returns the Environment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredAppInfo) GetEnvironment() string {
	if o == nil || o.Environment.Get() == nil {
		var ret string
		return ret
	}
	return *o.Environment.Get()
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredAppInfo) GetEnvironmentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Environment.Get(), o.Environment.IsSet()
}

// HasEnvironment returns a boolean if a field has been set.
func (o *RegisteredAppInfo) HasEnvironment() bool {
	if o != nil && o.Environment.IsSet() {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given NullableString and assigns it to the Environment field.
func (o *RegisteredAppInfo) SetEnvironment(v string) {
	o.Environment.Set(&v)
}
// SetEnvironmentNil sets the value for Environment to be an explicit nil
func (o *RegisteredAppInfo) SetEnvironmentNil() {
	o.Environment.Set(nil)
}

// UnsetEnvironment ensures that no value is present for Environment, not even an explicit nil
func (o *RegisteredAppInfo) UnsetEnvironment() {
	o.Environment.Unset()
}

// GetHostSettingsCheckResults returns the HostSettingsCheckResults field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredAppInfo) GetHostSettingsCheckResults() []HostSettingsCheckResult {
	if o == nil  {
		var ret []HostSettingsCheckResult
		return ret
	}
	return o.HostSettingsCheckResults
}

// GetHostSettingsCheckResultsOk returns a tuple with the HostSettingsCheckResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredAppInfo) GetHostSettingsCheckResultsOk() (*[]HostSettingsCheckResult, bool) {
	if o == nil || o.HostSettingsCheckResults == nil {
		return nil, false
	}
	return &o.HostSettingsCheckResults, true
}

// HasHostSettingsCheckResults returns a boolean if a field has been set.
func (o *RegisteredAppInfo) HasHostSettingsCheckResults() bool {
	if o != nil && o.HostSettingsCheckResults != nil {
		return true
	}

	return false
}

// SetHostSettingsCheckResults gets a reference to the given []HostSettingsCheckResult and assigns it to the HostSettingsCheckResults field.
func (o *RegisteredAppInfo) SetHostSettingsCheckResults(v []HostSettingsCheckResult) {
	o.HostSettingsCheckResults = v
}

// GetRefreshErrorMessage returns the RefreshErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredAppInfo) GetRefreshErrorMessage() string {
	if o == nil || o.RefreshErrorMessage.Get() == nil {
		var ret string
		return ret
	}
	return *o.RefreshErrorMessage.Get()
}

// GetRefreshErrorMessageOk returns a tuple with the RefreshErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredAppInfo) GetRefreshErrorMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RefreshErrorMessage.Get(), o.RefreshErrorMessage.IsSet()
}

// HasRefreshErrorMessage returns a boolean if a field has been set.
func (o *RegisteredAppInfo) HasRefreshErrorMessage() bool {
	if o != nil && o.RefreshErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetRefreshErrorMessage gets a reference to the given NullableString and assigns it to the RefreshErrorMessage field.
func (o *RegisteredAppInfo) SetRefreshErrorMessage(v string) {
	o.RefreshErrorMessage.Set(&v)
}
// SetRefreshErrorMessageNil sets the value for RefreshErrorMessage to be an explicit nil
func (o *RegisteredAppInfo) SetRefreshErrorMessageNil() {
	o.RefreshErrorMessage.Set(nil)
}

// UnsetRefreshErrorMessage ensures that no value is present for RefreshErrorMessage, not even an explicit nil
func (o *RegisteredAppInfo) UnsetRefreshErrorMessage() {
	o.RefreshErrorMessage.Unset()
}

func (o RegisteredAppInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AuthenticationErrorMessage.IsSet() {
		toSerialize["authenticationErrorMessage"] = o.AuthenticationErrorMessage.Get()
	}
	if o.AuthenticationStatus.IsSet() {
		toSerialize["authenticationStatus"] = o.AuthenticationStatus.Get()
	}
	if o.Environment.IsSet() {
		toSerialize["environment"] = o.Environment.Get()
	}
	if o.HostSettingsCheckResults != nil {
		toSerialize["hostSettingsCheckResults"] = o.HostSettingsCheckResults
	}
	if o.RefreshErrorMessage.IsSet() {
		toSerialize["refreshErrorMessage"] = o.RefreshErrorMessage.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRegisteredAppInfo struct {
	value *RegisteredAppInfo
	isSet bool
}

func (v NullableRegisteredAppInfo) Get() *RegisteredAppInfo {
	return v.value
}

func (v *NullableRegisteredAppInfo) Set(val *RegisteredAppInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisteredAppInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisteredAppInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisteredAppInfo(val *RegisteredAppInfo) *NullableRegisteredAppInfo {
	return &NullableRegisteredAppInfo{value: val, isSet: true}
}

func (v NullableRegisteredAppInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisteredAppInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


