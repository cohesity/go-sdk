/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// Office365UserInfo Specifies information about an Office365 user.
type Office365UserInfo struct {
	// Specifies the city in which the Office365 user is located.
	City NullableString `json:"city,omitempty"`
	// Specifies the country/region in which the Office365 user is located.
	Country NullableString `json:"country,omitempty"`
	// Specifies the department within the enterprise of the Office365 user.
	Department NullableString `json:"department,omitempty"`
	// Specifies the designation of the Office365 user.
	Designation NullableString `json:"designation,omitempty"`
	// Specifies the MS Graph UUID for the given user entity.
	GraphUuid NullableString `json:"graphUuid,omitempty"`
	// Specifies the size of the Outlook Mailbox associated with this Office365 entity.
	MailboxSize NullableInt64 `json:"mailboxSize,omitempty"`
	// Specifies the Id of the OneDrive associated with the this Office 365 entity.
	OneDriveId NullableString `json:"oneDriveId,omitempty"`
	// Specifies the size of the OneDrive associated with this Office365 entity.
	OneDriveSize NullableInt64 `json:"oneDriveSize,omitempty"`
}

// NewOffice365UserInfo instantiates a new Office365UserInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOffice365UserInfo() *Office365UserInfo {
	this := Office365UserInfo{}
	return &this
}

// NewOffice365UserInfoWithDefaults instantiates a new Office365UserInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOffice365UserInfoWithDefaults() *Office365UserInfo {
	this := Office365UserInfo{}
	return &this
}

// GetCity returns the City field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Office365UserInfo) GetCity() string {
	if o == nil || o.City.Get() == nil {
		var ret string
		return ret
	}
	return *o.City.Get()
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Office365UserInfo) GetCityOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.City.Get(), o.City.IsSet()
}

// HasCity returns a boolean if a field has been set.
func (o *Office365UserInfo) HasCity() bool {
	if o != nil && o.City.IsSet() {
		return true
	}

	return false
}

// SetCity gets a reference to the given NullableString and assigns it to the City field.
func (o *Office365UserInfo) SetCity(v string) {
	o.City.Set(&v)
}
// SetCityNil sets the value for City to be an explicit nil
func (o *Office365UserInfo) SetCityNil() {
	o.City.Set(nil)
}

// UnsetCity ensures that no value is present for City, not even an explicit nil
func (o *Office365UserInfo) UnsetCity() {
	o.City.Unset()
}

// GetCountry returns the Country field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Office365UserInfo) GetCountry() string {
	if o == nil || o.Country.Get() == nil {
		var ret string
		return ret
	}
	return *o.Country.Get()
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Office365UserInfo) GetCountryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Country.Get(), o.Country.IsSet()
}

// HasCountry returns a boolean if a field has been set.
func (o *Office365UserInfo) HasCountry() bool {
	if o != nil && o.Country.IsSet() {
		return true
	}

	return false
}

// SetCountry gets a reference to the given NullableString and assigns it to the Country field.
func (o *Office365UserInfo) SetCountry(v string) {
	o.Country.Set(&v)
}
// SetCountryNil sets the value for Country to be an explicit nil
func (o *Office365UserInfo) SetCountryNil() {
	o.Country.Set(nil)
}

// UnsetCountry ensures that no value is present for Country, not even an explicit nil
func (o *Office365UserInfo) UnsetCountry() {
	o.Country.Unset()
}

// GetDepartment returns the Department field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Office365UserInfo) GetDepartment() string {
	if o == nil || o.Department.Get() == nil {
		var ret string
		return ret
	}
	return *o.Department.Get()
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Office365UserInfo) GetDepartmentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Department.Get(), o.Department.IsSet()
}

// HasDepartment returns a boolean if a field has been set.
func (o *Office365UserInfo) HasDepartment() bool {
	if o != nil && o.Department.IsSet() {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given NullableString and assigns it to the Department field.
func (o *Office365UserInfo) SetDepartment(v string) {
	o.Department.Set(&v)
}
// SetDepartmentNil sets the value for Department to be an explicit nil
func (o *Office365UserInfo) SetDepartmentNil() {
	o.Department.Set(nil)
}

// UnsetDepartment ensures that no value is present for Department, not even an explicit nil
func (o *Office365UserInfo) UnsetDepartment() {
	o.Department.Unset()
}

// GetDesignation returns the Designation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Office365UserInfo) GetDesignation() string {
	if o == nil || o.Designation.Get() == nil {
		var ret string
		return ret
	}
	return *o.Designation.Get()
}

// GetDesignationOk returns a tuple with the Designation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Office365UserInfo) GetDesignationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Designation.Get(), o.Designation.IsSet()
}

// HasDesignation returns a boolean if a field has been set.
func (o *Office365UserInfo) HasDesignation() bool {
	if o != nil && o.Designation.IsSet() {
		return true
	}

	return false
}

// SetDesignation gets a reference to the given NullableString and assigns it to the Designation field.
func (o *Office365UserInfo) SetDesignation(v string) {
	o.Designation.Set(&v)
}
// SetDesignationNil sets the value for Designation to be an explicit nil
func (o *Office365UserInfo) SetDesignationNil() {
	o.Designation.Set(nil)
}

// UnsetDesignation ensures that no value is present for Designation, not even an explicit nil
func (o *Office365UserInfo) UnsetDesignation() {
	o.Designation.Unset()
}

// GetGraphUuid returns the GraphUuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Office365UserInfo) GetGraphUuid() string {
	if o == nil || o.GraphUuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.GraphUuid.Get()
}

// GetGraphUuidOk returns a tuple with the GraphUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Office365UserInfo) GetGraphUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.GraphUuid.Get(), o.GraphUuid.IsSet()
}

// HasGraphUuid returns a boolean if a field has been set.
func (o *Office365UserInfo) HasGraphUuid() bool {
	if o != nil && o.GraphUuid.IsSet() {
		return true
	}

	return false
}

// SetGraphUuid gets a reference to the given NullableString and assigns it to the GraphUuid field.
func (o *Office365UserInfo) SetGraphUuid(v string) {
	o.GraphUuid.Set(&v)
}
// SetGraphUuidNil sets the value for GraphUuid to be an explicit nil
func (o *Office365UserInfo) SetGraphUuidNil() {
	o.GraphUuid.Set(nil)
}

// UnsetGraphUuid ensures that no value is present for GraphUuid, not even an explicit nil
func (o *Office365UserInfo) UnsetGraphUuid() {
	o.GraphUuid.Unset()
}

// GetMailboxSize returns the MailboxSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Office365UserInfo) GetMailboxSize() int64 {
	if o == nil || o.MailboxSize.Get() == nil {
		var ret int64
		return ret
	}
	return *o.MailboxSize.Get()
}

// GetMailboxSizeOk returns a tuple with the MailboxSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Office365UserInfo) GetMailboxSizeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MailboxSize.Get(), o.MailboxSize.IsSet()
}

// HasMailboxSize returns a boolean if a field has been set.
func (o *Office365UserInfo) HasMailboxSize() bool {
	if o != nil && o.MailboxSize.IsSet() {
		return true
	}

	return false
}

// SetMailboxSize gets a reference to the given NullableInt64 and assigns it to the MailboxSize field.
func (o *Office365UserInfo) SetMailboxSize(v int64) {
	o.MailboxSize.Set(&v)
}
// SetMailboxSizeNil sets the value for MailboxSize to be an explicit nil
func (o *Office365UserInfo) SetMailboxSizeNil() {
	o.MailboxSize.Set(nil)
}

// UnsetMailboxSize ensures that no value is present for MailboxSize, not even an explicit nil
func (o *Office365UserInfo) UnsetMailboxSize() {
	o.MailboxSize.Unset()
}

// GetOneDriveId returns the OneDriveId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Office365UserInfo) GetOneDriveId() string {
	if o == nil || o.OneDriveId.Get() == nil {
		var ret string
		return ret
	}
	return *o.OneDriveId.Get()
}

// GetOneDriveIdOk returns a tuple with the OneDriveId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Office365UserInfo) GetOneDriveIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OneDriveId.Get(), o.OneDriveId.IsSet()
}

// HasOneDriveId returns a boolean if a field has been set.
func (o *Office365UserInfo) HasOneDriveId() bool {
	if o != nil && o.OneDriveId.IsSet() {
		return true
	}

	return false
}

// SetOneDriveId gets a reference to the given NullableString and assigns it to the OneDriveId field.
func (o *Office365UserInfo) SetOneDriveId(v string) {
	o.OneDriveId.Set(&v)
}
// SetOneDriveIdNil sets the value for OneDriveId to be an explicit nil
func (o *Office365UserInfo) SetOneDriveIdNil() {
	o.OneDriveId.Set(nil)
}

// UnsetOneDriveId ensures that no value is present for OneDriveId, not even an explicit nil
func (o *Office365UserInfo) UnsetOneDriveId() {
	o.OneDriveId.Unset()
}

// GetOneDriveSize returns the OneDriveSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Office365UserInfo) GetOneDriveSize() int64 {
	if o == nil || o.OneDriveSize.Get() == nil {
		var ret int64
		return ret
	}
	return *o.OneDriveSize.Get()
}

// GetOneDriveSizeOk returns a tuple with the OneDriveSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Office365UserInfo) GetOneDriveSizeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OneDriveSize.Get(), o.OneDriveSize.IsSet()
}

// HasOneDriveSize returns a boolean if a field has been set.
func (o *Office365UserInfo) HasOneDriveSize() bool {
	if o != nil && o.OneDriveSize.IsSet() {
		return true
	}

	return false
}

// SetOneDriveSize gets a reference to the given NullableInt64 and assigns it to the OneDriveSize field.
func (o *Office365UserInfo) SetOneDriveSize(v int64) {
	o.OneDriveSize.Set(&v)
}
// SetOneDriveSizeNil sets the value for OneDriveSize to be an explicit nil
func (o *Office365UserInfo) SetOneDriveSizeNil() {
	o.OneDriveSize.Set(nil)
}

// UnsetOneDriveSize ensures that no value is present for OneDriveSize, not even an explicit nil
func (o *Office365UserInfo) UnsetOneDriveSize() {
	o.OneDriveSize.Unset()
}

func (o Office365UserInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.City.IsSet() {
		toSerialize["city"] = o.City.Get()
	}
	if o.Country.IsSet() {
		toSerialize["country"] = o.Country.Get()
	}
	if o.Department.IsSet() {
		toSerialize["department"] = o.Department.Get()
	}
	if o.Designation.IsSet() {
		toSerialize["designation"] = o.Designation.Get()
	}
	if o.GraphUuid.IsSet() {
		toSerialize["graphUuid"] = o.GraphUuid.Get()
	}
	if o.MailboxSize.IsSet() {
		toSerialize["mailboxSize"] = o.MailboxSize.Get()
	}
	if o.OneDriveId.IsSet() {
		toSerialize["oneDriveId"] = o.OneDriveId.Get()
	}
	if o.OneDriveSize.IsSet() {
		toSerialize["oneDriveSize"] = o.OneDriveSize.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableOffice365UserInfo struct {
	value *Office365UserInfo
	isSet bool
}

func (v NullableOffice365UserInfo) Get() *Office365UserInfo {
	return v.value
}

func (v *NullableOffice365UserInfo) Set(val *Office365UserInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableOffice365UserInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableOffice365UserInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOffice365UserInfo(val *Office365UserInfo) *NullableOffice365UserInfo {
	return &NullableOffice365UserInfo{value: val, isSet: true}
}

func (v NullableOffice365UserInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOffice365UserInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


