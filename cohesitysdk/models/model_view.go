/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// View Specifies settings for defining a storage location (called a View) with NFS and SMB mount paths in a Storage Domain (View Box) on the Cohesity Cluster.
type View struct {
	// Array of Security Identifiers (SIDs)  Specifies the list of security identifiers (SIDs) for the restricted Principals who have access to this View.
	AccessSids []string `json:"accessSids,omitempty"`
	// Aliases created for the view. A view alias allows a directory path inside a view to be mounted using the alias name.
	Aliases []ViewAlias `json:"aliases,omitempty"`
	// Array of SMB Paths.  Specifies the possible paths that can be used to mount this View as a SMB share. If Active Directory has multiple account names; each machine account has its own path.
	AllSmbMountPaths []string `json:"allSmbMountPaths,omitempty"`
	AntivirusScanConfig *AntivirusScanConfig `json:"antivirusScanConfig,omitempty"`
	// Specifies the NFS mount path of the View (without the hostname information). This path is used to support NFS mounting of the paths specified in the nfsExportPathList on Windows systems.
	BasicMountPath NullableString `json:"basicMountPath,omitempty"`
	// Specifies whether to support case insensitive file/folder names. This parameter can only be set during create and cannot be changed.
	CaseInsensitiveNamesEnabled NullableBool `json:"caseInsensitiveNamesEnabled,omitempty"`
	// Specifies the time that the View was created in milliseconds.
	CreateTimeMsecs NullableInt64 `json:"createTimeMsecs,omitempty"`
	// DataLock (Write Once Read Many) lock expiry epoch time in microseconds. If a view is marked as a DataLock view, only a Data Security Officer (a user having Data Security Privilege) can delete the view until the lock expiry time.
	DataLockExpiryUsecs NullableInt64 `json:"dataLockExpiryUsecs,omitempty"`
	// Specifies an optional text description about the View.
	Description NullableString `json:"description,omitempty"`
	// Specifies whether fast durable handle is enabled. If enabled, view open handle will be kept in memory, which results in a higher performance. But the handles cannot be recovered if node or service crashes.
	EnableFastDurableHandle NullableBool `json:"enableFastDurableHandle,omitempty"`
	// Specifies if Filer Audit Logging is enabled for this view.
	EnableFilerAuditLogging NullableBool `json:"enableFilerAuditLogging,omitempty"`
	// Specifies whether to enable live indexing for the view.
	EnableLiveIndexing NullableBool `json:"enableLiveIndexing,omitempty"`
	// If set, mixed mode (NFS and SMB) access is enabled for this view. This field is deprecated. Use the field SecurityMode. deprecated: true
	EnableMixedModePermissions NullableBool `json:"enableMixedModePermissions,omitempty"`
	// If set, it enables discovery of view for NFS.
	EnableNfsViewDiscovery NullableBool `json:"enableNfsViewDiscovery,omitempty"`
	// Specifies whether to enable offline file caching of the view.
	EnableOfflineCaching NullableBool `json:"enableOfflineCaching,omitempty"`
	// Specifies if access-based enumeration should be enabled. If 'true', only files and folders that the user has permissions to access are visible on the SMB share for that user.
	EnableSmbAccessBasedEnumeration NullableBool `json:"enableSmbAccessBasedEnumeration,omitempty"`
	// Specifies the SMB encryption for the View. If set, it enables the SMB encryption for the View. Encryption is supported only by SMB 3.x dialects. Dialects that do not support would still access data in unencrypted format.
	EnableSmbEncryption NullableBool `json:"enableSmbEncryption,omitempty"`
	// Specifies whether SMB opportunistic lock is enabled.
	EnableSmbOplock NullableBool `json:"enableSmbOplock,omitempty"`
	// If set, it enables discovery of view for SMB.
	EnableSmbViewDiscovery NullableBool `json:"enableSmbViewDiscovery,omitempty"`
	// Specifies the SMB encryption for all the sessions for the View. If set, encryption is enforced for all the sessions for the View. When enabled all future and existing unencrypted sessions are disallowed.
	EnforceSmbEncryption NullableBool `json:"enforceSmbEncryption,omitempty"`
	FileExtensionFilter *FileExtensionFilter `json:"fileExtensionFilter,omitempty"`
	FileLockConfig *FileLevelDataLockConfig `json:"fileLockConfig,omitempty"`
	// Specifies if a view contains migrated data.
	IsTargetForMigratedData NullableBool `json:"isTargetForMigratedData,omitempty"`
	// Specifies an optional logical quota limit (in bytes) for the usage allowed on this View. (Logical data is when the data is fully hydrated and expanded.) This limit overrides the limit inherited from the Storage Domain (View Box) (if set). If logicalQuota is nil, the limit is inherited from the Storage Domain (View Box) (if set). A new write is not allowed if the Storage Domain (View Box) will exceed the specified quota. However, it takes time for the Cohesity Cluster to calculate the usage across Nodes, so the limit may be exceeded by a small amount. In addition, if the limit is increased or data is removed, there may be a delay before the Cohesity Cluster allows more data to be written to the View, as the Cluster is calculating the usage across Nodes.
	LogicalQuota NullableQuotaPolicy `json:"logicalQuota,omitempty"`
	// LogicalUsageBytes is the logical usage in bytes for the view.
	LogicalUsageBytes NullableInt64 `json:"logicalUsageBytes,omitempty"`
	// Specifies the name of the View.
	Name NullableString `json:"name,omitempty"`
	// Array of Netgroups.  Specifies a list of Netgroups that have permissions to access the View. (Overrides the Netgroups specified at the global Cohesity Cluster level.)
	NetgroupWhitelist []NisNetgroup `json:"netgroupWhitelist,omitempty"`
	NfsAllSquash *NfsSquash `json:"nfsAllSquash,omitempty"`
	// Specifies the path for mounting this View as an NFS share.
	NfsMountPath NullableString `json:"nfsMountPath,omitempty"`
	NfsRootPermissions *NfsRootPermissions `json:"nfsRootPermissions,omitempty"`
	NfsRootSquash *NfsSquash `json:"nfsRootSquash,omitempty"`
	// Specifies whether view level client netgroup whitelist overrides cluster and global setting.
	OverrideGlobalNetgroupWhitelist NullableBool `json:"overrideGlobalNetgroupWhitelist,omitempty"`
	// Specifies whether view level client subnet whitelist overrides cluster and global setting.
	OverrideGlobalWhitelist NullableBool `json:"overrideGlobalWhitelist,omitempty"`
	// Specifies the supported Protocols for the View. 'kAll' enables protocol access to following three views: NFS, SMB and S3. 'kNFSOnly' enables protocol access to NFS only. 'kSMBOnly' enables protocol access to SMB only. 'kS3Only' enables protocol access to S3 only. 'kSwiftOnly' enables protocol access to Swift only.
	ProtocolAccess NullableString `json:"protocolAccess,omitempty"`
	Qos *QoS `json:"qos,omitempty"`
	// Specifies the path to access this View as an S3 share.
	S3AccessPath NullableString `json:"s3AccessPath,omitempty"`
	// Specifies the S3 key mapping config of the view. This parameter can only be set during create and cannot be changed. Configuration of S3 key mapping.  Specifies the type of S3 key mapping config.
	S3KeyMappingConfig NullableString `json:"s3KeyMappingConfig,omitempty"`
	// Specifies the security mode used for this view. Currently we support the following modes: Native, Unified and NTFS style. 'kNativeMode' indicates a native security mode. 'kUnifiedMode' indicates a unified security mode. 'kNtfsMode' indicates a NTFS style security mode.
	SecurityMode NullableString `json:"securityMode,omitempty"`
	// Specifies a list of share level permissions.
	SharePermissions []SmbPermission `json:"sharePermissions,omitempty"`
	// Specifies the main path for mounting this View as an SMB share.
	SmbMountPath NullableString `json:"smbMountPath,omitempty"`
	SmbPermissionsInfo *SmbPermissionsInfo `json:"smbPermissionsInfo,omitempty"`
	Stats *ViewStats `json:"stats,omitempty"`
	StoragePolicyOverride *StoragePolicyOverride `json:"storagePolicyOverride,omitempty"`
	// Array of Subnets.  Specifies a list of Subnets with IP addresses that have permissions to access the View. (Overrides the Subnets specified at the global Cohesity Cluster level.)
	SubnetWhitelist []Subnet `json:"subnetWhitelist,omitempty"`
	// Specifies the Keystone project domain.
	SwiftProjectDomain NullableString `json:"swiftProjectDomain,omitempty"`
	// Specifies the Keystone project name.
	SwiftProjectName NullableString `json:"swiftProjectName,omitempty"`
	// Specifies the Keystone user domain.
	SwiftUserDomain NullableString `json:"swiftUserDomain,omitempty"`
	// Specifies the Keystone username.
	SwiftUsername NullableString `json:"swiftUsername,omitempty"`
	// Optional tenant id who has access to this View.
	TenantId NullableString `json:"tenantId,omitempty"`
	// Specifies the id of the Storage Domain (View Box) where the View is stored.
	ViewBoxId NullableInt64 `json:"viewBoxId,omitempty"`
	// Specifies the name of the Storage Domain (View Box) where the View is stored.
	ViewBoxName NullableString `json:"viewBoxName,omitempty"`
	// Specifies an id of the View assigned by the Cohesity Cluster.
	ViewId NullableInt64 `json:"viewId,omitempty"`
	// Specifies whether view lock is enabled. If enabled the view cannot be modified or deleted until unlock. By default it is disabled.
	ViewLockEnabled NullableBool `json:"viewLockEnabled,omitempty"`
	ViewProtection *ViewProtection `json:"viewProtection,omitempty"`
}

// NewView instantiates a new View object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewView() *View {
	this := View{}
	return &this
}

// NewViewWithDefaults instantiates a new View object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewWithDefaults() *View {
	this := View{}
	return &this
}

// GetAccessSids returns the AccessSids field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetAccessSids() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.AccessSids
}

// GetAccessSidsOk returns a tuple with the AccessSids field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetAccessSidsOk() (*[]string, bool) {
	if o == nil || o.AccessSids == nil {
		return nil, false
	}
	return &o.AccessSids, true
}

// HasAccessSids returns a boolean if a field has been set.
func (o *View) HasAccessSids() bool {
	if o != nil && o.AccessSids != nil {
		return true
	}

	return false
}

// SetAccessSids gets a reference to the given []string and assigns it to the AccessSids field.
func (o *View) SetAccessSids(v []string) {
	o.AccessSids = v
}

// GetAliases returns the Aliases field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetAliases() []ViewAlias {
	if o == nil  {
		var ret []ViewAlias
		return ret
	}
	return o.Aliases
}

// GetAliasesOk returns a tuple with the Aliases field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetAliasesOk() (*[]ViewAlias, bool) {
	if o == nil || o.Aliases == nil {
		return nil, false
	}
	return &o.Aliases, true
}

// HasAliases returns a boolean if a field has been set.
func (o *View) HasAliases() bool {
	if o != nil && o.Aliases != nil {
		return true
	}

	return false
}

// SetAliases gets a reference to the given []ViewAlias and assigns it to the Aliases field.
func (o *View) SetAliases(v []ViewAlias) {
	o.Aliases = v
}

// GetAllSmbMountPaths returns the AllSmbMountPaths field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetAllSmbMountPaths() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.AllSmbMountPaths
}

// GetAllSmbMountPathsOk returns a tuple with the AllSmbMountPaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetAllSmbMountPathsOk() (*[]string, bool) {
	if o == nil || o.AllSmbMountPaths == nil {
		return nil, false
	}
	return &o.AllSmbMountPaths, true
}

// HasAllSmbMountPaths returns a boolean if a field has been set.
func (o *View) HasAllSmbMountPaths() bool {
	if o != nil && o.AllSmbMountPaths != nil {
		return true
	}

	return false
}

// SetAllSmbMountPaths gets a reference to the given []string and assigns it to the AllSmbMountPaths field.
func (o *View) SetAllSmbMountPaths(v []string) {
	o.AllSmbMountPaths = v
}

// GetAntivirusScanConfig returns the AntivirusScanConfig field value if set, zero value otherwise.
func (o *View) GetAntivirusScanConfig() AntivirusScanConfig {
	if o == nil || o.AntivirusScanConfig == nil {
		var ret AntivirusScanConfig
		return ret
	}
	return *o.AntivirusScanConfig
}

// GetAntivirusScanConfigOk returns a tuple with the AntivirusScanConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetAntivirusScanConfigOk() (*AntivirusScanConfig, bool) {
	if o == nil || o.AntivirusScanConfig == nil {
		return nil, false
	}
	return o.AntivirusScanConfig, true
}

// HasAntivirusScanConfig returns a boolean if a field has been set.
func (o *View) HasAntivirusScanConfig() bool {
	if o != nil && o.AntivirusScanConfig != nil {
		return true
	}

	return false
}

// SetAntivirusScanConfig gets a reference to the given AntivirusScanConfig and assigns it to the AntivirusScanConfig field.
func (o *View) SetAntivirusScanConfig(v AntivirusScanConfig) {
	o.AntivirusScanConfig = &v
}

// GetBasicMountPath returns the BasicMountPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetBasicMountPath() string {
	if o == nil || o.BasicMountPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.BasicMountPath.Get()
}

// GetBasicMountPathOk returns a tuple with the BasicMountPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetBasicMountPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BasicMountPath.Get(), o.BasicMountPath.IsSet()
}

// HasBasicMountPath returns a boolean if a field has been set.
func (o *View) HasBasicMountPath() bool {
	if o != nil && o.BasicMountPath.IsSet() {
		return true
	}

	return false
}

// SetBasicMountPath gets a reference to the given NullableString and assigns it to the BasicMountPath field.
func (o *View) SetBasicMountPath(v string) {
	o.BasicMountPath.Set(&v)
}
// SetBasicMountPathNil sets the value for BasicMountPath to be an explicit nil
func (o *View) SetBasicMountPathNil() {
	o.BasicMountPath.Set(nil)
}

// UnsetBasicMountPath ensures that no value is present for BasicMountPath, not even an explicit nil
func (o *View) UnsetBasicMountPath() {
	o.BasicMountPath.Unset()
}

// GetCaseInsensitiveNamesEnabled returns the CaseInsensitiveNamesEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetCaseInsensitiveNamesEnabled() bool {
	if o == nil || o.CaseInsensitiveNamesEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.CaseInsensitiveNamesEnabled.Get()
}

// GetCaseInsensitiveNamesEnabledOk returns a tuple with the CaseInsensitiveNamesEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetCaseInsensitiveNamesEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CaseInsensitiveNamesEnabled.Get(), o.CaseInsensitiveNamesEnabled.IsSet()
}

// HasCaseInsensitiveNamesEnabled returns a boolean if a field has been set.
func (o *View) HasCaseInsensitiveNamesEnabled() bool {
	if o != nil && o.CaseInsensitiveNamesEnabled.IsSet() {
		return true
	}

	return false
}

// SetCaseInsensitiveNamesEnabled gets a reference to the given NullableBool and assigns it to the CaseInsensitiveNamesEnabled field.
func (o *View) SetCaseInsensitiveNamesEnabled(v bool) {
	o.CaseInsensitiveNamesEnabled.Set(&v)
}
// SetCaseInsensitiveNamesEnabledNil sets the value for CaseInsensitiveNamesEnabled to be an explicit nil
func (o *View) SetCaseInsensitiveNamesEnabledNil() {
	o.CaseInsensitiveNamesEnabled.Set(nil)
}

// UnsetCaseInsensitiveNamesEnabled ensures that no value is present for CaseInsensitiveNamesEnabled, not even an explicit nil
func (o *View) UnsetCaseInsensitiveNamesEnabled() {
	o.CaseInsensitiveNamesEnabled.Unset()
}

// GetCreateTimeMsecs returns the CreateTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetCreateTimeMsecs() int64 {
	if o == nil || o.CreateTimeMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.CreateTimeMsecs.Get()
}

// GetCreateTimeMsecsOk returns a tuple with the CreateTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetCreateTimeMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CreateTimeMsecs.Get(), o.CreateTimeMsecs.IsSet()
}

// HasCreateTimeMsecs returns a boolean if a field has been set.
func (o *View) HasCreateTimeMsecs() bool {
	if o != nil && o.CreateTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetCreateTimeMsecs gets a reference to the given NullableInt64 and assigns it to the CreateTimeMsecs field.
func (o *View) SetCreateTimeMsecs(v int64) {
	o.CreateTimeMsecs.Set(&v)
}
// SetCreateTimeMsecsNil sets the value for CreateTimeMsecs to be an explicit nil
func (o *View) SetCreateTimeMsecsNil() {
	o.CreateTimeMsecs.Set(nil)
}

// UnsetCreateTimeMsecs ensures that no value is present for CreateTimeMsecs, not even an explicit nil
func (o *View) UnsetCreateTimeMsecs() {
	o.CreateTimeMsecs.Unset()
}

// GetDataLockExpiryUsecs returns the DataLockExpiryUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetDataLockExpiryUsecs() int64 {
	if o == nil || o.DataLockExpiryUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DataLockExpiryUsecs.Get()
}

// GetDataLockExpiryUsecsOk returns a tuple with the DataLockExpiryUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetDataLockExpiryUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DataLockExpiryUsecs.Get(), o.DataLockExpiryUsecs.IsSet()
}

// HasDataLockExpiryUsecs returns a boolean if a field has been set.
func (o *View) HasDataLockExpiryUsecs() bool {
	if o != nil && o.DataLockExpiryUsecs.IsSet() {
		return true
	}

	return false
}

// SetDataLockExpiryUsecs gets a reference to the given NullableInt64 and assigns it to the DataLockExpiryUsecs field.
func (o *View) SetDataLockExpiryUsecs(v int64) {
	o.DataLockExpiryUsecs.Set(&v)
}
// SetDataLockExpiryUsecsNil sets the value for DataLockExpiryUsecs to be an explicit nil
func (o *View) SetDataLockExpiryUsecsNil() {
	o.DataLockExpiryUsecs.Set(nil)
}

// UnsetDataLockExpiryUsecs ensures that no value is present for DataLockExpiryUsecs, not even an explicit nil
func (o *View) UnsetDataLockExpiryUsecs() {
	o.DataLockExpiryUsecs.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *View) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *View) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *View) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *View) UnsetDescription() {
	o.Description.Unset()
}

// GetEnableFastDurableHandle returns the EnableFastDurableHandle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetEnableFastDurableHandle() bool {
	if o == nil || o.EnableFastDurableHandle.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableFastDurableHandle.Get()
}

// GetEnableFastDurableHandleOk returns a tuple with the EnableFastDurableHandle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetEnableFastDurableHandleOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableFastDurableHandle.Get(), o.EnableFastDurableHandle.IsSet()
}

// HasEnableFastDurableHandle returns a boolean if a field has been set.
func (o *View) HasEnableFastDurableHandle() bool {
	if o != nil && o.EnableFastDurableHandle.IsSet() {
		return true
	}

	return false
}

// SetEnableFastDurableHandle gets a reference to the given NullableBool and assigns it to the EnableFastDurableHandle field.
func (o *View) SetEnableFastDurableHandle(v bool) {
	o.EnableFastDurableHandle.Set(&v)
}
// SetEnableFastDurableHandleNil sets the value for EnableFastDurableHandle to be an explicit nil
func (o *View) SetEnableFastDurableHandleNil() {
	o.EnableFastDurableHandle.Set(nil)
}

// UnsetEnableFastDurableHandle ensures that no value is present for EnableFastDurableHandle, not even an explicit nil
func (o *View) UnsetEnableFastDurableHandle() {
	o.EnableFastDurableHandle.Unset()
}

// GetEnableFilerAuditLogging returns the EnableFilerAuditLogging field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetEnableFilerAuditLogging() bool {
	if o == nil || o.EnableFilerAuditLogging.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableFilerAuditLogging.Get()
}

// GetEnableFilerAuditLoggingOk returns a tuple with the EnableFilerAuditLogging field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetEnableFilerAuditLoggingOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableFilerAuditLogging.Get(), o.EnableFilerAuditLogging.IsSet()
}

// HasEnableFilerAuditLogging returns a boolean if a field has been set.
func (o *View) HasEnableFilerAuditLogging() bool {
	if o != nil && o.EnableFilerAuditLogging.IsSet() {
		return true
	}

	return false
}

// SetEnableFilerAuditLogging gets a reference to the given NullableBool and assigns it to the EnableFilerAuditLogging field.
func (o *View) SetEnableFilerAuditLogging(v bool) {
	o.EnableFilerAuditLogging.Set(&v)
}
// SetEnableFilerAuditLoggingNil sets the value for EnableFilerAuditLogging to be an explicit nil
func (o *View) SetEnableFilerAuditLoggingNil() {
	o.EnableFilerAuditLogging.Set(nil)
}

// UnsetEnableFilerAuditLogging ensures that no value is present for EnableFilerAuditLogging, not even an explicit nil
func (o *View) UnsetEnableFilerAuditLogging() {
	o.EnableFilerAuditLogging.Unset()
}

// GetEnableLiveIndexing returns the EnableLiveIndexing field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetEnableLiveIndexing() bool {
	if o == nil || o.EnableLiveIndexing.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableLiveIndexing.Get()
}

// GetEnableLiveIndexingOk returns a tuple with the EnableLiveIndexing field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetEnableLiveIndexingOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableLiveIndexing.Get(), o.EnableLiveIndexing.IsSet()
}

// HasEnableLiveIndexing returns a boolean if a field has been set.
func (o *View) HasEnableLiveIndexing() bool {
	if o != nil && o.EnableLiveIndexing.IsSet() {
		return true
	}

	return false
}

// SetEnableLiveIndexing gets a reference to the given NullableBool and assigns it to the EnableLiveIndexing field.
func (o *View) SetEnableLiveIndexing(v bool) {
	o.EnableLiveIndexing.Set(&v)
}
// SetEnableLiveIndexingNil sets the value for EnableLiveIndexing to be an explicit nil
func (o *View) SetEnableLiveIndexingNil() {
	o.EnableLiveIndexing.Set(nil)
}

// UnsetEnableLiveIndexing ensures that no value is present for EnableLiveIndexing, not even an explicit nil
func (o *View) UnsetEnableLiveIndexing() {
	o.EnableLiveIndexing.Unset()
}

// GetEnableMixedModePermissions returns the EnableMixedModePermissions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetEnableMixedModePermissions() bool {
	if o == nil || o.EnableMixedModePermissions.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableMixedModePermissions.Get()
}

// GetEnableMixedModePermissionsOk returns a tuple with the EnableMixedModePermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetEnableMixedModePermissionsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableMixedModePermissions.Get(), o.EnableMixedModePermissions.IsSet()
}

// HasEnableMixedModePermissions returns a boolean if a field has been set.
func (o *View) HasEnableMixedModePermissions() bool {
	if o != nil && o.EnableMixedModePermissions.IsSet() {
		return true
	}

	return false
}

// SetEnableMixedModePermissions gets a reference to the given NullableBool and assigns it to the EnableMixedModePermissions field.
func (o *View) SetEnableMixedModePermissions(v bool) {
	o.EnableMixedModePermissions.Set(&v)
}
// SetEnableMixedModePermissionsNil sets the value for EnableMixedModePermissions to be an explicit nil
func (o *View) SetEnableMixedModePermissionsNil() {
	o.EnableMixedModePermissions.Set(nil)
}

// UnsetEnableMixedModePermissions ensures that no value is present for EnableMixedModePermissions, not even an explicit nil
func (o *View) UnsetEnableMixedModePermissions() {
	o.EnableMixedModePermissions.Unset()
}

// GetEnableNfsViewDiscovery returns the EnableNfsViewDiscovery field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetEnableNfsViewDiscovery() bool {
	if o == nil || o.EnableNfsViewDiscovery.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableNfsViewDiscovery.Get()
}

// GetEnableNfsViewDiscoveryOk returns a tuple with the EnableNfsViewDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetEnableNfsViewDiscoveryOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableNfsViewDiscovery.Get(), o.EnableNfsViewDiscovery.IsSet()
}

// HasEnableNfsViewDiscovery returns a boolean if a field has been set.
func (o *View) HasEnableNfsViewDiscovery() bool {
	if o != nil && o.EnableNfsViewDiscovery.IsSet() {
		return true
	}

	return false
}

// SetEnableNfsViewDiscovery gets a reference to the given NullableBool and assigns it to the EnableNfsViewDiscovery field.
func (o *View) SetEnableNfsViewDiscovery(v bool) {
	o.EnableNfsViewDiscovery.Set(&v)
}
// SetEnableNfsViewDiscoveryNil sets the value for EnableNfsViewDiscovery to be an explicit nil
func (o *View) SetEnableNfsViewDiscoveryNil() {
	o.EnableNfsViewDiscovery.Set(nil)
}

// UnsetEnableNfsViewDiscovery ensures that no value is present for EnableNfsViewDiscovery, not even an explicit nil
func (o *View) UnsetEnableNfsViewDiscovery() {
	o.EnableNfsViewDiscovery.Unset()
}

// GetEnableOfflineCaching returns the EnableOfflineCaching field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetEnableOfflineCaching() bool {
	if o == nil || o.EnableOfflineCaching.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableOfflineCaching.Get()
}

// GetEnableOfflineCachingOk returns a tuple with the EnableOfflineCaching field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetEnableOfflineCachingOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableOfflineCaching.Get(), o.EnableOfflineCaching.IsSet()
}

// HasEnableOfflineCaching returns a boolean if a field has been set.
func (o *View) HasEnableOfflineCaching() bool {
	if o != nil && o.EnableOfflineCaching.IsSet() {
		return true
	}

	return false
}

// SetEnableOfflineCaching gets a reference to the given NullableBool and assigns it to the EnableOfflineCaching field.
func (o *View) SetEnableOfflineCaching(v bool) {
	o.EnableOfflineCaching.Set(&v)
}
// SetEnableOfflineCachingNil sets the value for EnableOfflineCaching to be an explicit nil
func (o *View) SetEnableOfflineCachingNil() {
	o.EnableOfflineCaching.Set(nil)
}

// UnsetEnableOfflineCaching ensures that no value is present for EnableOfflineCaching, not even an explicit nil
func (o *View) UnsetEnableOfflineCaching() {
	o.EnableOfflineCaching.Unset()
}

// GetEnableSmbAccessBasedEnumeration returns the EnableSmbAccessBasedEnumeration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetEnableSmbAccessBasedEnumeration() bool {
	if o == nil || o.EnableSmbAccessBasedEnumeration.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableSmbAccessBasedEnumeration.Get()
}

// GetEnableSmbAccessBasedEnumerationOk returns a tuple with the EnableSmbAccessBasedEnumeration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetEnableSmbAccessBasedEnumerationOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableSmbAccessBasedEnumeration.Get(), o.EnableSmbAccessBasedEnumeration.IsSet()
}

// HasEnableSmbAccessBasedEnumeration returns a boolean if a field has been set.
func (o *View) HasEnableSmbAccessBasedEnumeration() bool {
	if o != nil && o.EnableSmbAccessBasedEnumeration.IsSet() {
		return true
	}

	return false
}

// SetEnableSmbAccessBasedEnumeration gets a reference to the given NullableBool and assigns it to the EnableSmbAccessBasedEnumeration field.
func (o *View) SetEnableSmbAccessBasedEnumeration(v bool) {
	o.EnableSmbAccessBasedEnumeration.Set(&v)
}
// SetEnableSmbAccessBasedEnumerationNil sets the value for EnableSmbAccessBasedEnumeration to be an explicit nil
func (o *View) SetEnableSmbAccessBasedEnumerationNil() {
	o.EnableSmbAccessBasedEnumeration.Set(nil)
}

// UnsetEnableSmbAccessBasedEnumeration ensures that no value is present for EnableSmbAccessBasedEnumeration, not even an explicit nil
func (o *View) UnsetEnableSmbAccessBasedEnumeration() {
	o.EnableSmbAccessBasedEnumeration.Unset()
}

// GetEnableSmbEncryption returns the EnableSmbEncryption field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetEnableSmbEncryption() bool {
	if o == nil || o.EnableSmbEncryption.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableSmbEncryption.Get()
}

// GetEnableSmbEncryptionOk returns a tuple with the EnableSmbEncryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetEnableSmbEncryptionOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableSmbEncryption.Get(), o.EnableSmbEncryption.IsSet()
}

// HasEnableSmbEncryption returns a boolean if a field has been set.
func (o *View) HasEnableSmbEncryption() bool {
	if o != nil && o.EnableSmbEncryption.IsSet() {
		return true
	}

	return false
}

// SetEnableSmbEncryption gets a reference to the given NullableBool and assigns it to the EnableSmbEncryption field.
func (o *View) SetEnableSmbEncryption(v bool) {
	o.EnableSmbEncryption.Set(&v)
}
// SetEnableSmbEncryptionNil sets the value for EnableSmbEncryption to be an explicit nil
func (o *View) SetEnableSmbEncryptionNil() {
	o.EnableSmbEncryption.Set(nil)
}

// UnsetEnableSmbEncryption ensures that no value is present for EnableSmbEncryption, not even an explicit nil
func (o *View) UnsetEnableSmbEncryption() {
	o.EnableSmbEncryption.Unset()
}

// GetEnableSmbOplock returns the EnableSmbOplock field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetEnableSmbOplock() bool {
	if o == nil || o.EnableSmbOplock.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableSmbOplock.Get()
}

// GetEnableSmbOplockOk returns a tuple with the EnableSmbOplock field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetEnableSmbOplockOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableSmbOplock.Get(), o.EnableSmbOplock.IsSet()
}

// HasEnableSmbOplock returns a boolean if a field has been set.
func (o *View) HasEnableSmbOplock() bool {
	if o != nil && o.EnableSmbOplock.IsSet() {
		return true
	}

	return false
}

// SetEnableSmbOplock gets a reference to the given NullableBool and assigns it to the EnableSmbOplock field.
func (o *View) SetEnableSmbOplock(v bool) {
	o.EnableSmbOplock.Set(&v)
}
// SetEnableSmbOplockNil sets the value for EnableSmbOplock to be an explicit nil
func (o *View) SetEnableSmbOplockNil() {
	o.EnableSmbOplock.Set(nil)
}

// UnsetEnableSmbOplock ensures that no value is present for EnableSmbOplock, not even an explicit nil
func (o *View) UnsetEnableSmbOplock() {
	o.EnableSmbOplock.Unset()
}

// GetEnableSmbViewDiscovery returns the EnableSmbViewDiscovery field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetEnableSmbViewDiscovery() bool {
	if o == nil || o.EnableSmbViewDiscovery.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableSmbViewDiscovery.Get()
}

// GetEnableSmbViewDiscoveryOk returns a tuple with the EnableSmbViewDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetEnableSmbViewDiscoveryOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableSmbViewDiscovery.Get(), o.EnableSmbViewDiscovery.IsSet()
}

// HasEnableSmbViewDiscovery returns a boolean if a field has been set.
func (o *View) HasEnableSmbViewDiscovery() bool {
	if o != nil && o.EnableSmbViewDiscovery.IsSet() {
		return true
	}

	return false
}

// SetEnableSmbViewDiscovery gets a reference to the given NullableBool and assigns it to the EnableSmbViewDiscovery field.
func (o *View) SetEnableSmbViewDiscovery(v bool) {
	o.EnableSmbViewDiscovery.Set(&v)
}
// SetEnableSmbViewDiscoveryNil sets the value for EnableSmbViewDiscovery to be an explicit nil
func (o *View) SetEnableSmbViewDiscoveryNil() {
	o.EnableSmbViewDiscovery.Set(nil)
}

// UnsetEnableSmbViewDiscovery ensures that no value is present for EnableSmbViewDiscovery, not even an explicit nil
func (o *View) UnsetEnableSmbViewDiscovery() {
	o.EnableSmbViewDiscovery.Unset()
}

// GetEnforceSmbEncryption returns the EnforceSmbEncryption field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetEnforceSmbEncryption() bool {
	if o == nil || o.EnforceSmbEncryption.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnforceSmbEncryption.Get()
}

// GetEnforceSmbEncryptionOk returns a tuple with the EnforceSmbEncryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetEnforceSmbEncryptionOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnforceSmbEncryption.Get(), o.EnforceSmbEncryption.IsSet()
}

// HasEnforceSmbEncryption returns a boolean if a field has been set.
func (o *View) HasEnforceSmbEncryption() bool {
	if o != nil && o.EnforceSmbEncryption.IsSet() {
		return true
	}

	return false
}

// SetEnforceSmbEncryption gets a reference to the given NullableBool and assigns it to the EnforceSmbEncryption field.
func (o *View) SetEnforceSmbEncryption(v bool) {
	o.EnforceSmbEncryption.Set(&v)
}
// SetEnforceSmbEncryptionNil sets the value for EnforceSmbEncryption to be an explicit nil
func (o *View) SetEnforceSmbEncryptionNil() {
	o.EnforceSmbEncryption.Set(nil)
}

// UnsetEnforceSmbEncryption ensures that no value is present for EnforceSmbEncryption, not even an explicit nil
func (o *View) UnsetEnforceSmbEncryption() {
	o.EnforceSmbEncryption.Unset()
}

// GetFileExtensionFilter returns the FileExtensionFilter field value if set, zero value otherwise.
func (o *View) GetFileExtensionFilter() FileExtensionFilter {
	if o == nil || o.FileExtensionFilter == nil {
		var ret FileExtensionFilter
		return ret
	}
	return *o.FileExtensionFilter
}

// GetFileExtensionFilterOk returns a tuple with the FileExtensionFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetFileExtensionFilterOk() (*FileExtensionFilter, bool) {
	if o == nil || o.FileExtensionFilter == nil {
		return nil, false
	}
	return o.FileExtensionFilter, true
}

// HasFileExtensionFilter returns a boolean if a field has been set.
func (o *View) HasFileExtensionFilter() bool {
	if o != nil && o.FileExtensionFilter != nil {
		return true
	}

	return false
}

// SetFileExtensionFilter gets a reference to the given FileExtensionFilter and assigns it to the FileExtensionFilter field.
func (o *View) SetFileExtensionFilter(v FileExtensionFilter) {
	o.FileExtensionFilter = &v
}

// GetFileLockConfig returns the FileLockConfig field value if set, zero value otherwise.
func (o *View) GetFileLockConfig() FileLevelDataLockConfig {
	if o == nil || o.FileLockConfig == nil {
		var ret FileLevelDataLockConfig
		return ret
	}
	return *o.FileLockConfig
}

// GetFileLockConfigOk returns a tuple with the FileLockConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetFileLockConfigOk() (*FileLevelDataLockConfig, bool) {
	if o == nil || o.FileLockConfig == nil {
		return nil, false
	}
	return o.FileLockConfig, true
}

// HasFileLockConfig returns a boolean if a field has been set.
func (o *View) HasFileLockConfig() bool {
	if o != nil && o.FileLockConfig != nil {
		return true
	}

	return false
}

// SetFileLockConfig gets a reference to the given FileLevelDataLockConfig and assigns it to the FileLockConfig field.
func (o *View) SetFileLockConfig(v FileLevelDataLockConfig) {
	o.FileLockConfig = &v
}

// GetIsTargetForMigratedData returns the IsTargetForMigratedData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetIsTargetForMigratedData() bool {
	if o == nil || o.IsTargetForMigratedData.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsTargetForMigratedData.Get()
}

// GetIsTargetForMigratedDataOk returns a tuple with the IsTargetForMigratedData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetIsTargetForMigratedDataOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsTargetForMigratedData.Get(), o.IsTargetForMigratedData.IsSet()
}

// HasIsTargetForMigratedData returns a boolean if a field has been set.
func (o *View) HasIsTargetForMigratedData() bool {
	if o != nil && o.IsTargetForMigratedData.IsSet() {
		return true
	}

	return false
}

// SetIsTargetForMigratedData gets a reference to the given NullableBool and assigns it to the IsTargetForMigratedData field.
func (o *View) SetIsTargetForMigratedData(v bool) {
	o.IsTargetForMigratedData.Set(&v)
}
// SetIsTargetForMigratedDataNil sets the value for IsTargetForMigratedData to be an explicit nil
func (o *View) SetIsTargetForMigratedDataNil() {
	o.IsTargetForMigratedData.Set(nil)
}

// UnsetIsTargetForMigratedData ensures that no value is present for IsTargetForMigratedData, not even an explicit nil
func (o *View) UnsetIsTargetForMigratedData() {
	o.IsTargetForMigratedData.Unset()
}

// GetLogicalQuota returns the LogicalQuota field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetLogicalQuota() QuotaPolicy {
	if o == nil || o.LogicalQuota.Get() == nil {
		var ret QuotaPolicy
		return ret
	}
	return *o.LogicalQuota.Get()
}

// GetLogicalQuotaOk returns a tuple with the LogicalQuota field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetLogicalQuotaOk() (*QuotaPolicy, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogicalQuota.Get(), o.LogicalQuota.IsSet()
}

// HasLogicalQuota returns a boolean if a field has been set.
func (o *View) HasLogicalQuota() bool {
	if o != nil && o.LogicalQuota.IsSet() {
		return true
	}

	return false
}

// SetLogicalQuota gets a reference to the given NullableQuotaPolicy and assigns it to the LogicalQuota field.
func (o *View) SetLogicalQuota(v QuotaPolicy) {
	o.LogicalQuota.Set(&v)
}
// SetLogicalQuotaNil sets the value for LogicalQuota to be an explicit nil
func (o *View) SetLogicalQuotaNil() {
	o.LogicalQuota.Set(nil)
}

// UnsetLogicalQuota ensures that no value is present for LogicalQuota, not even an explicit nil
func (o *View) UnsetLogicalQuota() {
	o.LogicalQuota.Unset()
}

// GetLogicalUsageBytes returns the LogicalUsageBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetLogicalUsageBytes() int64 {
	if o == nil || o.LogicalUsageBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LogicalUsageBytes.Get()
}

// GetLogicalUsageBytesOk returns a tuple with the LogicalUsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetLogicalUsageBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogicalUsageBytes.Get(), o.LogicalUsageBytes.IsSet()
}

// HasLogicalUsageBytes returns a boolean if a field has been set.
func (o *View) HasLogicalUsageBytes() bool {
	if o != nil && o.LogicalUsageBytes.IsSet() {
		return true
	}

	return false
}

// SetLogicalUsageBytes gets a reference to the given NullableInt64 and assigns it to the LogicalUsageBytes field.
func (o *View) SetLogicalUsageBytes(v int64) {
	o.LogicalUsageBytes.Set(&v)
}
// SetLogicalUsageBytesNil sets the value for LogicalUsageBytes to be an explicit nil
func (o *View) SetLogicalUsageBytesNil() {
	o.LogicalUsageBytes.Set(nil)
}

// UnsetLogicalUsageBytes ensures that no value is present for LogicalUsageBytes, not even an explicit nil
func (o *View) UnsetLogicalUsageBytes() {
	o.LogicalUsageBytes.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *View) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *View) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *View) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *View) UnsetName() {
	o.Name.Unset()
}

// GetNetgroupWhitelist returns the NetgroupWhitelist field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetNetgroupWhitelist() []NisNetgroup {
	if o == nil  {
		var ret []NisNetgroup
		return ret
	}
	return o.NetgroupWhitelist
}

// GetNetgroupWhitelistOk returns a tuple with the NetgroupWhitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetNetgroupWhitelistOk() (*[]NisNetgroup, bool) {
	if o == nil || o.NetgroupWhitelist == nil {
		return nil, false
	}
	return &o.NetgroupWhitelist, true
}

// HasNetgroupWhitelist returns a boolean if a field has been set.
func (o *View) HasNetgroupWhitelist() bool {
	if o != nil && o.NetgroupWhitelist != nil {
		return true
	}

	return false
}

// SetNetgroupWhitelist gets a reference to the given []NisNetgroup and assigns it to the NetgroupWhitelist field.
func (o *View) SetNetgroupWhitelist(v []NisNetgroup) {
	o.NetgroupWhitelist = v
}

// GetNfsAllSquash returns the NfsAllSquash field value if set, zero value otherwise.
func (o *View) GetNfsAllSquash() NfsSquash {
	if o == nil || o.NfsAllSquash == nil {
		var ret NfsSquash
		return ret
	}
	return *o.NfsAllSquash
}

// GetNfsAllSquashOk returns a tuple with the NfsAllSquash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetNfsAllSquashOk() (*NfsSquash, bool) {
	if o == nil || o.NfsAllSquash == nil {
		return nil, false
	}
	return o.NfsAllSquash, true
}

// HasNfsAllSquash returns a boolean if a field has been set.
func (o *View) HasNfsAllSquash() bool {
	if o != nil && o.NfsAllSquash != nil {
		return true
	}

	return false
}

// SetNfsAllSquash gets a reference to the given NfsSquash and assigns it to the NfsAllSquash field.
func (o *View) SetNfsAllSquash(v NfsSquash) {
	o.NfsAllSquash = &v
}

// GetNfsMountPath returns the NfsMountPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetNfsMountPath() string {
	if o == nil || o.NfsMountPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.NfsMountPath.Get()
}

// GetNfsMountPathOk returns a tuple with the NfsMountPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetNfsMountPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NfsMountPath.Get(), o.NfsMountPath.IsSet()
}

// HasNfsMountPath returns a boolean if a field has been set.
func (o *View) HasNfsMountPath() bool {
	if o != nil && o.NfsMountPath.IsSet() {
		return true
	}

	return false
}

// SetNfsMountPath gets a reference to the given NullableString and assigns it to the NfsMountPath field.
func (o *View) SetNfsMountPath(v string) {
	o.NfsMountPath.Set(&v)
}
// SetNfsMountPathNil sets the value for NfsMountPath to be an explicit nil
func (o *View) SetNfsMountPathNil() {
	o.NfsMountPath.Set(nil)
}

// UnsetNfsMountPath ensures that no value is present for NfsMountPath, not even an explicit nil
func (o *View) UnsetNfsMountPath() {
	o.NfsMountPath.Unset()
}

// GetNfsRootPermissions returns the NfsRootPermissions field value if set, zero value otherwise.
func (o *View) GetNfsRootPermissions() NfsRootPermissions {
	if o == nil || o.NfsRootPermissions == nil {
		var ret NfsRootPermissions
		return ret
	}
	return *o.NfsRootPermissions
}

// GetNfsRootPermissionsOk returns a tuple with the NfsRootPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetNfsRootPermissionsOk() (*NfsRootPermissions, bool) {
	if o == nil || o.NfsRootPermissions == nil {
		return nil, false
	}
	return o.NfsRootPermissions, true
}

// HasNfsRootPermissions returns a boolean if a field has been set.
func (o *View) HasNfsRootPermissions() bool {
	if o != nil && o.NfsRootPermissions != nil {
		return true
	}

	return false
}

// SetNfsRootPermissions gets a reference to the given NfsRootPermissions and assigns it to the NfsRootPermissions field.
func (o *View) SetNfsRootPermissions(v NfsRootPermissions) {
	o.NfsRootPermissions = &v
}

// GetNfsRootSquash returns the NfsRootSquash field value if set, zero value otherwise.
func (o *View) GetNfsRootSquash() NfsSquash {
	if o == nil || o.NfsRootSquash == nil {
		var ret NfsSquash
		return ret
	}
	return *o.NfsRootSquash
}

// GetNfsRootSquashOk returns a tuple with the NfsRootSquash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetNfsRootSquashOk() (*NfsSquash, bool) {
	if o == nil || o.NfsRootSquash == nil {
		return nil, false
	}
	return o.NfsRootSquash, true
}

// HasNfsRootSquash returns a boolean if a field has been set.
func (o *View) HasNfsRootSquash() bool {
	if o != nil && o.NfsRootSquash != nil {
		return true
	}

	return false
}

// SetNfsRootSquash gets a reference to the given NfsSquash and assigns it to the NfsRootSquash field.
func (o *View) SetNfsRootSquash(v NfsSquash) {
	o.NfsRootSquash = &v
}

// GetOverrideGlobalNetgroupWhitelist returns the OverrideGlobalNetgroupWhitelist field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetOverrideGlobalNetgroupWhitelist() bool {
	if o == nil || o.OverrideGlobalNetgroupWhitelist.Get() == nil {
		var ret bool
		return ret
	}
	return *o.OverrideGlobalNetgroupWhitelist.Get()
}

// GetOverrideGlobalNetgroupWhitelistOk returns a tuple with the OverrideGlobalNetgroupWhitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetOverrideGlobalNetgroupWhitelistOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OverrideGlobalNetgroupWhitelist.Get(), o.OverrideGlobalNetgroupWhitelist.IsSet()
}

// HasOverrideGlobalNetgroupWhitelist returns a boolean if a field has been set.
func (o *View) HasOverrideGlobalNetgroupWhitelist() bool {
	if o != nil && o.OverrideGlobalNetgroupWhitelist.IsSet() {
		return true
	}

	return false
}

// SetOverrideGlobalNetgroupWhitelist gets a reference to the given NullableBool and assigns it to the OverrideGlobalNetgroupWhitelist field.
func (o *View) SetOverrideGlobalNetgroupWhitelist(v bool) {
	o.OverrideGlobalNetgroupWhitelist.Set(&v)
}
// SetOverrideGlobalNetgroupWhitelistNil sets the value for OverrideGlobalNetgroupWhitelist to be an explicit nil
func (o *View) SetOverrideGlobalNetgroupWhitelistNil() {
	o.OverrideGlobalNetgroupWhitelist.Set(nil)
}

// UnsetOverrideGlobalNetgroupWhitelist ensures that no value is present for OverrideGlobalNetgroupWhitelist, not even an explicit nil
func (o *View) UnsetOverrideGlobalNetgroupWhitelist() {
	o.OverrideGlobalNetgroupWhitelist.Unset()
}

// GetOverrideGlobalWhitelist returns the OverrideGlobalWhitelist field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetOverrideGlobalWhitelist() bool {
	if o == nil || o.OverrideGlobalWhitelist.Get() == nil {
		var ret bool
		return ret
	}
	return *o.OverrideGlobalWhitelist.Get()
}

// GetOverrideGlobalWhitelistOk returns a tuple with the OverrideGlobalWhitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetOverrideGlobalWhitelistOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OverrideGlobalWhitelist.Get(), o.OverrideGlobalWhitelist.IsSet()
}

// HasOverrideGlobalWhitelist returns a boolean if a field has been set.
func (o *View) HasOverrideGlobalWhitelist() bool {
	if o != nil && o.OverrideGlobalWhitelist.IsSet() {
		return true
	}

	return false
}

// SetOverrideGlobalWhitelist gets a reference to the given NullableBool and assigns it to the OverrideGlobalWhitelist field.
func (o *View) SetOverrideGlobalWhitelist(v bool) {
	o.OverrideGlobalWhitelist.Set(&v)
}
// SetOverrideGlobalWhitelistNil sets the value for OverrideGlobalWhitelist to be an explicit nil
func (o *View) SetOverrideGlobalWhitelistNil() {
	o.OverrideGlobalWhitelist.Set(nil)
}

// UnsetOverrideGlobalWhitelist ensures that no value is present for OverrideGlobalWhitelist, not even an explicit nil
func (o *View) UnsetOverrideGlobalWhitelist() {
	o.OverrideGlobalWhitelist.Unset()
}

// GetProtocolAccess returns the ProtocolAccess field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetProtocolAccess() string {
	if o == nil || o.ProtocolAccess.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProtocolAccess.Get()
}

// GetProtocolAccessOk returns a tuple with the ProtocolAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetProtocolAccessOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProtocolAccess.Get(), o.ProtocolAccess.IsSet()
}

// HasProtocolAccess returns a boolean if a field has been set.
func (o *View) HasProtocolAccess() bool {
	if o != nil && o.ProtocolAccess.IsSet() {
		return true
	}

	return false
}

// SetProtocolAccess gets a reference to the given NullableString and assigns it to the ProtocolAccess field.
func (o *View) SetProtocolAccess(v string) {
	o.ProtocolAccess.Set(&v)
}
// SetProtocolAccessNil sets the value for ProtocolAccess to be an explicit nil
func (o *View) SetProtocolAccessNil() {
	o.ProtocolAccess.Set(nil)
}

// UnsetProtocolAccess ensures that no value is present for ProtocolAccess, not even an explicit nil
func (o *View) UnsetProtocolAccess() {
	o.ProtocolAccess.Unset()
}

// GetQos returns the Qos field value if set, zero value otherwise.
func (o *View) GetQos() QoS {
	if o == nil || o.Qos == nil {
		var ret QoS
		return ret
	}
	return *o.Qos
}

// GetQosOk returns a tuple with the Qos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetQosOk() (*QoS, bool) {
	if o == nil || o.Qos == nil {
		return nil, false
	}
	return o.Qos, true
}

// HasQos returns a boolean if a field has been set.
func (o *View) HasQos() bool {
	if o != nil && o.Qos != nil {
		return true
	}

	return false
}

// SetQos gets a reference to the given QoS and assigns it to the Qos field.
func (o *View) SetQos(v QoS) {
	o.Qos = &v
}

// GetS3AccessPath returns the S3AccessPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetS3AccessPath() string {
	if o == nil || o.S3AccessPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.S3AccessPath.Get()
}

// GetS3AccessPathOk returns a tuple with the S3AccessPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetS3AccessPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.S3AccessPath.Get(), o.S3AccessPath.IsSet()
}

// HasS3AccessPath returns a boolean if a field has been set.
func (o *View) HasS3AccessPath() bool {
	if o != nil && o.S3AccessPath.IsSet() {
		return true
	}

	return false
}

// SetS3AccessPath gets a reference to the given NullableString and assigns it to the S3AccessPath field.
func (o *View) SetS3AccessPath(v string) {
	o.S3AccessPath.Set(&v)
}
// SetS3AccessPathNil sets the value for S3AccessPath to be an explicit nil
func (o *View) SetS3AccessPathNil() {
	o.S3AccessPath.Set(nil)
}

// UnsetS3AccessPath ensures that no value is present for S3AccessPath, not even an explicit nil
func (o *View) UnsetS3AccessPath() {
	o.S3AccessPath.Unset()
}

// GetS3KeyMappingConfig returns the S3KeyMappingConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetS3KeyMappingConfig() string {
	if o == nil || o.S3KeyMappingConfig.Get() == nil {
		var ret string
		return ret
	}
	return *o.S3KeyMappingConfig.Get()
}

// GetS3KeyMappingConfigOk returns a tuple with the S3KeyMappingConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetS3KeyMappingConfigOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.S3KeyMappingConfig.Get(), o.S3KeyMappingConfig.IsSet()
}

// HasS3KeyMappingConfig returns a boolean if a field has been set.
func (o *View) HasS3KeyMappingConfig() bool {
	if o != nil && o.S3KeyMappingConfig.IsSet() {
		return true
	}

	return false
}

// SetS3KeyMappingConfig gets a reference to the given NullableString and assigns it to the S3KeyMappingConfig field.
func (o *View) SetS3KeyMappingConfig(v string) {
	o.S3KeyMappingConfig.Set(&v)
}
// SetS3KeyMappingConfigNil sets the value for S3KeyMappingConfig to be an explicit nil
func (o *View) SetS3KeyMappingConfigNil() {
	o.S3KeyMappingConfig.Set(nil)
}

// UnsetS3KeyMappingConfig ensures that no value is present for S3KeyMappingConfig, not even an explicit nil
func (o *View) UnsetS3KeyMappingConfig() {
	o.S3KeyMappingConfig.Unset()
}

// GetSecurityMode returns the SecurityMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetSecurityMode() string {
	if o == nil || o.SecurityMode.Get() == nil {
		var ret string
		return ret
	}
	return *o.SecurityMode.Get()
}

// GetSecurityModeOk returns a tuple with the SecurityMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetSecurityModeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SecurityMode.Get(), o.SecurityMode.IsSet()
}

// HasSecurityMode returns a boolean if a field has been set.
func (o *View) HasSecurityMode() bool {
	if o != nil && o.SecurityMode.IsSet() {
		return true
	}

	return false
}

// SetSecurityMode gets a reference to the given NullableString and assigns it to the SecurityMode field.
func (o *View) SetSecurityMode(v string) {
	o.SecurityMode.Set(&v)
}
// SetSecurityModeNil sets the value for SecurityMode to be an explicit nil
func (o *View) SetSecurityModeNil() {
	o.SecurityMode.Set(nil)
}

// UnsetSecurityMode ensures that no value is present for SecurityMode, not even an explicit nil
func (o *View) UnsetSecurityMode() {
	o.SecurityMode.Unset()
}

// GetSharePermissions returns the SharePermissions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetSharePermissions() []SmbPermission {
	if o == nil  {
		var ret []SmbPermission
		return ret
	}
	return o.SharePermissions
}

// GetSharePermissionsOk returns a tuple with the SharePermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetSharePermissionsOk() (*[]SmbPermission, bool) {
	if o == nil || o.SharePermissions == nil {
		return nil, false
	}
	return &o.SharePermissions, true
}

// HasSharePermissions returns a boolean if a field has been set.
func (o *View) HasSharePermissions() bool {
	if o != nil && o.SharePermissions != nil {
		return true
	}

	return false
}

// SetSharePermissions gets a reference to the given []SmbPermission and assigns it to the SharePermissions field.
func (o *View) SetSharePermissions(v []SmbPermission) {
	o.SharePermissions = v
}

// GetSmbMountPath returns the SmbMountPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetSmbMountPath() string {
	if o == nil || o.SmbMountPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.SmbMountPath.Get()
}

// GetSmbMountPathOk returns a tuple with the SmbMountPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetSmbMountPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SmbMountPath.Get(), o.SmbMountPath.IsSet()
}

// HasSmbMountPath returns a boolean if a field has been set.
func (o *View) HasSmbMountPath() bool {
	if o != nil && o.SmbMountPath.IsSet() {
		return true
	}

	return false
}

// SetSmbMountPath gets a reference to the given NullableString and assigns it to the SmbMountPath field.
func (o *View) SetSmbMountPath(v string) {
	o.SmbMountPath.Set(&v)
}
// SetSmbMountPathNil sets the value for SmbMountPath to be an explicit nil
func (o *View) SetSmbMountPathNil() {
	o.SmbMountPath.Set(nil)
}

// UnsetSmbMountPath ensures that no value is present for SmbMountPath, not even an explicit nil
func (o *View) UnsetSmbMountPath() {
	o.SmbMountPath.Unset()
}

// GetSmbPermissionsInfo returns the SmbPermissionsInfo field value if set, zero value otherwise.
func (o *View) GetSmbPermissionsInfo() SmbPermissionsInfo {
	if o == nil || o.SmbPermissionsInfo == nil {
		var ret SmbPermissionsInfo
		return ret
	}
	return *o.SmbPermissionsInfo
}

// GetSmbPermissionsInfoOk returns a tuple with the SmbPermissionsInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetSmbPermissionsInfoOk() (*SmbPermissionsInfo, bool) {
	if o == nil || o.SmbPermissionsInfo == nil {
		return nil, false
	}
	return o.SmbPermissionsInfo, true
}

// HasSmbPermissionsInfo returns a boolean if a field has been set.
func (o *View) HasSmbPermissionsInfo() bool {
	if o != nil && o.SmbPermissionsInfo != nil {
		return true
	}

	return false
}

// SetSmbPermissionsInfo gets a reference to the given SmbPermissionsInfo and assigns it to the SmbPermissionsInfo field.
func (o *View) SetSmbPermissionsInfo(v SmbPermissionsInfo) {
	o.SmbPermissionsInfo = &v
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *View) GetStats() ViewStats {
	if o == nil || o.Stats == nil {
		var ret ViewStats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetStatsOk() (*ViewStats, bool) {
	if o == nil || o.Stats == nil {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *View) HasStats() bool {
	if o != nil && o.Stats != nil {
		return true
	}

	return false
}

// SetStats gets a reference to the given ViewStats and assigns it to the Stats field.
func (o *View) SetStats(v ViewStats) {
	o.Stats = &v
}

// GetStoragePolicyOverride returns the StoragePolicyOverride field value if set, zero value otherwise.
func (o *View) GetStoragePolicyOverride() StoragePolicyOverride {
	if o == nil || o.StoragePolicyOverride == nil {
		var ret StoragePolicyOverride
		return ret
	}
	return *o.StoragePolicyOverride
}

// GetStoragePolicyOverrideOk returns a tuple with the StoragePolicyOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetStoragePolicyOverrideOk() (*StoragePolicyOverride, bool) {
	if o == nil || o.StoragePolicyOverride == nil {
		return nil, false
	}
	return o.StoragePolicyOverride, true
}

// HasStoragePolicyOverride returns a boolean if a field has been set.
func (o *View) HasStoragePolicyOverride() bool {
	if o != nil && o.StoragePolicyOverride != nil {
		return true
	}

	return false
}

// SetStoragePolicyOverride gets a reference to the given StoragePolicyOverride and assigns it to the StoragePolicyOverride field.
func (o *View) SetStoragePolicyOverride(v StoragePolicyOverride) {
	o.StoragePolicyOverride = &v
}

// GetSubnetWhitelist returns the SubnetWhitelist field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetSubnetWhitelist() []Subnet {
	if o == nil  {
		var ret []Subnet
		return ret
	}
	return o.SubnetWhitelist
}

// GetSubnetWhitelistOk returns a tuple with the SubnetWhitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetSubnetWhitelistOk() (*[]Subnet, bool) {
	if o == nil || o.SubnetWhitelist == nil {
		return nil, false
	}
	return &o.SubnetWhitelist, true
}

// HasSubnetWhitelist returns a boolean if a field has been set.
func (o *View) HasSubnetWhitelist() bool {
	if o != nil && o.SubnetWhitelist != nil {
		return true
	}

	return false
}

// SetSubnetWhitelist gets a reference to the given []Subnet and assigns it to the SubnetWhitelist field.
func (o *View) SetSubnetWhitelist(v []Subnet) {
	o.SubnetWhitelist = v
}

// GetSwiftProjectDomain returns the SwiftProjectDomain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetSwiftProjectDomain() string {
	if o == nil || o.SwiftProjectDomain.Get() == nil {
		var ret string
		return ret
	}
	return *o.SwiftProjectDomain.Get()
}

// GetSwiftProjectDomainOk returns a tuple with the SwiftProjectDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetSwiftProjectDomainOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SwiftProjectDomain.Get(), o.SwiftProjectDomain.IsSet()
}

// HasSwiftProjectDomain returns a boolean if a field has been set.
func (o *View) HasSwiftProjectDomain() bool {
	if o != nil && o.SwiftProjectDomain.IsSet() {
		return true
	}

	return false
}

// SetSwiftProjectDomain gets a reference to the given NullableString and assigns it to the SwiftProjectDomain field.
func (o *View) SetSwiftProjectDomain(v string) {
	o.SwiftProjectDomain.Set(&v)
}
// SetSwiftProjectDomainNil sets the value for SwiftProjectDomain to be an explicit nil
func (o *View) SetSwiftProjectDomainNil() {
	o.SwiftProjectDomain.Set(nil)
}

// UnsetSwiftProjectDomain ensures that no value is present for SwiftProjectDomain, not even an explicit nil
func (o *View) UnsetSwiftProjectDomain() {
	o.SwiftProjectDomain.Unset()
}

// GetSwiftProjectName returns the SwiftProjectName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetSwiftProjectName() string {
	if o == nil || o.SwiftProjectName.Get() == nil {
		var ret string
		return ret
	}
	return *o.SwiftProjectName.Get()
}

// GetSwiftProjectNameOk returns a tuple with the SwiftProjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetSwiftProjectNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SwiftProjectName.Get(), o.SwiftProjectName.IsSet()
}

// HasSwiftProjectName returns a boolean if a field has been set.
func (o *View) HasSwiftProjectName() bool {
	if o != nil && o.SwiftProjectName.IsSet() {
		return true
	}

	return false
}

// SetSwiftProjectName gets a reference to the given NullableString and assigns it to the SwiftProjectName field.
func (o *View) SetSwiftProjectName(v string) {
	o.SwiftProjectName.Set(&v)
}
// SetSwiftProjectNameNil sets the value for SwiftProjectName to be an explicit nil
func (o *View) SetSwiftProjectNameNil() {
	o.SwiftProjectName.Set(nil)
}

// UnsetSwiftProjectName ensures that no value is present for SwiftProjectName, not even an explicit nil
func (o *View) UnsetSwiftProjectName() {
	o.SwiftProjectName.Unset()
}

// GetSwiftUserDomain returns the SwiftUserDomain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetSwiftUserDomain() string {
	if o == nil || o.SwiftUserDomain.Get() == nil {
		var ret string
		return ret
	}
	return *o.SwiftUserDomain.Get()
}

// GetSwiftUserDomainOk returns a tuple with the SwiftUserDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetSwiftUserDomainOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SwiftUserDomain.Get(), o.SwiftUserDomain.IsSet()
}

// HasSwiftUserDomain returns a boolean if a field has been set.
func (o *View) HasSwiftUserDomain() bool {
	if o != nil && o.SwiftUserDomain.IsSet() {
		return true
	}

	return false
}

// SetSwiftUserDomain gets a reference to the given NullableString and assigns it to the SwiftUserDomain field.
func (o *View) SetSwiftUserDomain(v string) {
	o.SwiftUserDomain.Set(&v)
}
// SetSwiftUserDomainNil sets the value for SwiftUserDomain to be an explicit nil
func (o *View) SetSwiftUserDomainNil() {
	o.SwiftUserDomain.Set(nil)
}

// UnsetSwiftUserDomain ensures that no value is present for SwiftUserDomain, not even an explicit nil
func (o *View) UnsetSwiftUserDomain() {
	o.SwiftUserDomain.Unset()
}

// GetSwiftUsername returns the SwiftUsername field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetSwiftUsername() string {
	if o == nil || o.SwiftUsername.Get() == nil {
		var ret string
		return ret
	}
	return *o.SwiftUsername.Get()
}

// GetSwiftUsernameOk returns a tuple with the SwiftUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetSwiftUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SwiftUsername.Get(), o.SwiftUsername.IsSet()
}

// HasSwiftUsername returns a boolean if a field has been set.
func (o *View) HasSwiftUsername() bool {
	if o != nil && o.SwiftUsername.IsSet() {
		return true
	}

	return false
}

// SetSwiftUsername gets a reference to the given NullableString and assigns it to the SwiftUsername field.
func (o *View) SetSwiftUsername(v string) {
	o.SwiftUsername.Set(&v)
}
// SetSwiftUsernameNil sets the value for SwiftUsername to be an explicit nil
func (o *View) SetSwiftUsernameNil() {
	o.SwiftUsername.Set(nil)
}

// UnsetSwiftUsername ensures that no value is present for SwiftUsername, not even an explicit nil
func (o *View) UnsetSwiftUsername() {
	o.SwiftUsername.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *View) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *View) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *View) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *View) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetViewBoxId returns the ViewBoxId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetViewBoxId() int64 {
	if o == nil || o.ViewBoxId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ViewBoxId.Get()
}

// GetViewBoxIdOk returns a tuple with the ViewBoxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetViewBoxIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewBoxId.Get(), o.ViewBoxId.IsSet()
}

// HasViewBoxId returns a boolean if a field has been set.
func (o *View) HasViewBoxId() bool {
	if o != nil && o.ViewBoxId.IsSet() {
		return true
	}

	return false
}

// SetViewBoxId gets a reference to the given NullableInt64 and assigns it to the ViewBoxId field.
func (o *View) SetViewBoxId(v int64) {
	o.ViewBoxId.Set(&v)
}
// SetViewBoxIdNil sets the value for ViewBoxId to be an explicit nil
func (o *View) SetViewBoxIdNil() {
	o.ViewBoxId.Set(nil)
}

// UnsetViewBoxId ensures that no value is present for ViewBoxId, not even an explicit nil
func (o *View) UnsetViewBoxId() {
	o.ViewBoxId.Unset()
}

// GetViewBoxName returns the ViewBoxName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetViewBoxName() string {
	if o == nil || o.ViewBoxName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ViewBoxName.Get()
}

// GetViewBoxNameOk returns a tuple with the ViewBoxName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetViewBoxNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewBoxName.Get(), o.ViewBoxName.IsSet()
}

// HasViewBoxName returns a boolean if a field has been set.
func (o *View) HasViewBoxName() bool {
	if o != nil && o.ViewBoxName.IsSet() {
		return true
	}

	return false
}

// SetViewBoxName gets a reference to the given NullableString and assigns it to the ViewBoxName field.
func (o *View) SetViewBoxName(v string) {
	o.ViewBoxName.Set(&v)
}
// SetViewBoxNameNil sets the value for ViewBoxName to be an explicit nil
func (o *View) SetViewBoxNameNil() {
	o.ViewBoxName.Set(nil)
}

// UnsetViewBoxName ensures that no value is present for ViewBoxName, not even an explicit nil
func (o *View) UnsetViewBoxName() {
	o.ViewBoxName.Unset()
}

// GetViewId returns the ViewId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetViewId() int64 {
	if o == nil || o.ViewId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ViewId.Get()
}

// GetViewIdOk returns a tuple with the ViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetViewIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewId.Get(), o.ViewId.IsSet()
}

// HasViewId returns a boolean if a field has been set.
func (o *View) HasViewId() bool {
	if o != nil && o.ViewId.IsSet() {
		return true
	}

	return false
}

// SetViewId gets a reference to the given NullableInt64 and assigns it to the ViewId field.
func (o *View) SetViewId(v int64) {
	o.ViewId.Set(&v)
}
// SetViewIdNil sets the value for ViewId to be an explicit nil
func (o *View) SetViewIdNil() {
	o.ViewId.Set(nil)
}

// UnsetViewId ensures that no value is present for ViewId, not even an explicit nil
func (o *View) UnsetViewId() {
	o.ViewId.Unset()
}

// GetViewLockEnabled returns the ViewLockEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetViewLockEnabled() bool {
	if o == nil || o.ViewLockEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ViewLockEnabled.Get()
}

// GetViewLockEnabledOk returns a tuple with the ViewLockEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetViewLockEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewLockEnabled.Get(), o.ViewLockEnabled.IsSet()
}

// HasViewLockEnabled returns a boolean if a field has been set.
func (o *View) HasViewLockEnabled() bool {
	if o != nil && o.ViewLockEnabled.IsSet() {
		return true
	}

	return false
}

// SetViewLockEnabled gets a reference to the given NullableBool and assigns it to the ViewLockEnabled field.
func (o *View) SetViewLockEnabled(v bool) {
	o.ViewLockEnabled.Set(&v)
}
// SetViewLockEnabledNil sets the value for ViewLockEnabled to be an explicit nil
func (o *View) SetViewLockEnabledNil() {
	o.ViewLockEnabled.Set(nil)
}

// UnsetViewLockEnabled ensures that no value is present for ViewLockEnabled, not even an explicit nil
func (o *View) UnsetViewLockEnabled() {
	o.ViewLockEnabled.Unset()
}

// GetViewProtection returns the ViewProtection field value if set, zero value otherwise.
func (o *View) GetViewProtection() ViewProtection {
	if o == nil || o.ViewProtection == nil {
		var ret ViewProtection
		return ret
	}
	return *o.ViewProtection
}

// GetViewProtectionOk returns a tuple with the ViewProtection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetViewProtectionOk() (*ViewProtection, bool) {
	if o == nil || o.ViewProtection == nil {
		return nil, false
	}
	return o.ViewProtection, true
}

// HasViewProtection returns a boolean if a field has been set.
func (o *View) HasViewProtection() bool {
	if o != nil && o.ViewProtection != nil {
		return true
	}

	return false
}

// SetViewProtection gets a reference to the given ViewProtection and assigns it to the ViewProtection field.
func (o *View) SetViewProtection(v ViewProtection) {
	o.ViewProtection = &v
}

func (o View) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessSids != nil {
		toSerialize["accessSids"] = o.AccessSids
	}
	if o.Aliases != nil {
		toSerialize["aliases"] = o.Aliases
	}
	if o.AllSmbMountPaths != nil {
		toSerialize["allSmbMountPaths"] = o.AllSmbMountPaths
	}
	if o.AntivirusScanConfig != nil {
		toSerialize["antivirusScanConfig"] = o.AntivirusScanConfig
	}
	if o.BasicMountPath.IsSet() {
		toSerialize["basicMountPath"] = o.BasicMountPath.Get()
	}
	if o.CaseInsensitiveNamesEnabled.IsSet() {
		toSerialize["caseInsensitiveNamesEnabled"] = o.CaseInsensitiveNamesEnabled.Get()
	}
	if o.CreateTimeMsecs.IsSet() {
		toSerialize["createTimeMsecs"] = o.CreateTimeMsecs.Get()
	}
	if o.DataLockExpiryUsecs.IsSet() {
		toSerialize["dataLockExpiryUsecs"] = o.DataLockExpiryUsecs.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.EnableFastDurableHandle.IsSet() {
		toSerialize["enableFastDurableHandle"] = o.EnableFastDurableHandle.Get()
	}
	if o.EnableFilerAuditLogging.IsSet() {
		toSerialize["enableFilerAuditLogging"] = o.EnableFilerAuditLogging.Get()
	}
	if o.EnableLiveIndexing.IsSet() {
		toSerialize["enableLiveIndexing"] = o.EnableLiveIndexing.Get()
	}
	if o.EnableMixedModePermissions.IsSet() {
		toSerialize["enableMixedModePermissions"] = o.EnableMixedModePermissions.Get()
	}
	if o.EnableNfsViewDiscovery.IsSet() {
		toSerialize["enableNfsViewDiscovery"] = o.EnableNfsViewDiscovery.Get()
	}
	if o.EnableOfflineCaching.IsSet() {
		toSerialize["enableOfflineCaching"] = o.EnableOfflineCaching.Get()
	}
	if o.EnableSmbAccessBasedEnumeration.IsSet() {
		toSerialize["enableSmbAccessBasedEnumeration"] = o.EnableSmbAccessBasedEnumeration.Get()
	}
	if o.EnableSmbEncryption.IsSet() {
		toSerialize["enableSmbEncryption"] = o.EnableSmbEncryption.Get()
	}
	if o.EnableSmbOplock.IsSet() {
		toSerialize["enableSmbOplock"] = o.EnableSmbOplock.Get()
	}
	if o.EnableSmbViewDiscovery.IsSet() {
		toSerialize["enableSmbViewDiscovery"] = o.EnableSmbViewDiscovery.Get()
	}
	if o.EnforceSmbEncryption.IsSet() {
		toSerialize["enforceSmbEncryption"] = o.EnforceSmbEncryption.Get()
	}
	if o.FileExtensionFilter != nil {
		toSerialize["fileExtensionFilter"] = o.FileExtensionFilter
	}
	if o.FileLockConfig != nil {
		toSerialize["fileLockConfig"] = o.FileLockConfig
	}
	if o.IsTargetForMigratedData.IsSet() {
		toSerialize["isTargetForMigratedData"] = o.IsTargetForMigratedData.Get()
	}
	if o.LogicalQuota.IsSet() {
		toSerialize["logicalQuota"] = o.LogicalQuota.Get()
	}
	if o.LogicalUsageBytes.IsSet() {
		toSerialize["logicalUsageBytes"] = o.LogicalUsageBytes.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.NetgroupWhitelist != nil {
		toSerialize["netgroupWhitelist"] = o.NetgroupWhitelist
	}
	if o.NfsAllSquash != nil {
		toSerialize["nfsAllSquash"] = o.NfsAllSquash
	}
	if o.NfsMountPath.IsSet() {
		toSerialize["nfsMountPath"] = o.NfsMountPath.Get()
	}
	if o.NfsRootPermissions != nil {
		toSerialize["nfsRootPermissions"] = o.NfsRootPermissions
	}
	if o.NfsRootSquash != nil {
		toSerialize["nfsRootSquash"] = o.NfsRootSquash
	}
	if o.OverrideGlobalNetgroupWhitelist.IsSet() {
		toSerialize["overrideGlobalNetgroupWhitelist"] = o.OverrideGlobalNetgroupWhitelist.Get()
	}
	if o.OverrideGlobalWhitelist.IsSet() {
		toSerialize["overrideGlobalWhitelist"] = o.OverrideGlobalWhitelist.Get()
	}
	if o.ProtocolAccess.IsSet() {
		toSerialize["protocolAccess"] = o.ProtocolAccess.Get()
	}
	if o.Qos != nil {
		toSerialize["qos"] = o.Qos
	}
	if o.S3AccessPath.IsSet() {
		toSerialize["s3AccessPath"] = o.S3AccessPath.Get()
	}
	if o.S3KeyMappingConfig.IsSet() {
		toSerialize["s3KeyMappingConfig"] = o.S3KeyMappingConfig.Get()
	}
	if o.SecurityMode.IsSet() {
		toSerialize["securityMode"] = o.SecurityMode.Get()
	}
	if o.SharePermissions != nil {
		toSerialize["sharePermissions"] = o.SharePermissions
	}
	if o.SmbMountPath.IsSet() {
		toSerialize["smbMountPath"] = o.SmbMountPath.Get()
	}
	if o.SmbPermissionsInfo != nil {
		toSerialize["smbPermissionsInfo"] = o.SmbPermissionsInfo
	}
	if o.Stats != nil {
		toSerialize["stats"] = o.Stats
	}
	if o.StoragePolicyOverride != nil {
		toSerialize["storagePolicyOverride"] = o.StoragePolicyOverride
	}
	if o.SubnetWhitelist != nil {
		toSerialize["subnetWhitelist"] = o.SubnetWhitelist
	}
	if o.SwiftProjectDomain.IsSet() {
		toSerialize["swiftProjectDomain"] = o.SwiftProjectDomain.Get()
	}
	if o.SwiftProjectName.IsSet() {
		toSerialize["swiftProjectName"] = o.SwiftProjectName.Get()
	}
	if o.SwiftUserDomain.IsSet() {
		toSerialize["swiftUserDomain"] = o.SwiftUserDomain.Get()
	}
	if o.SwiftUsername.IsSet() {
		toSerialize["swiftUsername"] = o.SwiftUsername.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.ViewBoxId.IsSet() {
		toSerialize["viewBoxId"] = o.ViewBoxId.Get()
	}
	if o.ViewBoxName.IsSet() {
		toSerialize["viewBoxName"] = o.ViewBoxName.Get()
	}
	if o.ViewId.IsSet() {
		toSerialize["viewId"] = o.ViewId.Get()
	}
	if o.ViewLockEnabled.IsSet() {
		toSerialize["viewLockEnabled"] = o.ViewLockEnabled.Get()
	}
	if o.ViewProtection != nil {
		toSerialize["viewProtection"] = o.ViewProtection
	}
	return json.Marshal(toSerialize)
}

type NullableView struct {
	value *View
	isSet bool
}

func (v NullableView) Get() *View {
	return v.value
}

func (v *NullableView) Set(val *View) {
	v.value = val
	v.isSet = true
}

func (v NullableView) IsSet() bool {
	return v.isSet
}

func (v *NullableView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableView(val *View) *NullableView {
	return &NullableView{value: val, isSet: true}
}

func (v NullableView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


