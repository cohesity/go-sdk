/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ViewStatInfo Specifies the View stats per view.
type ViewStatInfo struct {
	// Specifies the cluster Id.
	ClusterId NullableInt64 `json:"clusterId,omitempty"`
	// Specifies the cluster Incarnation Id.
	ClusterIncarnationId NullableInt64 `json:"clusterIncarnationId,omitempty"`
	// Specifies the data read in bytes.
	DataReadBytes NullableInt64 `json:"dataReadBytes,omitempty"`
	// Specifies the data written in bytes.
	DataWrittenBytes NullableInt64 `json:"dataWrittenBytes,omitempty"`
	// Specifies the logical size used in bytes.
	LogicalUsedBytes NullableInt64 `json:"logicalUsedBytes,omitempty"`
	// Specifies the peak data read in bytes per second in the last day.
	PeakReadThroughput NullableInt64 `json:"peakReadThroughput,omitempty"`
	// Specifies the peak data written in bytes per second in the last day.
	PeakWriteThroughput NullableInt64 `json:"peakWriteThroughput,omitempty"`
	// Specifies the physical size used in bytes.
	PhysicalUsedBytes NullableInt64 `json:"physicalUsedBytes,omitempty"`
	// Specifies the protocols of this view.
	Protocols *[]string `json:"protocols,omitempty"`
	// Specifies the storage reduction ratio.
	StorageReductionRatio NullableFloat32 `json:"storageReductionRatio,omitempty"`
	// Specifies the view Id.
	ViewId NullableInt64 `json:"viewId,omitempty"`
	// Specifies the view name.
	ViewName NullableString `json:"viewName,omitempty"`
}

// NewViewStatInfo instantiates a new ViewStatInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewStatInfo() *ViewStatInfo {
	this := ViewStatInfo{}
	return &this
}

// NewViewStatInfoWithDefaults instantiates a new ViewStatInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewStatInfoWithDefaults() *ViewStatInfo {
	this := ViewStatInfo{}
	return &this
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatInfo) GetClusterId() int64 {
	if o == nil || o.ClusterId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ClusterId.Get()
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatInfo) GetClusterIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterId.Get(), o.ClusterId.IsSet()
}

// HasClusterId returns a boolean if a field has been set.
func (o *ViewStatInfo) HasClusterId() bool {
	if o != nil && o.ClusterId.IsSet() {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given NullableInt64 and assigns it to the ClusterId field.
func (o *ViewStatInfo) SetClusterId(v int64) {
	o.ClusterId.Set(&v)
}
// SetClusterIdNil sets the value for ClusterId to be an explicit nil
func (o *ViewStatInfo) SetClusterIdNil() {
	o.ClusterId.Set(nil)
}

// UnsetClusterId ensures that no value is present for ClusterId, not even an explicit nil
func (o *ViewStatInfo) UnsetClusterId() {
	o.ClusterId.Unset()
}

// GetClusterIncarnationId returns the ClusterIncarnationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatInfo) GetClusterIncarnationId() int64 {
	if o == nil || o.ClusterIncarnationId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ClusterIncarnationId.Get()
}

// GetClusterIncarnationIdOk returns a tuple with the ClusterIncarnationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatInfo) GetClusterIncarnationIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterIncarnationId.Get(), o.ClusterIncarnationId.IsSet()
}

// HasClusterIncarnationId returns a boolean if a field has been set.
func (o *ViewStatInfo) HasClusterIncarnationId() bool {
	if o != nil && o.ClusterIncarnationId.IsSet() {
		return true
	}

	return false
}

// SetClusterIncarnationId gets a reference to the given NullableInt64 and assigns it to the ClusterIncarnationId field.
func (o *ViewStatInfo) SetClusterIncarnationId(v int64) {
	o.ClusterIncarnationId.Set(&v)
}
// SetClusterIncarnationIdNil sets the value for ClusterIncarnationId to be an explicit nil
func (o *ViewStatInfo) SetClusterIncarnationIdNil() {
	o.ClusterIncarnationId.Set(nil)
}

// UnsetClusterIncarnationId ensures that no value is present for ClusterIncarnationId, not even an explicit nil
func (o *ViewStatInfo) UnsetClusterIncarnationId() {
	o.ClusterIncarnationId.Unset()
}

// GetDataReadBytes returns the DataReadBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatInfo) GetDataReadBytes() int64 {
	if o == nil || o.DataReadBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DataReadBytes.Get()
}

// GetDataReadBytesOk returns a tuple with the DataReadBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatInfo) GetDataReadBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DataReadBytes.Get(), o.DataReadBytes.IsSet()
}

// HasDataReadBytes returns a boolean if a field has been set.
func (o *ViewStatInfo) HasDataReadBytes() bool {
	if o != nil && o.DataReadBytes.IsSet() {
		return true
	}

	return false
}

// SetDataReadBytes gets a reference to the given NullableInt64 and assigns it to the DataReadBytes field.
func (o *ViewStatInfo) SetDataReadBytes(v int64) {
	o.DataReadBytes.Set(&v)
}
// SetDataReadBytesNil sets the value for DataReadBytes to be an explicit nil
func (o *ViewStatInfo) SetDataReadBytesNil() {
	o.DataReadBytes.Set(nil)
}

// UnsetDataReadBytes ensures that no value is present for DataReadBytes, not even an explicit nil
func (o *ViewStatInfo) UnsetDataReadBytes() {
	o.DataReadBytes.Unset()
}

// GetDataWrittenBytes returns the DataWrittenBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatInfo) GetDataWrittenBytes() int64 {
	if o == nil || o.DataWrittenBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DataWrittenBytes.Get()
}

// GetDataWrittenBytesOk returns a tuple with the DataWrittenBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatInfo) GetDataWrittenBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DataWrittenBytes.Get(), o.DataWrittenBytes.IsSet()
}

// HasDataWrittenBytes returns a boolean if a field has been set.
func (o *ViewStatInfo) HasDataWrittenBytes() bool {
	if o != nil && o.DataWrittenBytes.IsSet() {
		return true
	}

	return false
}

// SetDataWrittenBytes gets a reference to the given NullableInt64 and assigns it to the DataWrittenBytes field.
func (o *ViewStatInfo) SetDataWrittenBytes(v int64) {
	o.DataWrittenBytes.Set(&v)
}
// SetDataWrittenBytesNil sets the value for DataWrittenBytes to be an explicit nil
func (o *ViewStatInfo) SetDataWrittenBytesNil() {
	o.DataWrittenBytes.Set(nil)
}

// UnsetDataWrittenBytes ensures that no value is present for DataWrittenBytes, not even an explicit nil
func (o *ViewStatInfo) UnsetDataWrittenBytes() {
	o.DataWrittenBytes.Unset()
}

// GetLogicalUsedBytes returns the LogicalUsedBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatInfo) GetLogicalUsedBytes() int64 {
	if o == nil || o.LogicalUsedBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LogicalUsedBytes.Get()
}

// GetLogicalUsedBytesOk returns a tuple with the LogicalUsedBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatInfo) GetLogicalUsedBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogicalUsedBytes.Get(), o.LogicalUsedBytes.IsSet()
}

// HasLogicalUsedBytes returns a boolean if a field has been set.
func (o *ViewStatInfo) HasLogicalUsedBytes() bool {
	if o != nil && o.LogicalUsedBytes.IsSet() {
		return true
	}

	return false
}

// SetLogicalUsedBytes gets a reference to the given NullableInt64 and assigns it to the LogicalUsedBytes field.
func (o *ViewStatInfo) SetLogicalUsedBytes(v int64) {
	o.LogicalUsedBytes.Set(&v)
}
// SetLogicalUsedBytesNil sets the value for LogicalUsedBytes to be an explicit nil
func (o *ViewStatInfo) SetLogicalUsedBytesNil() {
	o.LogicalUsedBytes.Set(nil)
}

// UnsetLogicalUsedBytes ensures that no value is present for LogicalUsedBytes, not even an explicit nil
func (o *ViewStatInfo) UnsetLogicalUsedBytes() {
	o.LogicalUsedBytes.Unset()
}

// GetPeakReadThroughput returns the PeakReadThroughput field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatInfo) GetPeakReadThroughput() int64 {
	if o == nil || o.PeakReadThroughput.Get() == nil {
		var ret int64
		return ret
	}
	return *o.PeakReadThroughput.Get()
}

// GetPeakReadThroughputOk returns a tuple with the PeakReadThroughput field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatInfo) GetPeakReadThroughputOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PeakReadThroughput.Get(), o.PeakReadThroughput.IsSet()
}

// HasPeakReadThroughput returns a boolean if a field has been set.
func (o *ViewStatInfo) HasPeakReadThroughput() bool {
	if o != nil && o.PeakReadThroughput.IsSet() {
		return true
	}

	return false
}

// SetPeakReadThroughput gets a reference to the given NullableInt64 and assigns it to the PeakReadThroughput field.
func (o *ViewStatInfo) SetPeakReadThroughput(v int64) {
	o.PeakReadThroughput.Set(&v)
}
// SetPeakReadThroughputNil sets the value for PeakReadThroughput to be an explicit nil
func (o *ViewStatInfo) SetPeakReadThroughputNil() {
	o.PeakReadThroughput.Set(nil)
}

// UnsetPeakReadThroughput ensures that no value is present for PeakReadThroughput, not even an explicit nil
func (o *ViewStatInfo) UnsetPeakReadThroughput() {
	o.PeakReadThroughput.Unset()
}

// GetPeakWriteThroughput returns the PeakWriteThroughput field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatInfo) GetPeakWriteThroughput() int64 {
	if o == nil || o.PeakWriteThroughput.Get() == nil {
		var ret int64
		return ret
	}
	return *o.PeakWriteThroughput.Get()
}

// GetPeakWriteThroughputOk returns a tuple with the PeakWriteThroughput field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatInfo) GetPeakWriteThroughputOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PeakWriteThroughput.Get(), o.PeakWriteThroughput.IsSet()
}

// HasPeakWriteThroughput returns a boolean if a field has been set.
func (o *ViewStatInfo) HasPeakWriteThroughput() bool {
	if o != nil && o.PeakWriteThroughput.IsSet() {
		return true
	}

	return false
}

// SetPeakWriteThroughput gets a reference to the given NullableInt64 and assigns it to the PeakWriteThroughput field.
func (o *ViewStatInfo) SetPeakWriteThroughput(v int64) {
	o.PeakWriteThroughput.Set(&v)
}
// SetPeakWriteThroughputNil sets the value for PeakWriteThroughput to be an explicit nil
func (o *ViewStatInfo) SetPeakWriteThroughputNil() {
	o.PeakWriteThroughput.Set(nil)
}

// UnsetPeakWriteThroughput ensures that no value is present for PeakWriteThroughput, not even an explicit nil
func (o *ViewStatInfo) UnsetPeakWriteThroughput() {
	o.PeakWriteThroughput.Unset()
}

// GetPhysicalUsedBytes returns the PhysicalUsedBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatInfo) GetPhysicalUsedBytes() int64 {
	if o == nil || o.PhysicalUsedBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.PhysicalUsedBytes.Get()
}

// GetPhysicalUsedBytesOk returns a tuple with the PhysicalUsedBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatInfo) GetPhysicalUsedBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PhysicalUsedBytes.Get(), o.PhysicalUsedBytes.IsSet()
}

// HasPhysicalUsedBytes returns a boolean if a field has been set.
func (o *ViewStatInfo) HasPhysicalUsedBytes() bool {
	if o != nil && o.PhysicalUsedBytes.IsSet() {
		return true
	}

	return false
}

// SetPhysicalUsedBytes gets a reference to the given NullableInt64 and assigns it to the PhysicalUsedBytes field.
func (o *ViewStatInfo) SetPhysicalUsedBytes(v int64) {
	o.PhysicalUsedBytes.Set(&v)
}
// SetPhysicalUsedBytesNil sets the value for PhysicalUsedBytes to be an explicit nil
func (o *ViewStatInfo) SetPhysicalUsedBytesNil() {
	o.PhysicalUsedBytes.Set(nil)
}

// UnsetPhysicalUsedBytes ensures that no value is present for PhysicalUsedBytes, not even an explicit nil
func (o *ViewStatInfo) UnsetPhysicalUsedBytes() {
	o.PhysicalUsedBytes.Unset()
}

// GetProtocols returns the Protocols field value if set, zero value otherwise.
func (o *ViewStatInfo) GetProtocols() []string {
	if o == nil || o.Protocols == nil {
		var ret []string
		return ret
	}
	return *o.Protocols
}

// GetProtocolsOk returns a tuple with the Protocols field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewStatInfo) GetProtocolsOk() (*[]string, bool) {
	if o == nil || o.Protocols == nil {
		return nil, false
	}
	return o.Protocols, true
}

// HasProtocols returns a boolean if a field has been set.
func (o *ViewStatInfo) HasProtocols() bool {
	if o != nil && o.Protocols != nil {
		return true
	}

	return false
}

// SetProtocols gets a reference to the given []string and assigns it to the Protocols field.
func (o *ViewStatInfo) SetProtocols(v []string) {
	o.Protocols = &v
}

// GetStorageReductionRatio returns the StorageReductionRatio field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatInfo) GetStorageReductionRatio() float32 {
	if o == nil || o.StorageReductionRatio.Get() == nil {
		var ret float32
		return ret
	}
	return *o.StorageReductionRatio.Get()
}

// GetStorageReductionRatioOk returns a tuple with the StorageReductionRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatInfo) GetStorageReductionRatioOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageReductionRatio.Get(), o.StorageReductionRatio.IsSet()
}

// HasStorageReductionRatio returns a boolean if a field has been set.
func (o *ViewStatInfo) HasStorageReductionRatio() bool {
	if o != nil && o.StorageReductionRatio.IsSet() {
		return true
	}

	return false
}

// SetStorageReductionRatio gets a reference to the given NullableFloat32 and assigns it to the StorageReductionRatio field.
func (o *ViewStatInfo) SetStorageReductionRatio(v float32) {
	o.StorageReductionRatio.Set(&v)
}
// SetStorageReductionRatioNil sets the value for StorageReductionRatio to be an explicit nil
func (o *ViewStatInfo) SetStorageReductionRatioNil() {
	o.StorageReductionRatio.Set(nil)
}

// UnsetStorageReductionRatio ensures that no value is present for StorageReductionRatio, not even an explicit nil
func (o *ViewStatInfo) UnsetStorageReductionRatio() {
	o.StorageReductionRatio.Unset()
}

// GetViewId returns the ViewId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatInfo) GetViewId() int64 {
	if o == nil || o.ViewId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ViewId.Get()
}

// GetViewIdOk returns a tuple with the ViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatInfo) GetViewIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewId.Get(), o.ViewId.IsSet()
}

// HasViewId returns a boolean if a field has been set.
func (o *ViewStatInfo) HasViewId() bool {
	if o != nil && o.ViewId.IsSet() {
		return true
	}

	return false
}

// SetViewId gets a reference to the given NullableInt64 and assigns it to the ViewId field.
func (o *ViewStatInfo) SetViewId(v int64) {
	o.ViewId.Set(&v)
}
// SetViewIdNil sets the value for ViewId to be an explicit nil
func (o *ViewStatInfo) SetViewIdNil() {
	o.ViewId.Set(nil)
}

// UnsetViewId ensures that no value is present for ViewId, not even an explicit nil
func (o *ViewStatInfo) UnsetViewId() {
	o.ViewId.Unset()
}

// GetViewName returns the ViewName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatInfo) GetViewName() string {
	if o == nil || o.ViewName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ViewName.Get()
}

// GetViewNameOk returns a tuple with the ViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatInfo) GetViewNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewName.Get(), o.ViewName.IsSet()
}

// HasViewName returns a boolean if a field has been set.
func (o *ViewStatInfo) HasViewName() bool {
	if o != nil && o.ViewName.IsSet() {
		return true
	}

	return false
}

// SetViewName gets a reference to the given NullableString and assigns it to the ViewName field.
func (o *ViewStatInfo) SetViewName(v string) {
	o.ViewName.Set(&v)
}
// SetViewNameNil sets the value for ViewName to be an explicit nil
func (o *ViewStatInfo) SetViewNameNil() {
	o.ViewName.Set(nil)
}

// UnsetViewName ensures that no value is present for ViewName, not even an explicit nil
func (o *ViewStatInfo) UnsetViewName() {
	o.ViewName.Unset()
}

func (o ViewStatInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClusterId.IsSet() {
		toSerialize["clusterId"] = o.ClusterId.Get()
	}
	if o.ClusterIncarnationId.IsSet() {
		toSerialize["clusterIncarnationId"] = o.ClusterIncarnationId.Get()
	}
	if o.DataReadBytes.IsSet() {
		toSerialize["dataReadBytes"] = o.DataReadBytes.Get()
	}
	if o.DataWrittenBytes.IsSet() {
		toSerialize["dataWrittenBytes"] = o.DataWrittenBytes.Get()
	}
	if o.LogicalUsedBytes.IsSet() {
		toSerialize["logicalUsedBytes"] = o.LogicalUsedBytes.Get()
	}
	if o.PeakReadThroughput.IsSet() {
		toSerialize["peakReadThroughput"] = o.PeakReadThroughput.Get()
	}
	if o.PeakWriteThroughput.IsSet() {
		toSerialize["peakWriteThroughput"] = o.PeakWriteThroughput.Get()
	}
	if o.PhysicalUsedBytes.IsSet() {
		toSerialize["physicalUsedBytes"] = o.PhysicalUsedBytes.Get()
	}
	if o.Protocols != nil {
		toSerialize["protocols"] = o.Protocols
	}
	if o.StorageReductionRatio.IsSet() {
		toSerialize["storageReductionRatio"] = o.StorageReductionRatio.Get()
	}
	if o.ViewId.IsSet() {
		toSerialize["viewId"] = o.ViewId.Get()
	}
	if o.ViewName.IsSet() {
		toSerialize["viewName"] = o.ViewName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableViewStatInfo struct {
	value *ViewStatInfo
	isSet bool
}

func (v NullableViewStatInfo) Get() *ViewStatInfo {
	return v.value
}

func (v *NullableViewStatInfo) Set(val *ViewStatInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableViewStatInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableViewStatInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewStatInfo(val *ViewStatInfo) *NullableViewStatInfo {
	return &NullableViewStatInfo{value: val, isSet: true}
}

func (v NullableViewStatInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewStatInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


