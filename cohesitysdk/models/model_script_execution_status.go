/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ScriptExecutionStatus struct for ScriptExecutionStatus
type ScriptExecutionStatus struct {
	Error *ErrorProto `json:"error,omitempty"`
	// Indicates if a script is executing. This is particularly useful when there is a cancellation request and Magneto crashes at that point before cleaning up the running script.
	Executing NullableBool `json:"executing,omitempty"`
	// Exit code of the script.
	ExitCode NullableInt32 `json:"exitCode,omitempty"`
	// Execution state of the script.
	State NullableInt32 `json:"state,omitempty"`
}

// NewScriptExecutionStatus instantiates a new ScriptExecutionStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScriptExecutionStatus() *ScriptExecutionStatus {
	this := ScriptExecutionStatus{}
	return &this
}

// NewScriptExecutionStatusWithDefaults instantiates a new ScriptExecutionStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScriptExecutionStatusWithDefaults() *ScriptExecutionStatus {
	this := ScriptExecutionStatus{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ScriptExecutionStatus) GetError() ErrorProto {
	if o == nil || o.Error == nil {
		var ret ErrorProto
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScriptExecutionStatus) GetErrorOk() (*ErrorProto, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ScriptExecutionStatus) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given ErrorProto and assigns it to the Error field.
func (o *ScriptExecutionStatus) SetError(v ErrorProto) {
	o.Error = &v
}

// GetExecuting returns the Executing field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScriptExecutionStatus) GetExecuting() bool {
	if o == nil || o.Executing.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Executing.Get()
}

// GetExecutingOk returns a tuple with the Executing field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScriptExecutionStatus) GetExecutingOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Executing.Get(), o.Executing.IsSet()
}

// HasExecuting returns a boolean if a field has been set.
func (o *ScriptExecutionStatus) HasExecuting() bool {
	if o != nil && o.Executing.IsSet() {
		return true
	}

	return false
}

// SetExecuting gets a reference to the given NullableBool and assigns it to the Executing field.
func (o *ScriptExecutionStatus) SetExecuting(v bool) {
	o.Executing.Set(&v)
}
// SetExecutingNil sets the value for Executing to be an explicit nil
func (o *ScriptExecutionStatus) SetExecutingNil() {
	o.Executing.Set(nil)
}

// UnsetExecuting ensures that no value is present for Executing, not even an explicit nil
func (o *ScriptExecutionStatus) UnsetExecuting() {
	o.Executing.Unset()
}

// GetExitCode returns the ExitCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScriptExecutionStatus) GetExitCode() int32 {
	if o == nil || o.ExitCode.Get() == nil {
		var ret int32
		return ret
	}
	return *o.ExitCode.Get()
}

// GetExitCodeOk returns a tuple with the ExitCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScriptExecutionStatus) GetExitCodeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExitCode.Get(), o.ExitCode.IsSet()
}

// HasExitCode returns a boolean if a field has been set.
func (o *ScriptExecutionStatus) HasExitCode() bool {
	if o != nil && o.ExitCode.IsSet() {
		return true
	}

	return false
}

// SetExitCode gets a reference to the given NullableInt32 and assigns it to the ExitCode field.
func (o *ScriptExecutionStatus) SetExitCode(v int32) {
	o.ExitCode.Set(&v)
}
// SetExitCodeNil sets the value for ExitCode to be an explicit nil
func (o *ScriptExecutionStatus) SetExitCodeNil() {
	o.ExitCode.Set(nil)
}

// UnsetExitCode ensures that no value is present for ExitCode, not even an explicit nil
func (o *ScriptExecutionStatus) UnsetExitCode() {
	o.ExitCode.Unset()
}

// GetState returns the State field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScriptExecutionStatus) GetState() int32 {
	if o == nil || o.State.Get() == nil {
		var ret int32
		return ret
	}
	return *o.State.Get()
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScriptExecutionStatus) GetStateOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.State.Get(), o.State.IsSet()
}

// HasState returns a boolean if a field has been set.
func (o *ScriptExecutionStatus) HasState() bool {
	if o != nil && o.State.IsSet() {
		return true
	}

	return false
}

// SetState gets a reference to the given NullableInt32 and assigns it to the State field.
func (o *ScriptExecutionStatus) SetState(v int32) {
	o.State.Set(&v)
}
// SetStateNil sets the value for State to be an explicit nil
func (o *ScriptExecutionStatus) SetStateNil() {
	o.State.Set(nil)
}

// UnsetState ensures that no value is present for State, not even an explicit nil
func (o *ScriptExecutionStatus) UnsetState() {
	o.State.Unset()
}

func (o ScriptExecutionStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.Executing.IsSet() {
		toSerialize["executing"] = o.Executing.Get()
	}
	if o.ExitCode.IsSet() {
		toSerialize["exitCode"] = o.ExitCode.Get()
	}
	if o.State.IsSet() {
		toSerialize["state"] = o.State.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableScriptExecutionStatus struct {
	value *ScriptExecutionStatus
	isSet bool
}

func (v NullableScriptExecutionStatus) Get() *ScriptExecutionStatus {
	return v.value
}

func (v *NullableScriptExecutionStatus) Set(val *ScriptExecutionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableScriptExecutionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableScriptExecutionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScriptExecutionStatus(val *ScriptExecutionStatus) *NullableScriptExecutionStatus {
	return &NullableScriptExecutionStatus{value: val, isSet: true}
}

func (v NullableScriptExecutionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScriptExecutionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


