/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// BandwidthLimit Specifies settings for limiting the data transfer rate between the local and remote Clusters or bandwidth limiting schedule for apollo. Only one of RateLimitBytesPerSec or IoRate should be set in this struct and corresponding BandwidthLimitOverrides should also be in the same unit.
type BandwidthLimit struct {
	// Array of Override Bandwidth Limits.  Specifies a list of override bandwidth limits and time periods when those limits override the rateLimitBytesPerSec limit. If overlapping time periods are specified, the last one in the array takes precedence.
	BandwidthLimitOverrides []BandwidthLimitOverride `json:"bandwidthLimitOverrides,omitempty"`
	// Specifies the default IO Rate of the throttling schedule. This value is internally mapped to some notion of how many resources a process should be consuming.
	IoRate NullableInt32 `json:"ioRate,omitempty"`
	// Specifies the maximum allowed data transfer rate between the local Cluster and remote Clusters. The value is specified in bytes per second. If not set, the data transfer rate is not limited.
	RateLimitBytesPerSec NullableInt64 `json:"rateLimitBytesPerSec,omitempty"`
	// Specifies a time zone for the specified time period. The time zone is defined in the following format: \"Area/Location\", for example: \"America/New_York\".
	Timezone NullableString `json:"timezone,omitempty"`
}

// NewBandwidthLimit instantiates a new BandwidthLimit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBandwidthLimit() *BandwidthLimit {
	this := BandwidthLimit{}
	return &this
}

// NewBandwidthLimitWithDefaults instantiates a new BandwidthLimit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBandwidthLimitWithDefaults() *BandwidthLimit {
	this := BandwidthLimit{}
	return &this
}

// GetBandwidthLimitOverrides returns the BandwidthLimitOverrides field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BandwidthLimit) GetBandwidthLimitOverrides() []BandwidthLimitOverride {
	if o == nil  {
		var ret []BandwidthLimitOverride
		return ret
	}
	return o.BandwidthLimitOverrides
}

// GetBandwidthLimitOverridesOk returns a tuple with the BandwidthLimitOverrides field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BandwidthLimit) GetBandwidthLimitOverridesOk() (*[]BandwidthLimitOverride, bool) {
	if o == nil || o.BandwidthLimitOverrides == nil {
		return nil, false
	}
	return &o.BandwidthLimitOverrides, true
}

// HasBandwidthLimitOverrides returns a boolean if a field has been set.
func (o *BandwidthLimit) HasBandwidthLimitOverrides() bool {
	if o != nil && o.BandwidthLimitOverrides != nil {
		return true
	}

	return false
}

// SetBandwidthLimitOverrides gets a reference to the given []BandwidthLimitOverride and assigns it to the BandwidthLimitOverrides field.
func (o *BandwidthLimit) SetBandwidthLimitOverrides(v []BandwidthLimitOverride) {
	o.BandwidthLimitOverrides = v
}

// GetIoRate returns the IoRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BandwidthLimit) GetIoRate() int32 {
	if o == nil || o.IoRate.Get() == nil {
		var ret int32
		return ret
	}
	return *o.IoRate.Get()
}

// GetIoRateOk returns a tuple with the IoRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BandwidthLimit) GetIoRateOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IoRate.Get(), o.IoRate.IsSet()
}

// HasIoRate returns a boolean if a field has been set.
func (o *BandwidthLimit) HasIoRate() bool {
	if o != nil && o.IoRate.IsSet() {
		return true
	}

	return false
}

// SetIoRate gets a reference to the given NullableInt32 and assigns it to the IoRate field.
func (o *BandwidthLimit) SetIoRate(v int32) {
	o.IoRate.Set(&v)
}
// SetIoRateNil sets the value for IoRate to be an explicit nil
func (o *BandwidthLimit) SetIoRateNil() {
	o.IoRate.Set(nil)
}

// UnsetIoRate ensures that no value is present for IoRate, not even an explicit nil
func (o *BandwidthLimit) UnsetIoRate() {
	o.IoRate.Unset()
}

// GetRateLimitBytesPerSec returns the RateLimitBytesPerSec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BandwidthLimit) GetRateLimitBytesPerSec() int64 {
	if o == nil || o.RateLimitBytesPerSec.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RateLimitBytesPerSec.Get()
}

// GetRateLimitBytesPerSecOk returns a tuple with the RateLimitBytesPerSec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BandwidthLimit) GetRateLimitBytesPerSecOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RateLimitBytesPerSec.Get(), o.RateLimitBytesPerSec.IsSet()
}

// HasRateLimitBytesPerSec returns a boolean if a field has been set.
func (o *BandwidthLimit) HasRateLimitBytesPerSec() bool {
	if o != nil && o.RateLimitBytesPerSec.IsSet() {
		return true
	}

	return false
}

// SetRateLimitBytesPerSec gets a reference to the given NullableInt64 and assigns it to the RateLimitBytesPerSec field.
func (o *BandwidthLimit) SetRateLimitBytesPerSec(v int64) {
	o.RateLimitBytesPerSec.Set(&v)
}
// SetRateLimitBytesPerSecNil sets the value for RateLimitBytesPerSec to be an explicit nil
func (o *BandwidthLimit) SetRateLimitBytesPerSecNil() {
	o.RateLimitBytesPerSec.Set(nil)
}

// UnsetRateLimitBytesPerSec ensures that no value is present for RateLimitBytesPerSec, not even an explicit nil
func (o *BandwidthLimit) UnsetRateLimitBytesPerSec() {
	o.RateLimitBytesPerSec.Unset()
}

// GetTimezone returns the Timezone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BandwidthLimit) GetTimezone() string {
	if o == nil || o.Timezone.Get() == nil {
		var ret string
		return ret
	}
	return *o.Timezone.Get()
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BandwidthLimit) GetTimezoneOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Timezone.Get(), o.Timezone.IsSet()
}

// HasTimezone returns a boolean if a field has been set.
func (o *BandwidthLimit) HasTimezone() bool {
	if o != nil && o.Timezone.IsSet() {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given NullableString and assigns it to the Timezone field.
func (o *BandwidthLimit) SetTimezone(v string) {
	o.Timezone.Set(&v)
}
// SetTimezoneNil sets the value for Timezone to be an explicit nil
func (o *BandwidthLimit) SetTimezoneNil() {
	o.Timezone.Set(nil)
}

// UnsetTimezone ensures that no value is present for Timezone, not even an explicit nil
func (o *BandwidthLimit) UnsetTimezone() {
	o.Timezone.Unset()
}

func (o BandwidthLimit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BandwidthLimitOverrides != nil {
		toSerialize["bandwidthLimitOverrides"] = o.BandwidthLimitOverrides
	}
	if o.IoRate.IsSet() {
		toSerialize["ioRate"] = o.IoRate.Get()
	}
	if o.RateLimitBytesPerSec.IsSet() {
		toSerialize["rateLimitBytesPerSec"] = o.RateLimitBytesPerSec.Get()
	}
	if o.Timezone.IsSet() {
		toSerialize["timezone"] = o.Timezone.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableBandwidthLimit struct {
	value *BandwidthLimit
	isSet bool
}

func (v NullableBandwidthLimit) Get() *BandwidthLimit {
	return v.value
}

func (v *NullableBandwidthLimit) Set(val *BandwidthLimit) {
	v.value = val
	v.isSet = true
}

func (v NullableBandwidthLimit) IsSet() bool {
	return v.isSet
}

func (v *NullableBandwidthLimit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBandwidthLimit(val *BandwidthLimit) *NullableBandwidthLimit {
	return &NullableBandwidthLimit{value: val, isSet: true}
}

func (v NullableBandwidthLimit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBandwidthLimit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


