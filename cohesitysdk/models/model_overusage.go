/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// Overusage struct for Overusage
type Overusage struct {
	// Name of feature.
	FeatureName NullableString `json:"featureName,omitempty"`
	// Feature overusage by the cluster.
	OverusedGiB NullableInt64 `json:"overusedGiB,omitempty"`
	// Number of overused VM spinned.
	OverusedVm NullableInt64 `json:"overusedVm,omitempty"`
}

// NewOverusage instantiates a new Overusage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOverusage() *Overusage {
	this := Overusage{}
	return &this
}

// NewOverusageWithDefaults instantiates a new Overusage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOverusageWithDefaults() *Overusage {
	this := Overusage{}
	return &this
}

// GetFeatureName returns the FeatureName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Overusage) GetFeatureName() string {
	if o == nil || o.FeatureName.Get() == nil {
		var ret string
		return ret
	}
	return *o.FeatureName.Get()
}

// GetFeatureNameOk returns a tuple with the FeatureName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Overusage) GetFeatureNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FeatureName.Get(), o.FeatureName.IsSet()
}

// HasFeatureName returns a boolean if a field has been set.
func (o *Overusage) HasFeatureName() bool {
	if o != nil && o.FeatureName.IsSet() {
		return true
	}

	return false
}

// SetFeatureName gets a reference to the given NullableString and assigns it to the FeatureName field.
func (o *Overusage) SetFeatureName(v string) {
	o.FeatureName.Set(&v)
}
// SetFeatureNameNil sets the value for FeatureName to be an explicit nil
func (o *Overusage) SetFeatureNameNil() {
	o.FeatureName.Set(nil)
}

// UnsetFeatureName ensures that no value is present for FeatureName, not even an explicit nil
func (o *Overusage) UnsetFeatureName() {
	o.FeatureName.Unset()
}

// GetOverusedGiB returns the OverusedGiB field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Overusage) GetOverusedGiB() int64 {
	if o == nil || o.OverusedGiB.Get() == nil {
		var ret int64
		return ret
	}
	return *o.OverusedGiB.Get()
}

// GetOverusedGiBOk returns a tuple with the OverusedGiB field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Overusage) GetOverusedGiBOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OverusedGiB.Get(), o.OverusedGiB.IsSet()
}

// HasOverusedGiB returns a boolean if a field has been set.
func (o *Overusage) HasOverusedGiB() bool {
	if o != nil && o.OverusedGiB.IsSet() {
		return true
	}

	return false
}

// SetOverusedGiB gets a reference to the given NullableInt64 and assigns it to the OverusedGiB field.
func (o *Overusage) SetOverusedGiB(v int64) {
	o.OverusedGiB.Set(&v)
}
// SetOverusedGiBNil sets the value for OverusedGiB to be an explicit nil
func (o *Overusage) SetOverusedGiBNil() {
	o.OverusedGiB.Set(nil)
}

// UnsetOverusedGiB ensures that no value is present for OverusedGiB, not even an explicit nil
func (o *Overusage) UnsetOverusedGiB() {
	o.OverusedGiB.Unset()
}

// GetOverusedVm returns the OverusedVm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Overusage) GetOverusedVm() int64 {
	if o == nil || o.OverusedVm.Get() == nil {
		var ret int64
		return ret
	}
	return *o.OverusedVm.Get()
}

// GetOverusedVmOk returns a tuple with the OverusedVm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Overusage) GetOverusedVmOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OverusedVm.Get(), o.OverusedVm.IsSet()
}

// HasOverusedVm returns a boolean if a field has been set.
func (o *Overusage) HasOverusedVm() bool {
	if o != nil && o.OverusedVm.IsSet() {
		return true
	}

	return false
}

// SetOverusedVm gets a reference to the given NullableInt64 and assigns it to the OverusedVm field.
func (o *Overusage) SetOverusedVm(v int64) {
	o.OverusedVm.Set(&v)
}
// SetOverusedVmNil sets the value for OverusedVm to be an explicit nil
func (o *Overusage) SetOverusedVmNil() {
	o.OverusedVm.Set(nil)
}

// UnsetOverusedVm ensures that no value is present for OverusedVm, not even an explicit nil
func (o *Overusage) UnsetOverusedVm() {
	o.OverusedVm.Unset()
}

func (o Overusage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FeatureName.IsSet() {
		toSerialize["featureName"] = o.FeatureName.Get()
	}
	if o.OverusedGiB.IsSet() {
		toSerialize["overusedGiB"] = o.OverusedGiB.Get()
	}
	if o.OverusedVm.IsSet() {
		toSerialize["overusedVm"] = o.OverusedVm.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableOverusage struct {
	value *Overusage
	isSet bool
}

func (v NullableOverusage) Get() *Overusage {
	return v.value
}

func (v *NullableOverusage) Set(val *Overusage) {
	v.value = val
	v.isSet = true
}

func (v NullableOverusage) IsSet() bool {
	return v.isSet
}

func (v *NullableOverusage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOverusage(val *Overusage) *NullableOverusage {
	return &NullableOverusage{value: val, isSet: true}
}

func (v NullableOverusage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOverusage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


