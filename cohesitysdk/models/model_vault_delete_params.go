/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// VaultDeleteParams struct for VaultDeleteParams
type VaultDeleteParams struct {
	// Specifies whether to force delete the vault. If the flag is set to true, the RemovalState of the vault is changed to 'kMarkedForRemoval' and Eventually vault is removed from cluster config and archived metadata from scribe is removed without necessarily deleting the associated archived data.
	ForceDelete NullableBool `json:"forceDelete,omitempty"`
	// Specifies an id that identifies the Vault.
	Id NullableInt64 `json:"id,omitempty"`
	// Specifies if Vaults that are marked for removal should be returned.
	IncludeMarkedForRemoval NullableBool `json:"includeMarkedForRemoval,omitempty"`
	// Specifies whether to retry a request after failure.
	Retry NullableBool `json:"retry,omitempty"`
}

// NewVaultDeleteParams instantiates a new VaultDeleteParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVaultDeleteParams() *VaultDeleteParams {
	this := VaultDeleteParams{}
	return &this
}

// NewVaultDeleteParamsWithDefaults instantiates a new VaultDeleteParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVaultDeleteParamsWithDefaults() *VaultDeleteParams {
	this := VaultDeleteParams{}
	return &this
}

// GetForceDelete returns the ForceDelete field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VaultDeleteParams) GetForceDelete() bool {
	if o == nil || o.ForceDelete.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ForceDelete.Get()
}

// GetForceDeleteOk returns a tuple with the ForceDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VaultDeleteParams) GetForceDeleteOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ForceDelete.Get(), o.ForceDelete.IsSet()
}

// HasForceDelete returns a boolean if a field has been set.
func (o *VaultDeleteParams) HasForceDelete() bool {
	if o != nil && o.ForceDelete.IsSet() {
		return true
	}

	return false
}

// SetForceDelete gets a reference to the given NullableBool and assigns it to the ForceDelete field.
func (o *VaultDeleteParams) SetForceDelete(v bool) {
	o.ForceDelete.Set(&v)
}
// SetForceDeleteNil sets the value for ForceDelete to be an explicit nil
func (o *VaultDeleteParams) SetForceDeleteNil() {
	o.ForceDelete.Set(nil)
}

// UnsetForceDelete ensures that no value is present for ForceDelete, not even an explicit nil
func (o *VaultDeleteParams) UnsetForceDelete() {
	o.ForceDelete.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VaultDeleteParams) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VaultDeleteParams) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *VaultDeleteParams) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *VaultDeleteParams) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *VaultDeleteParams) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *VaultDeleteParams) UnsetId() {
	o.Id.Unset()
}

// GetIncludeMarkedForRemoval returns the IncludeMarkedForRemoval field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VaultDeleteParams) GetIncludeMarkedForRemoval() bool {
	if o == nil || o.IncludeMarkedForRemoval.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IncludeMarkedForRemoval.Get()
}

// GetIncludeMarkedForRemovalOk returns a tuple with the IncludeMarkedForRemoval field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VaultDeleteParams) GetIncludeMarkedForRemovalOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IncludeMarkedForRemoval.Get(), o.IncludeMarkedForRemoval.IsSet()
}

// HasIncludeMarkedForRemoval returns a boolean if a field has been set.
func (o *VaultDeleteParams) HasIncludeMarkedForRemoval() bool {
	if o != nil && o.IncludeMarkedForRemoval.IsSet() {
		return true
	}

	return false
}

// SetIncludeMarkedForRemoval gets a reference to the given NullableBool and assigns it to the IncludeMarkedForRemoval field.
func (o *VaultDeleteParams) SetIncludeMarkedForRemoval(v bool) {
	o.IncludeMarkedForRemoval.Set(&v)
}
// SetIncludeMarkedForRemovalNil sets the value for IncludeMarkedForRemoval to be an explicit nil
func (o *VaultDeleteParams) SetIncludeMarkedForRemovalNil() {
	o.IncludeMarkedForRemoval.Set(nil)
}

// UnsetIncludeMarkedForRemoval ensures that no value is present for IncludeMarkedForRemoval, not even an explicit nil
func (o *VaultDeleteParams) UnsetIncludeMarkedForRemoval() {
	o.IncludeMarkedForRemoval.Unset()
}

// GetRetry returns the Retry field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VaultDeleteParams) GetRetry() bool {
	if o == nil || o.Retry.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Retry.Get()
}

// GetRetryOk returns a tuple with the Retry field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VaultDeleteParams) GetRetryOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Retry.Get(), o.Retry.IsSet()
}

// HasRetry returns a boolean if a field has been set.
func (o *VaultDeleteParams) HasRetry() bool {
	if o != nil && o.Retry.IsSet() {
		return true
	}

	return false
}

// SetRetry gets a reference to the given NullableBool and assigns it to the Retry field.
func (o *VaultDeleteParams) SetRetry(v bool) {
	o.Retry.Set(&v)
}
// SetRetryNil sets the value for Retry to be an explicit nil
func (o *VaultDeleteParams) SetRetryNil() {
	o.Retry.Set(nil)
}

// UnsetRetry ensures that no value is present for Retry, not even an explicit nil
func (o *VaultDeleteParams) UnsetRetry() {
	o.Retry.Unset()
}

func (o VaultDeleteParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ForceDelete.IsSet() {
		toSerialize["forceDelete"] = o.ForceDelete.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.IncludeMarkedForRemoval.IsSet() {
		toSerialize["includeMarkedForRemoval"] = o.IncludeMarkedForRemoval.Get()
	}
	if o.Retry.IsSet() {
		toSerialize["retry"] = o.Retry.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableVaultDeleteParams struct {
	value *VaultDeleteParams
	isSet bool
}

func (v NullableVaultDeleteParams) Get() *VaultDeleteParams {
	return v.value
}

func (v *NullableVaultDeleteParams) Set(val *VaultDeleteParams) {
	v.value = val
	v.isSet = true
}

func (v NullableVaultDeleteParams) IsSet() bool {
	return v.isSet
}

func (v *NullableVaultDeleteParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVaultDeleteParams(val *VaultDeleteParams) *NullableVaultDeleteParams {
	return &NullableVaultDeleteParams{value: val, isSet: true}
}

func (v NullableVaultDeleteParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVaultDeleteParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


