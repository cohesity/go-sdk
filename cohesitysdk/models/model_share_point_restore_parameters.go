/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// SharePointRestoreParameters Specifies information needed for recovering SharePoint Site and items.
type SharePointRestoreParameters struct {
	// Specifies whether the objects are to be restored to the original drive.
	RestoreToOriginalSite NullableBool `json:"restoreToOriginalSite,omitempty"`
	// Specifies the list of SharePoint Sites whose Document Repositories are being restored.
	SiteOwnerList []SiteOwner `json:"siteOwnerList,omitempty"`
	// Specifies the target document library name within the alternate site.
	TargetDocumentLibraryName NullableString `json:"targetDocumentLibraryName,omitempty"`
	// Specifies a custom prefix for the document libraries when being restored to the original or an alternate site.
	TargetDocumentLibraryPrefix NullableString `json:"targetDocumentLibraryPrefix,omitempty"`
	TargetSite *ProtectionSource `json:"targetSite,omitempty"`
}

// NewSharePointRestoreParameters instantiates a new SharePointRestoreParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharePointRestoreParameters() *SharePointRestoreParameters {
	this := SharePointRestoreParameters{}
	return &this
}

// NewSharePointRestoreParametersWithDefaults instantiates a new SharePointRestoreParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharePointRestoreParametersWithDefaults() *SharePointRestoreParameters {
	this := SharePointRestoreParameters{}
	return &this
}

// GetRestoreToOriginalSite returns the RestoreToOriginalSite field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SharePointRestoreParameters) GetRestoreToOriginalSite() bool {
	if o == nil || o.RestoreToOriginalSite.Get() == nil {
		var ret bool
		return ret
	}
	return *o.RestoreToOriginalSite.Get()
}

// GetRestoreToOriginalSiteOk returns a tuple with the RestoreToOriginalSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SharePointRestoreParameters) GetRestoreToOriginalSiteOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RestoreToOriginalSite.Get(), o.RestoreToOriginalSite.IsSet()
}

// HasRestoreToOriginalSite returns a boolean if a field has been set.
func (o *SharePointRestoreParameters) HasRestoreToOriginalSite() bool {
	if o != nil && o.RestoreToOriginalSite.IsSet() {
		return true
	}

	return false
}

// SetRestoreToOriginalSite gets a reference to the given NullableBool and assigns it to the RestoreToOriginalSite field.
func (o *SharePointRestoreParameters) SetRestoreToOriginalSite(v bool) {
	o.RestoreToOriginalSite.Set(&v)
}
// SetRestoreToOriginalSiteNil sets the value for RestoreToOriginalSite to be an explicit nil
func (o *SharePointRestoreParameters) SetRestoreToOriginalSiteNil() {
	o.RestoreToOriginalSite.Set(nil)
}

// UnsetRestoreToOriginalSite ensures that no value is present for RestoreToOriginalSite, not even an explicit nil
func (o *SharePointRestoreParameters) UnsetRestoreToOriginalSite() {
	o.RestoreToOriginalSite.Unset()
}

// GetSiteOwnerList returns the SiteOwnerList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SharePointRestoreParameters) GetSiteOwnerList() []SiteOwner {
	if o == nil  {
		var ret []SiteOwner
		return ret
	}
	return o.SiteOwnerList
}

// GetSiteOwnerListOk returns a tuple with the SiteOwnerList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SharePointRestoreParameters) GetSiteOwnerListOk() (*[]SiteOwner, bool) {
	if o == nil || o.SiteOwnerList == nil {
		return nil, false
	}
	return &o.SiteOwnerList, true
}

// HasSiteOwnerList returns a boolean if a field has been set.
func (o *SharePointRestoreParameters) HasSiteOwnerList() bool {
	if o != nil && o.SiteOwnerList != nil {
		return true
	}

	return false
}

// SetSiteOwnerList gets a reference to the given []SiteOwner and assigns it to the SiteOwnerList field.
func (o *SharePointRestoreParameters) SetSiteOwnerList(v []SiteOwner) {
	o.SiteOwnerList = v
}

// GetTargetDocumentLibraryName returns the TargetDocumentLibraryName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SharePointRestoreParameters) GetTargetDocumentLibraryName() string {
	if o == nil || o.TargetDocumentLibraryName.Get() == nil {
		var ret string
		return ret
	}
	return *o.TargetDocumentLibraryName.Get()
}

// GetTargetDocumentLibraryNameOk returns a tuple with the TargetDocumentLibraryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SharePointRestoreParameters) GetTargetDocumentLibraryNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetDocumentLibraryName.Get(), o.TargetDocumentLibraryName.IsSet()
}

// HasTargetDocumentLibraryName returns a boolean if a field has been set.
func (o *SharePointRestoreParameters) HasTargetDocumentLibraryName() bool {
	if o != nil && o.TargetDocumentLibraryName.IsSet() {
		return true
	}

	return false
}

// SetTargetDocumentLibraryName gets a reference to the given NullableString and assigns it to the TargetDocumentLibraryName field.
func (o *SharePointRestoreParameters) SetTargetDocumentLibraryName(v string) {
	o.TargetDocumentLibraryName.Set(&v)
}
// SetTargetDocumentLibraryNameNil sets the value for TargetDocumentLibraryName to be an explicit nil
func (o *SharePointRestoreParameters) SetTargetDocumentLibraryNameNil() {
	o.TargetDocumentLibraryName.Set(nil)
}

// UnsetTargetDocumentLibraryName ensures that no value is present for TargetDocumentLibraryName, not even an explicit nil
func (o *SharePointRestoreParameters) UnsetTargetDocumentLibraryName() {
	o.TargetDocumentLibraryName.Unset()
}

// GetTargetDocumentLibraryPrefix returns the TargetDocumentLibraryPrefix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SharePointRestoreParameters) GetTargetDocumentLibraryPrefix() string {
	if o == nil || o.TargetDocumentLibraryPrefix.Get() == nil {
		var ret string
		return ret
	}
	return *o.TargetDocumentLibraryPrefix.Get()
}

// GetTargetDocumentLibraryPrefixOk returns a tuple with the TargetDocumentLibraryPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SharePointRestoreParameters) GetTargetDocumentLibraryPrefixOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetDocumentLibraryPrefix.Get(), o.TargetDocumentLibraryPrefix.IsSet()
}

// HasTargetDocumentLibraryPrefix returns a boolean if a field has been set.
func (o *SharePointRestoreParameters) HasTargetDocumentLibraryPrefix() bool {
	if o != nil && o.TargetDocumentLibraryPrefix.IsSet() {
		return true
	}

	return false
}

// SetTargetDocumentLibraryPrefix gets a reference to the given NullableString and assigns it to the TargetDocumentLibraryPrefix field.
func (o *SharePointRestoreParameters) SetTargetDocumentLibraryPrefix(v string) {
	o.TargetDocumentLibraryPrefix.Set(&v)
}
// SetTargetDocumentLibraryPrefixNil sets the value for TargetDocumentLibraryPrefix to be an explicit nil
func (o *SharePointRestoreParameters) SetTargetDocumentLibraryPrefixNil() {
	o.TargetDocumentLibraryPrefix.Set(nil)
}

// UnsetTargetDocumentLibraryPrefix ensures that no value is present for TargetDocumentLibraryPrefix, not even an explicit nil
func (o *SharePointRestoreParameters) UnsetTargetDocumentLibraryPrefix() {
	o.TargetDocumentLibraryPrefix.Unset()
}

// GetTargetSite returns the TargetSite field value if set, zero value otherwise.
func (o *SharePointRestoreParameters) GetTargetSite() ProtectionSource {
	if o == nil || o.TargetSite == nil {
		var ret ProtectionSource
		return ret
	}
	return *o.TargetSite
}

// GetTargetSiteOk returns a tuple with the TargetSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharePointRestoreParameters) GetTargetSiteOk() (*ProtectionSource, bool) {
	if o == nil || o.TargetSite == nil {
		return nil, false
	}
	return o.TargetSite, true
}

// HasTargetSite returns a boolean if a field has been set.
func (o *SharePointRestoreParameters) HasTargetSite() bool {
	if o != nil && o.TargetSite != nil {
		return true
	}

	return false
}

// SetTargetSite gets a reference to the given ProtectionSource and assigns it to the TargetSite field.
func (o *SharePointRestoreParameters) SetTargetSite(v ProtectionSource) {
	o.TargetSite = &v
}

func (o SharePointRestoreParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RestoreToOriginalSite.IsSet() {
		toSerialize["restoreToOriginalSite"] = o.RestoreToOriginalSite.Get()
	}
	if o.SiteOwnerList != nil {
		toSerialize["siteOwnerList"] = o.SiteOwnerList
	}
	if o.TargetDocumentLibraryName.IsSet() {
		toSerialize["targetDocumentLibraryName"] = o.TargetDocumentLibraryName.Get()
	}
	if o.TargetDocumentLibraryPrefix.IsSet() {
		toSerialize["targetDocumentLibraryPrefix"] = o.TargetDocumentLibraryPrefix.Get()
	}
	if o.TargetSite != nil {
		toSerialize["targetSite"] = o.TargetSite
	}
	return json.Marshal(toSerialize)
}

type NullableSharePointRestoreParameters struct {
	value *SharePointRestoreParameters
	isSet bool
}

func (v NullableSharePointRestoreParameters) Get() *SharePointRestoreParameters {
	return v.value
}

func (v *NullableSharePointRestoreParameters) Set(val *SharePointRestoreParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableSharePointRestoreParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableSharePointRestoreParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharePointRestoreParameters(val *SharePointRestoreParameters) *NullableSharePointRestoreParameters {
	return &NullableSharePointRestoreParameters{value: val, isSet: true}
}

func (v NullableSharePointRestoreParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharePointRestoreParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


