/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// CassandraAdditionalParams Contains additional parameters required by the agents to backup data from Cassandra.
type CassandraAdditionalParams struct {
	// Cassandra classpath suffix.
	CassandraClasspathSuffix NullableString `json:"cassandraClasspathSuffix,omitempty"`
	// Required in compaction.
	CassandraPartitioner NullableString `json:"cassandraPartitioner,omitempty"`
	// Cassandra and DSE Versions. Discovery code will attempt to discover the versions.
	CassandraVersion NullableString `json:"cassandraVersion,omitempty"`
	// Data center information is required for backup and recovery.
	DataCenterVec []string `json:"dataCenterVec,omitempty"`
	DseSolrInfo *DSESolrInfo `json:"dseSolrInfo,omitempty"`
	DseVersion NullableString `json:"dseVersion,omitempty"`
	// Map of nodes to tiered storage directories
	TieredStorageDirsMap []NodeToTieredStorageDirectoriesMap `json:"tieredStorageDirsMap,omitempty"`
}

// NewCassandraAdditionalParams instantiates a new CassandraAdditionalParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCassandraAdditionalParams() *CassandraAdditionalParams {
	this := CassandraAdditionalParams{}
	return &this
}

// NewCassandraAdditionalParamsWithDefaults instantiates a new CassandraAdditionalParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCassandraAdditionalParamsWithDefaults() *CassandraAdditionalParams {
	this := CassandraAdditionalParams{}
	return &this
}

// GetCassandraClasspathSuffix returns the CassandraClasspathSuffix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraAdditionalParams) GetCassandraClasspathSuffix() string {
	if o == nil || o.CassandraClasspathSuffix.Get() == nil {
		var ret string
		return ret
	}
	return *o.CassandraClasspathSuffix.Get()
}

// GetCassandraClasspathSuffixOk returns a tuple with the CassandraClasspathSuffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraAdditionalParams) GetCassandraClasspathSuffixOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CassandraClasspathSuffix.Get(), o.CassandraClasspathSuffix.IsSet()
}

// HasCassandraClasspathSuffix returns a boolean if a field has been set.
func (o *CassandraAdditionalParams) HasCassandraClasspathSuffix() bool {
	if o != nil && o.CassandraClasspathSuffix.IsSet() {
		return true
	}

	return false
}

// SetCassandraClasspathSuffix gets a reference to the given NullableString and assigns it to the CassandraClasspathSuffix field.
func (o *CassandraAdditionalParams) SetCassandraClasspathSuffix(v string) {
	o.CassandraClasspathSuffix.Set(&v)
}
// SetCassandraClasspathSuffixNil sets the value for CassandraClasspathSuffix to be an explicit nil
func (o *CassandraAdditionalParams) SetCassandraClasspathSuffixNil() {
	o.CassandraClasspathSuffix.Set(nil)
}

// UnsetCassandraClasspathSuffix ensures that no value is present for CassandraClasspathSuffix, not even an explicit nil
func (o *CassandraAdditionalParams) UnsetCassandraClasspathSuffix() {
	o.CassandraClasspathSuffix.Unset()
}

// GetCassandraPartitioner returns the CassandraPartitioner field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraAdditionalParams) GetCassandraPartitioner() string {
	if o == nil || o.CassandraPartitioner.Get() == nil {
		var ret string
		return ret
	}
	return *o.CassandraPartitioner.Get()
}

// GetCassandraPartitionerOk returns a tuple with the CassandraPartitioner field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraAdditionalParams) GetCassandraPartitionerOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CassandraPartitioner.Get(), o.CassandraPartitioner.IsSet()
}

// HasCassandraPartitioner returns a boolean if a field has been set.
func (o *CassandraAdditionalParams) HasCassandraPartitioner() bool {
	if o != nil && o.CassandraPartitioner.IsSet() {
		return true
	}

	return false
}

// SetCassandraPartitioner gets a reference to the given NullableString and assigns it to the CassandraPartitioner field.
func (o *CassandraAdditionalParams) SetCassandraPartitioner(v string) {
	o.CassandraPartitioner.Set(&v)
}
// SetCassandraPartitionerNil sets the value for CassandraPartitioner to be an explicit nil
func (o *CassandraAdditionalParams) SetCassandraPartitionerNil() {
	o.CassandraPartitioner.Set(nil)
}

// UnsetCassandraPartitioner ensures that no value is present for CassandraPartitioner, not even an explicit nil
func (o *CassandraAdditionalParams) UnsetCassandraPartitioner() {
	o.CassandraPartitioner.Unset()
}

// GetCassandraVersion returns the CassandraVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraAdditionalParams) GetCassandraVersion() string {
	if o == nil || o.CassandraVersion.Get() == nil {
		var ret string
		return ret
	}
	return *o.CassandraVersion.Get()
}

// GetCassandraVersionOk returns a tuple with the CassandraVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraAdditionalParams) GetCassandraVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CassandraVersion.Get(), o.CassandraVersion.IsSet()
}

// HasCassandraVersion returns a boolean if a field has been set.
func (o *CassandraAdditionalParams) HasCassandraVersion() bool {
	if o != nil && o.CassandraVersion.IsSet() {
		return true
	}

	return false
}

// SetCassandraVersion gets a reference to the given NullableString and assigns it to the CassandraVersion field.
func (o *CassandraAdditionalParams) SetCassandraVersion(v string) {
	o.CassandraVersion.Set(&v)
}
// SetCassandraVersionNil sets the value for CassandraVersion to be an explicit nil
func (o *CassandraAdditionalParams) SetCassandraVersionNil() {
	o.CassandraVersion.Set(nil)
}

// UnsetCassandraVersion ensures that no value is present for CassandraVersion, not even an explicit nil
func (o *CassandraAdditionalParams) UnsetCassandraVersion() {
	o.CassandraVersion.Unset()
}

// GetDataCenterVec returns the DataCenterVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraAdditionalParams) GetDataCenterVec() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.DataCenterVec
}

// GetDataCenterVecOk returns a tuple with the DataCenterVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraAdditionalParams) GetDataCenterVecOk() (*[]string, bool) {
	if o == nil || o.DataCenterVec == nil {
		return nil, false
	}
	return &o.DataCenterVec, true
}

// HasDataCenterVec returns a boolean if a field has been set.
func (o *CassandraAdditionalParams) HasDataCenterVec() bool {
	if o != nil && o.DataCenterVec != nil {
		return true
	}

	return false
}

// SetDataCenterVec gets a reference to the given []string and assigns it to the DataCenterVec field.
func (o *CassandraAdditionalParams) SetDataCenterVec(v []string) {
	o.DataCenterVec = v
}

// GetDseSolrInfo returns the DseSolrInfo field value if set, zero value otherwise.
func (o *CassandraAdditionalParams) GetDseSolrInfo() DSESolrInfo {
	if o == nil || o.DseSolrInfo == nil {
		var ret DSESolrInfo
		return ret
	}
	return *o.DseSolrInfo
}

// GetDseSolrInfoOk returns a tuple with the DseSolrInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CassandraAdditionalParams) GetDseSolrInfoOk() (*DSESolrInfo, bool) {
	if o == nil || o.DseSolrInfo == nil {
		return nil, false
	}
	return o.DseSolrInfo, true
}

// HasDseSolrInfo returns a boolean if a field has been set.
func (o *CassandraAdditionalParams) HasDseSolrInfo() bool {
	if o != nil && o.DseSolrInfo != nil {
		return true
	}

	return false
}

// SetDseSolrInfo gets a reference to the given DSESolrInfo and assigns it to the DseSolrInfo field.
func (o *CassandraAdditionalParams) SetDseSolrInfo(v DSESolrInfo) {
	o.DseSolrInfo = &v
}

// GetDseVersion returns the DseVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraAdditionalParams) GetDseVersion() string {
	if o == nil || o.DseVersion.Get() == nil {
		var ret string
		return ret
	}
	return *o.DseVersion.Get()
}

// GetDseVersionOk returns a tuple with the DseVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraAdditionalParams) GetDseVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DseVersion.Get(), o.DseVersion.IsSet()
}

// HasDseVersion returns a boolean if a field has been set.
func (o *CassandraAdditionalParams) HasDseVersion() bool {
	if o != nil && o.DseVersion.IsSet() {
		return true
	}

	return false
}

// SetDseVersion gets a reference to the given NullableString and assigns it to the DseVersion field.
func (o *CassandraAdditionalParams) SetDseVersion(v string) {
	o.DseVersion.Set(&v)
}
// SetDseVersionNil sets the value for DseVersion to be an explicit nil
func (o *CassandraAdditionalParams) SetDseVersionNil() {
	o.DseVersion.Set(nil)
}

// UnsetDseVersion ensures that no value is present for DseVersion, not even an explicit nil
func (o *CassandraAdditionalParams) UnsetDseVersion() {
	o.DseVersion.Unset()
}

// GetTieredStorageDirsMap returns the TieredStorageDirsMap field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraAdditionalParams) GetTieredStorageDirsMap() []NodeToTieredStorageDirectoriesMap {
	if o == nil  {
		var ret []NodeToTieredStorageDirectoriesMap
		return ret
	}
	return o.TieredStorageDirsMap
}

// GetTieredStorageDirsMapOk returns a tuple with the TieredStorageDirsMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraAdditionalParams) GetTieredStorageDirsMapOk() (*[]NodeToTieredStorageDirectoriesMap, bool) {
	if o == nil || o.TieredStorageDirsMap == nil {
		return nil, false
	}
	return &o.TieredStorageDirsMap, true
}

// HasTieredStorageDirsMap returns a boolean if a field has been set.
func (o *CassandraAdditionalParams) HasTieredStorageDirsMap() bool {
	if o != nil && o.TieredStorageDirsMap != nil {
		return true
	}

	return false
}

// SetTieredStorageDirsMap gets a reference to the given []NodeToTieredStorageDirectoriesMap and assigns it to the TieredStorageDirsMap field.
func (o *CassandraAdditionalParams) SetTieredStorageDirsMap(v []NodeToTieredStorageDirectoriesMap) {
	o.TieredStorageDirsMap = v
}

func (o CassandraAdditionalParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CassandraClasspathSuffix.IsSet() {
		toSerialize["cassandraClasspathSuffix"] = o.CassandraClasspathSuffix.Get()
	}
	if o.CassandraPartitioner.IsSet() {
		toSerialize["cassandraPartitioner"] = o.CassandraPartitioner.Get()
	}
	if o.CassandraVersion.IsSet() {
		toSerialize["cassandraVersion"] = o.CassandraVersion.Get()
	}
	if o.DataCenterVec != nil {
		toSerialize["dataCenterVec"] = o.DataCenterVec
	}
	if o.DseSolrInfo != nil {
		toSerialize["dseSolrInfo"] = o.DseSolrInfo
	}
	if o.DseVersion.IsSet() {
		toSerialize["dseVersion"] = o.DseVersion.Get()
	}
	if o.TieredStorageDirsMap != nil {
		toSerialize["tieredStorageDirsMap"] = o.TieredStorageDirsMap
	}
	return json.Marshal(toSerialize)
}

type NullableCassandraAdditionalParams struct {
	value *CassandraAdditionalParams
	isSet bool
}

func (v NullableCassandraAdditionalParams) Get() *CassandraAdditionalParams {
	return v.value
}

func (v *NullableCassandraAdditionalParams) Set(val *CassandraAdditionalParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCassandraAdditionalParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCassandraAdditionalParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCassandraAdditionalParams(val *CassandraAdditionalParams) *NullableCassandraAdditionalParams {
	return &NullableCassandraAdditionalParams{value: val, isSet: true}
}

func (v NullableCassandraAdditionalParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCassandraAdditionalParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


