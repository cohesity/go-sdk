/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// MongoDBAdditionalParams Contains additional  parameters required for taking backup from this Mongo cluster.
type MongoDBAdditionalParams struct {
	// The tag associated with the secondary nodes from which backups should be performed.
	SecondaryNodeTag []string `json:"secondaryNodeTag,omitempty"`
	// Set to true if this cluster uses secondary nodes for backup.
	UseSecondaryForBackup NullableBool `json:"useSecondaryForBackup,omitempty"`
}

// NewMongoDBAdditionalParams instantiates a new MongoDBAdditionalParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMongoDBAdditionalParams() *MongoDBAdditionalParams {
	this := MongoDBAdditionalParams{}
	return &this
}

// NewMongoDBAdditionalParamsWithDefaults instantiates a new MongoDBAdditionalParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMongoDBAdditionalParamsWithDefaults() *MongoDBAdditionalParams {
	this := MongoDBAdditionalParams{}
	return &this
}

// GetSecondaryNodeTag returns the SecondaryNodeTag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MongoDBAdditionalParams) GetSecondaryNodeTag() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.SecondaryNodeTag
}

// GetSecondaryNodeTagOk returns a tuple with the SecondaryNodeTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MongoDBAdditionalParams) GetSecondaryNodeTagOk() (*[]string, bool) {
	if o == nil || o.SecondaryNodeTag == nil {
		return nil, false
	}
	return &o.SecondaryNodeTag, true
}

// HasSecondaryNodeTag returns a boolean if a field has been set.
func (o *MongoDBAdditionalParams) HasSecondaryNodeTag() bool {
	if o != nil && o.SecondaryNodeTag != nil {
		return true
	}

	return false
}

// SetSecondaryNodeTag gets a reference to the given []string and assigns it to the SecondaryNodeTag field.
func (o *MongoDBAdditionalParams) SetSecondaryNodeTag(v []string) {
	o.SecondaryNodeTag = v
}

// GetUseSecondaryForBackup returns the UseSecondaryForBackup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MongoDBAdditionalParams) GetUseSecondaryForBackup() bool {
	if o == nil || o.UseSecondaryForBackup.Get() == nil {
		var ret bool
		return ret
	}
	return *o.UseSecondaryForBackup.Get()
}

// GetUseSecondaryForBackupOk returns a tuple with the UseSecondaryForBackup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MongoDBAdditionalParams) GetUseSecondaryForBackupOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UseSecondaryForBackup.Get(), o.UseSecondaryForBackup.IsSet()
}

// HasUseSecondaryForBackup returns a boolean if a field has been set.
func (o *MongoDBAdditionalParams) HasUseSecondaryForBackup() bool {
	if o != nil && o.UseSecondaryForBackup.IsSet() {
		return true
	}

	return false
}

// SetUseSecondaryForBackup gets a reference to the given NullableBool and assigns it to the UseSecondaryForBackup field.
func (o *MongoDBAdditionalParams) SetUseSecondaryForBackup(v bool) {
	o.UseSecondaryForBackup.Set(&v)
}
// SetUseSecondaryForBackupNil sets the value for UseSecondaryForBackup to be an explicit nil
func (o *MongoDBAdditionalParams) SetUseSecondaryForBackupNil() {
	o.UseSecondaryForBackup.Set(nil)
}

// UnsetUseSecondaryForBackup ensures that no value is present for UseSecondaryForBackup, not even an explicit nil
func (o *MongoDBAdditionalParams) UnsetUseSecondaryForBackup() {
	o.UseSecondaryForBackup.Unset()
}

func (o MongoDBAdditionalParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SecondaryNodeTag != nil {
		toSerialize["secondaryNodeTag"] = o.SecondaryNodeTag
	}
	if o.UseSecondaryForBackup.IsSet() {
		toSerialize["useSecondaryForBackup"] = o.UseSecondaryForBackup.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMongoDBAdditionalParams struct {
	value *MongoDBAdditionalParams
	isSet bool
}

func (v NullableMongoDBAdditionalParams) Get() *MongoDBAdditionalParams {
	return v.value
}

func (v *NullableMongoDBAdditionalParams) Set(val *MongoDBAdditionalParams) {
	v.value = val
	v.isSet = true
}

func (v NullableMongoDBAdditionalParams) IsSet() bool {
	return v.isSet
}

func (v *NullableMongoDBAdditionalParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMongoDBAdditionalParams(val *MongoDBAdditionalParams) *NullableMongoDBAdditionalParams {
	return &NullableMongoDBAdditionalParams{value: val, isSet: true}
}

func (v NullableMongoDBAdditionalParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMongoDBAdditionalParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


