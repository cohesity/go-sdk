/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// MappersWrapper MappersWrapper is the struct to define the list of mappers.
type MappersWrapper struct {
	// Mappers specifies the list of available mappers in analytics workbench.
	Mappers []MapperInfo `json:"mappers,omitempty"`
}

// NewMappersWrapper instantiates a new MappersWrapper object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMappersWrapper() *MappersWrapper {
	this := MappersWrapper{}
	return &this
}

// NewMappersWrapperWithDefaults instantiates a new MappersWrapper object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMappersWrapperWithDefaults() *MappersWrapper {
	this := MappersWrapper{}
	return &this
}

// GetMappers returns the Mappers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MappersWrapper) GetMappers() []MapperInfo {
	if o == nil  {
		var ret []MapperInfo
		return ret
	}
	return o.Mappers
}

// GetMappersOk returns a tuple with the Mappers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MappersWrapper) GetMappersOk() (*[]MapperInfo, bool) {
	if o == nil || o.Mappers == nil {
		return nil, false
	}
	return &o.Mappers, true
}

// HasMappers returns a boolean if a field has been set.
func (o *MappersWrapper) HasMappers() bool {
	if o != nil && o.Mappers != nil {
		return true
	}

	return false
}

// SetMappers gets a reference to the given []MapperInfo and assigns it to the Mappers field.
func (o *MappersWrapper) SetMappers(v []MapperInfo) {
	o.Mappers = v
}

func (o MappersWrapper) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Mappers != nil {
		toSerialize["mappers"] = o.Mappers
	}
	return json.Marshal(toSerialize)
}

type NullableMappersWrapper struct {
	value *MappersWrapper
	isSet bool
}

func (v NullableMappersWrapper) Get() *MappersWrapper {
	return v.value
}

func (v *NullableMappersWrapper) Set(val *MappersWrapper) {
	v.value = val
	v.isSet = true
}

func (v NullableMappersWrapper) IsSet() bool {
	return v.isSet
}

func (v *NullableMappersWrapper) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMappersWrapper(val *MappersWrapper) *NullableMappersWrapper {
	return &NullableMappersWrapper{value: val, isSet: true}
}

func (v NullableMappersWrapper) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMappersWrapper) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


