/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// FilePartitionBlock Defines a leaf node of a device tree. This refers to a logical partition in a virtual disk file.
type FilePartitionBlock struct {
	// Specifies the disk file name where the logical partition is.
	DiskFileName NullableString `json:"diskFileName,omitempty"`
	// Specifies the length of the block in bytes.
	LengthBytes NullableInt64 `json:"lengthBytes,omitempty"`
	// Specifies a unique number of the partition within the linear disk file.
	Number NullableInt64 `json:"number,omitempty"`
	// Specifies the offset of the block (in bytes) from the beginning of the containing object such as a physical disk or a virtual disk file.
	OffsetBytes NullableInt64 `json:"offsetBytes,omitempty"`
}

// NewFilePartitionBlock instantiates a new FilePartitionBlock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilePartitionBlock() *FilePartitionBlock {
	this := FilePartitionBlock{}
	return &this
}

// NewFilePartitionBlockWithDefaults instantiates a new FilePartitionBlock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilePartitionBlockWithDefaults() *FilePartitionBlock {
	this := FilePartitionBlock{}
	return &this
}

// GetDiskFileName returns the DiskFileName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilePartitionBlock) GetDiskFileName() string {
	if o == nil || o.DiskFileName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DiskFileName.Get()
}

// GetDiskFileNameOk returns a tuple with the DiskFileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilePartitionBlock) GetDiskFileNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DiskFileName.Get(), o.DiskFileName.IsSet()
}

// HasDiskFileName returns a boolean if a field has been set.
func (o *FilePartitionBlock) HasDiskFileName() bool {
	if o != nil && o.DiskFileName.IsSet() {
		return true
	}

	return false
}

// SetDiskFileName gets a reference to the given NullableString and assigns it to the DiskFileName field.
func (o *FilePartitionBlock) SetDiskFileName(v string) {
	o.DiskFileName.Set(&v)
}
// SetDiskFileNameNil sets the value for DiskFileName to be an explicit nil
func (o *FilePartitionBlock) SetDiskFileNameNil() {
	o.DiskFileName.Set(nil)
}

// UnsetDiskFileName ensures that no value is present for DiskFileName, not even an explicit nil
func (o *FilePartitionBlock) UnsetDiskFileName() {
	o.DiskFileName.Unset()
}

// GetLengthBytes returns the LengthBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilePartitionBlock) GetLengthBytes() int64 {
	if o == nil || o.LengthBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LengthBytes.Get()
}

// GetLengthBytesOk returns a tuple with the LengthBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilePartitionBlock) GetLengthBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LengthBytes.Get(), o.LengthBytes.IsSet()
}

// HasLengthBytes returns a boolean if a field has been set.
func (o *FilePartitionBlock) HasLengthBytes() bool {
	if o != nil && o.LengthBytes.IsSet() {
		return true
	}

	return false
}

// SetLengthBytes gets a reference to the given NullableInt64 and assigns it to the LengthBytes field.
func (o *FilePartitionBlock) SetLengthBytes(v int64) {
	o.LengthBytes.Set(&v)
}
// SetLengthBytesNil sets the value for LengthBytes to be an explicit nil
func (o *FilePartitionBlock) SetLengthBytesNil() {
	o.LengthBytes.Set(nil)
}

// UnsetLengthBytes ensures that no value is present for LengthBytes, not even an explicit nil
func (o *FilePartitionBlock) UnsetLengthBytes() {
	o.LengthBytes.Unset()
}

// GetNumber returns the Number field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilePartitionBlock) GetNumber() int64 {
	if o == nil || o.Number.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Number.Get()
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilePartitionBlock) GetNumberOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Number.Get(), o.Number.IsSet()
}

// HasNumber returns a boolean if a field has been set.
func (o *FilePartitionBlock) HasNumber() bool {
	if o != nil && o.Number.IsSet() {
		return true
	}

	return false
}

// SetNumber gets a reference to the given NullableInt64 and assigns it to the Number field.
func (o *FilePartitionBlock) SetNumber(v int64) {
	o.Number.Set(&v)
}
// SetNumberNil sets the value for Number to be an explicit nil
func (o *FilePartitionBlock) SetNumberNil() {
	o.Number.Set(nil)
}

// UnsetNumber ensures that no value is present for Number, not even an explicit nil
func (o *FilePartitionBlock) UnsetNumber() {
	o.Number.Unset()
}

// GetOffsetBytes returns the OffsetBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilePartitionBlock) GetOffsetBytes() int64 {
	if o == nil || o.OffsetBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.OffsetBytes.Get()
}

// GetOffsetBytesOk returns a tuple with the OffsetBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilePartitionBlock) GetOffsetBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OffsetBytes.Get(), o.OffsetBytes.IsSet()
}

// HasOffsetBytes returns a boolean if a field has been set.
func (o *FilePartitionBlock) HasOffsetBytes() bool {
	if o != nil && o.OffsetBytes.IsSet() {
		return true
	}

	return false
}

// SetOffsetBytes gets a reference to the given NullableInt64 and assigns it to the OffsetBytes field.
func (o *FilePartitionBlock) SetOffsetBytes(v int64) {
	o.OffsetBytes.Set(&v)
}
// SetOffsetBytesNil sets the value for OffsetBytes to be an explicit nil
func (o *FilePartitionBlock) SetOffsetBytesNil() {
	o.OffsetBytes.Set(nil)
}

// UnsetOffsetBytes ensures that no value is present for OffsetBytes, not even an explicit nil
func (o *FilePartitionBlock) UnsetOffsetBytes() {
	o.OffsetBytes.Unset()
}

func (o FilePartitionBlock) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DiskFileName.IsSet() {
		toSerialize["diskFileName"] = o.DiskFileName.Get()
	}
	if o.LengthBytes.IsSet() {
		toSerialize["lengthBytes"] = o.LengthBytes.Get()
	}
	if o.Number.IsSet() {
		toSerialize["number"] = o.Number.Get()
	}
	if o.OffsetBytes.IsSet() {
		toSerialize["offsetBytes"] = o.OffsetBytes.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableFilePartitionBlock struct {
	value *FilePartitionBlock
	isSet bool
}

func (v NullableFilePartitionBlock) Get() *FilePartitionBlock {
	return v.value
}

func (v *NullableFilePartitionBlock) Set(val *FilePartitionBlock) {
	v.value = val
	v.isSet = true
}

func (v NullableFilePartitionBlock) IsSet() bool {
	return v.isSet
}

func (v *NullableFilePartitionBlock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilePartitionBlock(val *FilePartitionBlock) *NullableFilePartitionBlock {
	return &NullableFilePartitionBlock{value: val, isSet: true}
}

func (v NullableFilePartitionBlock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilePartitionBlock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


