/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// SanVolume Specifies a SAN Volume in a SAN Storage Array.
type SanVolume struct {
	// Specifies the created time (e.g., \"2015-07-21T17:59:41Z\") of the volume.
	CreatedTime NullableString `json:"createdTime,omitempty"`
	// Specifies the name of the source volume, if this volume was copied or cloned from it.
	ParentVolume NullableString `json:"parentVolume,omitempty"`
	// Specifies the serial number of the volume.
	SerialNumber NullableString `json:"serialNumber,omitempty"`
	// Specifies the provisioned size in bytes of the volume.
	SizeBytes NullableInt64 `json:"sizeBytes,omitempty"`
	// Specifies the total space actually used by the volume.
	UsedBytes NullableInt64 `json:"usedBytes,omitempty"`
}

// NewSanVolume instantiates a new SanVolume object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSanVolume() *SanVolume {
	this := SanVolume{}
	return &this
}

// NewSanVolumeWithDefaults instantiates a new SanVolume object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSanVolumeWithDefaults() *SanVolume {
	this := SanVolume{}
	return &this
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SanVolume) GetCreatedTime() string {
	if o == nil || o.CreatedTime.Get() == nil {
		var ret string
		return ret
	}
	return *o.CreatedTime.Get()
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SanVolume) GetCreatedTimeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CreatedTime.Get(), o.CreatedTime.IsSet()
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *SanVolume) HasCreatedTime() bool {
	if o != nil && o.CreatedTime.IsSet() {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given NullableString and assigns it to the CreatedTime field.
func (o *SanVolume) SetCreatedTime(v string) {
	o.CreatedTime.Set(&v)
}
// SetCreatedTimeNil sets the value for CreatedTime to be an explicit nil
func (o *SanVolume) SetCreatedTimeNil() {
	o.CreatedTime.Set(nil)
}

// UnsetCreatedTime ensures that no value is present for CreatedTime, not even an explicit nil
func (o *SanVolume) UnsetCreatedTime() {
	o.CreatedTime.Unset()
}

// GetParentVolume returns the ParentVolume field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SanVolume) GetParentVolume() string {
	if o == nil || o.ParentVolume.Get() == nil {
		var ret string
		return ret
	}
	return *o.ParentVolume.Get()
}

// GetParentVolumeOk returns a tuple with the ParentVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SanVolume) GetParentVolumeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ParentVolume.Get(), o.ParentVolume.IsSet()
}

// HasParentVolume returns a boolean if a field has been set.
func (o *SanVolume) HasParentVolume() bool {
	if o != nil && o.ParentVolume.IsSet() {
		return true
	}

	return false
}

// SetParentVolume gets a reference to the given NullableString and assigns it to the ParentVolume field.
func (o *SanVolume) SetParentVolume(v string) {
	o.ParentVolume.Set(&v)
}
// SetParentVolumeNil sets the value for ParentVolume to be an explicit nil
func (o *SanVolume) SetParentVolumeNil() {
	o.ParentVolume.Set(nil)
}

// UnsetParentVolume ensures that no value is present for ParentVolume, not even an explicit nil
func (o *SanVolume) UnsetParentVolume() {
	o.ParentVolume.Unset()
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SanVolume) GetSerialNumber() string {
	if o == nil || o.SerialNumber.Get() == nil {
		var ret string
		return ret
	}
	return *o.SerialNumber.Get()
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SanVolume) GetSerialNumberOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SerialNumber.Get(), o.SerialNumber.IsSet()
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *SanVolume) HasSerialNumber() bool {
	if o != nil && o.SerialNumber.IsSet() {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given NullableString and assigns it to the SerialNumber field.
func (o *SanVolume) SetSerialNumber(v string) {
	o.SerialNumber.Set(&v)
}
// SetSerialNumberNil sets the value for SerialNumber to be an explicit nil
func (o *SanVolume) SetSerialNumberNil() {
	o.SerialNumber.Set(nil)
}

// UnsetSerialNumber ensures that no value is present for SerialNumber, not even an explicit nil
func (o *SanVolume) UnsetSerialNumber() {
	o.SerialNumber.Unset()
}

// GetSizeBytes returns the SizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SanVolume) GetSizeBytes() int64 {
	if o == nil || o.SizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SizeBytes.Get()
}

// GetSizeBytesOk returns a tuple with the SizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SanVolume) GetSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SizeBytes.Get(), o.SizeBytes.IsSet()
}

// HasSizeBytes returns a boolean if a field has been set.
func (o *SanVolume) HasSizeBytes() bool {
	if o != nil && o.SizeBytes.IsSet() {
		return true
	}

	return false
}

// SetSizeBytes gets a reference to the given NullableInt64 and assigns it to the SizeBytes field.
func (o *SanVolume) SetSizeBytes(v int64) {
	o.SizeBytes.Set(&v)
}
// SetSizeBytesNil sets the value for SizeBytes to be an explicit nil
func (o *SanVolume) SetSizeBytesNil() {
	o.SizeBytes.Set(nil)
}

// UnsetSizeBytes ensures that no value is present for SizeBytes, not even an explicit nil
func (o *SanVolume) UnsetSizeBytes() {
	o.SizeBytes.Unset()
}

// GetUsedBytes returns the UsedBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SanVolume) GetUsedBytes() int64 {
	if o == nil || o.UsedBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.UsedBytes.Get()
}

// GetUsedBytesOk returns a tuple with the UsedBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SanVolume) GetUsedBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UsedBytes.Get(), o.UsedBytes.IsSet()
}

// HasUsedBytes returns a boolean if a field has been set.
func (o *SanVolume) HasUsedBytes() bool {
	if o != nil && o.UsedBytes.IsSet() {
		return true
	}

	return false
}

// SetUsedBytes gets a reference to the given NullableInt64 and assigns it to the UsedBytes field.
func (o *SanVolume) SetUsedBytes(v int64) {
	o.UsedBytes.Set(&v)
}
// SetUsedBytesNil sets the value for UsedBytes to be an explicit nil
func (o *SanVolume) SetUsedBytesNil() {
	o.UsedBytes.Set(nil)
}

// UnsetUsedBytes ensures that no value is present for UsedBytes, not even an explicit nil
func (o *SanVolume) UnsetUsedBytes() {
	o.UsedBytes.Unset()
}

func (o SanVolume) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedTime.IsSet() {
		toSerialize["createdTime"] = o.CreatedTime.Get()
	}
	if o.ParentVolume.IsSet() {
		toSerialize["parentVolume"] = o.ParentVolume.Get()
	}
	if o.SerialNumber.IsSet() {
		toSerialize["serialNumber"] = o.SerialNumber.Get()
	}
	if o.SizeBytes.IsSet() {
		toSerialize["sizeBytes"] = o.SizeBytes.Get()
	}
	if o.UsedBytes.IsSet() {
		toSerialize["usedBytes"] = o.UsedBytes.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSanVolume struct {
	value *SanVolume
	isSet bool
}

func (v NullableSanVolume) Get() *SanVolume {
	return v.value
}

func (v *NullableSanVolume) Set(val *SanVolume) {
	v.value = val
	v.isSet = true
}

func (v NullableSanVolume) IsSet() bool {
	return v.isSet
}

func (v *NullableSanVolume) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSanVolume(val *SanVolume) *NullableSanVolume {
	return &NullableSanVolume{value: val, isSet: true}
}

func (v NullableSanVolume) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSanVolume) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


