/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// CompareADObjectsResultADAttribute struct for CompareADObjectsResultADAttribute
type CompareADObjectsResultADAttribute struct {
	// Object result flags of type ADAttributeFlags.
	AttrFlags NullableInt32 `json:"attrFlags,omitempty"`
	DestValue *CompareADObjectsResultADAttributeValue `json:"destValue,omitempty"`
	// LDAP attribute name.
	LdapName NullableString `json:"ldapName,omitempty"`
	SameValue *CompareADObjectsResultADAttributeValue `json:"sameValue,omitempty"`
	SourceValue *CompareADObjectsResultADAttributeValue `json:"sourceValue,omitempty"`
	Status *ErrorProto `json:"status,omitempty"`
}

// NewCompareADObjectsResultADAttribute instantiates a new CompareADObjectsResultADAttribute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompareADObjectsResultADAttribute() *CompareADObjectsResultADAttribute {
	this := CompareADObjectsResultADAttribute{}
	return &this
}

// NewCompareADObjectsResultADAttributeWithDefaults instantiates a new CompareADObjectsResultADAttribute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompareADObjectsResultADAttributeWithDefaults() *CompareADObjectsResultADAttribute {
	this := CompareADObjectsResultADAttribute{}
	return &this
}

// GetAttrFlags returns the AttrFlags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompareADObjectsResultADAttribute) GetAttrFlags() int32 {
	if o == nil || o.AttrFlags.Get() == nil {
		var ret int32
		return ret
	}
	return *o.AttrFlags.Get()
}

// GetAttrFlagsOk returns a tuple with the AttrFlags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompareADObjectsResultADAttribute) GetAttrFlagsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AttrFlags.Get(), o.AttrFlags.IsSet()
}

// HasAttrFlags returns a boolean if a field has been set.
func (o *CompareADObjectsResultADAttribute) HasAttrFlags() bool {
	if o != nil && o.AttrFlags.IsSet() {
		return true
	}

	return false
}

// SetAttrFlags gets a reference to the given NullableInt32 and assigns it to the AttrFlags field.
func (o *CompareADObjectsResultADAttribute) SetAttrFlags(v int32) {
	o.AttrFlags.Set(&v)
}
// SetAttrFlagsNil sets the value for AttrFlags to be an explicit nil
func (o *CompareADObjectsResultADAttribute) SetAttrFlagsNil() {
	o.AttrFlags.Set(nil)
}

// UnsetAttrFlags ensures that no value is present for AttrFlags, not even an explicit nil
func (o *CompareADObjectsResultADAttribute) UnsetAttrFlags() {
	o.AttrFlags.Unset()
}

// GetDestValue returns the DestValue field value if set, zero value otherwise.
func (o *CompareADObjectsResultADAttribute) GetDestValue() CompareADObjectsResultADAttributeValue {
	if o == nil || o.DestValue == nil {
		var ret CompareADObjectsResultADAttributeValue
		return ret
	}
	return *o.DestValue
}

// GetDestValueOk returns a tuple with the DestValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompareADObjectsResultADAttribute) GetDestValueOk() (*CompareADObjectsResultADAttributeValue, bool) {
	if o == nil || o.DestValue == nil {
		return nil, false
	}
	return o.DestValue, true
}

// HasDestValue returns a boolean if a field has been set.
func (o *CompareADObjectsResultADAttribute) HasDestValue() bool {
	if o != nil && o.DestValue != nil {
		return true
	}

	return false
}

// SetDestValue gets a reference to the given CompareADObjectsResultADAttributeValue and assigns it to the DestValue field.
func (o *CompareADObjectsResultADAttribute) SetDestValue(v CompareADObjectsResultADAttributeValue) {
	o.DestValue = &v
}

// GetLdapName returns the LdapName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompareADObjectsResultADAttribute) GetLdapName() string {
	if o == nil || o.LdapName.Get() == nil {
		var ret string
		return ret
	}
	return *o.LdapName.Get()
}

// GetLdapNameOk returns a tuple with the LdapName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompareADObjectsResultADAttribute) GetLdapNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LdapName.Get(), o.LdapName.IsSet()
}

// HasLdapName returns a boolean if a field has been set.
func (o *CompareADObjectsResultADAttribute) HasLdapName() bool {
	if o != nil && o.LdapName.IsSet() {
		return true
	}

	return false
}

// SetLdapName gets a reference to the given NullableString and assigns it to the LdapName field.
func (o *CompareADObjectsResultADAttribute) SetLdapName(v string) {
	o.LdapName.Set(&v)
}
// SetLdapNameNil sets the value for LdapName to be an explicit nil
func (o *CompareADObjectsResultADAttribute) SetLdapNameNil() {
	o.LdapName.Set(nil)
}

// UnsetLdapName ensures that no value is present for LdapName, not even an explicit nil
func (o *CompareADObjectsResultADAttribute) UnsetLdapName() {
	o.LdapName.Unset()
}

// GetSameValue returns the SameValue field value if set, zero value otherwise.
func (o *CompareADObjectsResultADAttribute) GetSameValue() CompareADObjectsResultADAttributeValue {
	if o == nil || o.SameValue == nil {
		var ret CompareADObjectsResultADAttributeValue
		return ret
	}
	return *o.SameValue
}

// GetSameValueOk returns a tuple with the SameValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompareADObjectsResultADAttribute) GetSameValueOk() (*CompareADObjectsResultADAttributeValue, bool) {
	if o == nil || o.SameValue == nil {
		return nil, false
	}
	return o.SameValue, true
}

// HasSameValue returns a boolean if a field has been set.
func (o *CompareADObjectsResultADAttribute) HasSameValue() bool {
	if o != nil && o.SameValue != nil {
		return true
	}

	return false
}

// SetSameValue gets a reference to the given CompareADObjectsResultADAttributeValue and assigns it to the SameValue field.
func (o *CompareADObjectsResultADAttribute) SetSameValue(v CompareADObjectsResultADAttributeValue) {
	o.SameValue = &v
}

// GetSourceValue returns the SourceValue field value if set, zero value otherwise.
func (o *CompareADObjectsResultADAttribute) GetSourceValue() CompareADObjectsResultADAttributeValue {
	if o == nil || o.SourceValue == nil {
		var ret CompareADObjectsResultADAttributeValue
		return ret
	}
	return *o.SourceValue
}

// GetSourceValueOk returns a tuple with the SourceValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompareADObjectsResultADAttribute) GetSourceValueOk() (*CompareADObjectsResultADAttributeValue, bool) {
	if o == nil || o.SourceValue == nil {
		return nil, false
	}
	return o.SourceValue, true
}

// HasSourceValue returns a boolean if a field has been set.
func (o *CompareADObjectsResultADAttribute) HasSourceValue() bool {
	if o != nil && o.SourceValue != nil {
		return true
	}

	return false
}

// SetSourceValue gets a reference to the given CompareADObjectsResultADAttributeValue and assigns it to the SourceValue field.
func (o *CompareADObjectsResultADAttribute) SetSourceValue(v CompareADObjectsResultADAttributeValue) {
	o.SourceValue = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CompareADObjectsResultADAttribute) GetStatus() ErrorProto {
	if o == nil || o.Status == nil {
		var ret ErrorProto
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompareADObjectsResultADAttribute) GetStatusOk() (*ErrorProto, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CompareADObjectsResultADAttribute) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ErrorProto and assigns it to the Status field.
func (o *CompareADObjectsResultADAttribute) SetStatus(v ErrorProto) {
	o.Status = &v
}

func (o CompareADObjectsResultADAttribute) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AttrFlags.IsSet() {
		toSerialize["attrFlags"] = o.AttrFlags.Get()
	}
	if o.DestValue != nil {
		toSerialize["destValue"] = o.DestValue
	}
	if o.LdapName.IsSet() {
		toSerialize["ldapName"] = o.LdapName.Get()
	}
	if o.SameValue != nil {
		toSerialize["sameValue"] = o.SameValue
	}
	if o.SourceValue != nil {
		toSerialize["sourceValue"] = o.SourceValue
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableCompareADObjectsResultADAttribute struct {
	value *CompareADObjectsResultADAttribute
	isSet bool
}

func (v NullableCompareADObjectsResultADAttribute) Get() *CompareADObjectsResultADAttribute {
	return v.value
}

func (v *NullableCompareADObjectsResultADAttribute) Set(val *CompareADObjectsResultADAttribute) {
	v.value = val
	v.isSet = true
}

func (v NullableCompareADObjectsResultADAttribute) IsSet() bool {
	return v.isSet
}

func (v *NullableCompareADObjectsResultADAttribute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompareADObjectsResultADAttribute(val *CompareADObjectsResultADAttribute) *NullableCompareADObjectsResultADAttribute {
	return &NullableCompareADObjectsResultADAttribute{value: val, isSet: true}
}

func (v NullableCompareADObjectsResultADAttribute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompareADObjectsResultADAttribute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


