/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// PhysicalBackupSourceParams Message to capture additional backup params for a Physical type source.
type PhysicalBackupSourceParams struct {
	// Allows Magneto to drive a \"system\" backup using a 3rd-party tool installed on the Agent host.
	EnableSystemBackup NullableBool `json:"enableSystemBackup,omitempty"`
	FileBackupParams *PhysicalFileBackupParams `json:"fileBackupParams,omitempty"`
	SnapshotParams *PhysicalSnapshotParams `json:"snapshotParams,omitempty"`
	SourceAppParams *SourceAppParams `json:"sourceAppParams,omitempty"`
	// If this list is non-empty, then only volumes in this will be protected, otherwise all volumes belonging to the host will be protected.
	VolumeGuidVec []string `json:"volumeGuidVec,omitempty"`
}

// NewPhysicalBackupSourceParams instantiates a new PhysicalBackupSourceParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhysicalBackupSourceParams() *PhysicalBackupSourceParams {
	this := PhysicalBackupSourceParams{}
	return &this
}

// NewPhysicalBackupSourceParamsWithDefaults instantiates a new PhysicalBackupSourceParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhysicalBackupSourceParamsWithDefaults() *PhysicalBackupSourceParams {
	this := PhysicalBackupSourceParams{}
	return &this
}

// GetEnableSystemBackup returns the EnableSystemBackup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalBackupSourceParams) GetEnableSystemBackup() bool {
	if o == nil || o.EnableSystemBackup.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableSystemBackup.Get()
}

// GetEnableSystemBackupOk returns a tuple with the EnableSystemBackup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalBackupSourceParams) GetEnableSystemBackupOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableSystemBackup.Get(), o.EnableSystemBackup.IsSet()
}

// HasEnableSystemBackup returns a boolean if a field has been set.
func (o *PhysicalBackupSourceParams) HasEnableSystemBackup() bool {
	if o != nil && o.EnableSystemBackup.IsSet() {
		return true
	}

	return false
}

// SetEnableSystemBackup gets a reference to the given NullableBool and assigns it to the EnableSystemBackup field.
func (o *PhysicalBackupSourceParams) SetEnableSystemBackup(v bool) {
	o.EnableSystemBackup.Set(&v)
}
// SetEnableSystemBackupNil sets the value for EnableSystemBackup to be an explicit nil
func (o *PhysicalBackupSourceParams) SetEnableSystemBackupNil() {
	o.EnableSystemBackup.Set(nil)
}

// UnsetEnableSystemBackup ensures that no value is present for EnableSystemBackup, not even an explicit nil
func (o *PhysicalBackupSourceParams) UnsetEnableSystemBackup() {
	o.EnableSystemBackup.Unset()
}

// GetFileBackupParams returns the FileBackupParams field value if set, zero value otherwise.
func (o *PhysicalBackupSourceParams) GetFileBackupParams() PhysicalFileBackupParams {
	if o == nil || o.FileBackupParams == nil {
		var ret PhysicalFileBackupParams
		return ret
	}
	return *o.FileBackupParams
}

// GetFileBackupParamsOk returns a tuple with the FileBackupParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalBackupSourceParams) GetFileBackupParamsOk() (*PhysicalFileBackupParams, bool) {
	if o == nil || o.FileBackupParams == nil {
		return nil, false
	}
	return o.FileBackupParams, true
}

// HasFileBackupParams returns a boolean if a field has been set.
func (o *PhysicalBackupSourceParams) HasFileBackupParams() bool {
	if o != nil && o.FileBackupParams != nil {
		return true
	}

	return false
}

// SetFileBackupParams gets a reference to the given PhysicalFileBackupParams and assigns it to the FileBackupParams field.
func (o *PhysicalBackupSourceParams) SetFileBackupParams(v PhysicalFileBackupParams) {
	o.FileBackupParams = &v
}

// GetSnapshotParams returns the SnapshotParams field value if set, zero value otherwise.
func (o *PhysicalBackupSourceParams) GetSnapshotParams() PhysicalSnapshotParams {
	if o == nil || o.SnapshotParams == nil {
		var ret PhysicalSnapshotParams
		return ret
	}
	return *o.SnapshotParams
}

// GetSnapshotParamsOk returns a tuple with the SnapshotParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalBackupSourceParams) GetSnapshotParamsOk() (*PhysicalSnapshotParams, bool) {
	if o == nil || o.SnapshotParams == nil {
		return nil, false
	}
	return o.SnapshotParams, true
}

// HasSnapshotParams returns a boolean if a field has been set.
func (o *PhysicalBackupSourceParams) HasSnapshotParams() bool {
	if o != nil && o.SnapshotParams != nil {
		return true
	}

	return false
}

// SetSnapshotParams gets a reference to the given PhysicalSnapshotParams and assigns it to the SnapshotParams field.
func (o *PhysicalBackupSourceParams) SetSnapshotParams(v PhysicalSnapshotParams) {
	o.SnapshotParams = &v
}

// GetSourceAppParams returns the SourceAppParams field value if set, zero value otherwise.
func (o *PhysicalBackupSourceParams) GetSourceAppParams() SourceAppParams {
	if o == nil || o.SourceAppParams == nil {
		var ret SourceAppParams
		return ret
	}
	return *o.SourceAppParams
}

// GetSourceAppParamsOk returns a tuple with the SourceAppParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalBackupSourceParams) GetSourceAppParamsOk() (*SourceAppParams, bool) {
	if o == nil || o.SourceAppParams == nil {
		return nil, false
	}
	return o.SourceAppParams, true
}

// HasSourceAppParams returns a boolean if a field has been set.
func (o *PhysicalBackupSourceParams) HasSourceAppParams() bool {
	if o != nil && o.SourceAppParams != nil {
		return true
	}

	return false
}

// SetSourceAppParams gets a reference to the given SourceAppParams and assigns it to the SourceAppParams field.
func (o *PhysicalBackupSourceParams) SetSourceAppParams(v SourceAppParams) {
	o.SourceAppParams = &v
}

// GetVolumeGuidVec returns the VolumeGuidVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalBackupSourceParams) GetVolumeGuidVec() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.VolumeGuidVec
}

// GetVolumeGuidVecOk returns a tuple with the VolumeGuidVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalBackupSourceParams) GetVolumeGuidVecOk() (*[]string, bool) {
	if o == nil || o.VolumeGuidVec == nil {
		return nil, false
	}
	return &o.VolumeGuidVec, true
}

// HasVolumeGuidVec returns a boolean if a field has been set.
func (o *PhysicalBackupSourceParams) HasVolumeGuidVec() bool {
	if o != nil && o.VolumeGuidVec != nil {
		return true
	}

	return false
}

// SetVolumeGuidVec gets a reference to the given []string and assigns it to the VolumeGuidVec field.
func (o *PhysicalBackupSourceParams) SetVolumeGuidVec(v []string) {
	o.VolumeGuidVec = v
}

func (o PhysicalBackupSourceParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EnableSystemBackup.IsSet() {
		toSerialize["enableSystemBackup"] = o.EnableSystemBackup.Get()
	}
	if o.FileBackupParams != nil {
		toSerialize["fileBackupParams"] = o.FileBackupParams
	}
	if o.SnapshotParams != nil {
		toSerialize["snapshotParams"] = o.SnapshotParams
	}
	if o.SourceAppParams != nil {
		toSerialize["sourceAppParams"] = o.SourceAppParams
	}
	if o.VolumeGuidVec != nil {
		toSerialize["volumeGuidVec"] = o.VolumeGuidVec
	}
	return json.Marshal(toSerialize)
}

type NullablePhysicalBackupSourceParams struct {
	value *PhysicalBackupSourceParams
	isSet bool
}

func (v NullablePhysicalBackupSourceParams) Get() *PhysicalBackupSourceParams {
	return v.value
}

func (v *NullablePhysicalBackupSourceParams) Set(val *PhysicalBackupSourceParams) {
	v.value = val
	v.isSet = true
}

func (v NullablePhysicalBackupSourceParams) IsSet() bool {
	return v.isSet
}

func (v *NullablePhysicalBackupSourceParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhysicalBackupSourceParams(val *PhysicalBackupSourceParams) *NullablePhysicalBackupSourceParams {
	return &NullablePhysicalBackupSourceParams{value: val, isSet: true}
}

func (v NullablePhysicalBackupSourceParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhysicalBackupSourceParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


