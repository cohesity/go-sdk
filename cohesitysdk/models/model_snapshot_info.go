/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// SnapshotInfo Specifies details about the snapshot task created to backup or copy one source object like a VM.
type SnapshotInfo struct {
	// Specifies the environment type (such as kVMware or kSQL) that contains the source to backup. Supported environment types such as 'kView', 'kSQL', 'kVMware', etc. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter. 'kVMware' indicates the VMware Protection Source environment. 'kHyperV' indicates the HyperV Protection Source environment. 'kSQL' indicates the SQL Protection Source environment. 'kView' indicates the View Protection Source environment. 'kPuppeteer' indicates the Cohesity's Remote Adapter. 'kPhysical' indicates the physical Protection Source environment. 'kPure' indicates the Pure Storage Protection Source environment. 'Nimble' indicates the Nimble Storage Protection Source environment. 'kAzure' indicates the Microsoft's Azure Protection Source environment. 'kNetapp' indicates the Netapp Protection Source environment. 'kAgent' indicates the Agent Protection Source environment. 'kGenericNas' indicates the Generic Network Attached Storage Protection Source environment. 'kAcropolis' indicates the Acropolis Protection Source environment. 'kPhsicalFiles' indicates the Physical Files Protection Source environment. 'kIsilon' indicates the Dell EMC's Isilon Protection Source environment. 'kGPFS' indicates IBM's GPFS Protection Source environment. 'kKVM' indicates the KVM Protection Source environment. 'kAWS' indicates the AWS Protection Source environment. 'kExchange' indicates the Exchange Protection Source environment. 'kHyperVVSS' indicates the HyperV VSS Protection Source environment. 'kOracle' indicates the Oracle Protection Source environment. 'kGCP' indicates the Google Cloud Platform Protection Source environment. 'kFlashBlade' indicates the Flash Blade Protection Source environment. 'kAWSNative' indicates the AWS Native Protection Source environment. 'kO365' indicates the Office 365 Protection Source environment. 'kO365Outlook' indicates Office 365 outlook Protection Source environment. 'kHyperFlex' indicates the Hyper Flex Protection Source environment. 'kGCPNative' indicates the GCP Native Protection Source environment. 'kAzureNative' indicates the Azure Native Protection Source environment. 'kKubernetes' indicates a Kubernetes Protection Source environment. 'kElastifile' indicates Elastifile Protection Source environment. 'kAD' indicates Active Directory Protection Source environment. 'kRDSSnapshotManager' indicates AWS RDS Protection Source environment. 'kCassandra' indicates Cassandra Protection Source environment. 'kMongoDB' indicates MongoDB Protection Source environment. 'kCouchbase' indicates Couchbase Protection Source environment. 'kHdfs' indicates Hdfs Protection Source environment. 'kHive' indicates Hive Protection Source environment. 'kHBase' indicates HBase Protection Source environment.
	Environment NullableString `json:"environment,omitempty"`
	// Specifies the relative directory path from root path where the snapshot is stored.
	RelativeSnapshotDirectory NullableString `json:"relativeSnapshotDirectory,omitempty"`
	// Specifies the root path where the snapshot is stored, using the following format: \"/ViewBox/ViewName/fs\".
	RootPath NullableString `json:"rootPath,omitempty"`
	// Specifies the snapshot create time of the already created snapshot on the source
	SourceSnapshotCreateTimeUsecs NullableInt64 `json:"sourceSnapshotCreateTimeUsecs,omitempty"`
	// Specifies the name of the snapshot backed up in a Netapp Data-Protect Volume where we use already created snapshot on the source
	SourceSnapshotName NullableString `json:"sourceSnapshotName,omitempty"`
	// Specifies the name of the View that is cloned. NOTE: This field is only populated for View cloning.
	ViewName NullableString `json:"viewName,omitempty"`
}

// NewSnapshotInfo instantiates a new SnapshotInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotInfo() *SnapshotInfo {
	this := SnapshotInfo{}
	return &this
}

// NewSnapshotInfoWithDefaults instantiates a new SnapshotInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotInfoWithDefaults() *SnapshotInfo {
	this := SnapshotInfo{}
	return &this
}

// GetEnvironment returns the Environment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotInfo) GetEnvironment() string {
	if o == nil || o.Environment.Get() == nil {
		var ret string
		return ret
	}
	return *o.Environment.Get()
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotInfo) GetEnvironmentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Environment.Get(), o.Environment.IsSet()
}

// HasEnvironment returns a boolean if a field has been set.
func (o *SnapshotInfo) HasEnvironment() bool {
	if o != nil && o.Environment.IsSet() {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given NullableString and assigns it to the Environment field.
func (o *SnapshotInfo) SetEnvironment(v string) {
	o.Environment.Set(&v)
}
// SetEnvironmentNil sets the value for Environment to be an explicit nil
func (o *SnapshotInfo) SetEnvironmentNil() {
	o.Environment.Set(nil)
}

// UnsetEnvironment ensures that no value is present for Environment, not even an explicit nil
func (o *SnapshotInfo) UnsetEnvironment() {
	o.Environment.Unset()
}

// GetRelativeSnapshotDirectory returns the RelativeSnapshotDirectory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotInfo) GetRelativeSnapshotDirectory() string {
	if o == nil || o.RelativeSnapshotDirectory.Get() == nil {
		var ret string
		return ret
	}
	return *o.RelativeSnapshotDirectory.Get()
}

// GetRelativeSnapshotDirectoryOk returns a tuple with the RelativeSnapshotDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotInfo) GetRelativeSnapshotDirectoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RelativeSnapshotDirectory.Get(), o.RelativeSnapshotDirectory.IsSet()
}

// HasRelativeSnapshotDirectory returns a boolean if a field has been set.
func (o *SnapshotInfo) HasRelativeSnapshotDirectory() bool {
	if o != nil && o.RelativeSnapshotDirectory.IsSet() {
		return true
	}

	return false
}

// SetRelativeSnapshotDirectory gets a reference to the given NullableString and assigns it to the RelativeSnapshotDirectory field.
func (o *SnapshotInfo) SetRelativeSnapshotDirectory(v string) {
	o.RelativeSnapshotDirectory.Set(&v)
}
// SetRelativeSnapshotDirectoryNil sets the value for RelativeSnapshotDirectory to be an explicit nil
func (o *SnapshotInfo) SetRelativeSnapshotDirectoryNil() {
	o.RelativeSnapshotDirectory.Set(nil)
}

// UnsetRelativeSnapshotDirectory ensures that no value is present for RelativeSnapshotDirectory, not even an explicit nil
func (o *SnapshotInfo) UnsetRelativeSnapshotDirectory() {
	o.RelativeSnapshotDirectory.Unset()
}

// GetRootPath returns the RootPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotInfo) GetRootPath() string {
	if o == nil || o.RootPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.RootPath.Get()
}

// GetRootPathOk returns a tuple with the RootPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotInfo) GetRootPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RootPath.Get(), o.RootPath.IsSet()
}

// HasRootPath returns a boolean if a field has been set.
func (o *SnapshotInfo) HasRootPath() bool {
	if o != nil && o.RootPath.IsSet() {
		return true
	}

	return false
}

// SetRootPath gets a reference to the given NullableString and assigns it to the RootPath field.
func (o *SnapshotInfo) SetRootPath(v string) {
	o.RootPath.Set(&v)
}
// SetRootPathNil sets the value for RootPath to be an explicit nil
func (o *SnapshotInfo) SetRootPathNil() {
	o.RootPath.Set(nil)
}

// UnsetRootPath ensures that no value is present for RootPath, not even an explicit nil
func (o *SnapshotInfo) UnsetRootPath() {
	o.RootPath.Unset()
}

// GetSourceSnapshotCreateTimeUsecs returns the SourceSnapshotCreateTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotInfo) GetSourceSnapshotCreateTimeUsecs() int64 {
	if o == nil || o.SourceSnapshotCreateTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SourceSnapshotCreateTimeUsecs.Get()
}

// GetSourceSnapshotCreateTimeUsecsOk returns a tuple with the SourceSnapshotCreateTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotInfo) GetSourceSnapshotCreateTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceSnapshotCreateTimeUsecs.Get(), o.SourceSnapshotCreateTimeUsecs.IsSet()
}

// HasSourceSnapshotCreateTimeUsecs returns a boolean if a field has been set.
func (o *SnapshotInfo) HasSourceSnapshotCreateTimeUsecs() bool {
	if o != nil && o.SourceSnapshotCreateTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetSourceSnapshotCreateTimeUsecs gets a reference to the given NullableInt64 and assigns it to the SourceSnapshotCreateTimeUsecs field.
func (o *SnapshotInfo) SetSourceSnapshotCreateTimeUsecs(v int64) {
	o.SourceSnapshotCreateTimeUsecs.Set(&v)
}
// SetSourceSnapshotCreateTimeUsecsNil sets the value for SourceSnapshotCreateTimeUsecs to be an explicit nil
func (o *SnapshotInfo) SetSourceSnapshotCreateTimeUsecsNil() {
	o.SourceSnapshotCreateTimeUsecs.Set(nil)
}

// UnsetSourceSnapshotCreateTimeUsecs ensures that no value is present for SourceSnapshotCreateTimeUsecs, not even an explicit nil
func (o *SnapshotInfo) UnsetSourceSnapshotCreateTimeUsecs() {
	o.SourceSnapshotCreateTimeUsecs.Unset()
}

// GetSourceSnapshotName returns the SourceSnapshotName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotInfo) GetSourceSnapshotName() string {
	if o == nil || o.SourceSnapshotName.Get() == nil {
		var ret string
		return ret
	}
	return *o.SourceSnapshotName.Get()
}

// GetSourceSnapshotNameOk returns a tuple with the SourceSnapshotName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotInfo) GetSourceSnapshotNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceSnapshotName.Get(), o.SourceSnapshotName.IsSet()
}

// HasSourceSnapshotName returns a boolean if a field has been set.
func (o *SnapshotInfo) HasSourceSnapshotName() bool {
	if o != nil && o.SourceSnapshotName.IsSet() {
		return true
	}

	return false
}

// SetSourceSnapshotName gets a reference to the given NullableString and assigns it to the SourceSnapshotName field.
func (o *SnapshotInfo) SetSourceSnapshotName(v string) {
	o.SourceSnapshotName.Set(&v)
}
// SetSourceSnapshotNameNil sets the value for SourceSnapshotName to be an explicit nil
func (o *SnapshotInfo) SetSourceSnapshotNameNil() {
	o.SourceSnapshotName.Set(nil)
}

// UnsetSourceSnapshotName ensures that no value is present for SourceSnapshotName, not even an explicit nil
func (o *SnapshotInfo) UnsetSourceSnapshotName() {
	o.SourceSnapshotName.Unset()
}

// GetViewName returns the ViewName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotInfo) GetViewName() string {
	if o == nil || o.ViewName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ViewName.Get()
}

// GetViewNameOk returns a tuple with the ViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotInfo) GetViewNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewName.Get(), o.ViewName.IsSet()
}

// HasViewName returns a boolean if a field has been set.
func (o *SnapshotInfo) HasViewName() bool {
	if o != nil && o.ViewName.IsSet() {
		return true
	}

	return false
}

// SetViewName gets a reference to the given NullableString and assigns it to the ViewName field.
func (o *SnapshotInfo) SetViewName(v string) {
	o.ViewName.Set(&v)
}
// SetViewNameNil sets the value for ViewName to be an explicit nil
func (o *SnapshotInfo) SetViewNameNil() {
	o.ViewName.Set(nil)
}

// UnsetViewName ensures that no value is present for ViewName, not even an explicit nil
func (o *SnapshotInfo) UnsetViewName() {
	o.ViewName.Unset()
}

func (o SnapshotInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Environment.IsSet() {
		toSerialize["environment"] = o.Environment.Get()
	}
	if o.RelativeSnapshotDirectory.IsSet() {
		toSerialize["relativeSnapshotDirectory"] = o.RelativeSnapshotDirectory.Get()
	}
	if o.RootPath.IsSet() {
		toSerialize["rootPath"] = o.RootPath.Get()
	}
	if o.SourceSnapshotCreateTimeUsecs.IsSet() {
		toSerialize["sourceSnapshotCreateTimeUsecs"] = o.SourceSnapshotCreateTimeUsecs.Get()
	}
	if o.SourceSnapshotName.IsSet() {
		toSerialize["sourceSnapshotName"] = o.SourceSnapshotName.Get()
	}
	if o.ViewName.IsSet() {
		toSerialize["viewName"] = o.ViewName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSnapshotInfo struct {
	value *SnapshotInfo
	isSet bool
}

func (v NullableSnapshotInfo) Get() *SnapshotInfo {
	return v.value
}

func (v *NullableSnapshotInfo) Set(val *SnapshotInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotInfo(val *SnapshotInfo) *NullableSnapshotInfo {
	return &NullableSnapshotInfo{value: val, isSet: true}
}

func (v NullableSnapshotInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


