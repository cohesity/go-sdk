/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// RestoreVMwareVMParams struct for RestoreVMwareVMParams
type RestoreVMwareVMParams struct {
	// Specifies the name of the catalog for vapp template recovery. This is applicable for recovery to a VCD.
	CatalogUuid NullableString `json:"catalogUuid,omitempty"`
	// Whether to perform copy recovery instead of instant recovery.
	CopyRecovery NullableBool `json:"copyRecovery,omitempty"`
	// Datastore entities if the restore is to alternate location.
	DatastoreEntityVec []EntityProto `json:"datastoreEntityVec,omitempty"`
	// Whether to preserve custom attributes for the clone op.
	PreserveCustomAttributesDuringClone NullableBool `json:"preserveCustomAttributesDuringClone,omitempty"`
	// Whether to preserve tags for the clone op.
	PreserveTagsDuringClone NullableBool `json:"preserveTagsDuringClone,omitempty"`
	ResourcePoolEntity *EntityProto `json:"resourcePoolEntity,omitempty"`
	// This is only populated for VCD restore to alternate location. It contains the name of the destination storage profile.
	StorageProfileName NullableString `json:"storageProfileName,omitempty"`
	// This is only populated for VCD restore to alternate location. It contains the vcd uuid of the destination storage profile.
	StorageProfileVcdUuid NullableString `json:"storageProfileVcdUuid,omitempty"`
	TargetDatastoreFolder *EntityProto `json:"targetDatastoreFolder,omitempty"`
	TargetVmFolder *EntityProto `json:"targetVmFolder,omitempty"`
}

// NewRestoreVMwareVMParams instantiates a new RestoreVMwareVMParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreVMwareVMParams() *RestoreVMwareVMParams {
	this := RestoreVMwareVMParams{}
	return &this
}

// NewRestoreVMwareVMParamsWithDefaults instantiates a new RestoreVMwareVMParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreVMwareVMParamsWithDefaults() *RestoreVMwareVMParams {
	this := RestoreVMwareVMParams{}
	return &this
}

// GetCatalogUuid returns the CatalogUuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreVMwareVMParams) GetCatalogUuid() string {
	if o == nil || o.CatalogUuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.CatalogUuid.Get()
}

// GetCatalogUuidOk returns a tuple with the CatalogUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreVMwareVMParams) GetCatalogUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CatalogUuid.Get(), o.CatalogUuid.IsSet()
}

// HasCatalogUuid returns a boolean if a field has been set.
func (o *RestoreVMwareVMParams) HasCatalogUuid() bool {
	if o != nil && o.CatalogUuid.IsSet() {
		return true
	}

	return false
}

// SetCatalogUuid gets a reference to the given NullableString and assigns it to the CatalogUuid field.
func (o *RestoreVMwareVMParams) SetCatalogUuid(v string) {
	o.CatalogUuid.Set(&v)
}
// SetCatalogUuidNil sets the value for CatalogUuid to be an explicit nil
func (o *RestoreVMwareVMParams) SetCatalogUuidNil() {
	o.CatalogUuid.Set(nil)
}

// UnsetCatalogUuid ensures that no value is present for CatalogUuid, not even an explicit nil
func (o *RestoreVMwareVMParams) UnsetCatalogUuid() {
	o.CatalogUuid.Unset()
}

// GetCopyRecovery returns the CopyRecovery field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreVMwareVMParams) GetCopyRecovery() bool {
	if o == nil || o.CopyRecovery.Get() == nil {
		var ret bool
		return ret
	}
	return *o.CopyRecovery.Get()
}

// GetCopyRecoveryOk returns a tuple with the CopyRecovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreVMwareVMParams) GetCopyRecoveryOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CopyRecovery.Get(), o.CopyRecovery.IsSet()
}

// HasCopyRecovery returns a boolean if a field has been set.
func (o *RestoreVMwareVMParams) HasCopyRecovery() bool {
	if o != nil && o.CopyRecovery.IsSet() {
		return true
	}

	return false
}

// SetCopyRecovery gets a reference to the given NullableBool and assigns it to the CopyRecovery field.
func (o *RestoreVMwareVMParams) SetCopyRecovery(v bool) {
	o.CopyRecovery.Set(&v)
}
// SetCopyRecoveryNil sets the value for CopyRecovery to be an explicit nil
func (o *RestoreVMwareVMParams) SetCopyRecoveryNil() {
	o.CopyRecovery.Set(nil)
}

// UnsetCopyRecovery ensures that no value is present for CopyRecovery, not even an explicit nil
func (o *RestoreVMwareVMParams) UnsetCopyRecovery() {
	o.CopyRecovery.Unset()
}

// GetDatastoreEntityVec returns the DatastoreEntityVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreVMwareVMParams) GetDatastoreEntityVec() []EntityProto {
	if o == nil  {
		var ret []EntityProto
		return ret
	}
	return o.DatastoreEntityVec
}

// GetDatastoreEntityVecOk returns a tuple with the DatastoreEntityVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreVMwareVMParams) GetDatastoreEntityVecOk() (*[]EntityProto, bool) {
	if o == nil || o.DatastoreEntityVec == nil {
		return nil, false
	}
	return &o.DatastoreEntityVec, true
}

// HasDatastoreEntityVec returns a boolean if a field has been set.
func (o *RestoreVMwareVMParams) HasDatastoreEntityVec() bool {
	if o != nil && o.DatastoreEntityVec != nil {
		return true
	}

	return false
}

// SetDatastoreEntityVec gets a reference to the given []EntityProto and assigns it to the DatastoreEntityVec field.
func (o *RestoreVMwareVMParams) SetDatastoreEntityVec(v []EntityProto) {
	o.DatastoreEntityVec = v
}

// GetPreserveCustomAttributesDuringClone returns the PreserveCustomAttributesDuringClone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreVMwareVMParams) GetPreserveCustomAttributesDuringClone() bool {
	if o == nil || o.PreserveCustomAttributesDuringClone.Get() == nil {
		var ret bool
		return ret
	}
	return *o.PreserveCustomAttributesDuringClone.Get()
}

// GetPreserveCustomAttributesDuringCloneOk returns a tuple with the PreserveCustomAttributesDuringClone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreVMwareVMParams) GetPreserveCustomAttributesDuringCloneOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PreserveCustomAttributesDuringClone.Get(), o.PreserveCustomAttributesDuringClone.IsSet()
}

// HasPreserveCustomAttributesDuringClone returns a boolean if a field has been set.
func (o *RestoreVMwareVMParams) HasPreserveCustomAttributesDuringClone() bool {
	if o != nil && o.PreserveCustomAttributesDuringClone.IsSet() {
		return true
	}

	return false
}

// SetPreserveCustomAttributesDuringClone gets a reference to the given NullableBool and assigns it to the PreserveCustomAttributesDuringClone field.
func (o *RestoreVMwareVMParams) SetPreserveCustomAttributesDuringClone(v bool) {
	o.PreserveCustomAttributesDuringClone.Set(&v)
}
// SetPreserveCustomAttributesDuringCloneNil sets the value for PreserveCustomAttributesDuringClone to be an explicit nil
func (o *RestoreVMwareVMParams) SetPreserveCustomAttributesDuringCloneNil() {
	o.PreserveCustomAttributesDuringClone.Set(nil)
}

// UnsetPreserveCustomAttributesDuringClone ensures that no value is present for PreserveCustomAttributesDuringClone, not even an explicit nil
func (o *RestoreVMwareVMParams) UnsetPreserveCustomAttributesDuringClone() {
	o.PreserveCustomAttributesDuringClone.Unset()
}

// GetPreserveTagsDuringClone returns the PreserveTagsDuringClone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreVMwareVMParams) GetPreserveTagsDuringClone() bool {
	if o == nil || o.PreserveTagsDuringClone.Get() == nil {
		var ret bool
		return ret
	}
	return *o.PreserveTagsDuringClone.Get()
}

// GetPreserveTagsDuringCloneOk returns a tuple with the PreserveTagsDuringClone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreVMwareVMParams) GetPreserveTagsDuringCloneOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PreserveTagsDuringClone.Get(), o.PreserveTagsDuringClone.IsSet()
}

// HasPreserveTagsDuringClone returns a boolean if a field has been set.
func (o *RestoreVMwareVMParams) HasPreserveTagsDuringClone() bool {
	if o != nil && o.PreserveTagsDuringClone.IsSet() {
		return true
	}

	return false
}

// SetPreserveTagsDuringClone gets a reference to the given NullableBool and assigns it to the PreserveTagsDuringClone field.
func (o *RestoreVMwareVMParams) SetPreserveTagsDuringClone(v bool) {
	o.PreserveTagsDuringClone.Set(&v)
}
// SetPreserveTagsDuringCloneNil sets the value for PreserveTagsDuringClone to be an explicit nil
func (o *RestoreVMwareVMParams) SetPreserveTagsDuringCloneNil() {
	o.PreserveTagsDuringClone.Set(nil)
}

// UnsetPreserveTagsDuringClone ensures that no value is present for PreserveTagsDuringClone, not even an explicit nil
func (o *RestoreVMwareVMParams) UnsetPreserveTagsDuringClone() {
	o.PreserveTagsDuringClone.Unset()
}

// GetResourcePoolEntity returns the ResourcePoolEntity field value if set, zero value otherwise.
func (o *RestoreVMwareVMParams) GetResourcePoolEntity() EntityProto {
	if o == nil || o.ResourcePoolEntity == nil {
		var ret EntityProto
		return ret
	}
	return *o.ResourcePoolEntity
}

// GetResourcePoolEntityOk returns a tuple with the ResourcePoolEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreVMwareVMParams) GetResourcePoolEntityOk() (*EntityProto, bool) {
	if o == nil || o.ResourcePoolEntity == nil {
		return nil, false
	}
	return o.ResourcePoolEntity, true
}

// HasResourcePoolEntity returns a boolean if a field has been set.
func (o *RestoreVMwareVMParams) HasResourcePoolEntity() bool {
	if o != nil && o.ResourcePoolEntity != nil {
		return true
	}

	return false
}

// SetResourcePoolEntity gets a reference to the given EntityProto and assigns it to the ResourcePoolEntity field.
func (o *RestoreVMwareVMParams) SetResourcePoolEntity(v EntityProto) {
	o.ResourcePoolEntity = &v
}

// GetStorageProfileName returns the StorageProfileName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreVMwareVMParams) GetStorageProfileName() string {
	if o == nil || o.StorageProfileName.Get() == nil {
		var ret string
		return ret
	}
	return *o.StorageProfileName.Get()
}

// GetStorageProfileNameOk returns a tuple with the StorageProfileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreVMwareVMParams) GetStorageProfileNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageProfileName.Get(), o.StorageProfileName.IsSet()
}

// HasStorageProfileName returns a boolean if a field has been set.
func (o *RestoreVMwareVMParams) HasStorageProfileName() bool {
	if o != nil && o.StorageProfileName.IsSet() {
		return true
	}

	return false
}

// SetStorageProfileName gets a reference to the given NullableString and assigns it to the StorageProfileName field.
func (o *RestoreVMwareVMParams) SetStorageProfileName(v string) {
	o.StorageProfileName.Set(&v)
}
// SetStorageProfileNameNil sets the value for StorageProfileName to be an explicit nil
func (o *RestoreVMwareVMParams) SetStorageProfileNameNil() {
	o.StorageProfileName.Set(nil)
}

// UnsetStorageProfileName ensures that no value is present for StorageProfileName, not even an explicit nil
func (o *RestoreVMwareVMParams) UnsetStorageProfileName() {
	o.StorageProfileName.Unset()
}

// GetStorageProfileVcdUuid returns the StorageProfileVcdUuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreVMwareVMParams) GetStorageProfileVcdUuid() string {
	if o == nil || o.StorageProfileVcdUuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.StorageProfileVcdUuid.Get()
}

// GetStorageProfileVcdUuidOk returns a tuple with the StorageProfileVcdUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreVMwareVMParams) GetStorageProfileVcdUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageProfileVcdUuid.Get(), o.StorageProfileVcdUuid.IsSet()
}

// HasStorageProfileVcdUuid returns a boolean if a field has been set.
func (o *RestoreVMwareVMParams) HasStorageProfileVcdUuid() bool {
	if o != nil && o.StorageProfileVcdUuid.IsSet() {
		return true
	}

	return false
}

// SetStorageProfileVcdUuid gets a reference to the given NullableString and assigns it to the StorageProfileVcdUuid field.
func (o *RestoreVMwareVMParams) SetStorageProfileVcdUuid(v string) {
	o.StorageProfileVcdUuid.Set(&v)
}
// SetStorageProfileVcdUuidNil sets the value for StorageProfileVcdUuid to be an explicit nil
func (o *RestoreVMwareVMParams) SetStorageProfileVcdUuidNil() {
	o.StorageProfileVcdUuid.Set(nil)
}

// UnsetStorageProfileVcdUuid ensures that no value is present for StorageProfileVcdUuid, not even an explicit nil
func (o *RestoreVMwareVMParams) UnsetStorageProfileVcdUuid() {
	o.StorageProfileVcdUuid.Unset()
}

// GetTargetDatastoreFolder returns the TargetDatastoreFolder field value if set, zero value otherwise.
func (o *RestoreVMwareVMParams) GetTargetDatastoreFolder() EntityProto {
	if o == nil || o.TargetDatastoreFolder == nil {
		var ret EntityProto
		return ret
	}
	return *o.TargetDatastoreFolder
}

// GetTargetDatastoreFolderOk returns a tuple with the TargetDatastoreFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreVMwareVMParams) GetTargetDatastoreFolderOk() (*EntityProto, bool) {
	if o == nil || o.TargetDatastoreFolder == nil {
		return nil, false
	}
	return o.TargetDatastoreFolder, true
}

// HasTargetDatastoreFolder returns a boolean if a field has been set.
func (o *RestoreVMwareVMParams) HasTargetDatastoreFolder() bool {
	if o != nil && o.TargetDatastoreFolder != nil {
		return true
	}

	return false
}

// SetTargetDatastoreFolder gets a reference to the given EntityProto and assigns it to the TargetDatastoreFolder field.
func (o *RestoreVMwareVMParams) SetTargetDatastoreFolder(v EntityProto) {
	o.TargetDatastoreFolder = &v
}

// GetTargetVmFolder returns the TargetVmFolder field value if set, zero value otherwise.
func (o *RestoreVMwareVMParams) GetTargetVmFolder() EntityProto {
	if o == nil || o.TargetVmFolder == nil {
		var ret EntityProto
		return ret
	}
	return *o.TargetVmFolder
}

// GetTargetVmFolderOk returns a tuple with the TargetVmFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreVMwareVMParams) GetTargetVmFolderOk() (*EntityProto, bool) {
	if o == nil || o.TargetVmFolder == nil {
		return nil, false
	}
	return o.TargetVmFolder, true
}

// HasTargetVmFolder returns a boolean if a field has been set.
func (o *RestoreVMwareVMParams) HasTargetVmFolder() bool {
	if o != nil && o.TargetVmFolder != nil {
		return true
	}

	return false
}

// SetTargetVmFolder gets a reference to the given EntityProto and assigns it to the TargetVmFolder field.
func (o *RestoreVMwareVMParams) SetTargetVmFolder(v EntityProto) {
	o.TargetVmFolder = &v
}

func (o RestoreVMwareVMParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CatalogUuid.IsSet() {
		toSerialize["catalogUuid"] = o.CatalogUuid.Get()
	}
	if o.CopyRecovery.IsSet() {
		toSerialize["copyRecovery"] = o.CopyRecovery.Get()
	}
	if o.DatastoreEntityVec != nil {
		toSerialize["datastoreEntityVec"] = o.DatastoreEntityVec
	}
	if o.PreserveCustomAttributesDuringClone.IsSet() {
		toSerialize["preserveCustomAttributesDuringClone"] = o.PreserveCustomAttributesDuringClone.Get()
	}
	if o.PreserveTagsDuringClone.IsSet() {
		toSerialize["preserveTagsDuringClone"] = o.PreserveTagsDuringClone.Get()
	}
	if o.ResourcePoolEntity != nil {
		toSerialize["resourcePoolEntity"] = o.ResourcePoolEntity
	}
	if o.StorageProfileName.IsSet() {
		toSerialize["storageProfileName"] = o.StorageProfileName.Get()
	}
	if o.StorageProfileVcdUuid.IsSet() {
		toSerialize["storageProfileVcdUuid"] = o.StorageProfileVcdUuid.Get()
	}
	if o.TargetDatastoreFolder != nil {
		toSerialize["targetDatastoreFolder"] = o.TargetDatastoreFolder
	}
	if o.TargetVmFolder != nil {
		toSerialize["targetVmFolder"] = o.TargetVmFolder
	}
	return json.Marshal(toSerialize)
}

type NullableRestoreVMwareVMParams struct {
	value *RestoreVMwareVMParams
	isSet bool
}

func (v NullableRestoreVMwareVMParams) Get() *RestoreVMwareVMParams {
	return v.value
}

func (v *NullableRestoreVMwareVMParams) Set(val *RestoreVMwareVMParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreVMwareVMParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreVMwareVMParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreVMwareVMParams(val *RestoreVMwareVMParams) *NullableRestoreVMwareVMParams {
	return &NullableRestoreVMwareVMParams{value: val, isSet: true}
}

func (v NullableRestoreVMwareVMParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreVMwareVMParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


