/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// VmwareRestoreParameters Specifies the information required for recovering or cloning VmWare VMs.
type VmwareRestoreParameters struct {
	// Specifies additional datastores where the object should be recovered to.
	AdditionalDatastoreIds []int64 `json:"additionalDatastoreIds,omitempty"`
	// Specifies the folder where the restore datastore should be created. This is applicable only when the VMs are being cloned.
	DatastoreFolderId NullableInt64 `json:"datastoreFolderId,omitempty"`
	// Specifies the datastore where the object's files should be recovered to. This field is mandatory to recover objects to a different resource pool or to a different parent source. If not specified, objects are recovered to their original datastore locations in the parent source.
	DatastoreId NullableInt64 `json:"datastoreId,omitempty"`
	// Specifies whether the network should be detached from the recovered or cloned VMs.
	DetachNetwork NullableBool `json:"detachNetwork,omitempty"`
	// Specifies whether the network should be left in disabled state. Attached network is enabled by default. Set this flag to true to disable it.
	DisableNetwork NullableBool `json:"disableNetwork,omitempty"`
	// Specifies a network configuration to be attached to the cloned or recovered object. For kCloneVMs and kRecoverVMs tasks, original network configuration is detached if the cloned or recovered object is kept under a different parent Protection Source or a different Resource Pool. By default, for kRecoverVMs task, original network configuration is preserved if the recovered object is kept under the same parent Protection Source and the same Resource Pool. Specify this field to override the preserved network configuration or to attach a new network configuration to the cloned or recovered objects. You can get the networkId of the kNetwork object by setting includeNetworks to 'true' in the GET /public/protectionSources operation. In the response, get the id of the desired kNetwork object, the resource pool, and the registered parent Protection Source.
	NetworkId NullableInt64 `json:"networkId,omitempty"`
	// Specifies the parameters for mapping the source and target networks. This field can be used if restoring to a different parent source. This will replace the NetworkId and DisableNetwork that are used to provide configuration for a single network. Unless the support for mapping is available for all the entities old keys can be used to attach a new network. Supports 'kVMware' for now.
	NetworkMappings []NetworkMapping `json:"networkMappings,omitempty"`
	// Specifies the power state of the cloned or recovered objects. By default, the cloned or recovered objects are powered off.
	PoweredOn NullableBool `json:"poweredOn,omitempty"`
	// Specifies a prefix to prepended to the source object name to derive a new name for the recovered or cloned object. By default, cloned or recovered objects retain their original name. Length of this field is limited to 8 characters.
	Prefix NullableString `json:"prefix,omitempty"`
	// Specifies whether or not to preserve the custom attributes during the clone operation. The default behavior is 'true'.
	PreserveCustomAttributesDuringClone NullableBool `json:"preserveCustomAttributesDuringClone,omitempty"`
	// Specifies whether or not to preserve tags during the clone operation. The default behavior is 'true'.
	PreserveTags NullableBool `json:"preserveTags,omitempty"`
	// Specifies the type of recovery process to be performed. If unspecified, then an instant recovery will be performed. Specifies the recovery process type to be used.. 'kInstantRecovery' indicates that an instant recovery should be performed. 'kCopyRecovery' indicates that a copy recovery should be performed.
	RecoveryProcessType NullableString `json:"recoveryProcessType,omitempty"`
	// Specifies the resource pool where the cloned or recovered objects are attached. This field is mandatory for kCloneVMs Restore Tasks always. For kRecoverVMs Restore Tasks, this field is mandatory only if newParentId field is specified. If this field is not specified, recovered objects are attached to the original resource pool under the original parent.
	ResourcePoolId NullableInt64 `json:"resourcePoolId,omitempty"`
	// Specifies the name of the destination storage profile while restoring to an alternate VCD location.
	StorageProfileName NullableString `json:"storageProfileName,omitempty"`
	// Specifies the UUID of the storage profile while restoring to an alternate VCD location.
	StorageProfileVcdUuid NullableString `json:"storageProfileVcdUuid,omitempty"`
	// Specifies a suffix to appended to the original source object name to derive a new name for the recovered or cloned object. By default, cloned or recovered objects retain their original name. Length of this field is limited to 8 characters.
	Suffix NullableString `json:"suffix,omitempty"`
	// Specifies the ID of the vApp to which a VM should be restored.
	VAppId NullableInt64 `json:"vAppId,omitempty"`
	// Specifies the ID of the VDC to which a VM should be restored.
	VdcId NullableInt64 `json:"vdcId,omitempty"`
	// Specifies a folder where the VMs should be restored. This is applicable only when the VMs are being restored to an alternate location or if clone is being performed.
	VmFolderId NullableInt64 `json:"vmFolderId,omitempty"`
}

// NewVmwareRestoreParameters instantiates a new VmwareRestoreParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmwareRestoreParameters() *VmwareRestoreParameters {
	this := VmwareRestoreParameters{}
	return &this
}

// NewVmwareRestoreParametersWithDefaults instantiates a new VmwareRestoreParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmwareRestoreParametersWithDefaults() *VmwareRestoreParameters {
	this := VmwareRestoreParameters{}
	return &this
}

// GetAdditionalDatastoreIds returns the AdditionalDatastoreIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareRestoreParameters) GetAdditionalDatastoreIds() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.AdditionalDatastoreIds
}

// GetAdditionalDatastoreIdsOk returns a tuple with the AdditionalDatastoreIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareRestoreParameters) GetAdditionalDatastoreIdsOk() (*[]int64, bool) {
	if o == nil || o.AdditionalDatastoreIds == nil {
		return nil, false
	}
	return &o.AdditionalDatastoreIds, true
}

// HasAdditionalDatastoreIds returns a boolean if a field has been set.
func (o *VmwareRestoreParameters) HasAdditionalDatastoreIds() bool {
	if o != nil && o.AdditionalDatastoreIds != nil {
		return true
	}

	return false
}

// SetAdditionalDatastoreIds gets a reference to the given []int64 and assigns it to the AdditionalDatastoreIds field.
func (o *VmwareRestoreParameters) SetAdditionalDatastoreIds(v []int64) {
	o.AdditionalDatastoreIds = v
}

// GetDatastoreFolderId returns the DatastoreFolderId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareRestoreParameters) GetDatastoreFolderId() int64 {
	if o == nil || o.DatastoreFolderId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DatastoreFolderId.Get()
}

// GetDatastoreFolderIdOk returns a tuple with the DatastoreFolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareRestoreParameters) GetDatastoreFolderIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DatastoreFolderId.Get(), o.DatastoreFolderId.IsSet()
}

// HasDatastoreFolderId returns a boolean if a field has been set.
func (o *VmwareRestoreParameters) HasDatastoreFolderId() bool {
	if o != nil && o.DatastoreFolderId.IsSet() {
		return true
	}

	return false
}

// SetDatastoreFolderId gets a reference to the given NullableInt64 and assigns it to the DatastoreFolderId field.
func (o *VmwareRestoreParameters) SetDatastoreFolderId(v int64) {
	o.DatastoreFolderId.Set(&v)
}
// SetDatastoreFolderIdNil sets the value for DatastoreFolderId to be an explicit nil
func (o *VmwareRestoreParameters) SetDatastoreFolderIdNil() {
	o.DatastoreFolderId.Set(nil)
}

// UnsetDatastoreFolderId ensures that no value is present for DatastoreFolderId, not even an explicit nil
func (o *VmwareRestoreParameters) UnsetDatastoreFolderId() {
	o.DatastoreFolderId.Unset()
}

// GetDatastoreId returns the DatastoreId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareRestoreParameters) GetDatastoreId() int64 {
	if o == nil || o.DatastoreId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DatastoreId.Get()
}

// GetDatastoreIdOk returns a tuple with the DatastoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareRestoreParameters) GetDatastoreIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DatastoreId.Get(), o.DatastoreId.IsSet()
}

// HasDatastoreId returns a boolean if a field has been set.
func (o *VmwareRestoreParameters) HasDatastoreId() bool {
	if o != nil && o.DatastoreId.IsSet() {
		return true
	}

	return false
}

// SetDatastoreId gets a reference to the given NullableInt64 and assigns it to the DatastoreId field.
func (o *VmwareRestoreParameters) SetDatastoreId(v int64) {
	o.DatastoreId.Set(&v)
}
// SetDatastoreIdNil sets the value for DatastoreId to be an explicit nil
func (o *VmwareRestoreParameters) SetDatastoreIdNil() {
	o.DatastoreId.Set(nil)
}

// UnsetDatastoreId ensures that no value is present for DatastoreId, not even an explicit nil
func (o *VmwareRestoreParameters) UnsetDatastoreId() {
	o.DatastoreId.Unset()
}

// GetDetachNetwork returns the DetachNetwork field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareRestoreParameters) GetDetachNetwork() bool {
	if o == nil || o.DetachNetwork.Get() == nil {
		var ret bool
		return ret
	}
	return *o.DetachNetwork.Get()
}

// GetDetachNetworkOk returns a tuple with the DetachNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareRestoreParameters) GetDetachNetworkOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DetachNetwork.Get(), o.DetachNetwork.IsSet()
}

// HasDetachNetwork returns a boolean if a field has been set.
func (o *VmwareRestoreParameters) HasDetachNetwork() bool {
	if o != nil && o.DetachNetwork.IsSet() {
		return true
	}

	return false
}

// SetDetachNetwork gets a reference to the given NullableBool and assigns it to the DetachNetwork field.
func (o *VmwareRestoreParameters) SetDetachNetwork(v bool) {
	o.DetachNetwork.Set(&v)
}
// SetDetachNetworkNil sets the value for DetachNetwork to be an explicit nil
func (o *VmwareRestoreParameters) SetDetachNetworkNil() {
	o.DetachNetwork.Set(nil)
}

// UnsetDetachNetwork ensures that no value is present for DetachNetwork, not even an explicit nil
func (o *VmwareRestoreParameters) UnsetDetachNetwork() {
	o.DetachNetwork.Unset()
}

// GetDisableNetwork returns the DisableNetwork field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareRestoreParameters) GetDisableNetwork() bool {
	if o == nil || o.DisableNetwork.Get() == nil {
		var ret bool
		return ret
	}
	return *o.DisableNetwork.Get()
}

// GetDisableNetworkOk returns a tuple with the DisableNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareRestoreParameters) GetDisableNetworkOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisableNetwork.Get(), o.DisableNetwork.IsSet()
}

// HasDisableNetwork returns a boolean if a field has been set.
func (o *VmwareRestoreParameters) HasDisableNetwork() bool {
	if o != nil && o.DisableNetwork.IsSet() {
		return true
	}

	return false
}

// SetDisableNetwork gets a reference to the given NullableBool and assigns it to the DisableNetwork field.
func (o *VmwareRestoreParameters) SetDisableNetwork(v bool) {
	o.DisableNetwork.Set(&v)
}
// SetDisableNetworkNil sets the value for DisableNetwork to be an explicit nil
func (o *VmwareRestoreParameters) SetDisableNetworkNil() {
	o.DisableNetwork.Set(nil)
}

// UnsetDisableNetwork ensures that no value is present for DisableNetwork, not even an explicit nil
func (o *VmwareRestoreParameters) UnsetDisableNetwork() {
	o.DisableNetwork.Unset()
}

// GetNetworkId returns the NetworkId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareRestoreParameters) GetNetworkId() int64 {
	if o == nil || o.NetworkId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NetworkId.Get()
}

// GetNetworkIdOk returns a tuple with the NetworkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareRestoreParameters) GetNetworkIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NetworkId.Get(), o.NetworkId.IsSet()
}

// HasNetworkId returns a boolean if a field has been set.
func (o *VmwareRestoreParameters) HasNetworkId() bool {
	if o != nil && o.NetworkId.IsSet() {
		return true
	}

	return false
}

// SetNetworkId gets a reference to the given NullableInt64 and assigns it to the NetworkId field.
func (o *VmwareRestoreParameters) SetNetworkId(v int64) {
	o.NetworkId.Set(&v)
}
// SetNetworkIdNil sets the value for NetworkId to be an explicit nil
func (o *VmwareRestoreParameters) SetNetworkIdNil() {
	o.NetworkId.Set(nil)
}

// UnsetNetworkId ensures that no value is present for NetworkId, not even an explicit nil
func (o *VmwareRestoreParameters) UnsetNetworkId() {
	o.NetworkId.Unset()
}

// GetNetworkMappings returns the NetworkMappings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareRestoreParameters) GetNetworkMappings() []NetworkMapping {
	if o == nil  {
		var ret []NetworkMapping
		return ret
	}
	return o.NetworkMappings
}

// GetNetworkMappingsOk returns a tuple with the NetworkMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareRestoreParameters) GetNetworkMappingsOk() (*[]NetworkMapping, bool) {
	if o == nil || o.NetworkMappings == nil {
		return nil, false
	}
	return &o.NetworkMappings, true
}

// HasNetworkMappings returns a boolean if a field has been set.
func (o *VmwareRestoreParameters) HasNetworkMappings() bool {
	if o != nil && o.NetworkMappings != nil {
		return true
	}

	return false
}

// SetNetworkMappings gets a reference to the given []NetworkMapping and assigns it to the NetworkMappings field.
func (o *VmwareRestoreParameters) SetNetworkMappings(v []NetworkMapping) {
	o.NetworkMappings = v
}

// GetPoweredOn returns the PoweredOn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareRestoreParameters) GetPoweredOn() bool {
	if o == nil || o.PoweredOn.Get() == nil {
		var ret bool
		return ret
	}
	return *o.PoweredOn.Get()
}

// GetPoweredOnOk returns a tuple with the PoweredOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareRestoreParameters) GetPoweredOnOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PoweredOn.Get(), o.PoweredOn.IsSet()
}

// HasPoweredOn returns a boolean if a field has been set.
func (o *VmwareRestoreParameters) HasPoweredOn() bool {
	if o != nil && o.PoweredOn.IsSet() {
		return true
	}

	return false
}

// SetPoweredOn gets a reference to the given NullableBool and assigns it to the PoweredOn field.
func (o *VmwareRestoreParameters) SetPoweredOn(v bool) {
	o.PoweredOn.Set(&v)
}
// SetPoweredOnNil sets the value for PoweredOn to be an explicit nil
func (o *VmwareRestoreParameters) SetPoweredOnNil() {
	o.PoweredOn.Set(nil)
}

// UnsetPoweredOn ensures that no value is present for PoweredOn, not even an explicit nil
func (o *VmwareRestoreParameters) UnsetPoweredOn() {
	o.PoweredOn.Unset()
}

// GetPrefix returns the Prefix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareRestoreParameters) GetPrefix() string {
	if o == nil || o.Prefix.Get() == nil {
		var ret string
		return ret
	}
	return *o.Prefix.Get()
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareRestoreParameters) GetPrefixOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Prefix.Get(), o.Prefix.IsSet()
}

// HasPrefix returns a boolean if a field has been set.
func (o *VmwareRestoreParameters) HasPrefix() bool {
	if o != nil && o.Prefix.IsSet() {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given NullableString and assigns it to the Prefix field.
func (o *VmwareRestoreParameters) SetPrefix(v string) {
	o.Prefix.Set(&v)
}
// SetPrefixNil sets the value for Prefix to be an explicit nil
func (o *VmwareRestoreParameters) SetPrefixNil() {
	o.Prefix.Set(nil)
}

// UnsetPrefix ensures that no value is present for Prefix, not even an explicit nil
func (o *VmwareRestoreParameters) UnsetPrefix() {
	o.Prefix.Unset()
}

// GetPreserveCustomAttributesDuringClone returns the PreserveCustomAttributesDuringClone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareRestoreParameters) GetPreserveCustomAttributesDuringClone() bool {
	if o == nil || o.PreserveCustomAttributesDuringClone.Get() == nil {
		var ret bool
		return ret
	}
	return *o.PreserveCustomAttributesDuringClone.Get()
}

// GetPreserveCustomAttributesDuringCloneOk returns a tuple with the PreserveCustomAttributesDuringClone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareRestoreParameters) GetPreserveCustomAttributesDuringCloneOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PreserveCustomAttributesDuringClone.Get(), o.PreserveCustomAttributesDuringClone.IsSet()
}

// HasPreserveCustomAttributesDuringClone returns a boolean if a field has been set.
func (o *VmwareRestoreParameters) HasPreserveCustomAttributesDuringClone() bool {
	if o != nil && o.PreserveCustomAttributesDuringClone.IsSet() {
		return true
	}

	return false
}

// SetPreserveCustomAttributesDuringClone gets a reference to the given NullableBool and assigns it to the PreserveCustomAttributesDuringClone field.
func (o *VmwareRestoreParameters) SetPreserveCustomAttributesDuringClone(v bool) {
	o.PreserveCustomAttributesDuringClone.Set(&v)
}
// SetPreserveCustomAttributesDuringCloneNil sets the value for PreserveCustomAttributesDuringClone to be an explicit nil
func (o *VmwareRestoreParameters) SetPreserveCustomAttributesDuringCloneNil() {
	o.PreserveCustomAttributesDuringClone.Set(nil)
}

// UnsetPreserveCustomAttributesDuringClone ensures that no value is present for PreserveCustomAttributesDuringClone, not even an explicit nil
func (o *VmwareRestoreParameters) UnsetPreserveCustomAttributesDuringClone() {
	o.PreserveCustomAttributesDuringClone.Unset()
}

// GetPreserveTags returns the PreserveTags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareRestoreParameters) GetPreserveTags() bool {
	if o == nil || o.PreserveTags.Get() == nil {
		var ret bool
		return ret
	}
	return *o.PreserveTags.Get()
}

// GetPreserveTagsOk returns a tuple with the PreserveTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareRestoreParameters) GetPreserveTagsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PreserveTags.Get(), o.PreserveTags.IsSet()
}

// HasPreserveTags returns a boolean if a field has been set.
func (o *VmwareRestoreParameters) HasPreserveTags() bool {
	if o != nil && o.PreserveTags.IsSet() {
		return true
	}

	return false
}

// SetPreserveTags gets a reference to the given NullableBool and assigns it to the PreserveTags field.
func (o *VmwareRestoreParameters) SetPreserveTags(v bool) {
	o.PreserveTags.Set(&v)
}
// SetPreserveTagsNil sets the value for PreserveTags to be an explicit nil
func (o *VmwareRestoreParameters) SetPreserveTagsNil() {
	o.PreserveTags.Set(nil)
}

// UnsetPreserveTags ensures that no value is present for PreserveTags, not even an explicit nil
func (o *VmwareRestoreParameters) UnsetPreserveTags() {
	o.PreserveTags.Unset()
}

// GetRecoveryProcessType returns the RecoveryProcessType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareRestoreParameters) GetRecoveryProcessType() string {
	if o == nil || o.RecoveryProcessType.Get() == nil {
		var ret string
		return ret
	}
	return *o.RecoveryProcessType.Get()
}

// GetRecoveryProcessTypeOk returns a tuple with the RecoveryProcessType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareRestoreParameters) GetRecoveryProcessTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RecoveryProcessType.Get(), o.RecoveryProcessType.IsSet()
}

// HasRecoveryProcessType returns a boolean if a field has been set.
func (o *VmwareRestoreParameters) HasRecoveryProcessType() bool {
	if o != nil && o.RecoveryProcessType.IsSet() {
		return true
	}

	return false
}

// SetRecoveryProcessType gets a reference to the given NullableString and assigns it to the RecoveryProcessType field.
func (o *VmwareRestoreParameters) SetRecoveryProcessType(v string) {
	o.RecoveryProcessType.Set(&v)
}
// SetRecoveryProcessTypeNil sets the value for RecoveryProcessType to be an explicit nil
func (o *VmwareRestoreParameters) SetRecoveryProcessTypeNil() {
	o.RecoveryProcessType.Set(nil)
}

// UnsetRecoveryProcessType ensures that no value is present for RecoveryProcessType, not even an explicit nil
func (o *VmwareRestoreParameters) UnsetRecoveryProcessType() {
	o.RecoveryProcessType.Unset()
}

// GetResourcePoolId returns the ResourcePoolId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareRestoreParameters) GetResourcePoolId() int64 {
	if o == nil || o.ResourcePoolId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ResourcePoolId.Get()
}

// GetResourcePoolIdOk returns a tuple with the ResourcePoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareRestoreParameters) GetResourcePoolIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ResourcePoolId.Get(), o.ResourcePoolId.IsSet()
}

// HasResourcePoolId returns a boolean if a field has been set.
func (o *VmwareRestoreParameters) HasResourcePoolId() bool {
	if o != nil && o.ResourcePoolId.IsSet() {
		return true
	}

	return false
}

// SetResourcePoolId gets a reference to the given NullableInt64 and assigns it to the ResourcePoolId field.
func (o *VmwareRestoreParameters) SetResourcePoolId(v int64) {
	o.ResourcePoolId.Set(&v)
}
// SetResourcePoolIdNil sets the value for ResourcePoolId to be an explicit nil
func (o *VmwareRestoreParameters) SetResourcePoolIdNil() {
	o.ResourcePoolId.Set(nil)
}

// UnsetResourcePoolId ensures that no value is present for ResourcePoolId, not even an explicit nil
func (o *VmwareRestoreParameters) UnsetResourcePoolId() {
	o.ResourcePoolId.Unset()
}

// GetStorageProfileName returns the StorageProfileName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareRestoreParameters) GetStorageProfileName() string {
	if o == nil || o.StorageProfileName.Get() == nil {
		var ret string
		return ret
	}
	return *o.StorageProfileName.Get()
}

// GetStorageProfileNameOk returns a tuple with the StorageProfileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareRestoreParameters) GetStorageProfileNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageProfileName.Get(), o.StorageProfileName.IsSet()
}

// HasStorageProfileName returns a boolean if a field has been set.
func (o *VmwareRestoreParameters) HasStorageProfileName() bool {
	if o != nil && o.StorageProfileName.IsSet() {
		return true
	}

	return false
}

// SetStorageProfileName gets a reference to the given NullableString and assigns it to the StorageProfileName field.
func (o *VmwareRestoreParameters) SetStorageProfileName(v string) {
	o.StorageProfileName.Set(&v)
}
// SetStorageProfileNameNil sets the value for StorageProfileName to be an explicit nil
func (o *VmwareRestoreParameters) SetStorageProfileNameNil() {
	o.StorageProfileName.Set(nil)
}

// UnsetStorageProfileName ensures that no value is present for StorageProfileName, not even an explicit nil
func (o *VmwareRestoreParameters) UnsetStorageProfileName() {
	o.StorageProfileName.Unset()
}

// GetStorageProfileVcdUuid returns the StorageProfileVcdUuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareRestoreParameters) GetStorageProfileVcdUuid() string {
	if o == nil || o.StorageProfileVcdUuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.StorageProfileVcdUuid.Get()
}

// GetStorageProfileVcdUuidOk returns a tuple with the StorageProfileVcdUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareRestoreParameters) GetStorageProfileVcdUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageProfileVcdUuid.Get(), o.StorageProfileVcdUuid.IsSet()
}

// HasStorageProfileVcdUuid returns a boolean if a field has been set.
func (o *VmwareRestoreParameters) HasStorageProfileVcdUuid() bool {
	if o != nil && o.StorageProfileVcdUuid.IsSet() {
		return true
	}

	return false
}

// SetStorageProfileVcdUuid gets a reference to the given NullableString and assigns it to the StorageProfileVcdUuid field.
func (o *VmwareRestoreParameters) SetStorageProfileVcdUuid(v string) {
	o.StorageProfileVcdUuid.Set(&v)
}
// SetStorageProfileVcdUuidNil sets the value for StorageProfileVcdUuid to be an explicit nil
func (o *VmwareRestoreParameters) SetStorageProfileVcdUuidNil() {
	o.StorageProfileVcdUuid.Set(nil)
}

// UnsetStorageProfileVcdUuid ensures that no value is present for StorageProfileVcdUuid, not even an explicit nil
func (o *VmwareRestoreParameters) UnsetStorageProfileVcdUuid() {
	o.StorageProfileVcdUuid.Unset()
}

// GetSuffix returns the Suffix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareRestoreParameters) GetSuffix() string {
	if o == nil || o.Suffix.Get() == nil {
		var ret string
		return ret
	}
	return *o.Suffix.Get()
}

// GetSuffixOk returns a tuple with the Suffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareRestoreParameters) GetSuffixOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Suffix.Get(), o.Suffix.IsSet()
}

// HasSuffix returns a boolean if a field has been set.
func (o *VmwareRestoreParameters) HasSuffix() bool {
	if o != nil && o.Suffix.IsSet() {
		return true
	}

	return false
}

// SetSuffix gets a reference to the given NullableString and assigns it to the Suffix field.
func (o *VmwareRestoreParameters) SetSuffix(v string) {
	o.Suffix.Set(&v)
}
// SetSuffixNil sets the value for Suffix to be an explicit nil
func (o *VmwareRestoreParameters) SetSuffixNil() {
	o.Suffix.Set(nil)
}

// UnsetSuffix ensures that no value is present for Suffix, not even an explicit nil
func (o *VmwareRestoreParameters) UnsetSuffix() {
	o.Suffix.Unset()
}

// GetVAppId returns the VAppId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareRestoreParameters) GetVAppId() int64 {
	if o == nil || o.VAppId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.VAppId.Get()
}

// GetVAppIdOk returns a tuple with the VAppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareRestoreParameters) GetVAppIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VAppId.Get(), o.VAppId.IsSet()
}

// HasVAppId returns a boolean if a field has been set.
func (o *VmwareRestoreParameters) HasVAppId() bool {
	if o != nil && o.VAppId.IsSet() {
		return true
	}

	return false
}

// SetVAppId gets a reference to the given NullableInt64 and assigns it to the VAppId field.
func (o *VmwareRestoreParameters) SetVAppId(v int64) {
	o.VAppId.Set(&v)
}
// SetVAppIdNil sets the value for VAppId to be an explicit nil
func (o *VmwareRestoreParameters) SetVAppIdNil() {
	o.VAppId.Set(nil)
}

// UnsetVAppId ensures that no value is present for VAppId, not even an explicit nil
func (o *VmwareRestoreParameters) UnsetVAppId() {
	o.VAppId.Unset()
}

// GetVdcId returns the VdcId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareRestoreParameters) GetVdcId() int64 {
	if o == nil || o.VdcId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.VdcId.Get()
}

// GetVdcIdOk returns a tuple with the VdcId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareRestoreParameters) GetVdcIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VdcId.Get(), o.VdcId.IsSet()
}

// HasVdcId returns a boolean if a field has been set.
func (o *VmwareRestoreParameters) HasVdcId() bool {
	if o != nil && o.VdcId.IsSet() {
		return true
	}

	return false
}

// SetVdcId gets a reference to the given NullableInt64 and assigns it to the VdcId field.
func (o *VmwareRestoreParameters) SetVdcId(v int64) {
	o.VdcId.Set(&v)
}
// SetVdcIdNil sets the value for VdcId to be an explicit nil
func (o *VmwareRestoreParameters) SetVdcIdNil() {
	o.VdcId.Set(nil)
}

// UnsetVdcId ensures that no value is present for VdcId, not even an explicit nil
func (o *VmwareRestoreParameters) UnsetVdcId() {
	o.VdcId.Unset()
}

// GetVmFolderId returns the VmFolderId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareRestoreParameters) GetVmFolderId() int64 {
	if o == nil || o.VmFolderId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.VmFolderId.Get()
}

// GetVmFolderIdOk returns a tuple with the VmFolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareRestoreParameters) GetVmFolderIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VmFolderId.Get(), o.VmFolderId.IsSet()
}

// HasVmFolderId returns a boolean if a field has been set.
func (o *VmwareRestoreParameters) HasVmFolderId() bool {
	if o != nil && o.VmFolderId.IsSet() {
		return true
	}

	return false
}

// SetVmFolderId gets a reference to the given NullableInt64 and assigns it to the VmFolderId field.
func (o *VmwareRestoreParameters) SetVmFolderId(v int64) {
	o.VmFolderId.Set(&v)
}
// SetVmFolderIdNil sets the value for VmFolderId to be an explicit nil
func (o *VmwareRestoreParameters) SetVmFolderIdNil() {
	o.VmFolderId.Set(nil)
}

// UnsetVmFolderId ensures that no value is present for VmFolderId, not even an explicit nil
func (o *VmwareRestoreParameters) UnsetVmFolderId() {
	o.VmFolderId.Unset()
}

func (o VmwareRestoreParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AdditionalDatastoreIds != nil {
		toSerialize["additionalDatastoreIds"] = o.AdditionalDatastoreIds
	}
	if o.DatastoreFolderId.IsSet() {
		toSerialize["datastoreFolderId"] = o.DatastoreFolderId.Get()
	}
	if o.DatastoreId.IsSet() {
		toSerialize["datastoreId"] = o.DatastoreId.Get()
	}
	if o.DetachNetwork.IsSet() {
		toSerialize["detachNetwork"] = o.DetachNetwork.Get()
	}
	if o.DisableNetwork.IsSet() {
		toSerialize["disableNetwork"] = o.DisableNetwork.Get()
	}
	if o.NetworkId.IsSet() {
		toSerialize["networkId"] = o.NetworkId.Get()
	}
	if o.NetworkMappings != nil {
		toSerialize["networkMappings"] = o.NetworkMappings
	}
	if o.PoweredOn.IsSet() {
		toSerialize["poweredOn"] = o.PoweredOn.Get()
	}
	if o.Prefix.IsSet() {
		toSerialize["prefix"] = o.Prefix.Get()
	}
	if o.PreserveCustomAttributesDuringClone.IsSet() {
		toSerialize["preserveCustomAttributesDuringClone"] = o.PreserveCustomAttributesDuringClone.Get()
	}
	if o.PreserveTags.IsSet() {
		toSerialize["preserveTags"] = o.PreserveTags.Get()
	}
	if o.RecoveryProcessType.IsSet() {
		toSerialize["recoveryProcessType"] = o.RecoveryProcessType.Get()
	}
	if o.ResourcePoolId.IsSet() {
		toSerialize["resourcePoolId"] = o.ResourcePoolId.Get()
	}
	if o.StorageProfileName.IsSet() {
		toSerialize["storageProfileName"] = o.StorageProfileName.Get()
	}
	if o.StorageProfileVcdUuid.IsSet() {
		toSerialize["storageProfileVcdUuid"] = o.StorageProfileVcdUuid.Get()
	}
	if o.Suffix.IsSet() {
		toSerialize["suffix"] = o.Suffix.Get()
	}
	if o.VAppId.IsSet() {
		toSerialize["vAppId"] = o.VAppId.Get()
	}
	if o.VdcId.IsSet() {
		toSerialize["vdcId"] = o.VdcId.Get()
	}
	if o.VmFolderId.IsSet() {
		toSerialize["vmFolderId"] = o.VmFolderId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableVmwareRestoreParameters struct {
	value *VmwareRestoreParameters
	isSet bool
}

func (v NullableVmwareRestoreParameters) Get() *VmwareRestoreParameters {
	return v.value
}

func (v *NullableVmwareRestoreParameters) Set(val *VmwareRestoreParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableVmwareRestoreParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableVmwareRestoreParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmwareRestoreParameters(val *VmwareRestoreParameters) *NullableVmwareRestoreParameters {
	return &NullableVmwareRestoreParameters{value: val, isSet: true}
}

func (v NullableVmwareRestoreParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmwareRestoreParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


