/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// RemoteHostConnectorParams struct for RemoteHostConnectorParams
type RemoteHostConnectorParams struct {
	Credentials *Credentials `json:"credentials,omitempty"`
	// Address (i.e., IP, hostname or FQDN) of the host to connect to. Magneto will connect using ssh or equivalent to the host.
	HostAddress NullableString `json:"hostAddress,omitempty"`
	// Type of host to connect to.
	HostType NullableInt32 `json:"hostType,omitempty"`
}

// NewRemoteHostConnectorParams instantiates a new RemoteHostConnectorParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteHostConnectorParams() *RemoteHostConnectorParams {
	this := RemoteHostConnectorParams{}
	return &this
}

// NewRemoteHostConnectorParamsWithDefaults instantiates a new RemoteHostConnectorParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteHostConnectorParamsWithDefaults() *RemoteHostConnectorParams {
	this := RemoteHostConnectorParams{}
	return &this
}

// GetCredentials returns the Credentials field value if set, zero value otherwise.
func (o *RemoteHostConnectorParams) GetCredentials() Credentials {
	if o == nil || o.Credentials == nil {
		var ret Credentials
		return ret
	}
	return *o.Credentials
}

// GetCredentialsOk returns a tuple with the Credentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteHostConnectorParams) GetCredentialsOk() (*Credentials, bool) {
	if o == nil || o.Credentials == nil {
		return nil, false
	}
	return o.Credentials, true
}

// HasCredentials returns a boolean if a field has been set.
func (o *RemoteHostConnectorParams) HasCredentials() bool {
	if o != nil && o.Credentials != nil {
		return true
	}

	return false
}

// SetCredentials gets a reference to the given Credentials and assigns it to the Credentials field.
func (o *RemoteHostConnectorParams) SetCredentials(v Credentials) {
	o.Credentials = &v
}

// GetHostAddress returns the HostAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteHostConnectorParams) GetHostAddress() string {
	if o == nil || o.HostAddress.Get() == nil {
		var ret string
		return ret
	}
	return *o.HostAddress.Get()
}

// GetHostAddressOk returns a tuple with the HostAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteHostConnectorParams) GetHostAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HostAddress.Get(), o.HostAddress.IsSet()
}

// HasHostAddress returns a boolean if a field has been set.
func (o *RemoteHostConnectorParams) HasHostAddress() bool {
	if o != nil && o.HostAddress.IsSet() {
		return true
	}

	return false
}

// SetHostAddress gets a reference to the given NullableString and assigns it to the HostAddress field.
func (o *RemoteHostConnectorParams) SetHostAddress(v string) {
	o.HostAddress.Set(&v)
}
// SetHostAddressNil sets the value for HostAddress to be an explicit nil
func (o *RemoteHostConnectorParams) SetHostAddressNil() {
	o.HostAddress.Set(nil)
}

// UnsetHostAddress ensures that no value is present for HostAddress, not even an explicit nil
func (o *RemoteHostConnectorParams) UnsetHostAddress() {
	o.HostAddress.Unset()
}

// GetHostType returns the HostType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteHostConnectorParams) GetHostType() int32 {
	if o == nil || o.HostType.Get() == nil {
		var ret int32
		return ret
	}
	return *o.HostType.Get()
}

// GetHostTypeOk returns a tuple with the HostType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteHostConnectorParams) GetHostTypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HostType.Get(), o.HostType.IsSet()
}

// HasHostType returns a boolean if a field has been set.
func (o *RemoteHostConnectorParams) HasHostType() bool {
	if o != nil && o.HostType.IsSet() {
		return true
	}

	return false
}

// SetHostType gets a reference to the given NullableInt32 and assigns it to the HostType field.
func (o *RemoteHostConnectorParams) SetHostType(v int32) {
	o.HostType.Set(&v)
}
// SetHostTypeNil sets the value for HostType to be an explicit nil
func (o *RemoteHostConnectorParams) SetHostTypeNil() {
	o.HostType.Set(nil)
}

// UnsetHostType ensures that no value is present for HostType, not even an explicit nil
func (o *RemoteHostConnectorParams) UnsetHostType() {
	o.HostType.Unset()
}

func (o RemoteHostConnectorParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Credentials != nil {
		toSerialize["credentials"] = o.Credentials
	}
	if o.HostAddress.IsSet() {
		toSerialize["hostAddress"] = o.HostAddress.Get()
	}
	if o.HostType.IsSet() {
		toSerialize["hostType"] = o.HostType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRemoteHostConnectorParams struct {
	value *RemoteHostConnectorParams
	isSet bool
}

func (v NullableRemoteHostConnectorParams) Get() *RemoteHostConnectorParams {
	return v.value
}

func (v *NullableRemoteHostConnectorParams) Set(val *RemoteHostConnectorParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteHostConnectorParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteHostConnectorParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteHostConnectorParams(val *RemoteHostConnectorParams) *NullableRemoteHostConnectorParams {
	return &NullableRemoteHostConnectorParams{value: val, isSet: true}
}

func (v NullableRemoteHostConnectorParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteHostConnectorParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


