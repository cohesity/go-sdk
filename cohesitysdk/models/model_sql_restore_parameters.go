/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// SqlRestoreParameters Specifies the parameters specific the Application Server instance.
type SqlRestoreParameters struct {
	// Set this to true if tail logs are to be captured before the restore operation. This is only applicable if we are restoring the SQL database to its hosting Protection Source, and the database is not being renamed.
	CaptureTailLogs NullableBool `json:"captureTailLogs,omitempty"`
	// This field determines if Auto Sync enabled/disabled for SQL Multi-stage Restore task
	IsAutoSyncEnabled NullableBool `json:"isAutoSyncEnabled,omitempty"`
	// This field prevents \"change data capture\" settings from being reomved when a database or log backup is restored on another server and database is recovered.
	KeepCdc NullableBool `json:"keepCdc,omitempty"`
	// Set this to true if we want to restore the database and do not want to bring it online after restore.  This is only applicable if we are restoring the database back to its original location.
	KeepOffline NullableBool `json:"keepOffline,omitempty"`
	// Specifies optionally a new name for the restored database.
	NewDatabaseName NullableString `json:"newDatabaseName,omitempty"`
	// Specifies an instance name of the SQL Server that should be restored. SQL application has many instances. Each instance has a unique name. One of the instances that should be restored must be set in this field.
	NewInstanceName NullableString `json:"newInstanceName,omitempty"`
	// Specifies the time in the past to which the SQL database needs to be restored. This allows for granular recovery of SQL databases. If this is not set, the SQL database will be restored from the full/incremental snapshot.
	RestoreTimeSecs NullableInt64 `json:"restoreTimeSecs,omitempty"`
	// Specifies the directory where to put the database data files. Missing directory will be automatically created. This field must be set if restoring to a different target host.
	TargetDataFilesDirectory NullableString `json:"targetDataFilesDirectory,omitempty"`
	// Specifies the directory where to put the database log files. Missing directory will be automatically created. This field must be set if restoring to a different target host.
	TargetLogFilesDirectory NullableString `json:"targetLogFilesDirectory,omitempty"`
	// Specifies the secondary data filename pattern and corresponding directories of the DB. Secondary data files are optional and are user defined. The recommended file extension for secondary files is \".ndf\".  If this option is specified and the destination folders do not exist they will be automatically created.
	TargetSecondaryDataFilesDirectoryList []FilenamePatternToDirectory `json:"targetSecondaryDataFilesDirectoryList,omitempty"`
	// WithClause allows you to specify clauses to be used in native sql restore task.
	WithClause NullableString `json:"withClause,omitempty"`
}

// NewSqlRestoreParameters instantiates a new SqlRestoreParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSqlRestoreParameters() *SqlRestoreParameters {
	this := SqlRestoreParameters{}
	return &this
}

// NewSqlRestoreParametersWithDefaults instantiates a new SqlRestoreParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSqlRestoreParametersWithDefaults() *SqlRestoreParameters {
	this := SqlRestoreParameters{}
	return &this
}

// GetCaptureTailLogs returns the CaptureTailLogs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlRestoreParameters) GetCaptureTailLogs() bool {
	if o == nil || o.CaptureTailLogs.Get() == nil {
		var ret bool
		return ret
	}
	return *o.CaptureTailLogs.Get()
}

// GetCaptureTailLogsOk returns a tuple with the CaptureTailLogs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlRestoreParameters) GetCaptureTailLogsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CaptureTailLogs.Get(), o.CaptureTailLogs.IsSet()
}

// HasCaptureTailLogs returns a boolean if a field has been set.
func (o *SqlRestoreParameters) HasCaptureTailLogs() bool {
	if o != nil && o.CaptureTailLogs.IsSet() {
		return true
	}

	return false
}

// SetCaptureTailLogs gets a reference to the given NullableBool and assigns it to the CaptureTailLogs field.
func (o *SqlRestoreParameters) SetCaptureTailLogs(v bool) {
	o.CaptureTailLogs.Set(&v)
}
// SetCaptureTailLogsNil sets the value for CaptureTailLogs to be an explicit nil
func (o *SqlRestoreParameters) SetCaptureTailLogsNil() {
	o.CaptureTailLogs.Set(nil)
}

// UnsetCaptureTailLogs ensures that no value is present for CaptureTailLogs, not even an explicit nil
func (o *SqlRestoreParameters) UnsetCaptureTailLogs() {
	o.CaptureTailLogs.Unset()
}

// GetIsAutoSyncEnabled returns the IsAutoSyncEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlRestoreParameters) GetIsAutoSyncEnabled() bool {
	if o == nil || o.IsAutoSyncEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsAutoSyncEnabled.Get()
}

// GetIsAutoSyncEnabledOk returns a tuple with the IsAutoSyncEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlRestoreParameters) GetIsAutoSyncEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsAutoSyncEnabled.Get(), o.IsAutoSyncEnabled.IsSet()
}

// HasIsAutoSyncEnabled returns a boolean if a field has been set.
func (o *SqlRestoreParameters) HasIsAutoSyncEnabled() bool {
	if o != nil && o.IsAutoSyncEnabled.IsSet() {
		return true
	}

	return false
}

// SetIsAutoSyncEnabled gets a reference to the given NullableBool and assigns it to the IsAutoSyncEnabled field.
func (o *SqlRestoreParameters) SetIsAutoSyncEnabled(v bool) {
	o.IsAutoSyncEnabled.Set(&v)
}
// SetIsAutoSyncEnabledNil sets the value for IsAutoSyncEnabled to be an explicit nil
func (o *SqlRestoreParameters) SetIsAutoSyncEnabledNil() {
	o.IsAutoSyncEnabled.Set(nil)
}

// UnsetIsAutoSyncEnabled ensures that no value is present for IsAutoSyncEnabled, not even an explicit nil
func (o *SqlRestoreParameters) UnsetIsAutoSyncEnabled() {
	o.IsAutoSyncEnabled.Unset()
}

// GetKeepCdc returns the KeepCdc field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlRestoreParameters) GetKeepCdc() bool {
	if o == nil || o.KeepCdc.Get() == nil {
		var ret bool
		return ret
	}
	return *o.KeepCdc.Get()
}

// GetKeepCdcOk returns a tuple with the KeepCdc field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlRestoreParameters) GetKeepCdcOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.KeepCdc.Get(), o.KeepCdc.IsSet()
}

// HasKeepCdc returns a boolean if a field has been set.
func (o *SqlRestoreParameters) HasKeepCdc() bool {
	if o != nil && o.KeepCdc.IsSet() {
		return true
	}

	return false
}

// SetKeepCdc gets a reference to the given NullableBool and assigns it to the KeepCdc field.
func (o *SqlRestoreParameters) SetKeepCdc(v bool) {
	o.KeepCdc.Set(&v)
}
// SetKeepCdcNil sets the value for KeepCdc to be an explicit nil
func (o *SqlRestoreParameters) SetKeepCdcNil() {
	o.KeepCdc.Set(nil)
}

// UnsetKeepCdc ensures that no value is present for KeepCdc, not even an explicit nil
func (o *SqlRestoreParameters) UnsetKeepCdc() {
	o.KeepCdc.Unset()
}

// GetKeepOffline returns the KeepOffline field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlRestoreParameters) GetKeepOffline() bool {
	if o == nil || o.KeepOffline.Get() == nil {
		var ret bool
		return ret
	}
	return *o.KeepOffline.Get()
}

// GetKeepOfflineOk returns a tuple with the KeepOffline field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlRestoreParameters) GetKeepOfflineOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.KeepOffline.Get(), o.KeepOffline.IsSet()
}

// HasKeepOffline returns a boolean if a field has been set.
func (o *SqlRestoreParameters) HasKeepOffline() bool {
	if o != nil && o.KeepOffline.IsSet() {
		return true
	}

	return false
}

// SetKeepOffline gets a reference to the given NullableBool and assigns it to the KeepOffline field.
func (o *SqlRestoreParameters) SetKeepOffline(v bool) {
	o.KeepOffline.Set(&v)
}
// SetKeepOfflineNil sets the value for KeepOffline to be an explicit nil
func (o *SqlRestoreParameters) SetKeepOfflineNil() {
	o.KeepOffline.Set(nil)
}

// UnsetKeepOffline ensures that no value is present for KeepOffline, not even an explicit nil
func (o *SqlRestoreParameters) UnsetKeepOffline() {
	o.KeepOffline.Unset()
}

// GetNewDatabaseName returns the NewDatabaseName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlRestoreParameters) GetNewDatabaseName() string {
	if o == nil || o.NewDatabaseName.Get() == nil {
		var ret string
		return ret
	}
	return *o.NewDatabaseName.Get()
}

// GetNewDatabaseNameOk returns a tuple with the NewDatabaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlRestoreParameters) GetNewDatabaseNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NewDatabaseName.Get(), o.NewDatabaseName.IsSet()
}

// HasNewDatabaseName returns a boolean if a field has been set.
func (o *SqlRestoreParameters) HasNewDatabaseName() bool {
	if o != nil && o.NewDatabaseName.IsSet() {
		return true
	}

	return false
}

// SetNewDatabaseName gets a reference to the given NullableString and assigns it to the NewDatabaseName field.
func (o *SqlRestoreParameters) SetNewDatabaseName(v string) {
	o.NewDatabaseName.Set(&v)
}
// SetNewDatabaseNameNil sets the value for NewDatabaseName to be an explicit nil
func (o *SqlRestoreParameters) SetNewDatabaseNameNil() {
	o.NewDatabaseName.Set(nil)
}

// UnsetNewDatabaseName ensures that no value is present for NewDatabaseName, not even an explicit nil
func (o *SqlRestoreParameters) UnsetNewDatabaseName() {
	o.NewDatabaseName.Unset()
}

// GetNewInstanceName returns the NewInstanceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlRestoreParameters) GetNewInstanceName() string {
	if o == nil || o.NewInstanceName.Get() == nil {
		var ret string
		return ret
	}
	return *o.NewInstanceName.Get()
}

// GetNewInstanceNameOk returns a tuple with the NewInstanceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlRestoreParameters) GetNewInstanceNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NewInstanceName.Get(), o.NewInstanceName.IsSet()
}

// HasNewInstanceName returns a boolean if a field has been set.
func (o *SqlRestoreParameters) HasNewInstanceName() bool {
	if o != nil && o.NewInstanceName.IsSet() {
		return true
	}

	return false
}

// SetNewInstanceName gets a reference to the given NullableString and assigns it to the NewInstanceName field.
func (o *SqlRestoreParameters) SetNewInstanceName(v string) {
	o.NewInstanceName.Set(&v)
}
// SetNewInstanceNameNil sets the value for NewInstanceName to be an explicit nil
func (o *SqlRestoreParameters) SetNewInstanceNameNil() {
	o.NewInstanceName.Set(nil)
}

// UnsetNewInstanceName ensures that no value is present for NewInstanceName, not even an explicit nil
func (o *SqlRestoreParameters) UnsetNewInstanceName() {
	o.NewInstanceName.Unset()
}

// GetRestoreTimeSecs returns the RestoreTimeSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlRestoreParameters) GetRestoreTimeSecs() int64 {
	if o == nil || o.RestoreTimeSecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RestoreTimeSecs.Get()
}

// GetRestoreTimeSecsOk returns a tuple with the RestoreTimeSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlRestoreParameters) GetRestoreTimeSecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RestoreTimeSecs.Get(), o.RestoreTimeSecs.IsSet()
}

// HasRestoreTimeSecs returns a boolean if a field has been set.
func (o *SqlRestoreParameters) HasRestoreTimeSecs() bool {
	if o != nil && o.RestoreTimeSecs.IsSet() {
		return true
	}

	return false
}

// SetRestoreTimeSecs gets a reference to the given NullableInt64 and assigns it to the RestoreTimeSecs field.
func (o *SqlRestoreParameters) SetRestoreTimeSecs(v int64) {
	o.RestoreTimeSecs.Set(&v)
}
// SetRestoreTimeSecsNil sets the value for RestoreTimeSecs to be an explicit nil
func (o *SqlRestoreParameters) SetRestoreTimeSecsNil() {
	o.RestoreTimeSecs.Set(nil)
}

// UnsetRestoreTimeSecs ensures that no value is present for RestoreTimeSecs, not even an explicit nil
func (o *SqlRestoreParameters) UnsetRestoreTimeSecs() {
	o.RestoreTimeSecs.Unset()
}

// GetTargetDataFilesDirectory returns the TargetDataFilesDirectory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlRestoreParameters) GetTargetDataFilesDirectory() string {
	if o == nil || o.TargetDataFilesDirectory.Get() == nil {
		var ret string
		return ret
	}
	return *o.TargetDataFilesDirectory.Get()
}

// GetTargetDataFilesDirectoryOk returns a tuple with the TargetDataFilesDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlRestoreParameters) GetTargetDataFilesDirectoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetDataFilesDirectory.Get(), o.TargetDataFilesDirectory.IsSet()
}

// HasTargetDataFilesDirectory returns a boolean if a field has been set.
func (o *SqlRestoreParameters) HasTargetDataFilesDirectory() bool {
	if o != nil && o.TargetDataFilesDirectory.IsSet() {
		return true
	}

	return false
}

// SetTargetDataFilesDirectory gets a reference to the given NullableString and assigns it to the TargetDataFilesDirectory field.
func (o *SqlRestoreParameters) SetTargetDataFilesDirectory(v string) {
	o.TargetDataFilesDirectory.Set(&v)
}
// SetTargetDataFilesDirectoryNil sets the value for TargetDataFilesDirectory to be an explicit nil
func (o *SqlRestoreParameters) SetTargetDataFilesDirectoryNil() {
	o.TargetDataFilesDirectory.Set(nil)
}

// UnsetTargetDataFilesDirectory ensures that no value is present for TargetDataFilesDirectory, not even an explicit nil
func (o *SqlRestoreParameters) UnsetTargetDataFilesDirectory() {
	o.TargetDataFilesDirectory.Unset()
}

// GetTargetLogFilesDirectory returns the TargetLogFilesDirectory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlRestoreParameters) GetTargetLogFilesDirectory() string {
	if o == nil || o.TargetLogFilesDirectory.Get() == nil {
		var ret string
		return ret
	}
	return *o.TargetLogFilesDirectory.Get()
}

// GetTargetLogFilesDirectoryOk returns a tuple with the TargetLogFilesDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlRestoreParameters) GetTargetLogFilesDirectoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetLogFilesDirectory.Get(), o.TargetLogFilesDirectory.IsSet()
}

// HasTargetLogFilesDirectory returns a boolean if a field has been set.
func (o *SqlRestoreParameters) HasTargetLogFilesDirectory() bool {
	if o != nil && o.TargetLogFilesDirectory.IsSet() {
		return true
	}

	return false
}

// SetTargetLogFilesDirectory gets a reference to the given NullableString and assigns it to the TargetLogFilesDirectory field.
func (o *SqlRestoreParameters) SetTargetLogFilesDirectory(v string) {
	o.TargetLogFilesDirectory.Set(&v)
}
// SetTargetLogFilesDirectoryNil sets the value for TargetLogFilesDirectory to be an explicit nil
func (o *SqlRestoreParameters) SetTargetLogFilesDirectoryNil() {
	o.TargetLogFilesDirectory.Set(nil)
}

// UnsetTargetLogFilesDirectory ensures that no value is present for TargetLogFilesDirectory, not even an explicit nil
func (o *SqlRestoreParameters) UnsetTargetLogFilesDirectory() {
	o.TargetLogFilesDirectory.Unset()
}

// GetTargetSecondaryDataFilesDirectoryList returns the TargetSecondaryDataFilesDirectoryList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlRestoreParameters) GetTargetSecondaryDataFilesDirectoryList() []FilenamePatternToDirectory {
	if o == nil  {
		var ret []FilenamePatternToDirectory
		return ret
	}
	return o.TargetSecondaryDataFilesDirectoryList
}

// GetTargetSecondaryDataFilesDirectoryListOk returns a tuple with the TargetSecondaryDataFilesDirectoryList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlRestoreParameters) GetTargetSecondaryDataFilesDirectoryListOk() (*[]FilenamePatternToDirectory, bool) {
	if o == nil || o.TargetSecondaryDataFilesDirectoryList == nil {
		return nil, false
	}
	return &o.TargetSecondaryDataFilesDirectoryList, true
}

// HasTargetSecondaryDataFilesDirectoryList returns a boolean if a field has been set.
func (o *SqlRestoreParameters) HasTargetSecondaryDataFilesDirectoryList() bool {
	if o != nil && o.TargetSecondaryDataFilesDirectoryList != nil {
		return true
	}

	return false
}

// SetTargetSecondaryDataFilesDirectoryList gets a reference to the given []FilenamePatternToDirectory and assigns it to the TargetSecondaryDataFilesDirectoryList field.
func (o *SqlRestoreParameters) SetTargetSecondaryDataFilesDirectoryList(v []FilenamePatternToDirectory) {
	o.TargetSecondaryDataFilesDirectoryList = v
}

// GetWithClause returns the WithClause field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlRestoreParameters) GetWithClause() string {
	if o == nil || o.WithClause.Get() == nil {
		var ret string
		return ret
	}
	return *o.WithClause.Get()
}

// GetWithClauseOk returns a tuple with the WithClause field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlRestoreParameters) GetWithClauseOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.WithClause.Get(), o.WithClause.IsSet()
}

// HasWithClause returns a boolean if a field has been set.
func (o *SqlRestoreParameters) HasWithClause() bool {
	if o != nil && o.WithClause.IsSet() {
		return true
	}

	return false
}

// SetWithClause gets a reference to the given NullableString and assigns it to the WithClause field.
func (o *SqlRestoreParameters) SetWithClause(v string) {
	o.WithClause.Set(&v)
}
// SetWithClauseNil sets the value for WithClause to be an explicit nil
func (o *SqlRestoreParameters) SetWithClauseNil() {
	o.WithClause.Set(nil)
}

// UnsetWithClause ensures that no value is present for WithClause, not even an explicit nil
func (o *SqlRestoreParameters) UnsetWithClause() {
	o.WithClause.Unset()
}

func (o SqlRestoreParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CaptureTailLogs.IsSet() {
		toSerialize["captureTailLogs"] = o.CaptureTailLogs.Get()
	}
	if o.IsAutoSyncEnabled.IsSet() {
		toSerialize["isAutoSyncEnabled"] = o.IsAutoSyncEnabled.Get()
	}
	if o.KeepCdc.IsSet() {
		toSerialize["keepCdc"] = o.KeepCdc.Get()
	}
	if o.KeepOffline.IsSet() {
		toSerialize["keepOffline"] = o.KeepOffline.Get()
	}
	if o.NewDatabaseName.IsSet() {
		toSerialize["newDatabaseName"] = o.NewDatabaseName.Get()
	}
	if o.NewInstanceName.IsSet() {
		toSerialize["newInstanceName"] = o.NewInstanceName.Get()
	}
	if o.RestoreTimeSecs.IsSet() {
		toSerialize["restoreTimeSecs"] = o.RestoreTimeSecs.Get()
	}
	if o.TargetDataFilesDirectory.IsSet() {
		toSerialize["targetDataFilesDirectory"] = o.TargetDataFilesDirectory.Get()
	}
	if o.TargetLogFilesDirectory.IsSet() {
		toSerialize["targetLogFilesDirectory"] = o.TargetLogFilesDirectory.Get()
	}
	if o.TargetSecondaryDataFilesDirectoryList != nil {
		toSerialize["targetSecondaryDataFilesDirectoryList"] = o.TargetSecondaryDataFilesDirectoryList
	}
	if o.WithClause.IsSet() {
		toSerialize["withClause"] = o.WithClause.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSqlRestoreParameters struct {
	value *SqlRestoreParameters
	isSet bool
}

func (v NullableSqlRestoreParameters) Get() *SqlRestoreParameters {
	return v.value
}

func (v *NullableSqlRestoreParameters) Set(val *SqlRestoreParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlRestoreParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlRestoreParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlRestoreParameters(val *SqlRestoreParameters) *NullableSqlRestoreParameters {
	return &NullableSqlRestoreParameters{value: val, isSet: true}
}

func (v NullableSqlRestoreParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSqlRestoreParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


