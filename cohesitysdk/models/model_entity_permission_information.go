/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// EntityPermissionInformation Specifies the permission information of entities.
type EntityPermissionInformation struct {
	// Specifies the entity id.
	EntityId NullableInt64 `json:"entityId,omitempty"`
	// Specifies groups that have access to entity in case of restricted user.
	Groups []GroupInfo `json:"groups,omitempty"`
	// Specifies whether the Entity Permission Information is inferred or not. For example, SQL application hosted over vCenter will have inferred entity permission information.
	IsInferred NullableBool `json:"isInferred,omitempty"`
	Tenant *TenantInfo `json:"tenant,omitempty"`
	// Specifies users that have access to entity in case of restricted user.
	Users []UserInfo `json:"users,omitempty"`
}

// NewEntityPermissionInformation instantiates a new EntityPermissionInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityPermissionInformation() *EntityPermissionInformation {
	this := EntityPermissionInformation{}
	return &this
}

// NewEntityPermissionInformationWithDefaults instantiates a new EntityPermissionInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityPermissionInformationWithDefaults() *EntityPermissionInformation {
	this := EntityPermissionInformation{}
	return &this
}

// GetEntityId returns the EntityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EntityPermissionInformation) GetEntityId() int64 {
	if o == nil || o.EntityId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.EntityId.Get()
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EntityPermissionInformation) GetEntityIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EntityId.Get(), o.EntityId.IsSet()
}

// HasEntityId returns a boolean if a field has been set.
func (o *EntityPermissionInformation) HasEntityId() bool {
	if o != nil && o.EntityId.IsSet() {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given NullableInt64 and assigns it to the EntityId field.
func (o *EntityPermissionInformation) SetEntityId(v int64) {
	o.EntityId.Set(&v)
}
// SetEntityIdNil sets the value for EntityId to be an explicit nil
func (o *EntityPermissionInformation) SetEntityIdNil() {
	o.EntityId.Set(nil)
}

// UnsetEntityId ensures that no value is present for EntityId, not even an explicit nil
func (o *EntityPermissionInformation) UnsetEntityId() {
	o.EntityId.Unset()
}

// GetGroups returns the Groups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EntityPermissionInformation) GetGroups() []GroupInfo {
	if o == nil  {
		var ret []GroupInfo
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EntityPermissionInformation) GetGroupsOk() (*[]GroupInfo, bool) {
	if o == nil || o.Groups == nil {
		return nil, false
	}
	return &o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *EntityPermissionInformation) HasGroups() bool {
	if o != nil && o.Groups != nil {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []GroupInfo and assigns it to the Groups field.
func (o *EntityPermissionInformation) SetGroups(v []GroupInfo) {
	o.Groups = v
}

// GetIsInferred returns the IsInferred field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EntityPermissionInformation) GetIsInferred() bool {
	if o == nil || o.IsInferred.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsInferred.Get()
}

// GetIsInferredOk returns a tuple with the IsInferred field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EntityPermissionInformation) GetIsInferredOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsInferred.Get(), o.IsInferred.IsSet()
}

// HasIsInferred returns a boolean if a field has been set.
func (o *EntityPermissionInformation) HasIsInferred() bool {
	if o != nil && o.IsInferred.IsSet() {
		return true
	}

	return false
}

// SetIsInferred gets a reference to the given NullableBool and assigns it to the IsInferred field.
func (o *EntityPermissionInformation) SetIsInferred(v bool) {
	o.IsInferred.Set(&v)
}
// SetIsInferredNil sets the value for IsInferred to be an explicit nil
func (o *EntityPermissionInformation) SetIsInferredNil() {
	o.IsInferred.Set(nil)
}

// UnsetIsInferred ensures that no value is present for IsInferred, not even an explicit nil
func (o *EntityPermissionInformation) UnsetIsInferred() {
	o.IsInferred.Unset()
}

// GetTenant returns the Tenant field value if set, zero value otherwise.
func (o *EntityPermissionInformation) GetTenant() TenantInfo {
	if o == nil || o.Tenant == nil {
		var ret TenantInfo
		return ret
	}
	return *o.Tenant
}

// GetTenantOk returns a tuple with the Tenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityPermissionInformation) GetTenantOk() (*TenantInfo, bool) {
	if o == nil || o.Tenant == nil {
		return nil, false
	}
	return o.Tenant, true
}

// HasTenant returns a boolean if a field has been set.
func (o *EntityPermissionInformation) HasTenant() bool {
	if o != nil && o.Tenant != nil {
		return true
	}

	return false
}

// SetTenant gets a reference to the given TenantInfo and assigns it to the Tenant field.
func (o *EntityPermissionInformation) SetTenant(v TenantInfo) {
	o.Tenant = &v
}

// GetUsers returns the Users field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EntityPermissionInformation) GetUsers() []UserInfo {
	if o == nil  {
		var ret []UserInfo
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EntityPermissionInformation) GetUsersOk() (*[]UserInfo, bool) {
	if o == nil || o.Users == nil {
		return nil, false
	}
	return &o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *EntityPermissionInformation) HasUsers() bool {
	if o != nil && o.Users != nil {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []UserInfo and assigns it to the Users field.
func (o *EntityPermissionInformation) SetUsers(v []UserInfo) {
	o.Users = v
}

func (o EntityPermissionInformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EntityId.IsSet() {
		toSerialize["entityId"] = o.EntityId.Get()
	}
	if o.Groups != nil {
		toSerialize["groups"] = o.Groups
	}
	if o.IsInferred.IsSet() {
		toSerialize["isInferred"] = o.IsInferred.Get()
	}
	if o.Tenant != nil {
		toSerialize["tenant"] = o.Tenant
	}
	if o.Users != nil {
		toSerialize["users"] = o.Users
	}
	return json.Marshal(toSerialize)
}

type NullableEntityPermissionInformation struct {
	value *EntityPermissionInformation
	isSet bool
}

func (v NullableEntityPermissionInformation) Get() *EntityPermissionInformation {
	return v.value
}

func (v *NullableEntityPermissionInformation) Set(val *EntityPermissionInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityPermissionInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityPermissionInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityPermissionInformation(val *EntityPermissionInformation) *NullableEntityPermissionInformation {
	return &NullableEntityPermissionInformation{value: val, isSet: true}
}

func (v NullableEntityPermissionInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityPermissionInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


