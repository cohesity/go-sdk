/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// VmNameInfo Struct containing vm-name and ui-name (to be displayed on the UI to get number of replicas as input) as members.
type VmNameInfo struct {
	// UI-name. To be displayed on the UI.
	UiName NullableString `json:"uiName,omitempty"`
	// Vm-name.
	VmName NullableString `json:"vmName,omitempty"`
}

// NewVmNameInfo instantiates a new VmNameInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmNameInfo() *VmNameInfo {
	this := VmNameInfo{}
	return &this
}

// NewVmNameInfoWithDefaults instantiates a new VmNameInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmNameInfoWithDefaults() *VmNameInfo {
	this := VmNameInfo{}
	return &this
}

// GetUiName returns the UiName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmNameInfo) GetUiName() string {
	if o == nil || o.UiName.Get() == nil {
		var ret string
		return ret
	}
	return *o.UiName.Get()
}

// GetUiNameOk returns a tuple with the UiName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmNameInfo) GetUiNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UiName.Get(), o.UiName.IsSet()
}

// HasUiName returns a boolean if a field has been set.
func (o *VmNameInfo) HasUiName() bool {
	if o != nil && o.UiName.IsSet() {
		return true
	}

	return false
}

// SetUiName gets a reference to the given NullableString and assigns it to the UiName field.
func (o *VmNameInfo) SetUiName(v string) {
	o.UiName.Set(&v)
}
// SetUiNameNil sets the value for UiName to be an explicit nil
func (o *VmNameInfo) SetUiNameNil() {
	o.UiName.Set(nil)
}

// UnsetUiName ensures that no value is present for UiName, not even an explicit nil
func (o *VmNameInfo) UnsetUiName() {
	o.UiName.Unset()
}

// GetVmName returns the VmName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmNameInfo) GetVmName() string {
	if o == nil || o.VmName.Get() == nil {
		var ret string
		return ret
	}
	return *o.VmName.Get()
}

// GetVmNameOk returns a tuple with the VmName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmNameInfo) GetVmNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VmName.Get(), o.VmName.IsSet()
}

// HasVmName returns a boolean if a field has been set.
func (o *VmNameInfo) HasVmName() bool {
	if o != nil && o.VmName.IsSet() {
		return true
	}

	return false
}

// SetVmName gets a reference to the given NullableString and assigns it to the VmName field.
func (o *VmNameInfo) SetVmName(v string) {
	o.VmName.Set(&v)
}
// SetVmNameNil sets the value for VmName to be an explicit nil
func (o *VmNameInfo) SetVmNameNil() {
	o.VmName.Set(nil)
}

// UnsetVmName ensures that no value is present for VmName, not even an explicit nil
func (o *VmNameInfo) UnsetVmName() {
	o.VmName.Unset()
}

func (o VmNameInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UiName.IsSet() {
		toSerialize["uiName"] = o.UiName.Get()
	}
	if o.VmName.IsSet() {
		toSerialize["vmName"] = o.VmName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableVmNameInfo struct {
	value *VmNameInfo
	isSet bool
}

func (v NullableVmNameInfo) Get() *VmNameInfo {
	return v.value
}

func (v *NullableVmNameInfo) Set(val *VmNameInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVmNameInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVmNameInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmNameInfo(val *VmNameInfo) *NullableVmNameInfo {
	return &NullableVmNameInfo{value: val, isSet: true}
}

func (v NullableVmNameInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmNameInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


