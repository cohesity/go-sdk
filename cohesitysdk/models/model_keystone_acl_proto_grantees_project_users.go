/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// KeystoneACLProtoGranteesProjectUsers struct for KeystoneACLProtoGranteesProjectUsers
type KeystoneACLProtoGranteesProjectUsers struct {
	UserIdVec []string `json:"userIdVec,omitempty"`
}

// NewKeystoneACLProtoGranteesProjectUsers instantiates a new KeystoneACLProtoGranteesProjectUsers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeystoneACLProtoGranteesProjectUsers() *KeystoneACLProtoGranteesProjectUsers {
	this := KeystoneACLProtoGranteesProjectUsers{}
	return &this
}

// NewKeystoneACLProtoGranteesProjectUsersWithDefaults instantiates a new KeystoneACLProtoGranteesProjectUsers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeystoneACLProtoGranteesProjectUsersWithDefaults() *KeystoneACLProtoGranteesProjectUsers {
	this := KeystoneACLProtoGranteesProjectUsers{}
	return &this
}

// GetUserIdVec returns the UserIdVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeystoneACLProtoGranteesProjectUsers) GetUserIdVec() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.UserIdVec
}

// GetUserIdVecOk returns a tuple with the UserIdVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeystoneACLProtoGranteesProjectUsers) GetUserIdVecOk() (*[]string, bool) {
	if o == nil || o.UserIdVec == nil {
		return nil, false
	}
	return &o.UserIdVec, true
}

// HasUserIdVec returns a boolean if a field has been set.
func (o *KeystoneACLProtoGranteesProjectUsers) HasUserIdVec() bool {
	if o != nil && o.UserIdVec != nil {
		return true
	}

	return false
}

// SetUserIdVec gets a reference to the given []string and assigns it to the UserIdVec field.
func (o *KeystoneACLProtoGranteesProjectUsers) SetUserIdVec(v []string) {
	o.UserIdVec = v
}

func (o KeystoneACLProtoGranteesProjectUsers) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UserIdVec != nil {
		toSerialize["userIdVec"] = o.UserIdVec
	}
	return json.Marshal(toSerialize)
}

type NullableKeystoneACLProtoGranteesProjectUsers struct {
	value *KeystoneACLProtoGranteesProjectUsers
	isSet bool
}

func (v NullableKeystoneACLProtoGranteesProjectUsers) Get() *KeystoneACLProtoGranteesProjectUsers {
	return v.value
}

func (v *NullableKeystoneACLProtoGranteesProjectUsers) Set(val *KeystoneACLProtoGranteesProjectUsers) {
	v.value = val
	v.isSet = true
}

func (v NullableKeystoneACLProtoGranteesProjectUsers) IsSet() bool {
	return v.isSet
}

func (v *NullableKeystoneACLProtoGranteesProjectUsers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeystoneACLProtoGranteesProjectUsers(val *KeystoneACLProtoGranteesProjectUsers) *NullableKeystoneACLProtoGranteesProjectUsers {
	return &NullableKeystoneACLProtoGranteesProjectUsers{value: val, isSet: true}
}

func (v NullableKeystoneACLProtoGranteesProjectUsers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeystoneACLProtoGranteesProjectUsers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


