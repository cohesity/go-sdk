/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// CompareADObjectsResultADAttributeValue struct for CompareADObjectsResultADAttributeValue
type CompareADObjectsResultADAttributeValue struct {
	// Object result flags of type ADAttributeValueFlags.
	ValueFlags NullableInt32 `json:"valueFlags,omitempty"`
	// String representation of attribute value. For single valued property, only one value will be present here. For multi-valued properties such as group membership, this field will contain values that are in same order as contained in AD. Each AD attribute value will be converted to string. If this property is not set, then the property has null value.
	ValueVec []string `json:"valueVec,omitempty"`
}

// NewCompareADObjectsResultADAttributeValue instantiates a new CompareADObjectsResultADAttributeValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompareADObjectsResultADAttributeValue() *CompareADObjectsResultADAttributeValue {
	this := CompareADObjectsResultADAttributeValue{}
	return &this
}

// NewCompareADObjectsResultADAttributeValueWithDefaults instantiates a new CompareADObjectsResultADAttributeValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompareADObjectsResultADAttributeValueWithDefaults() *CompareADObjectsResultADAttributeValue {
	this := CompareADObjectsResultADAttributeValue{}
	return &this
}

// GetValueFlags returns the ValueFlags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompareADObjectsResultADAttributeValue) GetValueFlags() int32 {
	if o == nil || o.ValueFlags.Get() == nil {
		var ret int32
		return ret
	}
	return *o.ValueFlags.Get()
}

// GetValueFlagsOk returns a tuple with the ValueFlags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompareADObjectsResultADAttributeValue) GetValueFlagsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ValueFlags.Get(), o.ValueFlags.IsSet()
}

// HasValueFlags returns a boolean if a field has been set.
func (o *CompareADObjectsResultADAttributeValue) HasValueFlags() bool {
	if o != nil && o.ValueFlags.IsSet() {
		return true
	}

	return false
}

// SetValueFlags gets a reference to the given NullableInt32 and assigns it to the ValueFlags field.
func (o *CompareADObjectsResultADAttributeValue) SetValueFlags(v int32) {
	o.ValueFlags.Set(&v)
}
// SetValueFlagsNil sets the value for ValueFlags to be an explicit nil
func (o *CompareADObjectsResultADAttributeValue) SetValueFlagsNil() {
	o.ValueFlags.Set(nil)
}

// UnsetValueFlags ensures that no value is present for ValueFlags, not even an explicit nil
func (o *CompareADObjectsResultADAttributeValue) UnsetValueFlags() {
	o.ValueFlags.Unset()
}

// GetValueVec returns the ValueVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompareADObjectsResultADAttributeValue) GetValueVec() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.ValueVec
}

// GetValueVecOk returns a tuple with the ValueVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompareADObjectsResultADAttributeValue) GetValueVecOk() (*[]string, bool) {
	if o == nil || o.ValueVec == nil {
		return nil, false
	}
	return &o.ValueVec, true
}

// HasValueVec returns a boolean if a field has been set.
func (o *CompareADObjectsResultADAttributeValue) HasValueVec() bool {
	if o != nil && o.ValueVec != nil {
		return true
	}

	return false
}

// SetValueVec gets a reference to the given []string and assigns it to the ValueVec field.
func (o *CompareADObjectsResultADAttributeValue) SetValueVec(v []string) {
	o.ValueVec = v
}

func (o CompareADObjectsResultADAttributeValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ValueFlags.IsSet() {
		toSerialize["valueFlags"] = o.ValueFlags.Get()
	}
	if o.ValueVec != nil {
		toSerialize["valueVec"] = o.ValueVec
	}
	return json.Marshal(toSerialize)
}

type NullableCompareADObjectsResultADAttributeValue struct {
	value *CompareADObjectsResultADAttributeValue
	isSet bool
}

func (v NullableCompareADObjectsResultADAttributeValue) Get() *CompareADObjectsResultADAttributeValue {
	return v.value
}

func (v *NullableCompareADObjectsResultADAttributeValue) Set(val *CompareADObjectsResultADAttributeValue) {
	v.value = val
	v.isSet = true
}

func (v NullableCompareADObjectsResultADAttributeValue) IsSet() bool {
	return v.isSet
}

func (v *NullableCompareADObjectsResultADAttributeValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompareADObjectsResultADAttributeValue(val *CompareADObjectsResultADAttributeValue) *NullableCompareADObjectsResultADAttributeValue {
	return &NullableCompareADObjectsResultADAttributeValue{value: val, isSet: true}
}

func (v NullableCompareADObjectsResultADAttributeValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompareADObjectsResultADAttributeValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


