/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// AwsParams Specifies various resources when converting and deploying a VM to AWS.
type AwsParams struct {
	// Specifies id of the AWS instance type in which to deploy the VM.
	InstanceId NullableInt64 `json:"instanceId,omitempty"`
	// Specifies ids of the network security groups within above VPC.
	NetworkSecurityGroupIds []int64 `json:"networkSecurityGroupIds,omitempty"`
	RdsParams *RdsParams `json:"rdsParams,omitempty"`
	// Specifies id of the AWS region in which to deploy the VM.
	Region NullableInt64 `json:"region,omitempty"`
	// Specifies id of the subnet within above VPC.
	SubnetId NullableInt64 `json:"subnetId,omitempty"`
	// Specifies id of the Virtual Private Cloud to chose for the instance type.
	VirtualPrivateCloudId NullableInt64 `json:"virtualPrivateCloudId,omitempty"`
}

// NewAwsParams instantiates a new AwsParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsParams() *AwsParams {
	this := AwsParams{}
	return &this
}

// NewAwsParamsWithDefaults instantiates a new AwsParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsParamsWithDefaults() *AwsParams {
	this := AwsParams{}
	return &this
}

// GetInstanceId returns the InstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsParams) GetInstanceId() int64 {
	if o == nil || o.InstanceId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.InstanceId.Get()
}

// GetInstanceIdOk returns a tuple with the InstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsParams) GetInstanceIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InstanceId.Get(), o.InstanceId.IsSet()
}

// HasInstanceId returns a boolean if a field has been set.
func (o *AwsParams) HasInstanceId() bool {
	if o != nil && o.InstanceId.IsSet() {
		return true
	}

	return false
}

// SetInstanceId gets a reference to the given NullableInt64 and assigns it to the InstanceId field.
func (o *AwsParams) SetInstanceId(v int64) {
	o.InstanceId.Set(&v)
}
// SetInstanceIdNil sets the value for InstanceId to be an explicit nil
func (o *AwsParams) SetInstanceIdNil() {
	o.InstanceId.Set(nil)
}

// UnsetInstanceId ensures that no value is present for InstanceId, not even an explicit nil
func (o *AwsParams) UnsetInstanceId() {
	o.InstanceId.Unset()
}

// GetNetworkSecurityGroupIds returns the NetworkSecurityGroupIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsParams) GetNetworkSecurityGroupIds() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.NetworkSecurityGroupIds
}

// GetNetworkSecurityGroupIdsOk returns a tuple with the NetworkSecurityGroupIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsParams) GetNetworkSecurityGroupIdsOk() (*[]int64, bool) {
	if o == nil || o.NetworkSecurityGroupIds == nil {
		return nil, false
	}
	return &o.NetworkSecurityGroupIds, true
}

// HasNetworkSecurityGroupIds returns a boolean if a field has been set.
func (o *AwsParams) HasNetworkSecurityGroupIds() bool {
	if o != nil && o.NetworkSecurityGroupIds != nil {
		return true
	}

	return false
}

// SetNetworkSecurityGroupIds gets a reference to the given []int64 and assigns it to the NetworkSecurityGroupIds field.
func (o *AwsParams) SetNetworkSecurityGroupIds(v []int64) {
	o.NetworkSecurityGroupIds = v
}

// GetRdsParams returns the RdsParams field value if set, zero value otherwise.
func (o *AwsParams) GetRdsParams() RdsParams {
	if o == nil || o.RdsParams == nil {
		var ret RdsParams
		return ret
	}
	return *o.RdsParams
}

// GetRdsParamsOk returns a tuple with the RdsParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsParams) GetRdsParamsOk() (*RdsParams, bool) {
	if o == nil || o.RdsParams == nil {
		return nil, false
	}
	return o.RdsParams, true
}

// HasRdsParams returns a boolean if a field has been set.
func (o *AwsParams) HasRdsParams() bool {
	if o != nil && o.RdsParams != nil {
		return true
	}

	return false
}

// SetRdsParams gets a reference to the given RdsParams and assigns it to the RdsParams field.
func (o *AwsParams) SetRdsParams(v RdsParams) {
	o.RdsParams = &v
}

// GetRegion returns the Region field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsParams) GetRegion() int64 {
	if o == nil || o.Region.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Region.Get()
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsParams) GetRegionOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Region.Get(), o.Region.IsSet()
}

// HasRegion returns a boolean if a field has been set.
func (o *AwsParams) HasRegion() bool {
	if o != nil && o.Region.IsSet() {
		return true
	}

	return false
}

// SetRegion gets a reference to the given NullableInt64 and assigns it to the Region field.
func (o *AwsParams) SetRegion(v int64) {
	o.Region.Set(&v)
}
// SetRegionNil sets the value for Region to be an explicit nil
func (o *AwsParams) SetRegionNil() {
	o.Region.Set(nil)
}

// UnsetRegion ensures that no value is present for Region, not even an explicit nil
func (o *AwsParams) UnsetRegion() {
	o.Region.Unset()
}

// GetSubnetId returns the SubnetId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsParams) GetSubnetId() int64 {
	if o == nil || o.SubnetId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SubnetId.Get()
}

// GetSubnetIdOk returns a tuple with the SubnetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsParams) GetSubnetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SubnetId.Get(), o.SubnetId.IsSet()
}

// HasSubnetId returns a boolean if a field has been set.
func (o *AwsParams) HasSubnetId() bool {
	if o != nil && o.SubnetId.IsSet() {
		return true
	}

	return false
}

// SetSubnetId gets a reference to the given NullableInt64 and assigns it to the SubnetId field.
func (o *AwsParams) SetSubnetId(v int64) {
	o.SubnetId.Set(&v)
}
// SetSubnetIdNil sets the value for SubnetId to be an explicit nil
func (o *AwsParams) SetSubnetIdNil() {
	o.SubnetId.Set(nil)
}

// UnsetSubnetId ensures that no value is present for SubnetId, not even an explicit nil
func (o *AwsParams) UnsetSubnetId() {
	o.SubnetId.Unset()
}

// GetVirtualPrivateCloudId returns the VirtualPrivateCloudId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsParams) GetVirtualPrivateCloudId() int64 {
	if o == nil || o.VirtualPrivateCloudId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.VirtualPrivateCloudId.Get()
}

// GetVirtualPrivateCloudIdOk returns a tuple with the VirtualPrivateCloudId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsParams) GetVirtualPrivateCloudIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VirtualPrivateCloudId.Get(), o.VirtualPrivateCloudId.IsSet()
}

// HasVirtualPrivateCloudId returns a boolean if a field has been set.
func (o *AwsParams) HasVirtualPrivateCloudId() bool {
	if o != nil && o.VirtualPrivateCloudId.IsSet() {
		return true
	}

	return false
}

// SetVirtualPrivateCloudId gets a reference to the given NullableInt64 and assigns it to the VirtualPrivateCloudId field.
func (o *AwsParams) SetVirtualPrivateCloudId(v int64) {
	o.VirtualPrivateCloudId.Set(&v)
}
// SetVirtualPrivateCloudIdNil sets the value for VirtualPrivateCloudId to be an explicit nil
func (o *AwsParams) SetVirtualPrivateCloudIdNil() {
	o.VirtualPrivateCloudId.Set(nil)
}

// UnsetVirtualPrivateCloudId ensures that no value is present for VirtualPrivateCloudId, not even an explicit nil
func (o *AwsParams) UnsetVirtualPrivateCloudId() {
	o.VirtualPrivateCloudId.Unset()
}

func (o AwsParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.InstanceId.IsSet() {
		toSerialize["instanceId"] = o.InstanceId.Get()
	}
	if o.NetworkSecurityGroupIds != nil {
		toSerialize["networkSecurityGroupIds"] = o.NetworkSecurityGroupIds
	}
	if o.RdsParams != nil {
		toSerialize["rdsParams"] = o.RdsParams
	}
	if o.Region.IsSet() {
		toSerialize["region"] = o.Region.Get()
	}
	if o.SubnetId.IsSet() {
		toSerialize["subnetId"] = o.SubnetId.Get()
	}
	if o.VirtualPrivateCloudId.IsSet() {
		toSerialize["virtualPrivateCloudId"] = o.VirtualPrivateCloudId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAwsParams struct {
	value *AwsParams
	isSet bool
}

func (v NullableAwsParams) Get() *AwsParams {
	return v.value
}

func (v *NullableAwsParams) Set(val *AwsParams) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsParams) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsParams(val *AwsParams) *NullableAwsParams {
	return &NullableAwsParams{value: val, isSet: true}
}

func (v NullableAwsParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


