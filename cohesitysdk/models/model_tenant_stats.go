/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// TenantStats struct for TenantStats
type TenantStats struct {
	// Specifies a list of groups associated to this tenant (organization).
	GroupList []StatsGroup `json:"groupList,omitempty"`
	// Specifies the id of the tenant (organization).
	Id NullableString `json:"id,omitempty"`
	// Specifies the name of the tenant (organization).
	Name NullableString `json:"name,omitempty"`
	// Specifies a list of schemaInfos of the tenant (organization).
	SchemaInfoList []UsageSchemaInfo `json:"schemaInfoList,omitempty"`
	Stats *DataUsageStats `json:"stats,omitempty"`
}

// NewTenantStats instantiates a new TenantStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantStats() *TenantStats {
	this := TenantStats{}
	return &this
}

// NewTenantStatsWithDefaults instantiates a new TenantStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantStatsWithDefaults() *TenantStats {
	this := TenantStats{}
	return &this
}

// GetGroupList returns the GroupList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantStats) GetGroupList() []StatsGroup {
	if o == nil  {
		var ret []StatsGroup
		return ret
	}
	return o.GroupList
}

// GetGroupListOk returns a tuple with the GroupList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantStats) GetGroupListOk() (*[]StatsGroup, bool) {
	if o == nil || o.GroupList == nil {
		return nil, false
	}
	return &o.GroupList, true
}

// HasGroupList returns a boolean if a field has been set.
func (o *TenantStats) HasGroupList() bool {
	if o != nil && o.GroupList != nil {
		return true
	}

	return false
}

// SetGroupList gets a reference to the given []StatsGroup and assigns it to the GroupList field.
func (o *TenantStats) SetGroupList(v []StatsGroup) {
	o.GroupList = v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantStats) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantStats) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *TenantStats) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *TenantStats) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *TenantStats) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *TenantStats) UnsetId() {
	o.Id.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantStats) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantStats) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *TenantStats) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *TenantStats) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *TenantStats) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *TenantStats) UnsetName() {
	o.Name.Unset()
}

// GetSchemaInfoList returns the SchemaInfoList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantStats) GetSchemaInfoList() []UsageSchemaInfo {
	if o == nil  {
		var ret []UsageSchemaInfo
		return ret
	}
	return o.SchemaInfoList
}

// GetSchemaInfoListOk returns a tuple with the SchemaInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantStats) GetSchemaInfoListOk() (*[]UsageSchemaInfo, bool) {
	if o == nil || o.SchemaInfoList == nil {
		return nil, false
	}
	return &o.SchemaInfoList, true
}

// HasSchemaInfoList returns a boolean if a field has been set.
func (o *TenantStats) HasSchemaInfoList() bool {
	if o != nil && o.SchemaInfoList != nil {
		return true
	}

	return false
}

// SetSchemaInfoList gets a reference to the given []UsageSchemaInfo and assigns it to the SchemaInfoList field.
func (o *TenantStats) SetSchemaInfoList(v []UsageSchemaInfo) {
	o.SchemaInfoList = v
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *TenantStats) GetStats() DataUsageStats {
	if o == nil || o.Stats == nil {
		var ret DataUsageStats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantStats) GetStatsOk() (*DataUsageStats, bool) {
	if o == nil || o.Stats == nil {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *TenantStats) HasStats() bool {
	if o != nil && o.Stats != nil {
		return true
	}

	return false
}

// SetStats gets a reference to the given DataUsageStats and assigns it to the Stats field.
func (o *TenantStats) SetStats(v DataUsageStats) {
	o.Stats = &v
}

func (o TenantStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.GroupList != nil {
		toSerialize["groupList"] = o.GroupList
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.SchemaInfoList != nil {
		toSerialize["schemaInfoList"] = o.SchemaInfoList
	}
	if o.Stats != nil {
		toSerialize["stats"] = o.Stats
	}
	return json.Marshal(toSerialize)
}

type NullableTenantStats struct {
	value *TenantStats
	isSet bool
}

func (v NullableTenantStats) Get() *TenantStats {
	return v.value
}

func (v *NullableTenantStats) Set(val *TenantStats) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantStats) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantStats(val *TenantStats) *NullableTenantStats {
	return &NullableTenantStats{value: val, isSet: true}
}

func (v NullableTenantStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


