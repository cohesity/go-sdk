/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// StubbingPolicyProto Stubbing jobs do not use protection policies. Instead, schedule and retention policy will be embedded in the BackupJobProto.
type StubbingPolicyProto struct {
	RetentionPolicy *RetentionPolicyProto `json:"retentionPolicy,omitempty"`
	SchedulingPolicy *SchedulingPolicyProto `json:"schedulingPolicy,omitempty"`
}

// NewStubbingPolicyProto instantiates a new StubbingPolicyProto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStubbingPolicyProto() *StubbingPolicyProto {
	this := StubbingPolicyProto{}
	return &this
}

// NewStubbingPolicyProtoWithDefaults instantiates a new StubbingPolicyProto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStubbingPolicyProtoWithDefaults() *StubbingPolicyProto {
	this := StubbingPolicyProto{}
	return &this
}

// GetRetentionPolicy returns the RetentionPolicy field value if set, zero value otherwise.
func (o *StubbingPolicyProto) GetRetentionPolicy() RetentionPolicyProto {
	if o == nil || o.RetentionPolicy == nil {
		var ret RetentionPolicyProto
		return ret
	}
	return *o.RetentionPolicy
}

// GetRetentionPolicyOk returns a tuple with the RetentionPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StubbingPolicyProto) GetRetentionPolicyOk() (*RetentionPolicyProto, bool) {
	if o == nil || o.RetentionPolicy == nil {
		return nil, false
	}
	return o.RetentionPolicy, true
}

// HasRetentionPolicy returns a boolean if a field has been set.
func (o *StubbingPolicyProto) HasRetentionPolicy() bool {
	if o != nil && o.RetentionPolicy != nil {
		return true
	}

	return false
}

// SetRetentionPolicy gets a reference to the given RetentionPolicyProto and assigns it to the RetentionPolicy field.
func (o *StubbingPolicyProto) SetRetentionPolicy(v RetentionPolicyProto) {
	o.RetentionPolicy = &v
}

// GetSchedulingPolicy returns the SchedulingPolicy field value if set, zero value otherwise.
func (o *StubbingPolicyProto) GetSchedulingPolicy() SchedulingPolicyProto {
	if o == nil || o.SchedulingPolicy == nil {
		var ret SchedulingPolicyProto
		return ret
	}
	return *o.SchedulingPolicy
}

// GetSchedulingPolicyOk returns a tuple with the SchedulingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StubbingPolicyProto) GetSchedulingPolicyOk() (*SchedulingPolicyProto, bool) {
	if o == nil || o.SchedulingPolicy == nil {
		return nil, false
	}
	return o.SchedulingPolicy, true
}

// HasSchedulingPolicy returns a boolean if a field has been set.
func (o *StubbingPolicyProto) HasSchedulingPolicy() bool {
	if o != nil && o.SchedulingPolicy != nil {
		return true
	}

	return false
}

// SetSchedulingPolicy gets a reference to the given SchedulingPolicyProto and assigns it to the SchedulingPolicy field.
func (o *StubbingPolicyProto) SetSchedulingPolicy(v SchedulingPolicyProto) {
	o.SchedulingPolicy = &v
}

func (o StubbingPolicyProto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RetentionPolicy != nil {
		toSerialize["retentionPolicy"] = o.RetentionPolicy
	}
	if o.SchedulingPolicy != nil {
		toSerialize["schedulingPolicy"] = o.SchedulingPolicy
	}
	return json.Marshal(toSerialize)
}

type NullableStubbingPolicyProto struct {
	value *StubbingPolicyProto
	isSet bool
}

func (v NullableStubbingPolicyProto) Get() *StubbingPolicyProto {
	return v.value
}

func (v *NullableStubbingPolicyProto) Set(val *StubbingPolicyProto) {
	v.value = val
	v.isSet = true
}

func (v NullableStubbingPolicyProto) IsSet() bool {
	return v.isSet
}

func (v *NullableStubbingPolicyProto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStubbingPolicyProto(val *StubbingPolicyProto) *NullableStubbingPolicyProto {
	return &NullableStubbingPolicyProto{value: val, isSet: true}
}

func (v NullableStubbingPolicyProto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStubbingPolicyProto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


