/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// UpdateDirQuotaArgs Specifies the arguments for updating the directory quota policies. This structure can be used for adding, updating and removing the policies.
type UpdateDirQuotaArgs struct {
	// Specifies directory quota to be disabled on the view.
	DisableDirQuota NullableBool `json:"disableDirQuota,omitempty"`
	Quota *DirQuotaPolicy `json:"quota,omitempty"`
	// Specifies the name of the view.
	ViewName NullableString `json:"viewName,omitempty"`
}

// NewUpdateDirQuotaArgs instantiates a new UpdateDirQuotaArgs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDirQuotaArgs() *UpdateDirQuotaArgs {
	this := UpdateDirQuotaArgs{}
	return &this
}

// NewUpdateDirQuotaArgsWithDefaults instantiates a new UpdateDirQuotaArgs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDirQuotaArgsWithDefaults() *UpdateDirQuotaArgs {
	this := UpdateDirQuotaArgs{}
	return &this
}

// GetDisableDirQuota returns the DisableDirQuota field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateDirQuotaArgs) GetDisableDirQuota() bool {
	if o == nil || o.DisableDirQuota.Get() == nil {
		var ret bool
		return ret
	}
	return *o.DisableDirQuota.Get()
}

// GetDisableDirQuotaOk returns a tuple with the DisableDirQuota field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateDirQuotaArgs) GetDisableDirQuotaOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisableDirQuota.Get(), o.DisableDirQuota.IsSet()
}

// HasDisableDirQuota returns a boolean if a field has been set.
func (o *UpdateDirQuotaArgs) HasDisableDirQuota() bool {
	if o != nil && o.DisableDirQuota.IsSet() {
		return true
	}

	return false
}

// SetDisableDirQuota gets a reference to the given NullableBool and assigns it to the DisableDirQuota field.
func (o *UpdateDirQuotaArgs) SetDisableDirQuota(v bool) {
	o.DisableDirQuota.Set(&v)
}
// SetDisableDirQuotaNil sets the value for DisableDirQuota to be an explicit nil
func (o *UpdateDirQuotaArgs) SetDisableDirQuotaNil() {
	o.DisableDirQuota.Set(nil)
}

// UnsetDisableDirQuota ensures that no value is present for DisableDirQuota, not even an explicit nil
func (o *UpdateDirQuotaArgs) UnsetDisableDirQuota() {
	o.DisableDirQuota.Unset()
}

// GetQuota returns the Quota field value if set, zero value otherwise.
func (o *UpdateDirQuotaArgs) GetQuota() DirQuotaPolicy {
	if o == nil || o.Quota == nil {
		var ret DirQuotaPolicy
		return ret
	}
	return *o.Quota
}

// GetQuotaOk returns a tuple with the Quota field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDirQuotaArgs) GetQuotaOk() (*DirQuotaPolicy, bool) {
	if o == nil || o.Quota == nil {
		return nil, false
	}
	return o.Quota, true
}

// HasQuota returns a boolean if a field has been set.
func (o *UpdateDirQuotaArgs) HasQuota() bool {
	if o != nil && o.Quota != nil {
		return true
	}

	return false
}

// SetQuota gets a reference to the given DirQuotaPolicy and assigns it to the Quota field.
func (o *UpdateDirQuotaArgs) SetQuota(v DirQuotaPolicy) {
	o.Quota = &v
}

// GetViewName returns the ViewName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateDirQuotaArgs) GetViewName() string {
	if o == nil || o.ViewName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ViewName.Get()
}

// GetViewNameOk returns a tuple with the ViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateDirQuotaArgs) GetViewNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewName.Get(), o.ViewName.IsSet()
}

// HasViewName returns a boolean if a field has been set.
func (o *UpdateDirQuotaArgs) HasViewName() bool {
	if o != nil && o.ViewName.IsSet() {
		return true
	}

	return false
}

// SetViewName gets a reference to the given NullableString and assigns it to the ViewName field.
func (o *UpdateDirQuotaArgs) SetViewName(v string) {
	o.ViewName.Set(&v)
}
// SetViewNameNil sets the value for ViewName to be an explicit nil
func (o *UpdateDirQuotaArgs) SetViewNameNil() {
	o.ViewName.Set(nil)
}

// UnsetViewName ensures that no value is present for ViewName, not even an explicit nil
func (o *UpdateDirQuotaArgs) UnsetViewName() {
	o.ViewName.Unset()
}

func (o UpdateDirQuotaArgs) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DisableDirQuota.IsSet() {
		toSerialize["disableDirQuota"] = o.DisableDirQuota.Get()
	}
	if o.Quota != nil {
		toSerialize["quota"] = o.Quota
	}
	if o.ViewName.IsSet() {
		toSerialize["viewName"] = o.ViewName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateDirQuotaArgs struct {
	value *UpdateDirQuotaArgs
	isSet bool
}

func (v NullableUpdateDirQuotaArgs) Get() *UpdateDirQuotaArgs {
	return v.value
}

func (v *NullableUpdateDirQuotaArgs) Set(val *UpdateDirQuotaArgs) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDirQuotaArgs) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDirQuotaArgs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDirQuotaArgs(val *UpdateDirQuotaArgs) *NullableUpdateDirQuotaArgs {
	return &NullableUpdateDirQuotaArgs{value: val, isSet: true}
}

func (v NullableUpdateDirQuotaArgs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDirQuotaArgs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


