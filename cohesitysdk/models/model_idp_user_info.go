/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// IdpUserInfo Specifies an IdP User's information logged in using an IdP. This information is not stored on the Cluster.
type IdpUserInfo struct {
	// Specifies the Idp groups that the user is part of. As the user may not be registered on the cluster, we may have to capture the idp group membership. This way, if a group is created on the cluster later, users will instantly have access to tenantIds from that group as well.
	Groups []string `json:"groups,omitempty"`
	// Specifies the unique Id assigned by the Cluster for the IdP.
	IdpId NullableInt64 `json:"idpId,omitempty"`
	// Specifies the unique identifier assigned by the vendor for this Cluster.
	IssuerId NullableString `json:"issuerId,omitempty"`
	// Specifies the unique identifier assigned by the vendor for the user.
	UserId NullableString `json:"userId,omitempty"`
	// Specifies the vendor providing the IdP service.
	Vendor NullableString `json:"vendor,omitempty"`
}

// NewIdpUserInfo instantiates a new IdpUserInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdpUserInfo() *IdpUserInfo {
	this := IdpUserInfo{}
	return &this
}

// NewIdpUserInfoWithDefaults instantiates a new IdpUserInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdpUserInfoWithDefaults() *IdpUserInfo {
	this := IdpUserInfo{}
	return &this
}

// GetGroups returns the Groups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdpUserInfo) GetGroups() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdpUserInfo) GetGroupsOk() (*[]string, bool) {
	if o == nil || o.Groups == nil {
		return nil, false
	}
	return &o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *IdpUserInfo) HasGroups() bool {
	if o != nil && o.Groups != nil {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []string and assigns it to the Groups field.
func (o *IdpUserInfo) SetGroups(v []string) {
	o.Groups = v
}

// GetIdpId returns the IdpId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdpUserInfo) GetIdpId() int64 {
	if o == nil || o.IdpId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.IdpId.Get()
}

// GetIdpIdOk returns a tuple with the IdpId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdpUserInfo) GetIdpIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IdpId.Get(), o.IdpId.IsSet()
}

// HasIdpId returns a boolean if a field has been set.
func (o *IdpUserInfo) HasIdpId() bool {
	if o != nil && o.IdpId.IsSet() {
		return true
	}

	return false
}

// SetIdpId gets a reference to the given NullableInt64 and assigns it to the IdpId field.
func (o *IdpUserInfo) SetIdpId(v int64) {
	o.IdpId.Set(&v)
}
// SetIdpIdNil sets the value for IdpId to be an explicit nil
func (o *IdpUserInfo) SetIdpIdNil() {
	o.IdpId.Set(nil)
}

// UnsetIdpId ensures that no value is present for IdpId, not even an explicit nil
func (o *IdpUserInfo) UnsetIdpId() {
	o.IdpId.Unset()
}

// GetIssuerId returns the IssuerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdpUserInfo) GetIssuerId() string {
	if o == nil || o.IssuerId.Get() == nil {
		var ret string
		return ret
	}
	return *o.IssuerId.Get()
}

// GetIssuerIdOk returns a tuple with the IssuerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdpUserInfo) GetIssuerIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IssuerId.Get(), o.IssuerId.IsSet()
}

// HasIssuerId returns a boolean if a field has been set.
func (o *IdpUserInfo) HasIssuerId() bool {
	if o != nil && o.IssuerId.IsSet() {
		return true
	}

	return false
}

// SetIssuerId gets a reference to the given NullableString and assigns it to the IssuerId field.
func (o *IdpUserInfo) SetIssuerId(v string) {
	o.IssuerId.Set(&v)
}
// SetIssuerIdNil sets the value for IssuerId to be an explicit nil
func (o *IdpUserInfo) SetIssuerIdNil() {
	o.IssuerId.Set(nil)
}

// UnsetIssuerId ensures that no value is present for IssuerId, not even an explicit nil
func (o *IdpUserInfo) UnsetIssuerId() {
	o.IssuerId.Unset()
}

// GetUserId returns the UserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdpUserInfo) GetUserId() string {
	if o == nil || o.UserId.Get() == nil {
		var ret string
		return ret
	}
	return *o.UserId.Get()
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdpUserInfo) GetUserIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UserId.Get(), o.UserId.IsSet()
}

// HasUserId returns a boolean if a field has been set.
func (o *IdpUserInfo) HasUserId() bool {
	if o != nil && o.UserId.IsSet() {
		return true
	}

	return false
}

// SetUserId gets a reference to the given NullableString and assigns it to the UserId field.
func (o *IdpUserInfo) SetUserId(v string) {
	o.UserId.Set(&v)
}
// SetUserIdNil sets the value for UserId to be an explicit nil
func (o *IdpUserInfo) SetUserIdNil() {
	o.UserId.Set(nil)
}

// UnsetUserId ensures that no value is present for UserId, not even an explicit nil
func (o *IdpUserInfo) UnsetUserId() {
	o.UserId.Unset()
}

// GetVendor returns the Vendor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdpUserInfo) GetVendor() string {
	if o == nil || o.Vendor.Get() == nil {
		var ret string
		return ret
	}
	return *o.Vendor.Get()
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdpUserInfo) GetVendorOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Vendor.Get(), o.Vendor.IsSet()
}

// HasVendor returns a boolean if a field has been set.
func (o *IdpUserInfo) HasVendor() bool {
	if o != nil && o.Vendor.IsSet() {
		return true
	}

	return false
}

// SetVendor gets a reference to the given NullableString and assigns it to the Vendor field.
func (o *IdpUserInfo) SetVendor(v string) {
	o.Vendor.Set(&v)
}
// SetVendorNil sets the value for Vendor to be an explicit nil
func (o *IdpUserInfo) SetVendorNil() {
	o.Vendor.Set(nil)
}

// UnsetVendor ensures that no value is present for Vendor, not even an explicit nil
func (o *IdpUserInfo) UnsetVendor() {
	o.Vendor.Unset()
}

func (o IdpUserInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Groups != nil {
		toSerialize["groups"] = o.Groups
	}
	if o.IdpId.IsSet() {
		toSerialize["idpId"] = o.IdpId.Get()
	}
	if o.IssuerId.IsSet() {
		toSerialize["issuerId"] = o.IssuerId.Get()
	}
	if o.UserId.IsSet() {
		toSerialize["userId"] = o.UserId.Get()
	}
	if o.Vendor.IsSet() {
		toSerialize["vendor"] = o.Vendor.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableIdpUserInfo struct {
	value *IdpUserInfo
	isSet bool
}

func (v NullableIdpUserInfo) Get() *IdpUserInfo {
	return v.value
}

func (v *NullableIdpUserInfo) Set(val *IdpUserInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableIdpUserInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableIdpUserInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdpUserInfo(val *IdpUserInfo) *NullableIdpUserInfo {
	return &NullableIdpUserInfo{value: val, isSet: true}
}

func (v NullableIdpUserInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdpUserInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


