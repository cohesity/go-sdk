/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// NetworkingInformation Specifies the struct containing information about network addresses configured on the given box. This is needed for dealing with Windows/Oracle Cluster resources that we discover and protect automatically.
type NetworkingInformation struct {
	// The list of resources on the system that are accessible by an IP address.
	ResourceVec []ClusterNetworkingResourceInformation `json:"resourceVec,omitempty"`
}

// NewNetworkingInformation instantiates a new NetworkingInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkingInformation() *NetworkingInformation {
	this := NetworkingInformation{}
	return &this
}

// NewNetworkingInformationWithDefaults instantiates a new NetworkingInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkingInformationWithDefaults() *NetworkingInformation {
	this := NetworkingInformation{}
	return &this
}

// GetResourceVec returns the ResourceVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkingInformation) GetResourceVec() []ClusterNetworkingResourceInformation {
	if o == nil  {
		var ret []ClusterNetworkingResourceInformation
		return ret
	}
	return o.ResourceVec
}

// GetResourceVecOk returns a tuple with the ResourceVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkingInformation) GetResourceVecOk() (*[]ClusterNetworkingResourceInformation, bool) {
	if o == nil || o.ResourceVec == nil {
		return nil, false
	}
	return &o.ResourceVec, true
}

// HasResourceVec returns a boolean if a field has been set.
func (o *NetworkingInformation) HasResourceVec() bool {
	if o != nil && o.ResourceVec != nil {
		return true
	}

	return false
}

// SetResourceVec gets a reference to the given []ClusterNetworkingResourceInformation and assigns it to the ResourceVec field.
func (o *NetworkingInformation) SetResourceVec(v []ClusterNetworkingResourceInformation) {
	o.ResourceVec = v
}

func (o NetworkingInformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ResourceVec != nil {
		toSerialize["resourceVec"] = o.ResourceVec
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkingInformation struct {
	value *NetworkingInformation
	isSet bool
}

func (v NullableNetworkingInformation) Get() *NetworkingInformation {
	return v.value
}

func (v *NullableNetworkingInformation) Set(val *NetworkingInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkingInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkingInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkingInformation(val *NetworkingInformation) *NullableNetworkingInformation {
	return &NullableNetworkingInformation{value: val, isSet: true}
}

func (v NullableNetworkingInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkingInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


