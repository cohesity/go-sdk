/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// MapperInfo struct for MapperInfo
type MapperInfo struct {
	// The code of the mapper in the specified language. Should be UTF-8.
	Code NullableString `json:"code,omitempty"`
	// Mapper ID generated by system. Absent when user is creating a new mapper. Mandatory in all other use cases.
	Id NullableInt64 `json:"id,omitempty"`
	// Whether the mapper is system defined.
	IsSystemDefined NullableBool `json:"isSystemDefined,omitempty"`
	// User can write their own mapper/reducer or upload jar files containing mappers and reducers. If this mapper was part of a jar file, then this field will have the JAR name.
	JarName NullableString `json:"jarName,omitempty"`
	// path of JAR in which this mapper was found. This is applicable only when this mapper was uploaded via JAR.
	JarPath NullableString `json:"jarPath,omitempty"`
	// Language of the mapper.
	Language NullableInt32 `json:"language,omitempty"`
	// Name of the mapper.
	Name NullableString `json:"name,omitempty"`
}

// NewMapperInfo instantiates a new MapperInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMapperInfo() *MapperInfo {
	this := MapperInfo{}
	return &this
}

// NewMapperInfoWithDefaults instantiates a new MapperInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMapperInfoWithDefaults() *MapperInfo {
	this := MapperInfo{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MapperInfo) GetCode() string {
	if o == nil || o.Code.Get() == nil {
		var ret string
		return ret
	}
	return *o.Code.Get()
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MapperInfo) GetCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Code.Get(), o.Code.IsSet()
}

// HasCode returns a boolean if a field has been set.
func (o *MapperInfo) HasCode() bool {
	if o != nil && o.Code.IsSet() {
		return true
	}

	return false
}

// SetCode gets a reference to the given NullableString and assigns it to the Code field.
func (o *MapperInfo) SetCode(v string) {
	o.Code.Set(&v)
}
// SetCodeNil sets the value for Code to be an explicit nil
func (o *MapperInfo) SetCodeNil() {
	o.Code.Set(nil)
}

// UnsetCode ensures that no value is present for Code, not even an explicit nil
func (o *MapperInfo) UnsetCode() {
	o.Code.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MapperInfo) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MapperInfo) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *MapperInfo) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *MapperInfo) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *MapperInfo) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *MapperInfo) UnsetId() {
	o.Id.Unset()
}

// GetIsSystemDefined returns the IsSystemDefined field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MapperInfo) GetIsSystemDefined() bool {
	if o == nil || o.IsSystemDefined.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsSystemDefined.Get()
}

// GetIsSystemDefinedOk returns a tuple with the IsSystemDefined field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MapperInfo) GetIsSystemDefinedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsSystemDefined.Get(), o.IsSystemDefined.IsSet()
}

// HasIsSystemDefined returns a boolean if a field has been set.
func (o *MapperInfo) HasIsSystemDefined() bool {
	if o != nil && o.IsSystemDefined.IsSet() {
		return true
	}

	return false
}

// SetIsSystemDefined gets a reference to the given NullableBool and assigns it to the IsSystemDefined field.
func (o *MapperInfo) SetIsSystemDefined(v bool) {
	o.IsSystemDefined.Set(&v)
}
// SetIsSystemDefinedNil sets the value for IsSystemDefined to be an explicit nil
func (o *MapperInfo) SetIsSystemDefinedNil() {
	o.IsSystemDefined.Set(nil)
}

// UnsetIsSystemDefined ensures that no value is present for IsSystemDefined, not even an explicit nil
func (o *MapperInfo) UnsetIsSystemDefined() {
	o.IsSystemDefined.Unset()
}

// GetJarName returns the JarName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MapperInfo) GetJarName() string {
	if o == nil || o.JarName.Get() == nil {
		var ret string
		return ret
	}
	return *o.JarName.Get()
}

// GetJarNameOk returns a tuple with the JarName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MapperInfo) GetJarNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.JarName.Get(), o.JarName.IsSet()
}

// HasJarName returns a boolean if a field has been set.
func (o *MapperInfo) HasJarName() bool {
	if o != nil && o.JarName.IsSet() {
		return true
	}

	return false
}

// SetJarName gets a reference to the given NullableString and assigns it to the JarName field.
func (o *MapperInfo) SetJarName(v string) {
	o.JarName.Set(&v)
}
// SetJarNameNil sets the value for JarName to be an explicit nil
func (o *MapperInfo) SetJarNameNil() {
	o.JarName.Set(nil)
}

// UnsetJarName ensures that no value is present for JarName, not even an explicit nil
func (o *MapperInfo) UnsetJarName() {
	o.JarName.Unset()
}

// GetJarPath returns the JarPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MapperInfo) GetJarPath() string {
	if o == nil || o.JarPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.JarPath.Get()
}

// GetJarPathOk returns a tuple with the JarPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MapperInfo) GetJarPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.JarPath.Get(), o.JarPath.IsSet()
}

// HasJarPath returns a boolean if a field has been set.
func (o *MapperInfo) HasJarPath() bool {
	if o != nil && o.JarPath.IsSet() {
		return true
	}

	return false
}

// SetJarPath gets a reference to the given NullableString and assigns it to the JarPath field.
func (o *MapperInfo) SetJarPath(v string) {
	o.JarPath.Set(&v)
}
// SetJarPathNil sets the value for JarPath to be an explicit nil
func (o *MapperInfo) SetJarPathNil() {
	o.JarPath.Set(nil)
}

// UnsetJarPath ensures that no value is present for JarPath, not even an explicit nil
func (o *MapperInfo) UnsetJarPath() {
	o.JarPath.Unset()
}

// GetLanguage returns the Language field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MapperInfo) GetLanguage() int32 {
	if o == nil || o.Language.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Language.Get()
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MapperInfo) GetLanguageOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Language.Get(), o.Language.IsSet()
}

// HasLanguage returns a boolean if a field has been set.
func (o *MapperInfo) HasLanguage() bool {
	if o != nil && o.Language.IsSet() {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given NullableInt32 and assigns it to the Language field.
func (o *MapperInfo) SetLanguage(v int32) {
	o.Language.Set(&v)
}
// SetLanguageNil sets the value for Language to be an explicit nil
func (o *MapperInfo) SetLanguageNil() {
	o.Language.Set(nil)
}

// UnsetLanguage ensures that no value is present for Language, not even an explicit nil
func (o *MapperInfo) UnsetLanguage() {
	o.Language.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MapperInfo) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MapperInfo) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *MapperInfo) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *MapperInfo) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *MapperInfo) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *MapperInfo) UnsetName() {
	o.Name.Unset()
}

func (o MapperInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Code.IsSet() {
		toSerialize["code"] = o.Code.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.IsSystemDefined.IsSet() {
		toSerialize["isSystemDefined"] = o.IsSystemDefined.Get()
	}
	if o.JarName.IsSet() {
		toSerialize["jarName"] = o.JarName.Get()
	}
	if o.JarPath.IsSet() {
		toSerialize["jarPath"] = o.JarPath.Get()
	}
	if o.Language.IsSet() {
		toSerialize["language"] = o.Language.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMapperInfo struct {
	value *MapperInfo
	isSet bool
}

func (v NullableMapperInfo) Get() *MapperInfo {
	return v.value
}

func (v *NullableMapperInfo) Set(val *MapperInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableMapperInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableMapperInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMapperInfo(val *MapperInfo) *NullableMapperInfo {
	return &NullableMapperInfo{value: val, isSet: true}
}

func (v NullableMapperInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMapperInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


