/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// SQLServerInstanceVersion Specifies the Server Instance Version.
type SQLServerInstanceVersion struct {
	// Specifies the build.
	Build NullableInt32 `json:"build,omitempty"`
	// Specifies the major version.
	MajorVersion NullableInt32 `json:"majorVersion,omitempty"`
	// Specifies the minor version.
	MinorVersion NullableInt32 `json:"minorVersion,omitempty"`
	// Specifies the revision.
	Revision NullableInt32 `json:"revision,omitempty"`
	// Specifies the version string.
	VersionString NullableString `json:"versionString,omitempty"`
}

// NewSQLServerInstanceVersion instantiates a new SQLServerInstanceVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSQLServerInstanceVersion() *SQLServerInstanceVersion {
	this := SQLServerInstanceVersion{}
	return &this
}

// NewSQLServerInstanceVersionWithDefaults instantiates a new SQLServerInstanceVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSQLServerInstanceVersionWithDefaults() *SQLServerInstanceVersion {
	this := SQLServerInstanceVersion{}
	return &this
}

// GetBuild returns the Build field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SQLServerInstanceVersion) GetBuild() int32 {
	if o == nil || o.Build.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Build.Get()
}

// GetBuildOk returns a tuple with the Build field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SQLServerInstanceVersion) GetBuildOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Build.Get(), o.Build.IsSet()
}

// HasBuild returns a boolean if a field has been set.
func (o *SQLServerInstanceVersion) HasBuild() bool {
	if o != nil && o.Build.IsSet() {
		return true
	}

	return false
}

// SetBuild gets a reference to the given NullableInt32 and assigns it to the Build field.
func (o *SQLServerInstanceVersion) SetBuild(v int32) {
	o.Build.Set(&v)
}
// SetBuildNil sets the value for Build to be an explicit nil
func (o *SQLServerInstanceVersion) SetBuildNil() {
	o.Build.Set(nil)
}

// UnsetBuild ensures that no value is present for Build, not even an explicit nil
func (o *SQLServerInstanceVersion) UnsetBuild() {
	o.Build.Unset()
}

// GetMajorVersion returns the MajorVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SQLServerInstanceVersion) GetMajorVersion() int32 {
	if o == nil || o.MajorVersion.Get() == nil {
		var ret int32
		return ret
	}
	return *o.MajorVersion.Get()
}

// GetMajorVersionOk returns a tuple with the MajorVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SQLServerInstanceVersion) GetMajorVersionOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MajorVersion.Get(), o.MajorVersion.IsSet()
}

// HasMajorVersion returns a boolean if a field has been set.
func (o *SQLServerInstanceVersion) HasMajorVersion() bool {
	if o != nil && o.MajorVersion.IsSet() {
		return true
	}

	return false
}

// SetMajorVersion gets a reference to the given NullableInt32 and assigns it to the MajorVersion field.
func (o *SQLServerInstanceVersion) SetMajorVersion(v int32) {
	o.MajorVersion.Set(&v)
}
// SetMajorVersionNil sets the value for MajorVersion to be an explicit nil
func (o *SQLServerInstanceVersion) SetMajorVersionNil() {
	o.MajorVersion.Set(nil)
}

// UnsetMajorVersion ensures that no value is present for MajorVersion, not even an explicit nil
func (o *SQLServerInstanceVersion) UnsetMajorVersion() {
	o.MajorVersion.Unset()
}

// GetMinorVersion returns the MinorVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SQLServerInstanceVersion) GetMinorVersion() int32 {
	if o == nil || o.MinorVersion.Get() == nil {
		var ret int32
		return ret
	}
	return *o.MinorVersion.Get()
}

// GetMinorVersionOk returns a tuple with the MinorVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SQLServerInstanceVersion) GetMinorVersionOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MinorVersion.Get(), o.MinorVersion.IsSet()
}

// HasMinorVersion returns a boolean if a field has been set.
func (o *SQLServerInstanceVersion) HasMinorVersion() bool {
	if o != nil && o.MinorVersion.IsSet() {
		return true
	}

	return false
}

// SetMinorVersion gets a reference to the given NullableInt32 and assigns it to the MinorVersion field.
func (o *SQLServerInstanceVersion) SetMinorVersion(v int32) {
	o.MinorVersion.Set(&v)
}
// SetMinorVersionNil sets the value for MinorVersion to be an explicit nil
func (o *SQLServerInstanceVersion) SetMinorVersionNil() {
	o.MinorVersion.Set(nil)
}

// UnsetMinorVersion ensures that no value is present for MinorVersion, not even an explicit nil
func (o *SQLServerInstanceVersion) UnsetMinorVersion() {
	o.MinorVersion.Unset()
}

// GetRevision returns the Revision field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SQLServerInstanceVersion) GetRevision() int32 {
	if o == nil || o.Revision.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Revision.Get()
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SQLServerInstanceVersion) GetRevisionOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Revision.Get(), o.Revision.IsSet()
}

// HasRevision returns a boolean if a field has been set.
func (o *SQLServerInstanceVersion) HasRevision() bool {
	if o != nil && o.Revision.IsSet() {
		return true
	}

	return false
}

// SetRevision gets a reference to the given NullableInt32 and assigns it to the Revision field.
func (o *SQLServerInstanceVersion) SetRevision(v int32) {
	o.Revision.Set(&v)
}
// SetRevisionNil sets the value for Revision to be an explicit nil
func (o *SQLServerInstanceVersion) SetRevisionNil() {
	o.Revision.Set(nil)
}

// UnsetRevision ensures that no value is present for Revision, not even an explicit nil
func (o *SQLServerInstanceVersion) UnsetRevision() {
	o.Revision.Unset()
}

// GetVersionString returns the VersionString field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SQLServerInstanceVersion) GetVersionString() string {
	if o == nil || o.VersionString.Get() == nil {
		var ret string
		return ret
	}
	return *o.VersionString.Get()
}

// GetVersionStringOk returns a tuple with the VersionString field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SQLServerInstanceVersion) GetVersionStringOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VersionString.Get(), o.VersionString.IsSet()
}

// HasVersionString returns a boolean if a field has been set.
func (o *SQLServerInstanceVersion) HasVersionString() bool {
	if o != nil && o.VersionString.IsSet() {
		return true
	}

	return false
}

// SetVersionString gets a reference to the given NullableString and assigns it to the VersionString field.
func (o *SQLServerInstanceVersion) SetVersionString(v string) {
	o.VersionString.Set(&v)
}
// SetVersionStringNil sets the value for VersionString to be an explicit nil
func (o *SQLServerInstanceVersion) SetVersionStringNil() {
	o.VersionString.Set(nil)
}

// UnsetVersionString ensures that no value is present for VersionString, not even an explicit nil
func (o *SQLServerInstanceVersion) UnsetVersionString() {
	o.VersionString.Unset()
}

func (o SQLServerInstanceVersion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Build.IsSet() {
		toSerialize["build"] = o.Build.Get()
	}
	if o.MajorVersion.IsSet() {
		toSerialize["majorVersion"] = o.MajorVersion.Get()
	}
	if o.MinorVersion.IsSet() {
		toSerialize["minorVersion"] = o.MinorVersion.Get()
	}
	if o.Revision.IsSet() {
		toSerialize["revision"] = o.Revision.Get()
	}
	if o.VersionString.IsSet() {
		toSerialize["versionString"] = o.VersionString.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSQLServerInstanceVersion struct {
	value *SQLServerInstanceVersion
	isSet bool
}

func (v NullableSQLServerInstanceVersion) Get() *SQLServerInstanceVersion {
	return v.value
}

func (v *NullableSQLServerInstanceVersion) Set(val *SQLServerInstanceVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableSQLServerInstanceVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableSQLServerInstanceVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSQLServerInstanceVersion(val *SQLServerInstanceVersion) *NullableSQLServerInstanceVersion {
	return &NullableSQLServerInstanceVersion{value: val, isSet: true}
}

func (v NullableSQLServerInstanceVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSQLServerInstanceVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


