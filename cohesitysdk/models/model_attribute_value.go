/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// AttributeValue Represents the information about the values of attribute of the ADObject.
type AttributeValue struct {
	// Specifies the flags related to the attribute values of the AD object. 'kError' indicates error in conversion of AD Object value to string. The value in the AdAttributValue contains the error message. 'kTruncated' indicates the multi valued attribute is truncated when value exceeded 'truncate_multivalues' value specified in the request. 'kCSV' indicates content in 'values' is a comma separated value (CSV) format of a complex object.
	Flags []string `json:"flags,omitempty"`
	// Specifies list of values for the attribute.
	Values []string `json:"values,omitempty"`
}

// NewAttributeValue instantiates a new AttributeValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttributeValue() *AttributeValue {
	this := AttributeValue{}
	return &this
}

// NewAttributeValueWithDefaults instantiates a new AttributeValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttributeValueWithDefaults() *AttributeValue {
	this := AttributeValue{}
	return &this
}

// GetFlags returns the Flags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AttributeValue) GetFlags() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Flags
}

// GetFlagsOk returns a tuple with the Flags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AttributeValue) GetFlagsOk() (*[]string, bool) {
	if o == nil || o.Flags == nil {
		return nil, false
	}
	return &o.Flags, true
}

// HasFlags returns a boolean if a field has been set.
func (o *AttributeValue) HasFlags() bool {
	if o != nil && o.Flags != nil {
		return true
	}

	return false
}

// SetFlags gets a reference to the given []string and assigns it to the Flags field.
func (o *AttributeValue) SetFlags(v []string) {
	o.Flags = v
}

// GetValues returns the Values field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AttributeValue) GetValues() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AttributeValue) GetValuesOk() (*[]string, bool) {
	if o == nil || o.Values == nil {
		return nil, false
	}
	return &o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *AttributeValue) HasValues() bool {
	if o != nil && o.Values != nil {
		return true
	}

	return false
}

// SetValues gets a reference to the given []string and assigns it to the Values field.
func (o *AttributeValue) SetValues(v []string) {
	o.Values = v
}

func (o AttributeValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Flags != nil {
		toSerialize["flags"] = o.Flags
	}
	if o.Values != nil {
		toSerialize["values"] = o.Values
	}
	return json.Marshal(toSerialize)
}

type NullableAttributeValue struct {
	value *AttributeValue
	isSet bool
}

func (v NullableAttributeValue) Get() *AttributeValue {
	return v.value
}

func (v *NullableAttributeValue) Set(val *AttributeValue) {
	v.value = val
	v.isSet = true
}

func (v NullableAttributeValue) IsSet() bool {
	return v.isSet
}

func (v *NullableAttributeValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttributeValue(val *AttributeValue) *NullableAttributeValue {
	return &NullableAttributeValue{value: val, isSet: true}
}

func (v NullableAttributeValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttributeValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


