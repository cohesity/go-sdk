/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// EncryptionConfiguration Specifies the parameters the user wants to use when configuring encryption for the new Cluster.
type EncryptionConfiguration struct {
	// Specifies whether or not to enable encryption. If encryption is enabled, all data on the Cluster will be encrypted. This can only be enabled at Cluster creation time and cannot be disabled later.
	EnableEncryption NullableBool `json:"enableEncryption,omitempty"`
	// Specifies whether or not to enable FIPS mode. EnableEncryption must be set to true in order to enable FIPS.
	EnableFipsMode NullableBool `json:"enableFipsMode,omitempty"`
	// Specifies the rotation period for encryption keys in days.
	RotationPeriod NullableInt32 `json:"rotationPeriod,omitempty"`
}

// NewEncryptionConfiguration instantiates a new EncryptionConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEncryptionConfiguration() *EncryptionConfiguration {
	this := EncryptionConfiguration{}
	return &this
}

// NewEncryptionConfigurationWithDefaults instantiates a new EncryptionConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEncryptionConfigurationWithDefaults() *EncryptionConfiguration {
	this := EncryptionConfiguration{}
	return &this
}

// GetEnableEncryption returns the EnableEncryption field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EncryptionConfiguration) GetEnableEncryption() bool {
	if o == nil || o.EnableEncryption.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableEncryption.Get()
}

// GetEnableEncryptionOk returns a tuple with the EnableEncryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EncryptionConfiguration) GetEnableEncryptionOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableEncryption.Get(), o.EnableEncryption.IsSet()
}

// HasEnableEncryption returns a boolean if a field has been set.
func (o *EncryptionConfiguration) HasEnableEncryption() bool {
	if o != nil && o.EnableEncryption.IsSet() {
		return true
	}

	return false
}

// SetEnableEncryption gets a reference to the given NullableBool and assigns it to the EnableEncryption field.
func (o *EncryptionConfiguration) SetEnableEncryption(v bool) {
	o.EnableEncryption.Set(&v)
}
// SetEnableEncryptionNil sets the value for EnableEncryption to be an explicit nil
func (o *EncryptionConfiguration) SetEnableEncryptionNil() {
	o.EnableEncryption.Set(nil)
}

// UnsetEnableEncryption ensures that no value is present for EnableEncryption, not even an explicit nil
func (o *EncryptionConfiguration) UnsetEnableEncryption() {
	o.EnableEncryption.Unset()
}

// GetEnableFipsMode returns the EnableFipsMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EncryptionConfiguration) GetEnableFipsMode() bool {
	if o == nil || o.EnableFipsMode.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableFipsMode.Get()
}

// GetEnableFipsModeOk returns a tuple with the EnableFipsMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EncryptionConfiguration) GetEnableFipsModeOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableFipsMode.Get(), o.EnableFipsMode.IsSet()
}

// HasEnableFipsMode returns a boolean if a field has been set.
func (o *EncryptionConfiguration) HasEnableFipsMode() bool {
	if o != nil && o.EnableFipsMode.IsSet() {
		return true
	}

	return false
}

// SetEnableFipsMode gets a reference to the given NullableBool and assigns it to the EnableFipsMode field.
func (o *EncryptionConfiguration) SetEnableFipsMode(v bool) {
	o.EnableFipsMode.Set(&v)
}
// SetEnableFipsModeNil sets the value for EnableFipsMode to be an explicit nil
func (o *EncryptionConfiguration) SetEnableFipsModeNil() {
	o.EnableFipsMode.Set(nil)
}

// UnsetEnableFipsMode ensures that no value is present for EnableFipsMode, not even an explicit nil
func (o *EncryptionConfiguration) UnsetEnableFipsMode() {
	o.EnableFipsMode.Unset()
}

// GetRotationPeriod returns the RotationPeriod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EncryptionConfiguration) GetRotationPeriod() int32 {
	if o == nil || o.RotationPeriod.Get() == nil {
		var ret int32
		return ret
	}
	return *o.RotationPeriod.Get()
}

// GetRotationPeriodOk returns a tuple with the RotationPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EncryptionConfiguration) GetRotationPeriodOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RotationPeriod.Get(), o.RotationPeriod.IsSet()
}

// HasRotationPeriod returns a boolean if a field has been set.
func (o *EncryptionConfiguration) HasRotationPeriod() bool {
	if o != nil && o.RotationPeriod.IsSet() {
		return true
	}

	return false
}

// SetRotationPeriod gets a reference to the given NullableInt32 and assigns it to the RotationPeriod field.
func (o *EncryptionConfiguration) SetRotationPeriod(v int32) {
	o.RotationPeriod.Set(&v)
}
// SetRotationPeriodNil sets the value for RotationPeriod to be an explicit nil
func (o *EncryptionConfiguration) SetRotationPeriodNil() {
	o.RotationPeriod.Set(nil)
}

// UnsetRotationPeriod ensures that no value is present for RotationPeriod, not even an explicit nil
func (o *EncryptionConfiguration) UnsetRotationPeriod() {
	o.RotationPeriod.Unset()
}

func (o EncryptionConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EnableEncryption.IsSet() {
		toSerialize["enableEncryption"] = o.EnableEncryption.Get()
	}
	if o.EnableFipsMode.IsSet() {
		toSerialize["enableFipsMode"] = o.EnableFipsMode.Get()
	}
	if o.RotationPeriod.IsSet() {
		toSerialize["rotationPeriod"] = o.RotationPeriod.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableEncryptionConfiguration struct {
	value *EncryptionConfiguration
	isSet bool
}

func (v NullableEncryptionConfiguration) Get() *EncryptionConfiguration {
	return v.value
}

func (v *NullableEncryptionConfiguration) Set(val *EncryptionConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableEncryptionConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableEncryptionConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncryptionConfiguration(val *EncryptionConfiguration) *NullableEncryptionConfiguration {
	return &NullableEncryptionConfiguration{value: val, isSet: true}
}

func (v NullableEncryptionConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncryptionConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


