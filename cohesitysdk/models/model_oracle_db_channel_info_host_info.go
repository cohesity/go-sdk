/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// OracleDBChannelInfoHostInfo The name of this proto message is out-dated. This proto should generally be used to represent parameters needed for each Oracle 'cluster' node. 'cluster' here is a loose term used to include more than Oracle RAC cluster, e.g. 'active-passive' cluster is also considered here as 'cluster' and its 'cluster node will also be represented by the following proto.
type OracleDBChannelInfoHostInfo struct {
	// 'agent_id' of the host from which we are allowed to take the backup/restore.
	Host NullableString `json:"host,omitempty"`
	// Number of channels we need to create for this host. Default value for num_channels will be calculated as minimum of number of nodes in cohesity cluster, 2 * number of cpu on Oracle host.
	NumChannels NullableInt32 `json:"numChannels,omitempty"`
	// port number where database is listening.
	Portnum NullableInt64 `json:"portnum,omitempty"`
	SbtHostParams *OracleSbtHostParams `json:"sbtHostParams,omitempty"`
}

// NewOracleDBChannelInfoHostInfo instantiates a new OracleDBChannelInfoHostInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleDBChannelInfoHostInfo() *OracleDBChannelInfoHostInfo {
	this := OracleDBChannelInfoHostInfo{}
	return &this
}

// NewOracleDBChannelInfoHostInfoWithDefaults instantiates a new OracleDBChannelInfoHostInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleDBChannelInfoHostInfoWithDefaults() *OracleDBChannelInfoHostInfo {
	this := OracleDBChannelInfoHostInfo{}
	return &this
}

// GetHost returns the Host field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDBChannelInfoHostInfo) GetHost() string {
	if o == nil || o.Host.Get() == nil {
		var ret string
		return ret
	}
	return *o.Host.Get()
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDBChannelInfoHostInfo) GetHostOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Host.Get(), o.Host.IsSet()
}

// HasHost returns a boolean if a field has been set.
func (o *OracleDBChannelInfoHostInfo) HasHost() bool {
	if o != nil && o.Host.IsSet() {
		return true
	}

	return false
}

// SetHost gets a reference to the given NullableString and assigns it to the Host field.
func (o *OracleDBChannelInfoHostInfo) SetHost(v string) {
	o.Host.Set(&v)
}
// SetHostNil sets the value for Host to be an explicit nil
func (o *OracleDBChannelInfoHostInfo) SetHostNil() {
	o.Host.Set(nil)
}

// UnsetHost ensures that no value is present for Host, not even an explicit nil
func (o *OracleDBChannelInfoHostInfo) UnsetHost() {
	o.Host.Unset()
}

// GetNumChannels returns the NumChannels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDBChannelInfoHostInfo) GetNumChannels() int32 {
	if o == nil || o.NumChannels.Get() == nil {
		var ret int32
		return ret
	}
	return *o.NumChannels.Get()
}

// GetNumChannelsOk returns a tuple with the NumChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDBChannelInfoHostInfo) GetNumChannelsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumChannels.Get(), o.NumChannels.IsSet()
}

// HasNumChannels returns a boolean if a field has been set.
func (o *OracleDBChannelInfoHostInfo) HasNumChannels() bool {
	if o != nil && o.NumChannels.IsSet() {
		return true
	}

	return false
}

// SetNumChannels gets a reference to the given NullableInt32 and assigns it to the NumChannels field.
func (o *OracleDBChannelInfoHostInfo) SetNumChannels(v int32) {
	o.NumChannels.Set(&v)
}
// SetNumChannelsNil sets the value for NumChannels to be an explicit nil
func (o *OracleDBChannelInfoHostInfo) SetNumChannelsNil() {
	o.NumChannels.Set(nil)
}

// UnsetNumChannels ensures that no value is present for NumChannels, not even an explicit nil
func (o *OracleDBChannelInfoHostInfo) UnsetNumChannels() {
	o.NumChannels.Unset()
}

// GetPortnum returns the Portnum field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDBChannelInfoHostInfo) GetPortnum() int64 {
	if o == nil || o.Portnum.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Portnum.Get()
}

// GetPortnumOk returns a tuple with the Portnum field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDBChannelInfoHostInfo) GetPortnumOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Portnum.Get(), o.Portnum.IsSet()
}

// HasPortnum returns a boolean if a field has been set.
func (o *OracleDBChannelInfoHostInfo) HasPortnum() bool {
	if o != nil && o.Portnum.IsSet() {
		return true
	}

	return false
}

// SetPortnum gets a reference to the given NullableInt64 and assigns it to the Portnum field.
func (o *OracleDBChannelInfoHostInfo) SetPortnum(v int64) {
	o.Portnum.Set(&v)
}
// SetPortnumNil sets the value for Portnum to be an explicit nil
func (o *OracleDBChannelInfoHostInfo) SetPortnumNil() {
	o.Portnum.Set(nil)
}

// UnsetPortnum ensures that no value is present for Portnum, not even an explicit nil
func (o *OracleDBChannelInfoHostInfo) UnsetPortnum() {
	o.Portnum.Unset()
}

// GetSbtHostParams returns the SbtHostParams field value if set, zero value otherwise.
func (o *OracleDBChannelInfoHostInfo) GetSbtHostParams() OracleSbtHostParams {
	if o == nil || o.SbtHostParams == nil {
		var ret OracleSbtHostParams
		return ret
	}
	return *o.SbtHostParams
}

// GetSbtHostParamsOk returns a tuple with the SbtHostParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDBChannelInfoHostInfo) GetSbtHostParamsOk() (*OracleSbtHostParams, bool) {
	if o == nil || o.SbtHostParams == nil {
		return nil, false
	}
	return o.SbtHostParams, true
}

// HasSbtHostParams returns a boolean if a field has been set.
func (o *OracleDBChannelInfoHostInfo) HasSbtHostParams() bool {
	if o != nil && o.SbtHostParams != nil {
		return true
	}

	return false
}

// SetSbtHostParams gets a reference to the given OracleSbtHostParams and assigns it to the SbtHostParams field.
func (o *OracleDBChannelInfoHostInfo) SetSbtHostParams(v OracleSbtHostParams) {
	o.SbtHostParams = &v
}

func (o OracleDBChannelInfoHostInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Host.IsSet() {
		toSerialize["host"] = o.Host.Get()
	}
	if o.NumChannels.IsSet() {
		toSerialize["numChannels"] = o.NumChannels.Get()
	}
	if o.Portnum.IsSet() {
		toSerialize["portnum"] = o.Portnum.Get()
	}
	if o.SbtHostParams != nil {
		toSerialize["sbtHostParams"] = o.SbtHostParams
	}
	return json.Marshal(toSerialize)
}

type NullableOracleDBChannelInfoHostInfo struct {
	value *OracleDBChannelInfoHostInfo
	isSet bool
}

func (v NullableOracleDBChannelInfoHostInfo) Get() *OracleDBChannelInfoHostInfo {
	return v.value
}

func (v *NullableOracleDBChannelInfoHostInfo) Set(val *OracleDBChannelInfoHostInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleDBChannelInfoHostInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleDBChannelInfoHostInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleDBChannelInfoHostInfo(val *OracleDBChannelInfoHostInfo) *NullableOracleDBChannelInfoHostInfo {
	return &NullableOracleDBChannelInfoHostInfo{value: val, isSet: true}
}

func (v NullableOracleDBChannelInfoHostInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleDBChannelInfoHostInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


