/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// OracleVlanInfo struct for OracleVlanInfo
type OracleVlanInfo struct {
	// Gateway for this VLAN.
	Gateway NullableString `json:"gateway,omitempty"`
	// ID of this VLAN.
	Id NullableInt32 `json:"id,omitempty"`
	// List of IPs in this VLAN.
	IpVec []string `json:"ipVec,omitempty"`
	// Subnet IP for this VLAN.
	SubnetIp NullableString `json:"subnetIp,omitempty"`
}

// NewOracleVlanInfo instantiates a new OracleVlanInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleVlanInfo() *OracleVlanInfo {
	this := OracleVlanInfo{}
	return &this
}

// NewOracleVlanInfoWithDefaults instantiates a new OracleVlanInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleVlanInfoWithDefaults() *OracleVlanInfo {
	this := OracleVlanInfo{}
	return &this
}

// GetGateway returns the Gateway field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleVlanInfo) GetGateway() string {
	if o == nil || o.Gateway.Get() == nil {
		var ret string
		return ret
	}
	return *o.Gateway.Get()
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleVlanInfo) GetGatewayOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Gateway.Get(), o.Gateway.IsSet()
}

// HasGateway returns a boolean if a field has been set.
func (o *OracleVlanInfo) HasGateway() bool {
	if o != nil && o.Gateway.IsSet() {
		return true
	}

	return false
}

// SetGateway gets a reference to the given NullableString and assigns it to the Gateway field.
func (o *OracleVlanInfo) SetGateway(v string) {
	o.Gateway.Set(&v)
}
// SetGatewayNil sets the value for Gateway to be an explicit nil
func (o *OracleVlanInfo) SetGatewayNil() {
	o.Gateway.Set(nil)
}

// UnsetGateway ensures that no value is present for Gateway, not even an explicit nil
func (o *OracleVlanInfo) UnsetGateway() {
	o.Gateway.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleVlanInfo) GetId() int32 {
	if o == nil || o.Id.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleVlanInfo) GetIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *OracleVlanInfo) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt32 and assigns it to the Id field.
func (o *OracleVlanInfo) SetId(v int32) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *OracleVlanInfo) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *OracleVlanInfo) UnsetId() {
	o.Id.Unset()
}

// GetIpVec returns the IpVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleVlanInfo) GetIpVec() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.IpVec
}

// GetIpVecOk returns a tuple with the IpVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleVlanInfo) GetIpVecOk() (*[]string, bool) {
	if o == nil || o.IpVec == nil {
		return nil, false
	}
	return &o.IpVec, true
}

// HasIpVec returns a boolean if a field has been set.
func (o *OracleVlanInfo) HasIpVec() bool {
	if o != nil && o.IpVec != nil {
		return true
	}

	return false
}

// SetIpVec gets a reference to the given []string and assigns it to the IpVec field.
func (o *OracleVlanInfo) SetIpVec(v []string) {
	o.IpVec = v
}

// GetSubnetIp returns the SubnetIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleVlanInfo) GetSubnetIp() string {
	if o == nil || o.SubnetIp.Get() == nil {
		var ret string
		return ret
	}
	return *o.SubnetIp.Get()
}

// GetSubnetIpOk returns a tuple with the SubnetIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleVlanInfo) GetSubnetIpOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SubnetIp.Get(), o.SubnetIp.IsSet()
}

// HasSubnetIp returns a boolean if a field has been set.
func (o *OracleVlanInfo) HasSubnetIp() bool {
	if o != nil && o.SubnetIp.IsSet() {
		return true
	}

	return false
}

// SetSubnetIp gets a reference to the given NullableString and assigns it to the SubnetIp field.
func (o *OracleVlanInfo) SetSubnetIp(v string) {
	o.SubnetIp.Set(&v)
}
// SetSubnetIpNil sets the value for SubnetIp to be an explicit nil
func (o *OracleVlanInfo) SetSubnetIpNil() {
	o.SubnetIp.Set(nil)
}

// UnsetSubnetIp ensures that no value is present for SubnetIp, not even an explicit nil
func (o *OracleVlanInfo) UnsetSubnetIp() {
	o.SubnetIp.Unset()
}

func (o OracleVlanInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Gateway.IsSet() {
		toSerialize["gateway"] = o.Gateway.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.IpVec != nil {
		toSerialize["ipVec"] = o.IpVec
	}
	if o.SubnetIp.IsSet() {
		toSerialize["subnetIp"] = o.SubnetIp.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableOracleVlanInfo struct {
	value *OracleVlanInfo
	isSet bool
}

func (v NullableOracleVlanInfo) Get() *OracleVlanInfo {
	return v.value
}

func (v *NullableOracleVlanInfo) Set(val *OracleVlanInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleVlanInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleVlanInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleVlanInfo(val *OracleVlanInfo) *NullableOracleVlanInfo {
	return &NullableOracleVlanInfo{value: val, isSet: true}
}

func (v NullableOracleVlanInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleVlanInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


