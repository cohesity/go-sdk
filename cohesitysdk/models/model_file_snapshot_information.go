/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// FileSnapshotInformation Specifies the information about the snapshot that contains the file or folder. In addition, information about the file or folder is provided.
type FileSnapshotInformation struct {
	// If true, this snapshot is located on an archival target (such as a tape or AWS).
	HasArchivalCopy NullableBool `json:"hasArchivalCopy,omitempty"`
	// If true, this snapshot is located on a local Cohesity Cluster.
	HasLocalCopy NullableBool `json:"hasLocalCopy,omitempty"`
	// If true, this snapshot is located on a Remote Cohesity Cluster.
	HasRemoteCopy NullableBool `json:"hasRemoteCopy,omitempty"`
	// Specifies the time when the file or folder was last modified. Specified as a Unix epoch Timestamp (in microseconds).
	ModifiedTimeUsecs NullableInt64 `json:"modifiedTimeUsecs,omitempty"`
	// Specifies the list of replication information about the current snapshot.
	ReplicaInfoList []ReplicaInfo `json:"replicaInfoList,omitempty"`
	// Specifies the size of the file or folder in bytes.
	SizeBytes NullableInt64 `json:"sizeBytes,omitempty"`
	Snapshot *SnapshotAttempt `json:"snapshot,omitempty"`
}

// NewFileSnapshotInformation instantiates a new FileSnapshotInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileSnapshotInformation() *FileSnapshotInformation {
	this := FileSnapshotInformation{}
	return &this
}

// NewFileSnapshotInformationWithDefaults instantiates a new FileSnapshotInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileSnapshotInformationWithDefaults() *FileSnapshotInformation {
	this := FileSnapshotInformation{}
	return &this
}

// GetHasArchivalCopy returns the HasArchivalCopy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileSnapshotInformation) GetHasArchivalCopy() bool {
	if o == nil || o.HasArchivalCopy.Get() == nil {
		var ret bool
		return ret
	}
	return *o.HasArchivalCopy.Get()
}

// GetHasArchivalCopyOk returns a tuple with the HasArchivalCopy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileSnapshotInformation) GetHasArchivalCopyOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HasArchivalCopy.Get(), o.HasArchivalCopy.IsSet()
}

// HasHasArchivalCopy returns a boolean if a field has been set.
func (o *FileSnapshotInformation) HasHasArchivalCopy() bool {
	if o != nil && o.HasArchivalCopy.IsSet() {
		return true
	}

	return false
}

// SetHasArchivalCopy gets a reference to the given NullableBool and assigns it to the HasArchivalCopy field.
func (o *FileSnapshotInformation) SetHasArchivalCopy(v bool) {
	o.HasArchivalCopy.Set(&v)
}
// SetHasArchivalCopyNil sets the value for HasArchivalCopy to be an explicit nil
func (o *FileSnapshotInformation) SetHasArchivalCopyNil() {
	o.HasArchivalCopy.Set(nil)
}

// UnsetHasArchivalCopy ensures that no value is present for HasArchivalCopy, not even an explicit nil
func (o *FileSnapshotInformation) UnsetHasArchivalCopy() {
	o.HasArchivalCopy.Unset()
}

// GetHasLocalCopy returns the HasLocalCopy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileSnapshotInformation) GetHasLocalCopy() bool {
	if o == nil || o.HasLocalCopy.Get() == nil {
		var ret bool
		return ret
	}
	return *o.HasLocalCopy.Get()
}

// GetHasLocalCopyOk returns a tuple with the HasLocalCopy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileSnapshotInformation) GetHasLocalCopyOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HasLocalCopy.Get(), o.HasLocalCopy.IsSet()
}

// HasHasLocalCopy returns a boolean if a field has been set.
func (o *FileSnapshotInformation) HasHasLocalCopy() bool {
	if o != nil && o.HasLocalCopy.IsSet() {
		return true
	}

	return false
}

// SetHasLocalCopy gets a reference to the given NullableBool and assigns it to the HasLocalCopy field.
func (o *FileSnapshotInformation) SetHasLocalCopy(v bool) {
	o.HasLocalCopy.Set(&v)
}
// SetHasLocalCopyNil sets the value for HasLocalCopy to be an explicit nil
func (o *FileSnapshotInformation) SetHasLocalCopyNil() {
	o.HasLocalCopy.Set(nil)
}

// UnsetHasLocalCopy ensures that no value is present for HasLocalCopy, not even an explicit nil
func (o *FileSnapshotInformation) UnsetHasLocalCopy() {
	o.HasLocalCopy.Unset()
}

// GetHasRemoteCopy returns the HasRemoteCopy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileSnapshotInformation) GetHasRemoteCopy() bool {
	if o == nil || o.HasRemoteCopy.Get() == nil {
		var ret bool
		return ret
	}
	return *o.HasRemoteCopy.Get()
}

// GetHasRemoteCopyOk returns a tuple with the HasRemoteCopy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileSnapshotInformation) GetHasRemoteCopyOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HasRemoteCopy.Get(), o.HasRemoteCopy.IsSet()
}

// HasHasRemoteCopy returns a boolean if a field has been set.
func (o *FileSnapshotInformation) HasHasRemoteCopy() bool {
	if o != nil && o.HasRemoteCopy.IsSet() {
		return true
	}

	return false
}

// SetHasRemoteCopy gets a reference to the given NullableBool and assigns it to the HasRemoteCopy field.
func (o *FileSnapshotInformation) SetHasRemoteCopy(v bool) {
	o.HasRemoteCopy.Set(&v)
}
// SetHasRemoteCopyNil sets the value for HasRemoteCopy to be an explicit nil
func (o *FileSnapshotInformation) SetHasRemoteCopyNil() {
	o.HasRemoteCopy.Set(nil)
}

// UnsetHasRemoteCopy ensures that no value is present for HasRemoteCopy, not even an explicit nil
func (o *FileSnapshotInformation) UnsetHasRemoteCopy() {
	o.HasRemoteCopy.Unset()
}

// GetModifiedTimeUsecs returns the ModifiedTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileSnapshotInformation) GetModifiedTimeUsecs() int64 {
	if o == nil || o.ModifiedTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ModifiedTimeUsecs.Get()
}

// GetModifiedTimeUsecsOk returns a tuple with the ModifiedTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileSnapshotInformation) GetModifiedTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ModifiedTimeUsecs.Get(), o.ModifiedTimeUsecs.IsSet()
}

// HasModifiedTimeUsecs returns a boolean if a field has been set.
func (o *FileSnapshotInformation) HasModifiedTimeUsecs() bool {
	if o != nil && o.ModifiedTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetModifiedTimeUsecs gets a reference to the given NullableInt64 and assigns it to the ModifiedTimeUsecs field.
func (o *FileSnapshotInformation) SetModifiedTimeUsecs(v int64) {
	o.ModifiedTimeUsecs.Set(&v)
}
// SetModifiedTimeUsecsNil sets the value for ModifiedTimeUsecs to be an explicit nil
func (o *FileSnapshotInformation) SetModifiedTimeUsecsNil() {
	o.ModifiedTimeUsecs.Set(nil)
}

// UnsetModifiedTimeUsecs ensures that no value is present for ModifiedTimeUsecs, not even an explicit nil
func (o *FileSnapshotInformation) UnsetModifiedTimeUsecs() {
	o.ModifiedTimeUsecs.Unset()
}

// GetReplicaInfoList returns the ReplicaInfoList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileSnapshotInformation) GetReplicaInfoList() []ReplicaInfo {
	if o == nil  {
		var ret []ReplicaInfo
		return ret
	}
	return o.ReplicaInfoList
}

// GetReplicaInfoListOk returns a tuple with the ReplicaInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileSnapshotInformation) GetReplicaInfoListOk() (*[]ReplicaInfo, bool) {
	if o == nil || o.ReplicaInfoList == nil {
		return nil, false
	}
	return &o.ReplicaInfoList, true
}

// HasReplicaInfoList returns a boolean if a field has been set.
func (o *FileSnapshotInformation) HasReplicaInfoList() bool {
	if o != nil && o.ReplicaInfoList != nil {
		return true
	}

	return false
}

// SetReplicaInfoList gets a reference to the given []ReplicaInfo and assigns it to the ReplicaInfoList field.
func (o *FileSnapshotInformation) SetReplicaInfoList(v []ReplicaInfo) {
	o.ReplicaInfoList = v
}

// GetSizeBytes returns the SizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileSnapshotInformation) GetSizeBytes() int64 {
	if o == nil || o.SizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SizeBytes.Get()
}

// GetSizeBytesOk returns a tuple with the SizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileSnapshotInformation) GetSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SizeBytes.Get(), o.SizeBytes.IsSet()
}

// HasSizeBytes returns a boolean if a field has been set.
func (o *FileSnapshotInformation) HasSizeBytes() bool {
	if o != nil && o.SizeBytes.IsSet() {
		return true
	}

	return false
}

// SetSizeBytes gets a reference to the given NullableInt64 and assigns it to the SizeBytes field.
func (o *FileSnapshotInformation) SetSizeBytes(v int64) {
	o.SizeBytes.Set(&v)
}
// SetSizeBytesNil sets the value for SizeBytes to be an explicit nil
func (o *FileSnapshotInformation) SetSizeBytesNil() {
	o.SizeBytes.Set(nil)
}

// UnsetSizeBytes ensures that no value is present for SizeBytes, not even an explicit nil
func (o *FileSnapshotInformation) UnsetSizeBytes() {
	o.SizeBytes.Unset()
}

// GetSnapshot returns the Snapshot field value if set, zero value otherwise.
func (o *FileSnapshotInformation) GetSnapshot() SnapshotAttempt {
	if o == nil || o.Snapshot == nil {
		var ret SnapshotAttempt
		return ret
	}
	return *o.Snapshot
}

// GetSnapshotOk returns a tuple with the Snapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSnapshotInformation) GetSnapshotOk() (*SnapshotAttempt, bool) {
	if o == nil || o.Snapshot == nil {
		return nil, false
	}
	return o.Snapshot, true
}

// HasSnapshot returns a boolean if a field has been set.
func (o *FileSnapshotInformation) HasSnapshot() bool {
	if o != nil && o.Snapshot != nil {
		return true
	}

	return false
}

// SetSnapshot gets a reference to the given SnapshotAttempt and assigns it to the Snapshot field.
func (o *FileSnapshotInformation) SetSnapshot(v SnapshotAttempt) {
	o.Snapshot = &v
}

func (o FileSnapshotInformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.HasArchivalCopy.IsSet() {
		toSerialize["hasArchivalCopy"] = o.HasArchivalCopy.Get()
	}
	if o.HasLocalCopy.IsSet() {
		toSerialize["hasLocalCopy"] = o.HasLocalCopy.Get()
	}
	if o.HasRemoteCopy.IsSet() {
		toSerialize["hasRemoteCopy"] = o.HasRemoteCopy.Get()
	}
	if o.ModifiedTimeUsecs.IsSet() {
		toSerialize["modifiedTimeUsecs"] = o.ModifiedTimeUsecs.Get()
	}
	if o.ReplicaInfoList != nil {
		toSerialize["replicaInfoList"] = o.ReplicaInfoList
	}
	if o.SizeBytes.IsSet() {
		toSerialize["sizeBytes"] = o.SizeBytes.Get()
	}
	if o.Snapshot != nil {
		toSerialize["snapshot"] = o.Snapshot
	}
	return json.Marshal(toSerialize)
}

type NullableFileSnapshotInformation struct {
	value *FileSnapshotInformation
	isSet bool
}

func (v NullableFileSnapshotInformation) Get() *FileSnapshotInformation {
	return v.value
}

func (v *NullableFileSnapshotInformation) Set(val *FileSnapshotInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableFileSnapshotInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableFileSnapshotInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileSnapshotInformation(val *FileSnapshotInformation) *NullableFileSnapshotInformation {
	return &NullableFileSnapshotInformation{value: val, isSet: true}
}

func (v NullableFileSnapshotInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileSnapshotInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


