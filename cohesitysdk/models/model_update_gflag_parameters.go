/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// UpdateGflagParameters Specifies the parameters for updating service gflags.
type UpdateGflagParameters struct {
	// Specifies whether to apply the change immediately. If set to true, the gflag change will work without restarting the service.
	EffectiveNow NullableBool `json:"effectiveNow,omitempty"`
	// Specifies a list of gflags. These will be added to the existing flags for the service. The values will be overwritten if required. If no value for gflag is specified, this gflag will be reset to default value. If no gflag is specified, all gflags for this service will be reset to default value.
	Gflags []Gflag `json:"gflags,omitempty"`
	// Specifies the reason for clearing gflags.
	Reason NullableString `json:"reason,omitempty"`
	// Specifies the service name. 'kApollo' is a service for reclaiming freed disk sectors on Nodes in the SnapFS distributed file system. 'kBridge' is a service for managing the SnapFS distributed file system. 'kGenie' is a service that is responsible for monitoring hardware health on the Cluster. 'kGenieGofer' is a service that links the Genie service to other services on the Cluster. 'kMagneto' is the data protection service of the Cohesity Data Platform. 'kIris' is the service which serves REST API calls to the UI, CLI, and any scripts written by customers. 'kIrisProxy' is a service that links the Iris service to other services on the Cluster. 'kScribe' is the service responsible for storing filesystem metadata. 'kStats' is the service that is responsible for retrieving and aggregating disk metrics across the Cluster. 'kYoda' is an elastic search indexing service. 'kAlerts' is a publisher and subscribing service for alerts. 'kKeychain' is a service for managing disk encryption keys. 'kLogWatcher' is a service that scans the log directory and reduces the number of logs if required. 'kStatsCollector' is a service that periodically logs system stats. 'kGandalf' is a distributed lock service and coordination manager. 'kNexus' indicates the Nexus service. This is the service that is responsible for creation of Clusters and configuration of Nodes and networking. 'kNexusProxy' is a service that links the Nexus service to other services on the Cluster. 'kStorageProxy' is a service for accessing data on external entities. 'kTricorder' is a diagnostic health testing service for Clusters. 'kRtClient' is a reverse tunneling client service. 'kVaultProxy' is a service for managing external targets that Clusters can be backed up to. 'kSmbProxy' is an SMB protocol service. 'kBridgeProxy' is the service that links the Bridge service to other services on the Cluster. 'kLibrarian' is an elastic search indexing service. 'kGroot' is a service for managing replication of SQL databases across multiple nodes in a Cluster. 'kEagleAgent' is a service that is responsible for retrieving information on Cluster health. 'kAthena' is a service for running distributed containerized applications on the Cohesity Data Platform. 'kBifrostBroker' is a service for communicating with the Cohesity proxies for multitenancy. 'kSmb2Proxy' is a new SMB protocol service. 'kOs' can be specified in order to do a full reboot. 'kAtom' is a service for receiving data for the Continuous Data Protection.
	ServiceName NullableString `json:"serviceName"`
}

// NewUpdateGflagParameters instantiates a new UpdateGflagParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateGflagParameters(serviceName NullableString) *UpdateGflagParameters {
	this := UpdateGflagParameters{}
	this.ServiceName = serviceName
	return &this
}

// NewUpdateGflagParametersWithDefaults instantiates a new UpdateGflagParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateGflagParametersWithDefaults() *UpdateGflagParameters {
	this := UpdateGflagParameters{}
	return &this
}

// GetEffectiveNow returns the EffectiveNow field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateGflagParameters) GetEffectiveNow() bool {
	if o == nil || o.EffectiveNow.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EffectiveNow.Get()
}

// GetEffectiveNowOk returns a tuple with the EffectiveNow field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateGflagParameters) GetEffectiveNowOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EffectiveNow.Get(), o.EffectiveNow.IsSet()
}

// HasEffectiveNow returns a boolean if a field has been set.
func (o *UpdateGflagParameters) HasEffectiveNow() bool {
	if o != nil && o.EffectiveNow.IsSet() {
		return true
	}

	return false
}

// SetEffectiveNow gets a reference to the given NullableBool and assigns it to the EffectiveNow field.
func (o *UpdateGflagParameters) SetEffectiveNow(v bool) {
	o.EffectiveNow.Set(&v)
}
// SetEffectiveNowNil sets the value for EffectiveNow to be an explicit nil
func (o *UpdateGflagParameters) SetEffectiveNowNil() {
	o.EffectiveNow.Set(nil)
}

// UnsetEffectiveNow ensures that no value is present for EffectiveNow, not even an explicit nil
func (o *UpdateGflagParameters) UnsetEffectiveNow() {
	o.EffectiveNow.Unset()
}

// GetGflags returns the Gflags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateGflagParameters) GetGflags() []Gflag {
	if o == nil  {
		var ret []Gflag
		return ret
	}
	return o.Gflags
}

// GetGflagsOk returns a tuple with the Gflags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateGflagParameters) GetGflagsOk() (*[]Gflag, bool) {
	if o == nil || o.Gflags == nil {
		return nil, false
	}
	return &o.Gflags, true
}

// HasGflags returns a boolean if a field has been set.
func (o *UpdateGflagParameters) HasGflags() bool {
	if o != nil && o.Gflags != nil {
		return true
	}

	return false
}

// SetGflags gets a reference to the given []Gflag and assigns it to the Gflags field.
func (o *UpdateGflagParameters) SetGflags(v []Gflag) {
	o.Gflags = v
}

// GetReason returns the Reason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateGflagParameters) GetReason() string {
	if o == nil || o.Reason.Get() == nil {
		var ret string
		return ret
	}
	return *o.Reason.Get()
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateGflagParameters) GetReasonOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Reason.Get(), o.Reason.IsSet()
}

// HasReason returns a boolean if a field has been set.
func (o *UpdateGflagParameters) HasReason() bool {
	if o != nil && o.Reason.IsSet() {
		return true
	}

	return false
}

// SetReason gets a reference to the given NullableString and assigns it to the Reason field.
func (o *UpdateGflagParameters) SetReason(v string) {
	o.Reason.Set(&v)
}
// SetReasonNil sets the value for Reason to be an explicit nil
func (o *UpdateGflagParameters) SetReasonNil() {
	o.Reason.Set(nil)
}

// UnsetReason ensures that no value is present for Reason, not even an explicit nil
func (o *UpdateGflagParameters) UnsetReason() {
	o.Reason.Unset()
}

// GetServiceName returns the ServiceName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UpdateGflagParameters) GetServiceName() string {
	if o == nil || o.ServiceName.Get() == nil {
		var ret string
		return ret
	}

	return *o.ServiceName.Get()
}

// GetServiceNameOk returns a tuple with the ServiceName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateGflagParameters) GetServiceNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ServiceName.Get(), o.ServiceName.IsSet()
}

// SetServiceName sets field value
func (o *UpdateGflagParameters) SetServiceName(v string) {
	o.ServiceName.Set(&v)
}

func (o UpdateGflagParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EffectiveNow.IsSet() {
		toSerialize["effectiveNow"] = o.EffectiveNow.Get()
	}
	if o.Gflags != nil {
		toSerialize["gflags"] = o.Gflags
	}
	if o.Reason.IsSet() {
		toSerialize["reason"] = o.Reason.Get()
	}
	if true {
		toSerialize["serviceName"] = o.ServiceName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateGflagParameters struct {
	value *UpdateGflagParameters
	isSet bool
}

func (v NullableUpdateGflagParameters) Get() *UpdateGflagParameters {
	return v.value
}

func (v *NullableUpdateGflagParameters) Set(val *UpdateGflagParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateGflagParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateGflagParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateGflagParameters(val *UpdateGflagParameters) *NullableUpdateGflagParameters {
	return &NullableUpdateGflagParameters{value: val, isSet: true}
}

func (v NullableUpdateGflagParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateGflagParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


