/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// HealthTile Health for Dashboard.
type HealthTile struct {
	// Raw Cluster Capacity in Bytes. This is not usable capacity and does not take replication factor into account.
	CapacityBytes NullableInt64 `json:"capacityBytes,omitempty"`
	// Usage in Bytes on the cloud.
	ClusterCloudUsageBytes NullableInt64 `json:"clusterCloudUsageBytes,omitempty"`
	// Alerts in last 24 hours.
	LastDayAlerts []Alert `json:"lastDayAlerts,omitempty"`
	// Number of Critical Alerts.
	LastDayNumCriticals NullableInt64 `json:"lastDayNumCriticals,omitempty"`
	// Number of Warning Alerts.
	LastDayNumWarnings NullableInt64 `json:"lastDayNumWarnings,omitempty"`
	// Number of nodes in the cluster.
	NumNodes NullableInt32 `json:"numNodes,omitempty"`
	// Number of nodes in the cluster that are unhealthy.
	NumNodesWithIssues NullableInt32 `json:"numNodesWithIssues,omitempty"`
	// Percent the cluster is full.
	PercentFull NullableFloat32 `json:"percentFull,omitempty"`
	// Raw Bytes used in the cluster.
	RawUsedBytes NullableInt64 `json:"rawUsedBytes,omitempty"`
}

// NewHealthTile instantiates a new HealthTile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHealthTile() *HealthTile {
	this := HealthTile{}
	return &this
}

// NewHealthTileWithDefaults instantiates a new HealthTile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHealthTileWithDefaults() *HealthTile {
	this := HealthTile{}
	return &this
}

// GetCapacityBytes returns the CapacityBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HealthTile) GetCapacityBytes() int64 {
	if o == nil || o.CapacityBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.CapacityBytes.Get()
}

// GetCapacityBytesOk returns a tuple with the CapacityBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HealthTile) GetCapacityBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CapacityBytes.Get(), o.CapacityBytes.IsSet()
}

// HasCapacityBytes returns a boolean if a field has been set.
func (o *HealthTile) HasCapacityBytes() bool {
	if o != nil && o.CapacityBytes.IsSet() {
		return true
	}

	return false
}

// SetCapacityBytes gets a reference to the given NullableInt64 and assigns it to the CapacityBytes field.
func (o *HealthTile) SetCapacityBytes(v int64) {
	o.CapacityBytes.Set(&v)
}
// SetCapacityBytesNil sets the value for CapacityBytes to be an explicit nil
func (o *HealthTile) SetCapacityBytesNil() {
	o.CapacityBytes.Set(nil)
}

// UnsetCapacityBytes ensures that no value is present for CapacityBytes, not even an explicit nil
func (o *HealthTile) UnsetCapacityBytes() {
	o.CapacityBytes.Unset()
}

// GetClusterCloudUsageBytes returns the ClusterCloudUsageBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HealthTile) GetClusterCloudUsageBytes() int64 {
	if o == nil || o.ClusterCloudUsageBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ClusterCloudUsageBytes.Get()
}

// GetClusterCloudUsageBytesOk returns a tuple with the ClusterCloudUsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HealthTile) GetClusterCloudUsageBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterCloudUsageBytes.Get(), o.ClusterCloudUsageBytes.IsSet()
}

// HasClusterCloudUsageBytes returns a boolean if a field has been set.
func (o *HealthTile) HasClusterCloudUsageBytes() bool {
	if o != nil && o.ClusterCloudUsageBytes.IsSet() {
		return true
	}

	return false
}

// SetClusterCloudUsageBytes gets a reference to the given NullableInt64 and assigns it to the ClusterCloudUsageBytes field.
func (o *HealthTile) SetClusterCloudUsageBytes(v int64) {
	o.ClusterCloudUsageBytes.Set(&v)
}
// SetClusterCloudUsageBytesNil sets the value for ClusterCloudUsageBytes to be an explicit nil
func (o *HealthTile) SetClusterCloudUsageBytesNil() {
	o.ClusterCloudUsageBytes.Set(nil)
}

// UnsetClusterCloudUsageBytes ensures that no value is present for ClusterCloudUsageBytes, not even an explicit nil
func (o *HealthTile) UnsetClusterCloudUsageBytes() {
	o.ClusterCloudUsageBytes.Unset()
}

// GetLastDayAlerts returns the LastDayAlerts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HealthTile) GetLastDayAlerts() []Alert {
	if o == nil  {
		var ret []Alert
		return ret
	}
	return o.LastDayAlerts
}

// GetLastDayAlertsOk returns a tuple with the LastDayAlerts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HealthTile) GetLastDayAlertsOk() (*[]Alert, bool) {
	if o == nil || o.LastDayAlerts == nil {
		return nil, false
	}
	return &o.LastDayAlerts, true
}

// HasLastDayAlerts returns a boolean if a field has been set.
func (o *HealthTile) HasLastDayAlerts() bool {
	if o != nil && o.LastDayAlerts != nil {
		return true
	}

	return false
}

// SetLastDayAlerts gets a reference to the given []Alert and assigns it to the LastDayAlerts field.
func (o *HealthTile) SetLastDayAlerts(v []Alert) {
	o.LastDayAlerts = v
}

// GetLastDayNumCriticals returns the LastDayNumCriticals field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HealthTile) GetLastDayNumCriticals() int64 {
	if o == nil || o.LastDayNumCriticals.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LastDayNumCriticals.Get()
}

// GetLastDayNumCriticalsOk returns a tuple with the LastDayNumCriticals field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HealthTile) GetLastDayNumCriticalsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastDayNumCriticals.Get(), o.LastDayNumCriticals.IsSet()
}

// HasLastDayNumCriticals returns a boolean if a field has been set.
func (o *HealthTile) HasLastDayNumCriticals() bool {
	if o != nil && o.LastDayNumCriticals.IsSet() {
		return true
	}

	return false
}

// SetLastDayNumCriticals gets a reference to the given NullableInt64 and assigns it to the LastDayNumCriticals field.
func (o *HealthTile) SetLastDayNumCriticals(v int64) {
	o.LastDayNumCriticals.Set(&v)
}
// SetLastDayNumCriticalsNil sets the value for LastDayNumCriticals to be an explicit nil
func (o *HealthTile) SetLastDayNumCriticalsNil() {
	o.LastDayNumCriticals.Set(nil)
}

// UnsetLastDayNumCriticals ensures that no value is present for LastDayNumCriticals, not even an explicit nil
func (o *HealthTile) UnsetLastDayNumCriticals() {
	o.LastDayNumCriticals.Unset()
}

// GetLastDayNumWarnings returns the LastDayNumWarnings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HealthTile) GetLastDayNumWarnings() int64 {
	if o == nil || o.LastDayNumWarnings.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LastDayNumWarnings.Get()
}

// GetLastDayNumWarningsOk returns a tuple with the LastDayNumWarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HealthTile) GetLastDayNumWarningsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastDayNumWarnings.Get(), o.LastDayNumWarnings.IsSet()
}

// HasLastDayNumWarnings returns a boolean if a field has been set.
func (o *HealthTile) HasLastDayNumWarnings() bool {
	if o != nil && o.LastDayNumWarnings.IsSet() {
		return true
	}

	return false
}

// SetLastDayNumWarnings gets a reference to the given NullableInt64 and assigns it to the LastDayNumWarnings field.
func (o *HealthTile) SetLastDayNumWarnings(v int64) {
	o.LastDayNumWarnings.Set(&v)
}
// SetLastDayNumWarningsNil sets the value for LastDayNumWarnings to be an explicit nil
func (o *HealthTile) SetLastDayNumWarningsNil() {
	o.LastDayNumWarnings.Set(nil)
}

// UnsetLastDayNumWarnings ensures that no value is present for LastDayNumWarnings, not even an explicit nil
func (o *HealthTile) UnsetLastDayNumWarnings() {
	o.LastDayNumWarnings.Unset()
}

// GetNumNodes returns the NumNodes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HealthTile) GetNumNodes() int32 {
	if o == nil || o.NumNodes.Get() == nil {
		var ret int32
		return ret
	}
	return *o.NumNodes.Get()
}

// GetNumNodesOk returns a tuple with the NumNodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HealthTile) GetNumNodesOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumNodes.Get(), o.NumNodes.IsSet()
}

// HasNumNodes returns a boolean if a field has been set.
func (o *HealthTile) HasNumNodes() bool {
	if o != nil && o.NumNodes.IsSet() {
		return true
	}

	return false
}

// SetNumNodes gets a reference to the given NullableInt32 and assigns it to the NumNodes field.
func (o *HealthTile) SetNumNodes(v int32) {
	o.NumNodes.Set(&v)
}
// SetNumNodesNil sets the value for NumNodes to be an explicit nil
func (o *HealthTile) SetNumNodesNil() {
	o.NumNodes.Set(nil)
}

// UnsetNumNodes ensures that no value is present for NumNodes, not even an explicit nil
func (o *HealthTile) UnsetNumNodes() {
	o.NumNodes.Unset()
}

// GetNumNodesWithIssues returns the NumNodesWithIssues field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HealthTile) GetNumNodesWithIssues() int32 {
	if o == nil || o.NumNodesWithIssues.Get() == nil {
		var ret int32
		return ret
	}
	return *o.NumNodesWithIssues.Get()
}

// GetNumNodesWithIssuesOk returns a tuple with the NumNodesWithIssues field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HealthTile) GetNumNodesWithIssuesOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumNodesWithIssues.Get(), o.NumNodesWithIssues.IsSet()
}

// HasNumNodesWithIssues returns a boolean if a field has been set.
func (o *HealthTile) HasNumNodesWithIssues() bool {
	if o != nil && o.NumNodesWithIssues.IsSet() {
		return true
	}

	return false
}

// SetNumNodesWithIssues gets a reference to the given NullableInt32 and assigns it to the NumNodesWithIssues field.
func (o *HealthTile) SetNumNodesWithIssues(v int32) {
	o.NumNodesWithIssues.Set(&v)
}
// SetNumNodesWithIssuesNil sets the value for NumNodesWithIssues to be an explicit nil
func (o *HealthTile) SetNumNodesWithIssuesNil() {
	o.NumNodesWithIssues.Set(nil)
}

// UnsetNumNodesWithIssues ensures that no value is present for NumNodesWithIssues, not even an explicit nil
func (o *HealthTile) UnsetNumNodesWithIssues() {
	o.NumNodesWithIssues.Unset()
}

// GetPercentFull returns the PercentFull field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HealthTile) GetPercentFull() float32 {
	if o == nil || o.PercentFull.Get() == nil {
		var ret float32
		return ret
	}
	return *o.PercentFull.Get()
}

// GetPercentFullOk returns a tuple with the PercentFull field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HealthTile) GetPercentFullOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PercentFull.Get(), o.PercentFull.IsSet()
}

// HasPercentFull returns a boolean if a field has been set.
func (o *HealthTile) HasPercentFull() bool {
	if o != nil && o.PercentFull.IsSet() {
		return true
	}

	return false
}

// SetPercentFull gets a reference to the given NullableFloat32 and assigns it to the PercentFull field.
func (o *HealthTile) SetPercentFull(v float32) {
	o.PercentFull.Set(&v)
}
// SetPercentFullNil sets the value for PercentFull to be an explicit nil
func (o *HealthTile) SetPercentFullNil() {
	o.PercentFull.Set(nil)
}

// UnsetPercentFull ensures that no value is present for PercentFull, not even an explicit nil
func (o *HealthTile) UnsetPercentFull() {
	o.PercentFull.Unset()
}

// GetRawUsedBytes returns the RawUsedBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HealthTile) GetRawUsedBytes() int64 {
	if o == nil || o.RawUsedBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RawUsedBytes.Get()
}

// GetRawUsedBytesOk returns a tuple with the RawUsedBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HealthTile) GetRawUsedBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RawUsedBytes.Get(), o.RawUsedBytes.IsSet()
}

// HasRawUsedBytes returns a boolean if a field has been set.
func (o *HealthTile) HasRawUsedBytes() bool {
	if o != nil && o.RawUsedBytes.IsSet() {
		return true
	}

	return false
}

// SetRawUsedBytes gets a reference to the given NullableInt64 and assigns it to the RawUsedBytes field.
func (o *HealthTile) SetRawUsedBytes(v int64) {
	o.RawUsedBytes.Set(&v)
}
// SetRawUsedBytesNil sets the value for RawUsedBytes to be an explicit nil
func (o *HealthTile) SetRawUsedBytesNil() {
	o.RawUsedBytes.Set(nil)
}

// UnsetRawUsedBytes ensures that no value is present for RawUsedBytes, not even an explicit nil
func (o *HealthTile) UnsetRawUsedBytes() {
	o.RawUsedBytes.Unset()
}

func (o HealthTile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CapacityBytes.IsSet() {
		toSerialize["capacityBytes"] = o.CapacityBytes.Get()
	}
	if o.ClusterCloudUsageBytes.IsSet() {
		toSerialize["clusterCloudUsageBytes"] = o.ClusterCloudUsageBytes.Get()
	}
	if o.LastDayAlerts != nil {
		toSerialize["lastDayAlerts"] = o.LastDayAlerts
	}
	if o.LastDayNumCriticals.IsSet() {
		toSerialize["lastDayNumCriticals"] = o.LastDayNumCriticals.Get()
	}
	if o.LastDayNumWarnings.IsSet() {
		toSerialize["lastDayNumWarnings"] = o.LastDayNumWarnings.Get()
	}
	if o.NumNodes.IsSet() {
		toSerialize["numNodes"] = o.NumNodes.Get()
	}
	if o.NumNodesWithIssues.IsSet() {
		toSerialize["numNodesWithIssues"] = o.NumNodesWithIssues.Get()
	}
	if o.PercentFull.IsSet() {
		toSerialize["percentFull"] = o.PercentFull.Get()
	}
	if o.RawUsedBytes.IsSet() {
		toSerialize["rawUsedBytes"] = o.RawUsedBytes.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableHealthTile struct {
	value *HealthTile
	isSet bool
}

func (v NullableHealthTile) Get() *HealthTile {
	return v.value
}

func (v *NullableHealthTile) Set(val *HealthTile) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthTile) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthTile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthTile(val *HealthTile) *NullableHealthTile {
	return &NullableHealthTile{value: val, isSet: true}
}

func (v NullableHealthTile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthTile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


