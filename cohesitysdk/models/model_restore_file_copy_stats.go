/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// RestoreFileCopyStats This message captures the progress information regarding restore of file/directory.
type RestoreFileCopyStats struct {
	// This will be set to true if the estimation step was skipped. NOTE: If estimation is skipped, then progress info will not be available.
	EstimationSkipped NullableBool `json:"estimationSkipped,omitempty"`
	// Number of bytes copied so far.
	NumBytesCopied NullableInt64 `json:"numBytesCopied,omitempty"`
	// Number of directories copied so far. NOTE: This just means the creation of directory (not the contents of the directory).
	NumDirectoriesCopied NullableInt32 `json:"numDirectoriesCopied,omitempty"`
	// Number of files copied so far.
	NumFilesCopied NullableInt32 `json:"numFilesCopied,omitempty"`
	// Total number of bytes to copy.
	TotalBytesToCopy NullableInt64 `json:"totalBytesToCopy,omitempty"`
	// Total number of directories to copy. NOTE: This just means the creation of directory (not the contents of the directory).
	TotalDirectoriesToCopy NullableInt32 `json:"totalDirectoriesToCopy,omitempty"`
	// Total number of files to copy.
	TotalFilesToCopy NullableInt32 `json:"totalFilesToCopy,omitempty"`
}

// NewRestoreFileCopyStats instantiates a new RestoreFileCopyStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreFileCopyStats() *RestoreFileCopyStats {
	this := RestoreFileCopyStats{}
	return &this
}

// NewRestoreFileCopyStatsWithDefaults instantiates a new RestoreFileCopyStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreFileCopyStatsWithDefaults() *RestoreFileCopyStats {
	this := RestoreFileCopyStats{}
	return &this
}

// GetEstimationSkipped returns the EstimationSkipped field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFileCopyStats) GetEstimationSkipped() bool {
	if o == nil || o.EstimationSkipped.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EstimationSkipped.Get()
}

// GetEstimationSkippedOk returns a tuple with the EstimationSkipped field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFileCopyStats) GetEstimationSkippedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EstimationSkipped.Get(), o.EstimationSkipped.IsSet()
}

// HasEstimationSkipped returns a boolean if a field has been set.
func (o *RestoreFileCopyStats) HasEstimationSkipped() bool {
	if o != nil && o.EstimationSkipped.IsSet() {
		return true
	}

	return false
}

// SetEstimationSkipped gets a reference to the given NullableBool and assigns it to the EstimationSkipped field.
func (o *RestoreFileCopyStats) SetEstimationSkipped(v bool) {
	o.EstimationSkipped.Set(&v)
}
// SetEstimationSkippedNil sets the value for EstimationSkipped to be an explicit nil
func (o *RestoreFileCopyStats) SetEstimationSkippedNil() {
	o.EstimationSkipped.Set(nil)
}

// UnsetEstimationSkipped ensures that no value is present for EstimationSkipped, not even an explicit nil
func (o *RestoreFileCopyStats) UnsetEstimationSkipped() {
	o.EstimationSkipped.Unset()
}

// GetNumBytesCopied returns the NumBytesCopied field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFileCopyStats) GetNumBytesCopied() int64 {
	if o == nil || o.NumBytesCopied.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NumBytesCopied.Get()
}

// GetNumBytesCopiedOk returns a tuple with the NumBytesCopied field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFileCopyStats) GetNumBytesCopiedOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumBytesCopied.Get(), o.NumBytesCopied.IsSet()
}

// HasNumBytesCopied returns a boolean if a field has been set.
func (o *RestoreFileCopyStats) HasNumBytesCopied() bool {
	if o != nil && o.NumBytesCopied.IsSet() {
		return true
	}

	return false
}

// SetNumBytesCopied gets a reference to the given NullableInt64 and assigns it to the NumBytesCopied field.
func (o *RestoreFileCopyStats) SetNumBytesCopied(v int64) {
	o.NumBytesCopied.Set(&v)
}
// SetNumBytesCopiedNil sets the value for NumBytesCopied to be an explicit nil
func (o *RestoreFileCopyStats) SetNumBytesCopiedNil() {
	o.NumBytesCopied.Set(nil)
}

// UnsetNumBytesCopied ensures that no value is present for NumBytesCopied, not even an explicit nil
func (o *RestoreFileCopyStats) UnsetNumBytesCopied() {
	o.NumBytesCopied.Unset()
}

// GetNumDirectoriesCopied returns the NumDirectoriesCopied field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFileCopyStats) GetNumDirectoriesCopied() int32 {
	if o == nil || o.NumDirectoriesCopied.Get() == nil {
		var ret int32
		return ret
	}
	return *o.NumDirectoriesCopied.Get()
}

// GetNumDirectoriesCopiedOk returns a tuple with the NumDirectoriesCopied field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFileCopyStats) GetNumDirectoriesCopiedOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumDirectoriesCopied.Get(), o.NumDirectoriesCopied.IsSet()
}

// HasNumDirectoriesCopied returns a boolean if a field has been set.
func (o *RestoreFileCopyStats) HasNumDirectoriesCopied() bool {
	if o != nil && o.NumDirectoriesCopied.IsSet() {
		return true
	}

	return false
}

// SetNumDirectoriesCopied gets a reference to the given NullableInt32 and assigns it to the NumDirectoriesCopied field.
func (o *RestoreFileCopyStats) SetNumDirectoriesCopied(v int32) {
	o.NumDirectoriesCopied.Set(&v)
}
// SetNumDirectoriesCopiedNil sets the value for NumDirectoriesCopied to be an explicit nil
func (o *RestoreFileCopyStats) SetNumDirectoriesCopiedNil() {
	o.NumDirectoriesCopied.Set(nil)
}

// UnsetNumDirectoriesCopied ensures that no value is present for NumDirectoriesCopied, not even an explicit nil
func (o *RestoreFileCopyStats) UnsetNumDirectoriesCopied() {
	o.NumDirectoriesCopied.Unset()
}

// GetNumFilesCopied returns the NumFilesCopied field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFileCopyStats) GetNumFilesCopied() int32 {
	if o == nil || o.NumFilesCopied.Get() == nil {
		var ret int32
		return ret
	}
	return *o.NumFilesCopied.Get()
}

// GetNumFilesCopiedOk returns a tuple with the NumFilesCopied field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFileCopyStats) GetNumFilesCopiedOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumFilesCopied.Get(), o.NumFilesCopied.IsSet()
}

// HasNumFilesCopied returns a boolean if a field has been set.
func (o *RestoreFileCopyStats) HasNumFilesCopied() bool {
	if o != nil && o.NumFilesCopied.IsSet() {
		return true
	}

	return false
}

// SetNumFilesCopied gets a reference to the given NullableInt32 and assigns it to the NumFilesCopied field.
func (o *RestoreFileCopyStats) SetNumFilesCopied(v int32) {
	o.NumFilesCopied.Set(&v)
}
// SetNumFilesCopiedNil sets the value for NumFilesCopied to be an explicit nil
func (o *RestoreFileCopyStats) SetNumFilesCopiedNil() {
	o.NumFilesCopied.Set(nil)
}

// UnsetNumFilesCopied ensures that no value is present for NumFilesCopied, not even an explicit nil
func (o *RestoreFileCopyStats) UnsetNumFilesCopied() {
	o.NumFilesCopied.Unset()
}

// GetTotalBytesToCopy returns the TotalBytesToCopy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFileCopyStats) GetTotalBytesToCopy() int64 {
	if o == nil || o.TotalBytesToCopy.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TotalBytesToCopy.Get()
}

// GetTotalBytesToCopyOk returns a tuple with the TotalBytesToCopy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFileCopyStats) GetTotalBytesToCopyOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TotalBytesToCopy.Get(), o.TotalBytesToCopy.IsSet()
}

// HasTotalBytesToCopy returns a boolean if a field has been set.
func (o *RestoreFileCopyStats) HasTotalBytesToCopy() bool {
	if o != nil && o.TotalBytesToCopy.IsSet() {
		return true
	}

	return false
}

// SetTotalBytesToCopy gets a reference to the given NullableInt64 and assigns it to the TotalBytesToCopy field.
func (o *RestoreFileCopyStats) SetTotalBytesToCopy(v int64) {
	o.TotalBytesToCopy.Set(&v)
}
// SetTotalBytesToCopyNil sets the value for TotalBytesToCopy to be an explicit nil
func (o *RestoreFileCopyStats) SetTotalBytesToCopyNil() {
	o.TotalBytesToCopy.Set(nil)
}

// UnsetTotalBytesToCopy ensures that no value is present for TotalBytesToCopy, not even an explicit nil
func (o *RestoreFileCopyStats) UnsetTotalBytesToCopy() {
	o.TotalBytesToCopy.Unset()
}

// GetTotalDirectoriesToCopy returns the TotalDirectoriesToCopy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFileCopyStats) GetTotalDirectoriesToCopy() int32 {
	if o == nil || o.TotalDirectoriesToCopy.Get() == nil {
		var ret int32
		return ret
	}
	return *o.TotalDirectoriesToCopy.Get()
}

// GetTotalDirectoriesToCopyOk returns a tuple with the TotalDirectoriesToCopy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFileCopyStats) GetTotalDirectoriesToCopyOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TotalDirectoriesToCopy.Get(), o.TotalDirectoriesToCopy.IsSet()
}

// HasTotalDirectoriesToCopy returns a boolean if a field has been set.
func (o *RestoreFileCopyStats) HasTotalDirectoriesToCopy() bool {
	if o != nil && o.TotalDirectoriesToCopy.IsSet() {
		return true
	}

	return false
}

// SetTotalDirectoriesToCopy gets a reference to the given NullableInt32 and assigns it to the TotalDirectoriesToCopy field.
func (o *RestoreFileCopyStats) SetTotalDirectoriesToCopy(v int32) {
	o.TotalDirectoriesToCopy.Set(&v)
}
// SetTotalDirectoriesToCopyNil sets the value for TotalDirectoriesToCopy to be an explicit nil
func (o *RestoreFileCopyStats) SetTotalDirectoriesToCopyNil() {
	o.TotalDirectoriesToCopy.Set(nil)
}

// UnsetTotalDirectoriesToCopy ensures that no value is present for TotalDirectoriesToCopy, not even an explicit nil
func (o *RestoreFileCopyStats) UnsetTotalDirectoriesToCopy() {
	o.TotalDirectoriesToCopy.Unset()
}

// GetTotalFilesToCopy returns the TotalFilesToCopy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFileCopyStats) GetTotalFilesToCopy() int32 {
	if o == nil || o.TotalFilesToCopy.Get() == nil {
		var ret int32
		return ret
	}
	return *o.TotalFilesToCopy.Get()
}

// GetTotalFilesToCopyOk returns a tuple with the TotalFilesToCopy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFileCopyStats) GetTotalFilesToCopyOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TotalFilesToCopy.Get(), o.TotalFilesToCopy.IsSet()
}

// HasTotalFilesToCopy returns a boolean if a field has been set.
func (o *RestoreFileCopyStats) HasTotalFilesToCopy() bool {
	if o != nil && o.TotalFilesToCopy.IsSet() {
		return true
	}

	return false
}

// SetTotalFilesToCopy gets a reference to the given NullableInt32 and assigns it to the TotalFilesToCopy field.
func (o *RestoreFileCopyStats) SetTotalFilesToCopy(v int32) {
	o.TotalFilesToCopy.Set(&v)
}
// SetTotalFilesToCopyNil sets the value for TotalFilesToCopy to be an explicit nil
func (o *RestoreFileCopyStats) SetTotalFilesToCopyNil() {
	o.TotalFilesToCopy.Set(nil)
}

// UnsetTotalFilesToCopy ensures that no value is present for TotalFilesToCopy, not even an explicit nil
func (o *RestoreFileCopyStats) UnsetTotalFilesToCopy() {
	o.TotalFilesToCopy.Unset()
}

func (o RestoreFileCopyStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EstimationSkipped.IsSet() {
		toSerialize["estimationSkipped"] = o.EstimationSkipped.Get()
	}
	if o.NumBytesCopied.IsSet() {
		toSerialize["numBytesCopied"] = o.NumBytesCopied.Get()
	}
	if o.NumDirectoriesCopied.IsSet() {
		toSerialize["numDirectoriesCopied"] = o.NumDirectoriesCopied.Get()
	}
	if o.NumFilesCopied.IsSet() {
		toSerialize["numFilesCopied"] = o.NumFilesCopied.Get()
	}
	if o.TotalBytesToCopy.IsSet() {
		toSerialize["totalBytesToCopy"] = o.TotalBytesToCopy.Get()
	}
	if o.TotalDirectoriesToCopy.IsSet() {
		toSerialize["totalDirectoriesToCopy"] = o.TotalDirectoriesToCopy.Get()
	}
	if o.TotalFilesToCopy.IsSet() {
		toSerialize["totalFilesToCopy"] = o.TotalFilesToCopy.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRestoreFileCopyStats struct {
	value *RestoreFileCopyStats
	isSet bool
}

func (v NullableRestoreFileCopyStats) Get() *RestoreFileCopyStats {
	return v.value
}

func (v *NullableRestoreFileCopyStats) Set(val *RestoreFileCopyStats) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreFileCopyStats) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreFileCopyStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreFileCopyStats(val *RestoreFileCopyStats) *NullableRestoreFileCopyStats {
	return &NullableRestoreFileCopyStats{value: val, isSet: true}
}

func (v NullableRestoreFileCopyStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreFileCopyStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


