/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// OracleAppParams Specifies special settings applicable for a app entity i.e database/dataguard.
type OracleAppParams struct {
	// Specifies the source entity id of the selected app entity.
	DatabaseAppId NullableInt64 `json:"databaseAppId,omitempty"`
	// Array of database node channel info.  Specifies the node channel info for all the databases of app entity. Length of this array will be 1 for RAC and Standalone setups.
	NodeChannelList []OracleDatabaseNodeChannel `json:"nodeChannelList,omitempty"`
}

// NewOracleAppParams instantiates a new OracleAppParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleAppParams() *OracleAppParams {
	this := OracleAppParams{}
	return &this
}

// NewOracleAppParamsWithDefaults instantiates a new OracleAppParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleAppParamsWithDefaults() *OracleAppParams {
	this := OracleAppParams{}
	return &this
}

// GetDatabaseAppId returns the DatabaseAppId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleAppParams) GetDatabaseAppId() int64 {
	if o == nil || o.DatabaseAppId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DatabaseAppId.Get()
}

// GetDatabaseAppIdOk returns a tuple with the DatabaseAppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleAppParams) GetDatabaseAppIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DatabaseAppId.Get(), o.DatabaseAppId.IsSet()
}

// HasDatabaseAppId returns a boolean if a field has been set.
func (o *OracleAppParams) HasDatabaseAppId() bool {
	if o != nil && o.DatabaseAppId.IsSet() {
		return true
	}

	return false
}

// SetDatabaseAppId gets a reference to the given NullableInt64 and assigns it to the DatabaseAppId field.
func (o *OracleAppParams) SetDatabaseAppId(v int64) {
	o.DatabaseAppId.Set(&v)
}
// SetDatabaseAppIdNil sets the value for DatabaseAppId to be an explicit nil
func (o *OracleAppParams) SetDatabaseAppIdNil() {
	o.DatabaseAppId.Set(nil)
}

// UnsetDatabaseAppId ensures that no value is present for DatabaseAppId, not even an explicit nil
func (o *OracleAppParams) UnsetDatabaseAppId() {
	o.DatabaseAppId.Unset()
}

// GetNodeChannelList returns the NodeChannelList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleAppParams) GetNodeChannelList() []OracleDatabaseNodeChannel {
	if o == nil  {
		var ret []OracleDatabaseNodeChannel
		return ret
	}
	return o.NodeChannelList
}

// GetNodeChannelListOk returns a tuple with the NodeChannelList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleAppParams) GetNodeChannelListOk() (*[]OracleDatabaseNodeChannel, bool) {
	if o == nil || o.NodeChannelList == nil {
		return nil, false
	}
	return &o.NodeChannelList, true
}

// HasNodeChannelList returns a boolean if a field has been set.
func (o *OracleAppParams) HasNodeChannelList() bool {
	if o != nil && o.NodeChannelList != nil {
		return true
	}

	return false
}

// SetNodeChannelList gets a reference to the given []OracleDatabaseNodeChannel and assigns it to the NodeChannelList field.
func (o *OracleAppParams) SetNodeChannelList(v []OracleDatabaseNodeChannel) {
	o.NodeChannelList = v
}

func (o OracleAppParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DatabaseAppId.IsSet() {
		toSerialize["databaseAppId"] = o.DatabaseAppId.Get()
	}
	if o.NodeChannelList != nil {
		toSerialize["nodeChannelList"] = o.NodeChannelList
	}
	return json.Marshal(toSerialize)
}

type NullableOracleAppParams struct {
	value *OracleAppParams
	isSet bool
}

func (v NullableOracleAppParams) Get() *OracleAppParams {
	return v.value
}

func (v *NullableOracleAppParams) Set(val *OracleAppParams) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleAppParams) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleAppParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleAppParams(val *OracleAppParams) *NullableOracleAppParams {
	return &NullableOracleAppParams{value: val, isSet: true}
}

func (v NullableOracleAppParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleAppParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


