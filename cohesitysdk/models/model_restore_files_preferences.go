/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// RestoreFilesPreferences This message captures preferences from the user while restoring the files on the target.
type RestoreFilesPreferences struct {
	// This must be set to a directory path if restore_to_original_paths is false. All the files and directories restored will be restored under this location.
	AlternateRestoreBaseDirectory NullableString `json:"alternateRestoreBaseDirectory,omitempty"`
	// Whether to continue with the copy in case of encountering an error.
	ContinueOnError NullableBool `json:"continueOnError,omitempty"`
	// Whether to enable encryption for NFS and SMB restores.
	EncryptionEnabled NullableBool `json:"encryptionEnabled,omitempty"`
	// In case of GCP Linux restores, whether to generate ssh keys to connect to the customer's instance.
	GenerateSshKeys NullableBool `json:"generateSshKeys,omitempty"`
	// This is relevant only if restore_to_original_paths is true. If this is true, then already existing files will be overridden, otherwise new files will be skipped.
	OverrideOriginals NullableBool `json:"overrideOriginals,omitempty"`
	// Whether to preserve the ACLs of the original file.
	PreserveAcls NullableBool `json:"preserveAcls,omitempty"`
	// Whether to preserve the original attributes.
	PreserveAttributes NullableBool `json:"preserveAttributes,omitempty"`
	// Whether to preserve the original time stamps.
	PreserveTimestamps NullableBool `json:"preserveTimestamps,omitempty"`
	// If this is true, then files will be restored to original paths.
	RestoreToOriginalPaths NullableBool `json:"restoreToOriginalPaths,omitempty"`
	// Whether to skip the estimation step.
	SkipEstimation NullableBool `json:"skipEstimation,omitempty"`
}

// NewRestoreFilesPreferences instantiates a new RestoreFilesPreferences object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreFilesPreferences() *RestoreFilesPreferences {
	this := RestoreFilesPreferences{}
	return &this
}

// NewRestoreFilesPreferencesWithDefaults instantiates a new RestoreFilesPreferences object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreFilesPreferencesWithDefaults() *RestoreFilesPreferences {
	this := RestoreFilesPreferences{}
	return &this
}

// GetAlternateRestoreBaseDirectory returns the AlternateRestoreBaseDirectory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesPreferences) GetAlternateRestoreBaseDirectory() string {
	if o == nil || o.AlternateRestoreBaseDirectory.Get() == nil {
		var ret string
		return ret
	}
	return *o.AlternateRestoreBaseDirectory.Get()
}

// GetAlternateRestoreBaseDirectoryOk returns a tuple with the AlternateRestoreBaseDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesPreferences) GetAlternateRestoreBaseDirectoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AlternateRestoreBaseDirectory.Get(), o.AlternateRestoreBaseDirectory.IsSet()
}

// HasAlternateRestoreBaseDirectory returns a boolean if a field has been set.
func (o *RestoreFilesPreferences) HasAlternateRestoreBaseDirectory() bool {
	if o != nil && o.AlternateRestoreBaseDirectory.IsSet() {
		return true
	}

	return false
}

// SetAlternateRestoreBaseDirectory gets a reference to the given NullableString and assigns it to the AlternateRestoreBaseDirectory field.
func (o *RestoreFilesPreferences) SetAlternateRestoreBaseDirectory(v string) {
	o.AlternateRestoreBaseDirectory.Set(&v)
}
// SetAlternateRestoreBaseDirectoryNil sets the value for AlternateRestoreBaseDirectory to be an explicit nil
func (o *RestoreFilesPreferences) SetAlternateRestoreBaseDirectoryNil() {
	o.AlternateRestoreBaseDirectory.Set(nil)
}

// UnsetAlternateRestoreBaseDirectory ensures that no value is present for AlternateRestoreBaseDirectory, not even an explicit nil
func (o *RestoreFilesPreferences) UnsetAlternateRestoreBaseDirectory() {
	o.AlternateRestoreBaseDirectory.Unset()
}

// GetContinueOnError returns the ContinueOnError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesPreferences) GetContinueOnError() bool {
	if o == nil || o.ContinueOnError.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ContinueOnError.Get()
}

// GetContinueOnErrorOk returns a tuple with the ContinueOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesPreferences) GetContinueOnErrorOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ContinueOnError.Get(), o.ContinueOnError.IsSet()
}

// HasContinueOnError returns a boolean if a field has been set.
func (o *RestoreFilesPreferences) HasContinueOnError() bool {
	if o != nil && o.ContinueOnError.IsSet() {
		return true
	}

	return false
}

// SetContinueOnError gets a reference to the given NullableBool and assigns it to the ContinueOnError field.
func (o *RestoreFilesPreferences) SetContinueOnError(v bool) {
	o.ContinueOnError.Set(&v)
}
// SetContinueOnErrorNil sets the value for ContinueOnError to be an explicit nil
func (o *RestoreFilesPreferences) SetContinueOnErrorNil() {
	o.ContinueOnError.Set(nil)
}

// UnsetContinueOnError ensures that no value is present for ContinueOnError, not even an explicit nil
func (o *RestoreFilesPreferences) UnsetContinueOnError() {
	o.ContinueOnError.Unset()
}

// GetEncryptionEnabled returns the EncryptionEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesPreferences) GetEncryptionEnabled() bool {
	if o == nil || o.EncryptionEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EncryptionEnabled.Get()
}

// GetEncryptionEnabledOk returns a tuple with the EncryptionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesPreferences) GetEncryptionEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EncryptionEnabled.Get(), o.EncryptionEnabled.IsSet()
}

// HasEncryptionEnabled returns a boolean if a field has been set.
func (o *RestoreFilesPreferences) HasEncryptionEnabled() bool {
	if o != nil && o.EncryptionEnabled.IsSet() {
		return true
	}

	return false
}

// SetEncryptionEnabled gets a reference to the given NullableBool and assigns it to the EncryptionEnabled field.
func (o *RestoreFilesPreferences) SetEncryptionEnabled(v bool) {
	o.EncryptionEnabled.Set(&v)
}
// SetEncryptionEnabledNil sets the value for EncryptionEnabled to be an explicit nil
func (o *RestoreFilesPreferences) SetEncryptionEnabledNil() {
	o.EncryptionEnabled.Set(nil)
}

// UnsetEncryptionEnabled ensures that no value is present for EncryptionEnabled, not even an explicit nil
func (o *RestoreFilesPreferences) UnsetEncryptionEnabled() {
	o.EncryptionEnabled.Unset()
}

// GetGenerateSshKeys returns the GenerateSshKeys field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesPreferences) GetGenerateSshKeys() bool {
	if o == nil || o.GenerateSshKeys.Get() == nil {
		var ret bool
		return ret
	}
	return *o.GenerateSshKeys.Get()
}

// GetGenerateSshKeysOk returns a tuple with the GenerateSshKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesPreferences) GetGenerateSshKeysOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.GenerateSshKeys.Get(), o.GenerateSshKeys.IsSet()
}

// HasGenerateSshKeys returns a boolean if a field has been set.
func (o *RestoreFilesPreferences) HasGenerateSshKeys() bool {
	if o != nil && o.GenerateSshKeys.IsSet() {
		return true
	}

	return false
}

// SetGenerateSshKeys gets a reference to the given NullableBool and assigns it to the GenerateSshKeys field.
func (o *RestoreFilesPreferences) SetGenerateSshKeys(v bool) {
	o.GenerateSshKeys.Set(&v)
}
// SetGenerateSshKeysNil sets the value for GenerateSshKeys to be an explicit nil
func (o *RestoreFilesPreferences) SetGenerateSshKeysNil() {
	o.GenerateSshKeys.Set(nil)
}

// UnsetGenerateSshKeys ensures that no value is present for GenerateSshKeys, not even an explicit nil
func (o *RestoreFilesPreferences) UnsetGenerateSshKeys() {
	o.GenerateSshKeys.Unset()
}

// GetOverrideOriginals returns the OverrideOriginals field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesPreferences) GetOverrideOriginals() bool {
	if o == nil || o.OverrideOriginals.Get() == nil {
		var ret bool
		return ret
	}
	return *o.OverrideOriginals.Get()
}

// GetOverrideOriginalsOk returns a tuple with the OverrideOriginals field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesPreferences) GetOverrideOriginalsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OverrideOriginals.Get(), o.OverrideOriginals.IsSet()
}

// HasOverrideOriginals returns a boolean if a field has been set.
func (o *RestoreFilesPreferences) HasOverrideOriginals() bool {
	if o != nil && o.OverrideOriginals.IsSet() {
		return true
	}

	return false
}

// SetOverrideOriginals gets a reference to the given NullableBool and assigns it to the OverrideOriginals field.
func (o *RestoreFilesPreferences) SetOverrideOriginals(v bool) {
	o.OverrideOriginals.Set(&v)
}
// SetOverrideOriginalsNil sets the value for OverrideOriginals to be an explicit nil
func (o *RestoreFilesPreferences) SetOverrideOriginalsNil() {
	o.OverrideOriginals.Set(nil)
}

// UnsetOverrideOriginals ensures that no value is present for OverrideOriginals, not even an explicit nil
func (o *RestoreFilesPreferences) UnsetOverrideOriginals() {
	o.OverrideOriginals.Unset()
}

// GetPreserveAcls returns the PreserveAcls field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesPreferences) GetPreserveAcls() bool {
	if o == nil || o.PreserveAcls.Get() == nil {
		var ret bool
		return ret
	}
	return *o.PreserveAcls.Get()
}

// GetPreserveAclsOk returns a tuple with the PreserveAcls field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesPreferences) GetPreserveAclsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PreserveAcls.Get(), o.PreserveAcls.IsSet()
}

// HasPreserveAcls returns a boolean if a field has been set.
func (o *RestoreFilesPreferences) HasPreserveAcls() bool {
	if o != nil && o.PreserveAcls.IsSet() {
		return true
	}

	return false
}

// SetPreserveAcls gets a reference to the given NullableBool and assigns it to the PreserveAcls field.
func (o *RestoreFilesPreferences) SetPreserveAcls(v bool) {
	o.PreserveAcls.Set(&v)
}
// SetPreserveAclsNil sets the value for PreserveAcls to be an explicit nil
func (o *RestoreFilesPreferences) SetPreserveAclsNil() {
	o.PreserveAcls.Set(nil)
}

// UnsetPreserveAcls ensures that no value is present for PreserveAcls, not even an explicit nil
func (o *RestoreFilesPreferences) UnsetPreserveAcls() {
	o.PreserveAcls.Unset()
}

// GetPreserveAttributes returns the PreserveAttributes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesPreferences) GetPreserveAttributes() bool {
	if o == nil || o.PreserveAttributes.Get() == nil {
		var ret bool
		return ret
	}
	return *o.PreserveAttributes.Get()
}

// GetPreserveAttributesOk returns a tuple with the PreserveAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesPreferences) GetPreserveAttributesOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PreserveAttributes.Get(), o.PreserveAttributes.IsSet()
}

// HasPreserveAttributes returns a boolean if a field has been set.
func (o *RestoreFilesPreferences) HasPreserveAttributes() bool {
	if o != nil && o.PreserveAttributes.IsSet() {
		return true
	}

	return false
}

// SetPreserveAttributes gets a reference to the given NullableBool and assigns it to the PreserveAttributes field.
func (o *RestoreFilesPreferences) SetPreserveAttributes(v bool) {
	o.PreserveAttributes.Set(&v)
}
// SetPreserveAttributesNil sets the value for PreserveAttributes to be an explicit nil
func (o *RestoreFilesPreferences) SetPreserveAttributesNil() {
	o.PreserveAttributes.Set(nil)
}

// UnsetPreserveAttributes ensures that no value is present for PreserveAttributes, not even an explicit nil
func (o *RestoreFilesPreferences) UnsetPreserveAttributes() {
	o.PreserveAttributes.Unset()
}

// GetPreserveTimestamps returns the PreserveTimestamps field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesPreferences) GetPreserveTimestamps() bool {
	if o == nil || o.PreserveTimestamps.Get() == nil {
		var ret bool
		return ret
	}
	return *o.PreserveTimestamps.Get()
}

// GetPreserveTimestampsOk returns a tuple with the PreserveTimestamps field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesPreferences) GetPreserveTimestampsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PreserveTimestamps.Get(), o.PreserveTimestamps.IsSet()
}

// HasPreserveTimestamps returns a boolean if a field has been set.
func (o *RestoreFilesPreferences) HasPreserveTimestamps() bool {
	if o != nil && o.PreserveTimestamps.IsSet() {
		return true
	}

	return false
}

// SetPreserveTimestamps gets a reference to the given NullableBool and assigns it to the PreserveTimestamps field.
func (o *RestoreFilesPreferences) SetPreserveTimestamps(v bool) {
	o.PreserveTimestamps.Set(&v)
}
// SetPreserveTimestampsNil sets the value for PreserveTimestamps to be an explicit nil
func (o *RestoreFilesPreferences) SetPreserveTimestampsNil() {
	o.PreserveTimestamps.Set(nil)
}

// UnsetPreserveTimestamps ensures that no value is present for PreserveTimestamps, not even an explicit nil
func (o *RestoreFilesPreferences) UnsetPreserveTimestamps() {
	o.PreserveTimestamps.Unset()
}

// GetRestoreToOriginalPaths returns the RestoreToOriginalPaths field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesPreferences) GetRestoreToOriginalPaths() bool {
	if o == nil || o.RestoreToOriginalPaths.Get() == nil {
		var ret bool
		return ret
	}
	return *o.RestoreToOriginalPaths.Get()
}

// GetRestoreToOriginalPathsOk returns a tuple with the RestoreToOriginalPaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesPreferences) GetRestoreToOriginalPathsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RestoreToOriginalPaths.Get(), o.RestoreToOriginalPaths.IsSet()
}

// HasRestoreToOriginalPaths returns a boolean if a field has been set.
func (o *RestoreFilesPreferences) HasRestoreToOriginalPaths() bool {
	if o != nil && o.RestoreToOriginalPaths.IsSet() {
		return true
	}

	return false
}

// SetRestoreToOriginalPaths gets a reference to the given NullableBool and assigns it to the RestoreToOriginalPaths field.
func (o *RestoreFilesPreferences) SetRestoreToOriginalPaths(v bool) {
	o.RestoreToOriginalPaths.Set(&v)
}
// SetRestoreToOriginalPathsNil sets the value for RestoreToOriginalPaths to be an explicit nil
func (o *RestoreFilesPreferences) SetRestoreToOriginalPathsNil() {
	o.RestoreToOriginalPaths.Set(nil)
}

// UnsetRestoreToOriginalPaths ensures that no value is present for RestoreToOriginalPaths, not even an explicit nil
func (o *RestoreFilesPreferences) UnsetRestoreToOriginalPaths() {
	o.RestoreToOriginalPaths.Unset()
}

// GetSkipEstimation returns the SkipEstimation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesPreferences) GetSkipEstimation() bool {
	if o == nil || o.SkipEstimation.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SkipEstimation.Get()
}

// GetSkipEstimationOk returns a tuple with the SkipEstimation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesPreferences) GetSkipEstimationOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SkipEstimation.Get(), o.SkipEstimation.IsSet()
}

// HasSkipEstimation returns a boolean if a field has been set.
func (o *RestoreFilesPreferences) HasSkipEstimation() bool {
	if o != nil && o.SkipEstimation.IsSet() {
		return true
	}

	return false
}

// SetSkipEstimation gets a reference to the given NullableBool and assigns it to the SkipEstimation field.
func (o *RestoreFilesPreferences) SetSkipEstimation(v bool) {
	o.SkipEstimation.Set(&v)
}
// SetSkipEstimationNil sets the value for SkipEstimation to be an explicit nil
func (o *RestoreFilesPreferences) SetSkipEstimationNil() {
	o.SkipEstimation.Set(nil)
}

// UnsetSkipEstimation ensures that no value is present for SkipEstimation, not even an explicit nil
func (o *RestoreFilesPreferences) UnsetSkipEstimation() {
	o.SkipEstimation.Unset()
}

func (o RestoreFilesPreferences) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AlternateRestoreBaseDirectory.IsSet() {
		toSerialize["alternateRestoreBaseDirectory"] = o.AlternateRestoreBaseDirectory.Get()
	}
	if o.ContinueOnError.IsSet() {
		toSerialize["continueOnError"] = o.ContinueOnError.Get()
	}
	if o.EncryptionEnabled.IsSet() {
		toSerialize["encryptionEnabled"] = o.EncryptionEnabled.Get()
	}
	if o.GenerateSshKeys.IsSet() {
		toSerialize["generateSshKeys"] = o.GenerateSshKeys.Get()
	}
	if o.OverrideOriginals.IsSet() {
		toSerialize["overrideOriginals"] = o.OverrideOriginals.Get()
	}
	if o.PreserveAcls.IsSet() {
		toSerialize["preserveAcls"] = o.PreserveAcls.Get()
	}
	if o.PreserveAttributes.IsSet() {
		toSerialize["preserveAttributes"] = o.PreserveAttributes.Get()
	}
	if o.PreserveTimestamps.IsSet() {
		toSerialize["preserveTimestamps"] = o.PreserveTimestamps.Get()
	}
	if o.RestoreToOriginalPaths.IsSet() {
		toSerialize["restoreToOriginalPaths"] = o.RestoreToOriginalPaths.Get()
	}
	if o.SkipEstimation.IsSet() {
		toSerialize["skipEstimation"] = o.SkipEstimation.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRestoreFilesPreferences struct {
	value *RestoreFilesPreferences
	isSet bool
}

func (v NullableRestoreFilesPreferences) Get() *RestoreFilesPreferences {
	return v.value
}

func (v *NullableRestoreFilesPreferences) Set(val *RestoreFilesPreferences) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreFilesPreferences) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreFilesPreferences) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreFilesPreferences(val *RestoreFilesPreferences) *NullableRestoreFilesPreferences {
	return &NullableRestoreFilesPreferences{value: val, isSet: true}
}

func (v NullableRestoreFilesPreferences) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreFilesPreferences) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


