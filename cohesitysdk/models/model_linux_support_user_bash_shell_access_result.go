/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// LinuxSupportUserBashShellAccessResult Specifies the result returned after a successful request to get the linux 'support' user bash shell access token,
type LinuxSupportUserBashShellAccessResult struct {
	// SSH identity key to login as 'support' user.
	SupportUserToken NullableString `json:"supportUserToken,omitempty"`
}

// NewLinuxSupportUserBashShellAccessResult instantiates a new LinuxSupportUserBashShellAccessResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinuxSupportUserBashShellAccessResult() *LinuxSupportUserBashShellAccessResult {
	this := LinuxSupportUserBashShellAccessResult{}
	return &this
}

// NewLinuxSupportUserBashShellAccessResultWithDefaults instantiates a new LinuxSupportUserBashShellAccessResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinuxSupportUserBashShellAccessResultWithDefaults() *LinuxSupportUserBashShellAccessResult {
	this := LinuxSupportUserBashShellAccessResult{}
	return &this
}

// GetSupportUserToken returns the SupportUserToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LinuxSupportUserBashShellAccessResult) GetSupportUserToken() string {
	if o == nil || o.SupportUserToken.Get() == nil {
		var ret string
		return ret
	}
	return *o.SupportUserToken.Get()
}

// GetSupportUserTokenOk returns a tuple with the SupportUserToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LinuxSupportUserBashShellAccessResult) GetSupportUserTokenOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SupportUserToken.Get(), o.SupportUserToken.IsSet()
}

// HasSupportUserToken returns a boolean if a field has been set.
func (o *LinuxSupportUserBashShellAccessResult) HasSupportUserToken() bool {
	if o != nil && o.SupportUserToken.IsSet() {
		return true
	}

	return false
}

// SetSupportUserToken gets a reference to the given NullableString and assigns it to the SupportUserToken field.
func (o *LinuxSupportUserBashShellAccessResult) SetSupportUserToken(v string) {
	o.SupportUserToken.Set(&v)
}
// SetSupportUserTokenNil sets the value for SupportUserToken to be an explicit nil
func (o *LinuxSupportUserBashShellAccessResult) SetSupportUserTokenNil() {
	o.SupportUserToken.Set(nil)
}

// UnsetSupportUserToken ensures that no value is present for SupportUserToken, not even an explicit nil
func (o *LinuxSupportUserBashShellAccessResult) UnsetSupportUserToken() {
	o.SupportUserToken.Unset()
}

func (o LinuxSupportUserBashShellAccessResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SupportUserToken.IsSet() {
		toSerialize["supportUserToken"] = o.SupportUserToken.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableLinuxSupportUserBashShellAccessResult struct {
	value *LinuxSupportUserBashShellAccessResult
	isSet bool
}

func (v NullableLinuxSupportUserBashShellAccessResult) Get() *LinuxSupportUserBashShellAccessResult {
	return v.value
}

func (v *NullableLinuxSupportUserBashShellAccessResult) Set(val *LinuxSupportUserBashShellAccessResult) {
	v.value = val
	v.isSet = true
}

func (v NullableLinuxSupportUserBashShellAccessResult) IsSet() bool {
	return v.isSet
}

func (v *NullableLinuxSupportUserBashShellAccessResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinuxSupportUserBashShellAccessResult(val *LinuxSupportUserBashShellAccessResult) *NullableLinuxSupportUserBashShellAccessResult {
	return &NullableLinuxSupportUserBashShellAccessResult{value: val, isSet: true}
}

func (v NullableLinuxSupportUserBashShellAccessResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinuxSupportUserBashShellAccessResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


