/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// RoleDeleteParameters Specifies the parameters required for deleting one or more roles.
type RoleDeleteParameters struct {
	// Array of Role Names.  Specifies the list of roles to delete which are specified by role names.
	Names []string `json:"names"`
}

// NewRoleDeleteParameters instantiates a new RoleDeleteParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleDeleteParameters(names []string) *RoleDeleteParameters {
	this := RoleDeleteParameters{}
	this.Names = names
	return &this
}

// NewRoleDeleteParametersWithDefaults instantiates a new RoleDeleteParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleDeleteParametersWithDefaults() *RoleDeleteParameters {
	this := RoleDeleteParameters{}
	return &this
}

// GetNames returns the Names field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *RoleDeleteParameters) GetNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Names
}

// GetNamesOk returns a tuple with the Names field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RoleDeleteParameters) GetNamesOk() (*[]string, bool) {
	if o == nil || o.Names == nil {
		return nil, false
	}
	return &o.Names, true
}

// SetNames sets field value
func (o *RoleDeleteParameters) SetNames(v []string) {
	o.Names = v
}

func (o RoleDeleteParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Names != nil {
		toSerialize["names"] = o.Names
	}
	return json.Marshal(toSerialize)
}

type NullableRoleDeleteParameters struct {
	value *RoleDeleteParameters
	isSet bool
}

func (v NullableRoleDeleteParameters) Get() *RoleDeleteParameters {
	return v.value
}

func (v *NullableRoleDeleteParameters) Set(val *RoleDeleteParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleDeleteParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleDeleteParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleDeleteParameters(val *RoleDeleteParameters) *NullableRoleDeleteParameters {
	return &NullableRoleDeleteParameters{value: val, isSet: true}
}

func (v NullableRoleDeleteParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleDeleteParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


