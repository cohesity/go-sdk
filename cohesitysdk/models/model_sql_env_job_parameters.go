/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// SqlEnvJobParameters Specifies job parameters applicable for all 'kSQL' Environment type Protection Sources in a Protection Job.
type SqlEnvJobParameters struct {
	// Specifies the preference for backing up databases that are part of an AAG. Only applicable if 'aagPreferenceFromSqlServer' is set to false or not given. kPrimaryReplicaOnly implies backups should always occur on the primary replica. kSecondaryReplicaOnly implies backups should always occur on the secondary replica. kPreferSecondaryReplica implies secondary replica is preferred for backups. kAnyReplica implies no preference of about whether backups are performed on the primary replica or on a secondary replica. If no secondary replica is available, then performing backups on the primary replica is acceptable.
	AagPreference NullableString `json:"aagPreference,omitempty"`
	// If true, AAG preferences are taken from the SQL server host. If this is set to false or not given, preferences can be overridden by aagBackupPreference.
	AagPreferenceFromSqlServer NullableBool `json:"aagPreferenceFromSqlServer,omitempty"`
	// If true, system databases are backed up. If this is set to false, system databases are not backed up. If this field is not specified, default value is true.
	BackupSystemDatabases NullableBool `json:"backupSystemDatabases,omitempty"`
	// Specifies the type of the 'kFull' backup job. Specifies whether it is Volume level backup or individual files level backup. kSqlVSSVolume implies volume based VSS full backup. kSqlVSSFile implies file based VSS full backup.
	BackupType NullableString `json:"backupType,omitempty"`
	// If set to true, only the volumes associated with databases should be backed up. The user cannot select additional volumes at host level for backup.  If set to false, all the volumes on the host machine will be backed up. In this case, the user can further select the exact set of volumes using host level params.  Note that the volumes associated with selected databases will always be included in the backup.
	BackupVolumesOnly NullableBool `json:"backupVolumesOnly,omitempty"`
	// If true, the backup of type kSqlVssVolume will be incremental after restart
	IncrementalSnapshotUponRestart NullableBool `json:"incrementalSnapshotUponRestart,omitempty"`
	// If true, the backup is a full backup with the copy-only option specified.
	IsCopyOnlyFull NullableBool `json:"isCopyOnlyFull,omitempty"`
	// Number of streams to be used in native sql backup.
	NumStreams NullableInt32 `json:"numStreams,omitempty"`
	// Specifies the preference for backing up user databases on the host. kBackupAllDatabases implies to backup all databases. kBackupAllExceptAAGDatabases implies not to backup AAG databases. kBackupOnlyAAGDatabases implies to backup only AAG databases.
	UserDatabasePreference NullableString `json:"userDatabasePreference,omitempty"`
	// With clause is used for setting clauese in native sql backup.
	WithClause NullableString `json:"withClause,omitempty"`
}

// NewSqlEnvJobParameters instantiates a new SqlEnvJobParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSqlEnvJobParameters() *SqlEnvJobParameters {
	this := SqlEnvJobParameters{}
	return &this
}

// NewSqlEnvJobParametersWithDefaults instantiates a new SqlEnvJobParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSqlEnvJobParametersWithDefaults() *SqlEnvJobParameters {
	this := SqlEnvJobParameters{}
	return &this
}

// GetAagPreference returns the AagPreference field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlEnvJobParameters) GetAagPreference() string {
	if o == nil || o.AagPreference.Get() == nil {
		var ret string
		return ret
	}
	return *o.AagPreference.Get()
}

// GetAagPreferenceOk returns a tuple with the AagPreference field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlEnvJobParameters) GetAagPreferenceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AagPreference.Get(), o.AagPreference.IsSet()
}

// HasAagPreference returns a boolean if a field has been set.
func (o *SqlEnvJobParameters) HasAagPreference() bool {
	if o != nil && o.AagPreference.IsSet() {
		return true
	}

	return false
}

// SetAagPreference gets a reference to the given NullableString and assigns it to the AagPreference field.
func (o *SqlEnvJobParameters) SetAagPreference(v string) {
	o.AagPreference.Set(&v)
}
// SetAagPreferenceNil sets the value for AagPreference to be an explicit nil
func (o *SqlEnvJobParameters) SetAagPreferenceNil() {
	o.AagPreference.Set(nil)
}

// UnsetAagPreference ensures that no value is present for AagPreference, not even an explicit nil
func (o *SqlEnvJobParameters) UnsetAagPreference() {
	o.AagPreference.Unset()
}

// GetAagPreferenceFromSqlServer returns the AagPreferenceFromSqlServer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlEnvJobParameters) GetAagPreferenceFromSqlServer() bool {
	if o == nil || o.AagPreferenceFromSqlServer.Get() == nil {
		var ret bool
		return ret
	}
	return *o.AagPreferenceFromSqlServer.Get()
}

// GetAagPreferenceFromSqlServerOk returns a tuple with the AagPreferenceFromSqlServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlEnvJobParameters) GetAagPreferenceFromSqlServerOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AagPreferenceFromSqlServer.Get(), o.AagPreferenceFromSqlServer.IsSet()
}

// HasAagPreferenceFromSqlServer returns a boolean if a field has been set.
func (o *SqlEnvJobParameters) HasAagPreferenceFromSqlServer() bool {
	if o != nil && o.AagPreferenceFromSqlServer.IsSet() {
		return true
	}

	return false
}

// SetAagPreferenceFromSqlServer gets a reference to the given NullableBool and assigns it to the AagPreferenceFromSqlServer field.
func (o *SqlEnvJobParameters) SetAagPreferenceFromSqlServer(v bool) {
	o.AagPreferenceFromSqlServer.Set(&v)
}
// SetAagPreferenceFromSqlServerNil sets the value for AagPreferenceFromSqlServer to be an explicit nil
func (o *SqlEnvJobParameters) SetAagPreferenceFromSqlServerNil() {
	o.AagPreferenceFromSqlServer.Set(nil)
}

// UnsetAagPreferenceFromSqlServer ensures that no value is present for AagPreferenceFromSqlServer, not even an explicit nil
func (o *SqlEnvJobParameters) UnsetAagPreferenceFromSqlServer() {
	o.AagPreferenceFromSqlServer.Unset()
}

// GetBackupSystemDatabases returns the BackupSystemDatabases field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlEnvJobParameters) GetBackupSystemDatabases() bool {
	if o == nil || o.BackupSystemDatabases.Get() == nil {
		var ret bool
		return ret
	}
	return *o.BackupSystemDatabases.Get()
}

// GetBackupSystemDatabasesOk returns a tuple with the BackupSystemDatabases field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlEnvJobParameters) GetBackupSystemDatabasesOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BackupSystemDatabases.Get(), o.BackupSystemDatabases.IsSet()
}

// HasBackupSystemDatabases returns a boolean if a field has been set.
func (o *SqlEnvJobParameters) HasBackupSystemDatabases() bool {
	if o != nil && o.BackupSystemDatabases.IsSet() {
		return true
	}

	return false
}

// SetBackupSystemDatabases gets a reference to the given NullableBool and assigns it to the BackupSystemDatabases field.
func (o *SqlEnvJobParameters) SetBackupSystemDatabases(v bool) {
	o.BackupSystemDatabases.Set(&v)
}
// SetBackupSystemDatabasesNil sets the value for BackupSystemDatabases to be an explicit nil
func (o *SqlEnvJobParameters) SetBackupSystemDatabasesNil() {
	o.BackupSystemDatabases.Set(nil)
}

// UnsetBackupSystemDatabases ensures that no value is present for BackupSystemDatabases, not even an explicit nil
func (o *SqlEnvJobParameters) UnsetBackupSystemDatabases() {
	o.BackupSystemDatabases.Unset()
}

// GetBackupType returns the BackupType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlEnvJobParameters) GetBackupType() string {
	if o == nil || o.BackupType.Get() == nil {
		var ret string
		return ret
	}
	return *o.BackupType.Get()
}

// GetBackupTypeOk returns a tuple with the BackupType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlEnvJobParameters) GetBackupTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BackupType.Get(), o.BackupType.IsSet()
}

// HasBackupType returns a boolean if a field has been set.
func (o *SqlEnvJobParameters) HasBackupType() bool {
	if o != nil && o.BackupType.IsSet() {
		return true
	}

	return false
}

// SetBackupType gets a reference to the given NullableString and assigns it to the BackupType field.
func (o *SqlEnvJobParameters) SetBackupType(v string) {
	o.BackupType.Set(&v)
}
// SetBackupTypeNil sets the value for BackupType to be an explicit nil
func (o *SqlEnvJobParameters) SetBackupTypeNil() {
	o.BackupType.Set(nil)
}

// UnsetBackupType ensures that no value is present for BackupType, not even an explicit nil
func (o *SqlEnvJobParameters) UnsetBackupType() {
	o.BackupType.Unset()
}

// GetBackupVolumesOnly returns the BackupVolumesOnly field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlEnvJobParameters) GetBackupVolumesOnly() bool {
	if o == nil || o.BackupVolumesOnly.Get() == nil {
		var ret bool
		return ret
	}
	return *o.BackupVolumesOnly.Get()
}

// GetBackupVolumesOnlyOk returns a tuple with the BackupVolumesOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlEnvJobParameters) GetBackupVolumesOnlyOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BackupVolumesOnly.Get(), o.BackupVolumesOnly.IsSet()
}

// HasBackupVolumesOnly returns a boolean if a field has been set.
func (o *SqlEnvJobParameters) HasBackupVolumesOnly() bool {
	if o != nil && o.BackupVolumesOnly.IsSet() {
		return true
	}

	return false
}

// SetBackupVolumesOnly gets a reference to the given NullableBool and assigns it to the BackupVolumesOnly field.
func (o *SqlEnvJobParameters) SetBackupVolumesOnly(v bool) {
	o.BackupVolumesOnly.Set(&v)
}
// SetBackupVolumesOnlyNil sets the value for BackupVolumesOnly to be an explicit nil
func (o *SqlEnvJobParameters) SetBackupVolumesOnlyNil() {
	o.BackupVolumesOnly.Set(nil)
}

// UnsetBackupVolumesOnly ensures that no value is present for BackupVolumesOnly, not even an explicit nil
func (o *SqlEnvJobParameters) UnsetBackupVolumesOnly() {
	o.BackupVolumesOnly.Unset()
}

// GetIncrementalSnapshotUponRestart returns the IncrementalSnapshotUponRestart field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlEnvJobParameters) GetIncrementalSnapshotUponRestart() bool {
	if o == nil || o.IncrementalSnapshotUponRestart.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IncrementalSnapshotUponRestart.Get()
}

// GetIncrementalSnapshotUponRestartOk returns a tuple with the IncrementalSnapshotUponRestart field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlEnvJobParameters) GetIncrementalSnapshotUponRestartOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IncrementalSnapshotUponRestart.Get(), o.IncrementalSnapshotUponRestart.IsSet()
}

// HasIncrementalSnapshotUponRestart returns a boolean if a field has been set.
func (o *SqlEnvJobParameters) HasIncrementalSnapshotUponRestart() bool {
	if o != nil && o.IncrementalSnapshotUponRestart.IsSet() {
		return true
	}

	return false
}

// SetIncrementalSnapshotUponRestart gets a reference to the given NullableBool and assigns it to the IncrementalSnapshotUponRestart field.
func (o *SqlEnvJobParameters) SetIncrementalSnapshotUponRestart(v bool) {
	o.IncrementalSnapshotUponRestart.Set(&v)
}
// SetIncrementalSnapshotUponRestartNil sets the value for IncrementalSnapshotUponRestart to be an explicit nil
func (o *SqlEnvJobParameters) SetIncrementalSnapshotUponRestartNil() {
	o.IncrementalSnapshotUponRestart.Set(nil)
}

// UnsetIncrementalSnapshotUponRestart ensures that no value is present for IncrementalSnapshotUponRestart, not even an explicit nil
func (o *SqlEnvJobParameters) UnsetIncrementalSnapshotUponRestart() {
	o.IncrementalSnapshotUponRestart.Unset()
}

// GetIsCopyOnlyFull returns the IsCopyOnlyFull field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlEnvJobParameters) GetIsCopyOnlyFull() bool {
	if o == nil || o.IsCopyOnlyFull.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsCopyOnlyFull.Get()
}

// GetIsCopyOnlyFullOk returns a tuple with the IsCopyOnlyFull field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlEnvJobParameters) GetIsCopyOnlyFullOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsCopyOnlyFull.Get(), o.IsCopyOnlyFull.IsSet()
}

// HasIsCopyOnlyFull returns a boolean if a field has been set.
func (o *SqlEnvJobParameters) HasIsCopyOnlyFull() bool {
	if o != nil && o.IsCopyOnlyFull.IsSet() {
		return true
	}

	return false
}

// SetIsCopyOnlyFull gets a reference to the given NullableBool and assigns it to the IsCopyOnlyFull field.
func (o *SqlEnvJobParameters) SetIsCopyOnlyFull(v bool) {
	o.IsCopyOnlyFull.Set(&v)
}
// SetIsCopyOnlyFullNil sets the value for IsCopyOnlyFull to be an explicit nil
func (o *SqlEnvJobParameters) SetIsCopyOnlyFullNil() {
	o.IsCopyOnlyFull.Set(nil)
}

// UnsetIsCopyOnlyFull ensures that no value is present for IsCopyOnlyFull, not even an explicit nil
func (o *SqlEnvJobParameters) UnsetIsCopyOnlyFull() {
	o.IsCopyOnlyFull.Unset()
}

// GetNumStreams returns the NumStreams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlEnvJobParameters) GetNumStreams() int32 {
	if o == nil || o.NumStreams.Get() == nil {
		var ret int32
		return ret
	}
	return *o.NumStreams.Get()
}

// GetNumStreamsOk returns a tuple with the NumStreams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlEnvJobParameters) GetNumStreamsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumStreams.Get(), o.NumStreams.IsSet()
}

// HasNumStreams returns a boolean if a field has been set.
func (o *SqlEnvJobParameters) HasNumStreams() bool {
	if o != nil && o.NumStreams.IsSet() {
		return true
	}

	return false
}

// SetNumStreams gets a reference to the given NullableInt32 and assigns it to the NumStreams field.
func (o *SqlEnvJobParameters) SetNumStreams(v int32) {
	o.NumStreams.Set(&v)
}
// SetNumStreamsNil sets the value for NumStreams to be an explicit nil
func (o *SqlEnvJobParameters) SetNumStreamsNil() {
	o.NumStreams.Set(nil)
}

// UnsetNumStreams ensures that no value is present for NumStreams, not even an explicit nil
func (o *SqlEnvJobParameters) UnsetNumStreams() {
	o.NumStreams.Unset()
}

// GetUserDatabasePreference returns the UserDatabasePreference field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlEnvJobParameters) GetUserDatabasePreference() string {
	if o == nil || o.UserDatabasePreference.Get() == nil {
		var ret string
		return ret
	}
	return *o.UserDatabasePreference.Get()
}

// GetUserDatabasePreferenceOk returns a tuple with the UserDatabasePreference field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlEnvJobParameters) GetUserDatabasePreferenceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UserDatabasePreference.Get(), o.UserDatabasePreference.IsSet()
}

// HasUserDatabasePreference returns a boolean if a field has been set.
func (o *SqlEnvJobParameters) HasUserDatabasePreference() bool {
	if o != nil && o.UserDatabasePreference.IsSet() {
		return true
	}

	return false
}

// SetUserDatabasePreference gets a reference to the given NullableString and assigns it to the UserDatabasePreference field.
func (o *SqlEnvJobParameters) SetUserDatabasePreference(v string) {
	o.UserDatabasePreference.Set(&v)
}
// SetUserDatabasePreferenceNil sets the value for UserDatabasePreference to be an explicit nil
func (o *SqlEnvJobParameters) SetUserDatabasePreferenceNil() {
	o.UserDatabasePreference.Set(nil)
}

// UnsetUserDatabasePreference ensures that no value is present for UserDatabasePreference, not even an explicit nil
func (o *SqlEnvJobParameters) UnsetUserDatabasePreference() {
	o.UserDatabasePreference.Unset()
}

// GetWithClause returns the WithClause field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlEnvJobParameters) GetWithClause() string {
	if o == nil || o.WithClause.Get() == nil {
		var ret string
		return ret
	}
	return *o.WithClause.Get()
}

// GetWithClauseOk returns a tuple with the WithClause field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlEnvJobParameters) GetWithClauseOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.WithClause.Get(), o.WithClause.IsSet()
}

// HasWithClause returns a boolean if a field has been set.
func (o *SqlEnvJobParameters) HasWithClause() bool {
	if o != nil && o.WithClause.IsSet() {
		return true
	}

	return false
}

// SetWithClause gets a reference to the given NullableString and assigns it to the WithClause field.
func (o *SqlEnvJobParameters) SetWithClause(v string) {
	o.WithClause.Set(&v)
}
// SetWithClauseNil sets the value for WithClause to be an explicit nil
func (o *SqlEnvJobParameters) SetWithClauseNil() {
	o.WithClause.Set(nil)
}

// UnsetWithClause ensures that no value is present for WithClause, not even an explicit nil
func (o *SqlEnvJobParameters) UnsetWithClause() {
	o.WithClause.Unset()
}

func (o SqlEnvJobParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AagPreference.IsSet() {
		toSerialize["aagPreference"] = o.AagPreference.Get()
	}
	if o.AagPreferenceFromSqlServer.IsSet() {
		toSerialize["aagPreferenceFromSqlServer"] = o.AagPreferenceFromSqlServer.Get()
	}
	if o.BackupSystemDatabases.IsSet() {
		toSerialize["backupSystemDatabases"] = o.BackupSystemDatabases.Get()
	}
	if o.BackupType.IsSet() {
		toSerialize["backupType"] = o.BackupType.Get()
	}
	if o.BackupVolumesOnly.IsSet() {
		toSerialize["backupVolumesOnly"] = o.BackupVolumesOnly.Get()
	}
	if o.IncrementalSnapshotUponRestart.IsSet() {
		toSerialize["incrementalSnapshotUponRestart"] = o.IncrementalSnapshotUponRestart.Get()
	}
	if o.IsCopyOnlyFull.IsSet() {
		toSerialize["isCopyOnlyFull"] = o.IsCopyOnlyFull.Get()
	}
	if o.NumStreams.IsSet() {
		toSerialize["numStreams"] = o.NumStreams.Get()
	}
	if o.UserDatabasePreference.IsSet() {
		toSerialize["userDatabasePreference"] = o.UserDatabasePreference.Get()
	}
	if o.WithClause.IsSet() {
		toSerialize["withClause"] = o.WithClause.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSqlEnvJobParameters struct {
	value *SqlEnvJobParameters
	isSet bool
}

func (v NullableSqlEnvJobParameters) Get() *SqlEnvJobParameters {
	return v.value
}

func (v *NullableSqlEnvJobParameters) Set(val *SqlEnvJobParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlEnvJobParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlEnvJobParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlEnvJobParameters(val *SqlEnvJobParameters) *NullableSqlEnvJobParameters {
	return &NullableSqlEnvJobParameters{value: val, isSet: true}
}

func (v NullableSqlEnvJobParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSqlEnvJobParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


