/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// Sample Specifies a sample of data collected at a timestamp.
type Sample struct {
	// Specifies the value of the data sample if the type is float64. This field is nil if the type of the data is not a float value.
	FloatValue NullableFloat64 `json:"floatValue,omitempty"`
	// Specifies the timestamp when the data sample occured.
	TimestampMsecs NullableInt64 `json:"timestampMsecs,omitempty"`
	// Specifies the value of the data sample if the type is int64. This field is nil if the type of the data is not an int value.
	Value NullableInt64 `json:"value,omitempty"`
}

// NewSample instantiates a new Sample object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSample() *Sample {
	this := Sample{}
	return &this
}

// NewSampleWithDefaults instantiates a new Sample object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSampleWithDefaults() *Sample {
	this := Sample{}
	return &this
}

// GetFloatValue returns the FloatValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Sample) GetFloatValue() float64 {
	if o == nil || o.FloatValue.Get() == nil {
		var ret float64
		return ret
	}
	return *o.FloatValue.Get()
}

// GetFloatValueOk returns a tuple with the FloatValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Sample) GetFloatValueOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FloatValue.Get(), o.FloatValue.IsSet()
}

// HasFloatValue returns a boolean if a field has been set.
func (o *Sample) HasFloatValue() bool {
	if o != nil && o.FloatValue.IsSet() {
		return true
	}

	return false
}

// SetFloatValue gets a reference to the given NullableFloat64 and assigns it to the FloatValue field.
func (o *Sample) SetFloatValue(v float64) {
	o.FloatValue.Set(&v)
}
// SetFloatValueNil sets the value for FloatValue to be an explicit nil
func (o *Sample) SetFloatValueNil() {
	o.FloatValue.Set(nil)
}

// UnsetFloatValue ensures that no value is present for FloatValue, not even an explicit nil
func (o *Sample) UnsetFloatValue() {
	o.FloatValue.Unset()
}

// GetTimestampMsecs returns the TimestampMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Sample) GetTimestampMsecs() int64 {
	if o == nil || o.TimestampMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TimestampMsecs.Get()
}

// GetTimestampMsecsOk returns a tuple with the TimestampMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Sample) GetTimestampMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TimestampMsecs.Get(), o.TimestampMsecs.IsSet()
}

// HasTimestampMsecs returns a boolean if a field has been set.
func (o *Sample) HasTimestampMsecs() bool {
	if o != nil && o.TimestampMsecs.IsSet() {
		return true
	}

	return false
}

// SetTimestampMsecs gets a reference to the given NullableInt64 and assigns it to the TimestampMsecs field.
func (o *Sample) SetTimestampMsecs(v int64) {
	o.TimestampMsecs.Set(&v)
}
// SetTimestampMsecsNil sets the value for TimestampMsecs to be an explicit nil
func (o *Sample) SetTimestampMsecsNil() {
	o.TimestampMsecs.Set(nil)
}

// UnsetTimestampMsecs ensures that no value is present for TimestampMsecs, not even an explicit nil
func (o *Sample) UnsetTimestampMsecs() {
	o.TimestampMsecs.Unset()
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Sample) GetValue() int64 {
	if o == nil || o.Value.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Sample) GetValueOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// HasValue returns a boolean if a field has been set.
func (o *Sample) HasValue() bool {
	if o != nil && o.Value.IsSet() {
		return true
	}

	return false
}

// SetValue gets a reference to the given NullableInt64 and assigns it to the Value field.
func (o *Sample) SetValue(v int64) {
	o.Value.Set(&v)
}
// SetValueNil sets the value for Value to be an explicit nil
func (o *Sample) SetValueNil() {
	o.Value.Set(nil)
}

// UnsetValue ensures that no value is present for Value, not even an explicit nil
func (o *Sample) UnsetValue() {
	o.Value.Unset()
}

func (o Sample) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FloatValue.IsSet() {
		toSerialize["floatValue"] = o.FloatValue.Get()
	}
	if o.TimestampMsecs.IsSet() {
		toSerialize["timestampMsecs"] = o.TimestampMsecs.Get()
	}
	if o.Value.IsSet() {
		toSerialize["value"] = o.Value.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSample struct {
	value *Sample
	isSet bool
}

func (v NullableSample) Get() *Sample {
	return v.value
}

func (v *NullableSample) Set(val *Sample) {
	v.value = val
	v.isSet = true
}

func (v NullableSample) IsSet() bool {
	return v.isSet
}

func (v *NullableSample) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSample(val *Sample) *NullableSample {
	return &NullableSample{value: val, isSet: true}
}

func (v NullableSample) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSample) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


