/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// DeviceNode Specifies the list of devices that need to be combined to form the storage space. Only one of the fields is populated with a device node. If the device node is a leaf node, leafNode is populated with details about the partition blocks in the file. If the device node is an intermediate node, intermediateNode is populated with a device sub-tree.
type DeviceNode struct {
	IntermediateNode *DeviceTreeDetails `json:"intermediateNode,omitempty"`
	LeafNode *FilePartitionBlock `json:"leafNode,omitempty"`
}

// NewDeviceNode instantiates a new DeviceNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceNode() *DeviceNode {
	this := DeviceNode{}
	return &this
}

// NewDeviceNodeWithDefaults instantiates a new DeviceNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceNodeWithDefaults() *DeviceNode {
	this := DeviceNode{}
	return &this
}

// GetIntermediateNode returns the IntermediateNode field value if set, zero value otherwise.
func (o *DeviceNode) GetIntermediateNode() DeviceTreeDetails {
	if o == nil || o.IntermediateNode == nil {
		var ret DeviceTreeDetails
		return ret
	}
	return *o.IntermediateNode
}

// GetIntermediateNodeOk returns a tuple with the IntermediateNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceNode) GetIntermediateNodeOk() (*DeviceTreeDetails, bool) {
	if o == nil || o.IntermediateNode == nil {
		return nil, false
	}
	return o.IntermediateNode, true
}

// HasIntermediateNode returns a boolean if a field has been set.
func (o *DeviceNode) HasIntermediateNode() bool {
	if o != nil && o.IntermediateNode != nil {
		return true
	}

	return false
}

// SetIntermediateNode gets a reference to the given DeviceTreeDetails and assigns it to the IntermediateNode field.
func (o *DeviceNode) SetIntermediateNode(v DeviceTreeDetails) {
	o.IntermediateNode = &v
}

// GetLeafNode returns the LeafNode field value if set, zero value otherwise.
func (o *DeviceNode) GetLeafNode() FilePartitionBlock {
	if o == nil || o.LeafNode == nil {
		var ret FilePartitionBlock
		return ret
	}
	return *o.LeafNode
}

// GetLeafNodeOk returns a tuple with the LeafNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceNode) GetLeafNodeOk() (*FilePartitionBlock, bool) {
	if o == nil || o.LeafNode == nil {
		return nil, false
	}
	return o.LeafNode, true
}

// HasLeafNode returns a boolean if a field has been set.
func (o *DeviceNode) HasLeafNode() bool {
	if o != nil && o.LeafNode != nil {
		return true
	}

	return false
}

// SetLeafNode gets a reference to the given FilePartitionBlock and assigns it to the LeafNode field.
func (o *DeviceNode) SetLeafNode(v FilePartitionBlock) {
	o.LeafNode = &v
}

func (o DeviceNode) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IntermediateNode != nil {
		toSerialize["intermediateNode"] = o.IntermediateNode
	}
	if o.LeafNode != nil {
		toSerialize["leafNode"] = o.LeafNode
	}
	return json.Marshal(toSerialize)
}

type NullableDeviceNode struct {
	value *DeviceNode
	isSet bool
}

func (v NullableDeviceNode) Get() *DeviceNode {
	return v.value
}

func (v *NullableDeviceNode) Set(val *DeviceNode) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceNode) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceNode(val *DeviceNode) *NullableDeviceNode {
	return &NullableDeviceNode{value: val, isSet: true}
}

func (v NullableDeviceNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


