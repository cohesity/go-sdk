/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// TenantViewUpdate Specifies view update details response about a tenant.
type TenantViewUpdate struct {
	// Specifies the unique id of the tenant.
	TenantId NullableString `json:"tenantId,omitempty"`
	// Specifies the PolicyIds for respective tenant.
	ViewNames []string `json:"viewNames,omitempty"`
}

// NewTenantViewUpdate instantiates a new TenantViewUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantViewUpdate() *TenantViewUpdate {
	this := TenantViewUpdate{}
	return &this
}

// NewTenantViewUpdateWithDefaults instantiates a new TenantViewUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantViewUpdateWithDefaults() *TenantViewUpdate {
	this := TenantViewUpdate{}
	return &this
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantViewUpdate) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantViewUpdate) GetTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *TenantViewUpdate) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *TenantViewUpdate) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *TenantViewUpdate) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *TenantViewUpdate) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetViewNames returns the ViewNames field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantViewUpdate) GetViewNames() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.ViewNames
}

// GetViewNamesOk returns a tuple with the ViewNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantViewUpdate) GetViewNamesOk() (*[]string, bool) {
	if o == nil || o.ViewNames == nil {
		return nil, false
	}
	return &o.ViewNames, true
}

// HasViewNames returns a boolean if a field has been set.
func (o *TenantViewUpdate) HasViewNames() bool {
	if o != nil && o.ViewNames != nil {
		return true
	}

	return false
}

// SetViewNames gets a reference to the given []string and assigns it to the ViewNames field.
func (o *TenantViewUpdate) SetViewNames(v []string) {
	o.ViewNames = v
}

func (o TenantViewUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.ViewNames != nil {
		toSerialize["viewNames"] = o.ViewNames
	}
	return json.Marshal(toSerialize)
}

type NullableTenantViewUpdate struct {
	value *TenantViewUpdate
	isSet bool
}

func (v NullableTenantViewUpdate) Get() *TenantViewUpdate {
	return v.value
}

func (v *NullableTenantViewUpdate) Set(val *TenantViewUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantViewUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantViewUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantViewUpdate(val *TenantViewUpdate) *NullableTenantViewUpdate {
	return &NullableTenantViewUpdate{value: val, isSet: true}
}

func (v NullableTenantViewUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantViewUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


