/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// S3BucketConfigProto struct for S3BucketConfigProto
type S3BucketConfigProto struct {
	Acl *ACLProto `json:"acl,omitempty"`
	// Protobuf that describes the lifecycle configuration that is used to manage the lifecycle of objects in a bucket.
	LifecycleConfig *map[string]interface{} `json:"lifecycleConfig,omitempty"`
	OwnerInfo *OwnerInfo `json:"ownerInfo,omitempty"`
	// Protocol type of this bucket.
	ProtocolType NullableInt32 `json:"protocolType,omitempty"`
	SwiftContainerTag *SwiftContainerTaggingProto `json:"swiftContainerTag,omitempty"`
	// Tags (or labels) assigned to the bucket. Tags are set of <key, value> pairs.
	TagMap []S3BucketConfigProtoTagMapEntry `json:"tagMap,omitempty"`
	VersioningState NullableInt32 `json:"versioningState,omitempty"`
}

// NewS3BucketConfigProto instantiates a new S3BucketConfigProto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3BucketConfigProto() *S3BucketConfigProto {
	this := S3BucketConfigProto{}
	return &this
}

// NewS3BucketConfigProtoWithDefaults instantiates a new S3BucketConfigProto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3BucketConfigProtoWithDefaults() *S3BucketConfigProto {
	this := S3BucketConfigProto{}
	return &this
}

// GetAcl returns the Acl field value if set, zero value otherwise.
func (o *S3BucketConfigProto) GetAcl() ACLProto {
	if o == nil || o.Acl == nil {
		var ret ACLProto
		return ret
	}
	return *o.Acl
}

// GetAclOk returns a tuple with the Acl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3BucketConfigProto) GetAclOk() (*ACLProto, bool) {
	if o == nil || o.Acl == nil {
		return nil, false
	}
	return o.Acl, true
}

// HasAcl returns a boolean if a field has been set.
func (o *S3BucketConfigProto) HasAcl() bool {
	if o != nil && o.Acl != nil {
		return true
	}

	return false
}

// SetAcl gets a reference to the given ACLProto and assigns it to the Acl field.
func (o *S3BucketConfigProto) SetAcl(v ACLProto) {
	o.Acl = &v
}

// GetLifecycleConfig returns the LifecycleConfig field value if set, zero value otherwise.
func (o *S3BucketConfigProto) GetLifecycleConfig() map[string]interface{} {
	if o == nil || o.LifecycleConfig == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.LifecycleConfig
}

// GetLifecycleConfigOk returns a tuple with the LifecycleConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3BucketConfigProto) GetLifecycleConfigOk() (*map[string]interface{}, bool) {
	if o == nil || o.LifecycleConfig == nil {
		return nil, false
	}
	return o.LifecycleConfig, true
}

// HasLifecycleConfig returns a boolean if a field has been set.
func (o *S3BucketConfigProto) HasLifecycleConfig() bool {
	if o != nil && o.LifecycleConfig != nil {
		return true
	}

	return false
}

// SetLifecycleConfig gets a reference to the given map[string]interface{} and assigns it to the LifecycleConfig field.
func (o *S3BucketConfigProto) SetLifecycleConfig(v map[string]interface{}) {
	o.LifecycleConfig = &v
}

// GetOwnerInfo returns the OwnerInfo field value if set, zero value otherwise.
func (o *S3BucketConfigProto) GetOwnerInfo() OwnerInfo {
	if o == nil || o.OwnerInfo == nil {
		var ret OwnerInfo
		return ret
	}
	return *o.OwnerInfo
}

// GetOwnerInfoOk returns a tuple with the OwnerInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3BucketConfigProto) GetOwnerInfoOk() (*OwnerInfo, bool) {
	if o == nil || o.OwnerInfo == nil {
		return nil, false
	}
	return o.OwnerInfo, true
}

// HasOwnerInfo returns a boolean if a field has been set.
func (o *S3BucketConfigProto) HasOwnerInfo() bool {
	if o != nil && o.OwnerInfo != nil {
		return true
	}

	return false
}

// SetOwnerInfo gets a reference to the given OwnerInfo and assigns it to the OwnerInfo field.
func (o *S3BucketConfigProto) SetOwnerInfo(v OwnerInfo) {
	o.OwnerInfo = &v
}

// GetProtocolType returns the ProtocolType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *S3BucketConfigProto) GetProtocolType() int32 {
	if o == nil || o.ProtocolType.Get() == nil {
		var ret int32
		return ret
	}
	return *o.ProtocolType.Get()
}

// GetProtocolTypeOk returns a tuple with the ProtocolType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *S3BucketConfigProto) GetProtocolTypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProtocolType.Get(), o.ProtocolType.IsSet()
}

// HasProtocolType returns a boolean if a field has been set.
func (o *S3BucketConfigProto) HasProtocolType() bool {
	if o != nil && o.ProtocolType.IsSet() {
		return true
	}

	return false
}

// SetProtocolType gets a reference to the given NullableInt32 and assigns it to the ProtocolType field.
func (o *S3BucketConfigProto) SetProtocolType(v int32) {
	o.ProtocolType.Set(&v)
}
// SetProtocolTypeNil sets the value for ProtocolType to be an explicit nil
func (o *S3BucketConfigProto) SetProtocolTypeNil() {
	o.ProtocolType.Set(nil)
}

// UnsetProtocolType ensures that no value is present for ProtocolType, not even an explicit nil
func (o *S3BucketConfigProto) UnsetProtocolType() {
	o.ProtocolType.Unset()
}

// GetSwiftContainerTag returns the SwiftContainerTag field value if set, zero value otherwise.
func (o *S3BucketConfigProto) GetSwiftContainerTag() SwiftContainerTaggingProto {
	if o == nil || o.SwiftContainerTag == nil {
		var ret SwiftContainerTaggingProto
		return ret
	}
	return *o.SwiftContainerTag
}

// GetSwiftContainerTagOk returns a tuple with the SwiftContainerTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3BucketConfigProto) GetSwiftContainerTagOk() (*SwiftContainerTaggingProto, bool) {
	if o == nil || o.SwiftContainerTag == nil {
		return nil, false
	}
	return o.SwiftContainerTag, true
}

// HasSwiftContainerTag returns a boolean if a field has been set.
func (o *S3BucketConfigProto) HasSwiftContainerTag() bool {
	if o != nil && o.SwiftContainerTag != nil {
		return true
	}

	return false
}

// SetSwiftContainerTag gets a reference to the given SwiftContainerTaggingProto and assigns it to the SwiftContainerTag field.
func (o *S3BucketConfigProto) SetSwiftContainerTag(v SwiftContainerTaggingProto) {
	o.SwiftContainerTag = &v
}

// GetTagMap returns the TagMap field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *S3BucketConfigProto) GetTagMap() []S3BucketConfigProtoTagMapEntry {
	if o == nil  {
		var ret []S3BucketConfigProtoTagMapEntry
		return ret
	}
	return o.TagMap
}

// GetTagMapOk returns a tuple with the TagMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *S3BucketConfigProto) GetTagMapOk() (*[]S3BucketConfigProtoTagMapEntry, bool) {
	if o == nil || o.TagMap == nil {
		return nil, false
	}
	return &o.TagMap, true
}

// HasTagMap returns a boolean if a field has been set.
func (o *S3BucketConfigProto) HasTagMap() bool {
	if o != nil && o.TagMap != nil {
		return true
	}

	return false
}

// SetTagMap gets a reference to the given []S3BucketConfigProtoTagMapEntry and assigns it to the TagMap field.
func (o *S3BucketConfigProto) SetTagMap(v []S3BucketConfigProtoTagMapEntry) {
	o.TagMap = v
}

// GetVersioningState returns the VersioningState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *S3BucketConfigProto) GetVersioningState() int32 {
	if o == nil || o.VersioningState.Get() == nil {
		var ret int32
		return ret
	}
	return *o.VersioningState.Get()
}

// GetVersioningStateOk returns a tuple with the VersioningState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *S3BucketConfigProto) GetVersioningStateOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VersioningState.Get(), o.VersioningState.IsSet()
}

// HasVersioningState returns a boolean if a field has been set.
func (o *S3BucketConfigProto) HasVersioningState() bool {
	if o != nil && o.VersioningState.IsSet() {
		return true
	}

	return false
}

// SetVersioningState gets a reference to the given NullableInt32 and assigns it to the VersioningState field.
func (o *S3BucketConfigProto) SetVersioningState(v int32) {
	o.VersioningState.Set(&v)
}
// SetVersioningStateNil sets the value for VersioningState to be an explicit nil
func (o *S3BucketConfigProto) SetVersioningStateNil() {
	o.VersioningState.Set(nil)
}

// UnsetVersioningState ensures that no value is present for VersioningState, not even an explicit nil
func (o *S3BucketConfigProto) UnsetVersioningState() {
	o.VersioningState.Unset()
}

func (o S3BucketConfigProto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Acl != nil {
		toSerialize["acl"] = o.Acl
	}
	if o.LifecycleConfig != nil {
		toSerialize["lifecycleConfig"] = o.LifecycleConfig
	}
	if o.OwnerInfo != nil {
		toSerialize["ownerInfo"] = o.OwnerInfo
	}
	if o.ProtocolType.IsSet() {
		toSerialize["protocolType"] = o.ProtocolType.Get()
	}
	if o.SwiftContainerTag != nil {
		toSerialize["swiftContainerTag"] = o.SwiftContainerTag
	}
	if o.TagMap != nil {
		toSerialize["tagMap"] = o.TagMap
	}
	if o.VersioningState.IsSet() {
		toSerialize["versioningState"] = o.VersioningState.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableS3BucketConfigProto struct {
	value *S3BucketConfigProto
	isSet bool
}

func (v NullableS3BucketConfigProto) Get() *S3BucketConfigProto {
	return v.value
}

func (v *NullableS3BucketConfigProto) Set(val *S3BucketConfigProto) {
	v.value = val
	v.isSet = true
}

func (v NullableS3BucketConfigProto) IsSet() bool {
	return v.isSet
}

func (v *NullableS3BucketConfigProto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3BucketConfigProto(val *S3BucketConfigProto) *NullableS3BucketConfigProto {
	return &NullableS3BucketConfigProto{value: val, isSet: true}
}

func (v NullableS3BucketConfigProto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3BucketConfigProto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


