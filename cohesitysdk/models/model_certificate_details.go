/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// CertificateDetails Specifies details about a certificate.
type CertificateDetails struct {
	// Specifies the filename of the certificate. This is unique to each certificate generated.
	CertFileName NullableString `json:"certFileName,omitempty"`
	// Specifies the date in epoch till when the certificate is valid.
	ExpiryDate NullableString `json:"expiryDate,omitempty"`
	// Each certificate can be deployed to multiple hosts. List of all hosts is returned after deployment.
	HostIps []string `json:"hostIps,omitempty"`
	// Specifies the type of the host such as 'kSapHana', 'kSapOracle', etc. Specifies the host type of host for generating and deploying a Certificate. 'kOther' indicates it is any of the other hosts. 'kSapOracle' indicates it is a SAP Oracle host. 'kSapHana' indicates it is a SAP HANA host.
	Type NullableString `json:"type,omitempty"`
}

// NewCertificateDetails instantiates a new CertificateDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateDetails() *CertificateDetails {
	this := CertificateDetails{}
	return &this
}

// NewCertificateDetailsWithDefaults instantiates a new CertificateDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateDetailsWithDefaults() *CertificateDetails {
	this := CertificateDetails{}
	return &this
}

// GetCertFileName returns the CertFileName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CertificateDetails) GetCertFileName() string {
	if o == nil || o.CertFileName.Get() == nil {
		var ret string
		return ret
	}
	return *o.CertFileName.Get()
}

// GetCertFileNameOk returns a tuple with the CertFileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CertificateDetails) GetCertFileNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CertFileName.Get(), o.CertFileName.IsSet()
}

// HasCertFileName returns a boolean if a field has been set.
func (o *CertificateDetails) HasCertFileName() bool {
	if o != nil && o.CertFileName.IsSet() {
		return true
	}

	return false
}

// SetCertFileName gets a reference to the given NullableString and assigns it to the CertFileName field.
func (o *CertificateDetails) SetCertFileName(v string) {
	o.CertFileName.Set(&v)
}
// SetCertFileNameNil sets the value for CertFileName to be an explicit nil
func (o *CertificateDetails) SetCertFileNameNil() {
	o.CertFileName.Set(nil)
}

// UnsetCertFileName ensures that no value is present for CertFileName, not even an explicit nil
func (o *CertificateDetails) UnsetCertFileName() {
	o.CertFileName.Unset()
}

// GetExpiryDate returns the ExpiryDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CertificateDetails) GetExpiryDate() string {
	if o == nil || o.ExpiryDate.Get() == nil {
		var ret string
		return ret
	}
	return *o.ExpiryDate.Get()
}

// GetExpiryDateOk returns a tuple with the ExpiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CertificateDetails) GetExpiryDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExpiryDate.Get(), o.ExpiryDate.IsSet()
}

// HasExpiryDate returns a boolean if a field has been set.
func (o *CertificateDetails) HasExpiryDate() bool {
	if o != nil && o.ExpiryDate.IsSet() {
		return true
	}

	return false
}

// SetExpiryDate gets a reference to the given NullableString and assigns it to the ExpiryDate field.
func (o *CertificateDetails) SetExpiryDate(v string) {
	o.ExpiryDate.Set(&v)
}
// SetExpiryDateNil sets the value for ExpiryDate to be an explicit nil
func (o *CertificateDetails) SetExpiryDateNil() {
	o.ExpiryDate.Set(nil)
}

// UnsetExpiryDate ensures that no value is present for ExpiryDate, not even an explicit nil
func (o *CertificateDetails) UnsetExpiryDate() {
	o.ExpiryDate.Unset()
}

// GetHostIps returns the HostIps field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CertificateDetails) GetHostIps() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.HostIps
}

// GetHostIpsOk returns a tuple with the HostIps field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CertificateDetails) GetHostIpsOk() (*[]string, bool) {
	if o == nil || o.HostIps == nil {
		return nil, false
	}
	return &o.HostIps, true
}

// HasHostIps returns a boolean if a field has been set.
func (o *CertificateDetails) HasHostIps() bool {
	if o != nil && o.HostIps != nil {
		return true
	}

	return false
}

// SetHostIps gets a reference to the given []string and assigns it to the HostIps field.
func (o *CertificateDetails) SetHostIps(v []string) {
	o.HostIps = v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CertificateDetails) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CertificateDetails) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *CertificateDetails) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *CertificateDetails) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *CertificateDetails) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *CertificateDetails) UnsetType() {
	o.Type.Unset()
}

func (o CertificateDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CertFileName.IsSet() {
		toSerialize["certFileName"] = o.CertFileName.Get()
	}
	if o.ExpiryDate.IsSet() {
		toSerialize["expiryDate"] = o.ExpiryDate.Get()
	}
	if o.HostIps != nil {
		toSerialize["hostIps"] = o.HostIps
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCertificateDetails struct {
	value *CertificateDetails
	isSet bool
}

func (v NullableCertificateDetails) Get() *CertificateDetails {
	return v.value
}

func (v *NullableCertificateDetails) Set(val *CertificateDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateDetails(val *CertificateDetails) *NullableCertificateDetails {
	return &NullableCertificateDetails{value: val, isSet: true}
}

func (v NullableCertificateDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


