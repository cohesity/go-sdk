/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// MongoDBConnectParams Specifies an Object containing information about a registered mongodb source.
type MongoDBConnectParams struct {
	// Specifies whether authentication is configured on this MongoDB cluster. Specifies the type of an MongoDB source entity. 'SCRAM' 'LDAP' 'NONE'
	AuthType NullableString `json:"authType,omitempty"`
	// Specifies the Authenticating Database for this MongoDB cluster.
	AuthenticatingDatabaseName NullableString `json:"authenticatingDatabaseName,omitempty"`
	// Specifies whether connection is allowed through SSL only in this cluster.
	RequiresSsl NullableBool `json:"requiresSsl,omitempty"`
	// MongoDB Secondary node tag. Required only if 'useSecondaryForBackup' is true. The system will use this to identify the secondary nodes for reading backup data.
	SecondaryNodeTag NullableString `json:"secondaryNodeTag,omitempty"`
	// Specifies the seeds of this MongoDB Cluster.
	Seeds []string `json:"seeds,omitempty"`
	// Set this to true if you want the system to peform backups from secondary nodes.
	UseSecondaryForBackup NullableBool `json:"useSecondaryForBackup,omitempty"`
}

// NewMongoDBConnectParams instantiates a new MongoDBConnectParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMongoDBConnectParams() *MongoDBConnectParams {
	this := MongoDBConnectParams{}
	return &this
}

// NewMongoDBConnectParamsWithDefaults instantiates a new MongoDBConnectParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMongoDBConnectParamsWithDefaults() *MongoDBConnectParams {
	this := MongoDBConnectParams{}
	return &this
}

// GetAuthType returns the AuthType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MongoDBConnectParams) GetAuthType() string {
	if o == nil || o.AuthType.Get() == nil {
		var ret string
		return ret
	}
	return *o.AuthType.Get()
}

// GetAuthTypeOk returns a tuple with the AuthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MongoDBConnectParams) GetAuthTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AuthType.Get(), o.AuthType.IsSet()
}

// HasAuthType returns a boolean if a field has been set.
func (o *MongoDBConnectParams) HasAuthType() bool {
	if o != nil && o.AuthType.IsSet() {
		return true
	}

	return false
}

// SetAuthType gets a reference to the given NullableString and assigns it to the AuthType field.
func (o *MongoDBConnectParams) SetAuthType(v string) {
	o.AuthType.Set(&v)
}
// SetAuthTypeNil sets the value for AuthType to be an explicit nil
func (o *MongoDBConnectParams) SetAuthTypeNil() {
	o.AuthType.Set(nil)
}

// UnsetAuthType ensures that no value is present for AuthType, not even an explicit nil
func (o *MongoDBConnectParams) UnsetAuthType() {
	o.AuthType.Unset()
}

// GetAuthenticatingDatabaseName returns the AuthenticatingDatabaseName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MongoDBConnectParams) GetAuthenticatingDatabaseName() string {
	if o == nil || o.AuthenticatingDatabaseName.Get() == nil {
		var ret string
		return ret
	}
	return *o.AuthenticatingDatabaseName.Get()
}

// GetAuthenticatingDatabaseNameOk returns a tuple with the AuthenticatingDatabaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MongoDBConnectParams) GetAuthenticatingDatabaseNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AuthenticatingDatabaseName.Get(), o.AuthenticatingDatabaseName.IsSet()
}

// HasAuthenticatingDatabaseName returns a boolean if a field has been set.
func (o *MongoDBConnectParams) HasAuthenticatingDatabaseName() bool {
	if o != nil && o.AuthenticatingDatabaseName.IsSet() {
		return true
	}

	return false
}

// SetAuthenticatingDatabaseName gets a reference to the given NullableString and assigns it to the AuthenticatingDatabaseName field.
func (o *MongoDBConnectParams) SetAuthenticatingDatabaseName(v string) {
	o.AuthenticatingDatabaseName.Set(&v)
}
// SetAuthenticatingDatabaseNameNil sets the value for AuthenticatingDatabaseName to be an explicit nil
func (o *MongoDBConnectParams) SetAuthenticatingDatabaseNameNil() {
	o.AuthenticatingDatabaseName.Set(nil)
}

// UnsetAuthenticatingDatabaseName ensures that no value is present for AuthenticatingDatabaseName, not even an explicit nil
func (o *MongoDBConnectParams) UnsetAuthenticatingDatabaseName() {
	o.AuthenticatingDatabaseName.Unset()
}

// GetRequiresSsl returns the RequiresSsl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MongoDBConnectParams) GetRequiresSsl() bool {
	if o == nil || o.RequiresSsl.Get() == nil {
		var ret bool
		return ret
	}
	return *o.RequiresSsl.Get()
}

// GetRequiresSslOk returns a tuple with the RequiresSsl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MongoDBConnectParams) GetRequiresSslOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RequiresSsl.Get(), o.RequiresSsl.IsSet()
}

// HasRequiresSsl returns a boolean if a field has been set.
func (o *MongoDBConnectParams) HasRequiresSsl() bool {
	if o != nil && o.RequiresSsl.IsSet() {
		return true
	}

	return false
}

// SetRequiresSsl gets a reference to the given NullableBool and assigns it to the RequiresSsl field.
func (o *MongoDBConnectParams) SetRequiresSsl(v bool) {
	o.RequiresSsl.Set(&v)
}
// SetRequiresSslNil sets the value for RequiresSsl to be an explicit nil
func (o *MongoDBConnectParams) SetRequiresSslNil() {
	o.RequiresSsl.Set(nil)
}

// UnsetRequiresSsl ensures that no value is present for RequiresSsl, not even an explicit nil
func (o *MongoDBConnectParams) UnsetRequiresSsl() {
	o.RequiresSsl.Unset()
}

// GetSecondaryNodeTag returns the SecondaryNodeTag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MongoDBConnectParams) GetSecondaryNodeTag() string {
	if o == nil || o.SecondaryNodeTag.Get() == nil {
		var ret string
		return ret
	}
	return *o.SecondaryNodeTag.Get()
}

// GetSecondaryNodeTagOk returns a tuple with the SecondaryNodeTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MongoDBConnectParams) GetSecondaryNodeTagOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SecondaryNodeTag.Get(), o.SecondaryNodeTag.IsSet()
}

// HasSecondaryNodeTag returns a boolean if a field has been set.
func (o *MongoDBConnectParams) HasSecondaryNodeTag() bool {
	if o != nil && o.SecondaryNodeTag.IsSet() {
		return true
	}

	return false
}

// SetSecondaryNodeTag gets a reference to the given NullableString and assigns it to the SecondaryNodeTag field.
func (o *MongoDBConnectParams) SetSecondaryNodeTag(v string) {
	o.SecondaryNodeTag.Set(&v)
}
// SetSecondaryNodeTagNil sets the value for SecondaryNodeTag to be an explicit nil
func (o *MongoDBConnectParams) SetSecondaryNodeTagNil() {
	o.SecondaryNodeTag.Set(nil)
}

// UnsetSecondaryNodeTag ensures that no value is present for SecondaryNodeTag, not even an explicit nil
func (o *MongoDBConnectParams) UnsetSecondaryNodeTag() {
	o.SecondaryNodeTag.Unset()
}

// GetSeeds returns the Seeds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MongoDBConnectParams) GetSeeds() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Seeds
}

// GetSeedsOk returns a tuple with the Seeds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MongoDBConnectParams) GetSeedsOk() (*[]string, bool) {
	if o == nil || o.Seeds == nil {
		return nil, false
	}
	return &o.Seeds, true
}

// HasSeeds returns a boolean if a field has been set.
func (o *MongoDBConnectParams) HasSeeds() bool {
	if o != nil && o.Seeds != nil {
		return true
	}

	return false
}

// SetSeeds gets a reference to the given []string and assigns it to the Seeds field.
func (o *MongoDBConnectParams) SetSeeds(v []string) {
	o.Seeds = v
}

// GetUseSecondaryForBackup returns the UseSecondaryForBackup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MongoDBConnectParams) GetUseSecondaryForBackup() bool {
	if o == nil || o.UseSecondaryForBackup.Get() == nil {
		var ret bool
		return ret
	}
	return *o.UseSecondaryForBackup.Get()
}

// GetUseSecondaryForBackupOk returns a tuple with the UseSecondaryForBackup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MongoDBConnectParams) GetUseSecondaryForBackupOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UseSecondaryForBackup.Get(), o.UseSecondaryForBackup.IsSet()
}

// HasUseSecondaryForBackup returns a boolean if a field has been set.
func (o *MongoDBConnectParams) HasUseSecondaryForBackup() bool {
	if o != nil && o.UseSecondaryForBackup.IsSet() {
		return true
	}

	return false
}

// SetUseSecondaryForBackup gets a reference to the given NullableBool and assigns it to the UseSecondaryForBackup field.
func (o *MongoDBConnectParams) SetUseSecondaryForBackup(v bool) {
	o.UseSecondaryForBackup.Set(&v)
}
// SetUseSecondaryForBackupNil sets the value for UseSecondaryForBackup to be an explicit nil
func (o *MongoDBConnectParams) SetUseSecondaryForBackupNil() {
	o.UseSecondaryForBackup.Set(nil)
}

// UnsetUseSecondaryForBackup ensures that no value is present for UseSecondaryForBackup, not even an explicit nil
func (o *MongoDBConnectParams) UnsetUseSecondaryForBackup() {
	o.UseSecondaryForBackup.Unset()
}

func (o MongoDBConnectParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AuthType.IsSet() {
		toSerialize["authType"] = o.AuthType.Get()
	}
	if o.AuthenticatingDatabaseName.IsSet() {
		toSerialize["authenticatingDatabaseName"] = o.AuthenticatingDatabaseName.Get()
	}
	if o.RequiresSsl.IsSet() {
		toSerialize["requiresSsl"] = o.RequiresSsl.Get()
	}
	if o.SecondaryNodeTag.IsSet() {
		toSerialize["secondaryNodeTag"] = o.SecondaryNodeTag.Get()
	}
	if o.Seeds != nil {
		toSerialize["seeds"] = o.Seeds
	}
	if o.UseSecondaryForBackup.IsSet() {
		toSerialize["useSecondaryForBackup"] = o.UseSecondaryForBackup.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMongoDBConnectParams struct {
	value *MongoDBConnectParams
	isSet bool
}

func (v NullableMongoDBConnectParams) Get() *MongoDBConnectParams {
	return v.value
}

func (v *NullableMongoDBConnectParams) Set(val *MongoDBConnectParams) {
	v.value = val
	v.isSet = true
}

func (v NullableMongoDBConnectParams) IsSet() bool {
	return v.isSet
}

func (v *NullableMongoDBConnectParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMongoDBConnectParams(val *MongoDBConnectParams) *NullableMongoDBConnectParams {
	return &NullableMongoDBConnectParams{value: val, isSet: true}
}

func (v NullableMongoDBConnectParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMongoDBConnectParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


