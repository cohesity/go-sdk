/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// Pattern struct for Pattern
type Pattern struct {
	// Whether this pattern is system defined.
	IsSystemDefined NullableBool `json:"isSystemDefined,omitempty"`
	// Name of the pattern. This is marked optional but is required.
	Name NullableString `json:"name,omitempty"`
	// Pattern type.
	Type NullableInt32 `json:"type,omitempty"`
	// Value of the pattern. This is marked optional but is required.
	Value NullableString `json:"value,omitempty"`
}

// NewPattern instantiates a new Pattern object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPattern() *Pattern {
	this := Pattern{}
	return &this
}

// NewPatternWithDefaults instantiates a new Pattern object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatternWithDefaults() *Pattern {
	this := Pattern{}
	return &this
}

// GetIsSystemDefined returns the IsSystemDefined field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Pattern) GetIsSystemDefined() bool {
	if o == nil || o.IsSystemDefined.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsSystemDefined.Get()
}

// GetIsSystemDefinedOk returns a tuple with the IsSystemDefined field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Pattern) GetIsSystemDefinedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsSystemDefined.Get(), o.IsSystemDefined.IsSet()
}

// HasIsSystemDefined returns a boolean if a field has been set.
func (o *Pattern) HasIsSystemDefined() bool {
	if o != nil && o.IsSystemDefined.IsSet() {
		return true
	}

	return false
}

// SetIsSystemDefined gets a reference to the given NullableBool and assigns it to the IsSystemDefined field.
func (o *Pattern) SetIsSystemDefined(v bool) {
	o.IsSystemDefined.Set(&v)
}
// SetIsSystemDefinedNil sets the value for IsSystemDefined to be an explicit nil
func (o *Pattern) SetIsSystemDefinedNil() {
	o.IsSystemDefined.Set(nil)
}

// UnsetIsSystemDefined ensures that no value is present for IsSystemDefined, not even an explicit nil
func (o *Pattern) UnsetIsSystemDefined() {
	o.IsSystemDefined.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Pattern) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Pattern) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Pattern) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *Pattern) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *Pattern) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Pattern) UnsetName() {
	o.Name.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Pattern) GetType() int32 {
	if o == nil || o.Type.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Pattern) GetTypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *Pattern) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableInt32 and assigns it to the Type field.
func (o *Pattern) SetType(v int32) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *Pattern) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *Pattern) UnsetType() {
	o.Type.Unset()
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Pattern) GetValue() string {
	if o == nil || o.Value.Get() == nil {
		var ret string
		return ret
	}
	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Pattern) GetValueOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// HasValue returns a boolean if a field has been set.
func (o *Pattern) HasValue() bool {
	if o != nil && o.Value.IsSet() {
		return true
	}

	return false
}

// SetValue gets a reference to the given NullableString and assigns it to the Value field.
func (o *Pattern) SetValue(v string) {
	o.Value.Set(&v)
}
// SetValueNil sets the value for Value to be an explicit nil
func (o *Pattern) SetValueNil() {
	o.Value.Set(nil)
}

// UnsetValue ensures that no value is present for Value, not even an explicit nil
func (o *Pattern) UnsetValue() {
	o.Value.Unset()
}

func (o Pattern) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsSystemDefined.IsSet() {
		toSerialize["isSystemDefined"] = o.IsSystemDefined.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Value.IsSet() {
		toSerialize["value"] = o.Value.Get()
	}
	return json.Marshal(toSerialize)
}

type NullablePattern struct {
	value *Pattern
	isSet bool
}

func (v NullablePattern) Get() *Pattern {
	return v.value
}

func (v *NullablePattern) Set(val *Pattern) {
	v.value = val
	v.isSet = true
}

func (v NullablePattern) IsSet() bool {
	return v.isSet
}

func (v *NullablePattern) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePattern(val *Pattern) *NullablePattern {
	return &NullablePattern{value: val, isSet: true}
}

func (v NullablePattern) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePattern) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


