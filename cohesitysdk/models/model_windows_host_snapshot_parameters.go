/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// WindowsHostSnapshotParameters Specifies settings that are meaningful only on Windows hosts.
type WindowsHostSnapshotParameters struct {
	// Specifies whether to backup regardless of the state of each file's backup history. Backup history will not be updated. Refer Microsoft documentation on VSS_BT_COPY.
	CopyOnlyBackup NullableBool `json:"copyOnlyBackup,omitempty"`
	// Specifies whether to disable fetching and storing of some metadata on Cohesity Cluster to save storage space. Otherwise, there will be some metadata fetched and stored on Cohesity Cluster.
	DisableMetadata NullableBool `json:"disableMetadata,omitempty"`
	// Specifies whether to disable some notification steps when taking snapshots.
	DisableNotification NullableBool `json:"disableNotification,omitempty"`
	// Specifies a list of Windows VSS writers that are excluded from backups. For example, \"ASR Writer\", \"System Writer\". Refer Microsoft documentaion for a complete list.
	ExcludedVssWriters []string `json:"excludedVssWriters,omitempty"`
}

// NewWindowsHostSnapshotParameters instantiates a new WindowsHostSnapshotParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWindowsHostSnapshotParameters() *WindowsHostSnapshotParameters {
	this := WindowsHostSnapshotParameters{}
	return &this
}

// NewWindowsHostSnapshotParametersWithDefaults instantiates a new WindowsHostSnapshotParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWindowsHostSnapshotParametersWithDefaults() *WindowsHostSnapshotParameters {
	this := WindowsHostSnapshotParameters{}
	return &this
}

// GetCopyOnlyBackup returns the CopyOnlyBackup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WindowsHostSnapshotParameters) GetCopyOnlyBackup() bool {
	if o == nil || o.CopyOnlyBackup.Get() == nil {
		var ret bool
		return ret
	}
	return *o.CopyOnlyBackup.Get()
}

// GetCopyOnlyBackupOk returns a tuple with the CopyOnlyBackup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WindowsHostSnapshotParameters) GetCopyOnlyBackupOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CopyOnlyBackup.Get(), o.CopyOnlyBackup.IsSet()
}

// HasCopyOnlyBackup returns a boolean if a field has been set.
func (o *WindowsHostSnapshotParameters) HasCopyOnlyBackup() bool {
	if o != nil && o.CopyOnlyBackup.IsSet() {
		return true
	}

	return false
}

// SetCopyOnlyBackup gets a reference to the given NullableBool and assigns it to the CopyOnlyBackup field.
func (o *WindowsHostSnapshotParameters) SetCopyOnlyBackup(v bool) {
	o.CopyOnlyBackup.Set(&v)
}
// SetCopyOnlyBackupNil sets the value for CopyOnlyBackup to be an explicit nil
func (o *WindowsHostSnapshotParameters) SetCopyOnlyBackupNil() {
	o.CopyOnlyBackup.Set(nil)
}

// UnsetCopyOnlyBackup ensures that no value is present for CopyOnlyBackup, not even an explicit nil
func (o *WindowsHostSnapshotParameters) UnsetCopyOnlyBackup() {
	o.CopyOnlyBackup.Unset()
}

// GetDisableMetadata returns the DisableMetadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WindowsHostSnapshotParameters) GetDisableMetadata() bool {
	if o == nil || o.DisableMetadata.Get() == nil {
		var ret bool
		return ret
	}
	return *o.DisableMetadata.Get()
}

// GetDisableMetadataOk returns a tuple with the DisableMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WindowsHostSnapshotParameters) GetDisableMetadataOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisableMetadata.Get(), o.DisableMetadata.IsSet()
}

// HasDisableMetadata returns a boolean if a field has been set.
func (o *WindowsHostSnapshotParameters) HasDisableMetadata() bool {
	if o != nil && o.DisableMetadata.IsSet() {
		return true
	}

	return false
}

// SetDisableMetadata gets a reference to the given NullableBool and assigns it to the DisableMetadata field.
func (o *WindowsHostSnapshotParameters) SetDisableMetadata(v bool) {
	o.DisableMetadata.Set(&v)
}
// SetDisableMetadataNil sets the value for DisableMetadata to be an explicit nil
func (o *WindowsHostSnapshotParameters) SetDisableMetadataNil() {
	o.DisableMetadata.Set(nil)
}

// UnsetDisableMetadata ensures that no value is present for DisableMetadata, not even an explicit nil
func (o *WindowsHostSnapshotParameters) UnsetDisableMetadata() {
	o.DisableMetadata.Unset()
}

// GetDisableNotification returns the DisableNotification field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WindowsHostSnapshotParameters) GetDisableNotification() bool {
	if o == nil || o.DisableNotification.Get() == nil {
		var ret bool
		return ret
	}
	return *o.DisableNotification.Get()
}

// GetDisableNotificationOk returns a tuple with the DisableNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WindowsHostSnapshotParameters) GetDisableNotificationOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisableNotification.Get(), o.DisableNotification.IsSet()
}

// HasDisableNotification returns a boolean if a field has been set.
func (o *WindowsHostSnapshotParameters) HasDisableNotification() bool {
	if o != nil && o.DisableNotification.IsSet() {
		return true
	}

	return false
}

// SetDisableNotification gets a reference to the given NullableBool and assigns it to the DisableNotification field.
func (o *WindowsHostSnapshotParameters) SetDisableNotification(v bool) {
	o.DisableNotification.Set(&v)
}
// SetDisableNotificationNil sets the value for DisableNotification to be an explicit nil
func (o *WindowsHostSnapshotParameters) SetDisableNotificationNil() {
	o.DisableNotification.Set(nil)
}

// UnsetDisableNotification ensures that no value is present for DisableNotification, not even an explicit nil
func (o *WindowsHostSnapshotParameters) UnsetDisableNotification() {
	o.DisableNotification.Unset()
}

// GetExcludedVssWriters returns the ExcludedVssWriters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WindowsHostSnapshotParameters) GetExcludedVssWriters() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.ExcludedVssWriters
}

// GetExcludedVssWritersOk returns a tuple with the ExcludedVssWriters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WindowsHostSnapshotParameters) GetExcludedVssWritersOk() (*[]string, bool) {
	if o == nil || o.ExcludedVssWriters == nil {
		return nil, false
	}
	return &o.ExcludedVssWriters, true
}

// HasExcludedVssWriters returns a boolean if a field has been set.
func (o *WindowsHostSnapshotParameters) HasExcludedVssWriters() bool {
	if o != nil && o.ExcludedVssWriters != nil {
		return true
	}

	return false
}

// SetExcludedVssWriters gets a reference to the given []string and assigns it to the ExcludedVssWriters field.
func (o *WindowsHostSnapshotParameters) SetExcludedVssWriters(v []string) {
	o.ExcludedVssWriters = v
}

func (o WindowsHostSnapshotParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CopyOnlyBackup.IsSet() {
		toSerialize["copyOnlyBackup"] = o.CopyOnlyBackup.Get()
	}
	if o.DisableMetadata.IsSet() {
		toSerialize["disableMetadata"] = o.DisableMetadata.Get()
	}
	if o.DisableNotification.IsSet() {
		toSerialize["disableNotification"] = o.DisableNotification.Get()
	}
	if o.ExcludedVssWriters != nil {
		toSerialize["excludedVssWriters"] = o.ExcludedVssWriters
	}
	return json.Marshal(toSerialize)
}

type NullableWindowsHostSnapshotParameters struct {
	value *WindowsHostSnapshotParameters
	isSet bool
}

func (v NullableWindowsHostSnapshotParameters) Get() *WindowsHostSnapshotParameters {
	return v.value
}

func (v *NullableWindowsHostSnapshotParameters) Set(val *WindowsHostSnapshotParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableWindowsHostSnapshotParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableWindowsHostSnapshotParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWindowsHostSnapshotParameters(val *WindowsHostSnapshotParameters) *NullableWindowsHostSnapshotParameters {
	return &NullableWindowsHostSnapshotParameters{value: val, isSet: true}
}

func (v NullableWindowsHostSnapshotParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWindowsHostSnapshotParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


