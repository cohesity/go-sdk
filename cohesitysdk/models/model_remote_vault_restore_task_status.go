/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// RemoteVaultRestoreTaskStatus Specifies the status of a remote Vault restore task.
type RemoteVaultRestoreTaskStatus struct {
	// Specifies the status of an indexing task that builds an index from the Protection Job metadata retrieved from the remote Vault. The index contains information about Job Runs (Snapshots) for a Protection Job and is required to restore Snapshots to this local Cluster.
	CurrentIndexingStatus NullableRemoteRestoreIndexingStatus `json:"currentIndexingStatus,omitempty"`
	// Specifies the status of the Snapshot restore task. The Snapshot restore task restores the specified archived Snapshots from a remote Vault to this Cluster.
	CurrentSnapshotStatus NullableRemoteRestoreSnapshotStatus `json:"currentSnapshotStatus,omitempty"`
	// Specifies the globally unique id of the new inactive Protection Job created on the local Cluster as part of the restoration of archived data.
	LocalProtectionJobUid NullableUniversalId `json:"localProtectionJobUid,omitempty"`
	// Specifies the unique id of the parent Job/task that spawned the indexing and Snapshot restore tasks.
	ParentJobUid NullableUniversalId `json:"parentJobUid,omitempty"`
	RemoteProtectionJobInformation *RemoteProtectionJobInformation `json:"remoteProtectionJobInformation,omitempty"`
	// Specifies the unique id of the search Job that searched the remote Vault.
	SearchJobUid NullableUniversalId `json:"searchJobUid,omitempty"`
}

// NewRemoteVaultRestoreTaskStatus instantiates a new RemoteVaultRestoreTaskStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteVaultRestoreTaskStatus() *RemoteVaultRestoreTaskStatus {
	this := RemoteVaultRestoreTaskStatus{}
	return &this
}

// NewRemoteVaultRestoreTaskStatusWithDefaults instantiates a new RemoteVaultRestoreTaskStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteVaultRestoreTaskStatusWithDefaults() *RemoteVaultRestoreTaskStatus {
	this := RemoteVaultRestoreTaskStatus{}
	return &this
}

// GetCurrentIndexingStatus returns the CurrentIndexingStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteVaultRestoreTaskStatus) GetCurrentIndexingStatus() RemoteRestoreIndexingStatus {
	if o == nil || o.CurrentIndexingStatus.Get() == nil {
		var ret RemoteRestoreIndexingStatus
		return ret
	}
	return *o.CurrentIndexingStatus.Get()
}

// GetCurrentIndexingStatusOk returns a tuple with the CurrentIndexingStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteVaultRestoreTaskStatus) GetCurrentIndexingStatusOk() (*RemoteRestoreIndexingStatus, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CurrentIndexingStatus.Get(), o.CurrentIndexingStatus.IsSet()
}

// HasCurrentIndexingStatus returns a boolean if a field has been set.
func (o *RemoteVaultRestoreTaskStatus) HasCurrentIndexingStatus() bool {
	if o != nil && o.CurrentIndexingStatus.IsSet() {
		return true
	}

	return false
}

// SetCurrentIndexingStatus gets a reference to the given NullableRemoteRestoreIndexingStatus and assigns it to the CurrentIndexingStatus field.
func (o *RemoteVaultRestoreTaskStatus) SetCurrentIndexingStatus(v RemoteRestoreIndexingStatus) {
	o.CurrentIndexingStatus.Set(&v)
}
// SetCurrentIndexingStatusNil sets the value for CurrentIndexingStatus to be an explicit nil
func (o *RemoteVaultRestoreTaskStatus) SetCurrentIndexingStatusNil() {
	o.CurrentIndexingStatus.Set(nil)
}

// UnsetCurrentIndexingStatus ensures that no value is present for CurrentIndexingStatus, not even an explicit nil
func (o *RemoteVaultRestoreTaskStatus) UnsetCurrentIndexingStatus() {
	o.CurrentIndexingStatus.Unset()
}

// GetCurrentSnapshotStatus returns the CurrentSnapshotStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteVaultRestoreTaskStatus) GetCurrentSnapshotStatus() RemoteRestoreSnapshotStatus {
	if o == nil || o.CurrentSnapshotStatus.Get() == nil {
		var ret RemoteRestoreSnapshotStatus
		return ret
	}
	return *o.CurrentSnapshotStatus.Get()
}

// GetCurrentSnapshotStatusOk returns a tuple with the CurrentSnapshotStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteVaultRestoreTaskStatus) GetCurrentSnapshotStatusOk() (*RemoteRestoreSnapshotStatus, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CurrentSnapshotStatus.Get(), o.CurrentSnapshotStatus.IsSet()
}

// HasCurrentSnapshotStatus returns a boolean if a field has been set.
func (o *RemoteVaultRestoreTaskStatus) HasCurrentSnapshotStatus() bool {
	if o != nil && o.CurrentSnapshotStatus.IsSet() {
		return true
	}

	return false
}

// SetCurrentSnapshotStatus gets a reference to the given NullableRemoteRestoreSnapshotStatus and assigns it to the CurrentSnapshotStatus field.
func (o *RemoteVaultRestoreTaskStatus) SetCurrentSnapshotStatus(v RemoteRestoreSnapshotStatus) {
	o.CurrentSnapshotStatus.Set(&v)
}
// SetCurrentSnapshotStatusNil sets the value for CurrentSnapshotStatus to be an explicit nil
func (o *RemoteVaultRestoreTaskStatus) SetCurrentSnapshotStatusNil() {
	o.CurrentSnapshotStatus.Set(nil)
}

// UnsetCurrentSnapshotStatus ensures that no value is present for CurrentSnapshotStatus, not even an explicit nil
func (o *RemoteVaultRestoreTaskStatus) UnsetCurrentSnapshotStatus() {
	o.CurrentSnapshotStatus.Unset()
}

// GetLocalProtectionJobUid returns the LocalProtectionJobUid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteVaultRestoreTaskStatus) GetLocalProtectionJobUid() UniversalId {
	if o == nil || o.LocalProtectionJobUid.Get() == nil {
		var ret UniversalId
		return ret
	}
	return *o.LocalProtectionJobUid.Get()
}

// GetLocalProtectionJobUidOk returns a tuple with the LocalProtectionJobUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteVaultRestoreTaskStatus) GetLocalProtectionJobUidOk() (*UniversalId, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LocalProtectionJobUid.Get(), o.LocalProtectionJobUid.IsSet()
}

// HasLocalProtectionJobUid returns a boolean if a field has been set.
func (o *RemoteVaultRestoreTaskStatus) HasLocalProtectionJobUid() bool {
	if o != nil && o.LocalProtectionJobUid.IsSet() {
		return true
	}

	return false
}

// SetLocalProtectionJobUid gets a reference to the given NullableUniversalId and assigns it to the LocalProtectionJobUid field.
func (o *RemoteVaultRestoreTaskStatus) SetLocalProtectionJobUid(v UniversalId) {
	o.LocalProtectionJobUid.Set(&v)
}
// SetLocalProtectionJobUidNil sets the value for LocalProtectionJobUid to be an explicit nil
func (o *RemoteVaultRestoreTaskStatus) SetLocalProtectionJobUidNil() {
	o.LocalProtectionJobUid.Set(nil)
}

// UnsetLocalProtectionJobUid ensures that no value is present for LocalProtectionJobUid, not even an explicit nil
func (o *RemoteVaultRestoreTaskStatus) UnsetLocalProtectionJobUid() {
	o.LocalProtectionJobUid.Unset()
}

// GetParentJobUid returns the ParentJobUid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteVaultRestoreTaskStatus) GetParentJobUid() UniversalId {
	if o == nil || o.ParentJobUid.Get() == nil {
		var ret UniversalId
		return ret
	}
	return *o.ParentJobUid.Get()
}

// GetParentJobUidOk returns a tuple with the ParentJobUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteVaultRestoreTaskStatus) GetParentJobUidOk() (*UniversalId, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ParentJobUid.Get(), o.ParentJobUid.IsSet()
}

// HasParentJobUid returns a boolean if a field has been set.
func (o *RemoteVaultRestoreTaskStatus) HasParentJobUid() bool {
	if o != nil && o.ParentJobUid.IsSet() {
		return true
	}

	return false
}

// SetParentJobUid gets a reference to the given NullableUniversalId and assigns it to the ParentJobUid field.
func (o *RemoteVaultRestoreTaskStatus) SetParentJobUid(v UniversalId) {
	o.ParentJobUid.Set(&v)
}
// SetParentJobUidNil sets the value for ParentJobUid to be an explicit nil
func (o *RemoteVaultRestoreTaskStatus) SetParentJobUidNil() {
	o.ParentJobUid.Set(nil)
}

// UnsetParentJobUid ensures that no value is present for ParentJobUid, not even an explicit nil
func (o *RemoteVaultRestoreTaskStatus) UnsetParentJobUid() {
	o.ParentJobUid.Unset()
}

// GetRemoteProtectionJobInformation returns the RemoteProtectionJobInformation field value if set, zero value otherwise.
func (o *RemoteVaultRestoreTaskStatus) GetRemoteProtectionJobInformation() RemoteProtectionJobInformation {
	if o == nil || o.RemoteProtectionJobInformation == nil {
		var ret RemoteProtectionJobInformation
		return ret
	}
	return *o.RemoteProtectionJobInformation
}

// GetRemoteProtectionJobInformationOk returns a tuple with the RemoteProtectionJobInformation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteVaultRestoreTaskStatus) GetRemoteProtectionJobInformationOk() (*RemoteProtectionJobInformation, bool) {
	if o == nil || o.RemoteProtectionJobInformation == nil {
		return nil, false
	}
	return o.RemoteProtectionJobInformation, true
}

// HasRemoteProtectionJobInformation returns a boolean if a field has been set.
func (o *RemoteVaultRestoreTaskStatus) HasRemoteProtectionJobInformation() bool {
	if o != nil && o.RemoteProtectionJobInformation != nil {
		return true
	}

	return false
}

// SetRemoteProtectionJobInformation gets a reference to the given RemoteProtectionJobInformation and assigns it to the RemoteProtectionJobInformation field.
func (o *RemoteVaultRestoreTaskStatus) SetRemoteProtectionJobInformation(v RemoteProtectionJobInformation) {
	o.RemoteProtectionJobInformation = &v
}

// GetSearchJobUid returns the SearchJobUid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteVaultRestoreTaskStatus) GetSearchJobUid() UniversalId {
	if o == nil || o.SearchJobUid.Get() == nil {
		var ret UniversalId
		return ret
	}
	return *o.SearchJobUid.Get()
}

// GetSearchJobUidOk returns a tuple with the SearchJobUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteVaultRestoreTaskStatus) GetSearchJobUidOk() (*UniversalId, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SearchJobUid.Get(), o.SearchJobUid.IsSet()
}

// HasSearchJobUid returns a boolean if a field has been set.
func (o *RemoteVaultRestoreTaskStatus) HasSearchJobUid() bool {
	if o != nil && o.SearchJobUid.IsSet() {
		return true
	}

	return false
}

// SetSearchJobUid gets a reference to the given NullableUniversalId and assigns it to the SearchJobUid field.
func (o *RemoteVaultRestoreTaskStatus) SetSearchJobUid(v UniversalId) {
	o.SearchJobUid.Set(&v)
}
// SetSearchJobUidNil sets the value for SearchJobUid to be an explicit nil
func (o *RemoteVaultRestoreTaskStatus) SetSearchJobUidNil() {
	o.SearchJobUid.Set(nil)
}

// UnsetSearchJobUid ensures that no value is present for SearchJobUid, not even an explicit nil
func (o *RemoteVaultRestoreTaskStatus) UnsetSearchJobUid() {
	o.SearchJobUid.Unset()
}

func (o RemoteVaultRestoreTaskStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CurrentIndexingStatus.IsSet() {
		toSerialize["currentIndexingStatus"] = o.CurrentIndexingStatus.Get()
	}
	if o.CurrentSnapshotStatus.IsSet() {
		toSerialize["currentSnapshotStatus"] = o.CurrentSnapshotStatus.Get()
	}
	if o.LocalProtectionJobUid.IsSet() {
		toSerialize["localProtectionJobUid"] = o.LocalProtectionJobUid.Get()
	}
	if o.ParentJobUid.IsSet() {
		toSerialize["parentJobUid"] = o.ParentJobUid.Get()
	}
	if o.RemoteProtectionJobInformation != nil {
		toSerialize["remoteProtectionJobInformation"] = o.RemoteProtectionJobInformation
	}
	if o.SearchJobUid.IsSet() {
		toSerialize["searchJobUid"] = o.SearchJobUid.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRemoteVaultRestoreTaskStatus struct {
	value *RemoteVaultRestoreTaskStatus
	isSet bool
}

func (v NullableRemoteVaultRestoreTaskStatus) Get() *RemoteVaultRestoreTaskStatus {
	return v.value
}

func (v *NullableRemoteVaultRestoreTaskStatus) Set(val *RemoteVaultRestoreTaskStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteVaultRestoreTaskStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteVaultRestoreTaskStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteVaultRestoreTaskStatus(val *RemoteVaultRestoreTaskStatus) *NullableRemoteVaultRestoreTaskStatus {
	return &NullableRemoteVaultRestoreTaskStatus{value: val, isSet: true}
}

func (v NullableRemoteVaultRestoreTaskStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteVaultRestoreTaskStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


