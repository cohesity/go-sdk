/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// KeystoneACLProtoGrantees struct for KeystoneACLProtoGrantees
type KeystoneACLProtoGrantees struct {
	// This field indicates if all users are granted ACL permission.
	AllUsers NullableBool `json:"allUsers,omitempty"`
	// This field holds a list of Keystone project ids whose users are granted ACL permission.
	ProjectIdVec []string `json:"projectIdVec,omitempty"`
	ProjectUsersMap []KeystoneACLProtoGranteesProjectUsersMapEntry `json:"projectUsersMap,omitempty"`
	// This field holds a list of Keystone roles for which any Keystone user with one (or more) of the roles on the project containing the swift container holding this KeystoneACLProto is granted ACL permission.
	RoleNameVec []string `json:"roleNameVec,omitempty"`
	// This field holds a list of keystone user ids who are granted ACL permission.
	UserIdVec []string `json:"userIdVec,omitempty"`
}

// NewKeystoneACLProtoGrantees instantiates a new KeystoneACLProtoGrantees object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeystoneACLProtoGrantees() *KeystoneACLProtoGrantees {
	this := KeystoneACLProtoGrantees{}
	return &this
}

// NewKeystoneACLProtoGranteesWithDefaults instantiates a new KeystoneACLProtoGrantees object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeystoneACLProtoGranteesWithDefaults() *KeystoneACLProtoGrantees {
	this := KeystoneACLProtoGrantees{}
	return &this
}

// GetAllUsers returns the AllUsers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeystoneACLProtoGrantees) GetAllUsers() bool {
	if o == nil || o.AllUsers.Get() == nil {
		var ret bool
		return ret
	}
	return *o.AllUsers.Get()
}

// GetAllUsersOk returns a tuple with the AllUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeystoneACLProtoGrantees) GetAllUsersOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AllUsers.Get(), o.AllUsers.IsSet()
}

// HasAllUsers returns a boolean if a field has been set.
func (o *KeystoneACLProtoGrantees) HasAllUsers() bool {
	if o != nil && o.AllUsers.IsSet() {
		return true
	}

	return false
}

// SetAllUsers gets a reference to the given NullableBool and assigns it to the AllUsers field.
func (o *KeystoneACLProtoGrantees) SetAllUsers(v bool) {
	o.AllUsers.Set(&v)
}
// SetAllUsersNil sets the value for AllUsers to be an explicit nil
func (o *KeystoneACLProtoGrantees) SetAllUsersNil() {
	o.AllUsers.Set(nil)
}

// UnsetAllUsers ensures that no value is present for AllUsers, not even an explicit nil
func (o *KeystoneACLProtoGrantees) UnsetAllUsers() {
	o.AllUsers.Unset()
}

// GetProjectIdVec returns the ProjectIdVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeystoneACLProtoGrantees) GetProjectIdVec() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.ProjectIdVec
}

// GetProjectIdVecOk returns a tuple with the ProjectIdVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeystoneACLProtoGrantees) GetProjectIdVecOk() (*[]string, bool) {
	if o == nil || o.ProjectIdVec == nil {
		return nil, false
	}
	return &o.ProjectIdVec, true
}

// HasProjectIdVec returns a boolean if a field has been set.
func (o *KeystoneACLProtoGrantees) HasProjectIdVec() bool {
	if o != nil && o.ProjectIdVec != nil {
		return true
	}

	return false
}

// SetProjectIdVec gets a reference to the given []string and assigns it to the ProjectIdVec field.
func (o *KeystoneACLProtoGrantees) SetProjectIdVec(v []string) {
	o.ProjectIdVec = v
}

// GetProjectUsersMap returns the ProjectUsersMap field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeystoneACLProtoGrantees) GetProjectUsersMap() []KeystoneACLProtoGranteesProjectUsersMapEntry {
	if o == nil  {
		var ret []KeystoneACLProtoGranteesProjectUsersMapEntry
		return ret
	}
	return o.ProjectUsersMap
}

// GetProjectUsersMapOk returns a tuple with the ProjectUsersMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeystoneACLProtoGrantees) GetProjectUsersMapOk() (*[]KeystoneACLProtoGranteesProjectUsersMapEntry, bool) {
	if o == nil || o.ProjectUsersMap == nil {
		return nil, false
	}
	return &o.ProjectUsersMap, true
}

// HasProjectUsersMap returns a boolean if a field has been set.
func (o *KeystoneACLProtoGrantees) HasProjectUsersMap() bool {
	if o != nil && o.ProjectUsersMap != nil {
		return true
	}

	return false
}

// SetProjectUsersMap gets a reference to the given []KeystoneACLProtoGranteesProjectUsersMapEntry and assigns it to the ProjectUsersMap field.
func (o *KeystoneACLProtoGrantees) SetProjectUsersMap(v []KeystoneACLProtoGranteesProjectUsersMapEntry) {
	o.ProjectUsersMap = v
}

// GetRoleNameVec returns the RoleNameVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeystoneACLProtoGrantees) GetRoleNameVec() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.RoleNameVec
}

// GetRoleNameVecOk returns a tuple with the RoleNameVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeystoneACLProtoGrantees) GetRoleNameVecOk() (*[]string, bool) {
	if o == nil || o.RoleNameVec == nil {
		return nil, false
	}
	return &o.RoleNameVec, true
}

// HasRoleNameVec returns a boolean if a field has been set.
func (o *KeystoneACLProtoGrantees) HasRoleNameVec() bool {
	if o != nil && o.RoleNameVec != nil {
		return true
	}

	return false
}

// SetRoleNameVec gets a reference to the given []string and assigns it to the RoleNameVec field.
func (o *KeystoneACLProtoGrantees) SetRoleNameVec(v []string) {
	o.RoleNameVec = v
}

// GetUserIdVec returns the UserIdVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeystoneACLProtoGrantees) GetUserIdVec() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.UserIdVec
}

// GetUserIdVecOk returns a tuple with the UserIdVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeystoneACLProtoGrantees) GetUserIdVecOk() (*[]string, bool) {
	if o == nil || o.UserIdVec == nil {
		return nil, false
	}
	return &o.UserIdVec, true
}

// HasUserIdVec returns a boolean if a field has been set.
func (o *KeystoneACLProtoGrantees) HasUserIdVec() bool {
	if o != nil && o.UserIdVec != nil {
		return true
	}

	return false
}

// SetUserIdVec gets a reference to the given []string and assigns it to the UserIdVec field.
func (o *KeystoneACLProtoGrantees) SetUserIdVec(v []string) {
	o.UserIdVec = v
}

func (o KeystoneACLProtoGrantees) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllUsers.IsSet() {
		toSerialize["allUsers"] = o.AllUsers.Get()
	}
	if o.ProjectIdVec != nil {
		toSerialize["projectIdVec"] = o.ProjectIdVec
	}
	if o.ProjectUsersMap != nil {
		toSerialize["projectUsersMap"] = o.ProjectUsersMap
	}
	if o.RoleNameVec != nil {
		toSerialize["roleNameVec"] = o.RoleNameVec
	}
	if o.UserIdVec != nil {
		toSerialize["userIdVec"] = o.UserIdVec
	}
	return json.Marshal(toSerialize)
}

type NullableKeystoneACLProtoGrantees struct {
	value *KeystoneACLProtoGrantees
	isSet bool
}

func (v NullableKeystoneACLProtoGrantees) Get() *KeystoneACLProtoGrantees {
	return v.value
}

func (v *NullableKeystoneACLProtoGrantees) Set(val *KeystoneACLProtoGrantees) {
	v.value = val
	v.isSet = true
}

func (v NullableKeystoneACLProtoGrantees) IsSet() bool {
	return v.isSet
}

func (v *NullableKeystoneACLProtoGrantees) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeystoneACLProtoGrantees(val *KeystoneACLProtoGrantees) *NullableKeystoneACLProtoGrantees {
	return &NullableKeystoneACLProtoGrantees{value: val, isSet: true}
}

func (v NullableKeystoneACLProtoGrantees) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeystoneACLProtoGrantees) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


