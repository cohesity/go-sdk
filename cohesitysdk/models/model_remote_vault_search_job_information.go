/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// RemoteVaultSearchJobInformation Specifies information about a search of a remote Vault.
type RemoteVaultSearchJobInformation struct {
	// Specifies number of Clusters that have archived to the remote Vault and match the search criteria for this job, up to this point in the search. If the search is complete, the total number of Clusters that have archived to the remote Vault and that match the search criteria for this search Job, are reported. If the search is not complete, a partial number is reported.
	ClusterCount NullableInt32 `json:"clusterCount,omitempty"`
	// Specifies the end time of the search as a Unix epoch Timestamp (in microseconds) if the search Job has completed.
	EndTimeUsecs NullableInt64 `json:"endTimeUsecs,omitempty"`
	// Specifies the error message reported when a search fails.
	Error NullableString `json:"error,omitempty"`
	// Specifies number of Protection Jobs that have archived to the remote Vault and match the search criteria for this search Job, up to this point in the search. If the search is complete, the total number of Protection Jobs that have archived to the remote Vault and that match the search criteria for this search Job, are reported. If the search is not complete, a partial number is reported.
	JobCount NullableInt32 `json:"jobCount,omitempty"`
	// Specifies the name of the search Job.
	Name NullableString `json:"name,omitempty"`
	// Specifies the status of the search. 'kJobRunning' indicates that the Job/task is currently running. 'kJobFinished' indicates that the Job/task completed and finished. 'kJobFailed' indicates that the Job/task failed and did not complete. 'kJobCanceled' indicates that the Job/task was canceled. 'kJobPaused' indicates the Job/task is paused.
	SearchJobStatus NullableString `json:"searchJobStatus,omitempty"`
	// Specifies the unique id assigned to the search Job by the Cluster.
	SearchJobUid NullableUniversalId `json:"searchJobUid,omitempty"`
	// Specifies the start time of the search as a Unix epoch Timestamp (in microseconds).
	StartTimeUsecs NullableInt64 `json:"startTimeUsecs,omitempty"`
	// Specifies the id of the remote Vault (External Target) that was searched.
	VaultId NullableInt64 `json:"vaultId,omitempty"`
	// Specifies the name of the remote Vault (External Target) that was searched.
	VaultName NullableString `json:"vaultName,omitempty"`
}

// NewRemoteVaultSearchJobInformation instantiates a new RemoteVaultSearchJobInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteVaultSearchJobInformation() *RemoteVaultSearchJobInformation {
	this := RemoteVaultSearchJobInformation{}
	return &this
}

// NewRemoteVaultSearchJobInformationWithDefaults instantiates a new RemoteVaultSearchJobInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteVaultSearchJobInformationWithDefaults() *RemoteVaultSearchJobInformation {
	this := RemoteVaultSearchJobInformation{}
	return &this
}

// GetClusterCount returns the ClusterCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteVaultSearchJobInformation) GetClusterCount() int32 {
	if o == nil || o.ClusterCount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.ClusterCount.Get()
}

// GetClusterCountOk returns a tuple with the ClusterCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteVaultSearchJobInformation) GetClusterCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterCount.Get(), o.ClusterCount.IsSet()
}

// HasClusterCount returns a boolean if a field has been set.
func (o *RemoteVaultSearchJobInformation) HasClusterCount() bool {
	if o != nil && o.ClusterCount.IsSet() {
		return true
	}

	return false
}

// SetClusterCount gets a reference to the given NullableInt32 and assigns it to the ClusterCount field.
func (o *RemoteVaultSearchJobInformation) SetClusterCount(v int32) {
	o.ClusterCount.Set(&v)
}
// SetClusterCountNil sets the value for ClusterCount to be an explicit nil
func (o *RemoteVaultSearchJobInformation) SetClusterCountNil() {
	o.ClusterCount.Set(nil)
}

// UnsetClusterCount ensures that no value is present for ClusterCount, not even an explicit nil
func (o *RemoteVaultSearchJobInformation) UnsetClusterCount() {
	o.ClusterCount.Unset()
}

// GetEndTimeUsecs returns the EndTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteVaultSearchJobInformation) GetEndTimeUsecs() int64 {
	if o == nil || o.EndTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.EndTimeUsecs.Get()
}

// GetEndTimeUsecsOk returns a tuple with the EndTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteVaultSearchJobInformation) GetEndTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EndTimeUsecs.Get(), o.EndTimeUsecs.IsSet()
}

// HasEndTimeUsecs returns a boolean if a field has been set.
func (o *RemoteVaultSearchJobInformation) HasEndTimeUsecs() bool {
	if o != nil && o.EndTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetEndTimeUsecs gets a reference to the given NullableInt64 and assigns it to the EndTimeUsecs field.
func (o *RemoteVaultSearchJobInformation) SetEndTimeUsecs(v int64) {
	o.EndTimeUsecs.Set(&v)
}
// SetEndTimeUsecsNil sets the value for EndTimeUsecs to be an explicit nil
func (o *RemoteVaultSearchJobInformation) SetEndTimeUsecsNil() {
	o.EndTimeUsecs.Set(nil)
}

// UnsetEndTimeUsecs ensures that no value is present for EndTimeUsecs, not even an explicit nil
func (o *RemoteVaultSearchJobInformation) UnsetEndTimeUsecs() {
	o.EndTimeUsecs.Unset()
}

// GetError returns the Error field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteVaultSearchJobInformation) GetError() string {
	if o == nil || o.Error.Get() == nil {
		var ret string
		return ret
	}
	return *o.Error.Get()
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteVaultSearchJobInformation) GetErrorOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Error.Get(), o.Error.IsSet()
}

// HasError returns a boolean if a field has been set.
func (o *RemoteVaultSearchJobInformation) HasError() bool {
	if o != nil && o.Error.IsSet() {
		return true
	}

	return false
}

// SetError gets a reference to the given NullableString and assigns it to the Error field.
func (o *RemoteVaultSearchJobInformation) SetError(v string) {
	o.Error.Set(&v)
}
// SetErrorNil sets the value for Error to be an explicit nil
func (o *RemoteVaultSearchJobInformation) SetErrorNil() {
	o.Error.Set(nil)
}

// UnsetError ensures that no value is present for Error, not even an explicit nil
func (o *RemoteVaultSearchJobInformation) UnsetError() {
	o.Error.Unset()
}

// GetJobCount returns the JobCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteVaultSearchJobInformation) GetJobCount() int32 {
	if o == nil || o.JobCount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.JobCount.Get()
}

// GetJobCountOk returns a tuple with the JobCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteVaultSearchJobInformation) GetJobCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.JobCount.Get(), o.JobCount.IsSet()
}

// HasJobCount returns a boolean if a field has been set.
func (o *RemoteVaultSearchJobInformation) HasJobCount() bool {
	if o != nil && o.JobCount.IsSet() {
		return true
	}

	return false
}

// SetJobCount gets a reference to the given NullableInt32 and assigns it to the JobCount field.
func (o *RemoteVaultSearchJobInformation) SetJobCount(v int32) {
	o.JobCount.Set(&v)
}
// SetJobCountNil sets the value for JobCount to be an explicit nil
func (o *RemoteVaultSearchJobInformation) SetJobCountNil() {
	o.JobCount.Set(nil)
}

// UnsetJobCount ensures that no value is present for JobCount, not even an explicit nil
func (o *RemoteVaultSearchJobInformation) UnsetJobCount() {
	o.JobCount.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteVaultSearchJobInformation) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteVaultSearchJobInformation) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *RemoteVaultSearchJobInformation) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *RemoteVaultSearchJobInformation) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *RemoteVaultSearchJobInformation) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *RemoteVaultSearchJobInformation) UnsetName() {
	o.Name.Unset()
}

// GetSearchJobStatus returns the SearchJobStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteVaultSearchJobInformation) GetSearchJobStatus() string {
	if o == nil || o.SearchJobStatus.Get() == nil {
		var ret string
		return ret
	}
	return *o.SearchJobStatus.Get()
}

// GetSearchJobStatusOk returns a tuple with the SearchJobStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteVaultSearchJobInformation) GetSearchJobStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SearchJobStatus.Get(), o.SearchJobStatus.IsSet()
}

// HasSearchJobStatus returns a boolean if a field has been set.
func (o *RemoteVaultSearchJobInformation) HasSearchJobStatus() bool {
	if o != nil && o.SearchJobStatus.IsSet() {
		return true
	}

	return false
}

// SetSearchJobStatus gets a reference to the given NullableString and assigns it to the SearchJobStatus field.
func (o *RemoteVaultSearchJobInformation) SetSearchJobStatus(v string) {
	o.SearchJobStatus.Set(&v)
}
// SetSearchJobStatusNil sets the value for SearchJobStatus to be an explicit nil
func (o *RemoteVaultSearchJobInformation) SetSearchJobStatusNil() {
	o.SearchJobStatus.Set(nil)
}

// UnsetSearchJobStatus ensures that no value is present for SearchJobStatus, not even an explicit nil
func (o *RemoteVaultSearchJobInformation) UnsetSearchJobStatus() {
	o.SearchJobStatus.Unset()
}

// GetSearchJobUid returns the SearchJobUid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteVaultSearchJobInformation) GetSearchJobUid() UniversalId {
	if o == nil || o.SearchJobUid.Get() == nil {
		var ret UniversalId
		return ret
	}
	return *o.SearchJobUid.Get()
}

// GetSearchJobUidOk returns a tuple with the SearchJobUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteVaultSearchJobInformation) GetSearchJobUidOk() (*UniversalId, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SearchJobUid.Get(), o.SearchJobUid.IsSet()
}

// HasSearchJobUid returns a boolean if a field has been set.
func (o *RemoteVaultSearchJobInformation) HasSearchJobUid() bool {
	if o != nil && o.SearchJobUid.IsSet() {
		return true
	}

	return false
}

// SetSearchJobUid gets a reference to the given NullableUniversalId and assigns it to the SearchJobUid field.
func (o *RemoteVaultSearchJobInformation) SetSearchJobUid(v UniversalId) {
	o.SearchJobUid.Set(&v)
}
// SetSearchJobUidNil sets the value for SearchJobUid to be an explicit nil
func (o *RemoteVaultSearchJobInformation) SetSearchJobUidNil() {
	o.SearchJobUid.Set(nil)
}

// UnsetSearchJobUid ensures that no value is present for SearchJobUid, not even an explicit nil
func (o *RemoteVaultSearchJobInformation) UnsetSearchJobUid() {
	o.SearchJobUid.Unset()
}

// GetStartTimeUsecs returns the StartTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteVaultSearchJobInformation) GetStartTimeUsecs() int64 {
	if o == nil || o.StartTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.StartTimeUsecs.Get()
}

// GetStartTimeUsecsOk returns a tuple with the StartTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteVaultSearchJobInformation) GetStartTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartTimeUsecs.Get(), o.StartTimeUsecs.IsSet()
}

// HasStartTimeUsecs returns a boolean if a field has been set.
func (o *RemoteVaultSearchJobInformation) HasStartTimeUsecs() bool {
	if o != nil && o.StartTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetStartTimeUsecs gets a reference to the given NullableInt64 and assigns it to the StartTimeUsecs field.
func (o *RemoteVaultSearchJobInformation) SetStartTimeUsecs(v int64) {
	o.StartTimeUsecs.Set(&v)
}
// SetStartTimeUsecsNil sets the value for StartTimeUsecs to be an explicit nil
func (o *RemoteVaultSearchJobInformation) SetStartTimeUsecsNil() {
	o.StartTimeUsecs.Set(nil)
}

// UnsetStartTimeUsecs ensures that no value is present for StartTimeUsecs, not even an explicit nil
func (o *RemoteVaultSearchJobInformation) UnsetStartTimeUsecs() {
	o.StartTimeUsecs.Unset()
}

// GetVaultId returns the VaultId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteVaultSearchJobInformation) GetVaultId() int64 {
	if o == nil || o.VaultId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.VaultId.Get()
}

// GetVaultIdOk returns a tuple with the VaultId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteVaultSearchJobInformation) GetVaultIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VaultId.Get(), o.VaultId.IsSet()
}

// HasVaultId returns a boolean if a field has been set.
func (o *RemoteVaultSearchJobInformation) HasVaultId() bool {
	if o != nil && o.VaultId.IsSet() {
		return true
	}

	return false
}

// SetVaultId gets a reference to the given NullableInt64 and assigns it to the VaultId field.
func (o *RemoteVaultSearchJobInformation) SetVaultId(v int64) {
	o.VaultId.Set(&v)
}
// SetVaultIdNil sets the value for VaultId to be an explicit nil
func (o *RemoteVaultSearchJobInformation) SetVaultIdNil() {
	o.VaultId.Set(nil)
}

// UnsetVaultId ensures that no value is present for VaultId, not even an explicit nil
func (o *RemoteVaultSearchJobInformation) UnsetVaultId() {
	o.VaultId.Unset()
}

// GetVaultName returns the VaultName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteVaultSearchJobInformation) GetVaultName() string {
	if o == nil || o.VaultName.Get() == nil {
		var ret string
		return ret
	}
	return *o.VaultName.Get()
}

// GetVaultNameOk returns a tuple with the VaultName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteVaultSearchJobInformation) GetVaultNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VaultName.Get(), o.VaultName.IsSet()
}

// HasVaultName returns a boolean if a field has been set.
func (o *RemoteVaultSearchJobInformation) HasVaultName() bool {
	if o != nil && o.VaultName.IsSet() {
		return true
	}

	return false
}

// SetVaultName gets a reference to the given NullableString and assigns it to the VaultName field.
func (o *RemoteVaultSearchJobInformation) SetVaultName(v string) {
	o.VaultName.Set(&v)
}
// SetVaultNameNil sets the value for VaultName to be an explicit nil
func (o *RemoteVaultSearchJobInformation) SetVaultNameNil() {
	o.VaultName.Set(nil)
}

// UnsetVaultName ensures that no value is present for VaultName, not even an explicit nil
func (o *RemoteVaultSearchJobInformation) UnsetVaultName() {
	o.VaultName.Unset()
}

func (o RemoteVaultSearchJobInformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClusterCount.IsSet() {
		toSerialize["clusterCount"] = o.ClusterCount.Get()
	}
	if o.EndTimeUsecs.IsSet() {
		toSerialize["endTimeUsecs"] = o.EndTimeUsecs.Get()
	}
	if o.Error.IsSet() {
		toSerialize["error"] = o.Error.Get()
	}
	if o.JobCount.IsSet() {
		toSerialize["jobCount"] = o.JobCount.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.SearchJobStatus.IsSet() {
		toSerialize["searchJobStatus"] = o.SearchJobStatus.Get()
	}
	if o.SearchJobUid.IsSet() {
		toSerialize["searchJobUid"] = o.SearchJobUid.Get()
	}
	if o.StartTimeUsecs.IsSet() {
		toSerialize["startTimeUsecs"] = o.StartTimeUsecs.Get()
	}
	if o.VaultId.IsSet() {
		toSerialize["vaultId"] = o.VaultId.Get()
	}
	if o.VaultName.IsSet() {
		toSerialize["vaultName"] = o.VaultName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRemoteVaultSearchJobInformation struct {
	value *RemoteVaultSearchJobInformation
	isSet bool
}

func (v NullableRemoteVaultSearchJobInformation) Get() *RemoteVaultSearchJobInformation {
	return v.value
}

func (v *NullableRemoteVaultSearchJobInformation) Set(val *RemoteVaultSearchJobInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteVaultSearchJobInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteVaultSearchJobInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteVaultSearchJobInformation(val *RemoteVaultSearchJobInformation) *NullableRemoteVaultSearchJobInformation {
	return &NullableRemoteVaultSearchJobInformation{value: val, isSet: true}
}

func (v NullableRemoteVaultSearchJobInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteVaultSearchJobInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


