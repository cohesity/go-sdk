/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// CouchbaseConnectParams Specifies an Object containing information about a registered couchbase source.
type CouchbaseConnectParams struct {
	// Specifies the Carrier direct/sll port.
	CarrierDirectPort NullableInt32 `json:"carrierDirectPort,omitempty"`
	// Specifies the HTTP direct/sll port.
	HttpDirectPort NullableInt32 `json:"httpDirectPort,omitempty"`
	// Specifies whether this cluster allows connection through SSL only.
	RequiresSsl NullableBool `json:"requiresSsl,omitempty"`
	// Specifies the Seeds of this Couchbase Cluster.
	Seeds []string `json:"seeds,omitempty"`
}

// NewCouchbaseConnectParams instantiates a new CouchbaseConnectParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCouchbaseConnectParams() *CouchbaseConnectParams {
	this := CouchbaseConnectParams{}
	return &this
}

// NewCouchbaseConnectParamsWithDefaults instantiates a new CouchbaseConnectParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCouchbaseConnectParamsWithDefaults() *CouchbaseConnectParams {
	this := CouchbaseConnectParams{}
	return &this
}

// GetCarrierDirectPort returns the CarrierDirectPort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CouchbaseConnectParams) GetCarrierDirectPort() int32 {
	if o == nil || o.CarrierDirectPort.Get() == nil {
		var ret int32
		return ret
	}
	return *o.CarrierDirectPort.Get()
}

// GetCarrierDirectPortOk returns a tuple with the CarrierDirectPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CouchbaseConnectParams) GetCarrierDirectPortOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CarrierDirectPort.Get(), o.CarrierDirectPort.IsSet()
}

// HasCarrierDirectPort returns a boolean if a field has been set.
func (o *CouchbaseConnectParams) HasCarrierDirectPort() bool {
	if o != nil && o.CarrierDirectPort.IsSet() {
		return true
	}

	return false
}

// SetCarrierDirectPort gets a reference to the given NullableInt32 and assigns it to the CarrierDirectPort field.
func (o *CouchbaseConnectParams) SetCarrierDirectPort(v int32) {
	o.CarrierDirectPort.Set(&v)
}
// SetCarrierDirectPortNil sets the value for CarrierDirectPort to be an explicit nil
func (o *CouchbaseConnectParams) SetCarrierDirectPortNil() {
	o.CarrierDirectPort.Set(nil)
}

// UnsetCarrierDirectPort ensures that no value is present for CarrierDirectPort, not even an explicit nil
func (o *CouchbaseConnectParams) UnsetCarrierDirectPort() {
	o.CarrierDirectPort.Unset()
}

// GetHttpDirectPort returns the HttpDirectPort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CouchbaseConnectParams) GetHttpDirectPort() int32 {
	if o == nil || o.HttpDirectPort.Get() == nil {
		var ret int32
		return ret
	}
	return *o.HttpDirectPort.Get()
}

// GetHttpDirectPortOk returns a tuple with the HttpDirectPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CouchbaseConnectParams) GetHttpDirectPortOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HttpDirectPort.Get(), o.HttpDirectPort.IsSet()
}

// HasHttpDirectPort returns a boolean if a field has been set.
func (o *CouchbaseConnectParams) HasHttpDirectPort() bool {
	if o != nil && o.HttpDirectPort.IsSet() {
		return true
	}

	return false
}

// SetHttpDirectPort gets a reference to the given NullableInt32 and assigns it to the HttpDirectPort field.
func (o *CouchbaseConnectParams) SetHttpDirectPort(v int32) {
	o.HttpDirectPort.Set(&v)
}
// SetHttpDirectPortNil sets the value for HttpDirectPort to be an explicit nil
func (o *CouchbaseConnectParams) SetHttpDirectPortNil() {
	o.HttpDirectPort.Set(nil)
}

// UnsetHttpDirectPort ensures that no value is present for HttpDirectPort, not even an explicit nil
func (o *CouchbaseConnectParams) UnsetHttpDirectPort() {
	o.HttpDirectPort.Unset()
}

// GetRequiresSsl returns the RequiresSsl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CouchbaseConnectParams) GetRequiresSsl() bool {
	if o == nil || o.RequiresSsl.Get() == nil {
		var ret bool
		return ret
	}
	return *o.RequiresSsl.Get()
}

// GetRequiresSslOk returns a tuple with the RequiresSsl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CouchbaseConnectParams) GetRequiresSslOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RequiresSsl.Get(), o.RequiresSsl.IsSet()
}

// HasRequiresSsl returns a boolean if a field has been set.
func (o *CouchbaseConnectParams) HasRequiresSsl() bool {
	if o != nil && o.RequiresSsl.IsSet() {
		return true
	}

	return false
}

// SetRequiresSsl gets a reference to the given NullableBool and assigns it to the RequiresSsl field.
func (o *CouchbaseConnectParams) SetRequiresSsl(v bool) {
	o.RequiresSsl.Set(&v)
}
// SetRequiresSslNil sets the value for RequiresSsl to be an explicit nil
func (o *CouchbaseConnectParams) SetRequiresSslNil() {
	o.RequiresSsl.Set(nil)
}

// UnsetRequiresSsl ensures that no value is present for RequiresSsl, not even an explicit nil
func (o *CouchbaseConnectParams) UnsetRequiresSsl() {
	o.RequiresSsl.Unset()
}

// GetSeeds returns the Seeds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CouchbaseConnectParams) GetSeeds() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Seeds
}

// GetSeedsOk returns a tuple with the Seeds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CouchbaseConnectParams) GetSeedsOk() (*[]string, bool) {
	if o == nil || o.Seeds == nil {
		return nil, false
	}
	return &o.Seeds, true
}

// HasSeeds returns a boolean if a field has been set.
func (o *CouchbaseConnectParams) HasSeeds() bool {
	if o != nil && o.Seeds != nil {
		return true
	}

	return false
}

// SetSeeds gets a reference to the given []string and assigns it to the Seeds field.
func (o *CouchbaseConnectParams) SetSeeds(v []string) {
	o.Seeds = v
}

func (o CouchbaseConnectParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CarrierDirectPort.IsSet() {
		toSerialize["carrierDirectPort"] = o.CarrierDirectPort.Get()
	}
	if o.HttpDirectPort.IsSet() {
		toSerialize["httpDirectPort"] = o.HttpDirectPort.Get()
	}
	if o.RequiresSsl.IsSet() {
		toSerialize["requiresSsl"] = o.RequiresSsl.Get()
	}
	if o.Seeds != nil {
		toSerialize["seeds"] = o.Seeds
	}
	return json.Marshal(toSerialize)
}

type NullableCouchbaseConnectParams struct {
	value *CouchbaseConnectParams
	isSet bool
}

func (v NullableCouchbaseConnectParams) Get() *CouchbaseConnectParams {
	return v.value
}

func (v *NullableCouchbaseConnectParams) Set(val *CouchbaseConnectParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCouchbaseConnectParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCouchbaseConnectParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCouchbaseConnectParams(val *CouchbaseConnectParams) *NullableCouchbaseConnectParams {
	return &NullableCouchbaseConnectParams{value: val, isSet: true}
}

func (v NullableCouchbaseConnectParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCouchbaseConnectParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


