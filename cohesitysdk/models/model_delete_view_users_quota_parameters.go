/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// DeleteViewUsersQuotaParameters Specifies the user ids to remove the corresponding quota overrides in view.
type DeleteViewUsersQuotaParameters struct {
	// Delete all existing user quota override policies.
	DeleteAll NullableBool `json:"deleteAll,omitempty"`
	// The user ids whose policy needs to be deleted.
	UserIds []UserId `json:"userIds,omitempty"`
	// View name of input view.
	ViewName NullableString `json:"viewName,omitempty"`
}

// NewDeleteViewUsersQuotaParameters instantiates a new DeleteViewUsersQuotaParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteViewUsersQuotaParameters() *DeleteViewUsersQuotaParameters {
	this := DeleteViewUsersQuotaParameters{}
	return &this
}

// NewDeleteViewUsersQuotaParametersWithDefaults instantiates a new DeleteViewUsersQuotaParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteViewUsersQuotaParametersWithDefaults() *DeleteViewUsersQuotaParameters {
	this := DeleteViewUsersQuotaParameters{}
	return &this
}

// GetDeleteAll returns the DeleteAll field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeleteViewUsersQuotaParameters) GetDeleteAll() bool {
	if o == nil || o.DeleteAll.Get() == nil {
		var ret bool
		return ret
	}
	return *o.DeleteAll.Get()
}

// GetDeleteAllOk returns a tuple with the DeleteAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeleteViewUsersQuotaParameters) GetDeleteAllOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DeleteAll.Get(), o.DeleteAll.IsSet()
}

// HasDeleteAll returns a boolean if a field has been set.
func (o *DeleteViewUsersQuotaParameters) HasDeleteAll() bool {
	if o != nil && o.DeleteAll.IsSet() {
		return true
	}

	return false
}

// SetDeleteAll gets a reference to the given NullableBool and assigns it to the DeleteAll field.
func (o *DeleteViewUsersQuotaParameters) SetDeleteAll(v bool) {
	o.DeleteAll.Set(&v)
}
// SetDeleteAllNil sets the value for DeleteAll to be an explicit nil
func (o *DeleteViewUsersQuotaParameters) SetDeleteAllNil() {
	o.DeleteAll.Set(nil)
}

// UnsetDeleteAll ensures that no value is present for DeleteAll, not even an explicit nil
func (o *DeleteViewUsersQuotaParameters) UnsetDeleteAll() {
	o.DeleteAll.Unset()
}

// GetUserIds returns the UserIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeleteViewUsersQuotaParameters) GetUserIds() []UserId {
	if o == nil  {
		var ret []UserId
		return ret
	}
	return o.UserIds
}

// GetUserIdsOk returns a tuple with the UserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeleteViewUsersQuotaParameters) GetUserIdsOk() (*[]UserId, bool) {
	if o == nil || o.UserIds == nil {
		return nil, false
	}
	return &o.UserIds, true
}

// HasUserIds returns a boolean if a field has been set.
func (o *DeleteViewUsersQuotaParameters) HasUserIds() bool {
	if o != nil && o.UserIds != nil {
		return true
	}

	return false
}

// SetUserIds gets a reference to the given []UserId and assigns it to the UserIds field.
func (o *DeleteViewUsersQuotaParameters) SetUserIds(v []UserId) {
	o.UserIds = v
}

// GetViewName returns the ViewName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeleteViewUsersQuotaParameters) GetViewName() string {
	if o == nil || o.ViewName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ViewName.Get()
}

// GetViewNameOk returns a tuple with the ViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeleteViewUsersQuotaParameters) GetViewNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewName.Get(), o.ViewName.IsSet()
}

// HasViewName returns a boolean if a field has been set.
func (o *DeleteViewUsersQuotaParameters) HasViewName() bool {
	if o != nil && o.ViewName.IsSet() {
		return true
	}

	return false
}

// SetViewName gets a reference to the given NullableString and assigns it to the ViewName field.
func (o *DeleteViewUsersQuotaParameters) SetViewName(v string) {
	o.ViewName.Set(&v)
}
// SetViewNameNil sets the value for ViewName to be an explicit nil
func (o *DeleteViewUsersQuotaParameters) SetViewNameNil() {
	o.ViewName.Set(nil)
}

// UnsetViewName ensures that no value is present for ViewName, not even an explicit nil
func (o *DeleteViewUsersQuotaParameters) UnsetViewName() {
	o.ViewName.Unset()
}

func (o DeleteViewUsersQuotaParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DeleteAll.IsSet() {
		toSerialize["deleteAll"] = o.DeleteAll.Get()
	}
	if o.UserIds != nil {
		toSerialize["userIds"] = o.UserIds
	}
	if o.ViewName.IsSet() {
		toSerialize["viewName"] = o.ViewName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDeleteViewUsersQuotaParameters struct {
	value *DeleteViewUsersQuotaParameters
	isSet bool
}

func (v NullableDeleteViewUsersQuotaParameters) Get() *DeleteViewUsersQuotaParameters {
	return v.value
}

func (v *NullableDeleteViewUsersQuotaParameters) Set(val *DeleteViewUsersQuotaParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteViewUsersQuotaParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteViewUsersQuotaParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteViewUsersQuotaParameters(val *DeleteViewUsersQuotaParameters) *NullableDeleteViewUsersQuotaParameters {
	return &NullableDeleteViewUsersQuotaParameters{value: val, isSet: true}
}

func (v NullableDeleteViewUsersQuotaParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteViewUsersQuotaParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


