/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// TaskNotification Structure that captures Task Notifications for a user.
type TaskNotification struct {
	BackupTask *BackupTaskInfo `json:"backupTask,omitempty"`
	BulkInstallAppTask *BulkInstallAppTaskInfo `json:"bulkInstallAppTask,omitempty"`
	CloneTask *CloneTaskInfo `json:"cloneTask,omitempty"`
	// Timestamp at which the notification was created.
	CreatedTimeSecs NullableInt64 `json:"createdTimeSecs,omitempty"`
	// Description holds the actual notification text generated for the event.
	Description NullableString `json:"description,omitempty"`
	// Dismissed keeps track of whether a notification has been seen or not. User may choose to dismiss individual event or all notifications at once. Nil or 0 value represents false.
	Dismissed NullableBool `json:"dismissed,omitempty"`
	// Timestamp at which user dismissed this notification event.
	DismissedTimeSecs NullableInt64 `json:"dismissedTimeSecs,omitempty"`
	FieldMessageTask *BasicTaskInfo `json:"fieldMessageTask,omitempty"`
	// id identifies a user notification event uniquely. This can also be used to dismiss individual notifications.
	Id NullableString `json:"id,omitempty"`
	RecoveryTask *RecoveryTaskInfo `json:"recoveryTask,omitempty"`
	// Status of the task. Status of the task. 'kSuccess' indicates that task completed successfully. 'kError' indicates that task encountered errors.
	Status NullableString `json:"status,omitempty"`
	// Task type denotes which type of task this notification is for. This param is used to reflect the taskType. 'Restore' notification type is generated upon completion of Restore tasks. 'Clone' notification type is generated upon completion of Clone tasks. 'BackupNow' notification type is generated upon completion of Backup tasks. 'FieldMessage' notification type is generated when field message from Cohesity support is created. 'bulkInstallApp' notification type is generated from bulk install app
	TaskType NullableString `json:"taskType,omitempty"`
	// Visited keeps track of whether a notification has been seen or not.
	Visited NullableBool `json:"visited,omitempty"`
	// Timestamp at which user visited this notification event.
	VisitedTimeSecs NullableInt64 `json:"visitedTimeSecs,omitempty"`
}

// NewTaskNotification instantiates a new TaskNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskNotification() *TaskNotification {
	this := TaskNotification{}
	return &this
}

// NewTaskNotificationWithDefaults instantiates a new TaskNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskNotificationWithDefaults() *TaskNotification {
	this := TaskNotification{}
	return &this
}

// GetBackupTask returns the BackupTask field value if set, zero value otherwise.
func (o *TaskNotification) GetBackupTask() BackupTaskInfo {
	if o == nil || o.BackupTask == nil {
		var ret BackupTaskInfo
		return ret
	}
	return *o.BackupTask
}

// GetBackupTaskOk returns a tuple with the BackupTask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskNotification) GetBackupTaskOk() (*BackupTaskInfo, bool) {
	if o == nil || o.BackupTask == nil {
		return nil, false
	}
	return o.BackupTask, true
}

// HasBackupTask returns a boolean if a field has been set.
func (o *TaskNotification) HasBackupTask() bool {
	if o != nil && o.BackupTask != nil {
		return true
	}

	return false
}

// SetBackupTask gets a reference to the given BackupTaskInfo and assigns it to the BackupTask field.
func (o *TaskNotification) SetBackupTask(v BackupTaskInfo) {
	o.BackupTask = &v
}

// GetBulkInstallAppTask returns the BulkInstallAppTask field value if set, zero value otherwise.
func (o *TaskNotification) GetBulkInstallAppTask() BulkInstallAppTaskInfo {
	if o == nil || o.BulkInstallAppTask == nil {
		var ret BulkInstallAppTaskInfo
		return ret
	}
	return *o.BulkInstallAppTask
}

// GetBulkInstallAppTaskOk returns a tuple with the BulkInstallAppTask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskNotification) GetBulkInstallAppTaskOk() (*BulkInstallAppTaskInfo, bool) {
	if o == nil || o.BulkInstallAppTask == nil {
		return nil, false
	}
	return o.BulkInstallAppTask, true
}

// HasBulkInstallAppTask returns a boolean if a field has been set.
func (o *TaskNotification) HasBulkInstallAppTask() bool {
	if o != nil && o.BulkInstallAppTask != nil {
		return true
	}

	return false
}

// SetBulkInstallAppTask gets a reference to the given BulkInstallAppTaskInfo and assigns it to the BulkInstallAppTask field.
func (o *TaskNotification) SetBulkInstallAppTask(v BulkInstallAppTaskInfo) {
	o.BulkInstallAppTask = &v
}

// GetCloneTask returns the CloneTask field value if set, zero value otherwise.
func (o *TaskNotification) GetCloneTask() CloneTaskInfo {
	if o == nil || o.CloneTask == nil {
		var ret CloneTaskInfo
		return ret
	}
	return *o.CloneTask
}

// GetCloneTaskOk returns a tuple with the CloneTask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskNotification) GetCloneTaskOk() (*CloneTaskInfo, bool) {
	if o == nil || o.CloneTask == nil {
		return nil, false
	}
	return o.CloneTask, true
}

// HasCloneTask returns a boolean if a field has been set.
func (o *TaskNotification) HasCloneTask() bool {
	if o != nil && o.CloneTask != nil {
		return true
	}

	return false
}

// SetCloneTask gets a reference to the given CloneTaskInfo and assigns it to the CloneTask field.
func (o *TaskNotification) SetCloneTask(v CloneTaskInfo) {
	o.CloneTask = &v
}

// GetCreatedTimeSecs returns the CreatedTimeSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskNotification) GetCreatedTimeSecs() int64 {
	if o == nil || o.CreatedTimeSecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.CreatedTimeSecs.Get()
}

// GetCreatedTimeSecsOk returns a tuple with the CreatedTimeSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskNotification) GetCreatedTimeSecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CreatedTimeSecs.Get(), o.CreatedTimeSecs.IsSet()
}

// HasCreatedTimeSecs returns a boolean if a field has been set.
func (o *TaskNotification) HasCreatedTimeSecs() bool {
	if o != nil && o.CreatedTimeSecs.IsSet() {
		return true
	}

	return false
}

// SetCreatedTimeSecs gets a reference to the given NullableInt64 and assigns it to the CreatedTimeSecs field.
func (o *TaskNotification) SetCreatedTimeSecs(v int64) {
	o.CreatedTimeSecs.Set(&v)
}
// SetCreatedTimeSecsNil sets the value for CreatedTimeSecs to be an explicit nil
func (o *TaskNotification) SetCreatedTimeSecsNil() {
	o.CreatedTimeSecs.Set(nil)
}

// UnsetCreatedTimeSecs ensures that no value is present for CreatedTimeSecs, not even an explicit nil
func (o *TaskNotification) UnsetCreatedTimeSecs() {
	o.CreatedTimeSecs.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskNotification) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskNotification) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *TaskNotification) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *TaskNotification) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *TaskNotification) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *TaskNotification) UnsetDescription() {
	o.Description.Unset()
}

// GetDismissed returns the Dismissed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskNotification) GetDismissed() bool {
	if o == nil || o.Dismissed.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Dismissed.Get()
}

// GetDismissedOk returns a tuple with the Dismissed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskNotification) GetDismissedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Dismissed.Get(), o.Dismissed.IsSet()
}

// HasDismissed returns a boolean if a field has been set.
func (o *TaskNotification) HasDismissed() bool {
	if o != nil && o.Dismissed.IsSet() {
		return true
	}

	return false
}

// SetDismissed gets a reference to the given NullableBool and assigns it to the Dismissed field.
func (o *TaskNotification) SetDismissed(v bool) {
	o.Dismissed.Set(&v)
}
// SetDismissedNil sets the value for Dismissed to be an explicit nil
func (o *TaskNotification) SetDismissedNil() {
	o.Dismissed.Set(nil)
}

// UnsetDismissed ensures that no value is present for Dismissed, not even an explicit nil
func (o *TaskNotification) UnsetDismissed() {
	o.Dismissed.Unset()
}

// GetDismissedTimeSecs returns the DismissedTimeSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskNotification) GetDismissedTimeSecs() int64 {
	if o == nil || o.DismissedTimeSecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DismissedTimeSecs.Get()
}

// GetDismissedTimeSecsOk returns a tuple with the DismissedTimeSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskNotification) GetDismissedTimeSecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DismissedTimeSecs.Get(), o.DismissedTimeSecs.IsSet()
}

// HasDismissedTimeSecs returns a boolean if a field has been set.
func (o *TaskNotification) HasDismissedTimeSecs() bool {
	if o != nil && o.DismissedTimeSecs.IsSet() {
		return true
	}

	return false
}

// SetDismissedTimeSecs gets a reference to the given NullableInt64 and assigns it to the DismissedTimeSecs field.
func (o *TaskNotification) SetDismissedTimeSecs(v int64) {
	o.DismissedTimeSecs.Set(&v)
}
// SetDismissedTimeSecsNil sets the value for DismissedTimeSecs to be an explicit nil
func (o *TaskNotification) SetDismissedTimeSecsNil() {
	o.DismissedTimeSecs.Set(nil)
}

// UnsetDismissedTimeSecs ensures that no value is present for DismissedTimeSecs, not even an explicit nil
func (o *TaskNotification) UnsetDismissedTimeSecs() {
	o.DismissedTimeSecs.Unset()
}

// GetFieldMessageTask returns the FieldMessageTask field value if set, zero value otherwise.
func (o *TaskNotification) GetFieldMessageTask() BasicTaskInfo {
	if o == nil || o.FieldMessageTask == nil {
		var ret BasicTaskInfo
		return ret
	}
	return *o.FieldMessageTask
}

// GetFieldMessageTaskOk returns a tuple with the FieldMessageTask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskNotification) GetFieldMessageTaskOk() (*BasicTaskInfo, bool) {
	if o == nil || o.FieldMessageTask == nil {
		return nil, false
	}
	return o.FieldMessageTask, true
}

// HasFieldMessageTask returns a boolean if a field has been set.
func (o *TaskNotification) HasFieldMessageTask() bool {
	if o != nil && o.FieldMessageTask != nil {
		return true
	}

	return false
}

// SetFieldMessageTask gets a reference to the given BasicTaskInfo and assigns it to the FieldMessageTask field.
func (o *TaskNotification) SetFieldMessageTask(v BasicTaskInfo) {
	o.FieldMessageTask = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskNotification) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskNotification) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *TaskNotification) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *TaskNotification) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *TaskNotification) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *TaskNotification) UnsetId() {
	o.Id.Unset()
}

// GetRecoveryTask returns the RecoveryTask field value if set, zero value otherwise.
func (o *TaskNotification) GetRecoveryTask() RecoveryTaskInfo {
	if o == nil || o.RecoveryTask == nil {
		var ret RecoveryTaskInfo
		return ret
	}
	return *o.RecoveryTask
}

// GetRecoveryTaskOk returns a tuple with the RecoveryTask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskNotification) GetRecoveryTaskOk() (*RecoveryTaskInfo, bool) {
	if o == nil || o.RecoveryTask == nil {
		return nil, false
	}
	return o.RecoveryTask, true
}

// HasRecoveryTask returns a boolean if a field has been set.
func (o *TaskNotification) HasRecoveryTask() bool {
	if o != nil && o.RecoveryTask != nil {
		return true
	}

	return false
}

// SetRecoveryTask gets a reference to the given RecoveryTaskInfo and assigns it to the RecoveryTask field.
func (o *TaskNotification) SetRecoveryTask(v RecoveryTaskInfo) {
	o.RecoveryTask = &v
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskNotification) GetStatus() string {
	if o == nil || o.Status.Get() == nil {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskNotification) GetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *TaskNotification) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *TaskNotification) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *TaskNotification) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *TaskNotification) UnsetStatus() {
	o.Status.Unset()
}

// GetTaskType returns the TaskType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskNotification) GetTaskType() string {
	if o == nil || o.TaskType.Get() == nil {
		var ret string
		return ret
	}
	return *o.TaskType.Get()
}

// GetTaskTypeOk returns a tuple with the TaskType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskNotification) GetTaskTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TaskType.Get(), o.TaskType.IsSet()
}

// HasTaskType returns a boolean if a field has been set.
func (o *TaskNotification) HasTaskType() bool {
	if o != nil && o.TaskType.IsSet() {
		return true
	}

	return false
}

// SetTaskType gets a reference to the given NullableString and assigns it to the TaskType field.
func (o *TaskNotification) SetTaskType(v string) {
	o.TaskType.Set(&v)
}
// SetTaskTypeNil sets the value for TaskType to be an explicit nil
func (o *TaskNotification) SetTaskTypeNil() {
	o.TaskType.Set(nil)
}

// UnsetTaskType ensures that no value is present for TaskType, not even an explicit nil
func (o *TaskNotification) UnsetTaskType() {
	o.TaskType.Unset()
}

// GetVisited returns the Visited field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskNotification) GetVisited() bool {
	if o == nil || o.Visited.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Visited.Get()
}

// GetVisitedOk returns a tuple with the Visited field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskNotification) GetVisitedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Visited.Get(), o.Visited.IsSet()
}

// HasVisited returns a boolean if a field has been set.
func (o *TaskNotification) HasVisited() bool {
	if o != nil && o.Visited.IsSet() {
		return true
	}

	return false
}

// SetVisited gets a reference to the given NullableBool and assigns it to the Visited field.
func (o *TaskNotification) SetVisited(v bool) {
	o.Visited.Set(&v)
}
// SetVisitedNil sets the value for Visited to be an explicit nil
func (o *TaskNotification) SetVisitedNil() {
	o.Visited.Set(nil)
}

// UnsetVisited ensures that no value is present for Visited, not even an explicit nil
func (o *TaskNotification) UnsetVisited() {
	o.Visited.Unset()
}

// GetVisitedTimeSecs returns the VisitedTimeSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskNotification) GetVisitedTimeSecs() int64 {
	if o == nil || o.VisitedTimeSecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.VisitedTimeSecs.Get()
}

// GetVisitedTimeSecsOk returns a tuple with the VisitedTimeSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskNotification) GetVisitedTimeSecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VisitedTimeSecs.Get(), o.VisitedTimeSecs.IsSet()
}

// HasVisitedTimeSecs returns a boolean if a field has been set.
func (o *TaskNotification) HasVisitedTimeSecs() bool {
	if o != nil && o.VisitedTimeSecs.IsSet() {
		return true
	}

	return false
}

// SetVisitedTimeSecs gets a reference to the given NullableInt64 and assigns it to the VisitedTimeSecs field.
func (o *TaskNotification) SetVisitedTimeSecs(v int64) {
	o.VisitedTimeSecs.Set(&v)
}
// SetVisitedTimeSecsNil sets the value for VisitedTimeSecs to be an explicit nil
func (o *TaskNotification) SetVisitedTimeSecsNil() {
	o.VisitedTimeSecs.Set(nil)
}

// UnsetVisitedTimeSecs ensures that no value is present for VisitedTimeSecs, not even an explicit nil
func (o *TaskNotification) UnsetVisitedTimeSecs() {
	o.VisitedTimeSecs.Unset()
}

func (o TaskNotification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BackupTask != nil {
		toSerialize["backupTask"] = o.BackupTask
	}
	if o.BulkInstallAppTask != nil {
		toSerialize["bulkInstallAppTask"] = o.BulkInstallAppTask
	}
	if o.CloneTask != nil {
		toSerialize["cloneTask"] = o.CloneTask
	}
	if o.CreatedTimeSecs.IsSet() {
		toSerialize["createdTimeSecs"] = o.CreatedTimeSecs.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Dismissed.IsSet() {
		toSerialize["dismissed"] = o.Dismissed.Get()
	}
	if o.DismissedTimeSecs.IsSet() {
		toSerialize["dismissedTimeSecs"] = o.DismissedTimeSecs.Get()
	}
	if o.FieldMessageTask != nil {
		toSerialize["fieldMessageTask"] = o.FieldMessageTask
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.RecoveryTask != nil {
		toSerialize["recoveryTask"] = o.RecoveryTask
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.TaskType.IsSet() {
		toSerialize["taskType"] = o.TaskType.Get()
	}
	if o.Visited.IsSet() {
		toSerialize["visited"] = o.Visited.Get()
	}
	if o.VisitedTimeSecs.IsSet() {
		toSerialize["visitedTimeSecs"] = o.VisitedTimeSecs.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableTaskNotification struct {
	value *TaskNotification
	isSet bool
}

func (v NullableTaskNotification) Get() *TaskNotification {
	return v.value
}

func (v *NullableTaskNotification) Set(val *TaskNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskNotification(val *TaskNotification) *NullableTaskNotification {
	return &NullableTaskNotification{value: val, isSet: true}
}

func (v NullableTaskNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


