/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// TimeOfAWeek Specifies a time period by specifying a single daily time period and one or more days of the week, for example 9 AM - 5 PM on Monday, Wednesday or Friday. If different time periods are required on different days, then multiple instances of this Weekly Time Period must be specified.
type TimeOfAWeek struct {
	// Array of Week Days.  Specifies a list of days of a week (such as 'kSunday') when the time period should be applied. If not set, the time range applies to all days of the week. Specifies a day in a week such as 'kSunday', 'kMonday', etc.
	Days []string `json:"days,omitempty"`
	// Specifies the end time for the daily time period.
	EndTime NullableTimeOfDay `json:"endTime,omitempty"`
	// All Day.  Specifies that time range is applied for entire day.
	IsAllDay NullableBool `json:"isAllDay,omitempty"`
	// Specifies the start time for the daily time period.
	StartTime NullableTimeOfDay `json:"startTime,omitempty"`
}

// NewTimeOfAWeek instantiates a new TimeOfAWeek object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeOfAWeek() *TimeOfAWeek {
	this := TimeOfAWeek{}
	return &this
}

// NewTimeOfAWeekWithDefaults instantiates a new TimeOfAWeek object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeOfAWeekWithDefaults() *TimeOfAWeek {
	this := TimeOfAWeek{}
	return &this
}

// GetDays returns the Days field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeOfAWeek) GetDays() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Days
}

// GetDaysOk returns a tuple with the Days field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeOfAWeek) GetDaysOk() (*[]string, bool) {
	if o == nil || o.Days == nil {
		return nil, false
	}
	return &o.Days, true
}

// HasDays returns a boolean if a field has been set.
func (o *TimeOfAWeek) HasDays() bool {
	if o != nil && o.Days != nil {
		return true
	}

	return false
}

// SetDays gets a reference to the given []string and assigns it to the Days field.
func (o *TimeOfAWeek) SetDays(v []string) {
	o.Days = v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeOfAWeek) GetEndTime() TimeOfDay {
	if o == nil || o.EndTime.Get() == nil {
		var ret TimeOfDay
		return ret
	}
	return *o.EndTime.Get()
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeOfAWeek) GetEndTimeOk() (*TimeOfDay, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EndTime.Get(), o.EndTime.IsSet()
}

// HasEndTime returns a boolean if a field has been set.
func (o *TimeOfAWeek) HasEndTime() bool {
	if o != nil && o.EndTime.IsSet() {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given NullableTimeOfDay and assigns it to the EndTime field.
func (o *TimeOfAWeek) SetEndTime(v TimeOfDay) {
	o.EndTime.Set(&v)
}
// SetEndTimeNil sets the value for EndTime to be an explicit nil
func (o *TimeOfAWeek) SetEndTimeNil() {
	o.EndTime.Set(nil)
}

// UnsetEndTime ensures that no value is present for EndTime, not even an explicit nil
func (o *TimeOfAWeek) UnsetEndTime() {
	o.EndTime.Unset()
}

// GetIsAllDay returns the IsAllDay field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeOfAWeek) GetIsAllDay() bool {
	if o == nil || o.IsAllDay.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsAllDay.Get()
}

// GetIsAllDayOk returns a tuple with the IsAllDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeOfAWeek) GetIsAllDayOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsAllDay.Get(), o.IsAllDay.IsSet()
}

// HasIsAllDay returns a boolean if a field has been set.
func (o *TimeOfAWeek) HasIsAllDay() bool {
	if o != nil && o.IsAllDay.IsSet() {
		return true
	}

	return false
}

// SetIsAllDay gets a reference to the given NullableBool and assigns it to the IsAllDay field.
func (o *TimeOfAWeek) SetIsAllDay(v bool) {
	o.IsAllDay.Set(&v)
}
// SetIsAllDayNil sets the value for IsAllDay to be an explicit nil
func (o *TimeOfAWeek) SetIsAllDayNil() {
	o.IsAllDay.Set(nil)
}

// UnsetIsAllDay ensures that no value is present for IsAllDay, not even an explicit nil
func (o *TimeOfAWeek) UnsetIsAllDay() {
	o.IsAllDay.Unset()
}

// GetStartTime returns the StartTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeOfAWeek) GetStartTime() TimeOfDay {
	if o == nil || o.StartTime.Get() == nil {
		var ret TimeOfDay
		return ret
	}
	return *o.StartTime.Get()
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeOfAWeek) GetStartTimeOk() (*TimeOfDay, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartTime.Get(), o.StartTime.IsSet()
}

// HasStartTime returns a boolean if a field has been set.
func (o *TimeOfAWeek) HasStartTime() bool {
	if o != nil && o.StartTime.IsSet() {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given NullableTimeOfDay and assigns it to the StartTime field.
func (o *TimeOfAWeek) SetStartTime(v TimeOfDay) {
	o.StartTime.Set(&v)
}
// SetStartTimeNil sets the value for StartTime to be an explicit nil
func (o *TimeOfAWeek) SetStartTimeNil() {
	o.StartTime.Set(nil)
}

// UnsetStartTime ensures that no value is present for StartTime, not even an explicit nil
func (o *TimeOfAWeek) UnsetStartTime() {
	o.StartTime.Unset()
}

func (o TimeOfAWeek) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Days != nil {
		toSerialize["days"] = o.Days
	}
	if o.EndTime.IsSet() {
		toSerialize["endTime"] = o.EndTime.Get()
	}
	if o.IsAllDay.IsSet() {
		toSerialize["isAllDay"] = o.IsAllDay.Get()
	}
	if o.StartTime.IsSet() {
		toSerialize["startTime"] = o.StartTime.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableTimeOfAWeek struct {
	value *TimeOfAWeek
	isSet bool
}

func (v NullableTimeOfAWeek) Get() *TimeOfAWeek {
	return v.value
}

func (v *NullableTimeOfAWeek) Set(val *TimeOfAWeek) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeOfAWeek) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeOfAWeek) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeOfAWeek(val *TimeOfAWeek) *NullableTimeOfAWeek {
	return &NullableTimeOfAWeek{value: val, isSet: true}
}

func (v NullableTimeOfAWeek) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeOfAWeek) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


