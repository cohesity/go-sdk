/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ProtectedObject Provides details about a Protected Object.
type ProtectedObject struct {
	JobId *UniversalId `json:"jobId,omitempty"`
	// If protection fails then specifies why the protection failed on this object.
	ProtectionFauilureReason NullableString `json:"protectionFauilureReason,omitempty"`
	// Specifies the id of the Protection Source.
	ProtectionSourceId NullableInt64 `json:"protectionSourceId,omitempty"`
}

// NewProtectedObject instantiates a new ProtectedObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtectedObject() *ProtectedObject {
	this := ProtectedObject{}
	return &this
}

// NewProtectedObjectWithDefaults instantiates a new ProtectedObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtectedObjectWithDefaults() *ProtectedObject {
	this := ProtectedObject{}
	return &this
}

// GetJobId returns the JobId field value if set, zero value otherwise.
func (o *ProtectedObject) GetJobId() UniversalId {
	if o == nil || o.JobId == nil {
		var ret UniversalId
		return ret
	}
	return *o.JobId
}

// GetJobIdOk returns a tuple with the JobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectedObject) GetJobIdOk() (*UniversalId, bool) {
	if o == nil || o.JobId == nil {
		return nil, false
	}
	return o.JobId, true
}

// HasJobId returns a boolean if a field has been set.
func (o *ProtectedObject) HasJobId() bool {
	if o != nil && o.JobId != nil {
		return true
	}

	return false
}

// SetJobId gets a reference to the given UniversalId and assigns it to the JobId field.
func (o *ProtectedObject) SetJobId(v UniversalId) {
	o.JobId = &v
}

// GetProtectionFauilureReason returns the ProtectionFauilureReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectedObject) GetProtectionFauilureReason() string {
	if o == nil || o.ProtectionFauilureReason.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProtectionFauilureReason.Get()
}

// GetProtectionFauilureReasonOk returns a tuple with the ProtectionFauilureReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectedObject) GetProtectionFauilureReasonOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProtectionFauilureReason.Get(), o.ProtectionFauilureReason.IsSet()
}

// HasProtectionFauilureReason returns a boolean if a field has been set.
func (o *ProtectedObject) HasProtectionFauilureReason() bool {
	if o != nil && o.ProtectionFauilureReason.IsSet() {
		return true
	}

	return false
}

// SetProtectionFauilureReason gets a reference to the given NullableString and assigns it to the ProtectionFauilureReason field.
func (o *ProtectedObject) SetProtectionFauilureReason(v string) {
	o.ProtectionFauilureReason.Set(&v)
}
// SetProtectionFauilureReasonNil sets the value for ProtectionFauilureReason to be an explicit nil
func (o *ProtectedObject) SetProtectionFauilureReasonNil() {
	o.ProtectionFauilureReason.Set(nil)
}

// UnsetProtectionFauilureReason ensures that no value is present for ProtectionFauilureReason, not even an explicit nil
func (o *ProtectedObject) UnsetProtectionFauilureReason() {
	o.ProtectionFauilureReason.Unset()
}

// GetProtectionSourceId returns the ProtectionSourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectedObject) GetProtectionSourceId() int64 {
	if o == nil || o.ProtectionSourceId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ProtectionSourceId.Get()
}

// GetProtectionSourceIdOk returns a tuple with the ProtectionSourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectedObject) GetProtectionSourceIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProtectionSourceId.Get(), o.ProtectionSourceId.IsSet()
}

// HasProtectionSourceId returns a boolean if a field has been set.
func (o *ProtectedObject) HasProtectionSourceId() bool {
	if o != nil && o.ProtectionSourceId.IsSet() {
		return true
	}

	return false
}

// SetProtectionSourceId gets a reference to the given NullableInt64 and assigns it to the ProtectionSourceId field.
func (o *ProtectedObject) SetProtectionSourceId(v int64) {
	o.ProtectionSourceId.Set(&v)
}
// SetProtectionSourceIdNil sets the value for ProtectionSourceId to be an explicit nil
func (o *ProtectedObject) SetProtectionSourceIdNil() {
	o.ProtectionSourceId.Set(nil)
}

// UnsetProtectionSourceId ensures that no value is present for ProtectionSourceId, not even an explicit nil
func (o *ProtectedObject) UnsetProtectionSourceId() {
	o.ProtectionSourceId.Unset()
}

func (o ProtectedObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.JobId != nil {
		toSerialize["jobId"] = o.JobId
	}
	if o.ProtectionFauilureReason.IsSet() {
		toSerialize["protectionFauilureReason"] = o.ProtectionFauilureReason.Get()
	}
	if o.ProtectionSourceId.IsSet() {
		toSerialize["protectionSourceId"] = o.ProtectionSourceId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableProtectedObject struct {
	value *ProtectedObject
	isSet bool
}

func (v NullableProtectedObject) Get() *ProtectedObject {
	return v.value
}

func (v *NullableProtectedObject) Set(val *ProtectedObject) {
	v.value = val
	v.isSet = true
}

func (v NullableProtectedObject) IsSet() bool {
	return v.isSet
}

func (v *NullableProtectedObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtectedObject(val *ProtectedObject) *NullableProtectedObject {
	return &NullableProtectedObject{value: val, isSet: true}
}

func (v NullableProtectedObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtectedObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


