/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// VolumeInfo struct for VolumeInfo
type VolumeInfo struct {
	// Information about all the disks and partitions needed to mount this logical volume.
	DiskVec []VolumeInfoDiskInfo `json:"diskVec,omitempty"`
	// Display name.
	DisplayName NullableString `json:"displayName,omitempty"`
	// Filesystem on this volume.
	FilesystemType NullableString `json:"filesystemType,omitempty"`
	// Filesystem label.
	FsLabel NullableString `json:"fsLabel,omitempty"`
	// Filesystem uuid.
	FsUuid NullableString `json:"fsUuid,omitempty"`
	// Is this volume bootable?
	IsBootable NullableBool `json:"isBootable,omitempty"`
	// Is this a dedup volume? Currently, set to true only for ntfs dedup volume.
	IsDedup NullableBool `json:"isDedup,omitempty"`
	// Is this a supported Volume (filesystem)?
	IsSupported NullableBool `json:"isSupported,omitempty"`
	LvInfo *VolumeInfoLogicalVolumeInfo `json:"lvInfo,omitempty"`
	// The guid of the volume represented by this virtual disk. This information will be originally populated by magneto for physical environments.
	VolumeGuid NullableString `json:"volumeGuid,omitempty"`
	// Whether this volume is simple, lvm or ldm.
	VolumeType NullableInt32 `json:"volumeType,omitempty"`
}

// NewVolumeInfo instantiates a new VolumeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeInfo() *VolumeInfo {
	this := VolumeInfo{}
	return &this
}

// NewVolumeInfoWithDefaults instantiates a new VolumeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeInfoWithDefaults() *VolumeInfo {
	this := VolumeInfo{}
	return &this
}

// GetDiskVec returns the DiskVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfo) GetDiskVec() []VolumeInfoDiskInfo {
	if o == nil  {
		var ret []VolumeInfoDiskInfo
		return ret
	}
	return o.DiskVec
}

// GetDiskVecOk returns a tuple with the DiskVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfo) GetDiskVecOk() (*[]VolumeInfoDiskInfo, bool) {
	if o == nil || o.DiskVec == nil {
		return nil, false
	}
	return &o.DiskVec, true
}

// HasDiskVec returns a boolean if a field has been set.
func (o *VolumeInfo) HasDiskVec() bool {
	if o != nil && o.DiskVec != nil {
		return true
	}

	return false
}

// SetDiskVec gets a reference to the given []VolumeInfoDiskInfo and assigns it to the DiskVec field.
func (o *VolumeInfo) SetDiskVec(v []VolumeInfoDiskInfo) {
	o.DiskVec = v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfo) GetDisplayName() string {
	if o == nil || o.DisplayName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfo) GetDisplayNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *VolumeInfo) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *VolumeInfo) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}
// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *VolumeInfo) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *VolumeInfo) UnsetDisplayName() {
	o.DisplayName.Unset()
}

// GetFilesystemType returns the FilesystemType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfo) GetFilesystemType() string {
	if o == nil || o.FilesystemType.Get() == nil {
		var ret string
		return ret
	}
	return *o.FilesystemType.Get()
}

// GetFilesystemTypeOk returns a tuple with the FilesystemType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfo) GetFilesystemTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FilesystemType.Get(), o.FilesystemType.IsSet()
}

// HasFilesystemType returns a boolean if a field has been set.
func (o *VolumeInfo) HasFilesystemType() bool {
	if o != nil && o.FilesystemType.IsSet() {
		return true
	}

	return false
}

// SetFilesystemType gets a reference to the given NullableString and assigns it to the FilesystemType field.
func (o *VolumeInfo) SetFilesystemType(v string) {
	o.FilesystemType.Set(&v)
}
// SetFilesystemTypeNil sets the value for FilesystemType to be an explicit nil
func (o *VolumeInfo) SetFilesystemTypeNil() {
	o.FilesystemType.Set(nil)
}

// UnsetFilesystemType ensures that no value is present for FilesystemType, not even an explicit nil
func (o *VolumeInfo) UnsetFilesystemType() {
	o.FilesystemType.Unset()
}

// GetFsLabel returns the FsLabel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfo) GetFsLabel() string {
	if o == nil || o.FsLabel.Get() == nil {
		var ret string
		return ret
	}
	return *o.FsLabel.Get()
}

// GetFsLabelOk returns a tuple with the FsLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfo) GetFsLabelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FsLabel.Get(), o.FsLabel.IsSet()
}

// HasFsLabel returns a boolean if a field has been set.
func (o *VolumeInfo) HasFsLabel() bool {
	if o != nil && o.FsLabel.IsSet() {
		return true
	}

	return false
}

// SetFsLabel gets a reference to the given NullableString and assigns it to the FsLabel field.
func (o *VolumeInfo) SetFsLabel(v string) {
	o.FsLabel.Set(&v)
}
// SetFsLabelNil sets the value for FsLabel to be an explicit nil
func (o *VolumeInfo) SetFsLabelNil() {
	o.FsLabel.Set(nil)
}

// UnsetFsLabel ensures that no value is present for FsLabel, not even an explicit nil
func (o *VolumeInfo) UnsetFsLabel() {
	o.FsLabel.Unset()
}

// GetFsUuid returns the FsUuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfo) GetFsUuid() string {
	if o == nil || o.FsUuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.FsUuid.Get()
}

// GetFsUuidOk returns a tuple with the FsUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfo) GetFsUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FsUuid.Get(), o.FsUuid.IsSet()
}

// HasFsUuid returns a boolean if a field has been set.
func (o *VolumeInfo) HasFsUuid() bool {
	if o != nil && o.FsUuid.IsSet() {
		return true
	}

	return false
}

// SetFsUuid gets a reference to the given NullableString and assigns it to the FsUuid field.
func (o *VolumeInfo) SetFsUuid(v string) {
	o.FsUuid.Set(&v)
}
// SetFsUuidNil sets the value for FsUuid to be an explicit nil
func (o *VolumeInfo) SetFsUuidNil() {
	o.FsUuid.Set(nil)
}

// UnsetFsUuid ensures that no value is present for FsUuid, not even an explicit nil
func (o *VolumeInfo) UnsetFsUuid() {
	o.FsUuid.Unset()
}

// GetIsBootable returns the IsBootable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfo) GetIsBootable() bool {
	if o == nil || o.IsBootable.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsBootable.Get()
}

// GetIsBootableOk returns a tuple with the IsBootable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfo) GetIsBootableOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsBootable.Get(), o.IsBootable.IsSet()
}

// HasIsBootable returns a boolean if a field has been set.
func (o *VolumeInfo) HasIsBootable() bool {
	if o != nil && o.IsBootable.IsSet() {
		return true
	}

	return false
}

// SetIsBootable gets a reference to the given NullableBool and assigns it to the IsBootable field.
func (o *VolumeInfo) SetIsBootable(v bool) {
	o.IsBootable.Set(&v)
}
// SetIsBootableNil sets the value for IsBootable to be an explicit nil
func (o *VolumeInfo) SetIsBootableNil() {
	o.IsBootable.Set(nil)
}

// UnsetIsBootable ensures that no value is present for IsBootable, not even an explicit nil
func (o *VolumeInfo) UnsetIsBootable() {
	o.IsBootable.Unset()
}

// GetIsDedup returns the IsDedup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfo) GetIsDedup() bool {
	if o == nil || o.IsDedup.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsDedup.Get()
}

// GetIsDedupOk returns a tuple with the IsDedup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfo) GetIsDedupOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsDedup.Get(), o.IsDedup.IsSet()
}

// HasIsDedup returns a boolean if a field has been set.
func (o *VolumeInfo) HasIsDedup() bool {
	if o != nil && o.IsDedup.IsSet() {
		return true
	}

	return false
}

// SetIsDedup gets a reference to the given NullableBool and assigns it to the IsDedup field.
func (o *VolumeInfo) SetIsDedup(v bool) {
	o.IsDedup.Set(&v)
}
// SetIsDedupNil sets the value for IsDedup to be an explicit nil
func (o *VolumeInfo) SetIsDedupNil() {
	o.IsDedup.Set(nil)
}

// UnsetIsDedup ensures that no value is present for IsDedup, not even an explicit nil
func (o *VolumeInfo) UnsetIsDedup() {
	o.IsDedup.Unset()
}

// GetIsSupported returns the IsSupported field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfo) GetIsSupported() bool {
	if o == nil || o.IsSupported.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsSupported.Get()
}

// GetIsSupportedOk returns a tuple with the IsSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfo) GetIsSupportedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsSupported.Get(), o.IsSupported.IsSet()
}

// HasIsSupported returns a boolean if a field has been set.
func (o *VolumeInfo) HasIsSupported() bool {
	if o != nil && o.IsSupported.IsSet() {
		return true
	}

	return false
}

// SetIsSupported gets a reference to the given NullableBool and assigns it to the IsSupported field.
func (o *VolumeInfo) SetIsSupported(v bool) {
	o.IsSupported.Set(&v)
}
// SetIsSupportedNil sets the value for IsSupported to be an explicit nil
func (o *VolumeInfo) SetIsSupportedNil() {
	o.IsSupported.Set(nil)
}

// UnsetIsSupported ensures that no value is present for IsSupported, not even an explicit nil
func (o *VolumeInfo) UnsetIsSupported() {
	o.IsSupported.Unset()
}

// GetLvInfo returns the LvInfo field value if set, zero value otherwise.
func (o *VolumeInfo) GetLvInfo() VolumeInfoLogicalVolumeInfo {
	if o == nil || o.LvInfo == nil {
		var ret VolumeInfoLogicalVolumeInfo
		return ret
	}
	return *o.LvInfo
}

// GetLvInfoOk returns a tuple with the LvInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInfo) GetLvInfoOk() (*VolumeInfoLogicalVolumeInfo, bool) {
	if o == nil || o.LvInfo == nil {
		return nil, false
	}
	return o.LvInfo, true
}

// HasLvInfo returns a boolean if a field has been set.
func (o *VolumeInfo) HasLvInfo() bool {
	if o != nil && o.LvInfo != nil {
		return true
	}

	return false
}

// SetLvInfo gets a reference to the given VolumeInfoLogicalVolumeInfo and assigns it to the LvInfo field.
func (o *VolumeInfo) SetLvInfo(v VolumeInfoLogicalVolumeInfo) {
	o.LvInfo = &v
}

// GetVolumeGuid returns the VolumeGuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfo) GetVolumeGuid() string {
	if o == nil || o.VolumeGuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.VolumeGuid.Get()
}

// GetVolumeGuidOk returns a tuple with the VolumeGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfo) GetVolumeGuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VolumeGuid.Get(), o.VolumeGuid.IsSet()
}

// HasVolumeGuid returns a boolean if a field has been set.
func (o *VolumeInfo) HasVolumeGuid() bool {
	if o != nil && o.VolumeGuid.IsSet() {
		return true
	}

	return false
}

// SetVolumeGuid gets a reference to the given NullableString and assigns it to the VolumeGuid field.
func (o *VolumeInfo) SetVolumeGuid(v string) {
	o.VolumeGuid.Set(&v)
}
// SetVolumeGuidNil sets the value for VolumeGuid to be an explicit nil
func (o *VolumeInfo) SetVolumeGuidNil() {
	o.VolumeGuid.Set(nil)
}

// UnsetVolumeGuid ensures that no value is present for VolumeGuid, not even an explicit nil
func (o *VolumeInfo) UnsetVolumeGuid() {
	o.VolumeGuid.Unset()
}

// GetVolumeType returns the VolumeType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfo) GetVolumeType() int32 {
	if o == nil || o.VolumeType.Get() == nil {
		var ret int32
		return ret
	}
	return *o.VolumeType.Get()
}

// GetVolumeTypeOk returns a tuple with the VolumeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfo) GetVolumeTypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VolumeType.Get(), o.VolumeType.IsSet()
}

// HasVolumeType returns a boolean if a field has been set.
func (o *VolumeInfo) HasVolumeType() bool {
	if o != nil && o.VolumeType.IsSet() {
		return true
	}

	return false
}

// SetVolumeType gets a reference to the given NullableInt32 and assigns it to the VolumeType field.
func (o *VolumeInfo) SetVolumeType(v int32) {
	o.VolumeType.Set(&v)
}
// SetVolumeTypeNil sets the value for VolumeType to be an explicit nil
func (o *VolumeInfo) SetVolumeTypeNil() {
	o.VolumeType.Set(nil)
}

// UnsetVolumeType ensures that no value is present for VolumeType, not even an explicit nil
func (o *VolumeInfo) UnsetVolumeType() {
	o.VolumeType.Unset()
}

func (o VolumeInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DiskVec != nil {
		toSerialize["diskVec"] = o.DiskVec
	}
	if o.DisplayName.IsSet() {
		toSerialize["displayName"] = o.DisplayName.Get()
	}
	if o.FilesystemType.IsSet() {
		toSerialize["filesystemType"] = o.FilesystemType.Get()
	}
	if o.FsLabel.IsSet() {
		toSerialize["fsLabel"] = o.FsLabel.Get()
	}
	if o.FsUuid.IsSet() {
		toSerialize["fsUuid"] = o.FsUuid.Get()
	}
	if o.IsBootable.IsSet() {
		toSerialize["isBootable"] = o.IsBootable.Get()
	}
	if o.IsDedup.IsSet() {
		toSerialize["isDedup"] = o.IsDedup.Get()
	}
	if o.IsSupported.IsSet() {
		toSerialize["isSupported"] = o.IsSupported.Get()
	}
	if o.LvInfo != nil {
		toSerialize["lvInfo"] = o.LvInfo
	}
	if o.VolumeGuid.IsSet() {
		toSerialize["volumeGuid"] = o.VolumeGuid.Get()
	}
	if o.VolumeType.IsSet() {
		toSerialize["volumeType"] = o.VolumeType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableVolumeInfo struct {
	value *VolumeInfo
	isSet bool
}

func (v NullableVolumeInfo) Get() *VolumeInfo {
	return v.value
}

func (v *NullableVolumeInfo) Set(val *VolumeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeInfo(val *VolumeInfo) *NullableVolumeInfo {
	return &NullableVolumeInfo{value: val, isSet: true}
}

func (v NullableVolumeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


