/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// DomainControllers Domain Controllers for a domain of an Active Directory domain.
type DomainControllers struct {
	// Domain Controllers of a domain of an Active Directory domain.
	DomainControllers []string `json:"domainControllers,omitempty"`
}

// NewDomainControllers instantiates a new DomainControllers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDomainControllers() *DomainControllers {
	this := DomainControllers{}
	return &this
}

// NewDomainControllersWithDefaults instantiates a new DomainControllers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDomainControllersWithDefaults() *DomainControllers {
	this := DomainControllers{}
	return &this
}

// GetDomainControllers returns the DomainControllers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DomainControllers) GetDomainControllers() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.DomainControllers
}

// GetDomainControllersOk returns a tuple with the DomainControllers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DomainControllers) GetDomainControllersOk() (*[]string, bool) {
	if o == nil || o.DomainControllers == nil {
		return nil, false
	}
	return &o.DomainControllers, true
}

// HasDomainControllers returns a boolean if a field has been set.
func (o *DomainControllers) HasDomainControllers() bool {
	if o != nil && o.DomainControllers != nil {
		return true
	}

	return false
}

// SetDomainControllers gets a reference to the given []string and assigns it to the DomainControllers field.
func (o *DomainControllers) SetDomainControllers(v []string) {
	o.DomainControllers = v
}

func (o DomainControllers) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DomainControllers != nil {
		toSerialize["domainControllers"] = o.DomainControllers
	}
	return json.Marshal(toSerialize)
}

type NullableDomainControllers struct {
	value *DomainControllers
	isSet bool
}

func (v NullableDomainControllers) Get() *DomainControllers {
	return v.value
}

func (v *NullableDomainControllers) Set(val *DomainControllers) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainControllers) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainControllers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainControllers(val *DomainControllers) *NullableDomainControllers {
	return &NullableDomainControllers{value: val, isSet: true}
}

func (v NullableDomainControllers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainControllers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


