/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// PhysicalNodeConfiguration Specifies the configuration for a node in the Cluster.
type PhysicalNodeConfiguration struct {
	// Specifies the Node ID for this node.
	NodeId NullableInt64 `json:"nodeId,omitempty"`
	// Specifies the Node IP address for this node.
	NodeIp NullableString `json:"nodeIp,omitempty"`
	// Specifies IPMI IP for this node.
	NodeIpmiIp NullableString `json:"nodeIpmiIp,omitempty"`
	// Specifies whether to use the Node for compute only.
	UseAsComputeNode NullableBool `json:"useAsComputeNode,omitempty"`
}

// NewPhysicalNodeConfiguration instantiates a new PhysicalNodeConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhysicalNodeConfiguration() *PhysicalNodeConfiguration {
	this := PhysicalNodeConfiguration{}
	return &this
}

// NewPhysicalNodeConfigurationWithDefaults instantiates a new PhysicalNodeConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhysicalNodeConfigurationWithDefaults() *PhysicalNodeConfiguration {
	this := PhysicalNodeConfiguration{}
	return &this
}

// GetNodeId returns the NodeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalNodeConfiguration) GetNodeId() int64 {
	if o == nil || o.NodeId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NodeId.Get()
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalNodeConfiguration) GetNodeIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NodeId.Get(), o.NodeId.IsSet()
}

// HasNodeId returns a boolean if a field has been set.
func (o *PhysicalNodeConfiguration) HasNodeId() bool {
	if o != nil && o.NodeId.IsSet() {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given NullableInt64 and assigns it to the NodeId field.
func (o *PhysicalNodeConfiguration) SetNodeId(v int64) {
	o.NodeId.Set(&v)
}
// SetNodeIdNil sets the value for NodeId to be an explicit nil
func (o *PhysicalNodeConfiguration) SetNodeIdNil() {
	o.NodeId.Set(nil)
}

// UnsetNodeId ensures that no value is present for NodeId, not even an explicit nil
func (o *PhysicalNodeConfiguration) UnsetNodeId() {
	o.NodeId.Unset()
}

// GetNodeIp returns the NodeIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalNodeConfiguration) GetNodeIp() string {
	if o == nil || o.NodeIp.Get() == nil {
		var ret string
		return ret
	}
	return *o.NodeIp.Get()
}

// GetNodeIpOk returns a tuple with the NodeIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalNodeConfiguration) GetNodeIpOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NodeIp.Get(), o.NodeIp.IsSet()
}

// HasNodeIp returns a boolean if a field has been set.
func (o *PhysicalNodeConfiguration) HasNodeIp() bool {
	if o != nil && o.NodeIp.IsSet() {
		return true
	}

	return false
}

// SetNodeIp gets a reference to the given NullableString and assigns it to the NodeIp field.
func (o *PhysicalNodeConfiguration) SetNodeIp(v string) {
	o.NodeIp.Set(&v)
}
// SetNodeIpNil sets the value for NodeIp to be an explicit nil
func (o *PhysicalNodeConfiguration) SetNodeIpNil() {
	o.NodeIp.Set(nil)
}

// UnsetNodeIp ensures that no value is present for NodeIp, not even an explicit nil
func (o *PhysicalNodeConfiguration) UnsetNodeIp() {
	o.NodeIp.Unset()
}

// GetNodeIpmiIp returns the NodeIpmiIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalNodeConfiguration) GetNodeIpmiIp() string {
	if o == nil || o.NodeIpmiIp.Get() == nil {
		var ret string
		return ret
	}
	return *o.NodeIpmiIp.Get()
}

// GetNodeIpmiIpOk returns a tuple with the NodeIpmiIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalNodeConfiguration) GetNodeIpmiIpOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NodeIpmiIp.Get(), o.NodeIpmiIp.IsSet()
}

// HasNodeIpmiIp returns a boolean if a field has been set.
func (o *PhysicalNodeConfiguration) HasNodeIpmiIp() bool {
	if o != nil && o.NodeIpmiIp.IsSet() {
		return true
	}

	return false
}

// SetNodeIpmiIp gets a reference to the given NullableString and assigns it to the NodeIpmiIp field.
func (o *PhysicalNodeConfiguration) SetNodeIpmiIp(v string) {
	o.NodeIpmiIp.Set(&v)
}
// SetNodeIpmiIpNil sets the value for NodeIpmiIp to be an explicit nil
func (o *PhysicalNodeConfiguration) SetNodeIpmiIpNil() {
	o.NodeIpmiIp.Set(nil)
}

// UnsetNodeIpmiIp ensures that no value is present for NodeIpmiIp, not even an explicit nil
func (o *PhysicalNodeConfiguration) UnsetNodeIpmiIp() {
	o.NodeIpmiIp.Unset()
}

// GetUseAsComputeNode returns the UseAsComputeNode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalNodeConfiguration) GetUseAsComputeNode() bool {
	if o == nil || o.UseAsComputeNode.Get() == nil {
		var ret bool
		return ret
	}
	return *o.UseAsComputeNode.Get()
}

// GetUseAsComputeNodeOk returns a tuple with the UseAsComputeNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalNodeConfiguration) GetUseAsComputeNodeOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UseAsComputeNode.Get(), o.UseAsComputeNode.IsSet()
}

// HasUseAsComputeNode returns a boolean if a field has been set.
func (o *PhysicalNodeConfiguration) HasUseAsComputeNode() bool {
	if o != nil && o.UseAsComputeNode.IsSet() {
		return true
	}

	return false
}

// SetUseAsComputeNode gets a reference to the given NullableBool and assigns it to the UseAsComputeNode field.
func (o *PhysicalNodeConfiguration) SetUseAsComputeNode(v bool) {
	o.UseAsComputeNode.Set(&v)
}
// SetUseAsComputeNodeNil sets the value for UseAsComputeNode to be an explicit nil
func (o *PhysicalNodeConfiguration) SetUseAsComputeNodeNil() {
	o.UseAsComputeNode.Set(nil)
}

// UnsetUseAsComputeNode ensures that no value is present for UseAsComputeNode, not even an explicit nil
func (o *PhysicalNodeConfiguration) UnsetUseAsComputeNode() {
	o.UseAsComputeNode.Unset()
}

func (o PhysicalNodeConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NodeId.IsSet() {
		toSerialize["nodeId"] = o.NodeId.Get()
	}
	if o.NodeIp.IsSet() {
		toSerialize["nodeIp"] = o.NodeIp.Get()
	}
	if o.NodeIpmiIp.IsSet() {
		toSerialize["nodeIpmiIp"] = o.NodeIpmiIp.Get()
	}
	if o.UseAsComputeNode.IsSet() {
		toSerialize["useAsComputeNode"] = o.UseAsComputeNode.Get()
	}
	return json.Marshal(toSerialize)
}

type NullablePhysicalNodeConfiguration struct {
	value *PhysicalNodeConfiguration
	isSet bool
}

func (v NullablePhysicalNodeConfiguration) Get() *PhysicalNodeConfiguration {
	return v.value
}

func (v *NullablePhysicalNodeConfiguration) Set(val *PhysicalNodeConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullablePhysicalNodeConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullablePhysicalNodeConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhysicalNodeConfiguration(val *PhysicalNodeConfiguration) *NullablePhysicalNodeConfiguration {
	return &NullablePhysicalNodeConfiguration{value: val, isSet: true}
}

func (v NullablePhysicalNodeConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhysicalNodeConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


