/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ViewTimeSeriesStats Specifies the View Time Series stats.
type ViewTimeSeriesStats struct {
	// Specifies the timestamp in milliseconds.
	TimestampMsecs NullableInt64 `json:"timestampMsecs,omitempty"`
	// Specifies the value of the specified metric at the timestamp.
	Value NullableInt64 `json:"value,omitempty"`
}

// NewViewTimeSeriesStats instantiates a new ViewTimeSeriesStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewTimeSeriesStats() *ViewTimeSeriesStats {
	this := ViewTimeSeriesStats{}
	return &this
}

// NewViewTimeSeriesStatsWithDefaults instantiates a new ViewTimeSeriesStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewTimeSeriesStatsWithDefaults() *ViewTimeSeriesStats {
	this := ViewTimeSeriesStats{}
	return &this
}

// GetTimestampMsecs returns the TimestampMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewTimeSeriesStats) GetTimestampMsecs() int64 {
	if o == nil || o.TimestampMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TimestampMsecs.Get()
}

// GetTimestampMsecsOk returns a tuple with the TimestampMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewTimeSeriesStats) GetTimestampMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TimestampMsecs.Get(), o.TimestampMsecs.IsSet()
}

// HasTimestampMsecs returns a boolean if a field has been set.
func (o *ViewTimeSeriesStats) HasTimestampMsecs() bool {
	if o != nil && o.TimestampMsecs.IsSet() {
		return true
	}

	return false
}

// SetTimestampMsecs gets a reference to the given NullableInt64 and assigns it to the TimestampMsecs field.
func (o *ViewTimeSeriesStats) SetTimestampMsecs(v int64) {
	o.TimestampMsecs.Set(&v)
}
// SetTimestampMsecsNil sets the value for TimestampMsecs to be an explicit nil
func (o *ViewTimeSeriesStats) SetTimestampMsecsNil() {
	o.TimestampMsecs.Set(nil)
}

// UnsetTimestampMsecs ensures that no value is present for TimestampMsecs, not even an explicit nil
func (o *ViewTimeSeriesStats) UnsetTimestampMsecs() {
	o.TimestampMsecs.Unset()
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewTimeSeriesStats) GetValue() int64 {
	if o == nil || o.Value.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewTimeSeriesStats) GetValueOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// HasValue returns a boolean if a field has been set.
func (o *ViewTimeSeriesStats) HasValue() bool {
	if o != nil && o.Value.IsSet() {
		return true
	}

	return false
}

// SetValue gets a reference to the given NullableInt64 and assigns it to the Value field.
func (o *ViewTimeSeriesStats) SetValue(v int64) {
	o.Value.Set(&v)
}
// SetValueNil sets the value for Value to be an explicit nil
func (o *ViewTimeSeriesStats) SetValueNil() {
	o.Value.Set(nil)
}

// UnsetValue ensures that no value is present for Value, not even an explicit nil
func (o *ViewTimeSeriesStats) UnsetValue() {
	o.Value.Unset()
}

func (o ViewTimeSeriesStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TimestampMsecs.IsSet() {
		toSerialize["timestampMsecs"] = o.TimestampMsecs.Get()
	}
	if o.Value.IsSet() {
		toSerialize["value"] = o.Value.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableViewTimeSeriesStats struct {
	value *ViewTimeSeriesStats
	isSet bool
}

func (v NullableViewTimeSeriesStats) Get() *ViewTimeSeriesStats {
	return v.value
}

func (v *NullableViewTimeSeriesStats) Set(val *ViewTimeSeriesStats) {
	v.value = val
	v.isSet = true
}

func (v NullableViewTimeSeriesStats) IsSet() bool {
	return v.isSet
}

func (v *NullableViewTimeSeriesStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewTimeSeriesStats(val *ViewTimeSeriesStats) *NullableViewTimeSeriesStats {
	return &NullableViewTimeSeriesStats{value: val, isSet: true}
}

func (v NullableViewTimeSeriesStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewTimeSeriesStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


