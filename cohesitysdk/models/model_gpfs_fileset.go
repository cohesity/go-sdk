/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// GpfsFileset Specifies information about a fileset in a GPFS file system.
type GpfsFileset struct {
	// Specifies the id of the fileset.
	Id NullableInt32 `json:"id,omitempty"`
	// If the given fileset is an Independent fileset or not.
	IsIndependentFileset NullableBool `json:"isIndependentFileset,omitempty"`
	// Name of the filesystem associated with the fileset
	Name NullableString `json:"name,omitempty"`
	// Specifies the absolute path of the fileset.
	Path NullableString `json:"path,omitempty"`
	// Specifies GPFS supported Protocol information enabled on GPFS File System 'kNfs' indicates NFS exports in a GPFS fileset. 'kSmb' indicates CIFS/SMB Shares in a GPFS fileset.
	Protocols []string `json:"protocols,omitempty"`
}

// NewGpfsFileset instantiates a new GpfsFileset object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGpfsFileset() *GpfsFileset {
	this := GpfsFileset{}
	return &this
}

// NewGpfsFilesetWithDefaults instantiates a new GpfsFileset object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGpfsFilesetWithDefaults() *GpfsFileset {
	this := GpfsFileset{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GpfsFileset) GetId() int32 {
	if o == nil || o.Id.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GpfsFileset) GetIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *GpfsFileset) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt32 and assigns it to the Id field.
func (o *GpfsFileset) SetId(v int32) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *GpfsFileset) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *GpfsFileset) UnsetId() {
	o.Id.Unset()
}

// GetIsIndependentFileset returns the IsIndependentFileset field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GpfsFileset) GetIsIndependentFileset() bool {
	if o == nil || o.IsIndependentFileset.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsIndependentFileset.Get()
}

// GetIsIndependentFilesetOk returns a tuple with the IsIndependentFileset field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GpfsFileset) GetIsIndependentFilesetOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsIndependentFileset.Get(), o.IsIndependentFileset.IsSet()
}

// HasIsIndependentFileset returns a boolean if a field has been set.
func (o *GpfsFileset) HasIsIndependentFileset() bool {
	if o != nil && o.IsIndependentFileset.IsSet() {
		return true
	}

	return false
}

// SetIsIndependentFileset gets a reference to the given NullableBool and assigns it to the IsIndependentFileset field.
func (o *GpfsFileset) SetIsIndependentFileset(v bool) {
	o.IsIndependentFileset.Set(&v)
}
// SetIsIndependentFilesetNil sets the value for IsIndependentFileset to be an explicit nil
func (o *GpfsFileset) SetIsIndependentFilesetNil() {
	o.IsIndependentFileset.Set(nil)
}

// UnsetIsIndependentFileset ensures that no value is present for IsIndependentFileset, not even an explicit nil
func (o *GpfsFileset) UnsetIsIndependentFileset() {
	o.IsIndependentFileset.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GpfsFileset) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GpfsFileset) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *GpfsFileset) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *GpfsFileset) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *GpfsFileset) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *GpfsFileset) UnsetName() {
	o.Name.Unset()
}

// GetPath returns the Path field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GpfsFileset) GetPath() string {
	if o == nil || o.Path.Get() == nil {
		var ret string
		return ret
	}
	return *o.Path.Get()
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GpfsFileset) GetPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Path.Get(), o.Path.IsSet()
}

// HasPath returns a boolean if a field has been set.
func (o *GpfsFileset) HasPath() bool {
	if o != nil && o.Path.IsSet() {
		return true
	}

	return false
}

// SetPath gets a reference to the given NullableString and assigns it to the Path field.
func (o *GpfsFileset) SetPath(v string) {
	o.Path.Set(&v)
}
// SetPathNil sets the value for Path to be an explicit nil
func (o *GpfsFileset) SetPathNil() {
	o.Path.Set(nil)
}

// UnsetPath ensures that no value is present for Path, not even an explicit nil
func (o *GpfsFileset) UnsetPath() {
	o.Path.Unset()
}

// GetProtocols returns the Protocols field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GpfsFileset) GetProtocols() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Protocols
}

// GetProtocolsOk returns a tuple with the Protocols field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GpfsFileset) GetProtocolsOk() (*[]string, bool) {
	if o == nil || o.Protocols == nil {
		return nil, false
	}
	return &o.Protocols, true
}

// HasProtocols returns a boolean if a field has been set.
func (o *GpfsFileset) HasProtocols() bool {
	if o != nil && o.Protocols != nil {
		return true
	}

	return false
}

// SetProtocols gets a reference to the given []string and assigns it to the Protocols field.
func (o *GpfsFileset) SetProtocols(v []string) {
	o.Protocols = v
}

func (o GpfsFileset) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.IsIndependentFileset.IsSet() {
		toSerialize["isIndependentFileset"] = o.IsIndependentFileset.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Path.IsSet() {
		toSerialize["path"] = o.Path.Get()
	}
	if o.Protocols != nil {
		toSerialize["protocols"] = o.Protocols
	}
	return json.Marshal(toSerialize)
}

type NullableGpfsFileset struct {
	value *GpfsFileset
	isSet bool
}

func (v NullableGpfsFileset) Get() *GpfsFileset {
	return v.value
}

func (v *NullableGpfsFileset) Set(val *GpfsFileset) {
	v.value = val
	v.isSet = true
}

func (v NullableGpfsFileset) IsSet() bool {
	return v.isSet
}

func (v *NullableGpfsFileset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGpfsFileset(val *GpfsFileset) *NullableGpfsFileset {
	return &NullableGpfsFileset{value: val, isSet: true}
}

func (v NullableGpfsFileset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGpfsFileset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


