/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// LicenseState Specifies the state of licensing workflow.
type LicenseState struct {
	// Specifies no of failed attempts at claiming the license server
	FailedAttempts NullableInt64 `json:"failedAttempts,omitempty"`
	// Specifies the current state of licensing workflow. LicenseStateType specifies the licenseState type. 'kInProgressNewCluster' indicates licensing server claim is in progress for 'New' Cluster. 'kInProgressOldCluster' indicates licensing server claim is in progress for 'Old' Cluster. 'kClaimed' indicates licensing server is claimed. 'kSkipped' indicates licensing workflow has been skipped. 'kStarted' indicates licensing UI workflow has started.
	State NullableString `json:"state,omitempty"`
}

// NewLicenseState instantiates a new LicenseState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseState() *LicenseState {
	this := LicenseState{}
	return &this
}

// NewLicenseStateWithDefaults instantiates a new LicenseState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseStateWithDefaults() *LicenseState {
	this := LicenseState{}
	return &this
}

// GetFailedAttempts returns the FailedAttempts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicenseState) GetFailedAttempts() int64 {
	if o == nil || o.FailedAttempts.Get() == nil {
		var ret int64
		return ret
	}
	return *o.FailedAttempts.Get()
}

// GetFailedAttemptsOk returns a tuple with the FailedAttempts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicenseState) GetFailedAttemptsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FailedAttempts.Get(), o.FailedAttempts.IsSet()
}

// HasFailedAttempts returns a boolean if a field has been set.
func (o *LicenseState) HasFailedAttempts() bool {
	if o != nil && o.FailedAttempts.IsSet() {
		return true
	}

	return false
}

// SetFailedAttempts gets a reference to the given NullableInt64 and assigns it to the FailedAttempts field.
func (o *LicenseState) SetFailedAttempts(v int64) {
	o.FailedAttempts.Set(&v)
}
// SetFailedAttemptsNil sets the value for FailedAttempts to be an explicit nil
func (o *LicenseState) SetFailedAttemptsNil() {
	o.FailedAttempts.Set(nil)
}

// UnsetFailedAttempts ensures that no value is present for FailedAttempts, not even an explicit nil
func (o *LicenseState) UnsetFailedAttempts() {
	o.FailedAttempts.Unset()
}

// GetState returns the State field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicenseState) GetState() string {
	if o == nil || o.State.Get() == nil {
		var ret string
		return ret
	}
	return *o.State.Get()
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicenseState) GetStateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.State.Get(), o.State.IsSet()
}

// HasState returns a boolean if a field has been set.
func (o *LicenseState) HasState() bool {
	if o != nil && o.State.IsSet() {
		return true
	}

	return false
}

// SetState gets a reference to the given NullableString and assigns it to the State field.
func (o *LicenseState) SetState(v string) {
	o.State.Set(&v)
}
// SetStateNil sets the value for State to be an explicit nil
func (o *LicenseState) SetStateNil() {
	o.State.Set(nil)
}

// UnsetState ensures that no value is present for State, not even an explicit nil
func (o *LicenseState) UnsetState() {
	o.State.Unset()
}

func (o LicenseState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FailedAttempts.IsSet() {
		toSerialize["failedAttempts"] = o.FailedAttempts.Get()
	}
	if o.State.IsSet() {
		toSerialize["state"] = o.State.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableLicenseState struct {
	value *LicenseState
	isSet bool
}

func (v NullableLicenseState) Get() *LicenseState {
	return v.value
}

func (v *NullableLicenseState) Set(val *LicenseState) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseState) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseState(val *LicenseState) *NullableLicenseState {
	return &NullableLicenseState{value: val, isSet: true}
}

func (v NullableLicenseState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


