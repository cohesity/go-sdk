/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// PackageDetails Specifies all of the details of a package that is currently installed on the cluster.
type PackageDetails struct {
	// Specifies whether or not downtime is required to update to this package.
	DowntimeRequired NullableBool `json:"downtimeRequired,omitempty"`
	// Specifies the list of IDs of nodes on the cluster where this package is currently installed.
	InstalledOnNodes []int64 `json:"installedOnNodes,omitempty"`
	// Specifies the name of the current package.
	PackageName NullableString `json:"packageName,omitempty"`
	// Specifies the release date of this package.
	ReleaseDate NullableString `json:"releaseDate,omitempty"`
}

// NewPackageDetails instantiates a new PackageDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPackageDetails() *PackageDetails {
	this := PackageDetails{}
	return &this
}

// NewPackageDetailsWithDefaults instantiates a new PackageDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPackageDetailsWithDefaults() *PackageDetails {
	this := PackageDetails{}
	return &this
}

// GetDowntimeRequired returns the DowntimeRequired field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PackageDetails) GetDowntimeRequired() bool {
	if o == nil || o.DowntimeRequired.Get() == nil {
		var ret bool
		return ret
	}
	return *o.DowntimeRequired.Get()
}

// GetDowntimeRequiredOk returns a tuple with the DowntimeRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageDetails) GetDowntimeRequiredOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DowntimeRequired.Get(), o.DowntimeRequired.IsSet()
}

// HasDowntimeRequired returns a boolean if a field has been set.
func (o *PackageDetails) HasDowntimeRequired() bool {
	if o != nil && o.DowntimeRequired.IsSet() {
		return true
	}

	return false
}

// SetDowntimeRequired gets a reference to the given NullableBool and assigns it to the DowntimeRequired field.
func (o *PackageDetails) SetDowntimeRequired(v bool) {
	o.DowntimeRequired.Set(&v)
}
// SetDowntimeRequiredNil sets the value for DowntimeRequired to be an explicit nil
func (o *PackageDetails) SetDowntimeRequiredNil() {
	o.DowntimeRequired.Set(nil)
}

// UnsetDowntimeRequired ensures that no value is present for DowntimeRequired, not even an explicit nil
func (o *PackageDetails) UnsetDowntimeRequired() {
	o.DowntimeRequired.Unset()
}

// GetInstalledOnNodes returns the InstalledOnNodes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PackageDetails) GetInstalledOnNodes() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.InstalledOnNodes
}

// GetInstalledOnNodesOk returns a tuple with the InstalledOnNodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageDetails) GetInstalledOnNodesOk() (*[]int64, bool) {
	if o == nil || o.InstalledOnNodes == nil {
		return nil, false
	}
	return &o.InstalledOnNodes, true
}

// HasInstalledOnNodes returns a boolean if a field has been set.
func (o *PackageDetails) HasInstalledOnNodes() bool {
	if o != nil && o.InstalledOnNodes != nil {
		return true
	}

	return false
}

// SetInstalledOnNodes gets a reference to the given []int64 and assigns it to the InstalledOnNodes field.
func (o *PackageDetails) SetInstalledOnNodes(v []int64) {
	o.InstalledOnNodes = v
}

// GetPackageName returns the PackageName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PackageDetails) GetPackageName() string {
	if o == nil || o.PackageName.Get() == nil {
		var ret string
		return ret
	}
	return *o.PackageName.Get()
}

// GetPackageNameOk returns a tuple with the PackageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageDetails) GetPackageNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PackageName.Get(), o.PackageName.IsSet()
}

// HasPackageName returns a boolean if a field has been set.
func (o *PackageDetails) HasPackageName() bool {
	if o != nil && o.PackageName.IsSet() {
		return true
	}

	return false
}

// SetPackageName gets a reference to the given NullableString and assigns it to the PackageName field.
func (o *PackageDetails) SetPackageName(v string) {
	o.PackageName.Set(&v)
}
// SetPackageNameNil sets the value for PackageName to be an explicit nil
func (o *PackageDetails) SetPackageNameNil() {
	o.PackageName.Set(nil)
}

// UnsetPackageName ensures that no value is present for PackageName, not even an explicit nil
func (o *PackageDetails) UnsetPackageName() {
	o.PackageName.Unset()
}

// GetReleaseDate returns the ReleaseDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PackageDetails) GetReleaseDate() string {
	if o == nil || o.ReleaseDate.Get() == nil {
		var ret string
		return ret
	}
	return *o.ReleaseDate.Get()
}

// GetReleaseDateOk returns a tuple with the ReleaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageDetails) GetReleaseDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ReleaseDate.Get(), o.ReleaseDate.IsSet()
}

// HasReleaseDate returns a boolean if a field has been set.
func (o *PackageDetails) HasReleaseDate() bool {
	if o != nil && o.ReleaseDate.IsSet() {
		return true
	}

	return false
}

// SetReleaseDate gets a reference to the given NullableString and assigns it to the ReleaseDate field.
func (o *PackageDetails) SetReleaseDate(v string) {
	o.ReleaseDate.Set(&v)
}
// SetReleaseDateNil sets the value for ReleaseDate to be an explicit nil
func (o *PackageDetails) SetReleaseDateNil() {
	o.ReleaseDate.Set(nil)
}

// UnsetReleaseDate ensures that no value is present for ReleaseDate, not even an explicit nil
func (o *PackageDetails) UnsetReleaseDate() {
	o.ReleaseDate.Unset()
}

func (o PackageDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DowntimeRequired.IsSet() {
		toSerialize["downtimeRequired"] = o.DowntimeRequired.Get()
	}
	if o.InstalledOnNodes != nil {
		toSerialize["installedOnNodes"] = o.InstalledOnNodes
	}
	if o.PackageName.IsSet() {
		toSerialize["packageName"] = o.PackageName.Get()
	}
	if o.ReleaseDate.IsSet() {
		toSerialize["releaseDate"] = o.ReleaseDate.Get()
	}
	return json.Marshal(toSerialize)
}

type NullablePackageDetails struct {
	value *PackageDetails
	isSet bool
}

func (v NullablePackageDetails) Get() *PackageDetails {
	return v.value
}

func (v *NullablePackageDetails) Set(val *PackageDetails) {
	v.value = val
	v.isSet = true
}

func (v NullablePackageDetails) IsSet() bool {
	return v.isSet
}

func (v *NullablePackageDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackageDetails(val *PackageDetails) *NullablePackageDetails {
	return &NullablePackageDetails{value: val, isSet: true}
}

func (v NullablePackageDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackageDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


