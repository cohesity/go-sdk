/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// CompareADObjectsResultADObject struct for CompareADObjectsResultADObject
type CompareADObjectsResultADObject struct {
	// Array of AD attributes of AD object. This will contain distinct attributes from source and destination objects.
	AttributeVec []CompareADObjectsResultADAttribute `json:"attributeVec,omitempty"`
	// Object guid from dest_server. If empty, compare could not find an AD object corresponding to 'source_guid' even after looking up based on source_guid, source DN or source SAM account name. The SAM is applicable only for account type objects.
	DestGuid NullableString `json:"destGuid,omitempty"`
	// Number of attributes in destination object including system properties compared. This count is useful for debugging.
	DestPropCount NullableInt32 `json:"destPropCount,omitempty"`
	// Number of attributes not compared due to ADCompareOptionFlags.kExcludeSysProps. This count is useful for debugging.
	ExcludedPropCount NullableInt32 `json:"excludedPropCount,omitempty"`
	// Number of AD attributes compared based on 'ADCompareOptionFlagsType' flags and found to be mismatched. If this is non-zero, compared objects are different. If this is 0 ann'dest_guid' is empty, then object is missing.
	MismatchPropCount NullableInt32 `json:"mismatchPropCount,omitempty"`
	// Object result flags of type ADObjectFlags.
	ObjectFlags NullableInt32 `json:"objectFlags,omitempty"`
	// Object guid from $SourceServer. Guid string with or without '{}' braces.
	SourceGuid NullableString `json:"sourceGuid,omitempty"`
	// Number of attributes in source object including system properties compared. This count is useful for debugging.
	SourcePropCount NullableInt32 `json:"sourcePropCount,omitempty"`
	Status *ErrorProto `json:"status,omitempty"`
}

// NewCompareADObjectsResultADObject instantiates a new CompareADObjectsResultADObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompareADObjectsResultADObject() *CompareADObjectsResultADObject {
	this := CompareADObjectsResultADObject{}
	return &this
}

// NewCompareADObjectsResultADObjectWithDefaults instantiates a new CompareADObjectsResultADObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompareADObjectsResultADObjectWithDefaults() *CompareADObjectsResultADObject {
	this := CompareADObjectsResultADObject{}
	return &this
}

// GetAttributeVec returns the AttributeVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompareADObjectsResultADObject) GetAttributeVec() []CompareADObjectsResultADAttribute {
	if o == nil  {
		var ret []CompareADObjectsResultADAttribute
		return ret
	}
	return o.AttributeVec
}

// GetAttributeVecOk returns a tuple with the AttributeVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompareADObjectsResultADObject) GetAttributeVecOk() (*[]CompareADObjectsResultADAttribute, bool) {
	if o == nil || o.AttributeVec == nil {
		return nil, false
	}
	return &o.AttributeVec, true
}

// HasAttributeVec returns a boolean if a field has been set.
func (o *CompareADObjectsResultADObject) HasAttributeVec() bool {
	if o != nil && o.AttributeVec != nil {
		return true
	}

	return false
}

// SetAttributeVec gets a reference to the given []CompareADObjectsResultADAttribute and assigns it to the AttributeVec field.
func (o *CompareADObjectsResultADObject) SetAttributeVec(v []CompareADObjectsResultADAttribute) {
	o.AttributeVec = v
}

// GetDestGuid returns the DestGuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompareADObjectsResultADObject) GetDestGuid() string {
	if o == nil || o.DestGuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.DestGuid.Get()
}

// GetDestGuidOk returns a tuple with the DestGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompareADObjectsResultADObject) GetDestGuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DestGuid.Get(), o.DestGuid.IsSet()
}

// HasDestGuid returns a boolean if a field has been set.
func (o *CompareADObjectsResultADObject) HasDestGuid() bool {
	if o != nil && o.DestGuid.IsSet() {
		return true
	}

	return false
}

// SetDestGuid gets a reference to the given NullableString and assigns it to the DestGuid field.
func (o *CompareADObjectsResultADObject) SetDestGuid(v string) {
	o.DestGuid.Set(&v)
}
// SetDestGuidNil sets the value for DestGuid to be an explicit nil
func (o *CompareADObjectsResultADObject) SetDestGuidNil() {
	o.DestGuid.Set(nil)
}

// UnsetDestGuid ensures that no value is present for DestGuid, not even an explicit nil
func (o *CompareADObjectsResultADObject) UnsetDestGuid() {
	o.DestGuid.Unset()
}

// GetDestPropCount returns the DestPropCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompareADObjectsResultADObject) GetDestPropCount() int32 {
	if o == nil || o.DestPropCount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.DestPropCount.Get()
}

// GetDestPropCountOk returns a tuple with the DestPropCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompareADObjectsResultADObject) GetDestPropCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DestPropCount.Get(), o.DestPropCount.IsSet()
}

// HasDestPropCount returns a boolean if a field has been set.
func (o *CompareADObjectsResultADObject) HasDestPropCount() bool {
	if o != nil && o.DestPropCount.IsSet() {
		return true
	}

	return false
}

// SetDestPropCount gets a reference to the given NullableInt32 and assigns it to the DestPropCount field.
func (o *CompareADObjectsResultADObject) SetDestPropCount(v int32) {
	o.DestPropCount.Set(&v)
}
// SetDestPropCountNil sets the value for DestPropCount to be an explicit nil
func (o *CompareADObjectsResultADObject) SetDestPropCountNil() {
	o.DestPropCount.Set(nil)
}

// UnsetDestPropCount ensures that no value is present for DestPropCount, not even an explicit nil
func (o *CompareADObjectsResultADObject) UnsetDestPropCount() {
	o.DestPropCount.Unset()
}

// GetExcludedPropCount returns the ExcludedPropCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompareADObjectsResultADObject) GetExcludedPropCount() int32 {
	if o == nil || o.ExcludedPropCount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.ExcludedPropCount.Get()
}

// GetExcludedPropCountOk returns a tuple with the ExcludedPropCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompareADObjectsResultADObject) GetExcludedPropCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExcludedPropCount.Get(), o.ExcludedPropCount.IsSet()
}

// HasExcludedPropCount returns a boolean if a field has been set.
func (o *CompareADObjectsResultADObject) HasExcludedPropCount() bool {
	if o != nil && o.ExcludedPropCount.IsSet() {
		return true
	}

	return false
}

// SetExcludedPropCount gets a reference to the given NullableInt32 and assigns it to the ExcludedPropCount field.
func (o *CompareADObjectsResultADObject) SetExcludedPropCount(v int32) {
	o.ExcludedPropCount.Set(&v)
}
// SetExcludedPropCountNil sets the value for ExcludedPropCount to be an explicit nil
func (o *CompareADObjectsResultADObject) SetExcludedPropCountNil() {
	o.ExcludedPropCount.Set(nil)
}

// UnsetExcludedPropCount ensures that no value is present for ExcludedPropCount, not even an explicit nil
func (o *CompareADObjectsResultADObject) UnsetExcludedPropCount() {
	o.ExcludedPropCount.Unset()
}

// GetMismatchPropCount returns the MismatchPropCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompareADObjectsResultADObject) GetMismatchPropCount() int32 {
	if o == nil || o.MismatchPropCount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.MismatchPropCount.Get()
}

// GetMismatchPropCountOk returns a tuple with the MismatchPropCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompareADObjectsResultADObject) GetMismatchPropCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MismatchPropCount.Get(), o.MismatchPropCount.IsSet()
}

// HasMismatchPropCount returns a boolean if a field has been set.
func (o *CompareADObjectsResultADObject) HasMismatchPropCount() bool {
	if o != nil && o.MismatchPropCount.IsSet() {
		return true
	}

	return false
}

// SetMismatchPropCount gets a reference to the given NullableInt32 and assigns it to the MismatchPropCount field.
func (o *CompareADObjectsResultADObject) SetMismatchPropCount(v int32) {
	o.MismatchPropCount.Set(&v)
}
// SetMismatchPropCountNil sets the value for MismatchPropCount to be an explicit nil
func (o *CompareADObjectsResultADObject) SetMismatchPropCountNil() {
	o.MismatchPropCount.Set(nil)
}

// UnsetMismatchPropCount ensures that no value is present for MismatchPropCount, not even an explicit nil
func (o *CompareADObjectsResultADObject) UnsetMismatchPropCount() {
	o.MismatchPropCount.Unset()
}

// GetObjectFlags returns the ObjectFlags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompareADObjectsResultADObject) GetObjectFlags() int32 {
	if o == nil || o.ObjectFlags.Get() == nil {
		var ret int32
		return ret
	}
	return *o.ObjectFlags.Get()
}

// GetObjectFlagsOk returns a tuple with the ObjectFlags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompareADObjectsResultADObject) GetObjectFlagsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ObjectFlags.Get(), o.ObjectFlags.IsSet()
}

// HasObjectFlags returns a boolean if a field has been set.
func (o *CompareADObjectsResultADObject) HasObjectFlags() bool {
	if o != nil && o.ObjectFlags.IsSet() {
		return true
	}

	return false
}

// SetObjectFlags gets a reference to the given NullableInt32 and assigns it to the ObjectFlags field.
func (o *CompareADObjectsResultADObject) SetObjectFlags(v int32) {
	o.ObjectFlags.Set(&v)
}
// SetObjectFlagsNil sets the value for ObjectFlags to be an explicit nil
func (o *CompareADObjectsResultADObject) SetObjectFlagsNil() {
	o.ObjectFlags.Set(nil)
}

// UnsetObjectFlags ensures that no value is present for ObjectFlags, not even an explicit nil
func (o *CompareADObjectsResultADObject) UnsetObjectFlags() {
	o.ObjectFlags.Unset()
}

// GetSourceGuid returns the SourceGuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompareADObjectsResultADObject) GetSourceGuid() string {
	if o == nil || o.SourceGuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.SourceGuid.Get()
}

// GetSourceGuidOk returns a tuple with the SourceGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompareADObjectsResultADObject) GetSourceGuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceGuid.Get(), o.SourceGuid.IsSet()
}

// HasSourceGuid returns a boolean if a field has been set.
func (o *CompareADObjectsResultADObject) HasSourceGuid() bool {
	if o != nil && o.SourceGuid.IsSet() {
		return true
	}

	return false
}

// SetSourceGuid gets a reference to the given NullableString and assigns it to the SourceGuid field.
func (o *CompareADObjectsResultADObject) SetSourceGuid(v string) {
	o.SourceGuid.Set(&v)
}
// SetSourceGuidNil sets the value for SourceGuid to be an explicit nil
func (o *CompareADObjectsResultADObject) SetSourceGuidNil() {
	o.SourceGuid.Set(nil)
}

// UnsetSourceGuid ensures that no value is present for SourceGuid, not even an explicit nil
func (o *CompareADObjectsResultADObject) UnsetSourceGuid() {
	o.SourceGuid.Unset()
}

// GetSourcePropCount returns the SourcePropCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompareADObjectsResultADObject) GetSourcePropCount() int32 {
	if o == nil || o.SourcePropCount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.SourcePropCount.Get()
}

// GetSourcePropCountOk returns a tuple with the SourcePropCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompareADObjectsResultADObject) GetSourcePropCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourcePropCount.Get(), o.SourcePropCount.IsSet()
}

// HasSourcePropCount returns a boolean if a field has been set.
func (o *CompareADObjectsResultADObject) HasSourcePropCount() bool {
	if o != nil && o.SourcePropCount.IsSet() {
		return true
	}

	return false
}

// SetSourcePropCount gets a reference to the given NullableInt32 and assigns it to the SourcePropCount field.
func (o *CompareADObjectsResultADObject) SetSourcePropCount(v int32) {
	o.SourcePropCount.Set(&v)
}
// SetSourcePropCountNil sets the value for SourcePropCount to be an explicit nil
func (o *CompareADObjectsResultADObject) SetSourcePropCountNil() {
	o.SourcePropCount.Set(nil)
}

// UnsetSourcePropCount ensures that no value is present for SourcePropCount, not even an explicit nil
func (o *CompareADObjectsResultADObject) UnsetSourcePropCount() {
	o.SourcePropCount.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CompareADObjectsResultADObject) GetStatus() ErrorProto {
	if o == nil || o.Status == nil {
		var ret ErrorProto
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompareADObjectsResultADObject) GetStatusOk() (*ErrorProto, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CompareADObjectsResultADObject) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ErrorProto and assigns it to the Status field.
func (o *CompareADObjectsResultADObject) SetStatus(v ErrorProto) {
	o.Status = &v
}

func (o CompareADObjectsResultADObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AttributeVec != nil {
		toSerialize["attributeVec"] = o.AttributeVec
	}
	if o.DestGuid.IsSet() {
		toSerialize["destGuid"] = o.DestGuid.Get()
	}
	if o.DestPropCount.IsSet() {
		toSerialize["destPropCount"] = o.DestPropCount.Get()
	}
	if o.ExcludedPropCount.IsSet() {
		toSerialize["excludedPropCount"] = o.ExcludedPropCount.Get()
	}
	if o.MismatchPropCount.IsSet() {
		toSerialize["mismatchPropCount"] = o.MismatchPropCount.Get()
	}
	if o.ObjectFlags.IsSet() {
		toSerialize["objectFlags"] = o.ObjectFlags.Get()
	}
	if o.SourceGuid.IsSet() {
		toSerialize["sourceGuid"] = o.SourceGuid.Get()
	}
	if o.SourcePropCount.IsSet() {
		toSerialize["sourcePropCount"] = o.SourcePropCount.Get()
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableCompareADObjectsResultADObject struct {
	value *CompareADObjectsResultADObject
	isSet bool
}

func (v NullableCompareADObjectsResultADObject) Get() *CompareADObjectsResultADObject {
	return v.value
}

func (v *NullableCompareADObjectsResultADObject) Set(val *CompareADObjectsResultADObject) {
	v.value = val
	v.isSet = true
}

func (v NullableCompareADObjectsResultADObject) IsSet() bool {
	return v.isSet
}

func (v *NullableCompareADObjectsResultADObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompareADObjectsResultADObject(val *CompareADObjectsResultADObject) *NullableCompareADObjectsResultADObject {
	return &NullableCompareADObjectsResultADObject{value: val, isSet: true}
}

func (v NullableCompareADObjectsResultADObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompareADObjectsResultADObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


