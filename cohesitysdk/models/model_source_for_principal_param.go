/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// SourceForPrincipalParam Set Access Permissions for a Principal. For the specified principal, grant access permissions to the the specified Protection Sources and View names.
type SourceForPrincipalParam struct {
	// Array of Protection Source Ids.  For the specified principal, grant access permissions to the Protection Sources listed in this array.
	ProtectionSourceIds []int64 `json:"protectionSourceIds,omitempty"`
	// Specifies the SID of the principal to grant access permissions to.
	Sid NullableString `json:"sid,omitempty"`
	// Array of View names.  For the specified principal, grant access permissions to the Views names listed in this array.
	ViewNames []string `json:"viewNames,omitempty"`
}

// NewSourceForPrincipalParam instantiates a new SourceForPrincipalParam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceForPrincipalParam() *SourceForPrincipalParam {
	this := SourceForPrincipalParam{}
	return &this
}

// NewSourceForPrincipalParamWithDefaults instantiates a new SourceForPrincipalParam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceForPrincipalParamWithDefaults() *SourceForPrincipalParam {
	this := SourceForPrincipalParam{}
	return &this
}

// GetProtectionSourceIds returns the ProtectionSourceIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceForPrincipalParam) GetProtectionSourceIds() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.ProtectionSourceIds
}

// GetProtectionSourceIdsOk returns a tuple with the ProtectionSourceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceForPrincipalParam) GetProtectionSourceIdsOk() (*[]int64, bool) {
	if o == nil || o.ProtectionSourceIds == nil {
		return nil, false
	}
	return &o.ProtectionSourceIds, true
}

// HasProtectionSourceIds returns a boolean if a field has been set.
func (o *SourceForPrincipalParam) HasProtectionSourceIds() bool {
	if o != nil && o.ProtectionSourceIds != nil {
		return true
	}

	return false
}

// SetProtectionSourceIds gets a reference to the given []int64 and assigns it to the ProtectionSourceIds field.
func (o *SourceForPrincipalParam) SetProtectionSourceIds(v []int64) {
	o.ProtectionSourceIds = v
}

// GetSid returns the Sid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceForPrincipalParam) GetSid() string {
	if o == nil || o.Sid.Get() == nil {
		var ret string
		return ret
	}
	return *o.Sid.Get()
}

// GetSidOk returns a tuple with the Sid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceForPrincipalParam) GetSidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Sid.Get(), o.Sid.IsSet()
}

// HasSid returns a boolean if a field has been set.
func (o *SourceForPrincipalParam) HasSid() bool {
	if o != nil && o.Sid.IsSet() {
		return true
	}

	return false
}

// SetSid gets a reference to the given NullableString and assigns it to the Sid field.
func (o *SourceForPrincipalParam) SetSid(v string) {
	o.Sid.Set(&v)
}
// SetSidNil sets the value for Sid to be an explicit nil
func (o *SourceForPrincipalParam) SetSidNil() {
	o.Sid.Set(nil)
}

// UnsetSid ensures that no value is present for Sid, not even an explicit nil
func (o *SourceForPrincipalParam) UnsetSid() {
	o.Sid.Unset()
}

// GetViewNames returns the ViewNames field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceForPrincipalParam) GetViewNames() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.ViewNames
}

// GetViewNamesOk returns a tuple with the ViewNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceForPrincipalParam) GetViewNamesOk() (*[]string, bool) {
	if o == nil || o.ViewNames == nil {
		return nil, false
	}
	return &o.ViewNames, true
}

// HasViewNames returns a boolean if a field has been set.
func (o *SourceForPrincipalParam) HasViewNames() bool {
	if o != nil && o.ViewNames != nil {
		return true
	}

	return false
}

// SetViewNames gets a reference to the given []string and assigns it to the ViewNames field.
func (o *SourceForPrincipalParam) SetViewNames(v []string) {
	o.ViewNames = v
}

func (o SourceForPrincipalParam) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ProtectionSourceIds != nil {
		toSerialize["protectionSourceIds"] = o.ProtectionSourceIds
	}
	if o.Sid.IsSet() {
		toSerialize["sid"] = o.Sid.Get()
	}
	if o.ViewNames != nil {
		toSerialize["viewNames"] = o.ViewNames
	}
	return json.Marshal(toSerialize)
}

type NullableSourceForPrincipalParam struct {
	value *SourceForPrincipalParam
	isSet bool
}

func (v NullableSourceForPrincipalParam) Get() *SourceForPrincipalParam {
	return v.value
}

func (v *NullableSourceForPrincipalParam) Set(val *SourceForPrincipalParam) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceForPrincipalParam) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceForPrincipalParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceForPrincipalParam(val *SourceForPrincipalParam) *NullableSourceForPrincipalParam {
	return &NullableSourceForPrincipalParam{value: val, isSet: true}
}

func (v NullableSourceForPrincipalParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceForPrincipalParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


