/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// IpConfig Specifies the configuration of an IP.
type IpConfig struct {
	// The interface name.  Specifies which interface to assign IP to.
	InterfaceName NullableString `json:"interfaceName,omitempty"`
	// IpFamily of this config.
	IpFamily NullableInt32 `json:"ipFamily,omitempty"`
	// The interface ips.
	Ips []string `json:"ips,omitempty"`
	// Node ids.
	NodeIds []int64 `json:"nodeIds,omitempty"`
	// The interface role.
	Role NullableString `json:"role,omitempty"`
	// The interface gateway.
	SubnetGateway NullableString `json:"subnetGateway,omitempty"`
	// The interface subnet mask bits.
	SubnetMaskBits NullableInt32 `json:"subnetMaskBits,omitempty"`
}

// NewIpConfig instantiates a new IpConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpConfig() *IpConfig {
	this := IpConfig{}
	return &this
}

// NewIpConfigWithDefaults instantiates a new IpConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpConfigWithDefaults() *IpConfig {
	this := IpConfig{}
	return &this
}

// GetInterfaceName returns the InterfaceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpConfig) GetInterfaceName() string {
	if o == nil || o.InterfaceName.Get() == nil {
		var ret string
		return ret
	}
	return *o.InterfaceName.Get()
}

// GetInterfaceNameOk returns a tuple with the InterfaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpConfig) GetInterfaceNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InterfaceName.Get(), o.InterfaceName.IsSet()
}

// HasInterfaceName returns a boolean if a field has been set.
func (o *IpConfig) HasInterfaceName() bool {
	if o != nil && o.InterfaceName.IsSet() {
		return true
	}

	return false
}

// SetInterfaceName gets a reference to the given NullableString and assigns it to the InterfaceName field.
func (o *IpConfig) SetInterfaceName(v string) {
	o.InterfaceName.Set(&v)
}
// SetInterfaceNameNil sets the value for InterfaceName to be an explicit nil
func (o *IpConfig) SetInterfaceNameNil() {
	o.InterfaceName.Set(nil)
}

// UnsetInterfaceName ensures that no value is present for InterfaceName, not even an explicit nil
func (o *IpConfig) UnsetInterfaceName() {
	o.InterfaceName.Unset()
}

// GetIpFamily returns the IpFamily field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpConfig) GetIpFamily() int32 {
	if o == nil || o.IpFamily.Get() == nil {
		var ret int32
		return ret
	}
	return *o.IpFamily.Get()
}

// GetIpFamilyOk returns a tuple with the IpFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpConfig) GetIpFamilyOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IpFamily.Get(), o.IpFamily.IsSet()
}

// HasIpFamily returns a boolean if a field has been set.
func (o *IpConfig) HasIpFamily() bool {
	if o != nil && o.IpFamily.IsSet() {
		return true
	}

	return false
}

// SetIpFamily gets a reference to the given NullableInt32 and assigns it to the IpFamily field.
func (o *IpConfig) SetIpFamily(v int32) {
	o.IpFamily.Set(&v)
}
// SetIpFamilyNil sets the value for IpFamily to be an explicit nil
func (o *IpConfig) SetIpFamilyNil() {
	o.IpFamily.Set(nil)
}

// UnsetIpFamily ensures that no value is present for IpFamily, not even an explicit nil
func (o *IpConfig) UnsetIpFamily() {
	o.IpFamily.Unset()
}

// GetIps returns the Ips field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpConfig) GetIps() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Ips
}

// GetIpsOk returns a tuple with the Ips field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpConfig) GetIpsOk() (*[]string, bool) {
	if o == nil || o.Ips == nil {
		return nil, false
	}
	return &o.Ips, true
}

// HasIps returns a boolean if a field has been set.
func (o *IpConfig) HasIps() bool {
	if o != nil && o.Ips != nil {
		return true
	}

	return false
}

// SetIps gets a reference to the given []string and assigns it to the Ips field.
func (o *IpConfig) SetIps(v []string) {
	o.Ips = v
}

// GetNodeIds returns the NodeIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpConfig) GetNodeIds() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.NodeIds
}

// GetNodeIdsOk returns a tuple with the NodeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpConfig) GetNodeIdsOk() (*[]int64, bool) {
	if o == nil || o.NodeIds == nil {
		return nil, false
	}
	return &o.NodeIds, true
}

// HasNodeIds returns a boolean if a field has been set.
func (o *IpConfig) HasNodeIds() bool {
	if o != nil && o.NodeIds != nil {
		return true
	}

	return false
}

// SetNodeIds gets a reference to the given []int64 and assigns it to the NodeIds field.
func (o *IpConfig) SetNodeIds(v []int64) {
	o.NodeIds = v
}

// GetRole returns the Role field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpConfig) GetRole() string {
	if o == nil || o.Role.Get() == nil {
		var ret string
		return ret
	}
	return *o.Role.Get()
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpConfig) GetRoleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Role.Get(), o.Role.IsSet()
}

// HasRole returns a boolean if a field has been set.
func (o *IpConfig) HasRole() bool {
	if o != nil && o.Role.IsSet() {
		return true
	}

	return false
}

// SetRole gets a reference to the given NullableString and assigns it to the Role field.
func (o *IpConfig) SetRole(v string) {
	o.Role.Set(&v)
}
// SetRoleNil sets the value for Role to be an explicit nil
func (o *IpConfig) SetRoleNil() {
	o.Role.Set(nil)
}

// UnsetRole ensures that no value is present for Role, not even an explicit nil
func (o *IpConfig) UnsetRole() {
	o.Role.Unset()
}

// GetSubnetGateway returns the SubnetGateway field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpConfig) GetSubnetGateway() string {
	if o == nil || o.SubnetGateway.Get() == nil {
		var ret string
		return ret
	}
	return *o.SubnetGateway.Get()
}

// GetSubnetGatewayOk returns a tuple with the SubnetGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpConfig) GetSubnetGatewayOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SubnetGateway.Get(), o.SubnetGateway.IsSet()
}

// HasSubnetGateway returns a boolean if a field has been set.
func (o *IpConfig) HasSubnetGateway() bool {
	if o != nil && o.SubnetGateway.IsSet() {
		return true
	}

	return false
}

// SetSubnetGateway gets a reference to the given NullableString and assigns it to the SubnetGateway field.
func (o *IpConfig) SetSubnetGateway(v string) {
	o.SubnetGateway.Set(&v)
}
// SetSubnetGatewayNil sets the value for SubnetGateway to be an explicit nil
func (o *IpConfig) SetSubnetGatewayNil() {
	o.SubnetGateway.Set(nil)
}

// UnsetSubnetGateway ensures that no value is present for SubnetGateway, not even an explicit nil
func (o *IpConfig) UnsetSubnetGateway() {
	o.SubnetGateway.Unset()
}

// GetSubnetMaskBits returns the SubnetMaskBits field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpConfig) GetSubnetMaskBits() int32 {
	if o == nil || o.SubnetMaskBits.Get() == nil {
		var ret int32
		return ret
	}
	return *o.SubnetMaskBits.Get()
}

// GetSubnetMaskBitsOk returns a tuple with the SubnetMaskBits field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpConfig) GetSubnetMaskBitsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SubnetMaskBits.Get(), o.SubnetMaskBits.IsSet()
}

// HasSubnetMaskBits returns a boolean if a field has been set.
func (o *IpConfig) HasSubnetMaskBits() bool {
	if o != nil && o.SubnetMaskBits.IsSet() {
		return true
	}

	return false
}

// SetSubnetMaskBits gets a reference to the given NullableInt32 and assigns it to the SubnetMaskBits field.
func (o *IpConfig) SetSubnetMaskBits(v int32) {
	o.SubnetMaskBits.Set(&v)
}
// SetSubnetMaskBitsNil sets the value for SubnetMaskBits to be an explicit nil
func (o *IpConfig) SetSubnetMaskBitsNil() {
	o.SubnetMaskBits.Set(nil)
}

// UnsetSubnetMaskBits ensures that no value is present for SubnetMaskBits, not even an explicit nil
func (o *IpConfig) UnsetSubnetMaskBits() {
	o.SubnetMaskBits.Unset()
}

func (o IpConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.InterfaceName.IsSet() {
		toSerialize["interfaceName"] = o.InterfaceName.Get()
	}
	if o.IpFamily.IsSet() {
		toSerialize["ipFamily"] = o.IpFamily.Get()
	}
	if o.Ips != nil {
		toSerialize["ips"] = o.Ips
	}
	if o.NodeIds != nil {
		toSerialize["nodeIds"] = o.NodeIds
	}
	if o.Role.IsSet() {
		toSerialize["role"] = o.Role.Get()
	}
	if o.SubnetGateway.IsSet() {
		toSerialize["subnetGateway"] = o.SubnetGateway.Get()
	}
	if o.SubnetMaskBits.IsSet() {
		toSerialize["subnetMaskBits"] = o.SubnetMaskBits.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableIpConfig struct {
	value *IpConfig
	isSet bool
}

func (v NullableIpConfig) Get() *IpConfig {
	return v.value
}

func (v *NullableIpConfig) Set(val *IpConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableIpConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableIpConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpConfig(val *IpConfig) *NullableIpConfig {
	return &NullableIpConfig{value: val, isSet: true}
}

func (v NullableIpConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


