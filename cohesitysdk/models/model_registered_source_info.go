/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// RegisteredSourceInfo Specifies information about a registered Source.
type RegisteredSourceInfo struct {
	AccessInfo *ConnectorParameters `json:"accessInfo,omitempty"`
	// Specifies an authentication error message. This indicates the given credentials are rejected and the registration of the source is not successful.
	AuthenticationErrorMessage NullableString `json:"authenticationErrorMessage,omitempty"`
	// Specifies the status of the authenticating to the Protection Source when registering it with Cohesity Cluster. If the status is 'kFinished' and there is no error, registration is successful. Specifies the status of the authentication during the registration of a Protection Source. 'kPending' indicates the authentication is in progress. 'kScheduled' indicates the authentication is scheduled. 'kFinished' indicates the authentication is completed. 'kRefreshInProgress' indicates the refresh is in progress.
	AuthenticationStatus NullableString `json:"authenticationStatus,omitempty"`
	// Specifies the list of IP Addresses on the registered source to be blacklisted for doing any type of IO operations.
	BlacklistedIpAddresses []string `json:"blacklistedIpAddresses,omitempty"`
	CassandraParams *CassandraConnectParams `json:"cassandraParams,omitempty"`
	CouchbaseParams *CouchbaseConnectParams `json:"couchbaseParams,omitempty"`
	// Specifies a list of applications environment that are registered with this Protection Source such as 'kSQL'. Supported environment types such as 'kView', 'kSQL', 'kVMware', etc. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter. 'kVMware' indicates the VMware Protection Source environment. 'kHyperV' indicates the HyperV Protection Source environment. 'kSQL' indicates the SQL Protection Source environment. 'kView' indicates the View Protection Source environment. 'kPuppeteer' indicates the Cohesity's Remote Adapter. 'kPhysical' indicates the physical Protection Source environment. 'kPure' indicates the Pure Storage Protection Source environment. 'Nimble' indicates the Nimble Storage Protection Source environment. 'kAzure' indicates the Microsoft's Azure Protection Source environment. 'kNetapp' indicates the Netapp Protection Source environment. 'kAgent' indicates the Agent Protection Source environment. 'kGenericNas' indicates the Generic Network Attached Storage Protection Source environment. 'kAcropolis' indicates the Acropolis Protection Source environment. 'kPhsicalFiles' indicates the Physical Files Protection Source environment. 'kIsilon' indicates the Dell EMC's Isilon Protection Source environment. 'kGPFS' indicates IBM's GPFS Protection Source environment. 'kKVM' indicates the KVM Protection Source environment. 'kAWS' indicates the AWS Protection Source environment. 'kExchange' indicates the Exchange Protection Source environment. 'kHyperVVSS' indicates the HyperV VSS Protection Source environment. 'kOracle' indicates the Oracle Protection Source environment. 'kGCP' indicates the Google Cloud Platform Protection Source environment. 'kFlashBlade' indicates the Flash Blade Protection Source environment. 'kAWSNative' indicates the AWS Native Protection Source environment. 'kO365' indicates the Office 365 Protection Source environment. 'kO365Outlook' indicates Office 365 outlook Protection Source environment. 'kHyperFlex' indicates the Hyper Flex Protection Source environment. 'kGCPNative' indicates the GCP Native Protection Source environment. 'kAzureNative' indicates the Azure Native Protection Source environment. 'kKubernetes' indicates a Kubernetes Protection Source environment. 'kElastifile' indicates Elastifile Protection Source environment. 'kAD' indicates Active Directory Protection Source environment. 'kRDSSnapshotManager' indicates AWS RDS Protection Source environment. 'kCassandra' indicates Cassandra Protection Source environment. 'kMongoDB' indicates MongoDB Protection Source environment. 'kCouchbase' indicates Couchbase Protection Source environment. 'kHdfs' indicates Hdfs Protection Source environment. 'kHive' indicates Hive Protection Source environment. 'kHBase' indicates HBase Protection Source environment.
	Environments []string `json:"environments,omitempty"`
	HbaseParams *HBaseConnectParams `json:"hbaseParams,omitempty"`
	HdfsParams *HdfsConnectParams `json:"hdfsParams,omitempty"`
	HiveParams *HiveConnectParams `json:"hiveParams,omitempty"`
	// Specifies if application entity dbAuthenticated or not. ex: oracle database.
	IsDbAuthenticated NullableBool `json:"isDbAuthenticated,omitempty"`
	// Specifies the minimum free space in GiB of the space expected to be available on the datastore where the virtual disks of the VM being backed up. If the amount of free space(in GiB) is lower than the value given by this field, backup will be aborted. Note that this field is applicable only to 'kVMware' type of environments.
	MinimumFreeSpaceGB NullableInt64 `json:"minimumFreeSpaceGB,omitempty"`
	MongodbParams *MongoDBConnectParams `json:"mongodbParams,omitempty"`
	// Specifies the credentials required to mount directories on the NetApp server if given.
	NasMountCredentials NullableNasMountCredentialParams `json:"nasMountCredentials,omitempty"`
	// Office365 Source Credentials.  Specifies credentials needed to authenticate & authorize user for Office365.
	Office365CredentialsList []Office365Credentials `json:"office365CredentialsList,omitempty"`
	// Specifies the region for Office365.
	Office365Region NullableString `json:"office365Region,omitempty"`
	// Specifies password of the username to access the target source.
	Password NullableString `json:"password,omitempty"`
	// Specifies a message if there was any error encountered during the last rebuild of the Protection Source tree. If there was no error during the last rebuild, this field is reset.
	RefreshErrorMessage NullableString `json:"refreshErrorMessage,omitempty"`
	// Specifies the Unix epoch time (in microseconds) when the Protection Source tree was most recently fetched and built.
	RefreshTimeUsecs NullableInt64 `json:"refreshTimeUsecs,omitempty"`
	// Specifies information of the applications registered on this protection source.
	RegisteredAppsInfo []RegisteredAppInfo `json:"registeredAppsInfo,omitempty"`
	// Specifies the Unix epoch time (in microseconds) when the Protection Source was registered.
	RegistrationTimeUsecs NullableInt64 `json:"registrationTimeUsecs,omitempty"`
	// Specifies the list of subnets added during creation or updation of vmare source. Currently, this field will only be populated in case of VMware registration.
	Subnets []Subnet `json:"subnets,omitempty"`
	ThrottlingPolicy *ThrottlingPolicyParameters `json:"throttlingPolicy,omitempty"`
	// Array of Throttling Policy Overrides for Datastores.  Specifies a list of Throttling Policy for datastores that override the common throttling policy specified for the registered Protection Source. For datastores not in this list, common policy will still apply.
	ThrottlingPolicyOverrides []ThrottlingPolicyOverride `json:"throttlingPolicyOverrides,omitempty"`
	// Specifies whether OAuth should be used for authentication in case of Exchange Online.
	UseOAuthForExchangeOnline NullableBool `json:"useOAuthForExchangeOnline,omitempty"`
	// Specifies if registered vCenter is using BIOS UUID to track virtual machines.
	UseVmBiosUuid NullableBool `json:"useVmBiosUuid,omitempty"`
	// Specifies username to access the target source.
	Username NullableString `json:"username,omitempty"`
	VlanParams *VlanParameters `json:"vlanParams,omitempty"`
	// Specifies a list of warnings encountered during registration. Though the registration may succeed, warning messages imply the host environment requires some cleanup or fixing.
	WarningMessages []string `json:"warningMessages,omitempty"`
}

// NewRegisteredSourceInfo instantiates a new RegisteredSourceInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisteredSourceInfo() *RegisteredSourceInfo {
	this := RegisteredSourceInfo{}
	return &this
}

// NewRegisteredSourceInfoWithDefaults instantiates a new RegisteredSourceInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisteredSourceInfoWithDefaults() *RegisteredSourceInfo {
	this := RegisteredSourceInfo{}
	return &this
}

// GetAccessInfo returns the AccessInfo field value if set, zero value otherwise.
func (o *RegisteredSourceInfo) GetAccessInfo() ConnectorParameters {
	if o == nil || o.AccessInfo == nil {
		var ret ConnectorParameters
		return ret
	}
	return *o.AccessInfo
}

// GetAccessInfoOk returns a tuple with the AccessInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredSourceInfo) GetAccessInfoOk() (*ConnectorParameters, bool) {
	if o == nil || o.AccessInfo == nil {
		return nil, false
	}
	return o.AccessInfo, true
}

// HasAccessInfo returns a boolean if a field has been set.
func (o *RegisteredSourceInfo) HasAccessInfo() bool {
	if o != nil && o.AccessInfo != nil {
		return true
	}

	return false
}

// SetAccessInfo gets a reference to the given ConnectorParameters and assigns it to the AccessInfo field.
func (o *RegisteredSourceInfo) SetAccessInfo(v ConnectorParameters) {
	o.AccessInfo = &v
}

// GetAuthenticationErrorMessage returns the AuthenticationErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredSourceInfo) GetAuthenticationErrorMessage() string {
	if o == nil || o.AuthenticationErrorMessage.Get() == nil {
		var ret string
		return ret
	}
	return *o.AuthenticationErrorMessage.Get()
}

// GetAuthenticationErrorMessageOk returns a tuple with the AuthenticationErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredSourceInfo) GetAuthenticationErrorMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AuthenticationErrorMessage.Get(), o.AuthenticationErrorMessage.IsSet()
}

// HasAuthenticationErrorMessage returns a boolean if a field has been set.
func (o *RegisteredSourceInfo) HasAuthenticationErrorMessage() bool {
	if o != nil && o.AuthenticationErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetAuthenticationErrorMessage gets a reference to the given NullableString and assigns it to the AuthenticationErrorMessage field.
func (o *RegisteredSourceInfo) SetAuthenticationErrorMessage(v string) {
	o.AuthenticationErrorMessage.Set(&v)
}
// SetAuthenticationErrorMessageNil sets the value for AuthenticationErrorMessage to be an explicit nil
func (o *RegisteredSourceInfo) SetAuthenticationErrorMessageNil() {
	o.AuthenticationErrorMessage.Set(nil)
}

// UnsetAuthenticationErrorMessage ensures that no value is present for AuthenticationErrorMessage, not even an explicit nil
func (o *RegisteredSourceInfo) UnsetAuthenticationErrorMessage() {
	o.AuthenticationErrorMessage.Unset()
}

// GetAuthenticationStatus returns the AuthenticationStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredSourceInfo) GetAuthenticationStatus() string {
	if o == nil || o.AuthenticationStatus.Get() == nil {
		var ret string
		return ret
	}
	return *o.AuthenticationStatus.Get()
}

// GetAuthenticationStatusOk returns a tuple with the AuthenticationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredSourceInfo) GetAuthenticationStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AuthenticationStatus.Get(), o.AuthenticationStatus.IsSet()
}

// HasAuthenticationStatus returns a boolean if a field has been set.
func (o *RegisteredSourceInfo) HasAuthenticationStatus() bool {
	if o != nil && o.AuthenticationStatus.IsSet() {
		return true
	}

	return false
}

// SetAuthenticationStatus gets a reference to the given NullableString and assigns it to the AuthenticationStatus field.
func (o *RegisteredSourceInfo) SetAuthenticationStatus(v string) {
	o.AuthenticationStatus.Set(&v)
}
// SetAuthenticationStatusNil sets the value for AuthenticationStatus to be an explicit nil
func (o *RegisteredSourceInfo) SetAuthenticationStatusNil() {
	o.AuthenticationStatus.Set(nil)
}

// UnsetAuthenticationStatus ensures that no value is present for AuthenticationStatus, not even an explicit nil
func (o *RegisteredSourceInfo) UnsetAuthenticationStatus() {
	o.AuthenticationStatus.Unset()
}

// GetBlacklistedIpAddresses returns the BlacklistedIpAddresses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredSourceInfo) GetBlacklistedIpAddresses() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.BlacklistedIpAddresses
}

// GetBlacklistedIpAddressesOk returns a tuple with the BlacklistedIpAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredSourceInfo) GetBlacklistedIpAddressesOk() (*[]string, bool) {
	if o == nil || o.BlacklistedIpAddresses == nil {
		return nil, false
	}
	return &o.BlacklistedIpAddresses, true
}

// HasBlacklistedIpAddresses returns a boolean if a field has been set.
func (o *RegisteredSourceInfo) HasBlacklistedIpAddresses() bool {
	if o != nil && o.BlacklistedIpAddresses != nil {
		return true
	}

	return false
}

// SetBlacklistedIpAddresses gets a reference to the given []string and assigns it to the BlacklistedIpAddresses field.
func (o *RegisteredSourceInfo) SetBlacklistedIpAddresses(v []string) {
	o.BlacklistedIpAddresses = v
}

// GetCassandraParams returns the CassandraParams field value if set, zero value otherwise.
func (o *RegisteredSourceInfo) GetCassandraParams() CassandraConnectParams {
	if o == nil || o.CassandraParams == nil {
		var ret CassandraConnectParams
		return ret
	}
	return *o.CassandraParams
}

// GetCassandraParamsOk returns a tuple with the CassandraParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredSourceInfo) GetCassandraParamsOk() (*CassandraConnectParams, bool) {
	if o == nil || o.CassandraParams == nil {
		return nil, false
	}
	return o.CassandraParams, true
}

// HasCassandraParams returns a boolean if a field has been set.
func (o *RegisteredSourceInfo) HasCassandraParams() bool {
	if o != nil && o.CassandraParams != nil {
		return true
	}

	return false
}

// SetCassandraParams gets a reference to the given CassandraConnectParams and assigns it to the CassandraParams field.
func (o *RegisteredSourceInfo) SetCassandraParams(v CassandraConnectParams) {
	o.CassandraParams = &v
}

// GetCouchbaseParams returns the CouchbaseParams field value if set, zero value otherwise.
func (o *RegisteredSourceInfo) GetCouchbaseParams() CouchbaseConnectParams {
	if o == nil || o.CouchbaseParams == nil {
		var ret CouchbaseConnectParams
		return ret
	}
	return *o.CouchbaseParams
}

// GetCouchbaseParamsOk returns a tuple with the CouchbaseParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredSourceInfo) GetCouchbaseParamsOk() (*CouchbaseConnectParams, bool) {
	if o == nil || o.CouchbaseParams == nil {
		return nil, false
	}
	return o.CouchbaseParams, true
}

// HasCouchbaseParams returns a boolean if a field has been set.
func (o *RegisteredSourceInfo) HasCouchbaseParams() bool {
	if o != nil && o.CouchbaseParams != nil {
		return true
	}

	return false
}

// SetCouchbaseParams gets a reference to the given CouchbaseConnectParams and assigns it to the CouchbaseParams field.
func (o *RegisteredSourceInfo) SetCouchbaseParams(v CouchbaseConnectParams) {
	o.CouchbaseParams = &v
}

// GetEnvironments returns the Environments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredSourceInfo) GetEnvironments() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredSourceInfo) GetEnvironmentsOk() (*[]string, bool) {
	if o == nil || o.Environments == nil {
		return nil, false
	}
	return &o.Environments, true
}

// HasEnvironments returns a boolean if a field has been set.
func (o *RegisteredSourceInfo) HasEnvironments() bool {
	if o != nil && o.Environments != nil {
		return true
	}

	return false
}

// SetEnvironments gets a reference to the given []string and assigns it to the Environments field.
func (o *RegisteredSourceInfo) SetEnvironments(v []string) {
	o.Environments = v
}

// GetHbaseParams returns the HbaseParams field value if set, zero value otherwise.
func (o *RegisteredSourceInfo) GetHbaseParams() HBaseConnectParams {
	if o == nil || o.HbaseParams == nil {
		var ret HBaseConnectParams
		return ret
	}
	return *o.HbaseParams
}

// GetHbaseParamsOk returns a tuple with the HbaseParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredSourceInfo) GetHbaseParamsOk() (*HBaseConnectParams, bool) {
	if o == nil || o.HbaseParams == nil {
		return nil, false
	}
	return o.HbaseParams, true
}

// HasHbaseParams returns a boolean if a field has been set.
func (o *RegisteredSourceInfo) HasHbaseParams() bool {
	if o != nil && o.HbaseParams != nil {
		return true
	}

	return false
}

// SetHbaseParams gets a reference to the given HBaseConnectParams and assigns it to the HbaseParams field.
func (o *RegisteredSourceInfo) SetHbaseParams(v HBaseConnectParams) {
	o.HbaseParams = &v
}

// GetHdfsParams returns the HdfsParams field value if set, zero value otherwise.
func (o *RegisteredSourceInfo) GetHdfsParams() HdfsConnectParams {
	if o == nil || o.HdfsParams == nil {
		var ret HdfsConnectParams
		return ret
	}
	return *o.HdfsParams
}

// GetHdfsParamsOk returns a tuple with the HdfsParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredSourceInfo) GetHdfsParamsOk() (*HdfsConnectParams, bool) {
	if o == nil || o.HdfsParams == nil {
		return nil, false
	}
	return o.HdfsParams, true
}

// HasHdfsParams returns a boolean if a field has been set.
func (o *RegisteredSourceInfo) HasHdfsParams() bool {
	if o != nil && o.HdfsParams != nil {
		return true
	}

	return false
}

// SetHdfsParams gets a reference to the given HdfsConnectParams and assigns it to the HdfsParams field.
func (o *RegisteredSourceInfo) SetHdfsParams(v HdfsConnectParams) {
	o.HdfsParams = &v
}

// GetHiveParams returns the HiveParams field value if set, zero value otherwise.
func (o *RegisteredSourceInfo) GetHiveParams() HiveConnectParams {
	if o == nil || o.HiveParams == nil {
		var ret HiveConnectParams
		return ret
	}
	return *o.HiveParams
}

// GetHiveParamsOk returns a tuple with the HiveParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredSourceInfo) GetHiveParamsOk() (*HiveConnectParams, bool) {
	if o == nil || o.HiveParams == nil {
		return nil, false
	}
	return o.HiveParams, true
}

// HasHiveParams returns a boolean if a field has been set.
func (o *RegisteredSourceInfo) HasHiveParams() bool {
	if o != nil && o.HiveParams != nil {
		return true
	}

	return false
}

// SetHiveParams gets a reference to the given HiveConnectParams and assigns it to the HiveParams field.
func (o *RegisteredSourceInfo) SetHiveParams(v HiveConnectParams) {
	o.HiveParams = &v
}

// GetIsDbAuthenticated returns the IsDbAuthenticated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredSourceInfo) GetIsDbAuthenticated() bool {
	if o == nil || o.IsDbAuthenticated.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsDbAuthenticated.Get()
}

// GetIsDbAuthenticatedOk returns a tuple with the IsDbAuthenticated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredSourceInfo) GetIsDbAuthenticatedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsDbAuthenticated.Get(), o.IsDbAuthenticated.IsSet()
}

// HasIsDbAuthenticated returns a boolean if a field has been set.
func (o *RegisteredSourceInfo) HasIsDbAuthenticated() bool {
	if o != nil && o.IsDbAuthenticated.IsSet() {
		return true
	}

	return false
}

// SetIsDbAuthenticated gets a reference to the given NullableBool and assigns it to the IsDbAuthenticated field.
func (o *RegisteredSourceInfo) SetIsDbAuthenticated(v bool) {
	o.IsDbAuthenticated.Set(&v)
}
// SetIsDbAuthenticatedNil sets the value for IsDbAuthenticated to be an explicit nil
func (o *RegisteredSourceInfo) SetIsDbAuthenticatedNil() {
	o.IsDbAuthenticated.Set(nil)
}

// UnsetIsDbAuthenticated ensures that no value is present for IsDbAuthenticated, not even an explicit nil
func (o *RegisteredSourceInfo) UnsetIsDbAuthenticated() {
	o.IsDbAuthenticated.Unset()
}

// GetMinimumFreeSpaceGB returns the MinimumFreeSpaceGB field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredSourceInfo) GetMinimumFreeSpaceGB() int64 {
	if o == nil || o.MinimumFreeSpaceGB.Get() == nil {
		var ret int64
		return ret
	}
	return *o.MinimumFreeSpaceGB.Get()
}

// GetMinimumFreeSpaceGBOk returns a tuple with the MinimumFreeSpaceGB field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredSourceInfo) GetMinimumFreeSpaceGBOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MinimumFreeSpaceGB.Get(), o.MinimumFreeSpaceGB.IsSet()
}

// HasMinimumFreeSpaceGB returns a boolean if a field has been set.
func (o *RegisteredSourceInfo) HasMinimumFreeSpaceGB() bool {
	if o != nil && o.MinimumFreeSpaceGB.IsSet() {
		return true
	}

	return false
}

// SetMinimumFreeSpaceGB gets a reference to the given NullableInt64 and assigns it to the MinimumFreeSpaceGB field.
func (o *RegisteredSourceInfo) SetMinimumFreeSpaceGB(v int64) {
	o.MinimumFreeSpaceGB.Set(&v)
}
// SetMinimumFreeSpaceGBNil sets the value for MinimumFreeSpaceGB to be an explicit nil
func (o *RegisteredSourceInfo) SetMinimumFreeSpaceGBNil() {
	o.MinimumFreeSpaceGB.Set(nil)
}

// UnsetMinimumFreeSpaceGB ensures that no value is present for MinimumFreeSpaceGB, not even an explicit nil
func (o *RegisteredSourceInfo) UnsetMinimumFreeSpaceGB() {
	o.MinimumFreeSpaceGB.Unset()
}

// GetMongodbParams returns the MongodbParams field value if set, zero value otherwise.
func (o *RegisteredSourceInfo) GetMongodbParams() MongoDBConnectParams {
	if o == nil || o.MongodbParams == nil {
		var ret MongoDBConnectParams
		return ret
	}
	return *o.MongodbParams
}

// GetMongodbParamsOk returns a tuple with the MongodbParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredSourceInfo) GetMongodbParamsOk() (*MongoDBConnectParams, bool) {
	if o == nil || o.MongodbParams == nil {
		return nil, false
	}
	return o.MongodbParams, true
}

// HasMongodbParams returns a boolean if a field has been set.
func (o *RegisteredSourceInfo) HasMongodbParams() bool {
	if o != nil && o.MongodbParams != nil {
		return true
	}

	return false
}

// SetMongodbParams gets a reference to the given MongoDBConnectParams and assigns it to the MongodbParams field.
func (o *RegisteredSourceInfo) SetMongodbParams(v MongoDBConnectParams) {
	o.MongodbParams = &v
}

// GetNasMountCredentials returns the NasMountCredentials field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredSourceInfo) GetNasMountCredentials() NasMountCredentialParams {
	if o == nil || o.NasMountCredentials.Get() == nil {
		var ret NasMountCredentialParams
		return ret
	}
	return *o.NasMountCredentials.Get()
}

// GetNasMountCredentialsOk returns a tuple with the NasMountCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredSourceInfo) GetNasMountCredentialsOk() (*NasMountCredentialParams, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NasMountCredentials.Get(), o.NasMountCredentials.IsSet()
}

// HasNasMountCredentials returns a boolean if a field has been set.
func (o *RegisteredSourceInfo) HasNasMountCredentials() bool {
	if o != nil && o.NasMountCredentials.IsSet() {
		return true
	}

	return false
}

// SetNasMountCredentials gets a reference to the given NullableNasMountCredentialParams and assigns it to the NasMountCredentials field.
func (o *RegisteredSourceInfo) SetNasMountCredentials(v NasMountCredentialParams) {
	o.NasMountCredentials.Set(&v)
}
// SetNasMountCredentialsNil sets the value for NasMountCredentials to be an explicit nil
func (o *RegisteredSourceInfo) SetNasMountCredentialsNil() {
	o.NasMountCredentials.Set(nil)
}

// UnsetNasMountCredentials ensures that no value is present for NasMountCredentials, not even an explicit nil
func (o *RegisteredSourceInfo) UnsetNasMountCredentials() {
	o.NasMountCredentials.Unset()
}

// GetOffice365CredentialsList returns the Office365CredentialsList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredSourceInfo) GetOffice365CredentialsList() []Office365Credentials {
	if o == nil  {
		var ret []Office365Credentials
		return ret
	}
	return o.Office365CredentialsList
}

// GetOffice365CredentialsListOk returns a tuple with the Office365CredentialsList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredSourceInfo) GetOffice365CredentialsListOk() (*[]Office365Credentials, bool) {
	if o == nil || o.Office365CredentialsList == nil {
		return nil, false
	}
	return &o.Office365CredentialsList, true
}

// HasOffice365CredentialsList returns a boolean if a field has been set.
func (o *RegisteredSourceInfo) HasOffice365CredentialsList() bool {
	if o != nil && o.Office365CredentialsList != nil {
		return true
	}

	return false
}

// SetOffice365CredentialsList gets a reference to the given []Office365Credentials and assigns it to the Office365CredentialsList field.
func (o *RegisteredSourceInfo) SetOffice365CredentialsList(v []Office365Credentials) {
	o.Office365CredentialsList = v
}

// GetOffice365Region returns the Office365Region field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredSourceInfo) GetOffice365Region() string {
	if o == nil || o.Office365Region.Get() == nil {
		var ret string
		return ret
	}
	return *o.Office365Region.Get()
}

// GetOffice365RegionOk returns a tuple with the Office365Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredSourceInfo) GetOffice365RegionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Office365Region.Get(), o.Office365Region.IsSet()
}

// HasOffice365Region returns a boolean if a field has been set.
func (o *RegisteredSourceInfo) HasOffice365Region() bool {
	if o != nil && o.Office365Region.IsSet() {
		return true
	}

	return false
}

// SetOffice365Region gets a reference to the given NullableString and assigns it to the Office365Region field.
func (o *RegisteredSourceInfo) SetOffice365Region(v string) {
	o.Office365Region.Set(&v)
}
// SetOffice365RegionNil sets the value for Office365Region to be an explicit nil
func (o *RegisteredSourceInfo) SetOffice365RegionNil() {
	o.Office365Region.Set(nil)
}

// UnsetOffice365Region ensures that no value is present for Office365Region, not even an explicit nil
func (o *RegisteredSourceInfo) UnsetOffice365Region() {
	o.Office365Region.Unset()
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredSourceInfo) GetPassword() string {
	if o == nil || o.Password.Get() == nil {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredSourceInfo) GetPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *RegisteredSourceInfo) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *RegisteredSourceInfo) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *RegisteredSourceInfo) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *RegisteredSourceInfo) UnsetPassword() {
	o.Password.Unset()
}

// GetRefreshErrorMessage returns the RefreshErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredSourceInfo) GetRefreshErrorMessage() string {
	if o == nil || o.RefreshErrorMessage.Get() == nil {
		var ret string
		return ret
	}
	return *o.RefreshErrorMessage.Get()
}

// GetRefreshErrorMessageOk returns a tuple with the RefreshErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredSourceInfo) GetRefreshErrorMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RefreshErrorMessage.Get(), o.RefreshErrorMessage.IsSet()
}

// HasRefreshErrorMessage returns a boolean if a field has been set.
func (o *RegisteredSourceInfo) HasRefreshErrorMessage() bool {
	if o != nil && o.RefreshErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetRefreshErrorMessage gets a reference to the given NullableString and assigns it to the RefreshErrorMessage field.
func (o *RegisteredSourceInfo) SetRefreshErrorMessage(v string) {
	o.RefreshErrorMessage.Set(&v)
}
// SetRefreshErrorMessageNil sets the value for RefreshErrorMessage to be an explicit nil
func (o *RegisteredSourceInfo) SetRefreshErrorMessageNil() {
	o.RefreshErrorMessage.Set(nil)
}

// UnsetRefreshErrorMessage ensures that no value is present for RefreshErrorMessage, not even an explicit nil
func (o *RegisteredSourceInfo) UnsetRefreshErrorMessage() {
	o.RefreshErrorMessage.Unset()
}

// GetRefreshTimeUsecs returns the RefreshTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredSourceInfo) GetRefreshTimeUsecs() int64 {
	if o == nil || o.RefreshTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RefreshTimeUsecs.Get()
}

// GetRefreshTimeUsecsOk returns a tuple with the RefreshTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredSourceInfo) GetRefreshTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RefreshTimeUsecs.Get(), o.RefreshTimeUsecs.IsSet()
}

// HasRefreshTimeUsecs returns a boolean if a field has been set.
func (o *RegisteredSourceInfo) HasRefreshTimeUsecs() bool {
	if o != nil && o.RefreshTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetRefreshTimeUsecs gets a reference to the given NullableInt64 and assigns it to the RefreshTimeUsecs field.
func (o *RegisteredSourceInfo) SetRefreshTimeUsecs(v int64) {
	o.RefreshTimeUsecs.Set(&v)
}
// SetRefreshTimeUsecsNil sets the value for RefreshTimeUsecs to be an explicit nil
func (o *RegisteredSourceInfo) SetRefreshTimeUsecsNil() {
	o.RefreshTimeUsecs.Set(nil)
}

// UnsetRefreshTimeUsecs ensures that no value is present for RefreshTimeUsecs, not even an explicit nil
func (o *RegisteredSourceInfo) UnsetRefreshTimeUsecs() {
	o.RefreshTimeUsecs.Unset()
}

// GetRegisteredAppsInfo returns the RegisteredAppsInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredSourceInfo) GetRegisteredAppsInfo() []RegisteredAppInfo {
	if o == nil  {
		var ret []RegisteredAppInfo
		return ret
	}
	return o.RegisteredAppsInfo
}

// GetRegisteredAppsInfoOk returns a tuple with the RegisteredAppsInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredSourceInfo) GetRegisteredAppsInfoOk() (*[]RegisteredAppInfo, bool) {
	if o == nil || o.RegisteredAppsInfo == nil {
		return nil, false
	}
	return &o.RegisteredAppsInfo, true
}

// HasRegisteredAppsInfo returns a boolean if a field has been set.
func (o *RegisteredSourceInfo) HasRegisteredAppsInfo() bool {
	if o != nil && o.RegisteredAppsInfo != nil {
		return true
	}

	return false
}

// SetRegisteredAppsInfo gets a reference to the given []RegisteredAppInfo and assigns it to the RegisteredAppsInfo field.
func (o *RegisteredSourceInfo) SetRegisteredAppsInfo(v []RegisteredAppInfo) {
	o.RegisteredAppsInfo = v
}

// GetRegistrationTimeUsecs returns the RegistrationTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredSourceInfo) GetRegistrationTimeUsecs() int64 {
	if o == nil || o.RegistrationTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RegistrationTimeUsecs.Get()
}

// GetRegistrationTimeUsecsOk returns a tuple with the RegistrationTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredSourceInfo) GetRegistrationTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RegistrationTimeUsecs.Get(), o.RegistrationTimeUsecs.IsSet()
}

// HasRegistrationTimeUsecs returns a boolean if a field has been set.
func (o *RegisteredSourceInfo) HasRegistrationTimeUsecs() bool {
	if o != nil && o.RegistrationTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetRegistrationTimeUsecs gets a reference to the given NullableInt64 and assigns it to the RegistrationTimeUsecs field.
func (o *RegisteredSourceInfo) SetRegistrationTimeUsecs(v int64) {
	o.RegistrationTimeUsecs.Set(&v)
}
// SetRegistrationTimeUsecsNil sets the value for RegistrationTimeUsecs to be an explicit nil
func (o *RegisteredSourceInfo) SetRegistrationTimeUsecsNil() {
	o.RegistrationTimeUsecs.Set(nil)
}

// UnsetRegistrationTimeUsecs ensures that no value is present for RegistrationTimeUsecs, not even an explicit nil
func (o *RegisteredSourceInfo) UnsetRegistrationTimeUsecs() {
	o.RegistrationTimeUsecs.Unset()
}

// GetSubnets returns the Subnets field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredSourceInfo) GetSubnets() []Subnet {
	if o == nil  {
		var ret []Subnet
		return ret
	}
	return o.Subnets
}

// GetSubnetsOk returns a tuple with the Subnets field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredSourceInfo) GetSubnetsOk() (*[]Subnet, bool) {
	if o == nil || o.Subnets == nil {
		return nil, false
	}
	return &o.Subnets, true
}

// HasSubnets returns a boolean if a field has been set.
func (o *RegisteredSourceInfo) HasSubnets() bool {
	if o != nil && o.Subnets != nil {
		return true
	}

	return false
}

// SetSubnets gets a reference to the given []Subnet and assigns it to the Subnets field.
func (o *RegisteredSourceInfo) SetSubnets(v []Subnet) {
	o.Subnets = v
}

// GetThrottlingPolicy returns the ThrottlingPolicy field value if set, zero value otherwise.
func (o *RegisteredSourceInfo) GetThrottlingPolicy() ThrottlingPolicyParameters {
	if o == nil || o.ThrottlingPolicy == nil {
		var ret ThrottlingPolicyParameters
		return ret
	}
	return *o.ThrottlingPolicy
}

// GetThrottlingPolicyOk returns a tuple with the ThrottlingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredSourceInfo) GetThrottlingPolicyOk() (*ThrottlingPolicyParameters, bool) {
	if o == nil || o.ThrottlingPolicy == nil {
		return nil, false
	}
	return o.ThrottlingPolicy, true
}

// HasThrottlingPolicy returns a boolean if a field has been set.
func (o *RegisteredSourceInfo) HasThrottlingPolicy() bool {
	if o != nil && o.ThrottlingPolicy != nil {
		return true
	}

	return false
}

// SetThrottlingPolicy gets a reference to the given ThrottlingPolicyParameters and assigns it to the ThrottlingPolicy field.
func (o *RegisteredSourceInfo) SetThrottlingPolicy(v ThrottlingPolicyParameters) {
	o.ThrottlingPolicy = &v
}

// GetThrottlingPolicyOverrides returns the ThrottlingPolicyOverrides field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredSourceInfo) GetThrottlingPolicyOverrides() []ThrottlingPolicyOverride {
	if o == nil  {
		var ret []ThrottlingPolicyOverride
		return ret
	}
	return o.ThrottlingPolicyOverrides
}

// GetThrottlingPolicyOverridesOk returns a tuple with the ThrottlingPolicyOverrides field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredSourceInfo) GetThrottlingPolicyOverridesOk() (*[]ThrottlingPolicyOverride, bool) {
	if o == nil || o.ThrottlingPolicyOverrides == nil {
		return nil, false
	}
	return &o.ThrottlingPolicyOverrides, true
}

// HasThrottlingPolicyOverrides returns a boolean if a field has been set.
func (o *RegisteredSourceInfo) HasThrottlingPolicyOverrides() bool {
	if o != nil && o.ThrottlingPolicyOverrides != nil {
		return true
	}

	return false
}

// SetThrottlingPolicyOverrides gets a reference to the given []ThrottlingPolicyOverride and assigns it to the ThrottlingPolicyOverrides field.
func (o *RegisteredSourceInfo) SetThrottlingPolicyOverrides(v []ThrottlingPolicyOverride) {
	o.ThrottlingPolicyOverrides = v
}

// GetUseOAuthForExchangeOnline returns the UseOAuthForExchangeOnline field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredSourceInfo) GetUseOAuthForExchangeOnline() bool {
	if o == nil || o.UseOAuthForExchangeOnline.Get() == nil {
		var ret bool
		return ret
	}
	return *o.UseOAuthForExchangeOnline.Get()
}

// GetUseOAuthForExchangeOnlineOk returns a tuple with the UseOAuthForExchangeOnline field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredSourceInfo) GetUseOAuthForExchangeOnlineOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UseOAuthForExchangeOnline.Get(), o.UseOAuthForExchangeOnline.IsSet()
}

// HasUseOAuthForExchangeOnline returns a boolean if a field has been set.
func (o *RegisteredSourceInfo) HasUseOAuthForExchangeOnline() bool {
	if o != nil && o.UseOAuthForExchangeOnline.IsSet() {
		return true
	}

	return false
}

// SetUseOAuthForExchangeOnline gets a reference to the given NullableBool and assigns it to the UseOAuthForExchangeOnline field.
func (o *RegisteredSourceInfo) SetUseOAuthForExchangeOnline(v bool) {
	o.UseOAuthForExchangeOnline.Set(&v)
}
// SetUseOAuthForExchangeOnlineNil sets the value for UseOAuthForExchangeOnline to be an explicit nil
func (o *RegisteredSourceInfo) SetUseOAuthForExchangeOnlineNil() {
	o.UseOAuthForExchangeOnline.Set(nil)
}

// UnsetUseOAuthForExchangeOnline ensures that no value is present for UseOAuthForExchangeOnline, not even an explicit nil
func (o *RegisteredSourceInfo) UnsetUseOAuthForExchangeOnline() {
	o.UseOAuthForExchangeOnline.Unset()
}

// GetUseVmBiosUuid returns the UseVmBiosUuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredSourceInfo) GetUseVmBiosUuid() bool {
	if o == nil || o.UseVmBiosUuid.Get() == nil {
		var ret bool
		return ret
	}
	return *o.UseVmBiosUuid.Get()
}

// GetUseVmBiosUuidOk returns a tuple with the UseVmBiosUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredSourceInfo) GetUseVmBiosUuidOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UseVmBiosUuid.Get(), o.UseVmBiosUuid.IsSet()
}

// HasUseVmBiosUuid returns a boolean if a field has been set.
func (o *RegisteredSourceInfo) HasUseVmBiosUuid() bool {
	if o != nil && o.UseVmBiosUuid.IsSet() {
		return true
	}

	return false
}

// SetUseVmBiosUuid gets a reference to the given NullableBool and assigns it to the UseVmBiosUuid field.
func (o *RegisteredSourceInfo) SetUseVmBiosUuid(v bool) {
	o.UseVmBiosUuid.Set(&v)
}
// SetUseVmBiosUuidNil sets the value for UseVmBiosUuid to be an explicit nil
func (o *RegisteredSourceInfo) SetUseVmBiosUuidNil() {
	o.UseVmBiosUuid.Set(nil)
}

// UnsetUseVmBiosUuid ensures that no value is present for UseVmBiosUuid, not even an explicit nil
func (o *RegisteredSourceInfo) UnsetUseVmBiosUuid() {
	o.UseVmBiosUuid.Unset()
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredSourceInfo) GetUsername() string {
	if o == nil || o.Username.Get() == nil {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredSourceInfo) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *RegisteredSourceInfo) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *RegisteredSourceInfo) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *RegisteredSourceInfo) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *RegisteredSourceInfo) UnsetUsername() {
	o.Username.Unset()
}

// GetVlanParams returns the VlanParams field value if set, zero value otherwise.
func (o *RegisteredSourceInfo) GetVlanParams() VlanParameters {
	if o == nil || o.VlanParams == nil {
		var ret VlanParameters
		return ret
	}
	return *o.VlanParams
}

// GetVlanParamsOk returns a tuple with the VlanParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredSourceInfo) GetVlanParamsOk() (*VlanParameters, bool) {
	if o == nil || o.VlanParams == nil {
		return nil, false
	}
	return o.VlanParams, true
}

// HasVlanParams returns a boolean if a field has been set.
func (o *RegisteredSourceInfo) HasVlanParams() bool {
	if o != nil && o.VlanParams != nil {
		return true
	}

	return false
}

// SetVlanParams gets a reference to the given VlanParameters and assigns it to the VlanParams field.
func (o *RegisteredSourceInfo) SetVlanParams(v VlanParameters) {
	o.VlanParams = &v
}

// GetWarningMessages returns the WarningMessages field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredSourceInfo) GetWarningMessages() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.WarningMessages
}

// GetWarningMessagesOk returns a tuple with the WarningMessages field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredSourceInfo) GetWarningMessagesOk() (*[]string, bool) {
	if o == nil || o.WarningMessages == nil {
		return nil, false
	}
	return &o.WarningMessages, true
}

// HasWarningMessages returns a boolean if a field has been set.
func (o *RegisteredSourceInfo) HasWarningMessages() bool {
	if o != nil && o.WarningMessages != nil {
		return true
	}

	return false
}

// SetWarningMessages gets a reference to the given []string and assigns it to the WarningMessages field.
func (o *RegisteredSourceInfo) SetWarningMessages(v []string) {
	o.WarningMessages = v
}

func (o RegisteredSourceInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessInfo != nil {
		toSerialize["accessInfo"] = o.AccessInfo
	}
	if o.AuthenticationErrorMessage.IsSet() {
		toSerialize["authenticationErrorMessage"] = o.AuthenticationErrorMessage.Get()
	}
	if o.AuthenticationStatus.IsSet() {
		toSerialize["authenticationStatus"] = o.AuthenticationStatus.Get()
	}
	if o.BlacklistedIpAddresses != nil {
		toSerialize["blacklistedIpAddresses"] = o.BlacklistedIpAddresses
	}
	if o.CassandraParams != nil {
		toSerialize["cassandraParams"] = o.CassandraParams
	}
	if o.CouchbaseParams != nil {
		toSerialize["couchbaseParams"] = o.CouchbaseParams
	}
	if o.Environments != nil {
		toSerialize["environments"] = o.Environments
	}
	if o.HbaseParams != nil {
		toSerialize["hbaseParams"] = o.HbaseParams
	}
	if o.HdfsParams != nil {
		toSerialize["hdfsParams"] = o.HdfsParams
	}
	if o.HiveParams != nil {
		toSerialize["hiveParams"] = o.HiveParams
	}
	if o.IsDbAuthenticated.IsSet() {
		toSerialize["isDbAuthenticated"] = o.IsDbAuthenticated.Get()
	}
	if o.MinimumFreeSpaceGB.IsSet() {
		toSerialize["minimumFreeSpaceGB"] = o.MinimumFreeSpaceGB.Get()
	}
	if o.MongodbParams != nil {
		toSerialize["mongodbParams"] = o.MongodbParams
	}
	if o.NasMountCredentials.IsSet() {
		toSerialize["nasMountCredentials"] = o.NasMountCredentials.Get()
	}
	if o.Office365CredentialsList != nil {
		toSerialize["office365CredentialsList"] = o.Office365CredentialsList
	}
	if o.Office365Region.IsSet() {
		toSerialize["office365Region"] = o.Office365Region.Get()
	}
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	if o.RefreshErrorMessage.IsSet() {
		toSerialize["refreshErrorMessage"] = o.RefreshErrorMessage.Get()
	}
	if o.RefreshTimeUsecs.IsSet() {
		toSerialize["refreshTimeUsecs"] = o.RefreshTimeUsecs.Get()
	}
	if o.RegisteredAppsInfo != nil {
		toSerialize["registeredAppsInfo"] = o.RegisteredAppsInfo
	}
	if o.RegistrationTimeUsecs.IsSet() {
		toSerialize["registrationTimeUsecs"] = o.RegistrationTimeUsecs.Get()
	}
	if o.Subnets != nil {
		toSerialize["subnets"] = o.Subnets
	}
	if o.ThrottlingPolicy != nil {
		toSerialize["throttlingPolicy"] = o.ThrottlingPolicy
	}
	if o.ThrottlingPolicyOverrides != nil {
		toSerialize["throttlingPolicyOverrides"] = o.ThrottlingPolicyOverrides
	}
	if o.UseOAuthForExchangeOnline.IsSet() {
		toSerialize["useOAuthForExchangeOnline"] = o.UseOAuthForExchangeOnline.Get()
	}
	if o.UseVmBiosUuid.IsSet() {
		toSerialize["useVmBiosUuid"] = o.UseVmBiosUuid.Get()
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	if o.VlanParams != nil {
		toSerialize["vlanParams"] = o.VlanParams
	}
	if o.WarningMessages != nil {
		toSerialize["warningMessages"] = o.WarningMessages
	}
	return json.Marshal(toSerialize)
}

type NullableRegisteredSourceInfo struct {
	value *RegisteredSourceInfo
	isSet bool
}

func (v NullableRegisteredSourceInfo) Get() *RegisteredSourceInfo {
	return v.value
}

func (v *NullableRegisteredSourceInfo) Set(val *RegisteredSourceInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisteredSourceInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisteredSourceInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisteredSourceInfo(val *RegisteredSourceInfo) *NullableRegisteredSourceInfo {
	return &NullableRegisteredSourceInfo{value: val, isSet: true}
}

func (v NullableRegisteredSourceInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisteredSourceInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


