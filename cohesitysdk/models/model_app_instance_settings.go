/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// AppInstanceSettings AppInstanceSettings provides settings used while launching an app instance. Current settings include QoSTier to be used for the instance and views allowed to be accessed by the instance.
type AppInstanceSettings struct {
	ExternalNetworkInfo *ExternalNetworkInfo `json:"externalNetworkInfo,omitempty"`
	// Instance size specification (e.g. small/medium/large). Used to determine container resources.
	InstanceSize NullableString `json:"instanceSize,omitempty"`
	ProtectedObjectPrivileges *ProtectedObjectPrivileges `json:"protectedObjectPrivileges,omitempty"`
	// Specifies QoSTier of the app instance. Specifies QoS Tier for an app instance. App instances are allocated resources such as memory, CPU and IO based on their QoS Tier. kLow - Low QoS Tier. kMedium - Medium QoS Tier. kHigh - High QoS Tier. kMax - Max QoS Tier.
	QosTier NullableString `json:"qosTier,omitempty"`
	ReadViewPrivileges *ViewPrivileges `json:"readViewPrivileges,omitempty"`
	ReadWriteViewPrivileges *ViewPrivileges `json:"readWriteViewPrivileges,omitempty"`
	// List of vm-name, replica count pairs to be used at the time of app instance launch.
	VmNumReplicasList []VmNumReplicas `json:"vmNumReplicasList,omitempty"`
}

// NewAppInstanceSettings instantiates a new AppInstanceSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppInstanceSettings() *AppInstanceSettings {
	this := AppInstanceSettings{}
	return &this
}

// NewAppInstanceSettingsWithDefaults instantiates a new AppInstanceSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppInstanceSettingsWithDefaults() *AppInstanceSettings {
	this := AppInstanceSettings{}
	return &this
}

// GetExternalNetworkInfo returns the ExternalNetworkInfo field value if set, zero value otherwise.
func (o *AppInstanceSettings) GetExternalNetworkInfo() ExternalNetworkInfo {
	if o == nil || o.ExternalNetworkInfo == nil {
		var ret ExternalNetworkInfo
		return ret
	}
	return *o.ExternalNetworkInfo
}

// GetExternalNetworkInfoOk returns a tuple with the ExternalNetworkInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppInstanceSettings) GetExternalNetworkInfoOk() (*ExternalNetworkInfo, bool) {
	if o == nil || o.ExternalNetworkInfo == nil {
		return nil, false
	}
	return o.ExternalNetworkInfo, true
}

// HasExternalNetworkInfo returns a boolean if a field has been set.
func (o *AppInstanceSettings) HasExternalNetworkInfo() bool {
	if o != nil && o.ExternalNetworkInfo != nil {
		return true
	}

	return false
}

// SetExternalNetworkInfo gets a reference to the given ExternalNetworkInfo and assigns it to the ExternalNetworkInfo field.
func (o *AppInstanceSettings) SetExternalNetworkInfo(v ExternalNetworkInfo) {
	o.ExternalNetworkInfo = &v
}

// GetInstanceSize returns the InstanceSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppInstanceSettings) GetInstanceSize() string {
	if o == nil || o.InstanceSize.Get() == nil {
		var ret string
		return ret
	}
	return *o.InstanceSize.Get()
}

// GetInstanceSizeOk returns a tuple with the InstanceSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppInstanceSettings) GetInstanceSizeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InstanceSize.Get(), o.InstanceSize.IsSet()
}

// HasInstanceSize returns a boolean if a field has been set.
func (o *AppInstanceSettings) HasInstanceSize() bool {
	if o != nil && o.InstanceSize.IsSet() {
		return true
	}

	return false
}

// SetInstanceSize gets a reference to the given NullableString and assigns it to the InstanceSize field.
func (o *AppInstanceSettings) SetInstanceSize(v string) {
	o.InstanceSize.Set(&v)
}
// SetInstanceSizeNil sets the value for InstanceSize to be an explicit nil
func (o *AppInstanceSettings) SetInstanceSizeNil() {
	o.InstanceSize.Set(nil)
}

// UnsetInstanceSize ensures that no value is present for InstanceSize, not even an explicit nil
func (o *AppInstanceSettings) UnsetInstanceSize() {
	o.InstanceSize.Unset()
}

// GetProtectedObjectPrivileges returns the ProtectedObjectPrivileges field value if set, zero value otherwise.
func (o *AppInstanceSettings) GetProtectedObjectPrivileges() ProtectedObjectPrivileges {
	if o == nil || o.ProtectedObjectPrivileges == nil {
		var ret ProtectedObjectPrivileges
		return ret
	}
	return *o.ProtectedObjectPrivileges
}

// GetProtectedObjectPrivilegesOk returns a tuple with the ProtectedObjectPrivileges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppInstanceSettings) GetProtectedObjectPrivilegesOk() (*ProtectedObjectPrivileges, bool) {
	if o == nil || o.ProtectedObjectPrivileges == nil {
		return nil, false
	}
	return o.ProtectedObjectPrivileges, true
}

// HasProtectedObjectPrivileges returns a boolean if a field has been set.
func (o *AppInstanceSettings) HasProtectedObjectPrivileges() bool {
	if o != nil && o.ProtectedObjectPrivileges != nil {
		return true
	}

	return false
}

// SetProtectedObjectPrivileges gets a reference to the given ProtectedObjectPrivileges and assigns it to the ProtectedObjectPrivileges field.
func (o *AppInstanceSettings) SetProtectedObjectPrivileges(v ProtectedObjectPrivileges) {
	o.ProtectedObjectPrivileges = &v
}

// GetQosTier returns the QosTier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppInstanceSettings) GetQosTier() string {
	if o == nil || o.QosTier.Get() == nil {
		var ret string
		return ret
	}
	return *o.QosTier.Get()
}

// GetQosTierOk returns a tuple with the QosTier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppInstanceSettings) GetQosTierOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.QosTier.Get(), o.QosTier.IsSet()
}

// HasQosTier returns a boolean if a field has been set.
func (o *AppInstanceSettings) HasQosTier() bool {
	if o != nil && o.QosTier.IsSet() {
		return true
	}

	return false
}

// SetQosTier gets a reference to the given NullableString and assigns it to the QosTier field.
func (o *AppInstanceSettings) SetQosTier(v string) {
	o.QosTier.Set(&v)
}
// SetQosTierNil sets the value for QosTier to be an explicit nil
func (o *AppInstanceSettings) SetQosTierNil() {
	o.QosTier.Set(nil)
}

// UnsetQosTier ensures that no value is present for QosTier, not even an explicit nil
func (o *AppInstanceSettings) UnsetQosTier() {
	o.QosTier.Unset()
}

// GetReadViewPrivileges returns the ReadViewPrivileges field value if set, zero value otherwise.
func (o *AppInstanceSettings) GetReadViewPrivileges() ViewPrivileges {
	if o == nil || o.ReadViewPrivileges == nil {
		var ret ViewPrivileges
		return ret
	}
	return *o.ReadViewPrivileges
}

// GetReadViewPrivilegesOk returns a tuple with the ReadViewPrivileges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppInstanceSettings) GetReadViewPrivilegesOk() (*ViewPrivileges, bool) {
	if o == nil || o.ReadViewPrivileges == nil {
		return nil, false
	}
	return o.ReadViewPrivileges, true
}

// HasReadViewPrivileges returns a boolean if a field has been set.
func (o *AppInstanceSettings) HasReadViewPrivileges() bool {
	if o != nil && o.ReadViewPrivileges != nil {
		return true
	}

	return false
}

// SetReadViewPrivileges gets a reference to the given ViewPrivileges and assigns it to the ReadViewPrivileges field.
func (o *AppInstanceSettings) SetReadViewPrivileges(v ViewPrivileges) {
	o.ReadViewPrivileges = &v
}

// GetReadWriteViewPrivileges returns the ReadWriteViewPrivileges field value if set, zero value otherwise.
func (o *AppInstanceSettings) GetReadWriteViewPrivileges() ViewPrivileges {
	if o == nil || o.ReadWriteViewPrivileges == nil {
		var ret ViewPrivileges
		return ret
	}
	return *o.ReadWriteViewPrivileges
}

// GetReadWriteViewPrivilegesOk returns a tuple with the ReadWriteViewPrivileges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppInstanceSettings) GetReadWriteViewPrivilegesOk() (*ViewPrivileges, bool) {
	if o == nil || o.ReadWriteViewPrivileges == nil {
		return nil, false
	}
	return o.ReadWriteViewPrivileges, true
}

// HasReadWriteViewPrivileges returns a boolean if a field has been set.
func (o *AppInstanceSettings) HasReadWriteViewPrivileges() bool {
	if o != nil && o.ReadWriteViewPrivileges != nil {
		return true
	}

	return false
}

// SetReadWriteViewPrivileges gets a reference to the given ViewPrivileges and assigns it to the ReadWriteViewPrivileges field.
func (o *AppInstanceSettings) SetReadWriteViewPrivileges(v ViewPrivileges) {
	o.ReadWriteViewPrivileges = &v
}

// GetVmNumReplicasList returns the VmNumReplicasList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppInstanceSettings) GetVmNumReplicasList() []VmNumReplicas {
	if o == nil  {
		var ret []VmNumReplicas
		return ret
	}
	return o.VmNumReplicasList
}

// GetVmNumReplicasListOk returns a tuple with the VmNumReplicasList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppInstanceSettings) GetVmNumReplicasListOk() (*[]VmNumReplicas, bool) {
	if o == nil || o.VmNumReplicasList == nil {
		return nil, false
	}
	return &o.VmNumReplicasList, true
}

// HasVmNumReplicasList returns a boolean if a field has been set.
func (o *AppInstanceSettings) HasVmNumReplicasList() bool {
	if o != nil && o.VmNumReplicasList != nil {
		return true
	}

	return false
}

// SetVmNumReplicasList gets a reference to the given []VmNumReplicas and assigns it to the VmNumReplicasList field.
func (o *AppInstanceSettings) SetVmNumReplicasList(v []VmNumReplicas) {
	o.VmNumReplicasList = v
}

func (o AppInstanceSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExternalNetworkInfo != nil {
		toSerialize["externalNetworkInfo"] = o.ExternalNetworkInfo
	}
	if o.InstanceSize.IsSet() {
		toSerialize["instanceSize"] = o.InstanceSize.Get()
	}
	if o.ProtectedObjectPrivileges != nil {
		toSerialize["protectedObjectPrivileges"] = o.ProtectedObjectPrivileges
	}
	if o.QosTier.IsSet() {
		toSerialize["qosTier"] = o.QosTier.Get()
	}
	if o.ReadViewPrivileges != nil {
		toSerialize["readViewPrivileges"] = o.ReadViewPrivileges
	}
	if o.ReadWriteViewPrivileges != nil {
		toSerialize["readWriteViewPrivileges"] = o.ReadWriteViewPrivileges
	}
	if o.VmNumReplicasList != nil {
		toSerialize["vmNumReplicasList"] = o.VmNumReplicasList
	}
	return json.Marshal(toSerialize)
}

type NullableAppInstanceSettings struct {
	value *AppInstanceSettings
	isSet bool
}

func (v NullableAppInstanceSettings) Get() *AppInstanceSettings {
	return v.value
}

func (v *NullableAppInstanceSettings) Set(val *AppInstanceSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableAppInstanceSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableAppInstanceSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppInstanceSettings(val *AppInstanceSettings) *NullableAppInstanceSettings {
	return &NullableAppInstanceSettings{value: val, isSet: true}
}

func (v NullableAppInstanceSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppInstanceSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


