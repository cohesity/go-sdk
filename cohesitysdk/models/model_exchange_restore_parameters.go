/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ExchangeRestoreParameters Specifies the exchange restore parameters.
type ExchangeRestoreParameters struct {
	// Specifies the Exchange restore type. Specifies the type of Exchange restore.  'kNone' specifies no special behaviour. 'kView' specifies the option to create a view which cann be used by the external tools like Kroll to perform mailbox or mail-item recovery. 'kDatabase' specifies the option to restore an Exchange database.
	Type NullableString `json:"type,omitempty"`
	ViewParameters *ExchangeRestoreViewParameters `json:"viewParameters,omitempty"`
}

// NewExchangeRestoreParameters instantiates a new ExchangeRestoreParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExchangeRestoreParameters() *ExchangeRestoreParameters {
	this := ExchangeRestoreParameters{}
	return &this
}

// NewExchangeRestoreParametersWithDefaults instantiates a new ExchangeRestoreParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExchangeRestoreParametersWithDefaults() *ExchangeRestoreParameters {
	this := ExchangeRestoreParameters{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeRestoreParameters) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeRestoreParameters) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *ExchangeRestoreParameters) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *ExchangeRestoreParameters) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *ExchangeRestoreParameters) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *ExchangeRestoreParameters) UnsetType() {
	o.Type.Unset()
}

// GetViewParameters returns the ViewParameters field value if set, zero value otherwise.
func (o *ExchangeRestoreParameters) GetViewParameters() ExchangeRestoreViewParameters {
	if o == nil || o.ViewParameters == nil {
		var ret ExchangeRestoreViewParameters
		return ret
	}
	return *o.ViewParameters
}

// GetViewParametersOk returns a tuple with the ViewParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeRestoreParameters) GetViewParametersOk() (*ExchangeRestoreViewParameters, bool) {
	if o == nil || o.ViewParameters == nil {
		return nil, false
	}
	return o.ViewParameters, true
}

// HasViewParameters returns a boolean if a field has been set.
func (o *ExchangeRestoreParameters) HasViewParameters() bool {
	if o != nil && o.ViewParameters != nil {
		return true
	}

	return false
}

// SetViewParameters gets a reference to the given ExchangeRestoreViewParameters and assigns it to the ViewParameters field.
func (o *ExchangeRestoreParameters) SetViewParameters(v ExchangeRestoreViewParameters) {
	o.ViewParameters = &v
}

func (o ExchangeRestoreParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.ViewParameters != nil {
		toSerialize["viewParameters"] = o.ViewParameters
	}
	return json.Marshal(toSerialize)
}

type NullableExchangeRestoreParameters struct {
	value *ExchangeRestoreParameters
	isSet bool
}

func (v NullableExchangeRestoreParameters) Get() *ExchangeRestoreParameters {
	return v.value
}

func (v *NullableExchangeRestoreParameters) Set(val *ExchangeRestoreParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableExchangeRestoreParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableExchangeRestoreParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchangeRestoreParameters(val *ExchangeRestoreParameters) *NullableExchangeRestoreParameters {
	return &NullableExchangeRestoreParameters{value: val, isSet: true}
}

func (v NullableExchangeRestoreParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchangeRestoreParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


