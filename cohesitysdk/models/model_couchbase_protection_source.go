/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// CouchbaseProtectionSource Specifies an Object representing Couchbase.
type CouchbaseProtectionSource struct {
	BucketInfo *CouchbaseBucket `json:"bucketInfo,omitempty"`
	ClusterInfo *CouchbaseCluster `json:"clusterInfo,omitempty"`
	// Specifies the instance name of the Couchbase entity.
	Name NullableString `json:"name,omitempty"`
	// Specifies the type of the managed Object in Couchbase Protection Source. Specifies the type of an Couchbase source entity. 'kCluster' indicates a Couchbase cluster distributed over several physical nodes. 'kBucket' indicates a bucket within the Couchbase environment.
	Type NullableString `json:"type,omitempty"`
	// Specifies the UUID for the Couchbase entity.
	Uuid NullableString `json:"uuid,omitempty"`
}

// NewCouchbaseProtectionSource instantiates a new CouchbaseProtectionSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCouchbaseProtectionSource() *CouchbaseProtectionSource {
	this := CouchbaseProtectionSource{}
	return &this
}

// NewCouchbaseProtectionSourceWithDefaults instantiates a new CouchbaseProtectionSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCouchbaseProtectionSourceWithDefaults() *CouchbaseProtectionSource {
	this := CouchbaseProtectionSource{}
	return &this
}

// GetBucketInfo returns the BucketInfo field value if set, zero value otherwise.
func (o *CouchbaseProtectionSource) GetBucketInfo() CouchbaseBucket {
	if o == nil || o.BucketInfo == nil {
		var ret CouchbaseBucket
		return ret
	}
	return *o.BucketInfo
}

// GetBucketInfoOk returns a tuple with the BucketInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CouchbaseProtectionSource) GetBucketInfoOk() (*CouchbaseBucket, bool) {
	if o == nil || o.BucketInfo == nil {
		return nil, false
	}
	return o.BucketInfo, true
}

// HasBucketInfo returns a boolean if a field has been set.
func (o *CouchbaseProtectionSource) HasBucketInfo() bool {
	if o != nil && o.BucketInfo != nil {
		return true
	}

	return false
}

// SetBucketInfo gets a reference to the given CouchbaseBucket and assigns it to the BucketInfo field.
func (o *CouchbaseProtectionSource) SetBucketInfo(v CouchbaseBucket) {
	o.BucketInfo = &v
}

// GetClusterInfo returns the ClusterInfo field value if set, zero value otherwise.
func (o *CouchbaseProtectionSource) GetClusterInfo() CouchbaseCluster {
	if o == nil || o.ClusterInfo == nil {
		var ret CouchbaseCluster
		return ret
	}
	return *o.ClusterInfo
}

// GetClusterInfoOk returns a tuple with the ClusterInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CouchbaseProtectionSource) GetClusterInfoOk() (*CouchbaseCluster, bool) {
	if o == nil || o.ClusterInfo == nil {
		return nil, false
	}
	return o.ClusterInfo, true
}

// HasClusterInfo returns a boolean if a field has been set.
func (o *CouchbaseProtectionSource) HasClusterInfo() bool {
	if o != nil && o.ClusterInfo != nil {
		return true
	}

	return false
}

// SetClusterInfo gets a reference to the given CouchbaseCluster and assigns it to the ClusterInfo field.
func (o *CouchbaseProtectionSource) SetClusterInfo(v CouchbaseCluster) {
	o.ClusterInfo = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CouchbaseProtectionSource) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CouchbaseProtectionSource) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *CouchbaseProtectionSource) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *CouchbaseProtectionSource) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *CouchbaseProtectionSource) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *CouchbaseProtectionSource) UnsetName() {
	o.Name.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CouchbaseProtectionSource) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CouchbaseProtectionSource) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *CouchbaseProtectionSource) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *CouchbaseProtectionSource) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *CouchbaseProtectionSource) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *CouchbaseProtectionSource) UnsetType() {
	o.Type.Unset()
}

// GetUuid returns the Uuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CouchbaseProtectionSource) GetUuid() string {
	if o == nil || o.Uuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.Uuid.Get()
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CouchbaseProtectionSource) GetUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Uuid.Get(), o.Uuid.IsSet()
}

// HasUuid returns a boolean if a field has been set.
func (o *CouchbaseProtectionSource) HasUuid() bool {
	if o != nil && o.Uuid.IsSet() {
		return true
	}

	return false
}

// SetUuid gets a reference to the given NullableString and assigns it to the Uuid field.
func (o *CouchbaseProtectionSource) SetUuid(v string) {
	o.Uuid.Set(&v)
}
// SetUuidNil sets the value for Uuid to be an explicit nil
func (o *CouchbaseProtectionSource) SetUuidNil() {
	o.Uuid.Set(nil)
}

// UnsetUuid ensures that no value is present for Uuid, not even an explicit nil
func (o *CouchbaseProtectionSource) UnsetUuid() {
	o.Uuid.Unset()
}

func (o CouchbaseProtectionSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BucketInfo != nil {
		toSerialize["bucketInfo"] = o.BucketInfo
	}
	if o.ClusterInfo != nil {
		toSerialize["clusterInfo"] = o.ClusterInfo
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Uuid.IsSet() {
		toSerialize["uuid"] = o.Uuid.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCouchbaseProtectionSource struct {
	value *CouchbaseProtectionSource
	isSet bool
}

func (v NullableCouchbaseProtectionSource) Get() *CouchbaseProtectionSource {
	return v.value
}

func (v *NullableCouchbaseProtectionSource) Set(val *CouchbaseProtectionSource) {
	v.value = val
	v.isSet = true
}

func (v NullableCouchbaseProtectionSource) IsSet() bool {
	return v.isSet
}

func (v *NullableCouchbaseProtectionSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCouchbaseProtectionSource(val *CouchbaseProtectionSource) *NullableCouchbaseProtectionSource {
	return &NullableCouchbaseProtectionSource{value: val, isSet: true}
}

func (v NullableCouchbaseProtectionSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCouchbaseProtectionSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


