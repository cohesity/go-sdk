/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// MountVolumesState Specifies the states of mounting all the volumes onto a mount target for a 'kRecoverVMs' Restore Task.
type MountVolumesState struct {
	// Optional setting that determines if the volumes are brought online on the mount target after attaching the disks. This option is only significant for VMs.
	BringDisksOnline NullableBool `json:"bringDisksOnline,omitempty"`
	// Array of Mount Volume Results.  Specifies the results of mounting each specified volume.
	MountVolumeResults []MountVolumeResultDetails `json:"mountVolumeResults,omitempty"`
	// Specifies an error that did not occur during the mount operation.
	OtherError NullableRequestError `json:"otherError,omitempty"`
	// Specifies the target Protection Source Id where the volumes will be mounted. NOTE: The source that was backed up and the mount target must be the same type, for example if the source is a VMware VM, then the mount target must also be a VMware VM. The mount target must be registered on the Cohesity Cluster.
	TargetSourceId NullableInt64 `json:"targetSourceId,omitempty"`
	// Specifies the username to access the mount target.
	Username NullableString `json:"username,omitempty"`
}

// NewMountVolumesState instantiates a new MountVolumesState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMountVolumesState() *MountVolumesState {
	this := MountVolumesState{}
	return &this
}

// NewMountVolumesStateWithDefaults instantiates a new MountVolumesState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMountVolumesStateWithDefaults() *MountVolumesState {
	this := MountVolumesState{}
	return &this
}

// GetBringDisksOnline returns the BringDisksOnline field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MountVolumesState) GetBringDisksOnline() bool {
	if o == nil || o.BringDisksOnline.Get() == nil {
		var ret bool
		return ret
	}
	return *o.BringDisksOnline.Get()
}

// GetBringDisksOnlineOk returns a tuple with the BringDisksOnline field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MountVolumesState) GetBringDisksOnlineOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BringDisksOnline.Get(), o.BringDisksOnline.IsSet()
}

// HasBringDisksOnline returns a boolean if a field has been set.
func (o *MountVolumesState) HasBringDisksOnline() bool {
	if o != nil && o.BringDisksOnline.IsSet() {
		return true
	}

	return false
}

// SetBringDisksOnline gets a reference to the given NullableBool and assigns it to the BringDisksOnline field.
func (o *MountVolumesState) SetBringDisksOnline(v bool) {
	o.BringDisksOnline.Set(&v)
}
// SetBringDisksOnlineNil sets the value for BringDisksOnline to be an explicit nil
func (o *MountVolumesState) SetBringDisksOnlineNil() {
	o.BringDisksOnline.Set(nil)
}

// UnsetBringDisksOnline ensures that no value is present for BringDisksOnline, not even an explicit nil
func (o *MountVolumesState) UnsetBringDisksOnline() {
	o.BringDisksOnline.Unset()
}

// GetMountVolumeResults returns the MountVolumeResults field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MountVolumesState) GetMountVolumeResults() []MountVolumeResultDetails {
	if o == nil  {
		var ret []MountVolumeResultDetails
		return ret
	}
	return o.MountVolumeResults
}

// GetMountVolumeResultsOk returns a tuple with the MountVolumeResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MountVolumesState) GetMountVolumeResultsOk() (*[]MountVolumeResultDetails, bool) {
	if o == nil || o.MountVolumeResults == nil {
		return nil, false
	}
	return &o.MountVolumeResults, true
}

// HasMountVolumeResults returns a boolean if a field has been set.
func (o *MountVolumesState) HasMountVolumeResults() bool {
	if o != nil && o.MountVolumeResults != nil {
		return true
	}

	return false
}

// SetMountVolumeResults gets a reference to the given []MountVolumeResultDetails and assigns it to the MountVolumeResults field.
func (o *MountVolumesState) SetMountVolumeResults(v []MountVolumeResultDetails) {
	o.MountVolumeResults = v
}

// GetOtherError returns the OtherError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MountVolumesState) GetOtherError() RequestError {
	if o == nil || o.OtherError.Get() == nil {
		var ret RequestError
		return ret
	}
	return *o.OtherError.Get()
}

// GetOtherErrorOk returns a tuple with the OtherError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MountVolumesState) GetOtherErrorOk() (*RequestError, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OtherError.Get(), o.OtherError.IsSet()
}

// HasOtherError returns a boolean if a field has been set.
func (o *MountVolumesState) HasOtherError() bool {
	if o != nil && o.OtherError.IsSet() {
		return true
	}

	return false
}

// SetOtherError gets a reference to the given NullableRequestError and assigns it to the OtherError field.
func (o *MountVolumesState) SetOtherError(v RequestError) {
	o.OtherError.Set(&v)
}
// SetOtherErrorNil sets the value for OtherError to be an explicit nil
func (o *MountVolumesState) SetOtherErrorNil() {
	o.OtherError.Set(nil)
}

// UnsetOtherError ensures that no value is present for OtherError, not even an explicit nil
func (o *MountVolumesState) UnsetOtherError() {
	o.OtherError.Unset()
}

// GetTargetSourceId returns the TargetSourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MountVolumesState) GetTargetSourceId() int64 {
	if o == nil || o.TargetSourceId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TargetSourceId.Get()
}

// GetTargetSourceIdOk returns a tuple with the TargetSourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MountVolumesState) GetTargetSourceIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetSourceId.Get(), o.TargetSourceId.IsSet()
}

// HasTargetSourceId returns a boolean if a field has been set.
func (o *MountVolumesState) HasTargetSourceId() bool {
	if o != nil && o.TargetSourceId.IsSet() {
		return true
	}

	return false
}

// SetTargetSourceId gets a reference to the given NullableInt64 and assigns it to the TargetSourceId field.
func (o *MountVolumesState) SetTargetSourceId(v int64) {
	o.TargetSourceId.Set(&v)
}
// SetTargetSourceIdNil sets the value for TargetSourceId to be an explicit nil
func (o *MountVolumesState) SetTargetSourceIdNil() {
	o.TargetSourceId.Set(nil)
}

// UnsetTargetSourceId ensures that no value is present for TargetSourceId, not even an explicit nil
func (o *MountVolumesState) UnsetTargetSourceId() {
	o.TargetSourceId.Unset()
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MountVolumesState) GetUsername() string {
	if o == nil || o.Username.Get() == nil {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MountVolumesState) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *MountVolumesState) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *MountVolumesState) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *MountVolumesState) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *MountVolumesState) UnsetUsername() {
	o.Username.Unset()
}

func (o MountVolumesState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BringDisksOnline.IsSet() {
		toSerialize["bringDisksOnline"] = o.BringDisksOnline.Get()
	}
	if o.MountVolumeResults != nil {
		toSerialize["mountVolumeResults"] = o.MountVolumeResults
	}
	if o.OtherError.IsSet() {
		toSerialize["otherError"] = o.OtherError.Get()
	}
	if o.TargetSourceId.IsSet() {
		toSerialize["targetSourceId"] = o.TargetSourceId.Get()
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMountVolumesState struct {
	value *MountVolumesState
	isSet bool
}

func (v NullableMountVolumesState) Get() *MountVolumesState {
	return v.value
}

func (v *NullableMountVolumesState) Set(val *MountVolumesState) {
	v.value = val
	v.isSet = true
}

func (v NullableMountVolumesState) IsSet() bool {
	return v.isSet
}

func (v *NullableMountVolumesState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMountVolumesState(val *MountVolumesState) *NullableMountVolumesState {
	return &NullableMountVolumesState{value: val, isSet: true}
}

func (v NullableMountVolumesState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMountVolumesState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


