/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// VmwareEnvJobParameters Specifies job parameters applicable for all 'kVMware' Environment type Protection Sources in a Protection Job.
type VmwareEnvJobParameters struct {
	// Specifies the list of Disks to be excluded from backing up. These disks are excluded from all Protection Sources in the Protection Job.
	ExcludedDisks []DiskUnit `json:"excludedDisks,omitempty"`
	// If true, takes a crash-consistent snapshot when app-consistent snapshot fails. Otherwise, the snapshot attempt is marked failed.
	FallbackToCrashConsistent NullableBool `json:"fallbackToCrashConsistent,omitempty"`
	// If true, skip physical RDM disks when backing up VMs. Otherwise, backup of VMs having physical RDM will fail.
	SkipPhysicalRdmDisks NullableBool `json:"skipPhysicalRdmDisks,omitempty"`
}

// NewVmwareEnvJobParameters instantiates a new VmwareEnvJobParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmwareEnvJobParameters() *VmwareEnvJobParameters {
	this := VmwareEnvJobParameters{}
	return &this
}

// NewVmwareEnvJobParametersWithDefaults instantiates a new VmwareEnvJobParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmwareEnvJobParametersWithDefaults() *VmwareEnvJobParameters {
	this := VmwareEnvJobParameters{}
	return &this
}

// GetExcludedDisks returns the ExcludedDisks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareEnvJobParameters) GetExcludedDisks() []DiskUnit {
	if o == nil  {
		var ret []DiskUnit
		return ret
	}
	return o.ExcludedDisks
}

// GetExcludedDisksOk returns a tuple with the ExcludedDisks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareEnvJobParameters) GetExcludedDisksOk() (*[]DiskUnit, bool) {
	if o == nil || o.ExcludedDisks == nil {
		return nil, false
	}
	return &o.ExcludedDisks, true
}

// HasExcludedDisks returns a boolean if a field has been set.
func (o *VmwareEnvJobParameters) HasExcludedDisks() bool {
	if o != nil && o.ExcludedDisks != nil {
		return true
	}

	return false
}

// SetExcludedDisks gets a reference to the given []DiskUnit and assigns it to the ExcludedDisks field.
func (o *VmwareEnvJobParameters) SetExcludedDisks(v []DiskUnit) {
	o.ExcludedDisks = v
}

// GetFallbackToCrashConsistent returns the FallbackToCrashConsistent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareEnvJobParameters) GetFallbackToCrashConsistent() bool {
	if o == nil || o.FallbackToCrashConsistent.Get() == nil {
		var ret bool
		return ret
	}
	return *o.FallbackToCrashConsistent.Get()
}

// GetFallbackToCrashConsistentOk returns a tuple with the FallbackToCrashConsistent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareEnvJobParameters) GetFallbackToCrashConsistentOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FallbackToCrashConsistent.Get(), o.FallbackToCrashConsistent.IsSet()
}

// HasFallbackToCrashConsistent returns a boolean if a field has been set.
func (o *VmwareEnvJobParameters) HasFallbackToCrashConsistent() bool {
	if o != nil && o.FallbackToCrashConsistent.IsSet() {
		return true
	}

	return false
}

// SetFallbackToCrashConsistent gets a reference to the given NullableBool and assigns it to the FallbackToCrashConsistent field.
func (o *VmwareEnvJobParameters) SetFallbackToCrashConsistent(v bool) {
	o.FallbackToCrashConsistent.Set(&v)
}
// SetFallbackToCrashConsistentNil sets the value for FallbackToCrashConsistent to be an explicit nil
func (o *VmwareEnvJobParameters) SetFallbackToCrashConsistentNil() {
	o.FallbackToCrashConsistent.Set(nil)
}

// UnsetFallbackToCrashConsistent ensures that no value is present for FallbackToCrashConsistent, not even an explicit nil
func (o *VmwareEnvJobParameters) UnsetFallbackToCrashConsistent() {
	o.FallbackToCrashConsistent.Unset()
}

// GetSkipPhysicalRdmDisks returns the SkipPhysicalRdmDisks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareEnvJobParameters) GetSkipPhysicalRdmDisks() bool {
	if o == nil || o.SkipPhysicalRdmDisks.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SkipPhysicalRdmDisks.Get()
}

// GetSkipPhysicalRdmDisksOk returns a tuple with the SkipPhysicalRdmDisks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareEnvJobParameters) GetSkipPhysicalRdmDisksOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SkipPhysicalRdmDisks.Get(), o.SkipPhysicalRdmDisks.IsSet()
}

// HasSkipPhysicalRdmDisks returns a boolean if a field has been set.
func (o *VmwareEnvJobParameters) HasSkipPhysicalRdmDisks() bool {
	if o != nil && o.SkipPhysicalRdmDisks.IsSet() {
		return true
	}

	return false
}

// SetSkipPhysicalRdmDisks gets a reference to the given NullableBool and assigns it to the SkipPhysicalRdmDisks field.
func (o *VmwareEnvJobParameters) SetSkipPhysicalRdmDisks(v bool) {
	o.SkipPhysicalRdmDisks.Set(&v)
}
// SetSkipPhysicalRdmDisksNil sets the value for SkipPhysicalRdmDisks to be an explicit nil
func (o *VmwareEnvJobParameters) SetSkipPhysicalRdmDisksNil() {
	o.SkipPhysicalRdmDisks.Set(nil)
}

// UnsetSkipPhysicalRdmDisks ensures that no value is present for SkipPhysicalRdmDisks, not even an explicit nil
func (o *VmwareEnvJobParameters) UnsetSkipPhysicalRdmDisks() {
	o.SkipPhysicalRdmDisks.Unset()
}

func (o VmwareEnvJobParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExcludedDisks != nil {
		toSerialize["excludedDisks"] = o.ExcludedDisks
	}
	if o.FallbackToCrashConsistent.IsSet() {
		toSerialize["fallbackToCrashConsistent"] = o.FallbackToCrashConsistent.Get()
	}
	if o.SkipPhysicalRdmDisks.IsSet() {
		toSerialize["skipPhysicalRdmDisks"] = o.SkipPhysicalRdmDisks.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableVmwareEnvJobParameters struct {
	value *VmwareEnvJobParameters
	isSet bool
}

func (v NullableVmwareEnvJobParameters) Get() *VmwareEnvJobParameters {
	return v.value
}

func (v *NullableVmwareEnvJobParameters) Set(val *VmwareEnvJobParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableVmwareEnvJobParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableVmwareEnvJobParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmwareEnvJobParameters(val *VmwareEnvJobParameters) *NullableVmwareEnvJobParameters {
	return &NullableVmwareEnvJobParameters{value: val, isSet: true}
}

func (v NullableVmwareEnvJobParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmwareEnvJobParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


