/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// RestoreFileResultInfo This message captures result of restore of individual file or directory as initiated from magneto. Note, it is expected that the agents go through the \"estimation\" phase first for the entire batch of restore requests and then start copying. These state transitions are reflected in the \"status\" field here.
type RestoreFileResultInfo struct {
	CopyStats *RestoreFileCopyStats `json:"copyStats,omitempty"`
	// This is set to the destination directory where the file/directory was copied.
	DestinationDir NullableString `json:"destinationDir,omitempty"`
	Error *ErrorProto `json:"error,omitempty"`
	RestoredFileInfo *RestoredFileInfo `json:"restoredFileInfo,omitempty"`
	// Status of the restore.
	Status NullableInt32 `json:"status,omitempty"`
}

// NewRestoreFileResultInfo instantiates a new RestoreFileResultInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreFileResultInfo() *RestoreFileResultInfo {
	this := RestoreFileResultInfo{}
	return &this
}

// NewRestoreFileResultInfoWithDefaults instantiates a new RestoreFileResultInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreFileResultInfoWithDefaults() *RestoreFileResultInfo {
	this := RestoreFileResultInfo{}
	return &this
}

// GetCopyStats returns the CopyStats field value if set, zero value otherwise.
func (o *RestoreFileResultInfo) GetCopyStats() RestoreFileCopyStats {
	if o == nil || o.CopyStats == nil {
		var ret RestoreFileCopyStats
		return ret
	}
	return *o.CopyStats
}

// GetCopyStatsOk returns a tuple with the CopyStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreFileResultInfo) GetCopyStatsOk() (*RestoreFileCopyStats, bool) {
	if o == nil || o.CopyStats == nil {
		return nil, false
	}
	return o.CopyStats, true
}

// HasCopyStats returns a boolean if a field has been set.
func (o *RestoreFileResultInfo) HasCopyStats() bool {
	if o != nil && o.CopyStats != nil {
		return true
	}

	return false
}

// SetCopyStats gets a reference to the given RestoreFileCopyStats and assigns it to the CopyStats field.
func (o *RestoreFileResultInfo) SetCopyStats(v RestoreFileCopyStats) {
	o.CopyStats = &v
}

// GetDestinationDir returns the DestinationDir field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFileResultInfo) GetDestinationDir() string {
	if o == nil || o.DestinationDir.Get() == nil {
		var ret string
		return ret
	}
	return *o.DestinationDir.Get()
}

// GetDestinationDirOk returns a tuple with the DestinationDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFileResultInfo) GetDestinationDirOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DestinationDir.Get(), o.DestinationDir.IsSet()
}

// HasDestinationDir returns a boolean if a field has been set.
func (o *RestoreFileResultInfo) HasDestinationDir() bool {
	if o != nil && o.DestinationDir.IsSet() {
		return true
	}

	return false
}

// SetDestinationDir gets a reference to the given NullableString and assigns it to the DestinationDir field.
func (o *RestoreFileResultInfo) SetDestinationDir(v string) {
	o.DestinationDir.Set(&v)
}
// SetDestinationDirNil sets the value for DestinationDir to be an explicit nil
func (o *RestoreFileResultInfo) SetDestinationDirNil() {
	o.DestinationDir.Set(nil)
}

// UnsetDestinationDir ensures that no value is present for DestinationDir, not even an explicit nil
func (o *RestoreFileResultInfo) UnsetDestinationDir() {
	o.DestinationDir.Unset()
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *RestoreFileResultInfo) GetError() ErrorProto {
	if o == nil || o.Error == nil {
		var ret ErrorProto
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreFileResultInfo) GetErrorOk() (*ErrorProto, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *RestoreFileResultInfo) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given ErrorProto and assigns it to the Error field.
func (o *RestoreFileResultInfo) SetError(v ErrorProto) {
	o.Error = &v
}

// GetRestoredFileInfo returns the RestoredFileInfo field value if set, zero value otherwise.
func (o *RestoreFileResultInfo) GetRestoredFileInfo() RestoredFileInfo {
	if o == nil || o.RestoredFileInfo == nil {
		var ret RestoredFileInfo
		return ret
	}
	return *o.RestoredFileInfo
}

// GetRestoredFileInfoOk returns a tuple with the RestoredFileInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreFileResultInfo) GetRestoredFileInfoOk() (*RestoredFileInfo, bool) {
	if o == nil || o.RestoredFileInfo == nil {
		return nil, false
	}
	return o.RestoredFileInfo, true
}

// HasRestoredFileInfo returns a boolean if a field has been set.
func (o *RestoreFileResultInfo) HasRestoredFileInfo() bool {
	if o != nil && o.RestoredFileInfo != nil {
		return true
	}

	return false
}

// SetRestoredFileInfo gets a reference to the given RestoredFileInfo and assigns it to the RestoredFileInfo field.
func (o *RestoreFileResultInfo) SetRestoredFileInfo(v RestoredFileInfo) {
	o.RestoredFileInfo = &v
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFileResultInfo) GetStatus() int32 {
	if o == nil || o.Status.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFileResultInfo) GetStatusOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *RestoreFileResultInfo) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableInt32 and assigns it to the Status field.
func (o *RestoreFileResultInfo) SetStatus(v int32) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *RestoreFileResultInfo) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *RestoreFileResultInfo) UnsetStatus() {
	o.Status.Unset()
}

func (o RestoreFileResultInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CopyStats != nil {
		toSerialize["copyStats"] = o.CopyStats
	}
	if o.DestinationDir.IsSet() {
		toSerialize["destinationDir"] = o.DestinationDir.Get()
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.RestoredFileInfo != nil {
		toSerialize["restoredFileInfo"] = o.RestoredFileInfo
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRestoreFileResultInfo struct {
	value *RestoreFileResultInfo
	isSet bool
}

func (v NullableRestoreFileResultInfo) Get() *RestoreFileResultInfo {
	return v.value
}

func (v *NullableRestoreFileResultInfo) Set(val *RestoreFileResultInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreFileResultInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreFileResultInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreFileResultInfo(val *RestoreFileResultInfo) *NullableRestoreFileResultInfo {
	return &NullableRestoreFileResultInfo{value: val, isSet: true}
}

func (v NullableRestoreFileResultInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreFileResultInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


