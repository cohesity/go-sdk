/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// O365BackupEnvParams Message to capture any additional backup params for Office365 environment. This encapsulates both Outlook & OneDrive backup parameters.
type O365BackupEnvParams struct {
	FilteringPolicy *FilteringPolicyProto `json:"filteringPolicy,omitempty"`
	OnedriveBackupParams *OneDriveBackupEnvParams `json:"onedriveBackupParams,omitempty"`
	OutlookBackupParams *OutlookBackupEnvParams `json:"outlookBackupParams,omitempty"`
	PublicFoldersBackupParams *PublicFoldersBackupEnvParams `json:"publicFoldersBackupParams,omitempty"`
	SiteBackupParams *SharepPointSiteBackupEnvParams `json:"siteBackupParams,omitempty"`
}

// NewO365BackupEnvParams instantiates a new O365BackupEnvParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewO365BackupEnvParams() *O365BackupEnvParams {
	this := O365BackupEnvParams{}
	return &this
}

// NewO365BackupEnvParamsWithDefaults instantiates a new O365BackupEnvParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewO365BackupEnvParamsWithDefaults() *O365BackupEnvParams {
	this := O365BackupEnvParams{}
	return &this
}

// GetFilteringPolicy returns the FilteringPolicy field value if set, zero value otherwise.
func (o *O365BackupEnvParams) GetFilteringPolicy() FilteringPolicyProto {
	if o == nil || o.FilteringPolicy == nil {
		var ret FilteringPolicyProto
		return ret
	}
	return *o.FilteringPolicy
}

// GetFilteringPolicyOk returns a tuple with the FilteringPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *O365BackupEnvParams) GetFilteringPolicyOk() (*FilteringPolicyProto, bool) {
	if o == nil || o.FilteringPolicy == nil {
		return nil, false
	}
	return o.FilteringPolicy, true
}

// HasFilteringPolicy returns a boolean if a field has been set.
func (o *O365BackupEnvParams) HasFilteringPolicy() bool {
	if o != nil && o.FilteringPolicy != nil {
		return true
	}

	return false
}

// SetFilteringPolicy gets a reference to the given FilteringPolicyProto and assigns it to the FilteringPolicy field.
func (o *O365BackupEnvParams) SetFilteringPolicy(v FilteringPolicyProto) {
	o.FilteringPolicy = &v
}

// GetOnedriveBackupParams returns the OnedriveBackupParams field value if set, zero value otherwise.
func (o *O365BackupEnvParams) GetOnedriveBackupParams() OneDriveBackupEnvParams {
	if o == nil || o.OnedriveBackupParams == nil {
		var ret OneDriveBackupEnvParams
		return ret
	}
	return *o.OnedriveBackupParams
}

// GetOnedriveBackupParamsOk returns a tuple with the OnedriveBackupParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *O365BackupEnvParams) GetOnedriveBackupParamsOk() (*OneDriveBackupEnvParams, bool) {
	if o == nil || o.OnedriveBackupParams == nil {
		return nil, false
	}
	return o.OnedriveBackupParams, true
}

// HasOnedriveBackupParams returns a boolean if a field has been set.
func (o *O365BackupEnvParams) HasOnedriveBackupParams() bool {
	if o != nil && o.OnedriveBackupParams != nil {
		return true
	}

	return false
}

// SetOnedriveBackupParams gets a reference to the given OneDriveBackupEnvParams and assigns it to the OnedriveBackupParams field.
func (o *O365BackupEnvParams) SetOnedriveBackupParams(v OneDriveBackupEnvParams) {
	o.OnedriveBackupParams = &v
}

// GetOutlookBackupParams returns the OutlookBackupParams field value if set, zero value otherwise.
func (o *O365BackupEnvParams) GetOutlookBackupParams() OutlookBackupEnvParams {
	if o == nil || o.OutlookBackupParams == nil {
		var ret OutlookBackupEnvParams
		return ret
	}
	return *o.OutlookBackupParams
}

// GetOutlookBackupParamsOk returns a tuple with the OutlookBackupParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *O365BackupEnvParams) GetOutlookBackupParamsOk() (*OutlookBackupEnvParams, bool) {
	if o == nil || o.OutlookBackupParams == nil {
		return nil, false
	}
	return o.OutlookBackupParams, true
}

// HasOutlookBackupParams returns a boolean if a field has been set.
func (o *O365BackupEnvParams) HasOutlookBackupParams() bool {
	if o != nil && o.OutlookBackupParams != nil {
		return true
	}

	return false
}

// SetOutlookBackupParams gets a reference to the given OutlookBackupEnvParams and assigns it to the OutlookBackupParams field.
func (o *O365BackupEnvParams) SetOutlookBackupParams(v OutlookBackupEnvParams) {
	o.OutlookBackupParams = &v
}

// GetPublicFoldersBackupParams returns the PublicFoldersBackupParams field value if set, zero value otherwise.
func (o *O365BackupEnvParams) GetPublicFoldersBackupParams() PublicFoldersBackupEnvParams {
	if o == nil || o.PublicFoldersBackupParams == nil {
		var ret PublicFoldersBackupEnvParams
		return ret
	}
	return *o.PublicFoldersBackupParams
}

// GetPublicFoldersBackupParamsOk returns a tuple with the PublicFoldersBackupParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *O365BackupEnvParams) GetPublicFoldersBackupParamsOk() (*PublicFoldersBackupEnvParams, bool) {
	if o == nil || o.PublicFoldersBackupParams == nil {
		return nil, false
	}
	return o.PublicFoldersBackupParams, true
}

// HasPublicFoldersBackupParams returns a boolean if a field has been set.
func (o *O365BackupEnvParams) HasPublicFoldersBackupParams() bool {
	if o != nil && o.PublicFoldersBackupParams != nil {
		return true
	}

	return false
}

// SetPublicFoldersBackupParams gets a reference to the given PublicFoldersBackupEnvParams and assigns it to the PublicFoldersBackupParams field.
func (o *O365BackupEnvParams) SetPublicFoldersBackupParams(v PublicFoldersBackupEnvParams) {
	o.PublicFoldersBackupParams = &v
}

// GetSiteBackupParams returns the SiteBackupParams field value if set, zero value otherwise.
func (o *O365BackupEnvParams) GetSiteBackupParams() SharepPointSiteBackupEnvParams {
	if o == nil || o.SiteBackupParams == nil {
		var ret SharepPointSiteBackupEnvParams
		return ret
	}
	return *o.SiteBackupParams
}

// GetSiteBackupParamsOk returns a tuple with the SiteBackupParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *O365BackupEnvParams) GetSiteBackupParamsOk() (*SharepPointSiteBackupEnvParams, bool) {
	if o == nil || o.SiteBackupParams == nil {
		return nil, false
	}
	return o.SiteBackupParams, true
}

// HasSiteBackupParams returns a boolean if a field has been set.
func (o *O365BackupEnvParams) HasSiteBackupParams() bool {
	if o != nil && o.SiteBackupParams != nil {
		return true
	}

	return false
}

// SetSiteBackupParams gets a reference to the given SharepPointSiteBackupEnvParams and assigns it to the SiteBackupParams field.
func (o *O365BackupEnvParams) SetSiteBackupParams(v SharepPointSiteBackupEnvParams) {
	o.SiteBackupParams = &v
}

func (o O365BackupEnvParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FilteringPolicy != nil {
		toSerialize["filteringPolicy"] = o.FilteringPolicy
	}
	if o.OnedriveBackupParams != nil {
		toSerialize["onedriveBackupParams"] = o.OnedriveBackupParams
	}
	if o.OutlookBackupParams != nil {
		toSerialize["outlookBackupParams"] = o.OutlookBackupParams
	}
	if o.PublicFoldersBackupParams != nil {
		toSerialize["publicFoldersBackupParams"] = o.PublicFoldersBackupParams
	}
	if o.SiteBackupParams != nil {
		toSerialize["siteBackupParams"] = o.SiteBackupParams
	}
	return json.Marshal(toSerialize)
}

type NullableO365BackupEnvParams struct {
	value *O365BackupEnvParams
	isSet bool
}

func (v NullableO365BackupEnvParams) Get() *O365BackupEnvParams {
	return v.value
}

func (v *NullableO365BackupEnvParams) Set(val *O365BackupEnvParams) {
	v.value = val
	v.isSet = true
}

func (v NullableO365BackupEnvParams) IsSet() bool {
	return v.isSet
}

func (v *NullableO365BackupEnvParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableO365BackupEnvParams(val *O365BackupEnvParams) *NullableO365BackupEnvParams {
	return &NullableO365BackupEnvParams{value: val, isSet: true}
}

func (v NullableO365BackupEnvParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableO365BackupEnvParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


