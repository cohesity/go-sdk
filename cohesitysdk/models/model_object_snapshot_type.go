/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ObjectSnapshotType struct for ObjectSnapshotType
type ObjectSnapshotType struct {
	// This captures any additional message about the snapshot itself, e.g. if the app-consistent snapshot had to fallback to crash consistent, this will contain that.
	Msg NullableString `json:"msg,omitempty"`
	Type NullableInt32 `json:"type,omitempty"`
}

// NewObjectSnapshotType instantiates a new ObjectSnapshotType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectSnapshotType() *ObjectSnapshotType {
	this := ObjectSnapshotType{}
	return &this
}

// NewObjectSnapshotTypeWithDefaults instantiates a new ObjectSnapshotType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectSnapshotTypeWithDefaults() *ObjectSnapshotType {
	this := ObjectSnapshotType{}
	return &this
}

// GetMsg returns the Msg field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectSnapshotType) GetMsg() string {
	if o == nil || o.Msg.Get() == nil {
		var ret string
		return ret
	}
	return *o.Msg.Get()
}

// GetMsgOk returns a tuple with the Msg field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectSnapshotType) GetMsgOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Msg.Get(), o.Msg.IsSet()
}

// HasMsg returns a boolean if a field has been set.
func (o *ObjectSnapshotType) HasMsg() bool {
	if o != nil && o.Msg.IsSet() {
		return true
	}

	return false
}

// SetMsg gets a reference to the given NullableString and assigns it to the Msg field.
func (o *ObjectSnapshotType) SetMsg(v string) {
	o.Msg.Set(&v)
}
// SetMsgNil sets the value for Msg to be an explicit nil
func (o *ObjectSnapshotType) SetMsgNil() {
	o.Msg.Set(nil)
}

// UnsetMsg ensures that no value is present for Msg, not even an explicit nil
func (o *ObjectSnapshotType) UnsetMsg() {
	o.Msg.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectSnapshotType) GetType() int32 {
	if o == nil || o.Type.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectSnapshotType) GetTypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *ObjectSnapshotType) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableInt32 and assigns it to the Type field.
func (o *ObjectSnapshotType) SetType(v int32) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *ObjectSnapshotType) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *ObjectSnapshotType) UnsetType() {
	o.Type.Unset()
}

func (o ObjectSnapshotType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Msg.IsSet() {
		toSerialize["msg"] = o.Msg.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableObjectSnapshotType struct {
	value *ObjectSnapshotType
	isSet bool
}

func (v NullableObjectSnapshotType) Get() *ObjectSnapshotType {
	return v.value
}

func (v *NullableObjectSnapshotType) Set(val *ObjectSnapshotType) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectSnapshotType) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectSnapshotType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectSnapshotType(val *ObjectSnapshotType) *NullableObjectSnapshotType {
	return &NullableObjectSnapshotType{value: val, isSet: true}
}

func (v NullableObjectSnapshotType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectSnapshotType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


