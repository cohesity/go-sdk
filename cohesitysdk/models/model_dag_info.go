/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// DagInfo Specifies the information about the DAG(Database availability group).
type DagInfo struct {
	// Specifies the status of all the Exchange Application Servers that are part of this DAG.
	DagApplicationServerInfoList []DagApplicationServerInfo `json:"dagApplicationServerInfoList,omitempty"`
	ExchangeDagProtectionPreference *ExchangeDAGProtectionPreference `json:"exchangeDagProtectionPreference,omitempty"`
	// Specifies Unique GUID for the DAG.
	Guid NullableString `json:"guid,omitempty"`
	// Specifies display name of the DAG.
	Name NullableString `json:"name,omitempty"`
}

// NewDagInfo instantiates a new DagInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDagInfo() *DagInfo {
	this := DagInfo{}
	return &this
}

// NewDagInfoWithDefaults instantiates a new DagInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDagInfoWithDefaults() *DagInfo {
	this := DagInfo{}
	return &this
}

// GetDagApplicationServerInfoList returns the DagApplicationServerInfoList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DagInfo) GetDagApplicationServerInfoList() []DagApplicationServerInfo {
	if o == nil  {
		var ret []DagApplicationServerInfo
		return ret
	}
	return o.DagApplicationServerInfoList
}

// GetDagApplicationServerInfoListOk returns a tuple with the DagApplicationServerInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DagInfo) GetDagApplicationServerInfoListOk() (*[]DagApplicationServerInfo, bool) {
	if o == nil || o.DagApplicationServerInfoList == nil {
		return nil, false
	}
	return &o.DagApplicationServerInfoList, true
}

// HasDagApplicationServerInfoList returns a boolean if a field has been set.
func (o *DagInfo) HasDagApplicationServerInfoList() bool {
	if o != nil && o.DagApplicationServerInfoList != nil {
		return true
	}

	return false
}

// SetDagApplicationServerInfoList gets a reference to the given []DagApplicationServerInfo and assigns it to the DagApplicationServerInfoList field.
func (o *DagInfo) SetDagApplicationServerInfoList(v []DagApplicationServerInfo) {
	o.DagApplicationServerInfoList = v
}

// GetExchangeDagProtectionPreference returns the ExchangeDagProtectionPreference field value if set, zero value otherwise.
func (o *DagInfo) GetExchangeDagProtectionPreference() ExchangeDAGProtectionPreference {
	if o == nil || o.ExchangeDagProtectionPreference == nil {
		var ret ExchangeDAGProtectionPreference
		return ret
	}
	return *o.ExchangeDagProtectionPreference
}

// GetExchangeDagProtectionPreferenceOk returns a tuple with the ExchangeDagProtectionPreference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DagInfo) GetExchangeDagProtectionPreferenceOk() (*ExchangeDAGProtectionPreference, bool) {
	if o == nil || o.ExchangeDagProtectionPreference == nil {
		return nil, false
	}
	return o.ExchangeDagProtectionPreference, true
}

// HasExchangeDagProtectionPreference returns a boolean if a field has been set.
func (o *DagInfo) HasExchangeDagProtectionPreference() bool {
	if o != nil && o.ExchangeDagProtectionPreference != nil {
		return true
	}

	return false
}

// SetExchangeDagProtectionPreference gets a reference to the given ExchangeDAGProtectionPreference and assigns it to the ExchangeDagProtectionPreference field.
func (o *DagInfo) SetExchangeDagProtectionPreference(v ExchangeDAGProtectionPreference) {
	o.ExchangeDagProtectionPreference = &v
}

// GetGuid returns the Guid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DagInfo) GetGuid() string {
	if o == nil || o.Guid.Get() == nil {
		var ret string
		return ret
	}
	return *o.Guid.Get()
}

// GetGuidOk returns a tuple with the Guid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DagInfo) GetGuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Guid.Get(), o.Guid.IsSet()
}

// HasGuid returns a boolean if a field has been set.
func (o *DagInfo) HasGuid() bool {
	if o != nil && o.Guid.IsSet() {
		return true
	}

	return false
}

// SetGuid gets a reference to the given NullableString and assigns it to the Guid field.
func (o *DagInfo) SetGuid(v string) {
	o.Guid.Set(&v)
}
// SetGuidNil sets the value for Guid to be an explicit nil
func (o *DagInfo) SetGuidNil() {
	o.Guid.Set(nil)
}

// UnsetGuid ensures that no value is present for Guid, not even an explicit nil
func (o *DagInfo) UnsetGuid() {
	o.Guid.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DagInfo) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DagInfo) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *DagInfo) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *DagInfo) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *DagInfo) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *DagInfo) UnsetName() {
	o.Name.Unset()
}

func (o DagInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DagApplicationServerInfoList != nil {
		toSerialize["dagApplicationServerInfoList"] = o.DagApplicationServerInfoList
	}
	if o.ExchangeDagProtectionPreference != nil {
		toSerialize["exchangeDagProtectionPreference"] = o.ExchangeDagProtectionPreference
	}
	if o.Guid.IsSet() {
		toSerialize["guid"] = o.Guid.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDagInfo struct {
	value *DagInfo
	isSet bool
}

func (v NullableDagInfo) Get() *DagInfo {
	return v.value
}

func (v *NullableDagInfo) Set(val *DagInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDagInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDagInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDagInfo(val *DagInfo) *NullableDagInfo {
	return &NullableDagInfo{value: val, isSet: true}
}

func (v NullableDagInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDagInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


