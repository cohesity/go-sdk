/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// CassandraKeyspace Specifies an Object containing information about a Cassandra Keyspace.
type CassandraKeyspace struct {
	// Number of documents in this bucket.
	ChildrenCount NullableInt32 `json:"childrenCount,omitempty"`
	// If the replication strategy is set as kNetwork, then dc_list will have a list of data centers to which the keyspace is being replicated to.
	DcList []string `json:"dcList,omitempty"`
	// Replication stragegy for the keyspace. Specifies the type of an Cassandra source entity.
	ReplicationStrategy NullableString `json:"replicationStrategy,omitempty"`
}

// NewCassandraKeyspace instantiates a new CassandraKeyspace object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCassandraKeyspace() *CassandraKeyspace {
	this := CassandraKeyspace{}
	return &this
}

// NewCassandraKeyspaceWithDefaults instantiates a new CassandraKeyspace object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCassandraKeyspaceWithDefaults() *CassandraKeyspace {
	this := CassandraKeyspace{}
	return &this
}

// GetChildrenCount returns the ChildrenCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraKeyspace) GetChildrenCount() int32 {
	if o == nil || o.ChildrenCount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.ChildrenCount.Get()
}

// GetChildrenCountOk returns a tuple with the ChildrenCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraKeyspace) GetChildrenCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ChildrenCount.Get(), o.ChildrenCount.IsSet()
}

// HasChildrenCount returns a boolean if a field has been set.
func (o *CassandraKeyspace) HasChildrenCount() bool {
	if o != nil && o.ChildrenCount.IsSet() {
		return true
	}

	return false
}

// SetChildrenCount gets a reference to the given NullableInt32 and assigns it to the ChildrenCount field.
func (o *CassandraKeyspace) SetChildrenCount(v int32) {
	o.ChildrenCount.Set(&v)
}
// SetChildrenCountNil sets the value for ChildrenCount to be an explicit nil
func (o *CassandraKeyspace) SetChildrenCountNil() {
	o.ChildrenCount.Set(nil)
}

// UnsetChildrenCount ensures that no value is present for ChildrenCount, not even an explicit nil
func (o *CassandraKeyspace) UnsetChildrenCount() {
	o.ChildrenCount.Unset()
}

// GetDcList returns the DcList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraKeyspace) GetDcList() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.DcList
}

// GetDcListOk returns a tuple with the DcList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraKeyspace) GetDcListOk() (*[]string, bool) {
	if o == nil || o.DcList == nil {
		return nil, false
	}
	return &o.DcList, true
}

// HasDcList returns a boolean if a field has been set.
func (o *CassandraKeyspace) HasDcList() bool {
	if o != nil && o.DcList != nil {
		return true
	}

	return false
}

// SetDcList gets a reference to the given []string and assigns it to the DcList field.
func (o *CassandraKeyspace) SetDcList(v []string) {
	o.DcList = v
}

// GetReplicationStrategy returns the ReplicationStrategy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraKeyspace) GetReplicationStrategy() string {
	if o == nil || o.ReplicationStrategy.Get() == nil {
		var ret string
		return ret
	}
	return *o.ReplicationStrategy.Get()
}

// GetReplicationStrategyOk returns a tuple with the ReplicationStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraKeyspace) GetReplicationStrategyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ReplicationStrategy.Get(), o.ReplicationStrategy.IsSet()
}

// HasReplicationStrategy returns a boolean if a field has been set.
func (o *CassandraKeyspace) HasReplicationStrategy() bool {
	if o != nil && o.ReplicationStrategy.IsSet() {
		return true
	}

	return false
}

// SetReplicationStrategy gets a reference to the given NullableString and assigns it to the ReplicationStrategy field.
func (o *CassandraKeyspace) SetReplicationStrategy(v string) {
	o.ReplicationStrategy.Set(&v)
}
// SetReplicationStrategyNil sets the value for ReplicationStrategy to be an explicit nil
func (o *CassandraKeyspace) SetReplicationStrategyNil() {
	o.ReplicationStrategy.Set(nil)
}

// UnsetReplicationStrategy ensures that no value is present for ReplicationStrategy, not even an explicit nil
func (o *CassandraKeyspace) UnsetReplicationStrategy() {
	o.ReplicationStrategy.Unset()
}

func (o CassandraKeyspace) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ChildrenCount.IsSet() {
		toSerialize["childrenCount"] = o.ChildrenCount.Get()
	}
	if o.DcList != nil {
		toSerialize["dcList"] = o.DcList
	}
	if o.ReplicationStrategy.IsSet() {
		toSerialize["replicationStrategy"] = o.ReplicationStrategy.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCassandraKeyspace struct {
	value *CassandraKeyspace
	isSet bool
}

func (v NullableCassandraKeyspace) Get() *CassandraKeyspace {
	return v.value
}

func (v *NullableCassandraKeyspace) Set(val *CassandraKeyspace) {
	v.value = val
	v.isSet = true
}

func (v NullableCassandraKeyspace) IsSet() bool {
	return v.isSet
}

func (v *NullableCassandraKeyspace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCassandraKeyspace(val *CassandraKeyspace) *NullableCassandraKeyspace {
	return &NullableCassandraKeyspace{value: val, isSet: true}
}

func (v NullableCassandraKeyspace) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCassandraKeyspace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


