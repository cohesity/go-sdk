/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// VolumeInfoDiskInfo struct for VolumeInfoDiskInfo
type VolumeInfoDiskInfo struct {
	// Disk name. This is the vmdk names, and not the flat file name.
	DiskFileName NullableString `json:"diskFileName,omitempty"`
	// Disk format type of this file. See util/disklib/base/enums.proto for available types.
	DiskFormat NullableInt32 `json:"diskFormat,omitempty"`
	// Disk uuid.
	DiskUuid NullableString `json:"diskUuid,omitempty"`
	// Disk partition type.
	PartitionType NullableInt32 `json:"partitionType,omitempty"`
	// Information about all the partitions in this disk.
	PartitionVec []VolumeInfoDiskInfoPartitionInfo `json:"partitionVec,omitempty"`
	// This disk is formed by following physical ranges. Ranges are arranged sequentially to form a disk.
	PhysicalRangeVec []VolumeInfoDiskInfoPhysicalRange `json:"physicalRangeVec,omitempty"`
	// Sector size of disk. This is sector size of disk which is formed by mapping the physical ranges of the disk into a linear device.
	SectorSize NullableInt64 `json:"sectorSize,omitempty"`
	// Disk size in bytes.
	VmdkSize NullableInt64 `json:"vmdkSize,omitempty"`
}

// NewVolumeInfoDiskInfo instantiates a new VolumeInfoDiskInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeInfoDiskInfo() *VolumeInfoDiskInfo {
	this := VolumeInfoDiskInfo{}
	return &this
}

// NewVolumeInfoDiskInfoWithDefaults instantiates a new VolumeInfoDiskInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeInfoDiskInfoWithDefaults() *VolumeInfoDiskInfo {
	this := VolumeInfoDiskInfo{}
	return &this
}

// GetDiskFileName returns the DiskFileName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfoDiskInfo) GetDiskFileName() string {
	if o == nil || o.DiskFileName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DiskFileName.Get()
}

// GetDiskFileNameOk returns a tuple with the DiskFileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfoDiskInfo) GetDiskFileNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DiskFileName.Get(), o.DiskFileName.IsSet()
}

// HasDiskFileName returns a boolean if a field has been set.
func (o *VolumeInfoDiskInfo) HasDiskFileName() bool {
	if o != nil && o.DiskFileName.IsSet() {
		return true
	}

	return false
}

// SetDiskFileName gets a reference to the given NullableString and assigns it to the DiskFileName field.
func (o *VolumeInfoDiskInfo) SetDiskFileName(v string) {
	o.DiskFileName.Set(&v)
}
// SetDiskFileNameNil sets the value for DiskFileName to be an explicit nil
func (o *VolumeInfoDiskInfo) SetDiskFileNameNil() {
	o.DiskFileName.Set(nil)
}

// UnsetDiskFileName ensures that no value is present for DiskFileName, not even an explicit nil
func (o *VolumeInfoDiskInfo) UnsetDiskFileName() {
	o.DiskFileName.Unset()
}

// GetDiskFormat returns the DiskFormat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfoDiskInfo) GetDiskFormat() int32 {
	if o == nil || o.DiskFormat.Get() == nil {
		var ret int32
		return ret
	}
	return *o.DiskFormat.Get()
}

// GetDiskFormatOk returns a tuple with the DiskFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfoDiskInfo) GetDiskFormatOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DiskFormat.Get(), o.DiskFormat.IsSet()
}

// HasDiskFormat returns a boolean if a field has been set.
func (o *VolumeInfoDiskInfo) HasDiskFormat() bool {
	if o != nil && o.DiskFormat.IsSet() {
		return true
	}

	return false
}

// SetDiskFormat gets a reference to the given NullableInt32 and assigns it to the DiskFormat field.
func (o *VolumeInfoDiskInfo) SetDiskFormat(v int32) {
	o.DiskFormat.Set(&v)
}
// SetDiskFormatNil sets the value for DiskFormat to be an explicit nil
func (o *VolumeInfoDiskInfo) SetDiskFormatNil() {
	o.DiskFormat.Set(nil)
}

// UnsetDiskFormat ensures that no value is present for DiskFormat, not even an explicit nil
func (o *VolumeInfoDiskInfo) UnsetDiskFormat() {
	o.DiskFormat.Unset()
}

// GetDiskUuid returns the DiskUuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfoDiskInfo) GetDiskUuid() string {
	if o == nil || o.DiskUuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.DiskUuid.Get()
}

// GetDiskUuidOk returns a tuple with the DiskUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfoDiskInfo) GetDiskUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DiskUuid.Get(), o.DiskUuid.IsSet()
}

// HasDiskUuid returns a boolean if a field has been set.
func (o *VolumeInfoDiskInfo) HasDiskUuid() bool {
	if o != nil && o.DiskUuid.IsSet() {
		return true
	}

	return false
}

// SetDiskUuid gets a reference to the given NullableString and assigns it to the DiskUuid field.
func (o *VolumeInfoDiskInfo) SetDiskUuid(v string) {
	o.DiskUuid.Set(&v)
}
// SetDiskUuidNil sets the value for DiskUuid to be an explicit nil
func (o *VolumeInfoDiskInfo) SetDiskUuidNil() {
	o.DiskUuid.Set(nil)
}

// UnsetDiskUuid ensures that no value is present for DiskUuid, not even an explicit nil
func (o *VolumeInfoDiskInfo) UnsetDiskUuid() {
	o.DiskUuid.Unset()
}

// GetPartitionType returns the PartitionType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfoDiskInfo) GetPartitionType() int32 {
	if o == nil || o.PartitionType.Get() == nil {
		var ret int32
		return ret
	}
	return *o.PartitionType.Get()
}

// GetPartitionTypeOk returns a tuple with the PartitionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfoDiskInfo) GetPartitionTypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PartitionType.Get(), o.PartitionType.IsSet()
}

// HasPartitionType returns a boolean if a field has been set.
func (o *VolumeInfoDiskInfo) HasPartitionType() bool {
	if o != nil && o.PartitionType.IsSet() {
		return true
	}

	return false
}

// SetPartitionType gets a reference to the given NullableInt32 and assigns it to the PartitionType field.
func (o *VolumeInfoDiskInfo) SetPartitionType(v int32) {
	o.PartitionType.Set(&v)
}
// SetPartitionTypeNil sets the value for PartitionType to be an explicit nil
func (o *VolumeInfoDiskInfo) SetPartitionTypeNil() {
	o.PartitionType.Set(nil)
}

// UnsetPartitionType ensures that no value is present for PartitionType, not even an explicit nil
func (o *VolumeInfoDiskInfo) UnsetPartitionType() {
	o.PartitionType.Unset()
}

// GetPartitionVec returns the PartitionVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfoDiskInfo) GetPartitionVec() []VolumeInfoDiskInfoPartitionInfo {
	if o == nil  {
		var ret []VolumeInfoDiskInfoPartitionInfo
		return ret
	}
	return o.PartitionVec
}

// GetPartitionVecOk returns a tuple with the PartitionVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfoDiskInfo) GetPartitionVecOk() (*[]VolumeInfoDiskInfoPartitionInfo, bool) {
	if o == nil || o.PartitionVec == nil {
		return nil, false
	}
	return &o.PartitionVec, true
}

// HasPartitionVec returns a boolean if a field has been set.
func (o *VolumeInfoDiskInfo) HasPartitionVec() bool {
	if o != nil && o.PartitionVec != nil {
		return true
	}

	return false
}

// SetPartitionVec gets a reference to the given []VolumeInfoDiskInfoPartitionInfo and assigns it to the PartitionVec field.
func (o *VolumeInfoDiskInfo) SetPartitionVec(v []VolumeInfoDiskInfoPartitionInfo) {
	o.PartitionVec = v
}

// GetPhysicalRangeVec returns the PhysicalRangeVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfoDiskInfo) GetPhysicalRangeVec() []VolumeInfoDiskInfoPhysicalRange {
	if o == nil  {
		var ret []VolumeInfoDiskInfoPhysicalRange
		return ret
	}
	return o.PhysicalRangeVec
}

// GetPhysicalRangeVecOk returns a tuple with the PhysicalRangeVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfoDiskInfo) GetPhysicalRangeVecOk() (*[]VolumeInfoDiskInfoPhysicalRange, bool) {
	if o == nil || o.PhysicalRangeVec == nil {
		return nil, false
	}
	return &o.PhysicalRangeVec, true
}

// HasPhysicalRangeVec returns a boolean if a field has been set.
func (o *VolumeInfoDiskInfo) HasPhysicalRangeVec() bool {
	if o != nil && o.PhysicalRangeVec != nil {
		return true
	}

	return false
}

// SetPhysicalRangeVec gets a reference to the given []VolumeInfoDiskInfoPhysicalRange and assigns it to the PhysicalRangeVec field.
func (o *VolumeInfoDiskInfo) SetPhysicalRangeVec(v []VolumeInfoDiskInfoPhysicalRange) {
	o.PhysicalRangeVec = v
}

// GetSectorSize returns the SectorSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfoDiskInfo) GetSectorSize() int64 {
	if o == nil || o.SectorSize.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SectorSize.Get()
}

// GetSectorSizeOk returns a tuple with the SectorSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfoDiskInfo) GetSectorSizeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SectorSize.Get(), o.SectorSize.IsSet()
}

// HasSectorSize returns a boolean if a field has been set.
func (o *VolumeInfoDiskInfo) HasSectorSize() bool {
	if o != nil && o.SectorSize.IsSet() {
		return true
	}

	return false
}

// SetSectorSize gets a reference to the given NullableInt64 and assigns it to the SectorSize field.
func (o *VolumeInfoDiskInfo) SetSectorSize(v int64) {
	o.SectorSize.Set(&v)
}
// SetSectorSizeNil sets the value for SectorSize to be an explicit nil
func (o *VolumeInfoDiskInfo) SetSectorSizeNil() {
	o.SectorSize.Set(nil)
}

// UnsetSectorSize ensures that no value is present for SectorSize, not even an explicit nil
func (o *VolumeInfoDiskInfo) UnsetSectorSize() {
	o.SectorSize.Unset()
}

// GetVmdkSize returns the VmdkSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfoDiskInfo) GetVmdkSize() int64 {
	if o == nil || o.VmdkSize.Get() == nil {
		var ret int64
		return ret
	}
	return *o.VmdkSize.Get()
}

// GetVmdkSizeOk returns a tuple with the VmdkSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfoDiskInfo) GetVmdkSizeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VmdkSize.Get(), o.VmdkSize.IsSet()
}

// HasVmdkSize returns a boolean if a field has been set.
func (o *VolumeInfoDiskInfo) HasVmdkSize() bool {
	if o != nil && o.VmdkSize.IsSet() {
		return true
	}

	return false
}

// SetVmdkSize gets a reference to the given NullableInt64 and assigns it to the VmdkSize field.
func (o *VolumeInfoDiskInfo) SetVmdkSize(v int64) {
	o.VmdkSize.Set(&v)
}
// SetVmdkSizeNil sets the value for VmdkSize to be an explicit nil
func (o *VolumeInfoDiskInfo) SetVmdkSizeNil() {
	o.VmdkSize.Set(nil)
}

// UnsetVmdkSize ensures that no value is present for VmdkSize, not even an explicit nil
func (o *VolumeInfoDiskInfo) UnsetVmdkSize() {
	o.VmdkSize.Unset()
}

func (o VolumeInfoDiskInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DiskFileName.IsSet() {
		toSerialize["diskFileName"] = o.DiskFileName.Get()
	}
	if o.DiskFormat.IsSet() {
		toSerialize["diskFormat"] = o.DiskFormat.Get()
	}
	if o.DiskUuid.IsSet() {
		toSerialize["diskUuid"] = o.DiskUuid.Get()
	}
	if o.PartitionType.IsSet() {
		toSerialize["partitionType"] = o.PartitionType.Get()
	}
	if o.PartitionVec != nil {
		toSerialize["partitionVec"] = o.PartitionVec
	}
	if o.PhysicalRangeVec != nil {
		toSerialize["physicalRangeVec"] = o.PhysicalRangeVec
	}
	if o.SectorSize.IsSet() {
		toSerialize["sectorSize"] = o.SectorSize.Get()
	}
	if o.VmdkSize.IsSet() {
		toSerialize["vmdkSize"] = o.VmdkSize.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableVolumeInfoDiskInfo struct {
	value *VolumeInfoDiskInfo
	isSet bool
}

func (v NullableVolumeInfoDiskInfo) Get() *VolumeInfoDiskInfo {
	return v.value
}

func (v *NullableVolumeInfoDiskInfo) Set(val *VolumeInfoDiskInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeInfoDiskInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeInfoDiskInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeInfoDiskInfo(val *VolumeInfoDiskInfo) *NullableVolumeInfoDiskInfo {
	return &NullableVolumeInfoDiskInfo{value: val, isSet: true}
}

func (v NullableVolumeInfoDiskInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeInfoDiskInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


