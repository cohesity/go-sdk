/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// VaultStats Specifies the storage usage on vaults.
type VaultStats struct {
	// Specifies the usage on AWS vaults.
	AwsUsageBytes NullableInt64 `json:"awsUsageBytes,omitempty"`
	// Specifies the usage on Azure vaults.
	AzureUsageBytes NullableInt64 `json:"azureUsageBytes,omitempty"`
	// Specifies the usage on GCP vaults.
	GcpUsageBytes NullableInt64 `json:"gcpUsageBytes,omitempty"`
	// Specifies the usage on NAS vaults.
	NasUsageBytes NullableInt64 `json:"nasUsageBytes,omitempty"`
	// Specifies the usage on Oracle vaults.
	OracleUsageBytes NullableInt64 `json:"oracleUsageBytes,omitempty"`
	// Specifies the usage on QStar Tape vaults.
	QstarUsageBytes NullableInt64 `json:"qstarUsageBytes,omitempty"`
	// Specifies the usage on S3 Compatible vaults.
	S3cUsageBytes NullableInt64 `json:"s3cUsageBytes,omitempty"`
	// Specifies the stats of all vaults on the cluster.
	VaultStatsList *[]VaultStatsInfo `json:"vaultStatsList,omitempty"`
}

// NewVaultStats instantiates a new VaultStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVaultStats() *VaultStats {
	this := VaultStats{}
	return &this
}

// NewVaultStatsWithDefaults instantiates a new VaultStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVaultStatsWithDefaults() *VaultStats {
	this := VaultStats{}
	return &this
}

// GetAwsUsageBytes returns the AwsUsageBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VaultStats) GetAwsUsageBytes() int64 {
	if o == nil || o.AwsUsageBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.AwsUsageBytes.Get()
}

// GetAwsUsageBytesOk returns a tuple with the AwsUsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VaultStats) GetAwsUsageBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AwsUsageBytes.Get(), o.AwsUsageBytes.IsSet()
}

// HasAwsUsageBytes returns a boolean if a field has been set.
func (o *VaultStats) HasAwsUsageBytes() bool {
	if o != nil && o.AwsUsageBytes.IsSet() {
		return true
	}

	return false
}

// SetAwsUsageBytes gets a reference to the given NullableInt64 and assigns it to the AwsUsageBytes field.
func (o *VaultStats) SetAwsUsageBytes(v int64) {
	o.AwsUsageBytes.Set(&v)
}
// SetAwsUsageBytesNil sets the value for AwsUsageBytes to be an explicit nil
func (o *VaultStats) SetAwsUsageBytesNil() {
	o.AwsUsageBytes.Set(nil)
}

// UnsetAwsUsageBytes ensures that no value is present for AwsUsageBytes, not even an explicit nil
func (o *VaultStats) UnsetAwsUsageBytes() {
	o.AwsUsageBytes.Unset()
}

// GetAzureUsageBytes returns the AzureUsageBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VaultStats) GetAzureUsageBytes() int64 {
	if o == nil || o.AzureUsageBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.AzureUsageBytes.Get()
}

// GetAzureUsageBytesOk returns a tuple with the AzureUsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VaultStats) GetAzureUsageBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AzureUsageBytes.Get(), o.AzureUsageBytes.IsSet()
}

// HasAzureUsageBytes returns a boolean if a field has been set.
func (o *VaultStats) HasAzureUsageBytes() bool {
	if o != nil && o.AzureUsageBytes.IsSet() {
		return true
	}

	return false
}

// SetAzureUsageBytes gets a reference to the given NullableInt64 and assigns it to the AzureUsageBytes field.
func (o *VaultStats) SetAzureUsageBytes(v int64) {
	o.AzureUsageBytes.Set(&v)
}
// SetAzureUsageBytesNil sets the value for AzureUsageBytes to be an explicit nil
func (o *VaultStats) SetAzureUsageBytesNil() {
	o.AzureUsageBytes.Set(nil)
}

// UnsetAzureUsageBytes ensures that no value is present for AzureUsageBytes, not even an explicit nil
func (o *VaultStats) UnsetAzureUsageBytes() {
	o.AzureUsageBytes.Unset()
}

// GetGcpUsageBytes returns the GcpUsageBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VaultStats) GetGcpUsageBytes() int64 {
	if o == nil || o.GcpUsageBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.GcpUsageBytes.Get()
}

// GetGcpUsageBytesOk returns a tuple with the GcpUsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VaultStats) GetGcpUsageBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.GcpUsageBytes.Get(), o.GcpUsageBytes.IsSet()
}

// HasGcpUsageBytes returns a boolean if a field has been set.
func (o *VaultStats) HasGcpUsageBytes() bool {
	if o != nil && o.GcpUsageBytes.IsSet() {
		return true
	}

	return false
}

// SetGcpUsageBytes gets a reference to the given NullableInt64 and assigns it to the GcpUsageBytes field.
func (o *VaultStats) SetGcpUsageBytes(v int64) {
	o.GcpUsageBytes.Set(&v)
}
// SetGcpUsageBytesNil sets the value for GcpUsageBytes to be an explicit nil
func (o *VaultStats) SetGcpUsageBytesNil() {
	o.GcpUsageBytes.Set(nil)
}

// UnsetGcpUsageBytes ensures that no value is present for GcpUsageBytes, not even an explicit nil
func (o *VaultStats) UnsetGcpUsageBytes() {
	o.GcpUsageBytes.Unset()
}

// GetNasUsageBytes returns the NasUsageBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VaultStats) GetNasUsageBytes() int64 {
	if o == nil || o.NasUsageBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NasUsageBytes.Get()
}

// GetNasUsageBytesOk returns a tuple with the NasUsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VaultStats) GetNasUsageBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NasUsageBytes.Get(), o.NasUsageBytes.IsSet()
}

// HasNasUsageBytes returns a boolean if a field has been set.
func (o *VaultStats) HasNasUsageBytes() bool {
	if o != nil && o.NasUsageBytes.IsSet() {
		return true
	}

	return false
}

// SetNasUsageBytes gets a reference to the given NullableInt64 and assigns it to the NasUsageBytes field.
func (o *VaultStats) SetNasUsageBytes(v int64) {
	o.NasUsageBytes.Set(&v)
}
// SetNasUsageBytesNil sets the value for NasUsageBytes to be an explicit nil
func (o *VaultStats) SetNasUsageBytesNil() {
	o.NasUsageBytes.Set(nil)
}

// UnsetNasUsageBytes ensures that no value is present for NasUsageBytes, not even an explicit nil
func (o *VaultStats) UnsetNasUsageBytes() {
	o.NasUsageBytes.Unset()
}

// GetOracleUsageBytes returns the OracleUsageBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VaultStats) GetOracleUsageBytes() int64 {
	if o == nil || o.OracleUsageBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.OracleUsageBytes.Get()
}

// GetOracleUsageBytesOk returns a tuple with the OracleUsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VaultStats) GetOracleUsageBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OracleUsageBytes.Get(), o.OracleUsageBytes.IsSet()
}

// HasOracleUsageBytes returns a boolean if a field has been set.
func (o *VaultStats) HasOracleUsageBytes() bool {
	if o != nil && o.OracleUsageBytes.IsSet() {
		return true
	}

	return false
}

// SetOracleUsageBytes gets a reference to the given NullableInt64 and assigns it to the OracleUsageBytes field.
func (o *VaultStats) SetOracleUsageBytes(v int64) {
	o.OracleUsageBytes.Set(&v)
}
// SetOracleUsageBytesNil sets the value for OracleUsageBytes to be an explicit nil
func (o *VaultStats) SetOracleUsageBytesNil() {
	o.OracleUsageBytes.Set(nil)
}

// UnsetOracleUsageBytes ensures that no value is present for OracleUsageBytes, not even an explicit nil
func (o *VaultStats) UnsetOracleUsageBytes() {
	o.OracleUsageBytes.Unset()
}

// GetQstarUsageBytes returns the QstarUsageBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VaultStats) GetQstarUsageBytes() int64 {
	if o == nil || o.QstarUsageBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.QstarUsageBytes.Get()
}

// GetQstarUsageBytesOk returns a tuple with the QstarUsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VaultStats) GetQstarUsageBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.QstarUsageBytes.Get(), o.QstarUsageBytes.IsSet()
}

// HasQstarUsageBytes returns a boolean if a field has been set.
func (o *VaultStats) HasQstarUsageBytes() bool {
	if o != nil && o.QstarUsageBytes.IsSet() {
		return true
	}

	return false
}

// SetQstarUsageBytes gets a reference to the given NullableInt64 and assigns it to the QstarUsageBytes field.
func (o *VaultStats) SetQstarUsageBytes(v int64) {
	o.QstarUsageBytes.Set(&v)
}
// SetQstarUsageBytesNil sets the value for QstarUsageBytes to be an explicit nil
func (o *VaultStats) SetQstarUsageBytesNil() {
	o.QstarUsageBytes.Set(nil)
}

// UnsetQstarUsageBytes ensures that no value is present for QstarUsageBytes, not even an explicit nil
func (o *VaultStats) UnsetQstarUsageBytes() {
	o.QstarUsageBytes.Unset()
}

// GetS3cUsageBytes returns the S3cUsageBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VaultStats) GetS3cUsageBytes() int64 {
	if o == nil || o.S3cUsageBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.S3cUsageBytes.Get()
}

// GetS3cUsageBytesOk returns a tuple with the S3cUsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VaultStats) GetS3cUsageBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.S3cUsageBytes.Get(), o.S3cUsageBytes.IsSet()
}

// HasS3cUsageBytes returns a boolean if a field has been set.
func (o *VaultStats) HasS3cUsageBytes() bool {
	if o != nil && o.S3cUsageBytes.IsSet() {
		return true
	}

	return false
}

// SetS3cUsageBytes gets a reference to the given NullableInt64 and assigns it to the S3cUsageBytes field.
func (o *VaultStats) SetS3cUsageBytes(v int64) {
	o.S3cUsageBytes.Set(&v)
}
// SetS3cUsageBytesNil sets the value for S3cUsageBytes to be an explicit nil
func (o *VaultStats) SetS3cUsageBytesNil() {
	o.S3cUsageBytes.Set(nil)
}

// UnsetS3cUsageBytes ensures that no value is present for S3cUsageBytes, not even an explicit nil
func (o *VaultStats) UnsetS3cUsageBytes() {
	o.S3cUsageBytes.Unset()
}

// GetVaultStatsList returns the VaultStatsList field value if set, zero value otherwise.
func (o *VaultStats) GetVaultStatsList() []VaultStatsInfo {
	if o == nil || o.VaultStatsList == nil {
		var ret []VaultStatsInfo
		return ret
	}
	return *o.VaultStatsList
}

// GetVaultStatsListOk returns a tuple with the VaultStatsList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultStats) GetVaultStatsListOk() (*[]VaultStatsInfo, bool) {
	if o == nil || o.VaultStatsList == nil {
		return nil, false
	}
	return o.VaultStatsList, true
}

// HasVaultStatsList returns a boolean if a field has been set.
func (o *VaultStats) HasVaultStatsList() bool {
	if o != nil && o.VaultStatsList != nil {
		return true
	}

	return false
}

// SetVaultStatsList gets a reference to the given []VaultStatsInfo and assigns it to the VaultStatsList field.
func (o *VaultStats) SetVaultStatsList(v []VaultStatsInfo) {
	o.VaultStatsList = &v
}

func (o VaultStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AwsUsageBytes.IsSet() {
		toSerialize["awsUsageBytes"] = o.AwsUsageBytes.Get()
	}
	if o.AzureUsageBytes.IsSet() {
		toSerialize["azureUsageBytes"] = o.AzureUsageBytes.Get()
	}
	if o.GcpUsageBytes.IsSet() {
		toSerialize["gcpUsageBytes"] = o.GcpUsageBytes.Get()
	}
	if o.NasUsageBytes.IsSet() {
		toSerialize["nasUsageBytes"] = o.NasUsageBytes.Get()
	}
	if o.OracleUsageBytes.IsSet() {
		toSerialize["oracleUsageBytes"] = o.OracleUsageBytes.Get()
	}
	if o.QstarUsageBytes.IsSet() {
		toSerialize["qstarUsageBytes"] = o.QstarUsageBytes.Get()
	}
	if o.S3cUsageBytes.IsSet() {
		toSerialize["s3cUsageBytes"] = o.S3cUsageBytes.Get()
	}
	if o.VaultStatsList != nil {
		toSerialize["vaultStatsList"] = o.VaultStatsList
	}
	return json.Marshal(toSerialize)
}

type NullableVaultStats struct {
	value *VaultStats
	isSet bool
}

func (v NullableVaultStats) Get() *VaultStats {
	return v.value
}

func (v *NullableVaultStats) Set(val *VaultStats) {
	v.value = val
	v.isSet = true
}

func (v NullableVaultStats) IsSet() bool {
	return v.isSet
}

func (v *NullableVaultStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVaultStats(val *VaultStats) *NullableVaultStats {
	return &NullableVaultStats{value: val, isSet: true}
}

func (v NullableVaultStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVaultStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


