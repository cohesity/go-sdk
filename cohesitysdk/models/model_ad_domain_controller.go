/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// AdDomainController Specifies information about an AD domain controller.
type AdDomainController struct {
	// Specifies whether backup of this domain controller is supported.
	BackupSupported NullableBool `json:"backupSupported,omitempty"`
	// Specifies any reason(s) for domain controller backup not supported.
	BackupUnsupportedReasons []string `json:"backupUnsupportedReasons,omitempty"`
	Domain *AdDomain `json:"domain,omitempty"`
	// Specifies FQDN host name of the domain controller.
	HostName NullableString `json:"hostName,omitempty"`
	// Specifies whether this domain controller is a global catalog server.
	IsGlobalCatalog NullableBool `json:"isGlobalCatalog,omitempty"`
	// Specifies whether this domain controller is read only.
	IsReadOnly NullableBool `json:"isReadOnly,omitempty"`
	// Specifies UTC time offset of this domain controller in minutes.
	UtcOffsetMin NullableInt32 `json:"utcOffsetMin,omitempty"`
}

// NewAdDomainController instantiates a new AdDomainController object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdDomainController() *AdDomainController {
	this := AdDomainController{}
	return &this
}

// NewAdDomainControllerWithDefaults instantiates a new AdDomainController object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdDomainControllerWithDefaults() *AdDomainController {
	this := AdDomainController{}
	return &this
}

// GetBackupSupported returns the BackupSupported field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdDomainController) GetBackupSupported() bool {
	if o == nil || o.BackupSupported.Get() == nil {
		var ret bool
		return ret
	}
	return *o.BackupSupported.Get()
}

// GetBackupSupportedOk returns a tuple with the BackupSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdDomainController) GetBackupSupportedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BackupSupported.Get(), o.BackupSupported.IsSet()
}

// HasBackupSupported returns a boolean if a field has been set.
func (o *AdDomainController) HasBackupSupported() bool {
	if o != nil && o.BackupSupported.IsSet() {
		return true
	}

	return false
}

// SetBackupSupported gets a reference to the given NullableBool and assigns it to the BackupSupported field.
func (o *AdDomainController) SetBackupSupported(v bool) {
	o.BackupSupported.Set(&v)
}
// SetBackupSupportedNil sets the value for BackupSupported to be an explicit nil
func (o *AdDomainController) SetBackupSupportedNil() {
	o.BackupSupported.Set(nil)
}

// UnsetBackupSupported ensures that no value is present for BackupSupported, not even an explicit nil
func (o *AdDomainController) UnsetBackupSupported() {
	o.BackupSupported.Unset()
}

// GetBackupUnsupportedReasons returns the BackupUnsupportedReasons field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdDomainController) GetBackupUnsupportedReasons() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.BackupUnsupportedReasons
}

// GetBackupUnsupportedReasonsOk returns a tuple with the BackupUnsupportedReasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdDomainController) GetBackupUnsupportedReasonsOk() (*[]string, bool) {
	if o == nil || o.BackupUnsupportedReasons == nil {
		return nil, false
	}
	return &o.BackupUnsupportedReasons, true
}

// HasBackupUnsupportedReasons returns a boolean if a field has been set.
func (o *AdDomainController) HasBackupUnsupportedReasons() bool {
	if o != nil && o.BackupUnsupportedReasons != nil {
		return true
	}

	return false
}

// SetBackupUnsupportedReasons gets a reference to the given []string and assigns it to the BackupUnsupportedReasons field.
func (o *AdDomainController) SetBackupUnsupportedReasons(v []string) {
	o.BackupUnsupportedReasons = v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *AdDomainController) GetDomain() AdDomain {
	if o == nil || o.Domain == nil {
		var ret AdDomain
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdDomainController) GetDomainOk() (*AdDomain, bool) {
	if o == nil || o.Domain == nil {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *AdDomainController) HasDomain() bool {
	if o != nil && o.Domain != nil {
		return true
	}

	return false
}

// SetDomain gets a reference to the given AdDomain and assigns it to the Domain field.
func (o *AdDomainController) SetDomain(v AdDomain) {
	o.Domain = &v
}

// GetHostName returns the HostName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdDomainController) GetHostName() string {
	if o == nil || o.HostName.Get() == nil {
		var ret string
		return ret
	}
	return *o.HostName.Get()
}

// GetHostNameOk returns a tuple with the HostName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdDomainController) GetHostNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HostName.Get(), o.HostName.IsSet()
}

// HasHostName returns a boolean if a field has been set.
func (o *AdDomainController) HasHostName() bool {
	if o != nil && o.HostName.IsSet() {
		return true
	}

	return false
}

// SetHostName gets a reference to the given NullableString and assigns it to the HostName field.
func (o *AdDomainController) SetHostName(v string) {
	o.HostName.Set(&v)
}
// SetHostNameNil sets the value for HostName to be an explicit nil
func (o *AdDomainController) SetHostNameNil() {
	o.HostName.Set(nil)
}

// UnsetHostName ensures that no value is present for HostName, not even an explicit nil
func (o *AdDomainController) UnsetHostName() {
	o.HostName.Unset()
}

// GetIsGlobalCatalog returns the IsGlobalCatalog field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdDomainController) GetIsGlobalCatalog() bool {
	if o == nil || o.IsGlobalCatalog.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsGlobalCatalog.Get()
}

// GetIsGlobalCatalogOk returns a tuple with the IsGlobalCatalog field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdDomainController) GetIsGlobalCatalogOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsGlobalCatalog.Get(), o.IsGlobalCatalog.IsSet()
}

// HasIsGlobalCatalog returns a boolean if a field has been set.
func (o *AdDomainController) HasIsGlobalCatalog() bool {
	if o != nil && o.IsGlobalCatalog.IsSet() {
		return true
	}

	return false
}

// SetIsGlobalCatalog gets a reference to the given NullableBool and assigns it to the IsGlobalCatalog field.
func (o *AdDomainController) SetIsGlobalCatalog(v bool) {
	o.IsGlobalCatalog.Set(&v)
}
// SetIsGlobalCatalogNil sets the value for IsGlobalCatalog to be an explicit nil
func (o *AdDomainController) SetIsGlobalCatalogNil() {
	o.IsGlobalCatalog.Set(nil)
}

// UnsetIsGlobalCatalog ensures that no value is present for IsGlobalCatalog, not even an explicit nil
func (o *AdDomainController) UnsetIsGlobalCatalog() {
	o.IsGlobalCatalog.Unset()
}

// GetIsReadOnly returns the IsReadOnly field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdDomainController) GetIsReadOnly() bool {
	if o == nil || o.IsReadOnly.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsReadOnly.Get()
}

// GetIsReadOnlyOk returns a tuple with the IsReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdDomainController) GetIsReadOnlyOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsReadOnly.Get(), o.IsReadOnly.IsSet()
}

// HasIsReadOnly returns a boolean if a field has been set.
func (o *AdDomainController) HasIsReadOnly() bool {
	if o != nil && o.IsReadOnly.IsSet() {
		return true
	}

	return false
}

// SetIsReadOnly gets a reference to the given NullableBool and assigns it to the IsReadOnly field.
func (o *AdDomainController) SetIsReadOnly(v bool) {
	o.IsReadOnly.Set(&v)
}
// SetIsReadOnlyNil sets the value for IsReadOnly to be an explicit nil
func (o *AdDomainController) SetIsReadOnlyNil() {
	o.IsReadOnly.Set(nil)
}

// UnsetIsReadOnly ensures that no value is present for IsReadOnly, not even an explicit nil
func (o *AdDomainController) UnsetIsReadOnly() {
	o.IsReadOnly.Unset()
}

// GetUtcOffsetMin returns the UtcOffsetMin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdDomainController) GetUtcOffsetMin() int32 {
	if o == nil || o.UtcOffsetMin.Get() == nil {
		var ret int32
		return ret
	}
	return *o.UtcOffsetMin.Get()
}

// GetUtcOffsetMinOk returns a tuple with the UtcOffsetMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdDomainController) GetUtcOffsetMinOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UtcOffsetMin.Get(), o.UtcOffsetMin.IsSet()
}

// HasUtcOffsetMin returns a boolean if a field has been set.
func (o *AdDomainController) HasUtcOffsetMin() bool {
	if o != nil && o.UtcOffsetMin.IsSet() {
		return true
	}

	return false
}

// SetUtcOffsetMin gets a reference to the given NullableInt32 and assigns it to the UtcOffsetMin field.
func (o *AdDomainController) SetUtcOffsetMin(v int32) {
	o.UtcOffsetMin.Set(&v)
}
// SetUtcOffsetMinNil sets the value for UtcOffsetMin to be an explicit nil
func (o *AdDomainController) SetUtcOffsetMinNil() {
	o.UtcOffsetMin.Set(nil)
}

// UnsetUtcOffsetMin ensures that no value is present for UtcOffsetMin, not even an explicit nil
func (o *AdDomainController) UnsetUtcOffsetMin() {
	o.UtcOffsetMin.Unset()
}

func (o AdDomainController) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BackupSupported.IsSet() {
		toSerialize["backupSupported"] = o.BackupSupported.Get()
	}
	if o.BackupUnsupportedReasons != nil {
		toSerialize["backupUnsupportedReasons"] = o.BackupUnsupportedReasons
	}
	if o.Domain != nil {
		toSerialize["domain"] = o.Domain
	}
	if o.HostName.IsSet() {
		toSerialize["hostName"] = o.HostName.Get()
	}
	if o.IsGlobalCatalog.IsSet() {
		toSerialize["isGlobalCatalog"] = o.IsGlobalCatalog.Get()
	}
	if o.IsReadOnly.IsSet() {
		toSerialize["isReadOnly"] = o.IsReadOnly.Get()
	}
	if o.UtcOffsetMin.IsSet() {
		toSerialize["utcOffsetMin"] = o.UtcOffsetMin.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAdDomainController struct {
	value *AdDomainController
	isSet bool
}

func (v NullableAdDomainController) Get() *AdDomainController {
	return v.value
}

func (v *NullableAdDomainController) Set(val *AdDomainController) {
	v.value = val
	v.isSet = true
}

func (v NullableAdDomainController) IsSet() bool {
	return v.isSet
}

func (v *NullableAdDomainController) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdDomainController(val *AdDomainController) *NullableAdDomainController {
	return &NullableAdDomainController{value: val, isSet: true}
}

func (v NullableAdDomainController) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdDomainController) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


