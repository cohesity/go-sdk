/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// RestoreEnvStats Specifies the aggregated statistics for restores of a specific environment type.
type RestoreEnvStats struct {
	// Specifies the environment.
	Environment NullableString `json:"environment,omitempty"`
	ObjectCount NullableInt64 `json:"objectCount,omitempty"`
	TotalBytes NullableInt64 `json:"totalBytes,omitempty"`
}

// NewRestoreEnvStats instantiates a new RestoreEnvStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreEnvStats() *RestoreEnvStats {
	this := RestoreEnvStats{}
	return &this
}

// NewRestoreEnvStatsWithDefaults instantiates a new RestoreEnvStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreEnvStatsWithDefaults() *RestoreEnvStats {
	this := RestoreEnvStats{}
	return &this
}

// GetEnvironment returns the Environment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreEnvStats) GetEnvironment() string {
	if o == nil || o.Environment.Get() == nil {
		var ret string
		return ret
	}
	return *o.Environment.Get()
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreEnvStats) GetEnvironmentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Environment.Get(), o.Environment.IsSet()
}

// HasEnvironment returns a boolean if a field has been set.
func (o *RestoreEnvStats) HasEnvironment() bool {
	if o != nil && o.Environment.IsSet() {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given NullableString and assigns it to the Environment field.
func (o *RestoreEnvStats) SetEnvironment(v string) {
	o.Environment.Set(&v)
}
// SetEnvironmentNil sets the value for Environment to be an explicit nil
func (o *RestoreEnvStats) SetEnvironmentNil() {
	o.Environment.Set(nil)
}

// UnsetEnvironment ensures that no value is present for Environment, not even an explicit nil
func (o *RestoreEnvStats) UnsetEnvironment() {
	o.Environment.Unset()
}

// GetObjectCount returns the ObjectCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreEnvStats) GetObjectCount() int64 {
	if o == nil || o.ObjectCount.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ObjectCount.Get()
}

// GetObjectCountOk returns a tuple with the ObjectCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreEnvStats) GetObjectCountOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ObjectCount.Get(), o.ObjectCount.IsSet()
}

// HasObjectCount returns a boolean if a field has been set.
func (o *RestoreEnvStats) HasObjectCount() bool {
	if o != nil && o.ObjectCount.IsSet() {
		return true
	}

	return false
}

// SetObjectCount gets a reference to the given NullableInt64 and assigns it to the ObjectCount field.
func (o *RestoreEnvStats) SetObjectCount(v int64) {
	o.ObjectCount.Set(&v)
}
// SetObjectCountNil sets the value for ObjectCount to be an explicit nil
func (o *RestoreEnvStats) SetObjectCountNil() {
	o.ObjectCount.Set(nil)
}

// UnsetObjectCount ensures that no value is present for ObjectCount, not even an explicit nil
func (o *RestoreEnvStats) UnsetObjectCount() {
	o.ObjectCount.Unset()
}

// GetTotalBytes returns the TotalBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreEnvStats) GetTotalBytes() int64 {
	if o == nil || o.TotalBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TotalBytes.Get()
}

// GetTotalBytesOk returns a tuple with the TotalBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreEnvStats) GetTotalBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TotalBytes.Get(), o.TotalBytes.IsSet()
}

// HasTotalBytes returns a boolean if a field has been set.
func (o *RestoreEnvStats) HasTotalBytes() bool {
	if o != nil && o.TotalBytes.IsSet() {
		return true
	}

	return false
}

// SetTotalBytes gets a reference to the given NullableInt64 and assigns it to the TotalBytes field.
func (o *RestoreEnvStats) SetTotalBytes(v int64) {
	o.TotalBytes.Set(&v)
}
// SetTotalBytesNil sets the value for TotalBytes to be an explicit nil
func (o *RestoreEnvStats) SetTotalBytesNil() {
	o.TotalBytes.Set(nil)
}

// UnsetTotalBytes ensures that no value is present for TotalBytes, not even an explicit nil
func (o *RestoreEnvStats) UnsetTotalBytes() {
	o.TotalBytes.Unset()
}

func (o RestoreEnvStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Environment.IsSet() {
		toSerialize["environment"] = o.Environment.Get()
	}
	if o.ObjectCount.IsSet() {
		toSerialize["objectCount"] = o.ObjectCount.Get()
	}
	if o.TotalBytes.IsSet() {
		toSerialize["totalBytes"] = o.TotalBytes.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRestoreEnvStats struct {
	value *RestoreEnvStats
	isSet bool
}

func (v NullableRestoreEnvStats) Get() *RestoreEnvStats {
	return v.value
}

func (v *NullableRestoreEnvStats) Set(val *RestoreEnvStats) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreEnvStats) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreEnvStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreEnvStats(val *RestoreEnvStats) *NullableRestoreEnvStats {
	return &NullableRestoreEnvStats{value: val, isSet: true}
}

func (v NullableRestoreEnvStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreEnvStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


