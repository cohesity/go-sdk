/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ViewParams struct for ViewParams
type ViewParams struct {
	// List of external client subnets from where requests will be received for the new view.
	ClientSubnetWhitelistVec []ClusterConfigProtoSubnet `json:"clientSubnetWhitelistVec,omitempty"`
	// Whether to disable NFS access in the new view.
	DisableNfsAccess NullableBool `json:"disableNfsAccess,omitempty"`
	ProtocolAccessInfo *ViewIdMappingProtoProtocolAccessInfo `json:"protocolAccessInfo,omitempty"`
	// The qos mappings (if any) for the new view.
	QosMappingVec []ClusterConfigProtoQoSMapping `json:"qosMappingVec,omitempty"`
	StoragePolicyOverride *ClusterConfigProtoStoragePolicyOverride `json:"storagePolicyOverride,omitempty"`
	// The description to be applied to the new view.
	ViewDescription NullableString `json:"viewDescription,omitempty"`
	// This value 'worm_lock_expiry_usecs' if specified will be set on the cloned view. This guarantees that the cloned view cannot be removed till the specified timestamp has reached. NOTE: If this is specified the clone view will be marked as immutable.
	WormLockExpiryUsecs NullableInt64 `json:"wormLockExpiryUsecs,omitempty"`
}

// NewViewParams instantiates a new ViewParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewParams() *ViewParams {
	this := ViewParams{}
	return &this
}

// NewViewParamsWithDefaults instantiates a new ViewParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewParamsWithDefaults() *ViewParams {
	this := ViewParams{}
	return &this
}

// GetClientSubnetWhitelistVec returns the ClientSubnetWhitelistVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewParams) GetClientSubnetWhitelistVec() []ClusterConfigProtoSubnet {
	if o == nil  {
		var ret []ClusterConfigProtoSubnet
		return ret
	}
	return o.ClientSubnetWhitelistVec
}

// GetClientSubnetWhitelistVecOk returns a tuple with the ClientSubnetWhitelistVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewParams) GetClientSubnetWhitelistVecOk() (*[]ClusterConfigProtoSubnet, bool) {
	if o == nil || o.ClientSubnetWhitelistVec == nil {
		return nil, false
	}
	return &o.ClientSubnetWhitelistVec, true
}

// HasClientSubnetWhitelistVec returns a boolean if a field has been set.
func (o *ViewParams) HasClientSubnetWhitelistVec() bool {
	if o != nil && o.ClientSubnetWhitelistVec != nil {
		return true
	}

	return false
}

// SetClientSubnetWhitelistVec gets a reference to the given []ClusterConfigProtoSubnet and assigns it to the ClientSubnetWhitelistVec field.
func (o *ViewParams) SetClientSubnetWhitelistVec(v []ClusterConfigProtoSubnet) {
	o.ClientSubnetWhitelistVec = v
}

// GetDisableNfsAccess returns the DisableNfsAccess field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewParams) GetDisableNfsAccess() bool {
	if o == nil || o.DisableNfsAccess.Get() == nil {
		var ret bool
		return ret
	}
	return *o.DisableNfsAccess.Get()
}

// GetDisableNfsAccessOk returns a tuple with the DisableNfsAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewParams) GetDisableNfsAccessOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisableNfsAccess.Get(), o.DisableNfsAccess.IsSet()
}

// HasDisableNfsAccess returns a boolean if a field has been set.
func (o *ViewParams) HasDisableNfsAccess() bool {
	if o != nil && o.DisableNfsAccess.IsSet() {
		return true
	}

	return false
}

// SetDisableNfsAccess gets a reference to the given NullableBool and assigns it to the DisableNfsAccess field.
func (o *ViewParams) SetDisableNfsAccess(v bool) {
	o.DisableNfsAccess.Set(&v)
}
// SetDisableNfsAccessNil sets the value for DisableNfsAccess to be an explicit nil
func (o *ViewParams) SetDisableNfsAccessNil() {
	o.DisableNfsAccess.Set(nil)
}

// UnsetDisableNfsAccess ensures that no value is present for DisableNfsAccess, not even an explicit nil
func (o *ViewParams) UnsetDisableNfsAccess() {
	o.DisableNfsAccess.Unset()
}

// GetProtocolAccessInfo returns the ProtocolAccessInfo field value if set, zero value otherwise.
func (o *ViewParams) GetProtocolAccessInfo() ViewIdMappingProtoProtocolAccessInfo {
	if o == nil || o.ProtocolAccessInfo == nil {
		var ret ViewIdMappingProtoProtocolAccessInfo
		return ret
	}
	return *o.ProtocolAccessInfo
}

// GetProtocolAccessInfoOk returns a tuple with the ProtocolAccessInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewParams) GetProtocolAccessInfoOk() (*ViewIdMappingProtoProtocolAccessInfo, bool) {
	if o == nil || o.ProtocolAccessInfo == nil {
		return nil, false
	}
	return o.ProtocolAccessInfo, true
}

// HasProtocolAccessInfo returns a boolean if a field has been set.
func (o *ViewParams) HasProtocolAccessInfo() bool {
	if o != nil && o.ProtocolAccessInfo != nil {
		return true
	}

	return false
}

// SetProtocolAccessInfo gets a reference to the given ViewIdMappingProtoProtocolAccessInfo and assigns it to the ProtocolAccessInfo field.
func (o *ViewParams) SetProtocolAccessInfo(v ViewIdMappingProtoProtocolAccessInfo) {
	o.ProtocolAccessInfo = &v
}

// GetQosMappingVec returns the QosMappingVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewParams) GetQosMappingVec() []ClusterConfigProtoQoSMapping {
	if o == nil  {
		var ret []ClusterConfigProtoQoSMapping
		return ret
	}
	return o.QosMappingVec
}

// GetQosMappingVecOk returns a tuple with the QosMappingVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewParams) GetQosMappingVecOk() (*[]ClusterConfigProtoQoSMapping, bool) {
	if o == nil || o.QosMappingVec == nil {
		return nil, false
	}
	return &o.QosMappingVec, true
}

// HasQosMappingVec returns a boolean if a field has been set.
func (o *ViewParams) HasQosMappingVec() bool {
	if o != nil && o.QosMappingVec != nil {
		return true
	}

	return false
}

// SetQosMappingVec gets a reference to the given []ClusterConfigProtoQoSMapping and assigns it to the QosMappingVec field.
func (o *ViewParams) SetQosMappingVec(v []ClusterConfigProtoQoSMapping) {
	o.QosMappingVec = v
}

// GetStoragePolicyOverride returns the StoragePolicyOverride field value if set, zero value otherwise.
func (o *ViewParams) GetStoragePolicyOverride() ClusterConfigProtoStoragePolicyOverride {
	if o == nil || o.StoragePolicyOverride == nil {
		var ret ClusterConfigProtoStoragePolicyOverride
		return ret
	}
	return *o.StoragePolicyOverride
}

// GetStoragePolicyOverrideOk returns a tuple with the StoragePolicyOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewParams) GetStoragePolicyOverrideOk() (*ClusterConfigProtoStoragePolicyOverride, bool) {
	if o == nil || o.StoragePolicyOverride == nil {
		return nil, false
	}
	return o.StoragePolicyOverride, true
}

// HasStoragePolicyOverride returns a boolean if a field has been set.
func (o *ViewParams) HasStoragePolicyOverride() bool {
	if o != nil && o.StoragePolicyOverride != nil {
		return true
	}

	return false
}

// SetStoragePolicyOverride gets a reference to the given ClusterConfigProtoStoragePolicyOverride and assigns it to the StoragePolicyOverride field.
func (o *ViewParams) SetStoragePolicyOverride(v ClusterConfigProtoStoragePolicyOverride) {
	o.StoragePolicyOverride = &v
}

// GetViewDescription returns the ViewDescription field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewParams) GetViewDescription() string {
	if o == nil || o.ViewDescription.Get() == nil {
		var ret string
		return ret
	}
	return *o.ViewDescription.Get()
}

// GetViewDescriptionOk returns a tuple with the ViewDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewParams) GetViewDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewDescription.Get(), o.ViewDescription.IsSet()
}

// HasViewDescription returns a boolean if a field has been set.
func (o *ViewParams) HasViewDescription() bool {
	if o != nil && o.ViewDescription.IsSet() {
		return true
	}

	return false
}

// SetViewDescription gets a reference to the given NullableString and assigns it to the ViewDescription field.
func (o *ViewParams) SetViewDescription(v string) {
	o.ViewDescription.Set(&v)
}
// SetViewDescriptionNil sets the value for ViewDescription to be an explicit nil
func (o *ViewParams) SetViewDescriptionNil() {
	o.ViewDescription.Set(nil)
}

// UnsetViewDescription ensures that no value is present for ViewDescription, not even an explicit nil
func (o *ViewParams) UnsetViewDescription() {
	o.ViewDescription.Unset()
}

// GetWormLockExpiryUsecs returns the WormLockExpiryUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewParams) GetWormLockExpiryUsecs() int64 {
	if o == nil || o.WormLockExpiryUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.WormLockExpiryUsecs.Get()
}

// GetWormLockExpiryUsecsOk returns a tuple with the WormLockExpiryUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewParams) GetWormLockExpiryUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.WormLockExpiryUsecs.Get(), o.WormLockExpiryUsecs.IsSet()
}

// HasWormLockExpiryUsecs returns a boolean if a field has been set.
func (o *ViewParams) HasWormLockExpiryUsecs() bool {
	if o != nil && o.WormLockExpiryUsecs.IsSet() {
		return true
	}

	return false
}

// SetWormLockExpiryUsecs gets a reference to the given NullableInt64 and assigns it to the WormLockExpiryUsecs field.
func (o *ViewParams) SetWormLockExpiryUsecs(v int64) {
	o.WormLockExpiryUsecs.Set(&v)
}
// SetWormLockExpiryUsecsNil sets the value for WormLockExpiryUsecs to be an explicit nil
func (o *ViewParams) SetWormLockExpiryUsecsNil() {
	o.WormLockExpiryUsecs.Set(nil)
}

// UnsetWormLockExpiryUsecs ensures that no value is present for WormLockExpiryUsecs, not even an explicit nil
func (o *ViewParams) UnsetWormLockExpiryUsecs() {
	o.WormLockExpiryUsecs.Unset()
}

func (o ViewParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClientSubnetWhitelistVec != nil {
		toSerialize["clientSubnetWhitelistVec"] = o.ClientSubnetWhitelistVec
	}
	if o.DisableNfsAccess.IsSet() {
		toSerialize["disableNfsAccess"] = o.DisableNfsAccess.Get()
	}
	if o.ProtocolAccessInfo != nil {
		toSerialize["protocolAccessInfo"] = o.ProtocolAccessInfo
	}
	if o.QosMappingVec != nil {
		toSerialize["qosMappingVec"] = o.QosMappingVec
	}
	if o.StoragePolicyOverride != nil {
		toSerialize["storagePolicyOverride"] = o.StoragePolicyOverride
	}
	if o.ViewDescription.IsSet() {
		toSerialize["viewDescription"] = o.ViewDescription.Get()
	}
	if o.WormLockExpiryUsecs.IsSet() {
		toSerialize["wormLockExpiryUsecs"] = o.WormLockExpiryUsecs.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableViewParams struct {
	value *ViewParams
	isSet bool
}

func (v NullableViewParams) Get() *ViewParams {
	return v.value
}

func (v *NullableViewParams) Set(val *ViewParams) {
	v.value = val
	v.isSet = true
}

func (v NullableViewParams) IsSet() bool {
	return v.isSet
}

func (v *NullableViewParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewParams(val *ViewParams) *NullableViewParams {
	return &NullableViewParams{value: val, isSet: true}
}

func (v NullableViewParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


