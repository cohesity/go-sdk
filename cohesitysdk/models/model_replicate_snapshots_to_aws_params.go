/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ReplicateSnapshotsToAWSParams Params required to replicate snapshots to another AWS source. This is populated for AWS snapshot manager replication.
type ReplicateSnapshotsToAWSParams struct {
	Region *EntityProto `json:"region,omitempty"`
}

// NewReplicateSnapshotsToAWSParams instantiates a new ReplicateSnapshotsToAWSParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplicateSnapshotsToAWSParams() *ReplicateSnapshotsToAWSParams {
	this := ReplicateSnapshotsToAWSParams{}
	return &this
}

// NewReplicateSnapshotsToAWSParamsWithDefaults instantiates a new ReplicateSnapshotsToAWSParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplicateSnapshotsToAWSParamsWithDefaults() *ReplicateSnapshotsToAWSParams {
	this := ReplicateSnapshotsToAWSParams{}
	return &this
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *ReplicateSnapshotsToAWSParams) GetRegion() EntityProto {
	if o == nil || o.Region == nil {
		var ret EntityProto
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicateSnapshotsToAWSParams) GetRegionOk() (*EntityProto, bool) {
	if o == nil || o.Region == nil {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *ReplicateSnapshotsToAWSParams) HasRegion() bool {
	if o != nil && o.Region != nil {
		return true
	}

	return false
}

// SetRegion gets a reference to the given EntityProto and assigns it to the Region field.
func (o *ReplicateSnapshotsToAWSParams) SetRegion(v EntityProto) {
	o.Region = &v
}

func (o ReplicateSnapshotsToAWSParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Region != nil {
		toSerialize["region"] = o.Region
	}
	return json.Marshal(toSerialize)
}

type NullableReplicateSnapshotsToAWSParams struct {
	value *ReplicateSnapshotsToAWSParams
	isSet bool
}

func (v NullableReplicateSnapshotsToAWSParams) Get() *ReplicateSnapshotsToAWSParams {
	return v.value
}

func (v *NullableReplicateSnapshotsToAWSParams) Set(val *ReplicateSnapshotsToAWSParams) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicateSnapshotsToAWSParams) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicateSnapshotsToAWSParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicateSnapshotsToAWSParams(val *ReplicateSnapshotsToAWSParams) *NullableReplicateSnapshotsToAWSParams {
	return &NullableReplicateSnapshotsToAWSParams{value: val, isSet: true}
}

func (v NullableReplicateSnapshotsToAWSParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicateSnapshotsToAWSParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


