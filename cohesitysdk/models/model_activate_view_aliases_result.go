/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ActivateViewAliasesResult Specifies the information of activated alias views created for a view.
type ActivateViewAliasesResult struct {
	// Aliases created for the view. A view alias allows a directory path inside a view to be mounted using the alias name.
	Aliases []ViewAlias `json:"aliases,omitempty"`
}

// NewActivateViewAliasesResult instantiates a new ActivateViewAliasesResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivateViewAliasesResult() *ActivateViewAliasesResult {
	this := ActivateViewAliasesResult{}
	return &this
}

// NewActivateViewAliasesResultWithDefaults instantiates a new ActivateViewAliasesResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivateViewAliasesResultWithDefaults() *ActivateViewAliasesResult {
	this := ActivateViewAliasesResult{}
	return &this
}

// GetAliases returns the Aliases field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActivateViewAliasesResult) GetAliases() []ViewAlias {
	if o == nil  {
		var ret []ViewAlias
		return ret
	}
	return o.Aliases
}

// GetAliasesOk returns a tuple with the Aliases field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActivateViewAliasesResult) GetAliasesOk() (*[]ViewAlias, bool) {
	if o == nil || o.Aliases == nil {
		return nil, false
	}
	return &o.Aliases, true
}

// HasAliases returns a boolean if a field has been set.
func (o *ActivateViewAliasesResult) HasAliases() bool {
	if o != nil && o.Aliases != nil {
		return true
	}

	return false
}

// SetAliases gets a reference to the given []ViewAlias and assigns it to the Aliases field.
func (o *ActivateViewAliasesResult) SetAliases(v []ViewAlias) {
	o.Aliases = v
}

func (o ActivateViewAliasesResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Aliases != nil {
		toSerialize["aliases"] = o.Aliases
	}
	return json.Marshal(toSerialize)
}

type NullableActivateViewAliasesResult struct {
	value *ActivateViewAliasesResult
	isSet bool
}

func (v NullableActivateViewAliasesResult) Get() *ActivateViewAliasesResult {
	return v.value
}

func (v *NullableActivateViewAliasesResult) Set(val *ActivateViewAliasesResult) {
	v.value = val
	v.isSet = true
}

func (v NullableActivateViewAliasesResult) IsSet() bool {
	return v.isSet
}

func (v *NullableActivateViewAliasesResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivateViewAliasesResult(val *ActivateViewAliasesResult) *NullableActivateViewAliasesResult {
	return &NullableActivateViewAliasesResult{value: val, isSet: true}
}

func (v NullableActivateViewAliasesResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivateViewAliasesResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


