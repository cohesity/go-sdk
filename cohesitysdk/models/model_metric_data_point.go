/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// MetricDataPoint Specifies information about a single data point in a time series.
type MetricDataPoint struct {
	Data *ValueData `json:"data,omitempty"`
	// If this is a rolled up data point, following enum denotes the rollup function used for rolling up. For a raw point this enum is not set.
	RollupFunction NullableInt32 `json:"rollupFunction,omitempty"`
	// Specifies a timestamp when the metric data point was captured.
	TimestampMsecs NullableInt64 `json:"timestampMsecs,omitempty"`
}

// NewMetricDataPoint instantiates a new MetricDataPoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricDataPoint() *MetricDataPoint {
	this := MetricDataPoint{}
	return &this
}

// NewMetricDataPointWithDefaults instantiates a new MetricDataPoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricDataPointWithDefaults() *MetricDataPoint {
	this := MetricDataPoint{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *MetricDataPoint) GetData() ValueData {
	if o == nil || o.Data == nil {
		var ret ValueData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricDataPoint) GetDataOk() (*ValueData, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *MetricDataPoint) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given ValueData and assigns it to the Data field.
func (o *MetricDataPoint) SetData(v ValueData) {
	o.Data = &v
}

// GetRollupFunction returns the RollupFunction field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricDataPoint) GetRollupFunction() int32 {
	if o == nil || o.RollupFunction.Get() == nil {
		var ret int32
		return ret
	}
	return *o.RollupFunction.Get()
}

// GetRollupFunctionOk returns a tuple with the RollupFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricDataPoint) GetRollupFunctionOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RollupFunction.Get(), o.RollupFunction.IsSet()
}

// HasRollupFunction returns a boolean if a field has been set.
func (o *MetricDataPoint) HasRollupFunction() bool {
	if o != nil && o.RollupFunction.IsSet() {
		return true
	}

	return false
}

// SetRollupFunction gets a reference to the given NullableInt32 and assigns it to the RollupFunction field.
func (o *MetricDataPoint) SetRollupFunction(v int32) {
	o.RollupFunction.Set(&v)
}
// SetRollupFunctionNil sets the value for RollupFunction to be an explicit nil
func (o *MetricDataPoint) SetRollupFunctionNil() {
	o.RollupFunction.Set(nil)
}

// UnsetRollupFunction ensures that no value is present for RollupFunction, not even an explicit nil
func (o *MetricDataPoint) UnsetRollupFunction() {
	o.RollupFunction.Unset()
}

// GetTimestampMsecs returns the TimestampMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricDataPoint) GetTimestampMsecs() int64 {
	if o == nil || o.TimestampMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TimestampMsecs.Get()
}

// GetTimestampMsecsOk returns a tuple with the TimestampMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricDataPoint) GetTimestampMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TimestampMsecs.Get(), o.TimestampMsecs.IsSet()
}

// HasTimestampMsecs returns a boolean if a field has been set.
func (o *MetricDataPoint) HasTimestampMsecs() bool {
	if o != nil && o.TimestampMsecs.IsSet() {
		return true
	}

	return false
}

// SetTimestampMsecs gets a reference to the given NullableInt64 and assigns it to the TimestampMsecs field.
func (o *MetricDataPoint) SetTimestampMsecs(v int64) {
	o.TimestampMsecs.Set(&v)
}
// SetTimestampMsecsNil sets the value for TimestampMsecs to be an explicit nil
func (o *MetricDataPoint) SetTimestampMsecsNil() {
	o.TimestampMsecs.Set(nil)
}

// UnsetTimestampMsecs ensures that no value is present for TimestampMsecs, not even an explicit nil
func (o *MetricDataPoint) UnsetTimestampMsecs() {
	o.TimestampMsecs.Unset()
}

func (o MetricDataPoint) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.RollupFunction.IsSet() {
		toSerialize["rollupFunction"] = o.RollupFunction.Get()
	}
	if o.TimestampMsecs.IsSet() {
		toSerialize["timestampMsecs"] = o.TimestampMsecs.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMetricDataPoint struct {
	value *MetricDataPoint
	isSet bool
}

func (v NullableMetricDataPoint) Get() *MetricDataPoint {
	return v.value
}

func (v *NullableMetricDataPoint) Set(val *MetricDataPoint) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricDataPoint) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricDataPoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricDataPoint(val *MetricDataPoint) *NullableMetricDataPoint {
	return &NullableMetricDataPoint{value: val, isSet: true}
}

func (v NullableMetricDataPoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricDataPoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


