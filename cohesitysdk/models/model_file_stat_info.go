/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// FileStatInfo struct for FileStatInfo
type FileStatInfo struct {
	// Source inode id metadata for certain adapters e.g. Netapp.
	BackupSourceInodeId NullableInt64 `json:"backupSourceInodeId,omitempty"`
	// If this is a file, the mtime as returned by stat.
	MtimeUsecs NullableInt64 `json:"mtimeUsecs,omitempty"`
	// If this is a file, the size of the file as returned by stat.
	Size NullableInt64 `json:"size,omitempty"`
	// The type of this entity. This field will not be populated for ReadDir results, since the DirEntry already contains the type information.
	Type NullableInt32 `json:"type,omitempty"`
}

// NewFileStatInfo instantiates a new FileStatInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileStatInfo() *FileStatInfo {
	this := FileStatInfo{}
	return &this
}

// NewFileStatInfoWithDefaults instantiates a new FileStatInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileStatInfoWithDefaults() *FileStatInfo {
	this := FileStatInfo{}
	return &this
}

// GetBackupSourceInodeId returns the BackupSourceInodeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileStatInfo) GetBackupSourceInodeId() int64 {
	if o == nil || o.BackupSourceInodeId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.BackupSourceInodeId.Get()
}

// GetBackupSourceInodeIdOk returns a tuple with the BackupSourceInodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileStatInfo) GetBackupSourceInodeIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BackupSourceInodeId.Get(), o.BackupSourceInodeId.IsSet()
}

// HasBackupSourceInodeId returns a boolean if a field has been set.
func (o *FileStatInfo) HasBackupSourceInodeId() bool {
	if o != nil && o.BackupSourceInodeId.IsSet() {
		return true
	}

	return false
}

// SetBackupSourceInodeId gets a reference to the given NullableInt64 and assigns it to the BackupSourceInodeId field.
func (o *FileStatInfo) SetBackupSourceInodeId(v int64) {
	o.BackupSourceInodeId.Set(&v)
}
// SetBackupSourceInodeIdNil sets the value for BackupSourceInodeId to be an explicit nil
func (o *FileStatInfo) SetBackupSourceInodeIdNil() {
	o.BackupSourceInodeId.Set(nil)
}

// UnsetBackupSourceInodeId ensures that no value is present for BackupSourceInodeId, not even an explicit nil
func (o *FileStatInfo) UnsetBackupSourceInodeId() {
	o.BackupSourceInodeId.Unset()
}

// GetMtimeUsecs returns the MtimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileStatInfo) GetMtimeUsecs() int64 {
	if o == nil || o.MtimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.MtimeUsecs.Get()
}

// GetMtimeUsecsOk returns a tuple with the MtimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileStatInfo) GetMtimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MtimeUsecs.Get(), o.MtimeUsecs.IsSet()
}

// HasMtimeUsecs returns a boolean if a field has been set.
func (o *FileStatInfo) HasMtimeUsecs() bool {
	if o != nil && o.MtimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetMtimeUsecs gets a reference to the given NullableInt64 and assigns it to the MtimeUsecs field.
func (o *FileStatInfo) SetMtimeUsecs(v int64) {
	o.MtimeUsecs.Set(&v)
}
// SetMtimeUsecsNil sets the value for MtimeUsecs to be an explicit nil
func (o *FileStatInfo) SetMtimeUsecsNil() {
	o.MtimeUsecs.Set(nil)
}

// UnsetMtimeUsecs ensures that no value is present for MtimeUsecs, not even an explicit nil
func (o *FileStatInfo) UnsetMtimeUsecs() {
	o.MtimeUsecs.Unset()
}

// GetSize returns the Size field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileStatInfo) GetSize() int64 {
	if o == nil || o.Size.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Size.Get()
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileStatInfo) GetSizeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Size.Get(), o.Size.IsSet()
}

// HasSize returns a boolean if a field has been set.
func (o *FileStatInfo) HasSize() bool {
	if o != nil && o.Size.IsSet() {
		return true
	}

	return false
}

// SetSize gets a reference to the given NullableInt64 and assigns it to the Size field.
func (o *FileStatInfo) SetSize(v int64) {
	o.Size.Set(&v)
}
// SetSizeNil sets the value for Size to be an explicit nil
func (o *FileStatInfo) SetSizeNil() {
	o.Size.Set(nil)
}

// UnsetSize ensures that no value is present for Size, not even an explicit nil
func (o *FileStatInfo) UnsetSize() {
	o.Size.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileStatInfo) GetType() int32 {
	if o == nil || o.Type.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileStatInfo) GetTypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *FileStatInfo) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableInt32 and assigns it to the Type field.
func (o *FileStatInfo) SetType(v int32) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *FileStatInfo) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *FileStatInfo) UnsetType() {
	o.Type.Unset()
}

func (o FileStatInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BackupSourceInodeId.IsSet() {
		toSerialize["backupSourceInodeId"] = o.BackupSourceInodeId.Get()
	}
	if o.MtimeUsecs.IsSet() {
		toSerialize["mtimeUsecs"] = o.MtimeUsecs.Get()
	}
	if o.Size.IsSet() {
		toSerialize["size"] = o.Size.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableFileStatInfo struct {
	value *FileStatInfo
	isSet bool
}

func (v NullableFileStatInfo) Get() *FileStatInfo {
	return v.value
}

func (v *NullableFileStatInfo) Set(val *FileStatInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableFileStatInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableFileStatInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileStatInfo(val *FileStatInfo) *NullableFileStatInfo {
	return &NullableFileStatInfo{value: val, isSet: true}
}

func (v NullableFileStatInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileStatInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


