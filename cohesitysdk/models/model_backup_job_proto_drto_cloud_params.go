/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// BackupJobProtoDRToCloudParams A Proto needed in case objects backed up by this job need to DR to cloud. \"Fail over\" signifies the mechanism to move the workload to cloud.
type BackupJobProtoDRToCloudParams struct {
	// Whether the objects in this job will be failed over to cloud. In case of VMs, we need to fetch information about the logical volumes present on the VM. Magneto might fail backup of a VM in case volume information can not be fetched (maybe because the agent is not installed or if the VM is turned off etc.).  The VM will be backed up using the physical agent when it is running in the cloud. We might choose to backup the VM in the cloud using native API at a later point.  This flag makes sense when configuring a job to backup on-prem VMs.
	NeedToFailOver NullableBool `json:"needToFailOver,omitempty"`
}

// NewBackupJobProtoDRToCloudParams instantiates a new BackupJobProtoDRToCloudParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupJobProtoDRToCloudParams() *BackupJobProtoDRToCloudParams {
	this := BackupJobProtoDRToCloudParams{}
	return &this
}

// NewBackupJobProtoDRToCloudParamsWithDefaults instantiates a new BackupJobProtoDRToCloudParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupJobProtoDRToCloudParamsWithDefaults() *BackupJobProtoDRToCloudParams {
	this := BackupJobProtoDRToCloudParams{}
	return &this
}

// GetNeedToFailOver returns the NeedToFailOver field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupJobProtoDRToCloudParams) GetNeedToFailOver() bool {
	if o == nil || o.NeedToFailOver.Get() == nil {
		var ret bool
		return ret
	}
	return *o.NeedToFailOver.Get()
}

// GetNeedToFailOverOk returns a tuple with the NeedToFailOver field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupJobProtoDRToCloudParams) GetNeedToFailOverOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NeedToFailOver.Get(), o.NeedToFailOver.IsSet()
}

// HasNeedToFailOver returns a boolean if a field has been set.
func (o *BackupJobProtoDRToCloudParams) HasNeedToFailOver() bool {
	if o != nil && o.NeedToFailOver.IsSet() {
		return true
	}

	return false
}

// SetNeedToFailOver gets a reference to the given NullableBool and assigns it to the NeedToFailOver field.
func (o *BackupJobProtoDRToCloudParams) SetNeedToFailOver(v bool) {
	o.NeedToFailOver.Set(&v)
}
// SetNeedToFailOverNil sets the value for NeedToFailOver to be an explicit nil
func (o *BackupJobProtoDRToCloudParams) SetNeedToFailOverNil() {
	o.NeedToFailOver.Set(nil)
}

// UnsetNeedToFailOver ensures that no value is present for NeedToFailOver, not even an explicit nil
func (o *BackupJobProtoDRToCloudParams) UnsetNeedToFailOver() {
	o.NeedToFailOver.Unset()
}

func (o BackupJobProtoDRToCloudParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NeedToFailOver.IsSet() {
		toSerialize["needToFailOver"] = o.NeedToFailOver.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableBackupJobProtoDRToCloudParams struct {
	value *BackupJobProtoDRToCloudParams
	isSet bool
}

func (v NullableBackupJobProtoDRToCloudParams) Get() *BackupJobProtoDRToCloudParams {
	return v.value
}

func (v *NullableBackupJobProtoDRToCloudParams) Set(val *BackupJobProtoDRToCloudParams) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupJobProtoDRToCloudParams) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupJobProtoDRToCloudParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupJobProtoDRToCloudParams(val *BackupJobProtoDRToCloudParams) *NullableBackupJobProtoDRToCloudParams {
	return &NullableBackupJobProtoDRToCloudParams{value: val, isSet: true}
}

func (v NullableBackupJobProtoDRToCloudParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupJobProtoDRToCloudParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


