/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// EntitySchemaProtoGranularity Rolling up or Down sampling is performed on timeseries data to reduce space usage by timeseries. Rollup Granularity is defined per entity schema but rollup function is not defined. Instead we create rolledup values for all the rollup functions.
type EntitySchemaProtoGranularity struct {
	// Defines the rollup interval or a bucket size. All data points within one time bucket are rolled up to one summary data point using the defined rollup function. For example, say, raw metric is published at ~30 secs granularity. To generate a hourly or a daily summary time series, client can define rolled up metrics having interval 3600 secs and 86400 secs respectively.
	RollupIntervalSecs NullableInt32 `json:"rollupIntervalSecs,omitempty"`
	// Defines the duration for which the rolled up data is to be stored. Once the lifespan has elapsed, expired data is garbage collected.
	TimeToLiveSecs NullableInt64 `json:"timeToLiveSecs,omitempty"`
}

// NewEntitySchemaProtoGranularity instantiates a new EntitySchemaProtoGranularity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntitySchemaProtoGranularity() *EntitySchemaProtoGranularity {
	this := EntitySchemaProtoGranularity{}
	return &this
}

// NewEntitySchemaProtoGranularityWithDefaults instantiates a new EntitySchemaProtoGranularity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntitySchemaProtoGranularityWithDefaults() *EntitySchemaProtoGranularity {
	this := EntitySchemaProtoGranularity{}
	return &this
}

// GetRollupIntervalSecs returns the RollupIntervalSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EntitySchemaProtoGranularity) GetRollupIntervalSecs() int32 {
	if o == nil || o.RollupIntervalSecs.Get() == nil {
		var ret int32
		return ret
	}
	return *o.RollupIntervalSecs.Get()
}

// GetRollupIntervalSecsOk returns a tuple with the RollupIntervalSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EntitySchemaProtoGranularity) GetRollupIntervalSecsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RollupIntervalSecs.Get(), o.RollupIntervalSecs.IsSet()
}

// HasRollupIntervalSecs returns a boolean if a field has been set.
func (o *EntitySchemaProtoGranularity) HasRollupIntervalSecs() bool {
	if o != nil && o.RollupIntervalSecs.IsSet() {
		return true
	}

	return false
}

// SetRollupIntervalSecs gets a reference to the given NullableInt32 and assigns it to the RollupIntervalSecs field.
func (o *EntitySchemaProtoGranularity) SetRollupIntervalSecs(v int32) {
	o.RollupIntervalSecs.Set(&v)
}
// SetRollupIntervalSecsNil sets the value for RollupIntervalSecs to be an explicit nil
func (o *EntitySchemaProtoGranularity) SetRollupIntervalSecsNil() {
	o.RollupIntervalSecs.Set(nil)
}

// UnsetRollupIntervalSecs ensures that no value is present for RollupIntervalSecs, not even an explicit nil
func (o *EntitySchemaProtoGranularity) UnsetRollupIntervalSecs() {
	o.RollupIntervalSecs.Unset()
}

// GetTimeToLiveSecs returns the TimeToLiveSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EntitySchemaProtoGranularity) GetTimeToLiveSecs() int64 {
	if o == nil || o.TimeToLiveSecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TimeToLiveSecs.Get()
}

// GetTimeToLiveSecsOk returns a tuple with the TimeToLiveSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EntitySchemaProtoGranularity) GetTimeToLiveSecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TimeToLiveSecs.Get(), o.TimeToLiveSecs.IsSet()
}

// HasTimeToLiveSecs returns a boolean if a field has been set.
func (o *EntitySchemaProtoGranularity) HasTimeToLiveSecs() bool {
	if o != nil && o.TimeToLiveSecs.IsSet() {
		return true
	}

	return false
}

// SetTimeToLiveSecs gets a reference to the given NullableInt64 and assigns it to the TimeToLiveSecs field.
func (o *EntitySchemaProtoGranularity) SetTimeToLiveSecs(v int64) {
	o.TimeToLiveSecs.Set(&v)
}
// SetTimeToLiveSecsNil sets the value for TimeToLiveSecs to be an explicit nil
func (o *EntitySchemaProtoGranularity) SetTimeToLiveSecsNil() {
	o.TimeToLiveSecs.Set(nil)
}

// UnsetTimeToLiveSecs ensures that no value is present for TimeToLiveSecs, not even an explicit nil
func (o *EntitySchemaProtoGranularity) UnsetTimeToLiveSecs() {
	o.TimeToLiveSecs.Unset()
}

func (o EntitySchemaProtoGranularity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RollupIntervalSecs.IsSet() {
		toSerialize["rollupIntervalSecs"] = o.RollupIntervalSecs.Get()
	}
	if o.TimeToLiveSecs.IsSet() {
		toSerialize["timeToLiveSecs"] = o.TimeToLiveSecs.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableEntitySchemaProtoGranularity struct {
	value *EntitySchemaProtoGranularity
	isSet bool
}

func (v NullableEntitySchemaProtoGranularity) Get() *EntitySchemaProtoGranularity {
	return v.value
}

func (v *NullableEntitySchemaProtoGranularity) Set(val *EntitySchemaProtoGranularity) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitySchemaProtoGranularity) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitySchemaProtoGranularity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitySchemaProtoGranularity(val *EntitySchemaProtoGranularity) *NullableEntitySchemaProtoGranularity {
	return &NullableEntitySchemaProtoGranularity{value: val, isSet: true}
}

func (v NullableEntitySchemaProtoGranularity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitySchemaProtoGranularity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


