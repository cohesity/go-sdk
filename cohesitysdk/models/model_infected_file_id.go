/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// InfectedFileId Specifies the infected file Identifier. A file is identified with three Ids mentioned in the InfectedFileId definition.
type InfectedFileId struct {
	// Specifies the entity id of the infected file.
	EntityId NullableInt64 `json:"entityId,omitempty"`
	// Specifies the root inode id of the file system that infected file belongs to.
	RootInodeId NullableInt64 `json:"rootInodeId,omitempty"`
	// Specifies the id of the View the infected file belongs to.
	ViewId NullableInt64 `json:"viewId,omitempty"`
}

// NewInfectedFileId instantiates a new InfectedFileId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfectedFileId() *InfectedFileId {
	this := InfectedFileId{}
	return &this
}

// NewInfectedFileIdWithDefaults instantiates a new InfectedFileId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfectedFileIdWithDefaults() *InfectedFileId {
	this := InfectedFileId{}
	return &this
}

// GetEntityId returns the EntityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InfectedFileId) GetEntityId() int64 {
	if o == nil || o.EntityId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.EntityId.Get()
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedFileId) GetEntityIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EntityId.Get(), o.EntityId.IsSet()
}

// HasEntityId returns a boolean if a field has been set.
func (o *InfectedFileId) HasEntityId() bool {
	if o != nil && o.EntityId.IsSet() {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given NullableInt64 and assigns it to the EntityId field.
func (o *InfectedFileId) SetEntityId(v int64) {
	o.EntityId.Set(&v)
}
// SetEntityIdNil sets the value for EntityId to be an explicit nil
func (o *InfectedFileId) SetEntityIdNil() {
	o.EntityId.Set(nil)
}

// UnsetEntityId ensures that no value is present for EntityId, not even an explicit nil
func (o *InfectedFileId) UnsetEntityId() {
	o.EntityId.Unset()
}

// GetRootInodeId returns the RootInodeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InfectedFileId) GetRootInodeId() int64 {
	if o == nil || o.RootInodeId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RootInodeId.Get()
}

// GetRootInodeIdOk returns a tuple with the RootInodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedFileId) GetRootInodeIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RootInodeId.Get(), o.RootInodeId.IsSet()
}

// HasRootInodeId returns a boolean if a field has been set.
func (o *InfectedFileId) HasRootInodeId() bool {
	if o != nil && o.RootInodeId.IsSet() {
		return true
	}

	return false
}

// SetRootInodeId gets a reference to the given NullableInt64 and assigns it to the RootInodeId field.
func (o *InfectedFileId) SetRootInodeId(v int64) {
	o.RootInodeId.Set(&v)
}
// SetRootInodeIdNil sets the value for RootInodeId to be an explicit nil
func (o *InfectedFileId) SetRootInodeIdNil() {
	o.RootInodeId.Set(nil)
}

// UnsetRootInodeId ensures that no value is present for RootInodeId, not even an explicit nil
func (o *InfectedFileId) UnsetRootInodeId() {
	o.RootInodeId.Unset()
}

// GetViewId returns the ViewId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InfectedFileId) GetViewId() int64 {
	if o == nil || o.ViewId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ViewId.Get()
}

// GetViewIdOk returns a tuple with the ViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedFileId) GetViewIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewId.Get(), o.ViewId.IsSet()
}

// HasViewId returns a boolean if a field has been set.
func (o *InfectedFileId) HasViewId() bool {
	if o != nil && o.ViewId.IsSet() {
		return true
	}

	return false
}

// SetViewId gets a reference to the given NullableInt64 and assigns it to the ViewId field.
func (o *InfectedFileId) SetViewId(v int64) {
	o.ViewId.Set(&v)
}
// SetViewIdNil sets the value for ViewId to be an explicit nil
func (o *InfectedFileId) SetViewIdNil() {
	o.ViewId.Set(nil)
}

// UnsetViewId ensures that no value is present for ViewId, not even an explicit nil
func (o *InfectedFileId) UnsetViewId() {
	o.ViewId.Unset()
}

func (o InfectedFileId) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EntityId.IsSet() {
		toSerialize["entityId"] = o.EntityId.Get()
	}
	if o.RootInodeId.IsSet() {
		toSerialize["rootInodeId"] = o.RootInodeId.Get()
	}
	if o.ViewId.IsSet() {
		toSerialize["viewId"] = o.ViewId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableInfectedFileId struct {
	value *InfectedFileId
	isSet bool
}

func (v NullableInfectedFileId) Get() *InfectedFileId {
	return v.value
}

func (v *NullableInfectedFileId) Set(val *InfectedFileId) {
	v.value = val
	v.isSet = true
}

func (v NullableInfectedFileId) IsSet() bool {
	return v.isSet
}

func (v *NullableInfectedFileId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfectedFileId(val *InfectedFileId) *NullableInfectedFileId {
	return &NullableInfectedFileId{value: val, isSet: true}
}

func (v NullableInfectedFileId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfectedFileId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


