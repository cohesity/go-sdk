/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// CloneTaskInfo Parameters for a clone op.
type CloneTaskInfo struct {
	// Name of the recovery task.
	Name NullableString `json:"name,omitempty"`
	// Id of the recovery task.
	TaskId NullableString `json:"taskId,omitempty"`
}

// NewCloneTaskInfo instantiates a new CloneTaskInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloneTaskInfo() *CloneTaskInfo {
	this := CloneTaskInfo{}
	return &this
}

// NewCloneTaskInfoWithDefaults instantiates a new CloneTaskInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloneTaskInfoWithDefaults() *CloneTaskInfo {
	this := CloneTaskInfo{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloneTaskInfo) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloneTaskInfo) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *CloneTaskInfo) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *CloneTaskInfo) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *CloneTaskInfo) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *CloneTaskInfo) UnsetName() {
	o.Name.Unset()
}

// GetTaskId returns the TaskId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloneTaskInfo) GetTaskId() string {
	if o == nil || o.TaskId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TaskId.Get()
}

// GetTaskIdOk returns a tuple with the TaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloneTaskInfo) GetTaskIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TaskId.Get(), o.TaskId.IsSet()
}

// HasTaskId returns a boolean if a field has been set.
func (o *CloneTaskInfo) HasTaskId() bool {
	if o != nil && o.TaskId.IsSet() {
		return true
	}

	return false
}

// SetTaskId gets a reference to the given NullableString and assigns it to the TaskId field.
func (o *CloneTaskInfo) SetTaskId(v string) {
	o.TaskId.Set(&v)
}
// SetTaskIdNil sets the value for TaskId to be an explicit nil
func (o *CloneTaskInfo) SetTaskIdNil() {
	o.TaskId.Set(nil)
}

// UnsetTaskId ensures that no value is present for TaskId, not even an explicit nil
func (o *CloneTaskInfo) UnsetTaskId() {
	o.TaskId.Unset()
}

func (o CloneTaskInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.TaskId.IsSet() {
		toSerialize["taskId"] = o.TaskId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCloneTaskInfo struct {
	value *CloneTaskInfo
	isSet bool
}

func (v NullableCloneTaskInfo) Get() *CloneTaskInfo {
	return v.value
}

func (v *NullableCloneTaskInfo) Set(val *CloneTaskInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCloneTaskInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCloneTaskInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloneTaskInfo(val *CloneTaskInfo) *NullableCloneTaskInfo {
	return &NullableCloneTaskInfo{value: val, isSet: true}
}

func (v NullableCloneTaskInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloneTaskInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


