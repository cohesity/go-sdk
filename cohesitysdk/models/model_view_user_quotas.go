/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ViewUserQuotas Specifies the Result parameters for all user quotas of a view.
type ViewUserQuotas struct {
	// This cookie can be used in the succeeding call to list user quotas and usages to get the next set of user quota overrides. If set to nil, it means that there's no more results that the server could provide.
	Cookie NullableString `json:"cookie,omitempty"`
	// The quota and usage information for a user in all his views.
	QuotaAndUsageInAllViews []QuotaAndUsageInView `json:"quotaAndUsageInAllViews,omitempty"`
	SummaryForUser *UserQuotaSummaryForUser `json:"summaryForUser,omitempty"`
	SummaryForView *UserQuotaSummaryForView `json:"summaryForView,omitempty"`
	UserQuotaSettings *UserQuotaSettings `json:"userQuotaSettings,omitempty"`
	// The list of user quota policies/overrides and usages.
	UsersQuotaAndUsage []UserQuotaAndUsage `json:"usersQuotaAndUsage,omitempty"`
}

// NewViewUserQuotas instantiates a new ViewUserQuotas object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewUserQuotas() *ViewUserQuotas {
	this := ViewUserQuotas{}
	return &this
}

// NewViewUserQuotasWithDefaults instantiates a new ViewUserQuotas object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewUserQuotasWithDefaults() *ViewUserQuotas {
	this := ViewUserQuotas{}
	return &this
}

// GetCookie returns the Cookie field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewUserQuotas) GetCookie() string {
	if o == nil || o.Cookie.Get() == nil {
		var ret string
		return ret
	}
	return *o.Cookie.Get()
}

// GetCookieOk returns a tuple with the Cookie field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewUserQuotas) GetCookieOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Cookie.Get(), o.Cookie.IsSet()
}

// HasCookie returns a boolean if a field has been set.
func (o *ViewUserQuotas) HasCookie() bool {
	if o != nil && o.Cookie.IsSet() {
		return true
	}

	return false
}

// SetCookie gets a reference to the given NullableString and assigns it to the Cookie field.
func (o *ViewUserQuotas) SetCookie(v string) {
	o.Cookie.Set(&v)
}
// SetCookieNil sets the value for Cookie to be an explicit nil
func (o *ViewUserQuotas) SetCookieNil() {
	o.Cookie.Set(nil)
}

// UnsetCookie ensures that no value is present for Cookie, not even an explicit nil
func (o *ViewUserQuotas) UnsetCookie() {
	o.Cookie.Unset()
}

// GetQuotaAndUsageInAllViews returns the QuotaAndUsageInAllViews field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewUserQuotas) GetQuotaAndUsageInAllViews() []QuotaAndUsageInView {
	if o == nil  {
		var ret []QuotaAndUsageInView
		return ret
	}
	return o.QuotaAndUsageInAllViews
}

// GetQuotaAndUsageInAllViewsOk returns a tuple with the QuotaAndUsageInAllViews field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewUserQuotas) GetQuotaAndUsageInAllViewsOk() (*[]QuotaAndUsageInView, bool) {
	if o == nil || o.QuotaAndUsageInAllViews == nil {
		return nil, false
	}
	return &o.QuotaAndUsageInAllViews, true
}

// HasQuotaAndUsageInAllViews returns a boolean if a field has been set.
func (o *ViewUserQuotas) HasQuotaAndUsageInAllViews() bool {
	if o != nil && o.QuotaAndUsageInAllViews != nil {
		return true
	}

	return false
}

// SetQuotaAndUsageInAllViews gets a reference to the given []QuotaAndUsageInView and assigns it to the QuotaAndUsageInAllViews field.
func (o *ViewUserQuotas) SetQuotaAndUsageInAllViews(v []QuotaAndUsageInView) {
	o.QuotaAndUsageInAllViews = v
}

// GetSummaryForUser returns the SummaryForUser field value if set, zero value otherwise.
func (o *ViewUserQuotas) GetSummaryForUser() UserQuotaSummaryForUser {
	if o == nil || o.SummaryForUser == nil {
		var ret UserQuotaSummaryForUser
		return ret
	}
	return *o.SummaryForUser
}

// GetSummaryForUserOk returns a tuple with the SummaryForUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewUserQuotas) GetSummaryForUserOk() (*UserQuotaSummaryForUser, bool) {
	if o == nil || o.SummaryForUser == nil {
		return nil, false
	}
	return o.SummaryForUser, true
}

// HasSummaryForUser returns a boolean if a field has been set.
func (o *ViewUserQuotas) HasSummaryForUser() bool {
	if o != nil && o.SummaryForUser != nil {
		return true
	}

	return false
}

// SetSummaryForUser gets a reference to the given UserQuotaSummaryForUser and assigns it to the SummaryForUser field.
func (o *ViewUserQuotas) SetSummaryForUser(v UserQuotaSummaryForUser) {
	o.SummaryForUser = &v
}

// GetSummaryForView returns the SummaryForView field value if set, zero value otherwise.
func (o *ViewUserQuotas) GetSummaryForView() UserQuotaSummaryForView {
	if o == nil || o.SummaryForView == nil {
		var ret UserQuotaSummaryForView
		return ret
	}
	return *o.SummaryForView
}

// GetSummaryForViewOk returns a tuple with the SummaryForView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewUserQuotas) GetSummaryForViewOk() (*UserQuotaSummaryForView, bool) {
	if o == nil || o.SummaryForView == nil {
		return nil, false
	}
	return o.SummaryForView, true
}

// HasSummaryForView returns a boolean if a field has been set.
func (o *ViewUserQuotas) HasSummaryForView() bool {
	if o != nil && o.SummaryForView != nil {
		return true
	}

	return false
}

// SetSummaryForView gets a reference to the given UserQuotaSummaryForView and assigns it to the SummaryForView field.
func (o *ViewUserQuotas) SetSummaryForView(v UserQuotaSummaryForView) {
	o.SummaryForView = &v
}

// GetUserQuotaSettings returns the UserQuotaSettings field value if set, zero value otherwise.
func (o *ViewUserQuotas) GetUserQuotaSettings() UserQuotaSettings {
	if o == nil || o.UserQuotaSettings == nil {
		var ret UserQuotaSettings
		return ret
	}
	return *o.UserQuotaSettings
}

// GetUserQuotaSettingsOk returns a tuple with the UserQuotaSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewUserQuotas) GetUserQuotaSettingsOk() (*UserQuotaSettings, bool) {
	if o == nil || o.UserQuotaSettings == nil {
		return nil, false
	}
	return o.UserQuotaSettings, true
}

// HasUserQuotaSettings returns a boolean if a field has been set.
func (o *ViewUserQuotas) HasUserQuotaSettings() bool {
	if o != nil && o.UserQuotaSettings != nil {
		return true
	}

	return false
}

// SetUserQuotaSettings gets a reference to the given UserQuotaSettings and assigns it to the UserQuotaSettings field.
func (o *ViewUserQuotas) SetUserQuotaSettings(v UserQuotaSettings) {
	o.UserQuotaSettings = &v
}

// GetUsersQuotaAndUsage returns the UsersQuotaAndUsage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewUserQuotas) GetUsersQuotaAndUsage() []UserQuotaAndUsage {
	if o == nil  {
		var ret []UserQuotaAndUsage
		return ret
	}
	return o.UsersQuotaAndUsage
}

// GetUsersQuotaAndUsageOk returns a tuple with the UsersQuotaAndUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewUserQuotas) GetUsersQuotaAndUsageOk() (*[]UserQuotaAndUsage, bool) {
	if o == nil || o.UsersQuotaAndUsage == nil {
		return nil, false
	}
	return &o.UsersQuotaAndUsage, true
}

// HasUsersQuotaAndUsage returns a boolean if a field has been set.
func (o *ViewUserQuotas) HasUsersQuotaAndUsage() bool {
	if o != nil && o.UsersQuotaAndUsage != nil {
		return true
	}

	return false
}

// SetUsersQuotaAndUsage gets a reference to the given []UserQuotaAndUsage and assigns it to the UsersQuotaAndUsage field.
func (o *ViewUserQuotas) SetUsersQuotaAndUsage(v []UserQuotaAndUsage) {
	o.UsersQuotaAndUsage = v
}

func (o ViewUserQuotas) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Cookie.IsSet() {
		toSerialize["cookie"] = o.Cookie.Get()
	}
	if o.QuotaAndUsageInAllViews != nil {
		toSerialize["quotaAndUsageInAllViews"] = o.QuotaAndUsageInAllViews
	}
	if o.SummaryForUser != nil {
		toSerialize["summaryForUser"] = o.SummaryForUser
	}
	if o.SummaryForView != nil {
		toSerialize["summaryForView"] = o.SummaryForView
	}
	if o.UserQuotaSettings != nil {
		toSerialize["userQuotaSettings"] = o.UserQuotaSettings
	}
	if o.UsersQuotaAndUsage != nil {
		toSerialize["usersQuotaAndUsage"] = o.UsersQuotaAndUsage
	}
	return json.Marshal(toSerialize)
}

type NullableViewUserQuotas struct {
	value *ViewUserQuotas
	isSet bool
}

func (v NullableViewUserQuotas) Get() *ViewUserQuotas {
	return v.value
}

func (v *NullableViewUserQuotas) Set(val *ViewUserQuotas) {
	v.value = val
	v.isSet = true
}

func (v NullableViewUserQuotas) IsSet() bool {
	return v.isSet
}

func (v *NullableViewUserQuotas) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewUserQuotas(val *ViewUserQuotas) *NullableViewUserQuotas {
	return &NullableViewUserQuotas{value: val, isSet: true}
}

func (v NullableViewUserQuotas) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewUserQuotas) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


