/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// DownloadCftResponse struct for DownloadCftResponse
type DownloadCftResponse struct {
	// Specifies the content of the file.
	Content []int32 `json:"content,omitempty"`
	// Specifies the content of the CFT. in: body Specifies the file name of the cloud formation template.
	FileName NullableString `json:"fileName,omitempty"`
}

// NewDownloadCftResponse instantiates a new DownloadCftResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDownloadCftResponse() *DownloadCftResponse {
	this := DownloadCftResponse{}
	return &this
}

// NewDownloadCftResponseWithDefaults instantiates a new DownloadCftResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDownloadCftResponseWithDefaults() *DownloadCftResponse {
	this := DownloadCftResponse{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DownloadCftResponse) GetContent() []int32 {
	if o == nil  {
		var ret []int32
		return ret
	}
	return o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DownloadCftResponse) GetContentOk() (*[]int32, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return &o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *DownloadCftResponse) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given []int32 and assigns it to the Content field.
func (o *DownloadCftResponse) SetContent(v []int32) {
	o.Content = v
}

// GetFileName returns the FileName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DownloadCftResponse) GetFileName() string {
	if o == nil || o.FileName.Get() == nil {
		var ret string
		return ret
	}
	return *o.FileName.Get()
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DownloadCftResponse) GetFileNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FileName.Get(), o.FileName.IsSet()
}

// HasFileName returns a boolean if a field has been set.
func (o *DownloadCftResponse) HasFileName() bool {
	if o != nil && o.FileName.IsSet() {
		return true
	}

	return false
}

// SetFileName gets a reference to the given NullableString and assigns it to the FileName field.
func (o *DownloadCftResponse) SetFileName(v string) {
	o.FileName.Set(&v)
}
// SetFileNameNil sets the value for FileName to be an explicit nil
func (o *DownloadCftResponse) SetFileNameNil() {
	o.FileName.Set(nil)
}

// UnsetFileName ensures that no value is present for FileName, not even an explicit nil
func (o *DownloadCftResponse) UnsetFileName() {
	o.FileName.Unset()
}

func (o DownloadCftResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	if o.FileName.IsSet() {
		toSerialize["fileName"] = o.FileName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDownloadCftResponse struct {
	value *DownloadCftResponse
	isSet bool
}

func (v NullableDownloadCftResponse) Get() *DownloadCftResponse {
	return v.value
}

func (v *NullableDownloadCftResponse) Set(val *DownloadCftResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDownloadCftResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDownloadCftResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDownloadCftResponse(val *DownloadCftResponse) *NullableDownloadCftResponse {
	return &NullableDownloadCftResponse{value: val, isSet: true}
}

func (v NullableDownloadCftResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDownloadCftResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


