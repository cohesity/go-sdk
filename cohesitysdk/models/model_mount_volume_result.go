/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// MountVolumeResult struct for MountVolumeResult
type MountVolumeResult struct {
	Error *ErrorProto `json:"error,omitempty"`
	// Filesystem on this volume.
	FilesystemType NullableString `json:"filesystemType,omitempty"`
	// This is populated with the mount point where the volume corresponding to the newly attached volume is mounted. NOTE: This may not be present in the VM environments if onlining of disks is not requested or if the there was any issue during onlining.
	MountPoint NullableString `json:"mountPoint,omitempty"`
	// This is the name or mount point of the original volume.
	OriginalVolumeName NullableString `json:"originalVolumeName,omitempty"`
}

// NewMountVolumeResult instantiates a new MountVolumeResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMountVolumeResult() *MountVolumeResult {
	this := MountVolumeResult{}
	return &this
}

// NewMountVolumeResultWithDefaults instantiates a new MountVolumeResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMountVolumeResultWithDefaults() *MountVolumeResult {
	this := MountVolumeResult{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *MountVolumeResult) GetError() ErrorProto {
	if o == nil || o.Error == nil {
		var ret ErrorProto
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MountVolumeResult) GetErrorOk() (*ErrorProto, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *MountVolumeResult) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given ErrorProto and assigns it to the Error field.
func (o *MountVolumeResult) SetError(v ErrorProto) {
	o.Error = &v
}

// GetFilesystemType returns the FilesystemType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MountVolumeResult) GetFilesystemType() string {
	if o == nil || o.FilesystemType.Get() == nil {
		var ret string
		return ret
	}
	return *o.FilesystemType.Get()
}

// GetFilesystemTypeOk returns a tuple with the FilesystemType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MountVolumeResult) GetFilesystemTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FilesystemType.Get(), o.FilesystemType.IsSet()
}

// HasFilesystemType returns a boolean if a field has been set.
func (o *MountVolumeResult) HasFilesystemType() bool {
	if o != nil && o.FilesystemType.IsSet() {
		return true
	}

	return false
}

// SetFilesystemType gets a reference to the given NullableString and assigns it to the FilesystemType field.
func (o *MountVolumeResult) SetFilesystemType(v string) {
	o.FilesystemType.Set(&v)
}
// SetFilesystemTypeNil sets the value for FilesystemType to be an explicit nil
func (o *MountVolumeResult) SetFilesystemTypeNil() {
	o.FilesystemType.Set(nil)
}

// UnsetFilesystemType ensures that no value is present for FilesystemType, not even an explicit nil
func (o *MountVolumeResult) UnsetFilesystemType() {
	o.FilesystemType.Unset()
}

// GetMountPoint returns the MountPoint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MountVolumeResult) GetMountPoint() string {
	if o == nil || o.MountPoint.Get() == nil {
		var ret string
		return ret
	}
	return *o.MountPoint.Get()
}

// GetMountPointOk returns a tuple with the MountPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MountVolumeResult) GetMountPointOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MountPoint.Get(), o.MountPoint.IsSet()
}

// HasMountPoint returns a boolean if a field has been set.
func (o *MountVolumeResult) HasMountPoint() bool {
	if o != nil && o.MountPoint.IsSet() {
		return true
	}

	return false
}

// SetMountPoint gets a reference to the given NullableString and assigns it to the MountPoint field.
func (o *MountVolumeResult) SetMountPoint(v string) {
	o.MountPoint.Set(&v)
}
// SetMountPointNil sets the value for MountPoint to be an explicit nil
func (o *MountVolumeResult) SetMountPointNil() {
	o.MountPoint.Set(nil)
}

// UnsetMountPoint ensures that no value is present for MountPoint, not even an explicit nil
func (o *MountVolumeResult) UnsetMountPoint() {
	o.MountPoint.Unset()
}

// GetOriginalVolumeName returns the OriginalVolumeName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MountVolumeResult) GetOriginalVolumeName() string {
	if o == nil || o.OriginalVolumeName.Get() == nil {
		var ret string
		return ret
	}
	return *o.OriginalVolumeName.Get()
}

// GetOriginalVolumeNameOk returns a tuple with the OriginalVolumeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MountVolumeResult) GetOriginalVolumeNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OriginalVolumeName.Get(), o.OriginalVolumeName.IsSet()
}

// HasOriginalVolumeName returns a boolean if a field has been set.
func (o *MountVolumeResult) HasOriginalVolumeName() bool {
	if o != nil && o.OriginalVolumeName.IsSet() {
		return true
	}

	return false
}

// SetOriginalVolumeName gets a reference to the given NullableString and assigns it to the OriginalVolumeName field.
func (o *MountVolumeResult) SetOriginalVolumeName(v string) {
	o.OriginalVolumeName.Set(&v)
}
// SetOriginalVolumeNameNil sets the value for OriginalVolumeName to be an explicit nil
func (o *MountVolumeResult) SetOriginalVolumeNameNil() {
	o.OriginalVolumeName.Set(nil)
}

// UnsetOriginalVolumeName ensures that no value is present for OriginalVolumeName, not even an explicit nil
func (o *MountVolumeResult) UnsetOriginalVolumeName() {
	o.OriginalVolumeName.Unset()
}

func (o MountVolumeResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.FilesystemType.IsSet() {
		toSerialize["filesystemType"] = o.FilesystemType.Get()
	}
	if o.MountPoint.IsSet() {
		toSerialize["mountPoint"] = o.MountPoint.Get()
	}
	if o.OriginalVolumeName.IsSet() {
		toSerialize["originalVolumeName"] = o.OriginalVolumeName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMountVolumeResult struct {
	value *MountVolumeResult
	isSet bool
}

func (v NullableMountVolumeResult) Get() *MountVolumeResult {
	return v.value
}

func (v *NullableMountVolumeResult) Set(val *MountVolumeResult) {
	v.value = val
	v.isSet = true
}

func (v NullableMountVolumeResult) IsSet() bool {
	return v.isSet
}

func (v *NullableMountVolumeResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMountVolumeResult(val *MountVolumeResult) *NullableMountVolumeResult {
	return &NullableMountVolumeResult{value: val, isSet: true}
}

func (v NullableMountVolumeResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMountVolumeResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


