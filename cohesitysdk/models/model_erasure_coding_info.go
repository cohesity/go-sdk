/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ErasureCodingInfo Specifies information for erasure coding.
type ErasureCodingInfo struct {
	// Algorthm used for erasure coding. REED_SOLOMON indicates the algorithm used for erasure coding. LRC indicates the algorithm used for erasure coding.
	Algorithm NullableString `json:"algorithm,omitempty"`
	// Specifies whether Erasure coding is enabled on the Storage Domain (View Box).
	ErasureCodingEnabled NullableBool `json:"erasureCodingEnabled,omitempty"`
	// Specifies if erasure coding should occur inline (as the data is being written). This field is only relevant if erasure coding is enabled.
	InlineErasureCoding NullableBool `json:"inlineErasureCoding,omitempty"`
	// The number of coded stripes.
	NumCodedStripes NullableInt32 `json:"numCodedStripes,omitempty"`
	// The number of stripes containing data.
	NumDataStripes NullableInt32 `json:"numDataStripes,omitempty"`
}

// NewErasureCodingInfo instantiates a new ErasureCodingInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErasureCodingInfo() *ErasureCodingInfo {
	this := ErasureCodingInfo{}
	return &this
}

// NewErasureCodingInfoWithDefaults instantiates a new ErasureCodingInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErasureCodingInfoWithDefaults() *ErasureCodingInfo {
	this := ErasureCodingInfo{}
	return &this
}

// GetAlgorithm returns the Algorithm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ErasureCodingInfo) GetAlgorithm() string {
	if o == nil || o.Algorithm.Get() == nil {
		var ret string
		return ret
	}
	return *o.Algorithm.Get()
}

// GetAlgorithmOk returns a tuple with the Algorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ErasureCodingInfo) GetAlgorithmOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Algorithm.Get(), o.Algorithm.IsSet()
}

// HasAlgorithm returns a boolean if a field has been set.
func (o *ErasureCodingInfo) HasAlgorithm() bool {
	if o != nil && o.Algorithm.IsSet() {
		return true
	}

	return false
}

// SetAlgorithm gets a reference to the given NullableString and assigns it to the Algorithm field.
func (o *ErasureCodingInfo) SetAlgorithm(v string) {
	o.Algorithm.Set(&v)
}
// SetAlgorithmNil sets the value for Algorithm to be an explicit nil
func (o *ErasureCodingInfo) SetAlgorithmNil() {
	o.Algorithm.Set(nil)
}

// UnsetAlgorithm ensures that no value is present for Algorithm, not even an explicit nil
func (o *ErasureCodingInfo) UnsetAlgorithm() {
	o.Algorithm.Unset()
}

// GetErasureCodingEnabled returns the ErasureCodingEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ErasureCodingInfo) GetErasureCodingEnabled() bool {
	if o == nil || o.ErasureCodingEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ErasureCodingEnabled.Get()
}

// GetErasureCodingEnabledOk returns a tuple with the ErasureCodingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ErasureCodingInfo) GetErasureCodingEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ErasureCodingEnabled.Get(), o.ErasureCodingEnabled.IsSet()
}

// HasErasureCodingEnabled returns a boolean if a field has been set.
func (o *ErasureCodingInfo) HasErasureCodingEnabled() bool {
	if o != nil && o.ErasureCodingEnabled.IsSet() {
		return true
	}

	return false
}

// SetErasureCodingEnabled gets a reference to the given NullableBool and assigns it to the ErasureCodingEnabled field.
func (o *ErasureCodingInfo) SetErasureCodingEnabled(v bool) {
	o.ErasureCodingEnabled.Set(&v)
}
// SetErasureCodingEnabledNil sets the value for ErasureCodingEnabled to be an explicit nil
func (o *ErasureCodingInfo) SetErasureCodingEnabledNil() {
	o.ErasureCodingEnabled.Set(nil)
}

// UnsetErasureCodingEnabled ensures that no value is present for ErasureCodingEnabled, not even an explicit nil
func (o *ErasureCodingInfo) UnsetErasureCodingEnabled() {
	o.ErasureCodingEnabled.Unset()
}

// GetInlineErasureCoding returns the InlineErasureCoding field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ErasureCodingInfo) GetInlineErasureCoding() bool {
	if o == nil || o.InlineErasureCoding.Get() == nil {
		var ret bool
		return ret
	}
	return *o.InlineErasureCoding.Get()
}

// GetInlineErasureCodingOk returns a tuple with the InlineErasureCoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ErasureCodingInfo) GetInlineErasureCodingOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InlineErasureCoding.Get(), o.InlineErasureCoding.IsSet()
}

// HasInlineErasureCoding returns a boolean if a field has been set.
func (o *ErasureCodingInfo) HasInlineErasureCoding() bool {
	if o != nil && o.InlineErasureCoding.IsSet() {
		return true
	}

	return false
}

// SetInlineErasureCoding gets a reference to the given NullableBool and assigns it to the InlineErasureCoding field.
func (o *ErasureCodingInfo) SetInlineErasureCoding(v bool) {
	o.InlineErasureCoding.Set(&v)
}
// SetInlineErasureCodingNil sets the value for InlineErasureCoding to be an explicit nil
func (o *ErasureCodingInfo) SetInlineErasureCodingNil() {
	o.InlineErasureCoding.Set(nil)
}

// UnsetInlineErasureCoding ensures that no value is present for InlineErasureCoding, not even an explicit nil
func (o *ErasureCodingInfo) UnsetInlineErasureCoding() {
	o.InlineErasureCoding.Unset()
}

// GetNumCodedStripes returns the NumCodedStripes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ErasureCodingInfo) GetNumCodedStripes() int32 {
	if o == nil || o.NumCodedStripes.Get() == nil {
		var ret int32
		return ret
	}
	return *o.NumCodedStripes.Get()
}

// GetNumCodedStripesOk returns a tuple with the NumCodedStripes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ErasureCodingInfo) GetNumCodedStripesOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumCodedStripes.Get(), o.NumCodedStripes.IsSet()
}

// HasNumCodedStripes returns a boolean if a field has been set.
func (o *ErasureCodingInfo) HasNumCodedStripes() bool {
	if o != nil && o.NumCodedStripes.IsSet() {
		return true
	}

	return false
}

// SetNumCodedStripes gets a reference to the given NullableInt32 and assigns it to the NumCodedStripes field.
func (o *ErasureCodingInfo) SetNumCodedStripes(v int32) {
	o.NumCodedStripes.Set(&v)
}
// SetNumCodedStripesNil sets the value for NumCodedStripes to be an explicit nil
func (o *ErasureCodingInfo) SetNumCodedStripesNil() {
	o.NumCodedStripes.Set(nil)
}

// UnsetNumCodedStripes ensures that no value is present for NumCodedStripes, not even an explicit nil
func (o *ErasureCodingInfo) UnsetNumCodedStripes() {
	o.NumCodedStripes.Unset()
}

// GetNumDataStripes returns the NumDataStripes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ErasureCodingInfo) GetNumDataStripes() int32 {
	if o == nil || o.NumDataStripes.Get() == nil {
		var ret int32
		return ret
	}
	return *o.NumDataStripes.Get()
}

// GetNumDataStripesOk returns a tuple with the NumDataStripes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ErasureCodingInfo) GetNumDataStripesOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumDataStripes.Get(), o.NumDataStripes.IsSet()
}

// HasNumDataStripes returns a boolean if a field has been set.
func (o *ErasureCodingInfo) HasNumDataStripes() bool {
	if o != nil && o.NumDataStripes.IsSet() {
		return true
	}

	return false
}

// SetNumDataStripes gets a reference to the given NullableInt32 and assigns it to the NumDataStripes field.
func (o *ErasureCodingInfo) SetNumDataStripes(v int32) {
	o.NumDataStripes.Set(&v)
}
// SetNumDataStripesNil sets the value for NumDataStripes to be an explicit nil
func (o *ErasureCodingInfo) SetNumDataStripesNil() {
	o.NumDataStripes.Set(nil)
}

// UnsetNumDataStripes ensures that no value is present for NumDataStripes, not even an explicit nil
func (o *ErasureCodingInfo) UnsetNumDataStripes() {
	o.NumDataStripes.Unset()
}

func (o ErasureCodingInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Algorithm.IsSet() {
		toSerialize["algorithm"] = o.Algorithm.Get()
	}
	if o.ErasureCodingEnabled.IsSet() {
		toSerialize["erasureCodingEnabled"] = o.ErasureCodingEnabled.Get()
	}
	if o.InlineErasureCoding.IsSet() {
		toSerialize["inlineErasureCoding"] = o.InlineErasureCoding.Get()
	}
	if o.NumCodedStripes.IsSet() {
		toSerialize["numCodedStripes"] = o.NumCodedStripes.Get()
	}
	if o.NumDataStripes.IsSet() {
		toSerialize["numDataStripes"] = o.NumDataStripes.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableErasureCodingInfo struct {
	value *ErasureCodingInfo
	isSet bool
}

func (v NullableErasureCodingInfo) Get() *ErasureCodingInfo {
	return v.value
}

func (v *NullableErasureCodingInfo) Set(val *ErasureCodingInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableErasureCodingInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableErasureCodingInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErasureCodingInfo(val *ErasureCodingInfo) *NullableErasureCodingInfo {
	return &NullableErasureCodingInfo{value: val, isSet: true}
}

func (v NullableErasureCodingInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErasureCodingInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


