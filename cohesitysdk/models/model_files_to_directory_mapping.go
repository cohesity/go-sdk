/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// FilesToDirectoryMapping struct for FilesToDirectoryMapping
type FilesToDirectoryMapping struct {
	// Source file name. The file name can be a regex matching source files.
	FilePattern NullableString `json:"filePattern,omitempty"`
	// Target directtory for the source file pattern.
	TargetDirectory NullableString `json:"targetDirectory,omitempty"`
}

// NewFilesToDirectoryMapping instantiates a new FilesToDirectoryMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilesToDirectoryMapping() *FilesToDirectoryMapping {
	this := FilesToDirectoryMapping{}
	return &this
}

// NewFilesToDirectoryMappingWithDefaults instantiates a new FilesToDirectoryMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilesToDirectoryMappingWithDefaults() *FilesToDirectoryMapping {
	this := FilesToDirectoryMapping{}
	return &this
}

// GetFilePattern returns the FilePattern field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilesToDirectoryMapping) GetFilePattern() string {
	if o == nil || o.FilePattern.Get() == nil {
		var ret string
		return ret
	}
	return *o.FilePattern.Get()
}

// GetFilePatternOk returns a tuple with the FilePattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesToDirectoryMapping) GetFilePatternOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FilePattern.Get(), o.FilePattern.IsSet()
}

// HasFilePattern returns a boolean if a field has been set.
func (o *FilesToDirectoryMapping) HasFilePattern() bool {
	if o != nil && o.FilePattern.IsSet() {
		return true
	}

	return false
}

// SetFilePattern gets a reference to the given NullableString and assigns it to the FilePattern field.
func (o *FilesToDirectoryMapping) SetFilePattern(v string) {
	o.FilePattern.Set(&v)
}
// SetFilePatternNil sets the value for FilePattern to be an explicit nil
func (o *FilesToDirectoryMapping) SetFilePatternNil() {
	o.FilePattern.Set(nil)
}

// UnsetFilePattern ensures that no value is present for FilePattern, not even an explicit nil
func (o *FilesToDirectoryMapping) UnsetFilePattern() {
	o.FilePattern.Unset()
}

// GetTargetDirectory returns the TargetDirectory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilesToDirectoryMapping) GetTargetDirectory() string {
	if o == nil || o.TargetDirectory.Get() == nil {
		var ret string
		return ret
	}
	return *o.TargetDirectory.Get()
}

// GetTargetDirectoryOk returns a tuple with the TargetDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesToDirectoryMapping) GetTargetDirectoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetDirectory.Get(), o.TargetDirectory.IsSet()
}

// HasTargetDirectory returns a boolean if a field has been set.
func (o *FilesToDirectoryMapping) HasTargetDirectory() bool {
	if o != nil && o.TargetDirectory.IsSet() {
		return true
	}

	return false
}

// SetTargetDirectory gets a reference to the given NullableString and assigns it to the TargetDirectory field.
func (o *FilesToDirectoryMapping) SetTargetDirectory(v string) {
	o.TargetDirectory.Set(&v)
}
// SetTargetDirectoryNil sets the value for TargetDirectory to be an explicit nil
func (o *FilesToDirectoryMapping) SetTargetDirectoryNil() {
	o.TargetDirectory.Set(nil)
}

// UnsetTargetDirectory ensures that no value is present for TargetDirectory, not even an explicit nil
func (o *FilesToDirectoryMapping) UnsetTargetDirectory() {
	o.TargetDirectory.Unset()
}

func (o FilesToDirectoryMapping) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FilePattern.IsSet() {
		toSerialize["filePattern"] = o.FilePattern.Get()
	}
	if o.TargetDirectory.IsSet() {
		toSerialize["targetDirectory"] = o.TargetDirectory.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableFilesToDirectoryMapping struct {
	value *FilesToDirectoryMapping
	isSet bool
}

func (v NullableFilesToDirectoryMapping) Get() *FilesToDirectoryMapping {
	return v.value
}

func (v *NullableFilesToDirectoryMapping) Set(val *FilesToDirectoryMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableFilesToDirectoryMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableFilesToDirectoryMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilesToDirectoryMapping(val *FilesToDirectoryMapping) *NullableFilesToDirectoryMapping {
	return &NullableFilesToDirectoryMapping{value: val, isSet: true}
}

func (v NullableFilesToDirectoryMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilesToDirectoryMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


