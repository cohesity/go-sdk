/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ThrottlingPolicyOverride Specifies throttling policy override for a Datastore in a registered entity.
type ThrottlingPolicyOverride struct {
	// Specifies the Protection Source id of the Datastore.
	DatastoreId NullableInt64 `json:"datastoreId,omitempty"`
	// Specifies the display name of the Datastore.
	DatastoreName NullableString `json:"datastoreName,omitempty"`
	ThrottlingPolicy *ThrottlingPolicyParameters `json:"throttlingPolicy,omitempty"`
}

// NewThrottlingPolicyOverride instantiates a new ThrottlingPolicyOverride object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThrottlingPolicyOverride() *ThrottlingPolicyOverride {
	this := ThrottlingPolicyOverride{}
	return &this
}

// NewThrottlingPolicyOverrideWithDefaults instantiates a new ThrottlingPolicyOverride object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThrottlingPolicyOverrideWithDefaults() *ThrottlingPolicyOverride {
	this := ThrottlingPolicyOverride{}
	return &this
}

// GetDatastoreId returns the DatastoreId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThrottlingPolicyOverride) GetDatastoreId() int64 {
	if o == nil || o.DatastoreId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DatastoreId.Get()
}

// GetDatastoreIdOk returns a tuple with the DatastoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThrottlingPolicyOverride) GetDatastoreIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DatastoreId.Get(), o.DatastoreId.IsSet()
}

// HasDatastoreId returns a boolean if a field has been set.
func (o *ThrottlingPolicyOverride) HasDatastoreId() bool {
	if o != nil && o.DatastoreId.IsSet() {
		return true
	}

	return false
}

// SetDatastoreId gets a reference to the given NullableInt64 and assigns it to the DatastoreId field.
func (o *ThrottlingPolicyOverride) SetDatastoreId(v int64) {
	o.DatastoreId.Set(&v)
}
// SetDatastoreIdNil sets the value for DatastoreId to be an explicit nil
func (o *ThrottlingPolicyOverride) SetDatastoreIdNil() {
	o.DatastoreId.Set(nil)
}

// UnsetDatastoreId ensures that no value is present for DatastoreId, not even an explicit nil
func (o *ThrottlingPolicyOverride) UnsetDatastoreId() {
	o.DatastoreId.Unset()
}

// GetDatastoreName returns the DatastoreName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThrottlingPolicyOverride) GetDatastoreName() string {
	if o == nil || o.DatastoreName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DatastoreName.Get()
}

// GetDatastoreNameOk returns a tuple with the DatastoreName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThrottlingPolicyOverride) GetDatastoreNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DatastoreName.Get(), o.DatastoreName.IsSet()
}

// HasDatastoreName returns a boolean if a field has been set.
func (o *ThrottlingPolicyOverride) HasDatastoreName() bool {
	if o != nil && o.DatastoreName.IsSet() {
		return true
	}

	return false
}

// SetDatastoreName gets a reference to the given NullableString and assigns it to the DatastoreName field.
func (o *ThrottlingPolicyOverride) SetDatastoreName(v string) {
	o.DatastoreName.Set(&v)
}
// SetDatastoreNameNil sets the value for DatastoreName to be an explicit nil
func (o *ThrottlingPolicyOverride) SetDatastoreNameNil() {
	o.DatastoreName.Set(nil)
}

// UnsetDatastoreName ensures that no value is present for DatastoreName, not even an explicit nil
func (o *ThrottlingPolicyOverride) UnsetDatastoreName() {
	o.DatastoreName.Unset()
}

// GetThrottlingPolicy returns the ThrottlingPolicy field value if set, zero value otherwise.
func (o *ThrottlingPolicyOverride) GetThrottlingPolicy() ThrottlingPolicyParameters {
	if o == nil || o.ThrottlingPolicy == nil {
		var ret ThrottlingPolicyParameters
		return ret
	}
	return *o.ThrottlingPolicy
}

// GetThrottlingPolicyOk returns a tuple with the ThrottlingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThrottlingPolicyOverride) GetThrottlingPolicyOk() (*ThrottlingPolicyParameters, bool) {
	if o == nil || o.ThrottlingPolicy == nil {
		return nil, false
	}
	return o.ThrottlingPolicy, true
}

// HasThrottlingPolicy returns a boolean if a field has been set.
func (o *ThrottlingPolicyOverride) HasThrottlingPolicy() bool {
	if o != nil && o.ThrottlingPolicy != nil {
		return true
	}

	return false
}

// SetThrottlingPolicy gets a reference to the given ThrottlingPolicyParameters and assigns it to the ThrottlingPolicy field.
func (o *ThrottlingPolicyOverride) SetThrottlingPolicy(v ThrottlingPolicyParameters) {
	o.ThrottlingPolicy = &v
}

func (o ThrottlingPolicyOverride) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DatastoreId.IsSet() {
		toSerialize["datastoreId"] = o.DatastoreId.Get()
	}
	if o.DatastoreName.IsSet() {
		toSerialize["datastoreName"] = o.DatastoreName.Get()
	}
	if o.ThrottlingPolicy != nil {
		toSerialize["throttlingPolicy"] = o.ThrottlingPolicy
	}
	return json.Marshal(toSerialize)
}

type NullableThrottlingPolicyOverride struct {
	value *ThrottlingPolicyOverride
	isSet bool
}

func (v NullableThrottlingPolicyOverride) Get() *ThrottlingPolicyOverride {
	return v.value
}

func (v *NullableThrottlingPolicyOverride) Set(val *ThrottlingPolicyOverride) {
	v.value = val
	v.isSet = true
}

func (v NullableThrottlingPolicyOverride) IsSet() bool {
	return v.isSet
}

func (v *NullableThrottlingPolicyOverride) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThrottlingPolicyOverride(val *ThrottlingPolicyOverride) *NullableThrottlingPolicyOverride {
	return &NullableThrottlingPolicyOverride{value: val, isSet: true}
}

func (v NullableThrottlingPolicyOverride) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThrottlingPolicyOverride) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


