/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// MonthlyEntitlement struct for MonthlyEntitlement
type MonthlyEntitlement struct {
	FeatureName NullableString `json:"featureName,omitempty"`
	MonthlyAvgEntitlement []int64 `json:"monthlyAvgEntitlement,omitempty"`
}

// NewMonthlyEntitlement instantiates a new MonthlyEntitlement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonthlyEntitlement() *MonthlyEntitlement {
	this := MonthlyEntitlement{}
	return &this
}

// NewMonthlyEntitlementWithDefaults instantiates a new MonthlyEntitlement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonthlyEntitlementWithDefaults() *MonthlyEntitlement {
	this := MonthlyEntitlement{}
	return &this
}

// GetFeatureName returns the FeatureName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MonthlyEntitlement) GetFeatureName() string {
	if o == nil || o.FeatureName.Get() == nil {
		var ret string
		return ret
	}
	return *o.FeatureName.Get()
}

// GetFeatureNameOk returns a tuple with the FeatureName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MonthlyEntitlement) GetFeatureNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FeatureName.Get(), o.FeatureName.IsSet()
}

// HasFeatureName returns a boolean if a field has been set.
func (o *MonthlyEntitlement) HasFeatureName() bool {
	if o != nil && o.FeatureName.IsSet() {
		return true
	}

	return false
}

// SetFeatureName gets a reference to the given NullableString and assigns it to the FeatureName field.
func (o *MonthlyEntitlement) SetFeatureName(v string) {
	o.FeatureName.Set(&v)
}
// SetFeatureNameNil sets the value for FeatureName to be an explicit nil
func (o *MonthlyEntitlement) SetFeatureNameNil() {
	o.FeatureName.Set(nil)
}

// UnsetFeatureName ensures that no value is present for FeatureName, not even an explicit nil
func (o *MonthlyEntitlement) UnsetFeatureName() {
	o.FeatureName.Unset()
}

// GetMonthlyAvgEntitlement returns the MonthlyAvgEntitlement field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MonthlyEntitlement) GetMonthlyAvgEntitlement() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.MonthlyAvgEntitlement
}

// GetMonthlyAvgEntitlementOk returns a tuple with the MonthlyAvgEntitlement field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MonthlyEntitlement) GetMonthlyAvgEntitlementOk() (*[]int64, bool) {
	if o == nil || o.MonthlyAvgEntitlement == nil {
		return nil, false
	}
	return &o.MonthlyAvgEntitlement, true
}

// HasMonthlyAvgEntitlement returns a boolean if a field has been set.
func (o *MonthlyEntitlement) HasMonthlyAvgEntitlement() bool {
	if o != nil && o.MonthlyAvgEntitlement != nil {
		return true
	}

	return false
}

// SetMonthlyAvgEntitlement gets a reference to the given []int64 and assigns it to the MonthlyAvgEntitlement field.
func (o *MonthlyEntitlement) SetMonthlyAvgEntitlement(v []int64) {
	o.MonthlyAvgEntitlement = v
}

func (o MonthlyEntitlement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FeatureName.IsSet() {
		toSerialize["featureName"] = o.FeatureName.Get()
	}
	if o.MonthlyAvgEntitlement != nil {
		toSerialize["monthlyAvgEntitlement"] = o.MonthlyAvgEntitlement
	}
	return json.Marshal(toSerialize)
}

type NullableMonthlyEntitlement struct {
	value *MonthlyEntitlement
	isSet bool
}

func (v NullableMonthlyEntitlement) Get() *MonthlyEntitlement {
	return v.value
}

func (v *NullableMonthlyEntitlement) Set(val *MonthlyEntitlement) {
	v.value = val
	v.isSet = true
}

func (v NullableMonthlyEntitlement) IsSet() bool {
	return v.isSet
}

func (v *NullableMonthlyEntitlement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonthlyEntitlement(val *MonthlyEntitlement) *NullableMonthlyEntitlement {
	return &NullableMonthlyEntitlement{value: val, isSet: true}
}

func (v NullableMonthlyEntitlement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonthlyEntitlement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


