/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// StoragePolicy Specifies the storage options applied to a Storage Domain (View Box).
type StoragePolicy struct {
	// Specifies Whether to support app marker detection. When this is set to true, app markers (like commvault markers) will be removed from data and put in separate chunks. This way deduplication is improved as it is done on data that has no app markers.
	AppMarkerDetection NullableBool `json:"appMarkerDetection,omitempty"`
	// Specifies the vault id assigned for an external Storage Target to facilitate cloud spill.
	CloudSpillVaultId NullableInt64 `json:"cloudSpillVaultId,omitempty"`
	// Specifies the compression setting to be applied to a Storage Domain (View Box). 'kCompressionNone' indicates that data is not compressed. 'kCompressionLow' indicates that data is compressed using LZ4 or Snappy. 'kCompressionHigh' indicates that data is compressed in Gzip.
	CompressionPolicy NullableString `json:"compressionPolicy,omitempty"`
	// Specifies the time in seconds when deduplication and compression of data on the Storage Domain (View Box) starts. If set to 0, deduplication and compression is done inline (as the data is being written). Otherwise, post-process deduplication and compression is done after the specified delay.
	DeduplicateCompressDelaySecs NullableInt32 `json:"deduplicateCompressDelaySecs,omitempty"`
	// Specifies if deduplication is enabled for the Storage Domain (View Box). If deduplication is enabled, the Cohesity Cluster eliminates duplicate blocks of repeating data stored on the Cluster thus reducing the amount of storage space needed to store data.
	DeduplicationEnabled NullableBool `json:"deduplicationEnabled,omitempty"`
	// Specifies the encryption setting for the Storage Domain (View Box). 'kEncryptionNone' indicates the data is not encrypted. 'kEncryptionStrong' indicates the data is encrypted.
	EncryptionPolicy NullableString `json:"encryptionPolicy,omitempty"`
	ErasureCodingInfo *ErasureCodingInfo `json:"erasureCodingInfo,omitempty"`
	// Specifies if compression should occur inline (as the data is being written). This field is only relevant if compression is enabled. If deduplication is set to inline, Cohesity recommends setting compression to inline.
	InlineCompress NullableBool `json:"inlineCompress,omitempty"`
	// Specifies if deduplication should occur inline (as the data is being written). This field is only relevant if deduplication is enabled.
	InlineDeduplicate NullableBool `json:"inlineDeduplicate,omitempty"`
	// Number of disk failures to tolerate. This is an optional field. Default value is 1 for cluster having 3 or more nodes. If erasure coding is not enabled, then this specifies the replication factor for the Storage Domain (View Box). For RF=2, number of failures to tolerate should be specified as 1. If erasure coding is enabled, then this value will be same as number of coded stripes.
	NumFailuresTolerated NullableInt32 `json:"numFailuresTolerated,omitempty"`
	// Number of node failures to tolerate. If NumNodeFailuresTolerated is set to 2, then we would tolerate up to two node failures. If the following is not set, then the number of node failures tolerated would be same as replication factor - 1 for replicated chunk files or number of coded stripes for erasure coding chunk files.
	NumNodeFailuresTolerated NullableInt32 `json:"numNodeFailuresTolerated,omitempty"`
}

// NewStoragePolicy instantiates a new StoragePolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoragePolicy() *StoragePolicy {
	this := StoragePolicy{}
	return &this
}

// NewStoragePolicyWithDefaults instantiates a new StoragePolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoragePolicyWithDefaults() *StoragePolicy {
	this := StoragePolicy{}
	return &this
}

// GetAppMarkerDetection returns the AppMarkerDetection field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePolicy) GetAppMarkerDetection() bool {
	if o == nil || o.AppMarkerDetection.Get() == nil {
		var ret bool
		return ret
	}
	return *o.AppMarkerDetection.Get()
}

// GetAppMarkerDetectionOk returns a tuple with the AppMarkerDetection field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePolicy) GetAppMarkerDetectionOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AppMarkerDetection.Get(), o.AppMarkerDetection.IsSet()
}

// HasAppMarkerDetection returns a boolean if a field has been set.
func (o *StoragePolicy) HasAppMarkerDetection() bool {
	if o != nil && o.AppMarkerDetection.IsSet() {
		return true
	}

	return false
}

// SetAppMarkerDetection gets a reference to the given NullableBool and assigns it to the AppMarkerDetection field.
func (o *StoragePolicy) SetAppMarkerDetection(v bool) {
	o.AppMarkerDetection.Set(&v)
}
// SetAppMarkerDetectionNil sets the value for AppMarkerDetection to be an explicit nil
func (o *StoragePolicy) SetAppMarkerDetectionNil() {
	o.AppMarkerDetection.Set(nil)
}

// UnsetAppMarkerDetection ensures that no value is present for AppMarkerDetection, not even an explicit nil
func (o *StoragePolicy) UnsetAppMarkerDetection() {
	o.AppMarkerDetection.Unset()
}

// GetCloudSpillVaultId returns the CloudSpillVaultId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePolicy) GetCloudSpillVaultId() int64 {
	if o == nil || o.CloudSpillVaultId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.CloudSpillVaultId.Get()
}

// GetCloudSpillVaultIdOk returns a tuple with the CloudSpillVaultId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePolicy) GetCloudSpillVaultIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CloudSpillVaultId.Get(), o.CloudSpillVaultId.IsSet()
}

// HasCloudSpillVaultId returns a boolean if a field has been set.
func (o *StoragePolicy) HasCloudSpillVaultId() bool {
	if o != nil && o.CloudSpillVaultId.IsSet() {
		return true
	}

	return false
}

// SetCloudSpillVaultId gets a reference to the given NullableInt64 and assigns it to the CloudSpillVaultId field.
func (o *StoragePolicy) SetCloudSpillVaultId(v int64) {
	o.CloudSpillVaultId.Set(&v)
}
// SetCloudSpillVaultIdNil sets the value for CloudSpillVaultId to be an explicit nil
func (o *StoragePolicy) SetCloudSpillVaultIdNil() {
	o.CloudSpillVaultId.Set(nil)
}

// UnsetCloudSpillVaultId ensures that no value is present for CloudSpillVaultId, not even an explicit nil
func (o *StoragePolicy) UnsetCloudSpillVaultId() {
	o.CloudSpillVaultId.Unset()
}

// GetCompressionPolicy returns the CompressionPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePolicy) GetCompressionPolicy() string {
	if o == nil || o.CompressionPolicy.Get() == nil {
		var ret string
		return ret
	}
	return *o.CompressionPolicy.Get()
}

// GetCompressionPolicyOk returns a tuple with the CompressionPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePolicy) GetCompressionPolicyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CompressionPolicy.Get(), o.CompressionPolicy.IsSet()
}

// HasCompressionPolicy returns a boolean if a field has been set.
func (o *StoragePolicy) HasCompressionPolicy() bool {
	if o != nil && o.CompressionPolicy.IsSet() {
		return true
	}

	return false
}

// SetCompressionPolicy gets a reference to the given NullableString and assigns it to the CompressionPolicy field.
func (o *StoragePolicy) SetCompressionPolicy(v string) {
	o.CompressionPolicy.Set(&v)
}
// SetCompressionPolicyNil sets the value for CompressionPolicy to be an explicit nil
func (o *StoragePolicy) SetCompressionPolicyNil() {
	o.CompressionPolicy.Set(nil)
}

// UnsetCompressionPolicy ensures that no value is present for CompressionPolicy, not even an explicit nil
func (o *StoragePolicy) UnsetCompressionPolicy() {
	o.CompressionPolicy.Unset()
}

// GetDeduplicateCompressDelaySecs returns the DeduplicateCompressDelaySecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePolicy) GetDeduplicateCompressDelaySecs() int32 {
	if o == nil || o.DeduplicateCompressDelaySecs.Get() == nil {
		var ret int32
		return ret
	}
	return *o.DeduplicateCompressDelaySecs.Get()
}

// GetDeduplicateCompressDelaySecsOk returns a tuple with the DeduplicateCompressDelaySecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePolicy) GetDeduplicateCompressDelaySecsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DeduplicateCompressDelaySecs.Get(), o.DeduplicateCompressDelaySecs.IsSet()
}

// HasDeduplicateCompressDelaySecs returns a boolean if a field has been set.
func (o *StoragePolicy) HasDeduplicateCompressDelaySecs() bool {
	if o != nil && o.DeduplicateCompressDelaySecs.IsSet() {
		return true
	}

	return false
}

// SetDeduplicateCompressDelaySecs gets a reference to the given NullableInt32 and assigns it to the DeduplicateCompressDelaySecs field.
func (o *StoragePolicy) SetDeduplicateCompressDelaySecs(v int32) {
	o.DeduplicateCompressDelaySecs.Set(&v)
}
// SetDeduplicateCompressDelaySecsNil sets the value for DeduplicateCompressDelaySecs to be an explicit nil
func (o *StoragePolicy) SetDeduplicateCompressDelaySecsNil() {
	o.DeduplicateCompressDelaySecs.Set(nil)
}

// UnsetDeduplicateCompressDelaySecs ensures that no value is present for DeduplicateCompressDelaySecs, not even an explicit nil
func (o *StoragePolicy) UnsetDeduplicateCompressDelaySecs() {
	o.DeduplicateCompressDelaySecs.Unset()
}

// GetDeduplicationEnabled returns the DeduplicationEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePolicy) GetDeduplicationEnabled() bool {
	if o == nil || o.DeduplicationEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.DeduplicationEnabled.Get()
}

// GetDeduplicationEnabledOk returns a tuple with the DeduplicationEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePolicy) GetDeduplicationEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DeduplicationEnabled.Get(), o.DeduplicationEnabled.IsSet()
}

// HasDeduplicationEnabled returns a boolean if a field has been set.
func (o *StoragePolicy) HasDeduplicationEnabled() bool {
	if o != nil && o.DeduplicationEnabled.IsSet() {
		return true
	}

	return false
}

// SetDeduplicationEnabled gets a reference to the given NullableBool and assigns it to the DeduplicationEnabled field.
func (o *StoragePolicy) SetDeduplicationEnabled(v bool) {
	o.DeduplicationEnabled.Set(&v)
}
// SetDeduplicationEnabledNil sets the value for DeduplicationEnabled to be an explicit nil
func (o *StoragePolicy) SetDeduplicationEnabledNil() {
	o.DeduplicationEnabled.Set(nil)
}

// UnsetDeduplicationEnabled ensures that no value is present for DeduplicationEnabled, not even an explicit nil
func (o *StoragePolicy) UnsetDeduplicationEnabled() {
	o.DeduplicationEnabled.Unset()
}

// GetEncryptionPolicy returns the EncryptionPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePolicy) GetEncryptionPolicy() string {
	if o == nil || o.EncryptionPolicy.Get() == nil {
		var ret string
		return ret
	}
	return *o.EncryptionPolicy.Get()
}

// GetEncryptionPolicyOk returns a tuple with the EncryptionPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePolicy) GetEncryptionPolicyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EncryptionPolicy.Get(), o.EncryptionPolicy.IsSet()
}

// HasEncryptionPolicy returns a boolean if a field has been set.
func (o *StoragePolicy) HasEncryptionPolicy() bool {
	if o != nil && o.EncryptionPolicy.IsSet() {
		return true
	}

	return false
}

// SetEncryptionPolicy gets a reference to the given NullableString and assigns it to the EncryptionPolicy field.
func (o *StoragePolicy) SetEncryptionPolicy(v string) {
	o.EncryptionPolicy.Set(&v)
}
// SetEncryptionPolicyNil sets the value for EncryptionPolicy to be an explicit nil
func (o *StoragePolicy) SetEncryptionPolicyNil() {
	o.EncryptionPolicy.Set(nil)
}

// UnsetEncryptionPolicy ensures that no value is present for EncryptionPolicy, not even an explicit nil
func (o *StoragePolicy) UnsetEncryptionPolicy() {
	o.EncryptionPolicy.Unset()
}

// GetErasureCodingInfo returns the ErasureCodingInfo field value if set, zero value otherwise.
func (o *StoragePolicy) GetErasureCodingInfo() ErasureCodingInfo {
	if o == nil || o.ErasureCodingInfo == nil {
		var ret ErasureCodingInfo
		return ret
	}
	return *o.ErasureCodingInfo
}

// GetErasureCodingInfoOk returns a tuple with the ErasureCodingInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StoragePolicy) GetErasureCodingInfoOk() (*ErasureCodingInfo, bool) {
	if o == nil || o.ErasureCodingInfo == nil {
		return nil, false
	}
	return o.ErasureCodingInfo, true
}

// HasErasureCodingInfo returns a boolean if a field has been set.
func (o *StoragePolicy) HasErasureCodingInfo() bool {
	if o != nil && o.ErasureCodingInfo != nil {
		return true
	}

	return false
}

// SetErasureCodingInfo gets a reference to the given ErasureCodingInfo and assigns it to the ErasureCodingInfo field.
func (o *StoragePolicy) SetErasureCodingInfo(v ErasureCodingInfo) {
	o.ErasureCodingInfo = &v
}

// GetInlineCompress returns the InlineCompress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePolicy) GetInlineCompress() bool {
	if o == nil || o.InlineCompress.Get() == nil {
		var ret bool
		return ret
	}
	return *o.InlineCompress.Get()
}

// GetInlineCompressOk returns a tuple with the InlineCompress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePolicy) GetInlineCompressOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InlineCompress.Get(), o.InlineCompress.IsSet()
}

// HasInlineCompress returns a boolean if a field has been set.
func (o *StoragePolicy) HasInlineCompress() bool {
	if o != nil && o.InlineCompress.IsSet() {
		return true
	}

	return false
}

// SetInlineCompress gets a reference to the given NullableBool and assigns it to the InlineCompress field.
func (o *StoragePolicy) SetInlineCompress(v bool) {
	o.InlineCompress.Set(&v)
}
// SetInlineCompressNil sets the value for InlineCompress to be an explicit nil
func (o *StoragePolicy) SetInlineCompressNil() {
	o.InlineCompress.Set(nil)
}

// UnsetInlineCompress ensures that no value is present for InlineCompress, not even an explicit nil
func (o *StoragePolicy) UnsetInlineCompress() {
	o.InlineCompress.Unset()
}

// GetInlineDeduplicate returns the InlineDeduplicate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePolicy) GetInlineDeduplicate() bool {
	if o == nil || o.InlineDeduplicate.Get() == nil {
		var ret bool
		return ret
	}
	return *o.InlineDeduplicate.Get()
}

// GetInlineDeduplicateOk returns a tuple with the InlineDeduplicate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePolicy) GetInlineDeduplicateOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InlineDeduplicate.Get(), o.InlineDeduplicate.IsSet()
}

// HasInlineDeduplicate returns a boolean if a field has been set.
func (o *StoragePolicy) HasInlineDeduplicate() bool {
	if o != nil && o.InlineDeduplicate.IsSet() {
		return true
	}

	return false
}

// SetInlineDeduplicate gets a reference to the given NullableBool and assigns it to the InlineDeduplicate field.
func (o *StoragePolicy) SetInlineDeduplicate(v bool) {
	o.InlineDeduplicate.Set(&v)
}
// SetInlineDeduplicateNil sets the value for InlineDeduplicate to be an explicit nil
func (o *StoragePolicy) SetInlineDeduplicateNil() {
	o.InlineDeduplicate.Set(nil)
}

// UnsetInlineDeduplicate ensures that no value is present for InlineDeduplicate, not even an explicit nil
func (o *StoragePolicy) UnsetInlineDeduplicate() {
	o.InlineDeduplicate.Unset()
}

// GetNumFailuresTolerated returns the NumFailuresTolerated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePolicy) GetNumFailuresTolerated() int32 {
	if o == nil || o.NumFailuresTolerated.Get() == nil {
		var ret int32
		return ret
	}
	return *o.NumFailuresTolerated.Get()
}

// GetNumFailuresToleratedOk returns a tuple with the NumFailuresTolerated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePolicy) GetNumFailuresToleratedOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumFailuresTolerated.Get(), o.NumFailuresTolerated.IsSet()
}

// HasNumFailuresTolerated returns a boolean if a field has been set.
func (o *StoragePolicy) HasNumFailuresTolerated() bool {
	if o != nil && o.NumFailuresTolerated.IsSet() {
		return true
	}

	return false
}

// SetNumFailuresTolerated gets a reference to the given NullableInt32 and assigns it to the NumFailuresTolerated field.
func (o *StoragePolicy) SetNumFailuresTolerated(v int32) {
	o.NumFailuresTolerated.Set(&v)
}
// SetNumFailuresToleratedNil sets the value for NumFailuresTolerated to be an explicit nil
func (o *StoragePolicy) SetNumFailuresToleratedNil() {
	o.NumFailuresTolerated.Set(nil)
}

// UnsetNumFailuresTolerated ensures that no value is present for NumFailuresTolerated, not even an explicit nil
func (o *StoragePolicy) UnsetNumFailuresTolerated() {
	o.NumFailuresTolerated.Unset()
}

// GetNumNodeFailuresTolerated returns the NumNodeFailuresTolerated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePolicy) GetNumNodeFailuresTolerated() int32 {
	if o == nil || o.NumNodeFailuresTolerated.Get() == nil {
		var ret int32
		return ret
	}
	return *o.NumNodeFailuresTolerated.Get()
}

// GetNumNodeFailuresToleratedOk returns a tuple with the NumNodeFailuresTolerated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePolicy) GetNumNodeFailuresToleratedOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumNodeFailuresTolerated.Get(), o.NumNodeFailuresTolerated.IsSet()
}

// HasNumNodeFailuresTolerated returns a boolean if a field has been set.
func (o *StoragePolicy) HasNumNodeFailuresTolerated() bool {
	if o != nil && o.NumNodeFailuresTolerated.IsSet() {
		return true
	}

	return false
}

// SetNumNodeFailuresTolerated gets a reference to the given NullableInt32 and assigns it to the NumNodeFailuresTolerated field.
func (o *StoragePolicy) SetNumNodeFailuresTolerated(v int32) {
	o.NumNodeFailuresTolerated.Set(&v)
}
// SetNumNodeFailuresToleratedNil sets the value for NumNodeFailuresTolerated to be an explicit nil
func (o *StoragePolicy) SetNumNodeFailuresToleratedNil() {
	o.NumNodeFailuresTolerated.Set(nil)
}

// UnsetNumNodeFailuresTolerated ensures that no value is present for NumNodeFailuresTolerated, not even an explicit nil
func (o *StoragePolicy) UnsetNumNodeFailuresTolerated() {
	o.NumNodeFailuresTolerated.Unset()
}

func (o StoragePolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AppMarkerDetection.IsSet() {
		toSerialize["appMarkerDetection"] = o.AppMarkerDetection.Get()
	}
	if o.CloudSpillVaultId.IsSet() {
		toSerialize["cloudSpillVaultId"] = o.CloudSpillVaultId.Get()
	}
	if o.CompressionPolicy.IsSet() {
		toSerialize["compressionPolicy"] = o.CompressionPolicy.Get()
	}
	if o.DeduplicateCompressDelaySecs.IsSet() {
		toSerialize["deduplicateCompressDelaySecs"] = o.DeduplicateCompressDelaySecs.Get()
	}
	if o.DeduplicationEnabled.IsSet() {
		toSerialize["deduplicationEnabled"] = o.DeduplicationEnabled.Get()
	}
	if o.EncryptionPolicy.IsSet() {
		toSerialize["encryptionPolicy"] = o.EncryptionPolicy.Get()
	}
	if o.ErasureCodingInfo != nil {
		toSerialize["erasureCodingInfo"] = o.ErasureCodingInfo
	}
	if o.InlineCompress.IsSet() {
		toSerialize["inlineCompress"] = o.InlineCompress.Get()
	}
	if o.InlineDeduplicate.IsSet() {
		toSerialize["inlineDeduplicate"] = o.InlineDeduplicate.Get()
	}
	if o.NumFailuresTolerated.IsSet() {
		toSerialize["numFailuresTolerated"] = o.NumFailuresTolerated.Get()
	}
	if o.NumNodeFailuresTolerated.IsSet() {
		toSerialize["numNodeFailuresTolerated"] = o.NumNodeFailuresTolerated.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableStoragePolicy struct {
	value *StoragePolicy
	isSet bool
}

func (v NullableStoragePolicy) Get() *StoragePolicy {
	return v.value
}

func (v *NullableStoragePolicy) Set(val *StoragePolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableStoragePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableStoragePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoragePolicy(val *StoragePolicy) *NullableStoragePolicy {
	return &NullableStoragePolicy{value: val, isSet: true}
}

func (v NullableStoragePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoragePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


