/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// App App provides information about an application.
type App struct {
	// Specifies unique id allocated by the AppStore.
	AppId NullableInt64 `json:"appId,omitempty"`
	// Specifies the list of clusters on which the app is installed for a particular account Id.
	Clusters []ClusterInfo `json:"clusters,omitempty"`
	// Specifies app download progress percentage.
	DownloadProgressPct NullableFloat64 `json:"downloadProgressPct,omitempty"`
	// Specifies if an external ip is required for the app.
	ExternalIpRequired NullableBool `json:"externalIpRequired,omitempty"`
	// List of external network information available for the app.
	ExternalNetworks []ExternalNetworkInfo `json:"externalNetworks,omitempty"`
	// Specifies app installation status. Specifies status of the app installation. kNotInstalled - App yet to be installed. kInstallInProgress - App installation is in progress. kInstalled - App is installed successfully and can be launched. kInstallFailed - App installation failed. kUninstallInProgress - App uninstallation is in progress. kUninstallFailed - App uninstallation failed. kDownloadNotStarted - App download has not started. kDownloadInProgress - App download in progress. kDownloadComplete - App download completed. kDownloadFailed - App download failed.
	InstallState NullableString `json:"installState,omitempty"`
	// Specifies timestamp when the app was installed.
	InstallTime NullableInt64 `json:"installTime,omitempty"`
	// List of applicable instance size specifications (e.g. small/medium/large) for the app. Used to determine container resources.
	InstanceSizes []string `json:"instanceSizes,omitempty"`
	// Specifies whether the app currently installed on all clusters is the latest version or not.
	IsLatest NullableBool `json:"isLatest,omitempty"`
	// Specifies application version assigned by the AppStore for the latest version of an app.
	LatestVersion NullableInt64 `json:"latestVersion,omitempty"`
	Metadata *AppMetadata `json:"metadata,omitempty"`
	// Specifies privileges that are required for this app. App privilege information.  Specifies privileges that are required for this app. kReadAccess - App needs views for read access. kReadWriteAccess - App needs views for Read/write access. kManagementAccess - App needs management access via iris API. kAutoMountAccess - Whether to allow auto-mounting all the views. kUnrestrictedAppUIAccess - Whether app requires unrestricted UI access (i.e. without passing app access token in URL). kAuditLogViewReadAccess - Whether app requires read access to the internal audit log view. kProtectedObjectAccess - Whether app requires read access to protected objects.
	RequiredPrivileges []string `json:"requiredPrivileges,omitempty"`
	// Specifies timestamp when the app was uninstalled.
	UninstallTime NullableInt64 `json:"uninstallTime,omitempty"`
	// Specifies application version assigned by the AppStore.
	Version NullableInt64 `json:"version,omitempty"`
	// List of vm name info objects.
	VmNameInfoList []VmNameInfo `json:"vmNameInfoList,omitempty"`
}

// NewApp instantiates a new App object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApp() *App {
	this := App{}
	return &this
}

// NewAppWithDefaults instantiates a new App object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppWithDefaults() *App {
	this := App{}
	return &this
}

// GetAppId returns the AppId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetAppId() int64 {
	if o == nil || o.AppId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.AppId.Get()
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetAppIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AppId.Get(), o.AppId.IsSet()
}

// HasAppId returns a boolean if a field has been set.
func (o *App) HasAppId() bool {
	if o != nil && o.AppId.IsSet() {
		return true
	}

	return false
}

// SetAppId gets a reference to the given NullableInt64 and assigns it to the AppId field.
func (o *App) SetAppId(v int64) {
	o.AppId.Set(&v)
}
// SetAppIdNil sets the value for AppId to be an explicit nil
func (o *App) SetAppIdNil() {
	o.AppId.Set(nil)
}

// UnsetAppId ensures that no value is present for AppId, not even an explicit nil
func (o *App) UnsetAppId() {
	o.AppId.Unset()
}

// GetClusters returns the Clusters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetClusters() []ClusterInfo {
	if o == nil  {
		var ret []ClusterInfo
		return ret
	}
	return o.Clusters
}

// GetClustersOk returns a tuple with the Clusters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetClustersOk() (*[]ClusterInfo, bool) {
	if o == nil || o.Clusters == nil {
		return nil, false
	}
	return &o.Clusters, true
}

// HasClusters returns a boolean if a field has been set.
func (o *App) HasClusters() bool {
	if o != nil && o.Clusters != nil {
		return true
	}

	return false
}

// SetClusters gets a reference to the given []ClusterInfo and assigns it to the Clusters field.
func (o *App) SetClusters(v []ClusterInfo) {
	o.Clusters = v
}

// GetDownloadProgressPct returns the DownloadProgressPct field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetDownloadProgressPct() float64 {
	if o == nil || o.DownloadProgressPct.Get() == nil {
		var ret float64
		return ret
	}
	return *o.DownloadProgressPct.Get()
}

// GetDownloadProgressPctOk returns a tuple with the DownloadProgressPct field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetDownloadProgressPctOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DownloadProgressPct.Get(), o.DownloadProgressPct.IsSet()
}

// HasDownloadProgressPct returns a boolean if a field has been set.
func (o *App) HasDownloadProgressPct() bool {
	if o != nil && o.DownloadProgressPct.IsSet() {
		return true
	}

	return false
}

// SetDownloadProgressPct gets a reference to the given NullableFloat64 and assigns it to the DownloadProgressPct field.
func (o *App) SetDownloadProgressPct(v float64) {
	o.DownloadProgressPct.Set(&v)
}
// SetDownloadProgressPctNil sets the value for DownloadProgressPct to be an explicit nil
func (o *App) SetDownloadProgressPctNil() {
	o.DownloadProgressPct.Set(nil)
}

// UnsetDownloadProgressPct ensures that no value is present for DownloadProgressPct, not even an explicit nil
func (o *App) UnsetDownloadProgressPct() {
	o.DownloadProgressPct.Unset()
}

// GetExternalIpRequired returns the ExternalIpRequired field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetExternalIpRequired() bool {
	if o == nil || o.ExternalIpRequired.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ExternalIpRequired.Get()
}

// GetExternalIpRequiredOk returns a tuple with the ExternalIpRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetExternalIpRequiredOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExternalIpRequired.Get(), o.ExternalIpRequired.IsSet()
}

// HasExternalIpRequired returns a boolean if a field has been set.
func (o *App) HasExternalIpRequired() bool {
	if o != nil && o.ExternalIpRequired.IsSet() {
		return true
	}

	return false
}

// SetExternalIpRequired gets a reference to the given NullableBool and assigns it to the ExternalIpRequired field.
func (o *App) SetExternalIpRequired(v bool) {
	o.ExternalIpRequired.Set(&v)
}
// SetExternalIpRequiredNil sets the value for ExternalIpRequired to be an explicit nil
func (o *App) SetExternalIpRequiredNil() {
	o.ExternalIpRequired.Set(nil)
}

// UnsetExternalIpRequired ensures that no value is present for ExternalIpRequired, not even an explicit nil
func (o *App) UnsetExternalIpRequired() {
	o.ExternalIpRequired.Unset()
}

// GetExternalNetworks returns the ExternalNetworks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetExternalNetworks() []ExternalNetworkInfo {
	if o == nil  {
		var ret []ExternalNetworkInfo
		return ret
	}
	return o.ExternalNetworks
}

// GetExternalNetworksOk returns a tuple with the ExternalNetworks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetExternalNetworksOk() (*[]ExternalNetworkInfo, bool) {
	if o == nil || o.ExternalNetworks == nil {
		return nil, false
	}
	return &o.ExternalNetworks, true
}

// HasExternalNetworks returns a boolean if a field has been set.
func (o *App) HasExternalNetworks() bool {
	if o != nil && o.ExternalNetworks != nil {
		return true
	}

	return false
}

// SetExternalNetworks gets a reference to the given []ExternalNetworkInfo and assigns it to the ExternalNetworks field.
func (o *App) SetExternalNetworks(v []ExternalNetworkInfo) {
	o.ExternalNetworks = v
}

// GetInstallState returns the InstallState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetInstallState() string {
	if o == nil || o.InstallState.Get() == nil {
		var ret string
		return ret
	}
	return *o.InstallState.Get()
}

// GetInstallStateOk returns a tuple with the InstallState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetInstallStateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InstallState.Get(), o.InstallState.IsSet()
}

// HasInstallState returns a boolean if a field has been set.
func (o *App) HasInstallState() bool {
	if o != nil && o.InstallState.IsSet() {
		return true
	}

	return false
}

// SetInstallState gets a reference to the given NullableString and assigns it to the InstallState field.
func (o *App) SetInstallState(v string) {
	o.InstallState.Set(&v)
}
// SetInstallStateNil sets the value for InstallState to be an explicit nil
func (o *App) SetInstallStateNil() {
	o.InstallState.Set(nil)
}

// UnsetInstallState ensures that no value is present for InstallState, not even an explicit nil
func (o *App) UnsetInstallState() {
	o.InstallState.Unset()
}

// GetInstallTime returns the InstallTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetInstallTime() int64 {
	if o == nil || o.InstallTime.Get() == nil {
		var ret int64
		return ret
	}
	return *o.InstallTime.Get()
}

// GetInstallTimeOk returns a tuple with the InstallTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetInstallTimeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InstallTime.Get(), o.InstallTime.IsSet()
}

// HasInstallTime returns a boolean if a field has been set.
func (o *App) HasInstallTime() bool {
	if o != nil && o.InstallTime.IsSet() {
		return true
	}

	return false
}

// SetInstallTime gets a reference to the given NullableInt64 and assigns it to the InstallTime field.
func (o *App) SetInstallTime(v int64) {
	o.InstallTime.Set(&v)
}
// SetInstallTimeNil sets the value for InstallTime to be an explicit nil
func (o *App) SetInstallTimeNil() {
	o.InstallTime.Set(nil)
}

// UnsetInstallTime ensures that no value is present for InstallTime, not even an explicit nil
func (o *App) UnsetInstallTime() {
	o.InstallTime.Unset()
}

// GetInstanceSizes returns the InstanceSizes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetInstanceSizes() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.InstanceSizes
}

// GetInstanceSizesOk returns a tuple with the InstanceSizes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetInstanceSizesOk() (*[]string, bool) {
	if o == nil || o.InstanceSizes == nil {
		return nil, false
	}
	return &o.InstanceSizes, true
}

// HasInstanceSizes returns a boolean if a field has been set.
func (o *App) HasInstanceSizes() bool {
	if o != nil && o.InstanceSizes != nil {
		return true
	}

	return false
}

// SetInstanceSizes gets a reference to the given []string and assigns it to the InstanceSizes field.
func (o *App) SetInstanceSizes(v []string) {
	o.InstanceSizes = v
}

// GetIsLatest returns the IsLatest field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetIsLatest() bool {
	if o == nil || o.IsLatest.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsLatest.Get()
}

// GetIsLatestOk returns a tuple with the IsLatest field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetIsLatestOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsLatest.Get(), o.IsLatest.IsSet()
}

// HasIsLatest returns a boolean if a field has been set.
func (o *App) HasIsLatest() bool {
	if o != nil && o.IsLatest.IsSet() {
		return true
	}

	return false
}

// SetIsLatest gets a reference to the given NullableBool and assigns it to the IsLatest field.
func (o *App) SetIsLatest(v bool) {
	o.IsLatest.Set(&v)
}
// SetIsLatestNil sets the value for IsLatest to be an explicit nil
func (o *App) SetIsLatestNil() {
	o.IsLatest.Set(nil)
}

// UnsetIsLatest ensures that no value is present for IsLatest, not even an explicit nil
func (o *App) UnsetIsLatest() {
	o.IsLatest.Unset()
}

// GetLatestVersion returns the LatestVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetLatestVersion() int64 {
	if o == nil || o.LatestVersion.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LatestVersion.Get()
}

// GetLatestVersionOk returns a tuple with the LatestVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetLatestVersionOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LatestVersion.Get(), o.LatestVersion.IsSet()
}

// HasLatestVersion returns a boolean if a field has been set.
func (o *App) HasLatestVersion() bool {
	if o != nil && o.LatestVersion.IsSet() {
		return true
	}

	return false
}

// SetLatestVersion gets a reference to the given NullableInt64 and assigns it to the LatestVersion field.
func (o *App) SetLatestVersion(v int64) {
	o.LatestVersion.Set(&v)
}
// SetLatestVersionNil sets the value for LatestVersion to be an explicit nil
func (o *App) SetLatestVersionNil() {
	o.LatestVersion.Set(nil)
}

// UnsetLatestVersion ensures that no value is present for LatestVersion, not even an explicit nil
func (o *App) UnsetLatestVersion() {
	o.LatestVersion.Unset()
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *App) GetMetadata() AppMetadata {
	if o == nil || o.Metadata == nil {
		var ret AppMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *App) GetMetadataOk() (*AppMetadata, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *App) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given AppMetadata and assigns it to the Metadata field.
func (o *App) SetMetadata(v AppMetadata) {
	o.Metadata = &v
}

// GetRequiredPrivileges returns the RequiredPrivileges field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetRequiredPrivileges() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.RequiredPrivileges
}

// GetRequiredPrivilegesOk returns a tuple with the RequiredPrivileges field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetRequiredPrivilegesOk() (*[]string, bool) {
	if o == nil || o.RequiredPrivileges == nil {
		return nil, false
	}
	return &o.RequiredPrivileges, true
}

// HasRequiredPrivileges returns a boolean if a field has been set.
func (o *App) HasRequiredPrivileges() bool {
	if o != nil && o.RequiredPrivileges != nil {
		return true
	}

	return false
}

// SetRequiredPrivileges gets a reference to the given []string and assigns it to the RequiredPrivileges field.
func (o *App) SetRequiredPrivileges(v []string) {
	o.RequiredPrivileges = v
}

// GetUninstallTime returns the UninstallTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetUninstallTime() int64 {
	if o == nil || o.UninstallTime.Get() == nil {
		var ret int64
		return ret
	}
	return *o.UninstallTime.Get()
}

// GetUninstallTimeOk returns a tuple with the UninstallTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetUninstallTimeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UninstallTime.Get(), o.UninstallTime.IsSet()
}

// HasUninstallTime returns a boolean if a field has been set.
func (o *App) HasUninstallTime() bool {
	if o != nil && o.UninstallTime.IsSet() {
		return true
	}

	return false
}

// SetUninstallTime gets a reference to the given NullableInt64 and assigns it to the UninstallTime field.
func (o *App) SetUninstallTime(v int64) {
	o.UninstallTime.Set(&v)
}
// SetUninstallTimeNil sets the value for UninstallTime to be an explicit nil
func (o *App) SetUninstallTimeNil() {
	o.UninstallTime.Set(nil)
}

// UnsetUninstallTime ensures that no value is present for UninstallTime, not even an explicit nil
func (o *App) UnsetUninstallTime() {
	o.UninstallTime.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetVersion() int64 {
	if o == nil || o.Version.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetVersionOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *App) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableInt64 and assigns it to the Version field.
func (o *App) SetVersion(v int64) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *App) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *App) UnsetVersion() {
	o.Version.Unset()
}

// GetVmNameInfoList returns the VmNameInfoList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *App) GetVmNameInfoList() []VmNameInfo {
	if o == nil  {
		var ret []VmNameInfo
		return ret
	}
	return o.VmNameInfoList
}

// GetVmNameInfoListOk returns a tuple with the VmNameInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *App) GetVmNameInfoListOk() (*[]VmNameInfo, bool) {
	if o == nil || o.VmNameInfoList == nil {
		return nil, false
	}
	return &o.VmNameInfoList, true
}

// HasVmNameInfoList returns a boolean if a field has been set.
func (o *App) HasVmNameInfoList() bool {
	if o != nil && o.VmNameInfoList != nil {
		return true
	}

	return false
}

// SetVmNameInfoList gets a reference to the given []VmNameInfo and assigns it to the VmNameInfoList field.
func (o *App) SetVmNameInfoList(v []VmNameInfo) {
	o.VmNameInfoList = v
}

func (o App) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AppId.IsSet() {
		toSerialize["appId"] = o.AppId.Get()
	}
	if o.Clusters != nil {
		toSerialize["clusters"] = o.Clusters
	}
	if o.DownloadProgressPct.IsSet() {
		toSerialize["downloadProgressPct"] = o.DownloadProgressPct.Get()
	}
	if o.ExternalIpRequired.IsSet() {
		toSerialize["externalIpRequired"] = o.ExternalIpRequired.Get()
	}
	if o.ExternalNetworks != nil {
		toSerialize["externalNetworks"] = o.ExternalNetworks
	}
	if o.InstallState.IsSet() {
		toSerialize["installState"] = o.InstallState.Get()
	}
	if o.InstallTime.IsSet() {
		toSerialize["installTime"] = o.InstallTime.Get()
	}
	if o.InstanceSizes != nil {
		toSerialize["instanceSizes"] = o.InstanceSizes
	}
	if o.IsLatest.IsSet() {
		toSerialize["isLatest"] = o.IsLatest.Get()
	}
	if o.LatestVersion.IsSet() {
		toSerialize["latestVersion"] = o.LatestVersion.Get()
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.RequiredPrivileges != nil {
		toSerialize["requiredPrivileges"] = o.RequiredPrivileges
	}
	if o.UninstallTime.IsSet() {
		toSerialize["uninstallTime"] = o.UninstallTime.Get()
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	if o.VmNameInfoList != nil {
		toSerialize["vmNameInfoList"] = o.VmNameInfoList
	}
	return json.Marshal(toSerialize)
}

type NullableApp struct {
	value *App
	isSet bool
}

func (v NullableApp) Get() *App {
	return v.value
}

func (v *NullableApp) Set(val *App) {
	v.value = val
	v.isSet = true
}

func (v NullableApp) IsSet() bool {
	return v.isSet
}

func (v *NullableApp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApp(val *App) *NullableApp {
	return &NullableApp{value: val, isSet: true}
}

func (v NullableApp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


