/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// DeviceTree A logical volume is built on a tree where leaves are the slices of partitions (PartitionSlice) defined below and intermediate nodes are assembled by combining nodes in some mode (linear layout, striped, mirrored, RAID etc). A DeviceTree is a block device formed by combining one or more Devices using a combining strategy.
type DeviceTree struct {
	ChildVec []DeviceTreeChildDevice `json:"childVec,omitempty"`
	// Internal device identifier of the device to be activated as a thin volume.
	DeviceId NullableInt64 `json:"deviceId,omitempty"`
	// The length of this device. This should match the length which is computable based on children and combining strategy.  e.g. if there is only one partition slice in an LVM volume, 'length' in the partition slice is equal to 'device_length'.
	DeviceLength NullableInt64 `json:"deviceLength,omitempty"`
	// In case data is striped, this represents the length of the stripe. The number of stripes is defined by the size of child_vec above.
	StripeSize NullableInt32 `json:"stripeSize,omitempty"`
	// Chunk size. Only populated if device type is thin pool.
	ThinPoolChunkSize NullableInt64 `json:"thinPoolChunkSize,omitempty"`
	// How to combine the children.
	Type NullableInt32 `json:"type,omitempty"`
}

// NewDeviceTree instantiates a new DeviceTree object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceTree() *DeviceTree {
	this := DeviceTree{}
	return &this
}

// NewDeviceTreeWithDefaults instantiates a new DeviceTree object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceTreeWithDefaults() *DeviceTree {
	this := DeviceTree{}
	return &this
}

// GetChildVec returns the ChildVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceTree) GetChildVec() []DeviceTreeChildDevice {
	if o == nil  {
		var ret []DeviceTreeChildDevice
		return ret
	}
	return o.ChildVec
}

// GetChildVecOk returns a tuple with the ChildVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceTree) GetChildVecOk() (*[]DeviceTreeChildDevice, bool) {
	if o == nil || o.ChildVec == nil {
		return nil, false
	}
	return &o.ChildVec, true
}

// HasChildVec returns a boolean if a field has been set.
func (o *DeviceTree) HasChildVec() bool {
	if o != nil && o.ChildVec != nil {
		return true
	}

	return false
}

// SetChildVec gets a reference to the given []DeviceTreeChildDevice and assigns it to the ChildVec field.
func (o *DeviceTree) SetChildVec(v []DeviceTreeChildDevice) {
	o.ChildVec = v
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceTree) GetDeviceId() int64 {
	if o == nil || o.DeviceId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DeviceId.Get()
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceTree) GetDeviceIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DeviceId.Get(), o.DeviceId.IsSet()
}

// HasDeviceId returns a boolean if a field has been set.
func (o *DeviceTree) HasDeviceId() bool {
	if o != nil && o.DeviceId.IsSet() {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given NullableInt64 and assigns it to the DeviceId field.
func (o *DeviceTree) SetDeviceId(v int64) {
	o.DeviceId.Set(&v)
}
// SetDeviceIdNil sets the value for DeviceId to be an explicit nil
func (o *DeviceTree) SetDeviceIdNil() {
	o.DeviceId.Set(nil)
}

// UnsetDeviceId ensures that no value is present for DeviceId, not even an explicit nil
func (o *DeviceTree) UnsetDeviceId() {
	o.DeviceId.Unset()
}

// GetDeviceLength returns the DeviceLength field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceTree) GetDeviceLength() int64 {
	if o == nil || o.DeviceLength.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DeviceLength.Get()
}

// GetDeviceLengthOk returns a tuple with the DeviceLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceTree) GetDeviceLengthOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DeviceLength.Get(), o.DeviceLength.IsSet()
}

// HasDeviceLength returns a boolean if a field has been set.
func (o *DeviceTree) HasDeviceLength() bool {
	if o != nil && o.DeviceLength.IsSet() {
		return true
	}

	return false
}

// SetDeviceLength gets a reference to the given NullableInt64 and assigns it to the DeviceLength field.
func (o *DeviceTree) SetDeviceLength(v int64) {
	o.DeviceLength.Set(&v)
}
// SetDeviceLengthNil sets the value for DeviceLength to be an explicit nil
func (o *DeviceTree) SetDeviceLengthNil() {
	o.DeviceLength.Set(nil)
}

// UnsetDeviceLength ensures that no value is present for DeviceLength, not even an explicit nil
func (o *DeviceTree) UnsetDeviceLength() {
	o.DeviceLength.Unset()
}

// GetStripeSize returns the StripeSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceTree) GetStripeSize() int32 {
	if o == nil || o.StripeSize.Get() == nil {
		var ret int32
		return ret
	}
	return *o.StripeSize.Get()
}

// GetStripeSizeOk returns a tuple with the StripeSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceTree) GetStripeSizeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StripeSize.Get(), o.StripeSize.IsSet()
}

// HasStripeSize returns a boolean if a field has been set.
func (o *DeviceTree) HasStripeSize() bool {
	if o != nil && o.StripeSize.IsSet() {
		return true
	}

	return false
}

// SetStripeSize gets a reference to the given NullableInt32 and assigns it to the StripeSize field.
func (o *DeviceTree) SetStripeSize(v int32) {
	o.StripeSize.Set(&v)
}
// SetStripeSizeNil sets the value for StripeSize to be an explicit nil
func (o *DeviceTree) SetStripeSizeNil() {
	o.StripeSize.Set(nil)
}

// UnsetStripeSize ensures that no value is present for StripeSize, not even an explicit nil
func (o *DeviceTree) UnsetStripeSize() {
	o.StripeSize.Unset()
}

// GetThinPoolChunkSize returns the ThinPoolChunkSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceTree) GetThinPoolChunkSize() int64 {
	if o == nil || o.ThinPoolChunkSize.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ThinPoolChunkSize.Get()
}

// GetThinPoolChunkSizeOk returns a tuple with the ThinPoolChunkSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceTree) GetThinPoolChunkSizeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ThinPoolChunkSize.Get(), o.ThinPoolChunkSize.IsSet()
}

// HasThinPoolChunkSize returns a boolean if a field has been set.
func (o *DeviceTree) HasThinPoolChunkSize() bool {
	if o != nil && o.ThinPoolChunkSize.IsSet() {
		return true
	}

	return false
}

// SetThinPoolChunkSize gets a reference to the given NullableInt64 and assigns it to the ThinPoolChunkSize field.
func (o *DeviceTree) SetThinPoolChunkSize(v int64) {
	o.ThinPoolChunkSize.Set(&v)
}
// SetThinPoolChunkSizeNil sets the value for ThinPoolChunkSize to be an explicit nil
func (o *DeviceTree) SetThinPoolChunkSizeNil() {
	o.ThinPoolChunkSize.Set(nil)
}

// UnsetThinPoolChunkSize ensures that no value is present for ThinPoolChunkSize, not even an explicit nil
func (o *DeviceTree) UnsetThinPoolChunkSize() {
	o.ThinPoolChunkSize.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceTree) GetType() int32 {
	if o == nil || o.Type.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceTree) GetTypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *DeviceTree) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableInt32 and assigns it to the Type field.
func (o *DeviceTree) SetType(v int32) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *DeviceTree) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *DeviceTree) UnsetType() {
	o.Type.Unset()
}

func (o DeviceTree) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ChildVec != nil {
		toSerialize["childVec"] = o.ChildVec
	}
	if o.DeviceId.IsSet() {
		toSerialize["deviceId"] = o.DeviceId.Get()
	}
	if o.DeviceLength.IsSet() {
		toSerialize["deviceLength"] = o.DeviceLength.Get()
	}
	if o.StripeSize.IsSet() {
		toSerialize["stripeSize"] = o.StripeSize.Get()
	}
	if o.ThinPoolChunkSize.IsSet() {
		toSerialize["thinPoolChunkSize"] = o.ThinPoolChunkSize.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDeviceTree struct {
	value *DeviceTree
	isSet bool
}

func (v NullableDeviceTree) Get() *DeviceTree {
	return v.value
}

func (v *NullableDeviceTree) Set(val *DeviceTree) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceTree) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceTree) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceTree(val *DeviceTree) *NullableDeviceTree {
	return &NullableDeviceTree{value: val, isSet: true}
}

func (v NullableDeviceTree) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceTree) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


