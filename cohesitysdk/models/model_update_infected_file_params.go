/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// UpdateInfectedFileParams struct for UpdateInfectedFileParams
type UpdateInfectedFileParams struct {
	// Specifies the list of infected file identifiers.
	InfectedFileIds []InfectedFileParam `json:"infectedFileIds,omitempty"`
	// Specifies the remediation state of the file. Not setting any value to remediation state will reset the infected file. Remediation State. 'kQuarantine' indicates 'Quarantine' state of the file. This state blocks the client access. The administrator will have to manually delete, rescan or unquarantine the file. 'kUnquarantine' indicates 'Unquarantine' state of the file. The administrator has manually moved files from quarantined to the unquarantined state to allow client access. Unquarantined files are not scanned for virus until manually reset.
	RemediationState NullableString `json:"remediationState,omitempty"`
}

// NewUpdateInfectedFileParams instantiates a new UpdateInfectedFileParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateInfectedFileParams() *UpdateInfectedFileParams {
	this := UpdateInfectedFileParams{}
	return &this
}

// NewUpdateInfectedFileParamsWithDefaults instantiates a new UpdateInfectedFileParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateInfectedFileParamsWithDefaults() *UpdateInfectedFileParams {
	this := UpdateInfectedFileParams{}
	return &this
}

// GetInfectedFileIds returns the InfectedFileIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateInfectedFileParams) GetInfectedFileIds() []InfectedFileParam {
	if o == nil  {
		var ret []InfectedFileParam
		return ret
	}
	return o.InfectedFileIds
}

// GetInfectedFileIdsOk returns a tuple with the InfectedFileIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateInfectedFileParams) GetInfectedFileIdsOk() (*[]InfectedFileParam, bool) {
	if o == nil || o.InfectedFileIds == nil {
		return nil, false
	}
	return &o.InfectedFileIds, true
}

// HasInfectedFileIds returns a boolean if a field has been set.
func (o *UpdateInfectedFileParams) HasInfectedFileIds() bool {
	if o != nil && o.InfectedFileIds != nil {
		return true
	}

	return false
}

// SetInfectedFileIds gets a reference to the given []InfectedFileParam and assigns it to the InfectedFileIds field.
func (o *UpdateInfectedFileParams) SetInfectedFileIds(v []InfectedFileParam) {
	o.InfectedFileIds = v
}

// GetRemediationState returns the RemediationState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateInfectedFileParams) GetRemediationState() string {
	if o == nil || o.RemediationState.Get() == nil {
		var ret string
		return ret
	}
	return *o.RemediationState.Get()
}

// GetRemediationStateOk returns a tuple with the RemediationState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateInfectedFileParams) GetRemediationStateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RemediationState.Get(), o.RemediationState.IsSet()
}

// HasRemediationState returns a boolean if a field has been set.
func (o *UpdateInfectedFileParams) HasRemediationState() bool {
	if o != nil && o.RemediationState.IsSet() {
		return true
	}

	return false
}

// SetRemediationState gets a reference to the given NullableString and assigns it to the RemediationState field.
func (o *UpdateInfectedFileParams) SetRemediationState(v string) {
	o.RemediationState.Set(&v)
}
// SetRemediationStateNil sets the value for RemediationState to be an explicit nil
func (o *UpdateInfectedFileParams) SetRemediationStateNil() {
	o.RemediationState.Set(nil)
}

// UnsetRemediationState ensures that no value is present for RemediationState, not even an explicit nil
func (o *UpdateInfectedFileParams) UnsetRemediationState() {
	o.RemediationState.Unset()
}

func (o UpdateInfectedFileParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.InfectedFileIds != nil {
		toSerialize["infectedFileIds"] = o.InfectedFileIds
	}
	if o.RemediationState.IsSet() {
		toSerialize["remediationState"] = o.RemediationState.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateInfectedFileParams struct {
	value *UpdateInfectedFileParams
	isSet bool
}

func (v NullableUpdateInfectedFileParams) Get() *UpdateInfectedFileParams {
	return v.value
}

func (v *NullableUpdateInfectedFileParams) Set(val *UpdateInfectedFileParams) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateInfectedFileParams) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateInfectedFileParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateInfectedFileParams(val *UpdateInfectedFileParams) *NullableUpdateInfectedFileParams {
	return &NullableUpdateInfectedFileParams{value: val, isSet: true}
}

func (v NullableUpdateInfectedFileParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateInfectedFileParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


