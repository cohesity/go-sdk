/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ActiveDirectoryPrincipalsAddParameters Specifies the settings for adding new users and groups for Active Directory principals. These users and groups are added to the Cohesity Cluster. You cannot create users and groups in the default Cohesity domain called 'LOCAL' using this operation.
type ActiveDirectoryPrincipalsAddParameters struct {
	// Specifies a description about the user or group.
	Description NullableString `json:"description,omitempty"`
	// Specifies the domain of the Active Directory where the referenced principal is stored.
	Domain NullableString `json:"domain,omitempty"`
	// Specifies the type of the referenced Active Directory principal. If 'kGroup', the referenced Active Directory principal is a group. If 'kUser', the referenced Active Directory principal is a user. 'kUser' specifies a user object class. 'kGroup' specifies a group object class. 'kComputer' specifies a computer object class. 'kWellKnownPrincipal' specifies a well known principal.
	ObjectClass NullableString `json:"objectClass,omitempty"`
	// Specifies the name of the Active Directory principal, that will be referenced by the group or user. The name of the Active Directory principal is used for naming the new group or user on the Cohesity Cluster.
	PrincipalName NullableString `json:"principalName,omitempty"`
	// Whether the principal is a restricted principal. A restricted principal can only view the objects he has permissions to.
	Restricted NullableBool `json:"restricted,omitempty"`
	// Array of Roles.  Specifies the Cohesity roles to associate with this user or group such as 'Admin', 'Ops' or 'View'. The Cohesity roles determine privileges on the Cohesity Cluster for this group or user. For example if the 'joe' user is added for the Active Directory 'joe' user principal and is associated with the Cohesity 'View' role, 'joe' can log in to the Cohesity Dashboard and has a read-only view of the data on the Cohesity Cluster.
	Roles []string `json:"roles,omitempty"`
}

// NewActiveDirectoryPrincipalsAddParameters instantiates a new ActiveDirectoryPrincipalsAddParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveDirectoryPrincipalsAddParameters() *ActiveDirectoryPrincipalsAddParameters {
	this := ActiveDirectoryPrincipalsAddParameters{}
	return &this
}

// NewActiveDirectoryPrincipalsAddParametersWithDefaults instantiates a new ActiveDirectoryPrincipalsAddParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveDirectoryPrincipalsAddParametersWithDefaults() *ActiveDirectoryPrincipalsAddParameters {
	this := ActiveDirectoryPrincipalsAddParameters{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveDirectoryPrincipalsAddParameters) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveDirectoryPrincipalsAddParameters) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *ActiveDirectoryPrincipalsAddParameters) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *ActiveDirectoryPrincipalsAddParameters) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *ActiveDirectoryPrincipalsAddParameters) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *ActiveDirectoryPrincipalsAddParameters) UnsetDescription() {
	o.Description.Unset()
}

// GetDomain returns the Domain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveDirectoryPrincipalsAddParameters) GetDomain() string {
	if o == nil || o.Domain.Get() == nil {
		var ret string
		return ret
	}
	return *o.Domain.Get()
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveDirectoryPrincipalsAddParameters) GetDomainOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Domain.Get(), o.Domain.IsSet()
}

// HasDomain returns a boolean if a field has been set.
func (o *ActiveDirectoryPrincipalsAddParameters) HasDomain() bool {
	if o != nil && o.Domain.IsSet() {
		return true
	}

	return false
}

// SetDomain gets a reference to the given NullableString and assigns it to the Domain field.
func (o *ActiveDirectoryPrincipalsAddParameters) SetDomain(v string) {
	o.Domain.Set(&v)
}
// SetDomainNil sets the value for Domain to be an explicit nil
func (o *ActiveDirectoryPrincipalsAddParameters) SetDomainNil() {
	o.Domain.Set(nil)
}

// UnsetDomain ensures that no value is present for Domain, not even an explicit nil
func (o *ActiveDirectoryPrincipalsAddParameters) UnsetDomain() {
	o.Domain.Unset()
}

// GetObjectClass returns the ObjectClass field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveDirectoryPrincipalsAddParameters) GetObjectClass() string {
	if o == nil || o.ObjectClass.Get() == nil {
		var ret string
		return ret
	}
	return *o.ObjectClass.Get()
}

// GetObjectClassOk returns a tuple with the ObjectClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveDirectoryPrincipalsAddParameters) GetObjectClassOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ObjectClass.Get(), o.ObjectClass.IsSet()
}

// HasObjectClass returns a boolean if a field has been set.
func (o *ActiveDirectoryPrincipalsAddParameters) HasObjectClass() bool {
	if o != nil && o.ObjectClass.IsSet() {
		return true
	}

	return false
}

// SetObjectClass gets a reference to the given NullableString and assigns it to the ObjectClass field.
func (o *ActiveDirectoryPrincipalsAddParameters) SetObjectClass(v string) {
	o.ObjectClass.Set(&v)
}
// SetObjectClassNil sets the value for ObjectClass to be an explicit nil
func (o *ActiveDirectoryPrincipalsAddParameters) SetObjectClassNil() {
	o.ObjectClass.Set(nil)
}

// UnsetObjectClass ensures that no value is present for ObjectClass, not even an explicit nil
func (o *ActiveDirectoryPrincipalsAddParameters) UnsetObjectClass() {
	o.ObjectClass.Unset()
}

// GetPrincipalName returns the PrincipalName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveDirectoryPrincipalsAddParameters) GetPrincipalName() string {
	if o == nil || o.PrincipalName.Get() == nil {
		var ret string
		return ret
	}
	return *o.PrincipalName.Get()
}

// GetPrincipalNameOk returns a tuple with the PrincipalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveDirectoryPrincipalsAddParameters) GetPrincipalNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PrincipalName.Get(), o.PrincipalName.IsSet()
}

// HasPrincipalName returns a boolean if a field has been set.
func (o *ActiveDirectoryPrincipalsAddParameters) HasPrincipalName() bool {
	if o != nil && o.PrincipalName.IsSet() {
		return true
	}

	return false
}

// SetPrincipalName gets a reference to the given NullableString and assigns it to the PrincipalName field.
func (o *ActiveDirectoryPrincipalsAddParameters) SetPrincipalName(v string) {
	o.PrincipalName.Set(&v)
}
// SetPrincipalNameNil sets the value for PrincipalName to be an explicit nil
func (o *ActiveDirectoryPrincipalsAddParameters) SetPrincipalNameNil() {
	o.PrincipalName.Set(nil)
}

// UnsetPrincipalName ensures that no value is present for PrincipalName, not even an explicit nil
func (o *ActiveDirectoryPrincipalsAddParameters) UnsetPrincipalName() {
	o.PrincipalName.Unset()
}

// GetRestricted returns the Restricted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveDirectoryPrincipalsAddParameters) GetRestricted() bool {
	if o == nil || o.Restricted.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Restricted.Get()
}

// GetRestrictedOk returns a tuple with the Restricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveDirectoryPrincipalsAddParameters) GetRestrictedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Restricted.Get(), o.Restricted.IsSet()
}

// HasRestricted returns a boolean if a field has been set.
func (o *ActiveDirectoryPrincipalsAddParameters) HasRestricted() bool {
	if o != nil && o.Restricted.IsSet() {
		return true
	}

	return false
}

// SetRestricted gets a reference to the given NullableBool and assigns it to the Restricted field.
func (o *ActiveDirectoryPrincipalsAddParameters) SetRestricted(v bool) {
	o.Restricted.Set(&v)
}
// SetRestrictedNil sets the value for Restricted to be an explicit nil
func (o *ActiveDirectoryPrincipalsAddParameters) SetRestrictedNil() {
	o.Restricted.Set(nil)
}

// UnsetRestricted ensures that no value is present for Restricted, not even an explicit nil
func (o *ActiveDirectoryPrincipalsAddParameters) UnsetRestricted() {
	o.Restricted.Unset()
}

// GetRoles returns the Roles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveDirectoryPrincipalsAddParameters) GetRoles() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveDirectoryPrincipalsAddParameters) GetRolesOk() (*[]string, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return &o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *ActiveDirectoryPrincipalsAddParameters) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *ActiveDirectoryPrincipalsAddParameters) SetRoles(v []string) {
	o.Roles = v
}

func (o ActiveDirectoryPrincipalsAddParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Domain.IsSet() {
		toSerialize["domain"] = o.Domain.Get()
	}
	if o.ObjectClass.IsSet() {
		toSerialize["objectClass"] = o.ObjectClass.Get()
	}
	if o.PrincipalName.IsSet() {
		toSerialize["principalName"] = o.PrincipalName.Get()
	}
	if o.Restricted.IsSet() {
		toSerialize["restricted"] = o.Restricted.Get()
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	return json.Marshal(toSerialize)
}

type NullableActiveDirectoryPrincipalsAddParameters struct {
	value *ActiveDirectoryPrincipalsAddParameters
	isSet bool
}

func (v NullableActiveDirectoryPrincipalsAddParameters) Get() *ActiveDirectoryPrincipalsAddParameters {
	return v.value
}

func (v *NullableActiveDirectoryPrincipalsAddParameters) Set(val *ActiveDirectoryPrincipalsAddParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveDirectoryPrincipalsAddParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveDirectoryPrincipalsAddParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveDirectoryPrincipalsAddParameters(val *ActiveDirectoryPrincipalsAddParameters) *NullableActiveDirectoryPrincipalsAddParameters {
	return &NullableActiveDirectoryPrincipalsAddParameters{value: val, isSet: true}
}

func (v NullableActiveDirectoryPrincipalsAddParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveDirectoryPrincipalsAddParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


