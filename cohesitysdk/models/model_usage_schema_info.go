/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// UsageSchemaInfo UsageSchemaInfo describes the schema info of the usage.
type UsageSchemaInfo struct {
	// Specifies the list of the schema info for an entity.
	SchemaInfoList []SchemaInfo `json:"schemaInfoList,omitempty"`
}

// NewUsageSchemaInfo instantiates a new UsageSchemaInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageSchemaInfo() *UsageSchemaInfo {
	this := UsageSchemaInfo{}
	return &this
}

// NewUsageSchemaInfoWithDefaults instantiates a new UsageSchemaInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageSchemaInfoWithDefaults() *UsageSchemaInfo {
	this := UsageSchemaInfo{}
	return &this
}

// GetSchemaInfoList returns the SchemaInfoList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UsageSchemaInfo) GetSchemaInfoList() []SchemaInfo {
	if o == nil  {
		var ret []SchemaInfo
		return ret
	}
	return o.SchemaInfoList
}

// GetSchemaInfoListOk returns a tuple with the SchemaInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsageSchemaInfo) GetSchemaInfoListOk() (*[]SchemaInfo, bool) {
	if o == nil || o.SchemaInfoList == nil {
		return nil, false
	}
	return &o.SchemaInfoList, true
}

// HasSchemaInfoList returns a boolean if a field has been set.
func (o *UsageSchemaInfo) HasSchemaInfoList() bool {
	if o != nil && o.SchemaInfoList != nil {
		return true
	}

	return false
}

// SetSchemaInfoList gets a reference to the given []SchemaInfo and assigns it to the SchemaInfoList field.
func (o *UsageSchemaInfo) SetSchemaInfoList(v []SchemaInfo) {
	o.SchemaInfoList = v
}

func (o UsageSchemaInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SchemaInfoList != nil {
		toSerialize["schemaInfoList"] = o.SchemaInfoList
	}
	return json.Marshal(toSerialize)
}

type NullableUsageSchemaInfo struct {
	value *UsageSchemaInfo
	isSet bool
}

func (v NullableUsageSchemaInfo) Get() *UsageSchemaInfo {
	return v.value
}

func (v *NullableUsageSchemaInfo) Set(val *UsageSchemaInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageSchemaInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageSchemaInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageSchemaInfo(val *UsageSchemaInfo) *NullableUsageSchemaInfo {
	return &NullableUsageSchemaInfo{value: val, isSet: true}
}

func (v NullableUsageSchemaInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageSchemaInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


