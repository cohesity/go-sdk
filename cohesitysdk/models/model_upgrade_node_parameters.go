/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// UpgradeNodeParameters Specifies the parameters needed for a Node upgrade request.
type UpgradeNodeParameters struct {
	// Specifies a list of IDs of additional nodes to be upgraded. These must be free Nodes present on the same local network as the Node that the request was sent to. The ID of the Node the request was sent to should not be included in this list. This parameter can only be specified if upgradeAllFreeNodes is not.
	NodeIds []int64 `json:"nodeIds,omitempty"`
	// Specifies the target software version. The node that the request is sent to will search itself for the specified software package and if that package is found, it will be used for the upgrade.
	TargetSwVersion NullableString `json:"targetSwVersion,omitempty"`
	// Specifies whether or not to attempt to upgrade all free nodes which are currently connected to the same local network as the node that the request was sent to. This parameter can only be specified if nodeIds is not.
	UpgradeAllFreeNodes NullableBool `json:"upgradeAllFreeNodes,omitempty"`
	// Specifies that the node that the request is being sent to should be upgraded. By default, this is set to true.
	UpgradeSelf NullableBool `json:"upgradeSelf,omitempty"`
}

// NewUpgradeNodeParameters instantiates a new UpgradeNodeParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpgradeNodeParameters() *UpgradeNodeParameters {
	this := UpgradeNodeParameters{}
	return &this
}

// NewUpgradeNodeParametersWithDefaults instantiates a new UpgradeNodeParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpgradeNodeParametersWithDefaults() *UpgradeNodeParameters {
	this := UpgradeNodeParameters{}
	return &this
}

// GetNodeIds returns the NodeIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradeNodeParameters) GetNodeIds() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.NodeIds
}

// GetNodeIdsOk returns a tuple with the NodeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradeNodeParameters) GetNodeIdsOk() (*[]int64, bool) {
	if o == nil || o.NodeIds == nil {
		return nil, false
	}
	return &o.NodeIds, true
}

// HasNodeIds returns a boolean if a field has been set.
func (o *UpgradeNodeParameters) HasNodeIds() bool {
	if o != nil && o.NodeIds != nil {
		return true
	}

	return false
}

// SetNodeIds gets a reference to the given []int64 and assigns it to the NodeIds field.
func (o *UpgradeNodeParameters) SetNodeIds(v []int64) {
	o.NodeIds = v
}

// GetTargetSwVersion returns the TargetSwVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradeNodeParameters) GetTargetSwVersion() string {
	if o == nil || o.TargetSwVersion.Get() == nil {
		var ret string
		return ret
	}
	return *o.TargetSwVersion.Get()
}

// GetTargetSwVersionOk returns a tuple with the TargetSwVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradeNodeParameters) GetTargetSwVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetSwVersion.Get(), o.TargetSwVersion.IsSet()
}

// HasTargetSwVersion returns a boolean if a field has been set.
func (o *UpgradeNodeParameters) HasTargetSwVersion() bool {
	if o != nil && o.TargetSwVersion.IsSet() {
		return true
	}

	return false
}

// SetTargetSwVersion gets a reference to the given NullableString and assigns it to the TargetSwVersion field.
func (o *UpgradeNodeParameters) SetTargetSwVersion(v string) {
	o.TargetSwVersion.Set(&v)
}
// SetTargetSwVersionNil sets the value for TargetSwVersion to be an explicit nil
func (o *UpgradeNodeParameters) SetTargetSwVersionNil() {
	o.TargetSwVersion.Set(nil)
}

// UnsetTargetSwVersion ensures that no value is present for TargetSwVersion, not even an explicit nil
func (o *UpgradeNodeParameters) UnsetTargetSwVersion() {
	o.TargetSwVersion.Unset()
}

// GetUpgradeAllFreeNodes returns the UpgradeAllFreeNodes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradeNodeParameters) GetUpgradeAllFreeNodes() bool {
	if o == nil || o.UpgradeAllFreeNodes.Get() == nil {
		var ret bool
		return ret
	}
	return *o.UpgradeAllFreeNodes.Get()
}

// GetUpgradeAllFreeNodesOk returns a tuple with the UpgradeAllFreeNodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradeNodeParameters) GetUpgradeAllFreeNodesOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UpgradeAllFreeNodes.Get(), o.UpgradeAllFreeNodes.IsSet()
}

// HasUpgradeAllFreeNodes returns a boolean if a field has been set.
func (o *UpgradeNodeParameters) HasUpgradeAllFreeNodes() bool {
	if o != nil && o.UpgradeAllFreeNodes.IsSet() {
		return true
	}

	return false
}

// SetUpgradeAllFreeNodes gets a reference to the given NullableBool and assigns it to the UpgradeAllFreeNodes field.
func (o *UpgradeNodeParameters) SetUpgradeAllFreeNodes(v bool) {
	o.UpgradeAllFreeNodes.Set(&v)
}
// SetUpgradeAllFreeNodesNil sets the value for UpgradeAllFreeNodes to be an explicit nil
func (o *UpgradeNodeParameters) SetUpgradeAllFreeNodesNil() {
	o.UpgradeAllFreeNodes.Set(nil)
}

// UnsetUpgradeAllFreeNodes ensures that no value is present for UpgradeAllFreeNodes, not even an explicit nil
func (o *UpgradeNodeParameters) UnsetUpgradeAllFreeNodes() {
	o.UpgradeAllFreeNodes.Unset()
}

// GetUpgradeSelf returns the UpgradeSelf field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradeNodeParameters) GetUpgradeSelf() bool {
	if o == nil || o.UpgradeSelf.Get() == nil {
		var ret bool
		return ret
	}
	return *o.UpgradeSelf.Get()
}

// GetUpgradeSelfOk returns a tuple with the UpgradeSelf field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradeNodeParameters) GetUpgradeSelfOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UpgradeSelf.Get(), o.UpgradeSelf.IsSet()
}

// HasUpgradeSelf returns a boolean if a field has been set.
func (o *UpgradeNodeParameters) HasUpgradeSelf() bool {
	if o != nil && o.UpgradeSelf.IsSet() {
		return true
	}

	return false
}

// SetUpgradeSelf gets a reference to the given NullableBool and assigns it to the UpgradeSelf field.
func (o *UpgradeNodeParameters) SetUpgradeSelf(v bool) {
	o.UpgradeSelf.Set(&v)
}
// SetUpgradeSelfNil sets the value for UpgradeSelf to be an explicit nil
func (o *UpgradeNodeParameters) SetUpgradeSelfNil() {
	o.UpgradeSelf.Set(nil)
}

// UnsetUpgradeSelf ensures that no value is present for UpgradeSelf, not even an explicit nil
func (o *UpgradeNodeParameters) UnsetUpgradeSelf() {
	o.UpgradeSelf.Unset()
}

func (o UpgradeNodeParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NodeIds != nil {
		toSerialize["nodeIds"] = o.NodeIds
	}
	if o.TargetSwVersion.IsSet() {
		toSerialize["targetSwVersion"] = o.TargetSwVersion.Get()
	}
	if o.UpgradeAllFreeNodes.IsSet() {
		toSerialize["upgradeAllFreeNodes"] = o.UpgradeAllFreeNodes.Get()
	}
	if o.UpgradeSelf.IsSet() {
		toSerialize["upgradeSelf"] = o.UpgradeSelf.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUpgradeNodeParameters struct {
	value *UpgradeNodeParameters
	isSet bool
}

func (v NullableUpgradeNodeParameters) Get() *UpgradeNodeParameters {
	return v.value
}

func (v *NullableUpgradeNodeParameters) Set(val *UpgradeNodeParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableUpgradeNodeParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableUpgradeNodeParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpgradeNodeParameters(val *UpgradeNodeParameters) *NullableUpgradeNodeParameters {
	return &NullableUpgradeNodeParameters{value: val, isSet: true}
}

func (v NullableUpgradeNodeParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpgradeNodeParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


