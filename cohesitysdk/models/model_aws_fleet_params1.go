/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// AWSFleetParams1 struct for AWSFleetParams1
type AWSFleetParams1 struct {
	// Fleet's subnet type. This field should always be set when specifying fleet params.
	FleetSubnetType NullableInt32 `json:"fleetSubnetType,omitempty"`
	// Optional list of tags to be associated with the fleets.
	FleetTagVec []AWSFleetParamsTag `json:"fleetTagVec,omitempty"`
	NetworkParams *AWSFleetParamsNetworkParams `json:"networkParams,omitempty"`
	// Map for a region to network params, as network params can be defined per region. Only set when kCustom fleet subnet type is being used.
	NetworkParamsMap []AWSFleetParamsNetworkParamsMapEntry `json:"networkParamsMap,omitempty"`
	// Network information for the fleet. This will be only set when fleet_subnet_type is kCustom.
	NetworkParamsVec []AWSFleetParamsNetworkParams `json:"networkParamsVec,omitempty"`
}

// NewAWSFleetParams1 instantiates a new AWSFleetParams1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAWSFleetParams1() *AWSFleetParams1 {
	this := AWSFleetParams1{}
	return &this
}

// NewAWSFleetParams1WithDefaults instantiates a new AWSFleetParams1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAWSFleetParams1WithDefaults() *AWSFleetParams1 {
	this := AWSFleetParams1{}
	return &this
}

// GetFleetSubnetType returns the FleetSubnetType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AWSFleetParams1) GetFleetSubnetType() int32 {
	if o == nil || o.FleetSubnetType.Get() == nil {
		var ret int32
		return ret
	}
	return *o.FleetSubnetType.Get()
}

// GetFleetSubnetTypeOk returns a tuple with the FleetSubnetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AWSFleetParams1) GetFleetSubnetTypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FleetSubnetType.Get(), o.FleetSubnetType.IsSet()
}

// HasFleetSubnetType returns a boolean if a field has been set.
func (o *AWSFleetParams1) HasFleetSubnetType() bool {
	if o != nil && o.FleetSubnetType.IsSet() {
		return true
	}

	return false
}

// SetFleetSubnetType gets a reference to the given NullableInt32 and assigns it to the FleetSubnetType field.
func (o *AWSFleetParams1) SetFleetSubnetType(v int32) {
	o.FleetSubnetType.Set(&v)
}
// SetFleetSubnetTypeNil sets the value for FleetSubnetType to be an explicit nil
func (o *AWSFleetParams1) SetFleetSubnetTypeNil() {
	o.FleetSubnetType.Set(nil)
}

// UnsetFleetSubnetType ensures that no value is present for FleetSubnetType, not even an explicit nil
func (o *AWSFleetParams1) UnsetFleetSubnetType() {
	o.FleetSubnetType.Unset()
}

// GetFleetTagVec returns the FleetTagVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AWSFleetParams1) GetFleetTagVec() []AWSFleetParamsTag {
	if o == nil  {
		var ret []AWSFleetParamsTag
		return ret
	}
	return o.FleetTagVec
}

// GetFleetTagVecOk returns a tuple with the FleetTagVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AWSFleetParams1) GetFleetTagVecOk() (*[]AWSFleetParamsTag, bool) {
	if o == nil || o.FleetTagVec == nil {
		return nil, false
	}
	return &o.FleetTagVec, true
}

// HasFleetTagVec returns a boolean if a field has been set.
func (o *AWSFleetParams1) HasFleetTagVec() bool {
	if o != nil && o.FleetTagVec != nil {
		return true
	}

	return false
}

// SetFleetTagVec gets a reference to the given []AWSFleetParamsTag and assigns it to the FleetTagVec field.
func (o *AWSFleetParams1) SetFleetTagVec(v []AWSFleetParamsTag) {
	o.FleetTagVec = v
}

// GetNetworkParams returns the NetworkParams field value if set, zero value otherwise.
func (o *AWSFleetParams1) GetNetworkParams() AWSFleetParamsNetworkParams {
	if o == nil || o.NetworkParams == nil {
		var ret AWSFleetParamsNetworkParams
		return ret
	}
	return *o.NetworkParams
}

// GetNetworkParamsOk returns a tuple with the NetworkParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AWSFleetParams1) GetNetworkParamsOk() (*AWSFleetParamsNetworkParams, bool) {
	if o == nil || o.NetworkParams == nil {
		return nil, false
	}
	return o.NetworkParams, true
}

// HasNetworkParams returns a boolean if a field has been set.
func (o *AWSFleetParams1) HasNetworkParams() bool {
	if o != nil && o.NetworkParams != nil {
		return true
	}

	return false
}

// SetNetworkParams gets a reference to the given AWSFleetParamsNetworkParams and assigns it to the NetworkParams field.
func (o *AWSFleetParams1) SetNetworkParams(v AWSFleetParamsNetworkParams) {
	o.NetworkParams = &v
}

// GetNetworkParamsMap returns the NetworkParamsMap field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AWSFleetParams1) GetNetworkParamsMap() []AWSFleetParamsNetworkParamsMapEntry {
	if o == nil  {
		var ret []AWSFleetParamsNetworkParamsMapEntry
		return ret
	}
	return o.NetworkParamsMap
}

// GetNetworkParamsMapOk returns a tuple with the NetworkParamsMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AWSFleetParams1) GetNetworkParamsMapOk() (*[]AWSFleetParamsNetworkParamsMapEntry, bool) {
	if o == nil || o.NetworkParamsMap == nil {
		return nil, false
	}
	return &o.NetworkParamsMap, true
}

// HasNetworkParamsMap returns a boolean if a field has been set.
func (o *AWSFleetParams1) HasNetworkParamsMap() bool {
	if o != nil && o.NetworkParamsMap != nil {
		return true
	}

	return false
}

// SetNetworkParamsMap gets a reference to the given []AWSFleetParamsNetworkParamsMapEntry and assigns it to the NetworkParamsMap field.
func (o *AWSFleetParams1) SetNetworkParamsMap(v []AWSFleetParamsNetworkParamsMapEntry) {
	o.NetworkParamsMap = v
}

// GetNetworkParamsVec returns the NetworkParamsVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AWSFleetParams1) GetNetworkParamsVec() []AWSFleetParamsNetworkParams {
	if o == nil  {
		var ret []AWSFleetParamsNetworkParams
		return ret
	}
	return o.NetworkParamsVec
}

// GetNetworkParamsVecOk returns a tuple with the NetworkParamsVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AWSFleetParams1) GetNetworkParamsVecOk() (*[]AWSFleetParamsNetworkParams, bool) {
	if o == nil || o.NetworkParamsVec == nil {
		return nil, false
	}
	return &o.NetworkParamsVec, true
}

// HasNetworkParamsVec returns a boolean if a field has been set.
func (o *AWSFleetParams1) HasNetworkParamsVec() bool {
	if o != nil && o.NetworkParamsVec != nil {
		return true
	}

	return false
}

// SetNetworkParamsVec gets a reference to the given []AWSFleetParamsNetworkParams and assigns it to the NetworkParamsVec field.
func (o *AWSFleetParams1) SetNetworkParamsVec(v []AWSFleetParamsNetworkParams) {
	o.NetworkParamsVec = v
}

func (o AWSFleetParams1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FleetSubnetType.IsSet() {
		toSerialize["fleetSubnetType"] = o.FleetSubnetType.Get()
	}
	if o.FleetTagVec != nil {
		toSerialize["fleetTagVec"] = o.FleetTagVec
	}
	if o.NetworkParams != nil {
		toSerialize["networkParams"] = o.NetworkParams
	}
	if o.NetworkParamsMap != nil {
		toSerialize["networkParamsMap"] = o.NetworkParamsMap
	}
	if o.NetworkParamsVec != nil {
		toSerialize["networkParamsVec"] = o.NetworkParamsVec
	}
	return json.Marshal(toSerialize)
}

type NullableAWSFleetParams1 struct {
	value *AWSFleetParams1
	isSet bool
}

func (v NullableAWSFleetParams1) Get() *AWSFleetParams1 {
	return v.value
}

func (v *NullableAWSFleetParams1) Set(val *AWSFleetParams1) {
	v.value = val
	v.isSet = true
}

func (v NullableAWSFleetParams1) IsSet() bool {
	return v.isSet
}

func (v *NullableAWSFleetParams1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAWSFleetParams1(val *AWSFleetParams1) *NullableAWSFleetParams1 {
	return &NullableAWSFleetParams1{value: val, isSet: true}
}

func (v NullableAWSFleetParams1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAWSFleetParams1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


