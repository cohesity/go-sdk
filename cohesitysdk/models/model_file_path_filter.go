/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// FilePathFilter Specifies filters to match files and directories on a Server. Two kinds of filters are supported. a) prefix which always starts with '/'. b) posix which always starts with '*' (cannot be \"*\" only). Regular expressions are not supported. If a directory is matched, the action is applicable to all of its descendants. File paths not matching any protectFilters are not backed up.  An example is: Protect Filters: \"/\" Exclude Filters: \"/tmp\", \"*.mp4\" Using such a policy will include everything under the root directory except the /tmp directory and all the mp4 files.
type FilePathFilter struct {
	// Array of Excluded File Path Filters.  Specifies filters to match files or directories that should be removed from the list of objects matching ProtectFilters.
	ExcludeFilters []string `json:"excludeFilters,omitempty"`
	// Array of Protected File Path Filters.  Specifies filters to match files or directories that should be protected.
	ProtectFilters []string `json:"protectFilters,omitempty"`
}

// NewFilePathFilter instantiates a new FilePathFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilePathFilter() *FilePathFilter {
	this := FilePathFilter{}
	return &this
}

// NewFilePathFilterWithDefaults instantiates a new FilePathFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilePathFilterWithDefaults() *FilePathFilter {
	this := FilePathFilter{}
	return &this
}

// GetExcludeFilters returns the ExcludeFilters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilePathFilter) GetExcludeFilters() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.ExcludeFilters
}

// GetExcludeFiltersOk returns a tuple with the ExcludeFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilePathFilter) GetExcludeFiltersOk() (*[]string, bool) {
	if o == nil || o.ExcludeFilters == nil {
		return nil, false
	}
	return &o.ExcludeFilters, true
}

// HasExcludeFilters returns a boolean if a field has been set.
func (o *FilePathFilter) HasExcludeFilters() bool {
	if o != nil && o.ExcludeFilters != nil {
		return true
	}

	return false
}

// SetExcludeFilters gets a reference to the given []string and assigns it to the ExcludeFilters field.
func (o *FilePathFilter) SetExcludeFilters(v []string) {
	o.ExcludeFilters = v
}

// GetProtectFilters returns the ProtectFilters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilePathFilter) GetProtectFilters() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.ProtectFilters
}

// GetProtectFiltersOk returns a tuple with the ProtectFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilePathFilter) GetProtectFiltersOk() (*[]string, bool) {
	if o == nil || o.ProtectFilters == nil {
		return nil, false
	}
	return &o.ProtectFilters, true
}

// HasProtectFilters returns a boolean if a field has been set.
func (o *FilePathFilter) HasProtectFilters() bool {
	if o != nil && o.ProtectFilters != nil {
		return true
	}

	return false
}

// SetProtectFilters gets a reference to the given []string and assigns it to the ProtectFilters field.
func (o *FilePathFilter) SetProtectFilters(v []string) {
	o.ProtectFilters = v
}

func (o FilePathFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExcludeFilters != nil {
		toSerialize["excludeFilters"] = o.ExcludeFilters
	}
	if o.ProtectFilters != nil {
		toSerialize["protectFilters"] = o.ProtectFilters
	}
	return json.Marshal(toSerialize)
}

type NullableFilePathFilter struct {
	value *FilePathFilter
	isSet bool
}

func (v NullableFilePathFilter) Get() *FilePathFilter {
	return v.value
}

func (v *NullableFilePathFilter) Set(val *FilePathFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableFilePathFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableFilePathFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilePathFilter(val *FilePathFilter) *NullableFilePathFilter {
	return &NullableFilePathFilter{value: val, isSet: true}
}

func (v NullableFilePathFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilePathFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


