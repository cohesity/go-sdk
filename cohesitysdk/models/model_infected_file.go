/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// InfectedFile Specifies the Result parameters for all infected files.
type InfectedFile struct {
	// Specifies the name of antivirus service provider.
	AntivirusProviderName NullableString `json:"antivirusProviderName,omitempty"`
	// Specifies the entity id of the infected file.
	EntityId NullableInt64 `json:"entityId,omitempty"`
	// Specifies file path of the infected file.
	FilePath NullableString `json:"filePath,omitempty"`
	// Specifies unix epoch timestamp (in microseconds) at which these threats were detected.
	InfectionDetectionTimestamp NullableInt64 `json:"infectionDetectionTimestamp,omitempty"`
	// Specifies unix epoch timestamp (in microseconds) at which this file is modified.
	ModifiedTimestampUsecs NullableInt64 `json:"modifiedTimestampUsecs,omitempty"`
	// Specifies the remediation state of the file. Remediation State. 'kQuarantine' indicates 'Quarantine' state of the file. This state blocks the client access. The administrator will have to manually delete, rescan or unquarantine the file. 'kUnquarantine' indicates 'Unquarantine' state of the file. The administrator has manually moved files from quarantined to the unquarantined state to allow client access. Unquarantined files are not scanned for virus until manually reset.
	RemediationState NullableString `json:"remediationState,omitempty"`
	// Specifies the root inode id of the file system that infected file belongs to.
	RootInodeId NullableInt64 `json:"rootInodeId,omitempty"`
	// Specifies unix epoch timestamp (in microseconds) at which inode was scanned for viruses.
	ScanTimestampUsecs NullableInt64 `json:"scanTimestampUsecs,omitempty"`
	// Specifies the instance of an antivirus ICAP server in the cluster config that detected these threats.
	ServiceIcapUri NullableString `json:"serviceIcapUri,omitempty"`
	// Specifies the list of virus threat descriptions found in the file.
	ThreatDescriptions []string `json:"threatDescriptions,omitempty"`
	// Specifies the id of the View the infected file belongs to.
	ViewId NullableInt64 `json:"viewId,omitempty"`
	// Specifies the View name corresponding to above view id.
	ViewName NullableString `json:"viewName,omitempty"`
}

// NewInfectedFile instantiates a new InfectedFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfectedFile() *InfectedFile {
	this := InfectedFile{}
	return &this
}

// NewInfectedFileWithDefaults instantiates a new InfectedFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfectedFileWithDefaults() *InfectedFile {
	this := InfectedFile{}
	return &this
}

// GetAntivirusProviderName returns the AntivirusProviderName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InfectedFile) GetAntivirusProviderName() string {
	if o == nil || o.AntivirusProviderName.Get() == nil {
		var ret string
		return ret
	}
	return *o.AntivirusProviderName.Get()
}

// GetAntivirusProviderNameOk returns a tuple with the AntivirusProviderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedFile) GetAntivirusProviderNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AntivirusProviderName.Get(), o.AntivirusProviderName.IsSet()
}

// HasAntivirusProviderName returns a boolean if a field has been set.
func (o *InfectedFile) HasAntivirusProviderName() bool {
	if o != nil && o.AntivirusProviderName.IsSet() {
		return true
	}

	return false
}

// SetAntivirusProviderName gets a reference to the given NullableString and assigns it to the AntivirusProviderName field.
func (o *InfectedFile) SetAntivirusProviderName(v string) {
	o.AntivirusProviderName.Set(&v)
}
// SetAntivirusProviderNameNil sets the value for AntivirusProviderName to be an explicit nil
func (o *InfectedFile) SetAntivirusProviderNameNil() {
	o.AntivirusProviderName.Set(nil)
}

// UnsetAntivirusProviderName ensures that no value is present for AntivirusProviderName, not even an explicit nil
func (o *InfectedFile) UnsetAntivirusProviderName() {
	o.AntivirusProviderName.Unset()
}

// GetEntityId returns the EntityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InfectedFile) GetEntityId() int64 {
	if o == nil || o.EntityId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.EntityId.Get()
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedFile) GetEntityIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EntityId.Get(), o.EntityId.IsSet()
}

// HasEntityId returns a boolean if a field has been set.
func (o *InfectedFile) HasEntityId() bool {
	if o != nil && o.EntityId.IsSet() {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given NullableInt64 and assigns it to the EntityId field.
func (o *InfectedFile) SetEntityId(v int64) {
	o.EntityId.Set(&v)
}
// SetEntityIdNil sets the value for EntityId to be an explicit nil
func (o *InfectedFile) SetEntityIdNil() {
	o.EntityId.Set(nil)
}

// UnsetEntityId ensures that no value is present for EntityId, not even an explicit nil
func (o *InfectedFile) UnsetEntityId() {
	o.EntityId.Unset()
}

// GetFilePath returns the FilePath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InfectedFile) GetFilePath() string {
	if o == nil || o.FilePath.Get() == nil {
		var ret string
		return ret
	}
	return *o.FilePath.Get()
}

// GetFilePathOk returns a tuple with the FilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedFile) GetFilePathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FilePath.Get(), o.FilePath.IsSet()
}

// HasFilePath returns a boolean if a field has been set.
func (o *InfectedFile) HasFilePath() bool {
	if o != nil && o.FilePath.IsSet() {
		return true
	}

	return false
}

// SetFilePath gets a reference to the given NullableString and assigns it to the FilePath field.
func (o *InfectedFile) SetFilePath(v string) {
	o.FilePath.Set(&v)
}
// SetFilePathNil sets the value for FilePath to be an explicit nil
func (o *InfectedFile) SetFilePathNil() {
	o.FilePath.Set(nil)
}

// UnsetFilePath ensures that no value is present for FilePath, not even an explicit nil
func (o *InfectedFile) UnsetFilePath() {
	o.FilePath.Unset()
}

// GetInfectionDetectionTimestamp returns the InfectionDetectionTimestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InfectedFile) GetInfectionDetectionTimestamp() int64 {
	if o == nil || o.InfectionDetectionTimestamp.Get() == nil {
		var ret int64
		return ret
	}
	return *o.InfectionDetectionTimestamp.Get()
}

// GetInfectionDetectionTimestampOk returns a tuple with the InfectionDetectionTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedFile) GetInfectionDetectionTimestampOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InfectionDetectionTimestamp.Get(), o.InfectionDetectionTimestamp.IsSet()
}

// HasInfectionDetectionTimestamp returns a boolean if a field has been set.
func (o *InfectedFile) HasInfectionDetectionTimestamp() bool {
	if o != nil && o.InfectionDetectionTimestamp.IsSet() {
		return true
	}

	return false
}

// SetInfectionDetectionTimestamp gets a reference to the given NullableInt64 and assigns it to the InfectionDetectionTimestamp field.
func (o *InfectedFile) SetInfectionDetectionTimestamp(v int64) {
	o.InfectionDetectionTimestamp.Set(&v)
}
// SetInfectionDetectionTimestampNil sets the value for InfectionDetectionTimestamp to be an explicit nil
func (o *InfectedFile) SetInfectionDetectionTimestampNil() {
	o.InfectionDetectionTimestamp.Set(nil)
}

// UnsetInfectionDetectionTimestamp ensures that no value is present for InfectionDetectionTimestamp, not even an explicit nil
func (o *InfectedFile) UnsetInfectionDetectionTimestamp() {
	o.InfectionDetectionTimestamp.Unset()
}

// GetModifiedTimestampUsecs returns the ModifiedTimestampUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InfectedFile) GetModifiedTimestampUsecs() int64 {
	if o == nil || o.ModifiedTimestampUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ModifiedTimestampUsecs.Get()
}

// GetModifiedTimestampUsecsOk returns a tuple with the ModifiedTimestampUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedFile) GetModifiedTimestampUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ModifiedTimestampUsecs.Get(), o.ModifiedTimestampUsecs.IsSet()
}

// HasModifiedTimestampUsecs returns a boolean if a field has been set.
func (o *InfectedFile) HasModifiedTimestampUsecs() bool {
	if o != nil && o.ModifiedTimestampUsecs.IsSet() {
		return true
	}

	return false
}

// SetModifiedTimestampUsecs gets a reference to the given NullableInt64 and assigns it to the ModifiedTimestampUsecs field.
func (o *InfectedFile) SetModifiedTimestampUsecs(v int64) {
	o.ModifiedTimestampUsecs.Set(&v)
}
// SetModifiedTimestampUsecsNil sets the value for ModifiedTimestampUsecs to be an explicit nil
func (o *InfectedFile) SetModifiedTimestampUsecsNil() {
	o.ModifiedTimestampUsecs.Set(nil)
}

// UnsetModifiedTimestampUsecs ensures that no value is present for ModifiedTimestampUsecs, not even an explicit nil
func (o *InfectedFile) UnsetModifiedTimestampUsecs() {
	o.ModifiedTimestampUsecs.Unset()
}

// GetRemediationState returns the RemediationState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InfectedFile) GetRemediationState() string {
	if o == nil || o.RemediationState.Get() == nil {
		var ret string
		return ret
	}
	return *o.RemediationState.Get()
}

// GetRemediationStateOk returns a tuple with the RemediationState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedFile) GetRemediationStateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RemediationState.Get(), o.RemediationState.IsSet()
}

// HasRemediationState returns a boolean if a field has been set.
func (o *InfectedFile) HasRemediationState() bool {
	if o != nil && o.RemediationState.IsSet() {
		return true
	}

	return false
}

// SetRemediationState gets a reference to the given NullableString and assigns it to the RemediationState field.
func (o *InfectedFile) SetRemediationState(v string) {
	o.RemediationState.Set(&v)
}
// SetRemediationStateNil sets the value for RemediationState to be an explicit nil
func (o *InfectedFile) SetRemediationStateNil() {
	o.RemediationState.Set(nil)
}

// UnsetRemediationState ensures that no value is present for RemediationState, not even an explicit nil
func (o *InfectedFile) UnsetRemediationState() {
	o.RemediationState.Unset()
}

// GetRootInodeId returns the RootInodeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InfectedFile) GetRootInodeId() int64 {
	if o == nil || o.RootInodeId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RootInodeId.Get()
}

// GetRootInodeIdOk returns a tuple with the RootInodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedFile) GetRootInodeIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RootInodeId.Get(), o.RootInodeId.IsSet()
}

// HasRootInodeId returns a boolean if a field has been set.
func (o *InfectedFile) HasRootInodeId() bool {
	if o != nil && o.RootInodeId.IsSet() {
		return true
	}

	return false
}

// SetRootInodeId gets a reference to the given NullableInt64 and assigns it to the RootInodeId field.
func (o *InfectedFile) SetRootInodeId(v int64) {
	o.RootInodeId.Set(&v)
}
// SetRootInodeIdNil sets the value for RootInodeId to be an explicit nil
func (o *InfectedFile) SetRootInodeIdNil() {
	o.RootInodeId.Set(nil)
}

// UnsetRootInodeId ensures that no value is present for RootInodeId, not even an explicit nil
func (o *InfectedFile) UnsetRootInodeId() {
	o.RootInodeId.Unset()
}

// GetScanTimestampUsecs returns the ScanTimestampUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InfectedFile) GetScanTimestampUsecs() int64 {
	if o == nil || o.ScanTimestampUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ScanTimestampUsecs.Get()
}

// GetScanTimestampUsecsOk returns a tuple with the ScanTimestampUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedFile) GetScanTimestampUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ScanTimestampUsecs.Get(), o.ScanTimestampUsecs.IsSet()
}

// HasScanTimestampUsecs returns a boolean if a field has been set.
func (o *InfectedFile) HasScanTimestampUsecs() bool {
	if o != nil && o.ScanTimestampUsecs.IsSet() {
		return true
	}

	return false
}

// SetScanTimestampUsecs gets a reference to the given NullableInt64 and assigns it to the ScanTimestampUsecs field.
func (o *InfectedFile) SetScanTimestampUsecs(v int64) {
	o.ScanTimestampUsecs.Set(&v)
}
// SetScanTimestampUsecsNil sets the value for ScanTimestampUsecs to be an explicit nil
func (o *InfectedFile) SetScanTimestampUsecsNil() {
	o.ScanTimestampUsecs.Set(nil)
}

// UnsetScanTimestampUsecs ensures that no value is present for ScanTimestampUsecs, not even an explicit nil
func (o *InfectedFile) UnsetScanTimestampUsecs() {
	o.ScanTimestampUsecs.Unset()
}

// GetServiceIcapUri returns the ServiceIcapUri field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InfectedFile) GetServiceIcapUri() string {
	if o == nil || o.ServiceIcapUri.Get() == nil {
		var ret string
		return ret
	}
	return *o.ServiceIcapUri.Get()
}

// GetServiceIcapUriOk returns a tuple with the ServiceIcapUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedFile) GetServiceIcapUriOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ServiceIcapUri.Get(), o.ServiceIcapUri.IsSet()
}

// HasServiceIcapUri returns a boolean if a field has been set.
func (o *InfectedFile) HasServiceIcapUri() bool {
	if o != nil && o.ServiceIcapUri.IsSet() {
		return true
	}

	return false
}

// SetServiceIcapUri gets a reference to the given NullableString and assigns it to the ServiceIcapUri field.
func (o *InfectedFile) SetServiceIcapUri(v string) {
	o.ServiceIcapUri.Set(&v)
}
// SetServiceIcapUriNil sets the value for ServiceIcapUri to be an explicit nil
func (o *InfectedFile) SetServiceIcapUriNil() {
	o.ServiceIcapUri.Set(nil)
}

// UnsetServiceIcapUri ensures that no value is present for ServiceIcapUri, not even an explicit nil
func (o *InfectedFile) UnsetServiceIcapUri() {
	o.ServiceIcapUri.Unset()
}

// GetThreatDescriptions returns the ThreatDescriptions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InfectedFile) GetThreatDescriptions() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.ThreatDescriptions
}

// GetThreatDescriptionsOk returns a tuple with the ThreatDescriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedFile) GetThreatDescriptionsOk() (*[]string, bool) {
	if o == nil || o.ThreatDescriptions == nil {
		return nil, false
	}
	return &o.ThreatDescriptions, true
}

// HasThreatDescriptions returns a boolean if a field has been set.
func (o *InfectedFile) HasThreatDescriptions() bool {
	if o != nil && o.ThreatDescriptions != nil {
		return true
	}

	return false
}

// SetThreatDescriptions gets a reference to the given []string and assigns it to the ThreatDescriptions field.
func (o *InfectedFile) SetThreatDescriptions(v []string) {
	o.ThreatDescriptions = v
}

// GetViewId returns the ViewId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InfectedFile) GetViewId() int64 {
	if o == nil || o.ViewId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ViewId.Get()
}

// GetViewIdOk returns a tuple with the ViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedFile) GetViewIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewId.Get(), o.ViewId.IsSet()
}

// HasViewId returns a boolean if a field has been set.
func (o *InfectedFile) HasViewId() bool {
	if o != nil && o.ViewId.IsSet() {
		return true
	}

	return false
}

// SetViewId gets a reference to the given NullableInt64 and assigns it to the ViewId field.
func (o *InfectedFile) SetViewId(v int64) {
	o.ViewId.Set(&v)
}
// SetViewIdNil sets the value for ViewId to be an explicit nil
func (o *InfectedFile) SetViewIdNil() {
	o.ViewId.Set(nil)
}

// UnsetViewId ensures that no value is present for ViewId, not even an explicit nil
func (o *InfectedFile) UnsetViewId() {
	o.ViewId.Unset()
}

// GetViewName returns the ViewName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InfectedFile) GetViewName() string {
	if o == nil || o.ViewName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ViewName.Get()
}

// GetViewNameOk returns a tuple with the ViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedFile) GetViewNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewName.Get(), o.ViewName.IsSet()
}

// HasViewName returns a boolean if a field has been set.
func (o *InfectedFile) HasViewName() bool {
	if o != nil && o.ViewName.IsSet() {
		return true
	}

	return false
}

// SetViewName gets a reference to the given NullableString and assigns it to the ViewName field.
func (o *InfectedFile) SetViewName(v string) {
	o.ViewName.Set(&v)
}
// SetViewNameNil sets the value for ViewName to be an explicit nil
func (o *InfectedFile) SetViewNameNil() {
	o.ViewName.Set(nil)
}

// UnsetViewName ensures that no value is present for ViewName, not even an explicit nil
func (o *InfectedFile) UnsetViewName() {
	o.ViewName.Unset()
}

func (o InfectedFile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AntivirusProviderName.IsSet() {
		toSerialize["antivirusProviderName"] = o.AntivirusProviderName.Get()
	}
	if o.EntityId.IsSet() {
		toSerialize["entityId"] = o.EntityId.Get()
	}
	if o.FilePath.IsSet() {
		toSerialize["filePath"] = o.FilePath.Get()
	}
	if o.InfectionDetectionTimestamp.IsSet() {
		toSerialize["infectionDetectionTimestamp"] = o.InfectionDetectionTimestamp.Get()
	}
	if o.ModifiedTimestampUsecs.IsSet() {
		toSerialize["modifiedTimestampUsecs"] = o.ModifiedTimestampUsecs.Get()
	}
	if o.RemediationState.IsSet() {
		toSerialize["remediationState"] = o.RemediationState.Get()
	}
	if o.RootInodeId.IsSet() {
		toSerialize["rootInodeId"] = o.RootInodeId.Get()
	}
	if o.ScanTimestampUsecs.IsSet() {
		toSerialize["scanTimestampUsecs"] = o.ScanTimestampUsecs.Get()
	}
	if o.ServiceIcapUri.IsSet() {
		toSerialize["serviceIcapUri"] = o.ServiceIcapUri.Get()
	}
	if o.ThreatDescriptions != nil {
		toSerialize["threatDescriptions"] = o.ThreatDescriptions
	}
	if o.ViewId.IsSet() {
		toSerialize["viewId"] = o.ViewId.Get()
	}
	if o.ViewName.IsSet() {
		toSerialize["viewName"] = o.ViewName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableInfectedFile struct {
	value *InfectedFile
	isSet bool
}

func (v NullableInfectedFile) Get() *InfectedFile {
	return v.value
}

func (v *NullableInfectedFile) Set(val *InfectedFile) {
	v.value = val
	v.isSet = true
}

func (v NullableInfectedFile) IsSet() bool {
	return v.isSet
}

func (v *NullableInfectedFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfectedFile(val *InfectedFile) *NullableInfectedFile {
	return &NullableInfectedFile{value: val, isSet: true}
}

func (v NullableInfectedFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfectedFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


