/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ViewPrivileges ViewPrivileges specifies which views are allowed to be accessed by an app instance.
type ViewPrivileges struct {
	// Specifies if all, none or specific views are allowed to be accessed. Specifies if all, none or specific views are allowed to be accessed. kNone - None of the views have access. kAll - All the views have access. kSpecific - Only specific views have access.
	PrivilegesType NullableString `json:"privilegesType,omitempty"`
	// Specifies the ids of the views which are allowed to be accessed in case the privilege type is kSpecific.
	ViewIds []int64 `json:"viewIds,omitempty"`
}

// NewViewPrivileges instantiates a new ViewPrivileges object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewPrivileges() *ViewPrivileges {
	this := ViewPrivileges{}
	return &this
}

// NewViewPrivilegesWithDefaults instantiates a new ViewPrivileges object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewPrivilegesWithDefaults() *ViewPrivileges {
	this := ViewPrivileges{}
	return &this
}

// GetPrivilegesType returns the PrivilegesType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewPrivileges) GetPrivilegesType() string {
	if o == nil || o.PrivilegesType.Get() == nil {
		var ret string
		return ret
	}
	return *o.PrivilegesType.Get()
}

// GetPrivilegesTypeOk returns a tuple with the PrivilegesType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewPrivileges) GetPrivilegesTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PrivilegesType.Get(), o.PrivilegesType.IsSet()
}

// HasPrivilegesType returns a boolean if a field has been set.
func (o *ViewPrivileges) HasPrivilegesType() bool {
	if o != nil && o.PrivilegesType.IsSet() {
		return true
	}

	return false
}

// SetPrivilegesType gets a reference to the given NullableString and assigns it to the PrivilegesType field.
func (o *ViewPrivileges) SetPrivilegesType(v string) {
	o.PrivilegesType.Set(&v)
}
// SetPrivilegesTypeNil sets the value for PrivilegesType to be an explicit nil
func (o *ViewPrivileges) SetPrivilegesTypeNil() {
	o.PrivilegesType.Set(nil)
}

// UnsetPrivilegesType ensures that no value is present for PrivilegesType, not even an explicit nil
func (o *ViewPrivileges) UnsetPrivilegesType() {
	o.PrivilegesType.Unset()
}

// GetViewIds returns the ViewIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewPrivileges) GetViewIds() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.ViewIds
}

// GetViewIdsOk returns a tuple with the ViewIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewPrivileges) GetViewIdsOk() (*[]int64, bool) {
	if o == nil || o.ViewIds == nil {
		return nil, false
	}
	return &o.ViewIds, true
}

// HasViewIds returns a boolean if a field has been set.
func (o *ViewPrivileges) HasViewIds() bool {
	if o != nil && o.ViewIds != nil {
		return true
	}

	return false
}

// SetViewIds gets a reference to the given []int64 and assigns it to the ViewIds field.
func (o *ViewPrivileges) SetViewIds(v []int64) {
	o.ViewIds = v
}

func (o ViewPrivileges) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PrivilegesType.IsSet() {
		toSerialize["privilegesType"] = o.PrivilegesType.Get()
	}
	if o.ViewIds != nil {
		toSerialize["viewIds"] = o.ViewIds
	}
	return json.Marshal(toSerialize)
}

type NullableViewPrivileges struct {
	value *ViewPrivileges
	isSet bool
}

func (v NullableViewPrivileges) Get() *ViewPrivileges {
	return v.value
}

func (v *NullableViewPrivileges) Set(val *ViewPrivileges) {
	v.value = val
	v.isSet = true
}

func (v NullableViewPrivileges) IsSet() bool {
	return v.isSet
}

func (v *NullableViewPrivileges) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewPrivileges(val *ViewPrivileges) *NullableViewPrivileges {
	return &NullableViewPrivileges{value: val, isSet: true}
}

func (v NullableViewPrivileges) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewPrivileges) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


