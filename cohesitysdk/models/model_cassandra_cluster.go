/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// CassandraCluster Specifies an Object containing information about a Cassandra cluster.
type CassandraCluster struct {
	// Primary host from this Cassandra cluster.
	PrimaryHost NullableString `json:"primaryHost,omitempty"`
	// Seeds of this Cassandra Cluster.
	Seeds []string `json:"seeds,omitempty"`
}

// NewCassandraCluster instantiates a new CassandraCluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCassandraCluster() *CassandraCluster {
	this := CassandraCluster{}
	return &this
}

// NewCassandraClusterWithDefaults instantiates a new CassandraCluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCassandraClusterWithDefaults() *CassandraCluster {
	this := CassandraCluster{}
	return &this
}

// GetPrimaryHost returns the PrimaryHost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraCluster) GetPrimaryHost() string {
	if o == nil || o.PrimaryHost.Get() == nil {
		var ret string
		return ret
	}
	return *o.PrimaryHost.Get()
}

// GetPrimaryHostOk returns a tuple with the PrimaryHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraCluster) GetPrimaryHostOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PrimaryHost.Get(), o.PrimaryHost.IsSet()
}

// HasPrimaryHost returns a boolean if a field has been set.
func (o *CassandraCluster) HasPrimaryHost() bool {
	if o != nil && o.PrimaryHost.IsSet() {
		return true
	}

	return false
}

// SetPrimaryHost gets a reference to the given NullableString and assigns it to the PrimaryHost field.
func (o *CassandraCluster) SetPrimaryHost(v string) {
	o.PrimaryHost.Set(&v)
}
// SetPrimaryHostNil sets the value for PrimaryHost to be an explicit nil
func (o *CassandraCluster) SetPrimaryHostNil() {
	o.PrimaryHost.Set(nil)
}

// UnsetPrimaryHost ensures that no value is present for PrimaryHost, not even an explicit nil
func (o *CassandraCluster) UnsetPrimaryHost() {
	o.PrimaryHost.Unset()
}

// GetSeeds returns the Seeds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraCluster) GetSeeds() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Seeds
}

// GetSeedsOk returns a tuple with the Seeds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraCluster) GetSeedsOk() (*[]string, bool) {
	if o == nil || o.Seeds == nil {
		return nil, false
	}
	return &o.Seeds, true
}

// HasSeeds returns a boolean if a field has been set.
func (o *CassandraCluster) HasSeeds() bool {
	if o != nil && o.Seeds != nil {
		return true
	}

	return false
}

// SetSeeds gets a reference to the given []string and assigns it to the Seeds field.
func (o *CassandraCluster) SetSeeds(v []string) {
	o.Seeds = v
}

func (o CassandraCluster) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PrimaryHost.IsSet() {
		toSerialize["primaryHost"] = o.PrimaryHost.Get()
	}
	if o.Seeds != nil {
		toSerialize["seeds"] = o.Seeds
	}
	return json.Marshal(toSerialize)
}

type NullableCassandraCluster struct {
	value *CassandraCluster
	isSet bool
}

func (v NullableCassandraCluster) Get() *CassandraCluster {
	return v.value
}

func (v *NullableCassandraCluster) Set(val *CassandraCluster) {
	v.value = val
	v.isSet = true
}

func (v NullableCassandraCluster) IsSet() bool {
	return v.isSet
}

func (v *NullableCassandraCluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCassandraCluster(val *CassandraCluster) *NullableCassandraCluster {
	return &NullableCassandraCluster{value: val, isSet: true}
}

func (v NullableCassandraCluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCassandraCluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


