/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// VaultParamsRestoreParamsGlacier struct for VaultParamsRestoreParamsGlacier
type VaultParamsRestoreParamsGlacier struct {
	RetrievalType NullableInt32 `json:"retrievalType,omitempty"`
}

// NewVaultParamsRestoreParamsGlacier instantiates a new VaultParamsRestoreParamsGlacier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVaultParamsRestoreParamsGlacier() *VaultParamsRestoreParamsGlacier {
	this := VaultParamsRestoreParamsGlacier{}
	return &this
}

// NewVaultParamsRestoreParamsGlacierWithDefaults instantiates a new VaultParamsRestoreParamsGlacier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVaultParamsRestoreParamsGlacierWithDefaults() *VaultParamsRestoreParamsGlacier {
	this := VaultParamsRestoreParamsGlacier{}
	return &this
}

// GetRetrievalType returns the RetrievalType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VaultParamsRestoreParamsGlacier) GetRetrievalType() int32 {
	if o == nil || o.RetrievalType.Get() == nil {
		var ret int32
		return ret
	}
	return *o.RetrievalType.Get()
}

// GetRetrievalTypeOk returns a tuple with the RetrievalType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VaultParamsRestoreParamsGlacier) GetRetrievalTypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RetrievalType.Get(), o.RetrievalType.IsSet()
}

// HasRetrievalType returns a boolean if a field has been set.
func (o *VaultParamsRestoreParamsGlacier) HasRetrievalType() bool {
	if o != nil && o.RetrievalType.IsSet() {
		return true
	}

	return false
}

// SetRetrievalType gets a reference to the given NullableInt32 and assigns it to the RetrievalType field.
func (o *VaultParamsRestoreParamsGlacier) SetRetrievalType(v int32) {
	o.RetrievalType.Set(&v)
}
// SetRetrievalTypeNil sets the value for RetrievalType to be an explicit nil
func (o *VaultParamsRestoreParamsGlacier) SetRetrievalTypeNil() {
	o.RetrievalType.Set(nil)
}

// UnsetRetrievalType ensures that no value is present for RetrievalType, not even an explicit nil
func (o *VaultParamsRestoreParamsGlacier) UnsetRetrievalType() {
	o.RetrievalType.Unset()
}

func (o VaultParamsRestoreParamsGlacier) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RetrievalType.IsSet() {
		toSerialize["retrievalType"] = o.RetrievalType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableVaultParamsRestoreParamsGlacier struct {
	value *VaultParamsRestoreParamsGlacier
	isSet bool
}

func (v NullableVaultParamsRestoreParamsGlacier) Get() *VaultParamsRestoreParamsGlacier {
	return v.value
}

func (v *NullableVaultParamsRestoreParamsGlacier) Set(val *VaultParamsRestoreParamsGlacier) {
	v.value = val
	v.isSet = true
}

func (v NullableVaultParamsRestoreParamsGlacier) IsSet() bool {
	return v.isSet
}

func (v *NullableVaultParamsRestoreParamsGlacier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVaultParamsRestoreParamsGlacier(val *VaultParamsRestoreParamsGlacier) *NullableVaultParamsRestoreParamsGlacier {
	return &NullableVaultParamsRestoreParamsGlacier{value: val, isSet: true}
}

func (v NullableVaultParamsRestoreParamsGlacier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVaultParamsRestoreParamsGlacier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


