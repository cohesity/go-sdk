/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// PreferredDomainController Specifies Preferred domain controllers (DCs) for an Active Directory domain.
type PreferredDomainController struct {
	// List of Domain controllers DCs in FQDN format that are mapped to an Active Directory Domain name.
	DomainControllers []string `json:"domainControllers,omitempty"`
	// Specifies the Domain name or the trusted domain of an Active Directory.
	DomainName NullableString `json:"domainName,omitempty"`
}

// NewPreferredDomainController instantiates a new PreferredDomainController object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPreferredDomainController() *PreferredDomainController {
	this := PreferredDomainController{}
	return &this
}

// NewPreferredDomainControllerWithDefaults instantiates a new PreferredDomainController object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPreferredDomainControllerWithDefaults() *PreferredDomainController {
	this := PreferredDomainController{}
	return &this
}

// GetDomainControllers returns the DomainControllers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PreferredDomainController) GetDomainControllers() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.DomainControllers
}

// GetDomainControllersOk returns a tuple with the DomainControllers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PreferredDomainController) GetDomainControllersOk() (*[]string, bool) {
	if o == nil || o.DomainControllers == nil {
		return nil, false
	}
	return &o.DomainControllers, true
}

// HasDomainControllers returns a boolean if a field has been set.
func (o *PreferredDomainController) HasDomainControllers() bool {
	if o != nil && o.DomainControllers != nil {
		return true
	}

	return false
}

// SetDomainControllers gets a reference to the given []string and assigns it to the DomainControllers field.
func (o *PreferredDomainController) SetDomainControllers(v []string) {
	o.DomainControllers = v
}

// GetDomainName returns the DomainName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PreferredDomainController) GetDomainName() string {
	if o == nil || o.DomainName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DomainName.Get()
}

// GetDomainNameOk returns a tuple with the DomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PreferredDomainController) GetDomainNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DomainName.Get(), o.DomainName.IsSet()
}

// HasDomainName returns a boolean if a field has been set.
func (o *PreferredDomainController) HasDomainName() bool {
	if o != nil && o.DomainName.IsSet() {
		return true
	}

	return false
}

// SetDomainName gets a reference to the given NullableString and assigns it to the DomainName field.
func (o *PreferredDomainController) SetDomainName(v string) {
	o.DomainName.Set(&v)
}
// SetDomainNameNil sets the value for DomainName to be an explicit nil
func (o *PreferredDomainController) SetDomainNameNil() {
	o.DomainName.Set(nil)
}

// UnsetDomainName ensures that no value is present for DomainName, not even an explicit nil
func (o *PreferredDomainController) UnsetDomainName() {
	o.DomainName.Unset()
}

func (o PreferredDomainController) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DomainControllers != nil {
		toSerialize["domainControllers"] = o.DomainControllers
	}
	if o.DomainName.IsSet() {
		toSerialize["domainName"] = o.DomainName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullablePreferredDomainController struct {
	value *PreferredDomainController
	isSet bool
}

func (v NullablePreferredDomainController) Get() *PreferredDomainController {
	return v.value
}

func (v *NullablePreferredDomainController) Set(val *PreferredDomainController) {
	v.value = val
	v.isSet = true
}

func (v NullablePreferredDomainController) IsSet() bool {
	return v.isSet
}

func (v *NullablePreferredDomainController) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePreferredDomainController(val *PreferredDomainController) *NullablePreferredDomainController {
	return &NullablePreferredDomainController{value: val, isSet: true}
}

func (v NullablePreferredDomainController) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePreferredDomainController) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


