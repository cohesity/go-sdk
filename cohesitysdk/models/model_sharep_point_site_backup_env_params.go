/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// SharepPointSiteBackupEnvParams Message to capture any additional backup params for SharePoint within the Office365 environment.
type SharepPointSiteBackupEnvParams struct {
	DocLibFilteringPolicy *FilteringPolicyProto `json:"docLibFilteringPolicy,omitempty"`
}

// NewSharepPointSiteBackupEnvParams instantiates a new SharepPointSiteBackupEnvParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharepPointSiteBackupEnvParams() *SharepPointSiteBackupEnvParams {
	this := SharepPointSiteBackupEnvParams{}
	return &this
}

// NewSharepPointSiteBackupEnvParamsWithDefaults instantiates a new SharepPointSiteBackupEnvParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharepPointSiteBackupEnvParamsWithDefaults() *SharepPointSiteBackupEnvParams {
	this := SharepPointSiteBackupEnvParams{}
	return &this
}

// GetDocLibFilteringPolicy returns the DocLibFilteringPolicy field value if set, zero value otherwise.
func (o *SharepPointSiteBackupEnvParams) GetDocLibFilteringPolicy() FilteringPolicyProto {
	if o == nil || o.DocLibFilteringPolicy == nil {
		var ret FilteringPolicyProto
		return ret
	}
	return *o.DocLibFilteringPolicy
}

// GetDocLibFilteringPolicyOk returns a tuple with the DocLibFilteringPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharepPointSiteBackupEnvParams) GetDocLibFilteringPolicyOk() (*FilteringPolicyProto, bool) {
	if o == nil || o.DocLibFilteringPolicy == nil {
		return nil, false
	}
	return o.DocLibFilteringPolicy, true
}

// HasDocLibFilteringPolicy returns a boolean if a field has been set.
func (o *SharepPointSiteBackupEnvParams) HasDocLibFilteringPolicy() bool {
	if o != nil && o.DocLibFilteringPolicy != nil {
		return true
	}

	return false
}

// SetDocLibFilteringPolicy gets a reference to the given FilteringPolicyProto and assigns it to the DocLibFilteringPolicy field.
func (o *SharepPointSiteBackupEnvParams) SetDocLibFilteringPolicy(v FilteringPolicyProto) {
	o.DocLibFilteringPolicy = &v
}

func (o SharepPointSiteBackupEnvParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DocLibFilteringPolicy != nil {
		toSerialize["docLibFilteringPolicy"] = o.DocLibFilteringPolicy
	}
	return json.Marshal(toSerialize)
}

type NullableSharepPointSiteBackupEnvParams struct {
	value *SharepPointSiteBackupEnvParams
	isSet bool
}

func (v NullableSharepPointSiteBackupEnvParams) Get() *SharepPointSiteBackupEnvParams {
	return v.value
}

func (v *NullableSharepPointSiteBackupEnvParams) Set(val *SharepPointSiteBackupEnvParams) {
	v.value = val
	v.isSet = true
}

func (v NullableSharepPointSiteBackupEnvParams) IsSet() bool {
	return v.isSet
}

func (v *NullableSharepPointSiteBackupEnvParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharepPointSiteBackupEnvParams(val *SharepPointSiteBackupEnvParams) *NullableSharepPointSiteBackupEnvParams {
	return &NullableSharepPointSiteBackupEnvParams{value: val, isSet: true}
}

func (v NullableSharepPointSiteBackupEnvParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharepPointSiteBackupEnvParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


