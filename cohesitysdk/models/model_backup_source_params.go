/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// BackupSourceParams Message to capture any additional backup params at the source level.
type BackupSourceParams struct {
	// If we are backing up an application (such as SQL), this contains the entity ids of the app entities (such as SQL instances and databases) that will be protected on the backup source.  If this vector is empty, it implies that we are protecting all app entities on the source.
	AppEntityIdVec []int64 `json:"appEntityIdVec,omitempty"`
	OracleParams *OracleSourceParams `json:"oracleParams,omitempty"`
	PhysicalParams *PhysicalBackupSourceParams `json:"physicalParams,omitempty"`
	// Set to true, if indexing is not required for given source.
	SkipIndexing NullableBool `json:"skipIndexing,omitempty"`
	// Source entity id. NOTE: This is expected to point to a leaf-level entity.
	SourceId NullableInt64 `json:"sourceId,omitempty"`
	VmwareParams *VMwareBackupSourceParams `json:"vmwareParams,omitempty"`
}

// NewBackupSourceParams instantiates a new BackupSourceParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupSourceParams() *BackupSourceParams {
	this := BackupSourceParams{}
	return &this
}

// NewBackupSourceParamsWithDefaults instantiates a new BackupSourceParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupSourceParamsWithDefaults() *BackupSourceParams {
	this := BackupSourceParams{}
	return &this
}

// GetAppEntityIdVec returns the AppEntityIdVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupSourceParams) GetAppEntityIdVec() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.AppEntityIdVec
}

// GetAppEntityIdVecOk returns a tuple with the AppEntityIdVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupSourceParams) GetAppEntityIdVecOk() (*[]int64, bool) {
	if o == nil || o.AppEntityIdVec == nil {
		return nil, false
	}
	return &o.AppEntityIdVec, true
}

// HasAppEntityIdVec returns a boolean if a field has been set.
func (o *BackupSourceParams) HasAppEntityIdVec() bool {
	if o != nil && o.AppEntityIdVec != nil {
		return true
	}

	return false
}

// SetAppEntityIdVec gets a reference to the given []int64 and assigns it to the AppEntityIdVec field.
func (o *BackupSourceParams) SetAppEntityIdVec(v []int64) {
	o.AppEntityIdVec = v
}

// GetOracleParams returns the OracleParams field value if set, zero value otherwise.
func (o *BackupSourceParams) GetOracleParams() OracleSourceParams {
	if o == nil || o.OracleParams == nil {
		var ret OracleSourceParams
		return ret
	}
	return *o.OracleParams
}

// GetOracleParamsOk returns a tuple with the OracleParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupSourceParams) GetOracleParamsOk() (*OracleSourceParams, bool) {
	if o == nil || o.OracleParams == nil {
		return nil, false
	}
	return o.OracleParams, true
}

// HasOracleParams returns a boolean if a field has been set.
func (o *BackupSourceParams) HasOracleParams() bool {
	if o != nil && o.OracleParams != nil {
		return true
	}

	return false
}

// SetOracleParams gets a reference to the given OracleSourceParams and assigns it to the OracleParams field.
func (o *BackupSourceParams) SetOracleParams(v OracleSourceParams) {
	o.OracleParams = &v
}

// GetPhysicalParams returns the PhysicalParams field value if set, zero value otherwise.
func (o *BackupSourceParams) GetPhysicalParams() PhysicalBackupSourceParams {
	if o == nil || o.PhysicalParams == nil {
		var ret PhysicalBackupSourceParams
		return ret
	}
	return *o.PhysicalParams
}

// GetPhysicalParamsOk returns a tuple with the PhysicalParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupSourceParams) GetPhysicalParamsOk() (*PhysicalBackupSourceParams, bool) {
	if o == nil || o.PhysicalParams == nil {
		return nil, false
	}
	return o.PhysicalParams, true
}

// HasPhysicalParams returns a boolean if a field has been set.
func (o *BackupSourceParams) HasPhysicalParams() bool {
	if o != nil && o.PhysicalParams != nil {
		return true
	}

	return false
}

// SetPhysicalParams gets a reference to the given PhysicalBackupSourceParams and assigns it to the PhysicalParams field.
func (o *BackupSourceParams) SetPhysicalParams(v PhysicalBackupSourceParams) {
	o.PhysicalParams = &v
}

// GetSkipIndexing returns the SkipIndexing field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupSourceParams) GetSkipIndexing() bool {
	if o == nil || o.SkipIndexing.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SkipIndexing.Get()
}

// GetSkipIndexingOk returns a tuple with the SkipIndexing field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupSourceParams) GetSkipIndexingOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SkipIndexing.Get(), o.SkipIndexing.IsSet()
}

// HasSkipIndexing returns a boolean if a field has been set.
func (o *BackupSourceParams) HasSkipIndexing() bool {
	if o != nil && o.SkipIndexing.IsSet() {
		return true
	}

	return false
}

// SetSkipIndexing gets a reference to the given NullableBool and assigns it to the SkipIndexing field.
func (o *BackupSourceParams) SetSkipIndexing(v bool) {
	o.SkipIndexing.Set(&v)
}
// SetSkipIndexingNil sets the value for SkipIndexing to be an explicit nil
func (o *BackupSourceParams) SetSkipIndexingNil() {
	o.SkipIndexing.Set(nil)
}

// UnsetSkipIndexing ensures that no value is present for SkipIndexing, not even an explicit nil
func (o *BackupSourceParams) UnsetSkipIndexing() {
	o.SkipIndexing.Unset()
}

// GetSourceId returns the SourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupSourceParams) GetSourceId() int64 {
	if o == nil || o.SourceId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SourceId.Get()
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupSourceParams) GetSourceIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceId.Get(), o.SourceId.IsSet()
}

// HasSourceId returns a boolean if a field has been set.
func (o *BackupSourceParams) HasSourceId() bool {
	if o != nil && o.SourceId.IsSet() {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given NullableInt64 and assigns it to the SourceId field.
func (o *BackupSourceParams) SetSourceId(v int64) {
	o.SourceId.Set(&v)
}
// SetSourceIdNil sets the value for SourceId to be an explicit nil
func (o *BackupSourceParams) SetSourceIdNil() {
	o.SourceId.Set(nil)
}

// UnsetSourceId ensures that no value is present for SourceId, not even an explicit nil
func (o *BackupSourceParams) UnsetSourceId() {
	o.SourceId.Unset()
}

// GetVmwareParams returns the VmwareParams field value if set, zero value otherwise.
func (o *BackupSourceParams) GetVmwareParams() VMwareBackupSourceParams {
	if o == nil || o.VmwareParams == nil {
		var ret VMwareBackupSourceParams
		return ret
	}
	return *o.VmwareParams
}

// GetVmwareParamsOk returns a tuple with the VmwareParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupSourceParams) GetVmwareParamsOk() (*VMwareBackupSourceParams, bool) {
	if o == nil || o.VmwareParams == nil {
		return nil, false
	}
	return o.VmwareParams, true
}

// HasVmwareParams returns a boolean if a field has been set.
func (o *BackupSourceParams) HasVmwareParams() bool {
	if o != nil && o.VmwareParams != nil {
		return true
	}

	return false
}

// SetVmwareParams gets a reference to the given VMwareBackupSourceParams and assigns it to the VmwareParams field.
func (o *BackupSourceParams) SetVmwareParams(v VMwareBackupSourceParams) {
	o.VmwareParams = &v
}

func (o BackupSourceParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AppEntityIdVec != nil {
		toSerialize["appEntityIdVec"] = o.AppEntityIdVec
	}
	if o.OracleParams != nil {
		toSerialize["oracleParams"] = o.OracleParams
	}
	if o.PhysicalParams != nil {
		toSerialize["physicalParams"] = o.PhysicalParams
	}
	if o.SkipIndexing.IsSet() {
		toSerialize["skipIndexing"] = o.SkipIndexing.Get()
	}
	if o.SourceId.IsSet() {
		toSerialize["sourceId"] = o.SourceId.Get()
	}
	if o.VmwareParams != nil {
		toSerialize["vmwareParams"] = o.VmwareParams
	}
	return json.Marshal(toSerialize)
}

type NullableBackupSourceParams struct {
	value *BackupSourceParams
	isSet bool
}

func (v NullableBackupSourceParams) Get() *BackupSourceParams {
	return v.value
}

func (v *NullableBackupSourceParams) Set(val *BackupSourceParams) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupSourceParams) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupSourceParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupSourceParams(val *BackupSourceParams) *NullableBackupSourceParams {
	return &NullableBackupSourceParams{value: val, isSet: true}
}

func (v NullableBackupSourceParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupSourceParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


