/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// DailySchedule Specifies a daily or weekly backup schedule.
type DailySchedule struct {
	// Array of Days.  Specifies a list of days of the week when to start Job Runs. If no days are specified, the Jobs Runs will run every day of the week. Specifies a day in a week such as 'kSunday', 'kMonday', etc.
	Days []string `json:"days,omitempty"`
}

// NewDailySchedule instantiates a new DailySchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDailySchedule() *DailySchedule {
	this := DailySchedule{}
	return &this
}

// NewDailyScheduleWithDefaults instantiates a new DailySchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDailyScheduleWithDefaults() *DailySchedule {
	this := DailySchedule{}
	return &this
}

// GetDays returns the Days field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DailySchedule) GetDays() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Days
}

// GetDaysOk returns a tuple with the Days field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DailySchedule) GetDaysOk() (*[]string, bool) {
	if o == nil || o.Days == nil {
		return nil, false
	}
	return &o.Days, true
}

// HasDays returns a boolean if a field has been set.
func (o *DailySchedule) HasDays() bool {
	if o != nil && o.Days != nil {
		return true
	}

	return false
}

// SetDays gets a reference to the given []string and assigns it to the Days field.
func (o *DailySchedule) SetDays(v []string) {
	o.Days = v
}

func (o DailySchedule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Days != nil {
		toSerialize["days"] = o.Days
	}
	return json.Marshal(toSerialize)
}

type NullableDailySchedule struct {
	value *DailySchedule
	isSet bool
}

func (v NullableDailySchedule) Get() *DailySchedule {
	return v.value
}

func (v *NullableDailySchedule) Set(val *DailySchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableDailySchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableDailySchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDailySchedule(val *DailySchedule) *NullableDailySchedule {
	return &NullableDailySchedule{value: val, isSet: true}
}

func (v NullableDailySchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDailySchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


