/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// NetworkParams struct for NetworkParams
type NetworkParams struct {
	BondingOpts *BondingOpts `json:"bondingOpts,omitempty"`
	Mtu NullableInt32 `json:"mtu,omitempty"`
}

// NewNetworkParams instantiates a new NetworkParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkParams() *NetworkParams {
	this := NetworkParams{}
	return &this
}

// NewNetworkParamsWithDefaults instantiates a new NetworkParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkParamsWithDefaults() *NetworkParams {
	this := NetworkParams{}
	return &this
}

// GetBondingOpts returns the BondingOpts field value if set, zero value otherwise.
func (o *NetworkParams) GetBondingOpts() BondingOpts {
	if o == nil || o.BondingOpts == nil {
		var ret BondingOpts
		return ret
	}
	return *o.BondingOpts
}

// GetBondingOptsOk returns a tuple with the BondingOpts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkParams) GetBondingOptsOk() (*BondingOpts, bool) {
	if o == nil || o.BondingOpts == nil {
		return nil, false
	}
	return o.BondingOpts, true
}

// HasBondingOpts returns a boolean if a field has been set.
func (o *NetworkParams) HasBondingOpts() bool {
	if o != nil && o.BondingOpts != nil {
		return true
	}

	return false
}

// SetBondingOpts gets a reference to the given BondingOpts and assigns it to the BondingOpts field.
func (o *NetworkParams) SetBondingOpts(v BondingOpts) {
	o.BondingOpts = &v
}

// GetMtu returns the Mtu field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkParams) GetMtu() int32 {
	if o == nil || o.Mtu.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Mtu.Get()
}

// GetMtuOk returns a tuple with the Mtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkParams) GetMtuOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Mtu.Get(), o.Mtu.IsSet()
}

// HasMtu returns a boolean if a field has been set.
func (o *NetworkParams) HasMtu() bool {
	if o != nil && o.Mtu.IsSet() {
		return true
	}

	return false
}

// SetMtu gets a reference to the given NullableInt32 and assigns it to the Mtu field.
func (o *NetworkParams) SetMtu(v int32) {
	o.Mtu.Set(&v)
}
// SetMtuNil sets the value for Mtu to be an explicit nil
func (o *NetworkParams) SetMtuNil() {
	o.Mtu.Set(nil)
}

// UnsetMtu ensures that no value is present for Mtu, not even an explicit nil
func (o *NetworkParams) UnsetMtu() {
	o.Mtu.Unset()
}

func (o NetworkParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BondingOpts != nil {
		toSerialize["bondingOpts"] = o.BondingOpts
	}
	if o.Mtu.IsSet() {
		toSerialize["mtu"] = o.Mtu.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkParams struct {
	value *NetworkParams
	isSet bool
}

func (v NullableNetworkParams) Get() *NetworkParams {
	return v.value
}

func (v *NullableNetworkParams) Set(val *NetworkParams) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkParams) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkParams(val *NetworkParams) *NullableNetworkParams {
	return &NullableNetworkParams{value: val, isSet: true}
}

func (v NullableNetworkParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


