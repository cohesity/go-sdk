/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// NodeToTieredStorageDirectoriesMap struct for NodeToTieredStorageDirectoriesMap
type NodeToTieredStorageDirectoriesMap struct {
	// Name of the Cassandra node.
	CassandraNodeName NullableString `json:"cassandraNodeName,omitempty"`
	// Array of tiered storage directories.
	TieredStorageDirectoriesVec []string `json:"tieredStorageDirectoriesVec,omitempty"`
}

// NewNodeToTieredStorageDirectoriesMap instantiates a new NodeToTieredStorageDirectoriesMap object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeToTieredStorageDirectoriesMap() *NodeToTieredStorageDirectoriesMap {
	this := NodeToTieredStorageDirectoriesMap{}
	return &this
}

// NewNodeToTieredStorageDirectoriesMapWithDefaults instantiates a new NodeToTieredStorageDirectoriesMap object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeToTieredStorageDirectoriesMapWithDefaults() *NodeToTieredStorageDirectoriesMap {
	this := NodeToTieredStorageDirectoriesMap{}
	return &this
}

// GetCassandraNodeName returns the CassandraNodeName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeToTieredStorageDirectoriesMap) GetCassandraNodeName() string {
	if o == nil || o.CassandraNodeName.Get() == nil {
		var ret string
		return ret
	}
	return *o.CassandraNodeName.Get()
}

// GetCassandraNodeNameOk returns a tuple with the CassandraNodeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeToTieredStorageDirectoriesMap) GetCassandraNodeNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CassandraNodeName.Get(), o.CassandraNodeName.IsSet()
}

// HasCassandraNodeName returns a boolean if a field has been set.
func (o *NodeToTieredStorageDirectoriesMap) HasCassandraNodeName() bool {
	if o != nil && o.CassandraNodeName.IsSet() {
		return true
	}

	return false
}

// SetCassandraNodeName gets a reference to the given NullableString and assigns it to the CassandraNodeName field.
func (o *NodeToTieredStorageDirectoriesMap) SetCassandraNodeName(v string) {
	o.CassandraNodeName.Set(&v)
}
// SetCassandraNodeNameNil sets the value for CassandraNodeName to be an explicit nil
func (o *NodeToTieredStorageDirectoriesMap) SetCassandraNodeNameNil() {
	o.CassandraNodeName.Set(nil)
}

// UnsetCassandraNodeName ensures that no value is present for CassandraNodeName, not even an explicit nil
func (o *NodeToTieredStorageDirectoriesMap) UnsetCassandraNodeName() {
	o.CassandraNodeName.Unset()
}

// GetTieredStorageDirectoriesVec returns the TieredStorageDirectoriesVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeToTieredStorageDirectoriesMap) GetTieredStorageDirectoriesVec() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.TieredStorageDirectoriesVec
}

// GetTieredStorageDirectoriesVecOk returns a tuple with the TieredStorageDirectoriesVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeToTieredStorageDirectoriesMap) GetTieredStorageDirectoriesVecOk() (*[]string, bool) {
	if o == nil || o.TieredStorageDirectoriesVec == nil {
		return nil, false
	}
	return &o.TieredStorageDirectoriesVec, true
}

// HasTieredStorageDirectoriesVec returns a boolean if a field has been set.
func (o *NodeToTieredStorageDirectoriesMap) HasTieredStorageDirectoriesVec() bool {
	if o != nil && o.TieredStorageDirectoriesVec != nil {
		return true
	}

	return false
}

// SetTieredStorageDirectoriesVec gets a reference to the given []string and assigns it to the TieredStorageDirectoriesVec field.
func (o *NodeToTieredStorageDirectoriesMap) SetTieredStorageDirectoriesVec(v []string) {
	o.TieredStorageDirectoriesVec = v
}

func (o NodeToTieredStorageDirectoriesMap) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CassandraNodeName.IsSet() {
		toSerialize["cassandraNodeName"] = o.CassandraNodeName.Get()
	}
	if o.TieredStorageDirectoriesVec != nil {
		toSerialize["tieredStorageDirectoriesVec"] = o.TieredStorageDirectoriesVec
	}
	return json.Marshal(toSerialize)
}

type NullableNodeToTieredStorageDirectoriesMap struct {
	value *NodeToTieredStorageDirectoriesMap
	isSet bool
}

func (v NullableNodeToTieredStorageDirectoriesMap) Get() *NodeToTieredStorageDirectoriesMap {
	return v.value
}

func (v *NullableNodeToTieredStorageDirectoriesMap) Set(val *NodeToTieredStorageDirectoriesMap) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeToTieredStorageDirectoriesMap) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeToTieredStorageDirectoriesMap) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeToTieredStorageDirectoriesMap(val *NodeToTieredStorageDirectoriesMap) *NullableNodeToTieredStorageDirectoriesMap {
	return &NullableNodeToTieredStorageDirectoriesMap{value: val, isSet: true}
}

func (v NullableNodeToTieredStorageDirectoriesMap) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeToTieredStorageDirectoriesMap) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


