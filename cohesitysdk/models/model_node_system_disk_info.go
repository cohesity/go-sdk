/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// NodeSystemDiskInfo struct for NodeSystemDiskInfo
type NodeSystemDiskInfo struct {
	// DevicePath is the device path of the disk.
	DevicePath NullableString `json:"devicePath,omitempty"`
	// Id is the id of the disk.
	Id NullableInt64 `json:"id,omitempty"`
	// Offline specifies whether a disk is marked offline.
	Offline NullableBool `json:"offline,omitempty"`
}

// NewNodeSystemDiskInfo instantiates a new NodeSystemDiskInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeSystemDiskInfo() *NodeSystemDiskInfo {
	this := NodeSystemDiskInfo{}
	return &this
}

// NewNodeSystemDiskInfoWithDefaults instantiates a new NodeSystemDiskInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeSystemDiskInfoWithDefaults() *NodeSystemDiskInfo {
	this := NodeSystemDiskInfo{}
	return &this
}

// GetDevicePath returns the DevicePath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeSystemDiskInfo) GetDevicePath() string {
	if o == nil || o.DevicePath.Get() == nil {
		var ret string
		return ret
	}
	return *o.DevicePath.Get()
}

// GetDevicePathOk returns a tuple with the DevicePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeSystemDiskInfo) GetDevicePathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DevicePath.Get(), o.DevicePath.IsSet()
}

// HasDevicePath returns a boolean if a field has been set.
func (o *NodeSystemDiskInfo) HasDevicePath() bool {
	if o != nil && o.DevicePath.IsSet() {
		return true
	}

	return false
}

// SetDevicePath gets a reference to the given NullableString and assigns it to the DevicePath field.
func (o *NodeSystemDiskInfo) SetDevicePath(v string) {
	o.DevicePath.Set(&v)
}
// SetDevicePathNil sets the value for DevicePath to be an explicit nil
func (o *NodeSystemDiskInfo) SetDevicePathNil() {
	o.DevicePath.Set(nil)
}

// UnsetDevicePath ensures that no value is present for DevicePath, not even an explicit nil
func (o *NodeSystemDiskInfo) UnsetDevicePath() {
	o.DevicePath.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeSystemDiskInfo) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeSystemDiskInfo) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *NodeSystemDiskInfo) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *NodeSystemDiskInfo) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *NodeSystemDiskInfo) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *NodeSystemDiskInfo) UnsetId() {
	o.Id.Unset()
}

// GetOffline returns the Offline field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeSystemDiskInfo) GetOffline() bool {
	if o == nil || o.Offline.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Offline.Get()
}

// GetOfflineOk returns a tuple with the Offline field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeSystemDiskInfo) GetOfflineOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Offline.Get(), o.Offline.IsSet()
}

// HasOffline returns a boolean if a field has been set.
func (o *NodeSystemDiskInfo) HasOffline() bool {
	if o != nil && o.Offline.IsSet() {
		return true
	}

	return false
}

// SetOffline gets a reference to the given NullableBool and assigns it to the Offline field.
func (o *NodeSystemDiskInfo) SetOffline(v bool) {
	o.Offline.Set(&v)
}
// SetOfflineNil sets the value for Offline to be an explicit nil
func (o *NodeSystemDiskInfo) SetOfflineNil() {
	o.Offline.Set(nil)
}

// UnsetOffline ensures that no value is present for Offline, not even an explicit nil
func (o *NodeSystemDiskInfo) UnsetOffline() {
	o.Offline.Unset()
}

func (o NodeSystemDiskInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DevicePath.IsSet() {
		toSerialize["devicePath"] = o.DevicePath.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Offline.IsSet() {
		toSerialize["offline"] = o.Offline.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableNodeSystemDiskInfo struct {
	value *NodeSystemDiskInfo
	isSet bool
}

func (v NullableNodeSystemDiskInfo) Get() *NodeSystemDiskInfo {
	return v.value
}

func (v *NullableNodeSystemDiskInfo) Set(val *NodeSystemDiskInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeSystemDiskInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeSystemDiskInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeSystemDiskInfo(val *NodeSystemDiskInfo) *NullableNodeSystemDiskInfo {
	return &NullableNodeSystemDiskInfo{value: val, isSet: true}
}

func (v NullableNodeSystemDiskInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeSystemDiskInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


