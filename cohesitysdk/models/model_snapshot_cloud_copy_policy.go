/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// SnapshotCloudCopyPolicy Specifies settings for copying Snapshots to Cloud. This also specifies the retention policy that should be applied to Snapshots after they have been copied to Cloud.
type SnapshotCloudCopyPolicy struct {
	// Specified the Id for a snapshot copy policy. This is generated when the policy is created.
	Id NullableString `json:"Id,omitempty"`
	// Specifies if Snapshots are copied from the first completely successful Job Run or the first partially successful Job Run occurring at the start of the replication schedule. If true, Snapshots are copied from the first Job Run occurring at the start of the replication schedule, even if first Job Run was not completely successful i.e. Snapshots were not captured for all Objects in the Job. If false, Snapshots are copied from the first Job Run occurring at the start of the replication schedule that was completely successful i.e. Snapshots for all the Objects in the Job were successfully captured.
	CopyPartial NullableBool `json:"copyPartial,omitempty"`
	DatalockConfig *DataLockConfig `json:"datalockConfig,omitempty"`
	// Specifies the number of days to retain copied Snapshots on the target.
	DaysToKeep NullableInt64 `json:"daysToKeep,omitempty"`
	// Specifies a factor to multiply the periodicity by, to determine the copy schedule. For example if set to 2 and the periodicity is hourly, then Snapshots from the first eligible Job Run for every 2 hour period is copied.
	Multiplier NullableInt32 `json:"multiplier,omitempty"`
	// Specifies the frequency that Snapshots should be copied to the specified target. Used in combination with multiplier. 'kEvery' means that the Snapshot copy occurs after the number of Job Runs equals the number specified in the multiplier. 'kHour' means that the Snapshot copy occurs hourly at the frequency set in the multiplier, for example if multiplier is 2, the copy occurs every 2 hours. 'kDay' means that the Snapshot copy occurs daily at the frequency set in the multiplier. 'kWeek' means that the Snapshot copy occurs weekly at the frequency set in the multiplier. 'kMonth' means that the Snapshot copy occurs monthly at the frequency set in the multiplier. 'kYear' means that the Snapshot copy occurs yearly at the frequency set in the multiplier.
	Periodicity NullableString `json:"periodicity,omitempty"`
	Target *CloudDeployTargetDetails `json:"target,omitempty"`
}

// NewSnapshotCloudCopyPolicy instantiates a new SnapshotCloudCopyPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotCloudCopyPolicy() *SnapshotCloudCopyPolicy {
	this := SnapshotCloudCopyPolicy{}
	return &this
}

// NewSnapshotCloudCopyPolicyWithDefaults instantiates a new SnapshotCloudCopyPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotCloudCopyPolicyWithDefaults() *SnapshotCloudCopyPolicy {
	this := SnapshotCloudCopyPolicy{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotCloudCopyPolicy) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotCloudCopyPolicy) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *SnapshotCloudCopyPolicy) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *SnapshotCloudCopyPolicy) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *SnapshotCloudCopyPolicy) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *SnapshotCloudCopyPolicy) UnsetId() {
	o.Id.Unset()
}

// GetCopyPartial returns the CopyPartial field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotCloudCopyPolicy) GetCopyPartial() bool {
	if o == nil || o.CopyPartial.Get() == nil {
		var ret bool
		return ret
	}
	return *o.CopyPartial.Get()
}

// GetCopyPartialOk returns a tuple with the CopyPartial field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotCloudCopyPolicy) GetCopyPartialOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CopyPartial.Get(), o.CopyPartial.IsSet()
}

// HasCopyPartial returns a boolean if a field has been set.
func (o *SnapshotCloudCopyPolicy) HasCopyPartial() bool {
	if o != nil && o.CopyPartial.IsSet() {
		return true
	}

	return false
}

// SetCopyPartial gets a reference to the given NullableBool and assigns it to the CopyPartial field.
func (o *SnapshotCloudCopyPolicy) SetCopyPartial(v bool) {
	o.CopyPartial.Set(&v)
}
// SetCopyPartialNil sets the value for CopyPartial to be an explicit nil
func (o *SnapshotCloudCopyPolicy) SetCopyPartialNil() {
	o.CopyPartial.Set(nil)
}

// UnsetCopyPartial ensures that no value is present for CopyPartial, not even an explicit nil
func (o *SnapshotCloudCopyPolicy) UnsetCopyPartial() {
	o.CopyPartial.Unset()
}

// GetDatalockConfig returns the DatalockConfig field value if set, zero value otherwise.
func (o *SnapshotCloudCopyPolicy) GetDatalockConfig() DataLockConfig {
	if o == nil || o.DatalockConfig == nil {
		var ret DataLockConfig
		return ret
	}
	return *o.DatalockConfig
}

// GetDatalockConfigOk returns a tuple with the DatalockConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotCloudCopyPolicy) GetDatalockConfigOk() (*DataLockConfig, bool) {
	if o == nil || o.DatalockConfig == nil {
		return nil, false
	}
	return o.DatalockConfig, true
}

// HasDatalockConfig returns a boolean if a field has been set.
func (o *SnapshotCloudCopyPolicy) HasDatalockConfig() bool {
	if o != nil && o.DatalockConfig != nil {
		return true
	}

	return false
}

// SetDatalockConfig gets a reference to the given DataLockConfig and assigns it to the DatalockConfig field.
func (o *SnapshotCloudCopyPolicy) SetDatalockConfig(v DataLockConfig) {
	o.DatalockConfig = &v
}

// GetDaysToKeep returns the DaysToKeep field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotCloudCopyPolicy) GetDaysToKeep() int64 {
	if o == nil || o.DaysToKeep.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DaysToKeep.Get()
}

// GetDaysToKeepOk returns a tuple with the DaysToKeep field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotCloudCopyPolicy) GetDaysToKeepOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DaysToKeep.Get(), o.DaysToKeep.IsSet()
}

// HasDaysToKeep returns a boolean if a field has been set.
func (o *SnapshotCloudCopyPolicy) HasDaysToKeep() bool {
	if o != nil && o.DaysToKeep.IsSet() {
		return true
	}

	return false
}

// SetDaysToKeep gets a reference to the given NullableInt64 and assigns it to the DaysToKeep field.
func (o *SnapshotCloudCopyPolicy) SetDaysToKeep(v int64) {
	o.DaysToKeep.Set(&v)
}
// SetDaysToKeepNil sets the value for DaysToKeep to be an explicit nil
func (o *SnapshotCloudCopyPolicy) SetDaysToKeepNil() {
	o.DaysToKeep.Set(nil)
}

// UnsetDaysToKeep ensures that no value is present for DaysToKeep, not even an explicit nil
func (o *SnapshotCloudCopyPolicy) UnsetDaysToKeep() {
	o.DaysToKeep.Unset()
}

// GetMultiplier returns the Multiplier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotCloudCopyPolicy) GetMultiplier() int32 {
	if o == nil || o.Multiplier.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Multiplier.Get()
}

// GetMultiplierOk returns a tuple with the Multiplier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotCloudCopyPolicy) GetMultiplierOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Multiplier.Get(), o.Multiplier.IsSet()
}

// HasMultiplier returns a boolean if a field has been set.
func (o *SnapshotCloudCopyPolicy) HasMultiplier() bool {
	if o != nil && o.Multiplier.IsSet() {
		return true
	}

	return false
}

// SetMultiplier gets a reference to the given NullableInt32 and assigns it to the Multiplier field.
func (o *SnapshotCloudCopyPolicy) SetMultiplier(v int32) {
	o.Multiplier.Set(&v)
}
// SetMultiplierNil sets the value for Multiplier to be an explicit nil
func (o *SnapshotCloudCopyPolicy) SetMultiplierNil() {
	o.Multiplier.Set(nil)
}

// UnsetMultiplier ensures that no value is present for Multiplier, not even an explicit nil
func (o *SnapshotCloudCopyPolicy) UnsetMultiplier() {
	o.Multiplier.Unset()
}

// GetPeriodicity returns the Periodicity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotCloudCopyPolicy) GetPeriodicity() string {
	if o == nil || o.Periodicity.Get() == nil {
		var ret string
		return ret
	}
	return *o.Periodicity.Get()
}

// GetPeriodicityOk returns a tuple with the Periodicity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotCloudCopyPolicy) GetPeriodicityOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Periodicity.Get(), o.Periodicity.IsSet()
}

// HasPeriodicity returns a boolean if a field has been set.
func (o *SnapshotCloudCopyPolicy) HasPeriodicity() bool {
	if o != nil && o.Periodicity.IsSet() {
		return true
	}

	return false
}

// SetPeriodicity gets a reference to the given NullableString and assigns it to the Periodicity field.
func (o *SnapshotCloudCopyPolicy) SetPeriodicity(v string) {
	o.Periodicity.Set(&v)
}
// SetPeriodicityNil sets the value for Periodicity to be an explicit nil
func (o *SnapshotCloudCopyPolicy) SetPeriodicityNil() {
	o.Periodicity.Set(nil)
}

// UnsetPeriodicity ensures that no value is present for Periodicity, not even an explicit nil
func (o *SnapshotCloudCopyPolicy) UnsetPeriodicity() {
	o.Periodicity.Unset()
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *SnapshotCloudCopyPolicy) GetTarget() CloudDeployTargetDetails {
	if o == nil || o.Target == nil {
		var ret CloudDeployTargetDetails
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotCloudCopyPolicy) GetTargetOk() (*CloudDeployTargetDetails, bool) {
	if o == nil || o.Target == nil {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *SnapshotCloudCopyPolicy) HasTarget() bool {
	if o != nil && o.Target != nil {
		return true
	}

	return false
}

// SetTarget gets a reference to the given CloudDeployTargetDetails and assigns it to the Target field.
func (o *SnapshotCloudCopyPolicy) SetTarget(v CloudDeployTargetDetails) {
	o.Target = &v
}

func (o SnapshotCloudCopyPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["Id"] = o.Id.Get()
	}
	if o.CopyPartial.IsSet() {
		toSerialize["copyPartial"] = o.CopyPartial.Get()
	}
	if o.DatalockConfig != nil {
		toSerialize["datalockConfig"] = o.DatalockConfig
	}
	if o.DaysToKeep.IsSet() {
		toSerialize["daysToKeep"] = o.DaysToKeep.Get()
	}
	if o.Multiplier.IsSet() {
		toSerialize["multiplier"] = o.Multiplier.Get()
	}
	if o.Periodicity.IsSet() {
		toSerialize["periodicity"] = o.Periodicity.Get()
	}
	if o.Target != nil {
		toSerialize["target"] = o.Target
	}
	return json.Marshal(toSerialize)
}

type NullableSnapshotCloudCopyPolicy struct {
	value *SnapshotCloudCopyPolicy
	isSet bool
}

func (v NullableSnapshotCloudCopyPolicy) Get() *SnapshotCloudCopyPolicy {
	return v.value
}

func (v *NullableSnapshotCloudCopyPolicy) Set(val *SnapshotCloudCopyPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotCloudCopyPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotCloudCopyPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotCloudCopyPolicy(val *SnapshotCloudCopyPolicy) *NullableSnapshotCloudCopyPolicy {
	return &NullableSnapshotCloudCopyPolicy{value: val, isSet: true}
}

func (v NullableSnapshotCloudCopyPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotCloudCopyPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


