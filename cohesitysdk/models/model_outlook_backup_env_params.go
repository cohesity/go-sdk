/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// OutlookBackupEnvParams Message to capture any additional backup params for Outlook within Office365 environment.
type OutlookBackupEnvParams struct {
	FilteringPolicy *FilteringPolicyProto `json:"filteringPolicy,omitempty"`
	// Specifies whether the mailbox for all the Office365 Users present in the protection job should be backed up.
	ShouldBackupMailbox NullableBool `json:"shouldBackupMailbox,omitempty"`
}

// NewOutlookBackupEnvParams instantiates a new OutlookBackupEnvParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutlookBackupEnvParams() *OutlookBackupEnvParams {
	this := OutlookBackupEnvParams{}
	return &this
}

// NewOutlookBackupEnvParamsWithDefaults instantiates a new OutlookBackupEnvParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutlookBackupEnvParamsWithDefaults() *OutlookBackupEnvParams {
	this := OutlookBackupEnvParams{}
	return &this
}

// GetFilteringPolicy returns the FilteringPolicy field value if set, zero value otherwise.
func (o *OutlookBackupEnvParams) GetFilteringPolicy() FilteringPolicyProto {
	if o == nil || o.FilteringPolicy == nil {
		var ret FilteringPolicyProto
		return ret
	}
	return *o.FilteringPolicy
}

// GetFilteringPolicyOk returns a tuple with the FilteringPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OutlookBackupEnvParams) GetFilteringPolicyOk() (*FilteringPolicyProto, bool) {
	if o == nil || o.FilteringPolicy == nil {
		return nil, false
	}
	return o.FilteringPolicy, true
}

// HasFilteringPolicy returns a boolean if a field has been set.
func (o *OutlookBackupEnvParams) HasFilteringPolicy() bool {
	if o != nil && o.FilteringPolicy != nil {
		return true
	}

	return false
}

// SetFilteringPolicy gets a reference to the given FilteringPolicyProto and assigns it to the FilteringPolicy field.
func (o *OutlookBackupEnvParams) SetFilteringPolicy(v FilteringPolicyProto) {
	o.FilteringPolicy = &v
}

// GetShouldBackupMailbox returns the ShouldBackupMailbox field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OutlookBackupEnvParams) GetShouldBackupMailbox() bool {
	if o == nil || o.ShouldBackupMailbox.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ShouldBackupMailbox.Get()
}

// GetShouldBackupMailboxOk returns a tuple with the ShouldBackupMailbox field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OutlookBackupEnvParams) GetShouldBackupMailboxOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ShouldBackupMailbox.Get(), o.ShouldBackupMailbox.IsSet()
}

// HasShouldBackupMailbox returns a boolean if a field has been set.
func (o *OutlookBackupEnvParams) HasShouldBackupMailbox() bool {
	if o != nil && o.ShouldBackupMailbox.IsSet() {
		return true
	}

	return false
}

// SetShouldBackupMailbox gets a reference to the given NullableBool and assigns it to the ShouldBackupMailbox field.
func (o *OutlookBackupEnvParams) SetShouldBackupMailbox(v bool) {
	o.ShouldBackupMailbox.Set(&v)
}
// SetShouldBackupMailboxNil sets the value for ShouldBackupMailbox to be an explicit nil
func (o *OutlookBackupEnvParams) SetShouldBackupMailboxNil() {
	o.ShouldBackupMailbox.Set(nil)
}

// UnsetShouldBackupMailbox ensures that no value is present for ShouldBackupMailbox, not even an explicit nil
func (o *OutlookBackupEnvParams) UnsetShouldBackupMailbox() {
	o.ShouldBackupMailbox.Unset()
}

func (o OutlookBackupEnvParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FilteringPolicy != nil {
		toSerialize["filteringPolicy"] = o.FilteringPolicy
	}
	if o.ShouldBackupMailbox.IsSet() {
		toSerialize["shouldBackupMailbox"] = o.ShouldBackupMailbox.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableOutlookBackupEnvParams struct {
	value *OutlookBackupEnvParams
	isSet bool
}

func (v NullableOutlookBackupEnvParams) Get() *OutlookBackupEnvParams {
	return v.value
}

func (v *NullableOutlookBackupEnvParams) Set(val *OutlookBackupEnvParams) {
	v.value = val
	v.isSet = true
}

func (v NullableOutlookBackupEnvParams) IsSet() bool {
	return v.isSet
}

func (v *NullableOutlookBackupEnvParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutlookBackupEnvParams(val *OutlookBackupEnvParams) *NullableOutlookBackupEnvParams {
	return &NullableOutlookBackupEnvParams{value: val, isSet: true}
}

func (v NullableOutlookBackupEnvParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutlookBackupEnvParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


