/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// DestroyClonedVMTaskInfoProto Each available extension is listed below along with the location of the proto file (relative to magneto/connectors) where it is defined.  DestroyClonedVMTaskInfoProto extension          Location           Extension ============================================================================= vmware::DestroyClonedTaskInfo:: vmware_destroy_cloned_vm_task_info            vmware/vmware.proto    100 hyperv::DestroyClonedTaskInfo:: hyperv_destroy_cloned_vm_task_info            hyperv/hyperv.proto    101 =============================================================================
type DestroyClonedVMTaskInfoProto struct {
	// If datastore was not unmounted, this field contains the reason for the same.
	DatastoreNotUnmountedReason NullableString `json:"datastoreNotUnmountedReason,omitempty"`
	// Whether the datastore corresponding to the clone view was unmounted from primary environment.
	DatastoreUnmounted NullableBool `json:"datastoreUnmounted,omitempty"`
	// Vector of all cloned entities that this destroy task will teardown.
	DestroyClonedEntityInfoVec []DestroyClonedEntityInfoProto `json:"destroyClonedEntityInfoVec,omitempty"`
	// The type of environment this destroy clone task info pertains to.
	Type NullableInt32 `json:"type,omitempty"`
	// Whether the clone view was deleted by the destroy task.
	ViewDeleted NullableBool `json:"viewDeleted,omitempty"`
}

// NewDestroyClonedVMTaskInfoProto instantiates a new DestroyClonedVMTaskInfoProto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDestroyClonedVMTaskInfoProto() *DestroyClonedVMTaskInfoProto {
	this := DestroyClonedVMTaskInfoProto{}
	return &this
}

// NewDestroyClonedVMTaskInfoProtoWithDefaults instantiates a new DestroyClonedVMTaskInfoProto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDestroyClonedVMTaskInfoProtoWithDefaults() *DestroyClonedVMTaskInfoProto {
	this := DestroyClonedVMTaskInfoProto{}
	return &this
}

// GetDatastoreNotUnmountedReason returns the DatastoreNotUnmountedReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DestroyClonedVMTaskInfoProto) GetDatastoreNotUnmountedReason() string {
	if o == nil || o.DatastoreNotUnmountedReason.Get() == nil {
		var ret string
		return ret
	}
	return *o.DatastoreNotUnmountedReason.Get()
}

// GetDatastoreNotUnmountedReasonOk returns a tuple with the DatastoreNotUnmountedReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DestroyClonedVMTaskInfoProto) GetDatastoreNotUnmountedReasonOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DatastoreNotUnmountedReason.Get(), o.DatastoreNotUnmountedReason.IsSet()
}

// HasDatastoreNotUnmountedReason returns a boolean if a field has been set.
func (o *DestroyClonedVMTaskInfoProto) HasDatastoreNotUnmountedReason() bool {
	if o != nil && o.DatastoreNotUnmountedReason.IsSet() {
		return true
	}

	return false
}

// SetDatastoreNotUnmountedReason gets a reference to the given NullableString and assigns it to the DatastoreNotUnmountedReason field.
func (o *DestroyClonedVMTaskInfoProto) SetDatastoreNotUnmountedReason(v string) {
	o.DatastoreNotUnmountedReason.Set(&v)
}
// SetDatastoreNotUnmountedReasonNil sets the value for DatastoreNotUnmountedReason to be an explicit nil
func (o *DestroyClonedVMTaskInfoProto) SetDatastoreNotUnmountedReasonNil() {
	o.DatastoreNotUnmountedReason.Set(nil)
}

// UnsetDatastoreNotUnmountedReason ensures that no value is present for DatastoreNotUnmountedReason, not even an explicit nil
func (o *DestroyClonedVMTaskInfoProto) UnsetDatastoreNotUnmountedReason() {
	o.DatastoreNotUnmountedReason.Unset()
}

// GetDatastoreUnmounted returns the DatastoreUnmounted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DestroyClonedVMTaskInfoProto) GetDatastoreUnmounted() bool {
	if o == nil || o.DatastoreUnmounted.Get() == nil {
		var ret bool
		return ret
	}
	return *o.DatastoreUnmounted.Get()
}

// GetDatastoreUnmountedOk returns a tuple with the DatastoreUnmounted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DestroyClonedVMTaskInfoProto) GetDatastoreUnmountedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DatastoreUnmounted.Get(), o.DatastoreUnmounted.IsSet()
}

// HasDatastoreUnmounted returns a boolean if a field has been set.
func (o *DestroyClonedVMTaskInfoProto) HasDatastoreUnmounted() bool {
	if o != nil && o.DatastoreUnmounted.IsSet() {
		return true
	}

	return false
}

// SetDatastoreUnmounted gets a reference to the given NullableBool and assigns it to the DatastoreUnmounted field.
func (o *DestroyClonedVMTaskInfoProto) SetDatastoreUnmounted(v bool) {
	o.DatastoreUnmounted.Set(&v)
}
// SetDatastoreUnmountedNil sets the value for DatastoreUnmounted to be an explicit nil
func (o *DestroyClonedVMTaskInfoProto) SetDatastoreUnmountedNil() {
	o.DatastoreUnmounted.Set(nil)
}

// UnsetDatastoreUnmounted ensures that no value is present for DatastoreUnmounted, not even an explicit nil
func (o *DestroyClonedVMTaskInfoProto) UnsetDatastoreUnmounted() {
	o.DatastoreUnmounted.Unset()
}

// GetDestroyClonedEntityInfoVec returns the DestroyClonedEntityInfoVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DestroyClonedVMTaskInfoProto) GetDestroyClonedEntityInfoVec() []DestroyClonedEntityInfoProto {
	if o == nil  {
		var ret []DestroyClonedEntityInfoProto
		return ret
	}
	return o.DestroyClonedEntityInfoVec
}

// GetDestroyClonedEntityInfoVecOk returns a tuple with the DestroyClonedEntityInfoVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DestroyClonedVMTaskInfoProto) GetDestroyClonedEntityInfoVecOk() (*[]DestroyClonedEntityInfoProto, bool) {
	if o == nil || o.DestroyClonedEntityInfoVec == nil {
		return nil, false
	}
	return &o.DestroyClonedEntityInfoVec, true
}

// HasDestroyClonedEntityInfoVec returns a boolean if a field has been set.
func (o *DestroyClonedVMTaskInfoProto) HasDestroyClonedEntityInfoVec() bool {
	if o != nil && o.DestroyClonedEntityInfoVec != nil {
		return true
	}

	return false
}

// SetDestroyClonedEntityInfoVec gets a reference to the given []DestroyClonedEntityInfoProto and assigns it to the DestroyClonedEntityInfoVec field.
func (o *DestroyClonedVMTaskInfoProto) SetDestroyClonedEntityInfoVec(v []DestroyClonedEntityInfoProto) {
	o.DestroyClonedEntityInfoVec = v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DestroyClonedVMTaskInfoProto) GetType() int32 {
	if o == nil || o.Type.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DestroyClonedVMTaskInfoProto) GetTypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *DestroyClonedVMTaskInfoProto) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableInt32 and assigns it to the Type field.
func (o *DestroyClonedVMTaskInfoProto) SetType(v int32) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *DestroyClonedVMTaskInfoProto) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *DestroyClonedVMTaskInfoProto) UnsetType() {
	o.Type.Unset()
}

// GetViewDeleted returns the ViewDeleted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DestroyClonedVMTaskInfoProto) GetViewDeleted() bool {
	if o == nil || o.ViewDeleted.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ViewDeleted.Get()
}

// GetViewDeletedOk returns a tuple with the ViewDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DestroyClonedVMTaskInfoProto) GetViewDeletedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewDeleted.Get(), o.ViewDeleted.IsSet()
}

// HasViewDeleted returns a boolean if a field has been set.
func (o *DestroyClonedVMTaskInfoProto) HasViewDeleted() bool {
	if o != nil && o.ViewDeleted.IsSet() {
		return true
	}

	return false
}

// SetViewDeleted gets a reference to the given NullableBool and assigns it to the ViewDeleted field.
func (o *DestroyClonedVMTaskInfoProto) SetViewDeleted(v bool) {
	o.ViewDeleted.Set(&v)
}
// SetViewDeletedNil sets the value for ViewDeleted to be an explicit nil
func (o *DestroyClonedVMTaskInfoProto) SetViewDeletedNil() {
	o.ViewDeleted.Set(nil)
}

// UnsetViewDeleted ensures that no value is present for ViewDeleted, not even an explicit nil
func (o *DestroyClonedVMTaskInfoProto) UnsetViewDeleted() {
	o.ViewDeleted.Unset()
}

func (o DestroyClonedVMTaskInfoProto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DatastoreNotUnmountedReason.IsSet() {
		toSerialize["datastoreNotUnmountedReason"] = o.DatastoreNotUnmountedReason.Get()
	}
	if o.DatastoreUnmounted.IsSet() {
		toSerialize["datastoreUnmounted"] = o.DatastoreUnmounted.Get()
	}
	if o.DestroyClonedEntityInfoVec != nil {
		toSerialize["destroyClonedEntityInfoVec"] = o.DestroyClonedEntityInfoVec
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.ViewDeleted.IsSet() {
		toSerialize["viewDeleted"] = o.ViewDeleted.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDestroyClonedVMTaskInfoProto struct {
	value *DestroyClonedVMTaskInfoProto
	isSet bool
}

func (v NullableDestroyClonedVMTaskInfoProto) Get() *DestroyClonedVMTaskInfoProto {
	return v.value
}

func (v *NullableDestroyClonedVMTaskInfoProto) Set(val *DestroyClonedVMTaskInfoProto) {
	v.value = val
	v.isSet = true
}

func (v NullableDestroyClonedVMTaskInfoProto) IsSet() bool {
	return v.isSet
}

func (v *NullableDestroyClonedVMTaskInfoProto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDestroyClonedVMTaskInfoProto(val *DestroyClonedVMTaskInfoProto) *NullableDestroyClonedVMTaskInfoProto {
	return &NullableDestroyClonedVMTaskInfoProto{value: val, isSet: true}
}

func (v NullableDestroyClonedVMTaskInfoProto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDestroyClonedVMTaskInfoProto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


