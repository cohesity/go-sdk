/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ResetS3SecretKeyParameters Specifies the parameters required to reset the S3 secret access key for the specified Cohesity user.
type ResetS3SecretKeyParameters struct {
	// Specifies the fully qualified domain name (FQDN) of an Active Directory or LOCAL for the default LOCAL domain on the Cohesity Cluster. If not specified, it is assumed to be LOCAL.
	Domain NullableString `json:"domain,omitempty"`
	// Specifies the tenant for which the users are to be deleted.
	TenantId NullableString `json:"tenantId,omitempty"`
	// Specifies the Cohesity user.
	Username NullableString `json:"username,omitempty"`
}

// NewResetS3SecretKeyParameters instantiates a new ResetS3SecretKeyParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResetS3SecretKeyParameters() *ResetS3SecretKeyParameters {
	this := ResetS3SecretKeyParameters{}
	return &this
}

// NewResetS3SecretKeyParametersWithDefaults instantiates a new ResetS3SecretKeyParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResetS3SecretKeyParametersWithDefaults() *ResetS3SecretKeyParameters {
	this := ResetS3SecretKeyParameters{}
	return &this
}

// GetDomain returns the Domain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResetS3SecretKeyParameters) GetDomain() string {
	if o == nil || o.Domain.Get() == nil {
		var ret string
		return ret
	}
	return *o.Domain.Get()
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResetS3SecretKeyParameters) GetDomainOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Domain.Get(), o.Domain.IsSet()
}

// HasDomain returns a boolean if a field has been set.
func (o *ResetS3SecretKeyParameters) HasDomain() bool {
	if o != nil && o.Domain.IsSet() {
		return true
	}

	return false
}

// SetDomain gets a reference to the given NullableString and assigns it to the Domain field.
func (o *ResetS3SecretKeyParameters) SetDomain(v string) {
	o.Domain.Set(&v)
}
// SetDomainNil sets the value for Domain to be an explicit nil
func (o *ResetS3SecretKeyParameters) SetDomainNil() {
	o.Domain.Set(nil)
}

// UnsetDomain ensures that no value is present for Domain, not even an explicit nil
func (o *ResetS3SecretKeyParameters) UnsetDomain() {
	o.Domain.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResetS3SecretKeyParameters) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResetS3SecretKeyParameters) GetTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *ResetS3SecretKeyParameters) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *ResetS3SecretKeyParameters) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *ResetS3SecretKeyParameters) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *ResetS3SecretKeyParameters) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResetS3SecretKeyParameters) GetUsername() string {
	if o == nil || o.Username.Get() == nil {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResetS3SecretKeyParameters) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *ResetS3SecretKeyParameters) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *ResetS3SecretKeyParameters) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *ResetS3SecretKeyParameters) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *ResetS3SecretKeyParameters) UnsetUsername() {
	o.Username.Unset()
}

func (o ResetS3SecretKeyParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Domain.IsSet() {
		toSerialize["domain"] = o.Domain.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableResetS3SecretKeyParameters struct {
	value *ResetS3SecretKeyParameters
	isSet bool
}

func (v NullableResetS3SecretKeyParameters) Get() *ResetS3SecretKeyParameters {
	return v.value
}

func (v *NullableResetS3SecretKeyParameters) Set(val *ResetS3SecretKeyParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableResetS3SecretKeyParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableResetS3SecretKeyParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResetS3SecretKeyParameters(val *ResetS3SecretKeyParameters) *NullableResetS3SecretKeyParameters {
	return &NullableResetS3SecretKeyParameters{value: val, isSet: true}
}

func (v NullableResetS3SecretKeyParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResetS3SecretKeyParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


