/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// AmazonCloudCredentials Specifies the cloud credentials to connect to a Amazon service account. Glacier, S3, and S3-compatible clouds all use these credentials.
type AmazonCloudCredentials struct {
	// Specifies the access key for Amazon service account. See the Cohesity online help for the value to specify for this field based on the current S3 Compatible Vault (External Target) type. For example for Iron Mountain, specify the user name from Iron Mountain for this field.
	AccessKeyId NullableString `json:"accessKeyId,omitempty"`
	// Specifies the iauth method used for the request See the Cohesity online help for the value to specify for this field based on the current S3-compatible Vault (External Target) type. Specifies the authentication method to be used for API calls. 'kUseIAMUser' indicates a user based authentication. 'kUseIAMRole' indicates a role based authentication, used only for AWS CE.
	AuthMethod NullableString `json:"authMethod,omitempty"`
	C2sAccessPortal *C2SAccessPortal `json:"c2sAccessPortal,omitempty"`
	// Specifies the iam role arn Amazon service account. See the Cohesity online help for the value to specify for this field based on the current S3-compatible Vault (External Target) type.
	IamRoleArn NullableString `json:"iamRoleArn,omitempty"`
	// Specifies the region to use for the Amazon service account.
	Region NullableString `json:"region,omitempty"`
	// Specifies the secret access key for Amazon service account. See the Cohesity online help for the value to specify for this field based on the current S3-compatible Vault (External Target) type.
	SecretAccessKey NullableString `json:"secretAccessKey,omitempty"`
	// Specifies the URL (Endpoint) for the service such as s3like.notamazon.com. This field is only significant for S3-compatible cloud services.
	ServiceUrl NullableString `json:"serviceUrl,omitempty"`
	// Specifies the version of the S3 Compliance. This field must be set to 2 or 4 and the default version is 2. This field is only significant for S3-compatible cloud services. See the Cohesity online help for the supported S3-compatible Vault (External Target) types and the value to specify for this field based on the current S3-compatible Vault (External Target) type.
	SignatureVersion NullableInt32 `json:"signatureVersion,omitempty"`
	// Specifies the storage class of AWS. AmazonTierType specifies the storage class for AWS. 'kAmazonS3Standard' indicates a tier type of Amazon properties that is accessed frequently. 'kAmazonS3StandardIA' indicates a tier type of Amazon properties that is accessed less frequently, but requires rapid access when needed. 'kAmazonGlacier' indicates a tier type of Amazon properties that is accessed rarely. 'kAmazonS3OneZoneIA' indicates a tier type of Amazon properties for long-lived, but less frequently accessed data. 'kAmazonS3IntelligentTiering' indicates a tier type of Amazon properties for data with unknown or changing access patterns. 'kAmazonS3Glacier' indicates a tier type of Amazon properties for data that provides secure, durable object storage for long-term data retention and digital preservation. It provides three options for access to archives, from a few minutes to several hours. 'kAmazonS3GlacierDeepArchive' indicates a tier type of Amazon properties for data that provides secure, durable object storage for long-term data retention and digital preservation. It provides two access options ranging from 12 to 48 hours.
	TierType NullableString `json:"tierType,omitempty"`
	// Specifies whether to use http or https to connect to the service. If true, a secure connection (https) is used. This field is only significant for S3-compatible cloud services.
	UseHttps NullableBool `json:"useHttps,omitempty"`
}

// NewAmazonCloudCredentials instantiates a new AmazonCloudCredentials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAmazonCloudCredentials() *AmazonCloudCredentials {
	this := AmazonCloudCredentials{}
	return &this
}

// NewAmazonCloudCredentialsWithDefaults instantiates a new AmazonCloudCredentials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAmazonCloudCredentialsWithDefaults() *AmazonCloudCredentials {
	this := AmazonCloudCredentials{}
	return &this
}

// GetAccessKeyId returns the AccessKeyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AmazonCloudCredentials) GetAccessKeyId() string {
	if o == nil || o.AccessKeyId.Get() == nil {
		var ret string
		return ret
	}
	return *o.AccessKeyId.Get()
}

// GetAccessKeyIdOk returns a tuple with the AccessKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AmazonCloudCredentials) GetAccessKeyIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AccessKeyId.Get(), o.AccessKeyId.IsSet()
}

// HasAccessKeyId returns a boolean if a field has been set.
func (o *AmazonCloudCredentials) HasAccessKeyId() bool {
	if o != nil && o.AccessKeyId.IsSet() {
		return true
	}

	return false
}

// SetAccessKeyId gets a reference to the given NullableString and assigns it to the AccessKeyId field.
func (o *AmazonCloudCredentials) SetAccessKeyId(v string) {
	o.AccessKeyId.Set(&v)
}
// SetAccessKeyIdNil sets the value for AccessKeyId to be an explicit nil
func (o *AmazonCloudCredentials) SetAccessKeyIdNil() {
	o.AccessKeyId.Set(nil)
}

// UnsetAccessKeyId ensures that no value is present for AccessKeyId, not even an explicit nil
func (o *AmazonCloudCredentials) UnsetAccessKeyId() {
	o.AccessKeyId.Unset()
}

// GetAuthMethod returns the AuthMethod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AmazonCloudCredentials) GetAuthMethod() string {
	if o == nil || o.AuthMethod.Get() == nil {
		var ret string
		return ret
	}
	return *o.AuthMethod.Get()
}

// GetAuthMethodOk returns a tuple with the AuthMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AmazonCloudCredentials) GetAuthMethodOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AuthMethod.Get(), o.AuthMethod.IsSet()
}

// HasAuthMethod returns a boolean if a field has been set.
func (o *AmazonCloudCredentials) HasAuthMethod() bool {
	if o != nil && o.AuthMethod.IsSet() {
		return true
	}

	return false
}

// SetAuthMethod gets a reference to the given NullableString and assigns it to the AuthMethod field.
func (o *AmazonCloudCredentials) SetAuthMethod(v string) {
	o.AuthMethod.Set(&v)
}
// SetAuthMethodNil sets the value for AuthMethod to be an explicit nil
func (o *AmazonCloudCredentials) SetAuthMethodNil() {
	o.AuthMethod.Set(nil)
}

// UnsetAuthMethod ensures that no value is present for AuthMethod, not even an explicit nil
func (o *AmazonCloudCredentials) UnsetAuthMethod() {
	o.AuthMethod.Unset()
}

// GetC2sAccessPortal returns the C2sAccessPortal field value if set, zero value otherwise.
func (o *AmazonCloudCredentials) GetC2sAccessPortal() C2SAccessPortal {
	if o == nil || o.C2sAccessPortal == nil {
		var ret C2SAccessPortal
		return ret
	}
	return *o.C2sAccessPortal
}

// GetC2sAccessPortalOk returns a tuple with the C2sAccessPortal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmazonCloudCredentials) GetC2sAccessPortalOk() (*C2SAccessPortal, bool) {
	if o == nil || o.C2sAccessPortal == nil {
		return nil, false
	}
	return o.C2sAccessPortal, true
}

// HasC2sAccessPortal returns a boolean if a field has been set.
func (o *AmazonCloudCredentials) HasC2sAccessPortal() bool {
	if o != nil && o.C2sAccessPortal != nil {
		return true
	}

	return false
}

// SetC2sAccessPortal gets a reference to the given C2SAccessPortal and assigns it to the C2sAccessPortal field.
func (o *AmazonCloudCredentials) SetC2sAccessPortal(v C2SAccessPortal) {
	o.C2sAccessPortal = &v
}

// GetIamRoleArn returns the IamRoleArn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AmazonCloudCredentials) GetIamRoleArn() string {
	if o == nil || o.IamRoleArn.Get() == nil {
		var ret string
		return ret
	}
	return *o.IamRoleArn.Get()
}

// GetIamRoleArnOk returns a tuple with the IamRoleArn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AmazonCloudCredentials) GetIamRoleArnOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IamRoleArn.Get(), o.IamRoleArn.IsSet()
}

// HasIamRoleArn returns a boolean if a field has been set.
func (o *AmazonCloudCredentials) HasIamRoleArn() bool {
	if o != nil && o.IamRoleArn.IsSet() {
		return true
	}

	return false
}

// SetIamRoleArn gets a reference to the given NullableString and assigns it to the IamRoleArn field.
func (o *AmazonCloudCredentials) SetIamRoleArn(v string) {
	o.IamRoleArn.Set(&v)
}
// SetIamRoleArnNil sets the value for IamRoleArn to be an explicit nil
func (o *AmazonCloudCredentials) SetIamRoleArnNil() {
	o.IamRoleArn.Set(nil)
}

// UnsetIamRoleArn ensures that no value is present for IamRoleArn, not even an explicit nil
func (o *AmazonCloudCredentials) UnsetIamRoleArn() {
	o.IamRoleArn.Unset()
}

// GetRegion returns the Region field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AmazonCloudCredentials) GetRegion() string {
	if o == nil || o.Region.Get() == nil {
		var ret string
		return ret
	}
	return *o.Region.Get()
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AmazonCloudCredentials) GetRegionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Region.Get(), o.Region.IsSet()
}

// HasRegion returns a boolean if a field has been set.
func (o *AmazonCloudCredentials) HasRegion() bool {
	if o != nil && o.Region.IsSet() {
		return true
	}

	return false
}

// SetRegion gets a reference to the given NullableString and assigns it to the Region field.
func (o *AmazonCloudCredentials) SetRegion(v string) {
	o.Region.Set(&v)
}
// SetRegionNil sets the value for Region to be an explicit nil
func (o *AmazonCloudCredentials) SetRegionNil() {
	o.Region.Set(nil)
}

// UnsetRegion ensures that no value is present for Region, not even an explicit nil
func (o *AmazonCloudCredentials) UnsetRegion() {
	o.Region.Unset()
}

// GetSecretAccessKey returns the SecretAccessKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AmazonCloudCredentials) GetSecretAccessKey() string {
	if o == nil || o.SecretAccessKey.Get() == nil {
		var ret string
		return ret
	}
	return *o.SecretAccessKey.Get()
}

// GetSecretAccessKeyOk returns a tuple with the SecretAccessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AmazonCloudCredentials) GetSecretAccessKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SecretAccessKey.Get(), o.SecretAccessKey.IsSet()
}

// HasSecretAccessKey returns a boolean if a field has been set.
func (o *AmazonCloudCredentials) HasSecretAccessKey() bool {
	if o != nil && o.SecretAccessKey.IsSet() {
		return true
	}

	return false
}

// SetSecretAccessKey gets a reference to the given NullableString and assigns it to the SecretAccessKey field.
func (o *AmazonCloudCredentials) SetSecretAccessKey(v string) {
	o.SecretAccessKey.Set(&v)
}
// SetSecretAccessKeyNil sets the value for SecretAccessKey to be an explicit nil
func (o *AmazonCloudCredentials) SetSecretAccessKeyNil() {
	o.SecretAccessKey.Set(nil)
}

// UnsetSecretAccessKey ensures that no value is present for SecretAccessKey, not even an explicit nil
func (o *AmazonCloudCredentials) UnsetSecretAccessKey() {
	o.SecretAccessKey.Unset()
}

// GetServiceUrl returns the ServiceUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AmazonCloudCredentials) GetServiceUrl() string {
	if o == nil || o.ServiceUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.ServiceUrl.Get()
}

// GetServiceUrlOk returns a tuple with the ServiceUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AmazonCloudCredentials) GetServiceUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ServiceUrl.Get(), o.ServiceUrl.IsSet()
}

// HasServiceUrl returns a boolean if a field has been set.
func (o *AmazonCloudCredentials) HasServiceUrl() bool {
	if o != nil && o.ServiceUrl.IsSet() {
		return true
	}

	return false
}

// SetServiceUrl gets a reference to the given NullableString and assigns it to the ServiceUrl field.
func (o *AmazonCloudCredentials) SetServiceUrl(v string) {
	o.ServiceUrl.Set(&v)
}
// SetServiceUrlNil sets the value for ServiceUrl to be an explicit nil
func (o *AmazonCloudCredentials) SetServiceUrlNil() {
	o.ServiceUrl.Set(nil)
}

// UnsetServiceUrl ensures that no value is present for ServiceUrl, not even an explicit nil
func (o *AmazonCloudCredentials) UnsetServiceUrl() {
	o.ServiceUrl.Unset()
}

// GetSignatureVersion returns the SignatureVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AmazonCloudCredentials) GetSignatureVersion() int32 {
	if o == nil || o.SignatureVersion.Get() == nil {
		var ret int32
		return ret
	}
	return *o.SignatureVersion.Get()
}

// GetSignatureVersionOk returns a tuple with the SignatureVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AmazonCloudCredentials) GetSignatureVersionOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SignatureVersion.Get(), o.SignatureVersion.IsSet()
}

// HasSignatureVersion returns a boolean if a field has been set.
func (o *AmazonCloudCredentials) HasSignatureVersion() bool {
	if o != nil && o.SignatureVersion.IsSet() {
		return true
	}

	return false
}

// SetSignatureVersion gets a reference to the given NullableInt32 and assigns it to the SignatureVersion field.
func (o *AmazonCloudCredentials) SetSignatureVersion(v int32) {
	o.SignatureVersion.Set(&v)
}
// SetSignatureVersionNil sets the value for SignatureVersion to be an explicit nil
func (o *AmazonCloudCredentials) SetSignatureVersionNil() {
	o.SignatureVersion.Set(nil)
}

// UnsetSignatureVersion ensures that no value is present for SignatureVersion, not even an explicit nil
func (o *AmazonCloudCredentials) UnsetSignatureVersion() {
	o.SignatureVersion.Unset()
}

// GetTierType returns the TierType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AmazonCloudCredentials) GetTierType() string {
	if o == nil || o.TierType.Get() == nil {
		var ret string
		return ret
	}
	return *o.TierType.Get()
}

// GetTierTypeOk returns a tuple with the TierType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AmazonCloudCredentials) GetTierTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TierType.Get(), o.TierType.IsSet()
}

// HasTierType returns a boolean if a field has been set.
func (o *AmazonCloudCredentials) HasTierType() bool {
	if o != nil && o.TierType.IsSet() {
		return true
	}

	return false
}

// SetTierType gets a reference to the given NullableString and assigns it to the TierType field.
func (o *AmazonCloudCredentials) SetTierType(v string) {
	o.TierType.Set(&v)
}
// SetTierTypeNil sets the value for TierType to be an explicit nil
func (o *AmazonCloudCredentials) SetTierTypeNil() {
	o.TierType.Set(nil)
}

// UnsetTierType ensures that no value is present for TierType, not even an explicit nil
func (o *AmazonCloudCredentials) UnsetTierType() {
	o.TierType.Unset()
}

// GetUseHttps returns the UseHttps field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AmazonCloudCredentials) GetUseHttps() bool {
	if o == nil || o.UseHttps.Get() == nil {
		var ret bool
		return ret
	}
	return *o.UseHttps.Get()
}

// GetUseHttpsOk returns a tuple with the UseHttps field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AmazonCloudCredentials) GetUseHttpsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UseHttps.Get(), o.UseHttps.IsSet()
}

// HasUseHttps returns a boolean if a field has been set.
func (o *AmazonCloudCredentials) HasUseHttps() bool {
	if o != nil && o.UseHttps.IsSet() {
		return true
	}

	return false
}

// SetUseHttps gets a reference to the given NullableBool and assigns it to the UseHttps field.
func (o *AmazonCloudCredentials) SetUseHttps(v bool) {
	o.UseHttps.Set(&v)
}
// SetUseHttpsNil sets the value for UseHttps to be an explicit nil
func (o *AmazonCloudCredentials) SetUseHttpsNil() {
	o.UseHttps.Set(nil)
}

// UnsetUseHttps ensures that no value is present for UseHttps, not even an explicit nil
func (o *AmazonCloudCredentials) UnsetUseHttps() {
	o.UseHttps.Unset()
}

func (o AmazonCloudCredentials) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessKeyId.IsSet() {
		toSerialize["accessKeyId"] = o.AccessKeyId.Get()
	}
	if o.AuthMethod.IsSet() {
		toSerialize["authMethod"] = o.AuthMethod.Get()
	}
	if o.C2sAccessPortal != nil {
		toSerialize["c2sAccessPortal"] = o.C2sAccessPortal
	}
	if o.IamRoleArn.IsSet() {
		toSerialize["iamRoleArn"] = o.IamRoleArn.Get()
	}
	if o.Region.IsSet() {
		toSerialize["region"] = o.Region.Get()
	}
	if o.SecretAccessKey.IsSet() {
		toSerialize["secretAccessKey"] = o.SecretAccessKey.Get()
	}
	if o.ServiceUrl.IsSet() {
		toSerialize["serviceUrl"] = o.ServiceUrl.Get()
	}
	if o.SignatureVersion.IsSet() {
		toSerialize["signatureVersion"] = o.SignatureVersion.Get()
	}
	if o.TierType.IsSet() {
		toSerialize["tierType"] = o.TierType.Get()
	}
	if o.UseHttps.IsSet() {
		toSerialize["useHttps"] = o.UseHttps.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAmazonCloudCredentials struct {
	value *AmazonCloudCredentials
	isSet bool
}

func (v NullableAmazonCloudCredentials) Get() *AmazonCloudCredentials {
	return v.value
}

func (v *NullableAmazonCloudCredentials) Set(val *AmazonCloudCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullableAmazonCloudCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableAmazonCloudCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmazonCloudCredentials(val *AmazonCloudCredentials) *NullableAmazonCloudCredentials {
	return &NullableAmazonCloudCredentials{value: val, isSet: true}
}

func (v NullableAmazonCloudCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmazonCloudCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


