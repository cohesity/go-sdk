/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// SmbActiveSession Specifies an active session and its opens.
type SmbActiveSession struct {
	// Specifies the list of active opens of the file in this session.
	ActiveOpens []SmbActiveOpen `json:"activeOpens,omitempty"`
	// Specifies the IP address from which the file is still open.
	ClientIp NullableString `json:"clientIp,omitempty"`
	// Specifies the domain of the user.
	Domain NullableString `json:"domain,omitempty"`
	// Specifies the IP address of the server where the file exists.
	ServerIp NullableString `json:"serverIp,omitempty"`
	// Specifies the id of the session.
	SessionId NullableInt64 `json:"sessionId,omitempty"`
	// Specifies the username who keeps the file open.
	Username NullableString `json:"username,omitempty"`
}

// NewSmbActiveSession instantiates a new SmbActiveSession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmbActiveSession() *SmbActiveSession {
	this := SmbActiveSession{}
	return &this
}

// NewSmbActiveSessionWithDefaults instantiates a new SmbActiveSession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmbActiveSessionWithDefaults() *SmbActiveSession {
	this := SmbActiveSession{}
	return &this
}

// GetActiveOpens returns the ActiveOpens field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmbActiveSession) GetActiveOpens() []SmbActiveOpen {
	if o == nil  {
		var ret []SmbActiveOpen
		return ret
	}
	return o.ActiveOpens
}

// GetActiveOpensOk returns a tuple with the ActiveOpens field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmbActiveSession) GetActiveOpensOk() (*[]SmbActiveOpen, bool) {
	if o == nil || o.ActiveOpens == nil {
		return nil, false
	}
	return &o.ActiveOpens, true
}

// HasActiveOpens returns a boolean if a field has been set.
func (o *SmbActiveSession) HasActiveOpens() bool {
	if o != nil && o.ActiveOpens != nil {
		return true
	}

	return false
}

// SetActiveOpens gets a reference to the given []SmbActiveOpen and assigns it to the ActiveOpens field.
func (o *SmbActiveSession) SetActiveOpens(v []SmbActiveOpen) {
	o.ActiveOpens = v
}

// GetClientIp returns the ClientIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmbActiveSession) GetClientIp() string {
	if o == nil || o.ClientIp.Get() == nil {
		var ret string
		return ret
	}
	return *o.ClientIp.Get()
}

// GetClientIpOk returns a tuple with the ClientIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmbActiveSession) GetClientIpOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClientIp.Get(), o.ClientIp.IsSet()
}

// HasClientIp returns a boolean if a field has been set.
func (o *SmbActiveSession) HasClientIp() bool {
	if o != nil && o.ClientIp.IsSet() {
		return true
	}

	return false
}

// SetClientIp gets a reference to the given NullableString and assigns it to the ClientIp field.
func (o *SmbActiveSession) SetClientIp(v string) {
	o.ClientIp.Set(&v)
}
// SetClientIpNil sets the value for ClientIp to be an explicit nil
func (o *SmbActiveSession) SetClientIpNil() {
	o.ClientIp.Set(nil)
}

// UnsetClientIp ensures that no value is present for ClientIp, not even an explicit nil
func (o *SmbActiveSession) UnsetClientIp() {
	o.ClientIp.Unset()
}

// GetDomain returns the Domain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmbActiveSession) GetDomain() string {
	if o == nil || o.Domain.Get() == nil {
		var ret string
		return ret
	}
	return *o.Domain.Get()
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmbActiveSession) GetDomainOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Domain.Get(), o.Domain.IsSet()
}

// HasDomain returns a boolean if a field has been set.
func (o *SmbActiveSession) HasDomain() bool {
	if o != nil && o.Domain.IsSet() {
		return true
	}

	return false
}

// SetDomain gets a reference to the given NullableString and assigns it to the Domain field.
func (o *SmbActiveSession) SetDomain(v string) {
	o.Domain.Set(&v)
}
// SetDomainNil sets the value for Domain to be an explicit nil
func (o *SmbActiveSession) SetDomainNil() {
	o.Domain.Set(nil)
}

// UnsetDomain ensures that no value is present for Domain, not even an explicit nil
func (o *SmbActiveSession) UnsetDomain() {
	o.Domain.Unset()
}

// GetServerIp returns the ServerIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmbActiveSession) GetServerIp() string {
	if o == nil || o.ServerIp.Get() == nil {
		var ret string
		return ret
	}
	return *o.ServerIp.Get()
}

// GetServerIpOk returns a tuple with the ServerIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmbActiveSession) GetServerIpOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ServerIp.Get(), o.ServerIp.IsSet()
}

// HasServerIp returns a boolean if a field has been set.
func (o *SmbActiveSession) HasServerIp() bool {
	if o != nil && o.ServerIp.IsSet() {
		return true
	}

	return false
}

// SetServerIp gets a reference to the given NullableString and assigns it to the ServerIp field.
func (o *SmbActiveSession) SetServerIp(v string) {
	o.ServerIp.Set(&v)
}
// SetServerIpNil sets the value for ServerIp to be an explicit nil
func (o *SmbActiveSession) SetServerIpNil() {
	o.ServerIp.Set(nil)
}

// UnsetServerIp ensures that no value is present for ServerIp, not even an explicit nil
func (o *SmbActiveSession) UnsetServerIp() {
	o.ServerIp.Unset()
}

// GetSessionId returns the SessionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmbActiveSession) GetSessionId() int64 {
	if o == nil || o.SessionId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SessionId.Get()
}

// GetSessionIdOk returns a tuple with the SessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmbActiveSession) GetSessionIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SessionId.Get(), o.SessionId.IsSet()
}

// HasSessionId returns a boolean if a field has been set.
func (o *SmbActiveSession) HasSessionId() bool {
	if o != nil && o.SessionId.IsSet() {
		return true
	}

	return false
}

// SetSessionId gets a reference to the given NullableInt64 and assigns it to the SessionId field.
func (o *SmbActiveSession) SetSessionId(v int64) {
	o.SessionId.Set(&v)
}
// SetSessionIdNil sets the value for SessionId to be an explicit nil
func (o *SmbActiveSession) SetSessionIdNil() {
	o.SessionId.Set(nil)
}

// UnsetSessionId ensures that no value is present for SessionId, not even an explicit nil
func (o *SmbActiveSession) UnsetSessionId() {
	o.SessionId.Unset()
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmbActiveSession) GetUsername() string {
	if o == nil || o.Username.Get() == nil {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmbActiveSession) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *SmbActiveSession) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *SmbActiveSession) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *SmbActiveSession) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *SmbActiveSession) UnsetUsername() {
	o.Username.Unset()
}

func (o SmbActiveSession) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ActiveOpens != nil {
		toSerialize["activeOpens"] = o.ActiveOpens
	}
	if o.ClientIp.IsSet() {
		toSerialize["clientIp"] = o.ClientIp.Get()
	}
	if o.Domain.IsSet() {
		toSerialize["domain"] = o.Domain.Get()
	}
	if o.ServerIp.IsSet() {
		toSerialize["serverIp"] = o.ServerIp.Get()
	}
	if o.SessionId.IsSet() {
		toSerialize["sessionId"] = o.SessionId.Get()
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSmbActiveSession struct {
	value *SmbActiveSession
	isSet bool
}

func (v NullableSmbActiveSession) Get() *SmbActiveSession {
	return v.value
}

func (v *NullableSmbActiveSession) Set(val *SmbActiveSession) {
	v.value = val
	v.isSet = true
}

func (v NullableSmbActiveSession) IsSet() bool {
	return v.isSet
}

func (v *NullableSmbActiveSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmbActiveSession(val *SmbActiveSession) *NullableSmbActiveSession {
	return &NullableSmbActiveSession{value: val, isSet: true}
}

func (v NullableSmbActiveSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmbActiveSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


