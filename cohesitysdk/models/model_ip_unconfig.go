/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// IpUnconfig Specifies the unconfiguration of an IP.
type IpUnconfig struct {
	// IpFamily of this config.
	IpFamily NullableInt32 `json:"IpFamily,omitempty"`
	// The interface name.
	InterfaceName NullableString `json:"interfaceName,omitempty"`
	// Node ids.
	NodeIds []int64 `json:"nodeIds,omitempty"`
}

// NewIpUnconfig instantiates a new IpUnconfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpUnconfig() *IpUnconfig {
	this := IpUnconfig{}
	return &this
}

// NewIpUnconfigWithDefaults instantiates a new IpUnconfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpUnconfigWithDefaults() *IpUnconfig {
	this := IpUnconfig{}
	return &this
}

// GetIpFamily returns the IpFamily field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpUnconfig) GetIpFamily() int32 {
	if o == nil || o.IpFamily.Get() == nil {
		var ret int32
		return ret
	}
	return *o.IpFamily.Get()
}

// GetIpFamilyOk returns a tuple with the IpFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpUnconfig) GetIpFamilyOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IpFamily.Get(), o.IpFamily.IsSet()
}

// HasIpFamily returns a boolean if a field has been set.
func (o *IpUnconfig) HasIpFamily() bool {
	if o != nil && o.IpFamily.IsSet() {
		return true
	}

	return false
}

// SetIpFamily gets a reference to the given NullableInt32 and assigns it to the IpFamily field.
func (o *IpUnconfig) SetIpFamily(v int32) {
	o.IpFamily.Set(&v)
}
// SetIpFamilyNil sets the value for IpFamily to be an explicit nil
func (o *IpUnconfig) SetIpFamilyNil() {
	o.IpFamily.Set(nil)
}

// UnsetIpFamily ensures that no value is present for IpFamily, not even an explicit nil
func (o *IpUnconfig) UnsetIpFamily() {
	o.IpFamily.Unset()
}

// GetInterfaceName returns the InterfaceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpUnconfig) GetInterfaceName() string {
	if o == nil || o.InterfaceName.Get() == nil {
		var ret string
		return ret
	}
	return *o.InterfaceName.Get()
}

// GetInterfaceNameOk returns a tuple with the InterfaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpUnconfig) GetInterfaceNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InterfaceName.Get(), o.InterfaceName.IsSet()
}

// HasInterfaceName returns a boolean if a field has been set.
func (o *IpUnconfig) HasInterfaceName() bool {
	if o != nil && o.InterfaceName.IsSet() {
		return true
	}

	return false
}

// SetInterfaceName gets a reference to the given NullableString and assigns it to the InterfaceName field.
func (o *IpUnconfig) SetInterfaceName(v string) {
	o.InterfaceName.Set(&v)
}
// SetInterfaceNameNil sets the value for InterfaceName to be an explicit nil
func (o *IpUnconfig) SetInterfaceNameNil() {
	o.InterfaceName.Set(nil)
}

// UnsetInterfaceName ensures that no value is present for InterfaceName, not even an explicit nil
func (o *IpUnconfig) UnsetInterfaceName() {
	o.InterfaceName.Unset()
}

// GetNodeIds returns the NodeIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpUnconfig) GetNodeIds() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.NodeIds
}

// GetNodeIdsOk returns a tuple with the NodeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpUnconfig) GetNodeIdsOk() (*[]int64, bool) {
	if o == nil || o.NodeIds == nil {
		return nil, false
	}
	return &o.NodeIds, true
}

// HasNodeIds returns a boolean if a field has been set.
func (o *IpUnconfig) HasNodeIds() bool {
	if o != nil && o.NodeIds != nil {
		return true
	}

	return false
}

// SetNodeIds gets a reference to the given []int64 and assigns it to the NodeIds field.
func (o *IpUnconfig) SetNodeIds(v []int64) {
	o.NodeIds = v
}

func (o IpUnconfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IpFamily.IsSet() {
		toSerialize["IpFamily"] = o.IpFamily.Get()
	}
	if o.InterfaceName.IsSet() {
		toSerialize["interfaceName"] = o.InterfaceName.Get()
	}
	if o.NodeIds != nil {
		toSerialize["nodeIds"] = o.NodeIds
	}
	return json.Marshal(toSerialize)
}

type NullableIpUnconfig struct {
	value *IpUnconfig
	isSet bool
}

func (v NullableIpUnconfig) Get() *IpUnconfig {
	return v.value
}

func (v *NullableIpUnconfig) Set(val *IpUnconfig) {
	v.value = val
	v.isSet = true
}

func (v NullableIpUnconfig) IsSet() bool {
	return v.isSet
}

func (v *NullableIpUnconfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpUnconfig(val *IpUnconfig) *NullableIpUnconfig {
	return &NullableIpUnconfig{value: val, isSet: true}
}

func (v NullableIpUnconfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpUnconfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


