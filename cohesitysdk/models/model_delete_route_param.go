/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// DeleteRouteParam Specifies the delete param of a Static Route.
type DeleteRouteParam struct {
	// Destination network.  Specifies the destination network of the Static Route. overrideDescription: true
	DestNetwork NullableString `json:"destNetwork,omitempty"`
	// Specifies the network interfaces name to use for communicating with the destination network.
	IfName NullableString `json:"ifName,omitempty"`
	// Specifies the network interfaces group or vlan interface group to use for communicating with the destination network.
	IfaceGroupName NullableString `json:"ifaceGroupName,omitempty"`
}

// NewDeleteRouteParam instantiates a new DeleteRouteParam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteRouteParam() *DeleteRouteParam {
	this := DeleteRouteParam{}
	return &this
}

// NewDeleteRouteParamWithDefaults instantiates a new DeleteRouteParam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteRouteParamWithDefaults() *DeleteRouteParam {
	this := DeleteRouteParam{}
	return &this
}

// GetDestNetwork returns the DestNetwork field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeleteRouteParam) GetDestNetwork() string {
	if o == nil || o.DestNetwork.Get() == nil {
		var ret string
		return ret
	}
	return *o.DestNetwork.Get()
}

// GetDestNetworkOk returns a tuple with the DestNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeleteRouteParam) GetDestNetworkOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DestNetwork.Get(), o.DestNetwork.IsSet()
}

// HasDestNetwork returns a boolean if a field has been set.
func (o *DeleteRouteParam) HasDestNetwork() bool {
	if o != nil && o.DestNetwork.IsSet() {
		return true
	}

	return false
}

// SetDestNetwork gets a reference to the given NullableString and assigns it to the DestNetwork field.
func (o *DeleteRouteParam) SetDestNetwork(v string) {
	o.DestNetwork.Set(&v)
}
// SetDestNetworkNil sets the value for DestNetwork to be an explicit nil
func (o *DeleteRouteParam) SetDestNetworkNil() {
	o.DestNetwork.Set(nil)
}

// UnsetDestNetwork ensures that no value is present for DestNetwork, not even an explicit nil
func (o *DeleteRouteParam) UnsetDestNetwork() {
	o.DestNetwork.Unset()
}

// GetIfName returns the IfName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeleteRouteParam) GetIfName() string {
	if o == nil || o.IfName.Get() == nil {
		var ret string
		return ret
	}
	return *o.IfName.Get()
}

// GetIfNameOk returns a tuple with the IfName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeleteRouteParam) GetIfNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IfName.Get(), o.IfName.IsSet()
}

// HasIfName returns a boolean if a field has been set.
func (o *DeleteRouteParam) HasIfName() bool {
	if o != nil && o.IfName.IsSet() {
		return true
	}

	return false
}

// SetIfName gets a reference to the given NullableString and assigns it to the IfName field.
func (o *DeleteRouteParam) SetIfName(v string) {
	o.IfName.Set(&v)
}
// SetIfNameNil sets the value for IfName to be an explicit nil
func (o *DeleteRouteParam) SetIfNameNil() {
	o.IfName.Set(nil)
}

// UnsetIfName ensures that no value is present for IfName, not even an explicit nil
func (o *DeleteRouteParam) UnsetIfName() {
	o.IfName.Unset()
}

// GetIfaceGroupName returns the IfaceGroupName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeleteRouteParam) GetIfaceGroupName() string {
	if o == nil || o.IfaceGroupName.Get() == nil {
		var ret string
		return ret
	}
	return *o.IfaceGroupName.Get()
}

// GetIfaceGroupNameOk returns a tuple with the IfaceGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeleteRouteParam) GetIfaceGroupNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IfaceGroupName.Get(), o.IfaceGroupName.IsSet()
}

// HasIfaceGroupName returns a boolean if a field has been set.
func (o *DeleteRouteParam) HasIfaceGroupName() bool {
	if o != nil && o.IfaceGroupName.IsSet() {
		return true
	}

	return false
}

// SetIfaceGroupName gets a reference to the given NullableString and assigns it to the IfaceGroupName field.
func (o *DeleteRouteParam) SetIfaceGroupName(v string) {
	o.IfaceGroupName.Set(&v)
}
// SetIfaceGroupNameNil sets the value for IfaceGroupName to be an explicit nil
func (o *DeleteRouteParam) SetIfaceGroupNameNil() {
	o.IfaceGroupName.Set(nil)
}

// UnsetIfaceGroupName ensures that no value is present for IfaceGroupName, not even an explicit nil
func (o *DeleteRouteParam) UnsetIfaceGroupName() {
	o.IfaceGroupName.Unset()
}

func (o DeleteRouteParam) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DestNetwork.IsSet() {
		toSerialize["destNetwork"] = o.DestNetwork.Get()
	}
	if o.IfName.IsSet() {
		toSerialize["ifName"] = o.IfName.Get()
	}
	if o.IfaceGroupName.IsSet() {
		toSerialize["ifaceGroupName"] = o.IfaceGroupName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDeleteRouteParam struct {
	value *DeleteRouteParam
	isSet bool
}

func (v NullableDeleteRouteParam) Get() *DeleteRouteParam {
	return v.value
}

func (v *NullableDeleteRouteParam) Set(val *DeleteRouteParam) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteRouteParam) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteRouteParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteRouteParam(val *DeleteRouteParam) *NullableDeleteRouteParam {
	return &NullableDeleteRouteParam{value: val, isSet: true}
}

func (v NullableDeleteRouteParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteRouteParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


