/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// OracleDBConfig This proto captures the oracle database configuration for alternate DB restore.
type OracleDBConfig struct {
	// Audit log destination.
	AuditLogDest NullableString `json:"auditLogDest,omitempty"`
	// BCT file path.
	BctFilePath NullableString `json:"bctFilePath,omitempty"`
	// List of paths where the control file needs to be multiplexed.
	ControlFilePathVec []string `json:"controlFilePathVec,omitempty"`
	// Path to the file on oracle host which decides the configuration of restored DB.
	DbConfigFilePath NullableString `json:"dbConfigFilePath,omitempty"`
	// Diag destination.
	DiagDest NullableString `json:"diagDest,omitempty"`
	// If set to false, archive log mode is disabled.
	EnableArchiveLogMode NullableBool `json:"enableArchiveLogMode,omitempty"`
	// FRA path.
	FraDest NullableString `json:"fraDest,omitempty"`
	// FRA Size in MBs.
	FraSizeMb NullableInt32 `json:"fraSizeMb,omitempty"`
	// How many tempfiles to use for the recovered database.
	NumTempfiles NullableInt32 `json:"numTempfiles,omitempty"`
	// Map of pfile parameters to its values.
	PfileParameterMap []OracleDBConfigPfileParameterMapEntry `json:"pfileParameterMap,omitempty"`
	RedoLogConf *OracleDBConfigRedoLogGroupConf `json:"redoLogConf,omitempty"`
	// SGA_TARGET_SIZE size [ Default value same as Source DB ].
	SgaTargetSize NullableString `json:"sgaTargetSize,omitempty"`
	// Shared pool size [ Default value same as Source DB ].
	SharedPoolSize NullableString `json:"sharedPoolSize,omitempty"`
}

// NewOracleDBConfig instantiates a new OracleDBConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleDBConfig() *OracleDBConfig {
	this := OracleDBConfig{}
	return &this
}

// NewOracleDBConfigWithDefaults instantiates a new OracleDBConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleDBConfigWithDefaults() *OracleDBConfig {
	this := OracleDBConfig{}
	return &this
}

// GetAuditLogDest returns the AuditLogDest field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDBConfig) GetAuditLogDest() string {
	if o == nil || o.AuditLogDest.Get() == nil {
		var ret string
		return ret
	}
	return *o.AuditLogDest.Get()
}

// GetAuditLogDestOk returns a tuple with the AuditLogDest field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDBConfig) GetAuditLogDestOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AuditLogDest.Get(), o.AuditLogDest.IsSet()
}

// HasAuditLogDest returns a boolean if a field has been set.
func (o *OracleDBConfig) HasAuditLogDest() bool {
	if o != nil && o.AuditLogDest.IsSet() {
		return true
	}

	return false
}

// SetAuditLogDest gets a reference to the given NullableString and assigns it to the AuditLogDest field.
func (o *OracleDBConfig) SetAuditLogDest(v string) {
	o.AuditLogDest.Set(&v)
}
// SetAuditLogDestNil sets the value for AuditLogDest to be an explicit nil
func (o *OracleDBConfig) SetAuditLogDestNil() {
	o.AuditLogDest.Set(nil)
}

// UnsetAuditLogDest ensures that no value is present for AuditLogDest, not even an explicit nil
func (o *OracleDBConfig) UnsetAuditLogDest() {
	o.AuditLogDest.Unset()
}

// GetBctFilePath returns the BctFilePath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDBConfig) GetBctFilePath() string {
	if o == nil || o.BctFilePath.Get() == nil {
		var ret string
		return ret
	}
	return *o.BctFilePath.Get()
}

// GetBctFilePathOk returns a tuple with the BctFilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDBConfig) GetBctFilePathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BctFilePath.Get(), o.BctFilePath.IsSet()
}

// HasBctFilePath returns a boolean if a field has been set.
func (o *OracleDBConfig) HasBctFilePath() bool {
	if o != nil && o.BctFilePath.IsSet() {
		return true
	}

	return false
}

// SetBctFilePath gets a reference to the given NullableString and assigns it to the BctFilePath field.
func (o *OracleDBConfig) SetBctFilePath(v string) {
	o.BctFilePath.Set(&v)
}
// SetBctFilePathNil sets the value for BctFilePath to be an explicit nil
func (o *OracleDBConfig) SetBctFilePathNil() {
	o.BctFilePath.Set(nil)
}

// UnsetBctFilePath ensures that no value is present for BctFilePath, not even an explicit nil
func (o *OracleDBConfig) UnsetBctFilePath() {
	o.BctFilePath.Unset()
}

// GetControlFilePathVec returns the ControlFilePathVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDBConfig) GetControlFilePathVec() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.ControlFilePathVec
}

// GetControlFilePathVecOk returns a tuple with the ControlFilePathVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDBConfig) GetControlFilePathVecOk() (*[]string, bool) {
	if o == nil || o.ControlFilePathVec == nil {
		return nil, false
	}
	return &o.ControlFilePathVec, true
}

// HasControlFilePathVec returns a boolean if a field has been set.
func (o *OracleDBConfig) HasControlFilePathVec() bool {
	if o != nil && o.ControlFilePathVec != nil {
		return true
	}

	return false
}

// SetControlFilePathVec gets a reference to the given []string and assigns it to the ControlFilePathVec field.
func (o *OracleDBConfig) SetControlFilePathVec(v []string) {
	o.ControlFilePathVec = v
}

// GetDbConfigFilePath returns the DbConfigFilePath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDBConfig) GetDbConfigFilePath() string {
	if o == nil || o.DbConfigFilePath.Get() == nil {
		var ret string
		return ret
	}
	return *o.DbConfigFilePath.Get()
}

// GetDbConfigFilePathOk returns a tuple with the DbConfigFilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDBConfig) GetDbConfigFilePathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DbConfigFilePath.Get(), o.DbConfigFilePath.IsSet()
}

// HasDbConfigFilePath returns a boolean if a field has been set.
func (o *OracleDBConfig) HasDbConfigFilePath() bool {
	if o != nil && o.DbConfigFilePath.IsSet() {
		return true
	}

	return false
}

// SetDbConfigFilePath gets a reference to the given NullableString and assigns it to the DbConfigFilePath field.
func (o *OracleDBConfig) SetDbConfigFilePath(v string) {
	o.DbConfigFilePath.Set(&v)
}
// SetDbConfigFilePathNil sets the value for DbConfigFilePath to be an explicit nil
func (o *OracleDBConfig) SetDbConfigFilePathNil() {
	o.DbConfigFilePath.Set(nil)
}

// UnsetDbConfigFilePath ensures that no value is present for DbConfigFilePath, not even an explicit nil
func (o *OracleDBConfig) UnsetDbConfigFilePath() {
	o.DbConfigFilePath.Unset()
}

// GetDiagDest returns the DiagDest field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDBConfig) GetDiagDest() string {
	if o == nil || o.DiagDest.Get() == nil {
		var ret string
		return ret
	}
	return *o.DiagDest.Get()
}

// GetDiagDestOk returns a tuple with the DiagDest field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDBConfig) GetDiagDestOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DiagDest.Get(), o.DiagDest.IsSet()
}

// HasDiagDest returns a boolean if a field has been set.
func (o *OracleDBConfig) HasDiagDest() bool {
	if o != nil && o.DiagDest.IsSet() {
		return true
	}

	return false
}

// SetDiagDest gets a reference to the given NullableString and assigns it to the DiagDest field.
func (o *OracleDBConfig) SetDiagDest(v string) {
	o.DiagDest.Set(&v)
}
// SetDiagDestNil sets the value for DiagDest to be an explicit nil
func (o *OracleDBConfig) SetDiagDestNil() {
	o.DiagDest.Set(nil)
}

// UnsetDiagDest ensures that no value is present for DiagDest, not even an explicit nil
func (o *OracleDBConfig) UnsetDiagDest() {
	o.DiagDest.Unset()
}

// GetEnableArchiveLogMode returns the EnableArchiveLogMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDBConfig) GetEnableArchiveLogMode() bool {
	if o == nil || o.EnableArchiveLogMode.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableArchiveLogMode.Get()
}

// GetEnableArchiveLogModeOk returns a tuple with the EnableArchiveLogMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDBConfig) GetEnableArchiveLogModeOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableArchiveLogMode.Get(), o.EnableArchiveLogMode.IsSet()
}

// HasEnableArchiveLogMode returns a boolean if a field has been set.
func (o *OracleDBConfig) HasEnableArchiveLogMode() bool {
	if o != nil && o.EnableArchiveLogMode.IsSet() {
		return true
	}

	return false
}

// SetEnableArchiveLogMode gets a reference to the given NullableBool and assigns it to the EnableArchiveLogMode field.
func (o *OracleDBConfig) SetEnableArchiveLogMode(v bool) {
	o.EnableArchiveLogMode.Set(&v)
}
// SetEnableArchiveLogModeNil sets the value for EnableArchiveLogMode to be an explicit nil
func (o *OracleDBConfig) SetEnableArchiveLogModeNil() {
	o.EnableArchiveLogMode.Set(nil)
}

// UnsetEnableArchiveLogMode ensures that no value is present for EnableArchiveLogMode, not even an explicit nil
func (o *OracleDBConfig) UnsetEnableArchiveLogMode() {
	o.EnableArchiveLogMode.Unset()
}

// GetFraDest returns the FraDest field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDBConfig) GetFraDest() string {
	if o == nil || o.FraDest.Get() == nil {
		var ret string
		return ret
	}
	return *o.FraDest.Get()
}

// GetFraDestOk returns a tuple with the FraDest field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDBConfig) GetFraDestOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FraDest.Get(), o.FraDest.IsSet()
}

// HasFraDest returns a boolean if a field has been set.
func (o *OracleDBConfig) HasFraDest() bool {
	if o != nil && o.FraDest.IsSet() {
		return true
	}

	return false
}

// SetFraDest gets a reference to the given NullableString and assigns it to the FraDest field.
func (o *OracleDBConfig) SetFraDest(v string) {
	o.FraDest.Set(&v)
}
// SetFraDestNil sets the value for FraDest to be an explicit nil
func (o *OracleDBConfig) SetFraDestNil() {
	o.FraDest.Set(nil)
}

// UnsetFraDest ensures that no value is present for FraDest, not even an explicit nil
func (o *OracleDBConfig) UnsetFraDest() {
	o.FraDest.Unset()
}

// GetFraSizeMb returns the FraSizeMb field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDBConfig) GetFraSizeMb() int32 {
	if o == nil || o.FraSizeMb.Get() == nil {
		var ret int32
		return ret
	}
	return *o.FraSizeMb.Get()
}

// GetFraSizeMbOk returns a tuple with the FraSizeMb field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDBConfig) GetFraSizeMbOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FraSizeMb.Get(), o.FraSizeMb.IsSet()
}

// HasFraSizeMb returns a boolean if a field has been set.
func (o *OracleDBConfig) HasFraSizeMb() bool {
	if o != nil && o.FraSizeMb.IsSet() {
		return true
	}

	return false
}

// SetFraSizeMb gets a reference to the given NullableInt32 and assigns it to the FraSizeMb field.
func (o *OracleDBConfig) SetFraSizeMb(v int32) {
	o.FraSizeMb.Set(&v)
}
// SetFraSizeMbNil sets the value for FraSizeMb to be an explicit nil
func (o *OracleDBConfig) SetFraSizeMbNil() {
	o.FraSizeMb.Set(nil)
}

// UnsetFraSizeMb ensures that no value is present for FraSizeMb, not even an explicit nil
func (o *OracleDBConfig) UnsetFraSizeMb() {
	o.FraSizeMb.Unset()
}

// GetNumTempfiles returns the NumTempfiles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDBConfig) GetNumTempfiles() int32 {
	if o == nil || o.NumTempfiles.Get() == nil {
		var ret int32
		return ret
	}
	return *o.NumTempfiles.Get()
}

// GetNumTempfilesOk returns a tuple with the NumTempfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDBConfig) GetNumTempfilesOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumTempfiles.Get(), o.NumTempfiles.IsSet()
}

// HasNumTempfiles returns a boolean if a field has been set.
func (o *OracleDBConfig) HasNumTempfiles() bool {
	if o != nil && o.NumTempfiles.IsSet() {
		return true
	}

	return false
}

// SetNumTempfiles gets a reference to the given NullableInt32 and assigns it to the NumTempfiles field.
func (o *OracleDBConfig) SetNumTempfiles(v int32) {
	o.NumTempfiles.Set(&v)
}
// SetNumTempfilesNil sets the value for NumTempfiles to be an explicit nil
func (o *OracleDBConfig) SetNumTempfilesNil() {
	o.NumTempfiles.Set(nil)
}

// UnsetNumTempfiles ensures that no value is present for NumTempfiles, not even an explicit nil
func (o *OracleDBConfig) UnsetNumTempfiles() {
	o.NumTempfiles.Unset()
}

// GetPfileParameterMap returns the PfileParameterMap field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDBConfig) GetPfileParameterMap() []OracleDBConfigPfileParameterMapEntry {
	if o == nil  {
		var ret []OracleDBConfigPfileParameterMapEntry
		return ret
	}
	return o.PfileParameterMap
}

// GetPfileParameterMapOk returns a tuple with the PfileParameterMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDBConfig) GetPfileParameterMapOk() (*[]OracleDBConfigPfileParameterMapEntry, bool) {
	if o == nil || o.PfileParameterMap == nil {
		return nil, false
	}
	return &o.PfileParameterMap, true
}

// HasPfileParameterMap returns a boolean if a field has been set.
func (o *OracleDBConfig) HasPfileParameterMap() bool {
	if o != nil && o.PfileParameterMap != nil {
		return true
	}

	return false
}

// SetPfileParameterMap gets a reference to the given []OracleDBConfigPfileParameterMapEntry and assigns it to the PfileParameterMap field.
func (o *OracleDBConfig) SetPfileParameterMap(v []OracleDBConfigPfileParameterMapEntry) {
	o.PfileParameterMap = v
}

// GetRedoLogConf returns the RedoLogConf field value if set, zero value otherwise.
func (o *OracleDBConfig) GetRedoLogConf() OracleDBConfigRedoLogGroupConf {
	if o == nil || o.RedoLogConf == nil {
		var ret OracleDBConfigRedoLogGroupConf
		return ret
	}
	return *o.RedoLogConf
}

// GetRedoLogConfOk returns a tuple with the RedoLogConf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDBConfig) GetRedoLogConfOk() (*OracleDBConfigRedoLogGroupConf, bool) {
	if o == nil || o.RedoLogConf == nil {
		return nil, false
	}
	return o.RedoLogConf, true
}

// HasRedoLogConf returns a boolean if a field has been set.
func (o *OracleDBConfig) HasRedoLogConf() bool {
	if o != nil && o.RedoLogConf != nil {
		return true
	}

	return false
}

// SetRedoLogConf gets a reference to the given OracleDBConfigRedoLogGroupConf and assigns it to the RedoLogConf field.
func (o *OracleDBConfig) SetRedoLogConf(v OracleDBConfigRedoLogGroupConf) {
	o.RedoLogConf = &v
}

// GetSgaTargetSize returns the SgaTargetSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDBConfig) GetSgaTargetSize() string {
	if o == nil || o.SgaTargetSize.Get() == nil {
		var ret string
		return ret
	}
	return *o.SgaTargetSize.Get()
}

// GetSgaTargetSizeOk returns a tuple with the SgaTargetSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDBConfig) GetSgaTargetSizeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SgaTargetSize.Get(), o.SgaTargetSize.IsSet()
}

// HasSgaTargetSize returns a boolean if a field has been set.
func (o *OracleDBConfig) HasSgaTargetSize() bool {
	if o != nil && o.SgaTargetSize.IsSet() {
		return true
	}

	return false
}

// SetSgaTargetSize gets a reference to the given NullableString and assigns it to the SgaTargetSize field.
func (o *OracleDBConfig) SetSgaTargetSize(v string) {
	o.SgaTargetSize.Set(&v)
}
// SetSgaTargetSizeNil sets the value for SgaTargetSize to be an explicit nil
func (o *OracleDBConfig) SetSgaTargetSizeNil() {
	o.SgaTargetSize.Set(nil)
}

// UnsetSgaTargetSize ensures that no value is present for SgaTargetSize, not even an explicit nil
func (o *OracleDBConfig) UnsetSgaTargetSize() {
	o.SgaTargetSize.Unset()
}

// GetSharedPoolSize returns the SharedPoolSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDBConfig) GetSharedPoolSize() string {
	if o == nil || o.SharedPoolSize.Get() == nil {
		var ret string
		return ret
	}
	return *o.SharedPoolSize.Get()
}

// GetSharedPoolSizeOk returns a tuple with the SharedPoolSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDBConfig) GetSharedPoolSizeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SharedPoolSize.Get(), o.SharedPoolSize.IsSet()
}

// HasSharedPoolSize returns a boolean if a field has been set.
func (o *OracleDBConfig) HasSharedPoolSize() bool {
	if o != nil && o.SharedPoolSize.IsSet() {
		return true
	}

	return false
}

// SetSharedPoolSize gets a reference to the given NullableString and assigns it to the SharedPoolSize field.
func (o *OracleDBConfig) SetSharedPoolSize(v string) {
	o.SharedPoolSize.Set(&v)
}
// SetSharedPoolSizeNil sets the value for SharedPoolSize to be an explicit nil
func (o *OracleDBConfig) SetSharedPoolSizeNil() {
	o.SharedPoolSize.Set(nil)
}

// UnsetSharedPoolSize ensures that no value is present for SharedPoolSize, not even an explicit nil
func (o *OracleDBConfig) UnsetSharedPoolSize() {
	o.SharedPoolSize.Unset()
}

func (o OracleDBConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AuditLogDest.IsSet() {
		toSerialize["auditLogDest"] = o.AuditLogDest.Get()
	}
	if o.BctFilePath.IsSet() {
		toSerialize["bctFilePath"] = o.BctFilePath.Get()
	}
	if o.ControlFilePathVec != nil {
		toSerialize["controlFilePathVec"] = o.ControlFilePathVec
	}
	if o.DbConfigFilePath.IsSet() {
		toSerialize["dbConfigFilePath"] = o.DbConfigFilePath.Get()
	}
	if o.DiagDest.IsSet() {
		toSerialize["diagDest"] = o.DiagDest.Get()
	}
	if o.EnableArchiveLogMode.IsSet() {
		toSerialize["enableArchiveLogMode"] = o.EnableArchiveLogMode.Get()
	}
	if o.FraDest.IsSet() {
		toSerialize["fraDest"] = o.FraDest.Get()
	}
	if o.FraSizeMb.IsSet() {
		toSerialize["fraSizeMb"] = o.FraSizeMb.Get()
	}
	if o.NumTempfiles.IsSet() {
		toSerialize["numTempfiles"] = o.NumTempfiles.Get()
	}
	if o.PfileParameterMap != nil {
		toSerialize["pfileParameterMap"] = o.PfileParameterMap
	}
	if o.RedoLogConf != nil {
		toSerialize["redoLogConf"] = o.RedoLogConf
	}
	if o.SgaTargetSize.IsSet() {
		toSerialize["sgaTargetSize"] = o.SgaTargetSize.Get()
	}
	if o.SharedPoolSize.IsSet() {
		toSerialize["sharedPoolSize"] = o.SharedPoolSize.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableOracleDBConfig struct {
	value *OracleDBConfig
	isSet bool
}

func (v NullableOracleDBConfig) Get() *OracleDBConfig {
	return v.value
}

func (v *NullableOracleDBConfig) Set(val *OracleDBConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleDBConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleDBConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleDBConfig(val *OracleDBConfig) *NullableOracleDBConfig {
	return &NullableOracleDBConfig{value: val, isSet: true}
}

func (v NullableOracleDBConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleDBConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


