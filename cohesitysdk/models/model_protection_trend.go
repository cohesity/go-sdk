/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ProtectionTrend Specifies details of a protected object with it's protection trends.
type ProtectionTrend struct {
	// Specifies number of cancelled runs across trends.
	Cancelled NullableInt64 `json:"cancelled,omitempty"`
	// Specifies environment. Supported environment types such as 'kView', 'kSQL', 'kVMware', etc. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter. 'kVMware' indicates the VMware Protection Source environment. 'kHyperV' indicates the HyperV Protection Source environment. 'kSQL' indicates the SQL Protection Source environment. 'kView' indicates the View Protection Source environment. 'kPuppeteer' indicates the Cohesity's Remote Adapter. 'kPhysical' indicates the physical Protection Source environment. 'kPure' indicates the Pure Storage Protection Source environment. 'Nimble' indicates the Nimble Storage Protection Source environment. 'kAzure' indicates the Microsoft's Azure Protection Source environment. 'kNetapp' indicates the Netapp Protection Source environment. 'kAgent' indicates the Agent Protection Source environment. 'kGenericNas' indicates the Generic Network Attached Storage Protection Source environment. 'kAcropolis' indicates the Acropolis Protection Source environment. 'kPhsicalFiles' indicates the Physical Files Protection Source environment. 'kIsilon' indicates the Dell EMC's Isilon Protection Source environment. 'kGPFS' indicates IBM's GPFS Protection Source environment. 'kKVM' indicates the KVM Protection Source environment. 'kAWS' indicates the AWS Protection Source environment. 'kExchange' indicates the Exchange Protection Source environment. 'kHyperVVSS' indicates the HyperV VSS Protection Source environment. 'kOracle' indicates the Oracle Protection Source environment. 'kGCP' indicates the Google Cloud Platform Protection Source environment. 'kFlashBlade' indicates the Flash Blade Protection Source environment. 'kAWSNative' indicates the AWS Native Protection Source environment. 'kO365' indicates the Office 365 Protection Source environment. 'kO365Outlook' indicates Office 365 outlook Protection Source environment. 'kHyperFlex' indicates the Hyper Flex Protection Source environment. 'kGCPNative' indicates the GCP Native Protection Source environment. 'kAzureNative' indicates the Azure Native Protection Source environment. 'kKubernetes' indicates a Kubernetes Protection Source environment. 'kElastifile' indicates Elastifile Protection Source environment. 'kAD' indicates Active Directory Protection Source environment. 'kRDSSnapshotManager' indicates AWS RDS Protection Source environment. 'kCassandra' indicates Cassandra Protection Source environment. 'kMongoDB' indicates MongoDB Protection Source environment. 'kCouchbase' indicates Couchbase Protection Source environment. 'kHdfs' indicates Hdfs Protection Source environment. 'kHive' indicates Hive Protection Source environment. 'kHBase' indicates HBase Protection Source environment.
	Environment NullableString `json:"environment,omitempty"`
	// Specifies number of failed runs across trends.
	Failed NullableInt64 `json:"failed,omitempty"`
	// Specifies protected object's Id.
	Id NullableInt64 `json:"id,omitempty"`
	// Specifies protected object's name.
	Name NullableString `json:"name,omitempty"`
	// Specifies protected object's parent id.
	ParentSourceId NullableInt64 `json:"parentSourceId,omitempty"`
	// Specifies protected object's parent name.
	ParentSourceName NullableString `json:"parentSourceName,omitempty"`
	// Specifies number of in-progress runs across trends.
	Running NullableInt64 `json:"running,omitempty"`
	// Specifies number of successful runs across trends.
	Successful NullableInt64 `json:"successful,omitempty"`
	// Specifies total number of runs across trends.
	Total NullableInt64 `json:"total,omitempty"`
	// Aggregated protection runs information by days/weeks.
	Trends []TrendingData `json:"trends,omitempty"`
}

// NewProtectionTrend instantiates a new ProtectionTrend object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtectionTrend() *ProtectionTrend {
	this := ProtectionTrend{}
	return &this
}

// NewProtectionTrendWithDefaults instantiates a new ProtectionTrend object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtectionTrendWithDefaults() *ProtectionTrend {
	this := ProtectionTrend{}
	return &this
}

// GetCancelled returns the Cancelled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionTrend) GetCancelled() int64 {
	if o == nil || o.Cancelled.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Cancelled.Get()
}

// GetCancelledOk returns a tuple with the Cancelled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionTrend) GetCancelledOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Cancelled.Get(), o.Cancelled.IsSet()
}

// HasCancelled returns a boolean if a field has been set.
func (o *ProtectionTrend) HasCancelled() bool {
	if o != nil && o.Cancelled.IsSet() {
		return true
	}

	return false
}

// SetCancelled gets a reference to the given NullableInt64 and assigns it to the Cancelled field.
func (o *ProtectionTrend) SetCancelled(v int64) {
	o.Cancelled.Set(&v)
}
// SetCancelledNil sets the value for Cancelled to be an explicit nil
func (o *ProtectionTrend) SetCancelledNil() {
	o.Cancelled.Set(nil)
}

// UnsetCancelled ensures that no value is present for Cancelled, not even an explicit nil
func (o *ProtectionTrend) UnsetCancelled() {
	o.Cancelled.Unset()
}

// GetEnvironment returns the Environment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionTrend) GetEnvironment() string {
	if o == nil || o.Environment.Get() == nil {
		var ret string
		return ret
	}
	return *o.Environment.Get()
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionTrend) GetEnvironmentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Environment.Get(), o.Environment.IsSet()
}

// HasEnvironment returns a boolean if a field has been set.
func (o *ProtectionTrend) HasEnvironment() bool {
	if o != nil && o.Environment.IsSet() {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given NullableString and assigns it to the Environment field.
func (o *ProtectionTrend) SetEnvironment(v string) {
	o.Environment.Set(&v)
}
// SetEnvironmentNil sets the value for Environment to be an explicit nil
func (o *ProtectionTrend) SetEnvironmentNil() {
	o.Environment.Set(nil)
}

// UnsetEnvironment ensures that no value is present for Environment, not even an explicit nil
func (o *ProtectionTrend) UnsetEnvironment() {
	o.Environment.Unset()
}

// GetFailed returns the Failed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionTrend) GetFailed() int64 {
	if o == nil || o.Failed.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Failed.Get()
}

// GetFailedOk returns a tuple with the Failed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionTrend) GetFailedOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Failed.Get(), o.Failed.IsSet()
}

// HasFailed returns a boolean if a field has been set.
func (o *ProtectionTrend) HasFailed() bool {
	if o != nil && o.Failed.IsSet() {
		return true
	}

	return false
}

// SetFailed gets a reference to the given NullableInt64 and assigns it to the Failed field.
func (o *ProtectionTrend) SetFailed(v int64) {
	o.Failed.Set(&v)
}
// SetFailedNil sets the value for Failed to be an explicit nil
func (o *ProtectionTrend) SetFailedNil() {
	o.Failed.Set(nil)
}

// UnsetFailed ensures that no value is present for Failed, not even an explicit nil
func (o *ProtectionTrend) UnsetFailed() {
	o.Failed.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionTrend) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionTrend) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *ProtectionTrend) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *ProtectionTrend) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *ProtectionTrend) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *ProtectionTrend) UnsetId() {
	o.Id.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionTrend) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionTrend) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ProtectionTrend) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ProtectionTrend) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *ProtectionTrend) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ProtectionTrend) UnsetName() {
	o.Name.Unset()
}

// GetParentSourceId returns the ParentSourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionTrend) GetParentSourceId() int64 {
	if o == nil || o.ParentSourceId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ParentSourceId.Get()
}

// GetParentSourceIdOk returns a tuple with the ParentSourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionTrend) GetParentSourceIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ParentSourceId.Get(), o.ParentSourceId.IsSet()
}

// HasParentSourceId returns a boolean if a field has been set.
func (o *ProtectionTrend) HasParentSourceId() bool {
	if o != nil && o.ParentSourceId.IsSet() {
		return true
	}

	return false
}

// SetParentSourceId gets a reference to the given NullableInt64 and assigns it to the ParentSourceId field.
func (o *ProtectionTrend) SetParentSourceId(v int64) {
	o.ParentSourceId.Set(&v)
}
// SetParentSourceIdNil sets the value for ParentSourceId to be an explicit nil
func (o *ProtectionTrend) SetParentSourceIdNil() {
	o.ParentSourceId.Set(nil)
}

// UnsetParentSourceId ensures that no value is present for ParentSourceId, not even an explicit nil
func (o *ProtectionTrend) UnsetParentSourceId() {
	o.ParentSourceId.Unset()
}

// GetParentSourceName returns the ParentSourceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionTrend) GetParentSourceName() string {
	if o == nil || o.ParentSourceName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ParentSourceName.Get()
}

// GetParentSourceNameOk returns a tuple with the ParentSourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionTrend) GetParentSourceNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ParentSourceName.Get(), o.ParentSourceName.IsSet()
}

// HasParentSourceName returns a boolean if a field has been set.
func (o *ProtectionTrend) HasParentSourceName() bool {
	if o != nil && o.ParentSourceName.IsSet() {
		return true
	}

	return false
}

// SetParentSourceName gets a reference to the given NullableString and assigns it to the ParentSourceName field.
func (o *ProtectionTrend) SetParentSourceName(v string) {
	o.ParentSourceName.Set(&v)
}
// SetParentSourceNameNil sets the value for ParentSourceName to be an explicit nil
func (o *ProtectionTrend) SetParentSourceNameNil() {
	o.ParentSourceName.Set(nil)
}

// UnsetParentSourceName ensures that no value is present for ParentSourceName, not even an explicit nil
func (o *ProtectionTrend) UnsetParentSourceName() {
	o.ParentSourceName.Unset()
}

// GetRunning returns the Running field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionTrend) GetRunning() int64 {
	if o == nil || o.Running.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Running.Get()
}

// GetRunningOk returns a tuple with the Running field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionTrend) GetRunningOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Running.Get(), o.Running.IsSet()
}

// HasRunning returns a boolean if a field has been set.
func (o *ProtectionTrend) HasRunning() bool {
	if o != nil && o.Running.IsSet() {
		return true
	}

	return false
}

// SetRunning gets a reference to the given NullableInt64 and assigns it to the Running field.
func (o *ProtectionTrend) SetRunning(v int64) {
	o.Running.Set(&v)
}
// SetRunningNil sets the value for Running to be an explicit nil
func (o *ProtectionTrend) SetRunningNil() {
	o.Running.Set(nil)
}

// UnsetRunning ensures that no value is present for Running, not even an explicit nil
func (o *ProtectionTrend) UnsetRunning() {
	o.Running.Unset()
}

// GetSuccessful returns the Successful field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionTrend) GetSuccessful() int64 {
	if o == nil || o.Successful.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Successful.Get()
}

// GetSuccessfulOk returns a tuple with the Successful field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionTrend) GetSuccessfulOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Successful.Get(), o.Successful.IsSet()
}

// HasSuccessful returns a boolean if a field has been set.
func (o *ProtectionTrend) HasSuccessful() bool {
	if o != nil && o.Successful.IsSet() {
		return true
	}

	return false
}

// SetSuccessful gets a reference to the given NullableInt64 and assigns it to the Successful field.
func (o *ProtectionTrend) SetSuccessful(v int64) {
	o.Successful.Set(&v)
}
// SetSuccessfulNil sets the value for Successful to be an explicit nil
func (o *ProtectionTrend) SetSuccessfulNil() {
	o.Successful.Set(nil)
}

// UnsetSuccessful ensures that no value is present for Successful, not even an explicit nil
func (o *ProtectionTrend) UnsetSuccessful() {
	o.Successful.Unset()
}

// GetTotal returns the Total field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionTrend) GetTotal() int64 {
	if o == nil || o.Total.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Total.Get()
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionTrend) GetTotalOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Total.Get(), o.Total.IsSet()
}

// HasTotal returns a boolean if a field has been set.
func (o *ProtectionTrend) HasTotal() bool {
	if o != nil && o.Total.IsSet() {
		return true
	}

	return false
}

// SetTotal gets a reference to the given NullableInt64 and assigns it to the Total field.
func (o *ProtectionTrend) SetTotal(v int64) {
	o.Total.Set(&v)
}
// SetTotalNil sets the value for Total to be an explicit nil
func (o *ProtectionTrend) SetTotalNil() {
	o.Total.Set(nil)
}

// UnsetTotal ensures that no value is present for Total, not even an explicit nil
func (o *ProtectionTrend) UnsetTotal() {
	o.Total.Unset()
}

// GetTrends returns the Trends field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionTrend) GetTrends() []TrendingData {
	if o == nil  {
		var ret []TrendingData
		return ret
	}
	return o.Trends
}

// GetTrendsOk returns a tuple with the Trends field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionTrend) GetTrendsOk() (*[]TrendingData, bool) {
	if o == nil || o.Trends == nil {
		return nil, false
	}
	return &o.Trends, true
}

// HasTrends returns a boolean if a field has been set.
func (o *ProtectionTrend) HasTrends() bool {
	if o != nil && o.Trends != nil {
		return true
	}

	return false
}

// SetTrends gets a reference to the given []TrendingData and assigns it to the Trends field.
func (o *ProtectionTrend) SetTrends(v []TrendingData) {
	o.Trends = v
}

func (o ProtectionTrend) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Cancelled.IsSet() {
		toSerialize["cancelled"] = o.Cancelled.Get()
	}
	if o.Environment.IsSet() {
		toSerialize["environment"] = o.Environment.Get()
	}
	if o.Failed.IsSet() {
		toSerialize["failed"] = o.Failed.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.ParentSourceId.IsSet() {
		toSerialize["parentSourceId"] = o.ParentSourceId.Get()
	}
	if o.ParentSourceName.IsSet() {
		toSerialize["parentSourceName"] = o.ParentSourceName.Get()
	}
	if o.Running.IsSet() {
		toSerialize["running"] = o.Running.Get()
	}
	if o.Successful.IsSet() {
		toSerialize["successful"] = o.Successful.Get()
	}
	if o.Total.IsSet() {
		toSerialize["total"] = o.Total.Get()
	}
	if o.Trends != nil {
		toSerialize["trends"] = o.Trends
	}
	return json.Marshal(toSerialize)
}

type NullableProtectionTrend struct {
	value *ProtectionTrend
	isSet bool
}

func (v NullableProtectionTrend) Get() *ProtectionTrend {
	return v.value
}

func (v *NullableProtectionTrend) Set(val *ProtectionTrend) {
	v.value = val
	v.isSet = true
}

func (v NullableProtectionTrend) IsSet() bool {
	return v.isSet
}

func (v *NullableProtectionTrend) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtectionTrend(val *ProtectionTrend) *NullableProtectionTrend {
	return &NullableProtectionTrend{value: val, isSet: true}
}

func (v NullableProtectionTrend) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtectionTrend) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


