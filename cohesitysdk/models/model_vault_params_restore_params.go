/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// VaultParamsRestoreParams struct for VaultParamsRestoreParams
type VaultParamsRestoreParams struct {
	Glacier *VaultParamsRestoreParamsGlacier `json:"glacier,omitempty"`
}

// NewVaultParamsRestoreParams instantiates a new VaultParamsRestoreParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVaultParamsRestoreParams() *VaultParamsRestoreParams {
	this := VaultParamsRestoreParams{}
	return &this
}

// NewVaultParamsRestoreParamsWithDefaults instantiates a new VaultParamsRestoreParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVaultParamsRestoreParamsWithDefaults() *VaultParamsRestoreParams {
	this := VaultParamsRestoreParams{}
	return &this
}

// GetGlacier returns the Glacier field value if set, zero value otherwise.
func (o *VaultParamsRestoreParams) GetGlacier() VaultParamsRestoreParamsGlacier {
	if o == nil || o.Glacier == nil {
		var ret VaultParamsRestoreParamsGlacier
		return ret
	}
	return *o.Glacier
}

// GetGlacierOk returns a tuple with the Glacier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultParamsRestoreParams) GetGlacierOk() (*VaultParamsRestoreParamsGlacier, bool) {
	if o == nil || o.Glacier == nil {
		return nil, false
	}
	return o.Glacier, true
}

// HasGlacier returns a boolean if a field has been set.
func (o *VaultParamsRestoreParams) HasGlacier() bool {
	if o != nil && o.Glacier != nil {
		return true
	}

	return false
}

// SetGlacier gets a reference to the given VaultParamsRestoreParamsGlacier and assigns it to the Glacier field.
func (o *VaultParamsRestoreParams) SetGlacier(v VaultParamsRestoreParamsGlacier) {
	o.Glacier = &v
}

func (o VaultParamsRestoreParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Glacier != nil {
		toSerialize["glacier"] = o.Glacier
	}
	return json.Marshal(toSerialize)
}

type NullableVaultParamsRestoreParams struct {
	value *VaultParamsRestoreParams
	isSet bool
}

func (v NullableVaultParamsRestoreParams) Get() *VaultParamsRestoreParams {
	return v.value
}

func (v *NullableVaultParamsRestoreParams) Set(val *VaultParamsRestoreParams) {
	v.value = val
	v.isSet = true
}

func (v NullableVaultParamsRestoreParams) IsSet() bool {
	return v.isSet
}

func (v *NullableVaultParamsRestoreParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVaultParamsRestoreParams(val *VaultParamsRestoreParams) *NullableVaultParamsRestoreParams {
	return &NullableVaultParamsRestoreParams{value: val, isSet: true}
}

func (v NullableVaultParamsRestoreParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVaultParamsRestoreParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


