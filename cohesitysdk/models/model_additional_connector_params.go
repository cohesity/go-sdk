/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// AdditionalConnectorParams Message that encapsulates the additional connector params to establish a connection with a particular environment.
type AdditionalConnectorParams struct {
	O365Region *O365RegionProto `json:"o365Region,omitempty"`
	// Whether OAuth should be used for authentication with EWS API (outlook backup), applicable only for Exchange Online.
	UseOutlookEwsOauth NullableBool `json:"useOutlookEwsOauth,omitempty"`
}

// NewAdditionalConnectorParams instantiates a new AdditionalConnectorParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdditionalConnectorParams() *AdditionalConnectorParams {
	this := AdditionalConnectorParams{}
	return &this
}

// NewAdditionalConnectorParamsWithDefaults instantiates a new AdditionalConnectorParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdditionalConnectorParamsWithDefaults() *AdditionalConnectorParams {
	this := AdditionalConnectorParams{}
	return &this
}

// GetO365Region returns the O365Region field value if set, zero value otherwise.
func (o *AdditionalConnectorParams) GetO365Region() O365RegionProto {
	if o == nil || o.O365Region == nil {
		var ret O365RegionProto
		return ret
	}
	return *o.O365Region
}

// GetO365RegionOk returns a tuple with the O365Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalConnectorParams) GetO365RegionOk() (*O365RegionProto, bool) {
	if o == nil || o.O365Region == nil {
		return nil, false
	}
	return o.O365Region, true
}

// HasO365Region returns a boolean if a field has been set.
func (o *AdditionalConnectorParams) HasO365Region() bool {
	if o != nil && o.O365Region != nil {
		return true
	}

	return false
}

// SetO365Region gets a reference to the given O365RegionProto and assigns it to the O365Region field.
func (o *AdditionalConnectorParams) SetO365Region(v O365RegionProto) {
	o.O365Region = &v
}

// GetUseOutlookEwsOauth returns the UseOutlookEwsOauth field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdditionalConnectorParams) GetUseOutlookEwsOauth() bool {
	if o == nil || o.UseOutlookEwsOauth.Get() == nil {
		var ret bool
		return ret
	}
	return *o.UseOutlookEwsOauth.Get()
}

// GetUseOutlookEwsOauthOk returns a tuple with the UseOutlookEwsOauth field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdditionalConnectorParams) GetUseOutlookEwsOauthOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UseOutlookEwsOauth.Get(), o.UseOutlookEwsOauth.IsSet()
}

// HasUseOutlookEwsOauth returns a boolean if a field has been set.
func (o *AdditionalConnectorParams) HasUseOutlookEwsOauth() bool {
	if o != nil && o.UseOutlookEwsOauth.IsSet() {
		return true
	}

	return false
}

// SetUseOutlookEwsOauth gets a reference to the given NullableBool and assigns it to the UseOutlookEwsOauth field.
func (o *AdditionalConnectorParams) SetUseOutlookEwsOauth(v bool) {
	o.UseOutlookEwsOauth.Set(&v)
}
// SetUseOutlookEwsOauthNil sets the value for UseOutlookEwsOauth to be an explicit nil
func (o *AdditionalConnectorParams) SetUseOutlookEwsOauthNil() {
	o.UseOutlookEwsOauth.Set(nil)
}

// UnsetUseOutlookEwsOauth ensures that no value is present for UseOutlookEwsOauth, not even an explicit nil
func (o *AdditionalConnectorParams) UnsetUseOutlookEwsOauth() {
	o.UseOutlookEwsOauth.Unset()
}

func (o AdditionalConnectorParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.O365Region != nil {
		toSerialize["o365Region"] = o.O365Region
	}
	if o.UseOutlookEwsOauth.IsSet() {
		toSerialize["useOutlookEwsOauth"] = o.UseOutlookEwsOauth.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAdditionalConnectorParams struct {
	value *AdditionalConnectorParams
	isSet bool
}

func (v NullableAdditionalConnectorParams) Get() *AdditionalConnectorParams {
	return v.value
}

func (v *NullableAdditionalConnectorParams) Set(val *AdditionalConnectorParams) {
	v.value = val
	v.isSet = true
}

func (v NullableAdditionalConnectorParams) IsSet() bool {
	return v.isSet
}

func (v *NullableAdditionalConnectorParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdditionalConnectorParams(val *AdditionalConnectorParams) *NullableAdditionalConnectorParams {
	return &NullableAdditionalConnectorParams{value: val, isSet: true}
}

func (v NullableAdditionalConnectorParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdditionalConnectorParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


