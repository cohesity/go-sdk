/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// RemoteProtectionJobRunInformation Specifies details about a Protection Job Runs (Snapshots).
type RemoteProtectionJobRunInformation struct {
	// Specifies the name of the original Cluster that archived the data to the Vault.
	ClusterName NullableString `json:"clusterName,omitempty"`
	// Specifies the environment type (such as kVMware or kSQL) of the original archived Protection Job. Supported environment types such as 'kView', 'kSQL', 'kVMware', etc. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter. 'kVMware' indicates the VMware Protection Source environment. 'kHyperV' indicates the HyperV Protection Source environment. 'kSQL' indicates the SQL Protection Source environment. 'kView' indicates the View Protection Source environment. 'kPuppeteer' indicates the Cohesity's Remote Adapter. 'kPhysical' indicates the physical Protection Source environment. 'kPure' indicates the Pure Storage Protection Source environment. 'Nimble' indicates the Nimble Storage Protection Source environment. 'kAzure' indicates the Microsoft's Azure Protection Source environment. 'kNetapp' indicates the Netapp Protection Source environment. 'kAgent' indicates the Agent Protection Source environment. 'kGenericNas' indicates the Generic Network Attached Storage Protection Source environment. 'kAcropolis' indicates the Acropolis Protection Source environment. 'kPhsicalFiles' indicates the Physical Files Protection Source environment. 'kIsilon' indicates the Dell EMC's Isilon Protection Source environment. 'kGPFS' indicates IBM's GPFS Protection Source environment. 'kKVM' indicates the KVM Protection Source environment. 'kAWS' indicates the AWS Protection Source environment. 'kExchange' indicates the Exchange Protection Source environment. 'kHyperVVSS' indicates the HyperV VSS Protection Source environment. 'kOracle' indicates the Oracle Protection Source environment. 'kGCP' indicates the Google Cloud Platform Protection Source environment. 'kFlashBlade' indicates the Flash Blade Protection Source environment. 'kAWSNative' indicates the AWS Native Protection Source environment. 'kO365' indicates the Office 365 Protection Source environment. 'kO365Outlook' indicates Office 365 outlook Protection Source environment. 'kHyperFlex' indicates the Hyper Flex Protection Source environment. 'kGCPNative' indicates the GCP Native Protection Source environment. 'kAzureNative' indicates the Azure Native Protection Source environment. 'kKubernetes' indicates a Kubernetes Protection Source environment. 'kElastifile' indicates Elastifile Protection Source environment. 'kAD' indicates Active Directory Protection Source environment. 'kRDSSnapshotManager' indicates AWS RDS Protection Source environment. 'kCassandra' indicates Cassandra Protection Source environment. 'kMongoDB' indicates MongoDB Protection Source environment. 'kCouchbase' indicates Couchbase Protection Source environment. 'kHdfs' indicates Hdfs Protection Source environment. 'kHive' indicates Hive Protection Source environment. 'kHBase' indicates HBase Protection Source environment.
	Environment NullableString `json:"environment,omitempty"`
	// Specifies the name of the Protection Job on the original Cluster.
	JobName NullableString `json:"jobName,omitempty"`
	// Specifies the globally unique id of the original Protection Job that archived the data to the Vault. This id is assigned by the original Cluster that archived the data.
	JobUid NullableUniversalId `json:"jobUid,omitempty"`
	// Array of Protection Job Run Details.  Specifies the list of Protection Job Runs (Snapshot) details for a Protection Job archived to a Vault.
	ProtectionJobRuns []RemoteProtectionJobRunInstance `json:"protectionJobRuns,omitempty"`
}

// NewRemoteProtectionJobRunInformation instantiates a new RemoteProtectionJobRunInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteProtectionJobRunInformation() *RemoteProtectionJobRunInformation {
	this := RemoteProtectionJobRunInformation{}
	return &this
}

// NewRemoteProtectionJobRunInformationWithDefaults instantiates a new RemoteProtectionJobRunInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteProtectionJobRunInformationWithDefaults() *RemoteProtectionJobRunInformation {
	this := RemoteProtectionJobRunInformation{}
	return &this
}

// GetClusterName returns the ClusterName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteProtectionJobRunInformation) GetClusterName() string {
	if o == nil || o.ClusterName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ClusterName.Get()
}

// GetClusterNameOk returns a tuple with the ClusterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteProtectionJobRunInformation) GetClusterNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterName.Get(), o.ClusterName.IsSet()
}

// HasClusterName returns a boolean if a field has been set.
func (o *RemoteProtectionJobRunInformation) HasClusterName() bool {
	if o != nil && o.ClusterName.IsSet() {
		return true
	}

	return false
}

// SetClusterName gets a reference to the given NullableString and assigns it to the ClusterName field.
func (o *RemoteProtectionJobRunInformation) SetClusterName(v string) {
	o.ClusterName.Set(&v)
}
// SetClusterNameNil sets the value for ClusterName to be an explicit nil
func (o *RemoteProtectionJobRunInformation) SetClusterNameNil() {
	o.ClusterName.Set(nil)
}

// UnsetClusterName ensures that no value is present for ClusterName, not even an explicit nil
func (o *RemoteProtectionJobRunInformation) UnsetClusterName() {
	o.ClusterName.Unset()
}

// GetEnvironment returns the Environment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteProtectionJobRunInformation) GetEnvironment() string {
	if o == nil || o.Environment.Get() == nil {
		var ret string
		return ret
	}
	return *o.Environment.Get()
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteProtectionJobRunInformation) GetEnvironmentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Environment.Get(), o.Environment.IsSet()
}

// HasEnvironment returns a boolean if a field has been set.
func (o *RemoteProtectionJobRunInformation) HasEnvironment() bool {
	if o != nil && o.Environment.IsSet() {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given NullableString and assigns it to the Environment field.
func (o *RemoteProtectionJobRunInformation) SetEnvironment(v string) {
	o.Environment.Set(&v)
}
// SetEnvironmentNil sets the value for Environment to be an explicit nil
func (o *RemoteProtectionJobRunInformation) SetEnvironmentNil() {
	o.Environment.Set(nil)
}

// UnsetEnvironment ensures that no value is present for Environment, not even an explicit nil
func (o *RemoteProtectionJobRunInformation) UnsetEnvironment() {
	o.Environment.Unset()
}

// GetJobName returns the JobName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteProtectionJobRunInformation) GetJobName() string {
	if o == nil || o.JobName.Get() == nil {
		var ret string
		return ret
	}
	return *o.JobName.Get()
}

// GetJobNameOk returns a tuple with the JobName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteProtectionJobRunInformation) GetJobNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.JobName.Get(), o.JobName.IsSet()
}

// HasJobName returns a boolean if a field has been set.
func (o *RemoteProtectionJobRunInformation) HasJobName() bool {
	if o != nil && o.JobName.IsSet() {
		return true
	}

	return false
}

// SetJobName gets a reference to the given NullableString and assigns it to the JobName field.
func (o *RemoteProtectionJobRunInformation) SetJobName(v string) {
	o.JobName.Set(&v)
}
// SetJobNameNil sets the value for JobName to be an explicit nil
func (o *RemoteProtectionJobRunInformation) SetJobNameNil() {
	o.JobName.Set(nil)
}

// UnsetJobName ensures that no value is present for JobName, not even an explicit nil
func (o *RemoteProtectionJobRunInformation) UnsetJobName() {
	o.JobName.Unset()
}

// GetJobUid returns the JobUid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteProtectionJobRunInformation) GetJobUid() UniversalId {
	if o == nil || o.JobUid.Get() == nil {
		var ret UniversalId
		return ret
	}
	return *o.JobUid.Get()
}

// GetJobUidOk returns a tuple with the JobUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteProtectionJobRunInformation) GetJobUidOk() (*UniversalId, bool) {
	if o == nil  {
		return nil, false
	}
	return o.JobUid.Get(), o.JobUid.IsSet()
}

// HasJobUid returns a boolean if a field has been set.
func (o *RemoteProtectionJobRunInformation) HasJobUid() bool {
	if o != nil && o.JobUid.IsSet() {
		return true
	}

	return false
}

// SetJobUid gets a reference to the given NullableUniversalId and assigns it to the JobUid field.
func (o *RemoteProtectionJobRunInformation) SetJobUid(v UniversalId) {
	o.JobUid.Set(&v)
}
// SetJobUidNil sets the value for JobUid to be an explicit nil
func (o *RemoteProtectionJobRunInformation) SetJobUidNil() {
	o.JobUid.Set(nil)
}

// UnsetJobUid ensures that no value is present for JobUid, not even an explicit nil
func (o *RemoteProtectionJobRunInformation) UnsetJobUid() {
	o.JobUid.Unset()
}

// GetProtectionJobRuns returns the ProtectionJobRuns field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteProtectionJobRunInformation) GetProtectionJobRuns() []RemoteProtectionJobRunInstance {
	if o == nil  {
		var ret []RemoteProtectionJobRunInstance
		return ret
	}
	return o.ProtectionJobRuns
}

// GetProtectionJobRunsOk returns a tuple with the ProtectionJobRuns field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteProtectionJobRunInformation) GetProtectionJobRunsOk() (*[]RemoteProtectionJobRunInstance, bool) {
	if o == nil || o.ProtectionJobRuns == nil {
		return nil, false
	}
	return &o.ProtectionJobRuns, true
}

// HasProtectionJobRuns returns a boolean if a field has been set.
func (o *RemoteProtectionJobRunInformation) HasProtectionJobRuns() bool {
	if o != nil && o.ProtectionJobRuns != nil {
		return true
	}

	return false
}

// SetProtectionJobRuns gets a reference to the given []RemoteProtectionJobRunInstance and assigns it to the ProtectionJobRuns field.
func (o *RemoteProtectionJobRunInformation) SetProtectionJobRuns(v []RemoteProtectionJobRunInstance) {
	o.ProtectionJobRuns = v
}

func (o RemoteProtectionJobRunInformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClusterName.IsSet() {
		toSerialize["clusterName"] = o.ClusterName.Get()
	}
	if o.Environment.IsSet() {
		toSerialize["environment"] = o.Environment.Get()
	}
	if o.JobName.IsSet() {
		toSerialize["jobName"] = o.JobName.Get()
	}
	if o.JobUid.IsSet() {
		toSerialize["jobUid"] = o.JobUid.Get()
	}
	if o.ProtectionJobRuns != nil {
		toSerialize["protectionJobRuns"] = o.ProtectionJobRuns
	}
	return json.Marshal(toSerialize)
}

type NullableRemoteProtectionJobRunInformation struct {
	value *RemoteProtectionJobRunInformation
	isSet bool
}

func (v NullableRemoteProtectionJobRunInformation) Get() *RemoteProtectionJobRunInformation {
	return v.value
}

func (v *NullableRemoteProtectionJobRunInformation) Set(val *RemoteProtectionJobRunInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteProtectionJobRunInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteProtectionJobRunInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteProtectionJobRunInformation(val *RemoteProtectionJobRunInformation) *NullableRemoteProtectionJobRunInformation {
	return &NullableRemoteProtectionJobRunInformation{value: val, isSet: true}
}

func (v NullableRemoteProtectionJobRunInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteProtectionJobRunInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


