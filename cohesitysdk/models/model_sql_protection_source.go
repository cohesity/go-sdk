/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// SqlProtectionSource Specifies an Object representing one SQL Server instance or database.
type SqlProtectionSource struct {
	// Specifies whether the database is marked as available for backup according to the SQL Server VSS writer. This may be false if either the state of the databases is not online, or if the VSS writer is not online. This field is set only for type 'kDatabase'.
	IsAvailableForVssBackup NullableBool `json:"IsAvailableForVssBackup,omitempty"`
	// Specifies the time when the database was created. It is displayed in the timezone of the SQL server on which this database is running.
	CreatedTimestamp NullableString `json:"createdTimestamp,omitempty"`
	// Specifies the database name of the SQL Protection Source, if the type is database.
	DatabaseName NullableString `json:"databaseName,omitempty"`
	// Specifies the AAG entity id if the database is part of an AAG. This field is set only for type 'kDatabase'.
	DbAagEntityId NullableInt64 `json:"dbAagEntityId,omitempty"`
	// Specifies the name of the AAG if the database is part of an AAG. This field is set only for type 'kDatabase'.
	DbAagName NullableString `json:"dbAagName,omitempty"`
	// Specifies the versions of SQL server that the database is compatible with.
	DbCompatibilityLevel NullableInt64 `json:"dbCompatibilityLevel,omitempty"`
	// Specifies the information about the set of file groups for this db on the host. This is only set if the type is kDatabase.
	DbFileGroups []string `json:"dbFileGroups,omitempty"`
	// Specifies the last known information about the set of database files on the host. This field is set only for type 'kDatabase'.
	DbFiles []DbFileInfo `json:"dbFiles,omitempty"`
	// Specifies the name of the database owner.
	DbOwnerUsername NullableString `json:"dbOwnerUsername,omitempty"`
	Id *SqlSourceId `json:"id,omitempty"`
	// Specifies the instance name of the SQL Protection Source
	Name NullableString `json:"name,omitempty"`
	// Specifies the id of the container VM for the SQL Protection Source.
	OwnerId NullableInt64 `json:"ownerId,omitempty"`
	// Specifies the Recovery Model for the database in SQL environment. Only meaningful for the 'kDatabase' SQL Protection Source. Specifies the Recovery Model set for the Microsoft SQL Server. 'kSimpleRecoveryModel' indicates the Simple SQL Recovery Model which does not utilize log backups. 'kFullRecoveryModel' indicates the Full SQL Recovery Model which requires log backups and allows recovery to a single point in time. 'kBulkLoggedRecoveryModel' indicates the Bulk Logged SQL Recovery Model which requires log backups and allows high-performance bulk copy operations.
	RecoveryModel NullableString `json:"recoveryModel,omitempty"`
	// The state of the database as returned by SQL Server. Indicates the state of the database. The values correspond to the 'state' field in the system table sys.databases. See https://goo.gl/P66XqM. 'kOnline' indicates that database is in online state. 'kRestoring' indicates that database is in restore state. 'kRecovering' indicates that database is in recovery state. 'kRecoveryPending' indicates that database recovery is in pending state. 'kSuspect' indicates that primary filegroup is suspect and may be damaged. 'kEmergency' indicates that manually forced emergency state. 'kOffline' indicates that database is in offline state. 'kCopying' indicates that database is in copying state. 'kOfflineSecondary' indicates that secondary database is in offline state.
	SqlServerDbState NullableString `json:"sqlServerDbState,omitempty"`
	SqlServerInstanceVersion *SQLServerInstanceVersion `json:"sqlServerInstanceVersion,omitempty"`
	// Specifies the type of the managed Object in a SQL Protection Source. Examples of SQL Objects include 'kInstance' and 'kDatabase'. 'kInstance' indicates that SQL server instance is being protected. 'kDatabase' indicates that SQL server database is being protected. 'kAAG' indicates that SQL AAG (AlwaysOn Availability Group) is being protected. 'kAAGRootContainer' indicates that SQL AAG's root container is being protected. 'kRootContainer' indicates root container for SQL sources.
	Type NullableString `json:"type,omitempty"`
}

// NewSqlProtectionSource instantiates a new SqlProtectionSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSqlProtectionSource() *SqlProtectionSource {
	this := SqlProtectionSource{}
	return &this
}

// NewSqlProtectionSourceWithDefaults instantiates a new SqlProtectionSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSqlProtectionSourceWithDefaults() *SqlProtectionSource {
	this := SqlProtectionSource{}
	return &this
}

// GetIsAvailableForVssBackup returns the IsAvailableForVssBackup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlProtectionSource) GetIsAvailableForVssBackup() bool {
	if o == nil || o.IsAvailableForVssBackup.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsAvailableForVssBackup.Get()
}

// GetIsAvailableForVssBackupOk returns a tuple with the IsAvailableForVssBackup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlProtectionSource) GetIsAvailableForVssBackupOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsAvailableForVssBackup.Get(), o.IsAvailableForVssBackup.IsSet()
}

// HasIsAvailableForVssBackup returns a boolean if a field has been set.
func (o *SqlProtectionSource) HasIsAvailableForVssBackup() bool {
	if o != nil && o.IsAvailableForVssBackup.IsSet() {
		return true
	}

	return false
}

// SetIsAvailableForVssBackup gets a reference to the given NullableBool and assigns it to the IsAvailableForVssBackup field.
func (o *SqlProtectionSource) SetIsAvailableForVssBackup(v bool) {
	o.IsAvailableForVssBackup.Set(&v)
}
// SetIsAvailableForVssBackupNil sets the value for IsAvailableForVssBackup to be an explicit nil
func (o *SqlProtectionSource) SetIsAvailableForVssBackupNil() {
	o.IsAvailableForVssBackup.Set(nil)
}

// UnsetIsAvailableForVssBackup ensures that no value is present for IsAvailableForVssBackup, not even an explicit nil
func (o *SqlProtectionSource) UnsetIsAvailableForVssBackup() {
	o.IsAvailableForVssBackup.Unset()
}

// GetCreatedTimestamp returns the CreatedTimestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlProtectionSource) GetCreatedTimestamp() string {
	if o == nil || o.CreatedTimestamp.Get() == nil {
		var ret string
		return ret
	}
	return *o.CreatedTimestamp.Get()
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlProtectionSource) GetCreatedTimestampOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CreatedTimestamp.Get(), o.CreatedTimestamp.IsSet()
}

// HasCreatedTimestamp returns a boolean if a field has been set.
func (o *SqlProtectionSource) HasCreatedTimestamp() bool {
	if o != nil && o.CreatedTimestamp.IsSet() {
		return true
	}

	return false
}

// SetCreatedTimestamp gets a reference to the given NullableString and assigns it to the CreatedTimestamp field.
func (o *SqlProtectionSource) SetCreatedTimestamp(v string) {
	o.CreatedTimestamp.Set(&v)
}
// SetCreatedTimestampNil sets the value for CreatedTimestamp to be an explicit nil
func (o *SqlProtectionSource) SetCreatedTimestampNil() {
	o.CreatedTimestamp.Set(nil)
}

// UnsetCreatedTimestamp ensures that no value is present for CreatedTimestamp, not even an explicit nil
func (o *SqlProtectionSource) UnsetCreatedTimestamp() {
	o.CreatedTimestamp.Unset()
}

// GetDatabaseName returns the DatabaseName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlProtectionSource) GetDatabaseName() string {
	if o == nil || o.DatabaseName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DatabaseName.Get()
}

// GetDatabaseNameOk returns a tuple with the DatabaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlProtectionSource) GetDatabaseNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DatabaseName.Get(), o.DatabaseName.IsSet()
}

// HasDatabaseName returns a boolean if a field has been set.
func (o *SqlProtectionSource) HasDatabaseName() bool {
	if o != nil && o.DatabaseName.IsSet() {
		return true
	}

	return false
}

// SetDatabaseName gets a reference to the given NullableString and assigns it to the DatabaseName field.
func (o *SqlProtectionSource) SetDatabaseName(v string) {
	o.DatabaseName.Set(&v)
}
// SetDatabaseNameNil sets the value for DatabaseName to be an explicit nil
func (o *SqlProtectionSource) SetDatabaseNameNil() {
	o.DatabaseName.Set(nil)
}

// UnsetDatabaseName ensures that no value is present for DatabaseName, not even an explicit nil
func (o *SqlProtectionSource) UnsetDatabaseName() {
	o.DatabaseName.Unset()
}

// GetDbAagEntityId returns the DbAagEntityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlProtectionSource) GetDbAagEntityId() int64 {
	if o == nil || o.DbAagEntityId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DbAagEntityId.Get()
}

// GetDbAagEntityIdOk returns a tuple with the DbAagEntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlProtectionSource) GetDbAagEntityIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DbAagEntityId.Get(), o.DbAagEntityId.IsSet()
}

// HasDbAagEntityId returns a boolean if a field has been set.
func (o *SqlProtectionSource) HasDbAagEntityId() bool {
	if o != nil && o.DbAagEntityId.IsSet() {
		return true
	}

	return false
}

// SetDbAagEntityId gets a reference to the given NullableInt64 and assigns it to the DbAagEntityId field.
func (o *SqlProtectionSource) SetDbAagEntityId(v int64) {
	o.DbAagEntityId.Set(&v)
}
// SetDbAagEntityIdNil sets the value for DbAagEntityId to be an explicit nil
func (o *SqlProtectionSource) SetDbAagEntityIdNil() {
	o.DbAagEntityId.Set(nil)
}

// UnsetDbAagEntityId ensures that no value is present for DbAagEntityId, not even an explicit nil
func (o *SqlProtectionSource) UnsetDbAagEntityId() {
	o.DbAagEntityId.Unset()
}

// GetDbAagName returns the DbAagName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlProtectionSource) GetDbAagName() string {
	if o == nil || o.DbAagName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DbAagName.Get()
}

// GetDbAagNameOk returns a tuple with the DbAagName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlProtectionSource) GetDbAagNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DbAagName.Get(), o.DbAagName.IsSet()
}

// HasDbAagName returns a boolean if a field has been set.
func (o *SqlProtectionSource) HasDbAagName() bool {
	if o != nil && o.DbAagName.IsSet() {
		return true
	}

	return false
}

// SetDbAagName gets a reference to the given NullableString and assigns it to the DbAagName field.
func (o *SqlProtectionSource) SetDbAagName(v string) {
	o.DbAagName.Set(&v)
}
// SetDbAagNameNil sets the value for DbAagName to be an explicit nil
func (o *SqlProtectionSource) SetDbAagNameNil() {
	o.DbAagName.Set(nil)
}

// UnsetDbAagName ensures that no value is present for DbAagName, not even an explicit nil
func (o *SqlProtectionSource) UnsetDbAagName() {
	o.DbAagName.Unset()
}

// GetDbCompatibilityLevel returns the DbCompatibilityLevel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlProtectionSource) GetDbCompatibilityLevel() int64 {
	if o == nil || o.DbCompatibilityLevel.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DbCompatibilityLevel.Get()
}

// GetDbCompatibilityLevelOk returns a tuple with the DbCompatibilityLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlProtectionSource) GetDbCompatibilityLevelOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DbCompatibilityLevel.Get(), o.DbCompatibilityLevel.IsSet()
}

// HasDbCompatibilityLevel returns a boolean if a field has been set.
func (o *SqlProtectionSource) HasDbCompatibilityLevel() bool {
	if o != nil && o.DbCompatibilityLevel.IsSet() {
		return true
	}

	return false
}

// SetDbCompatibilityLevel gets a reference to the given NullableInt64 and assigns it to the DbCompatibilityLevel field.
func (o *SqlProtectionSource) SetDbCompatibilityLevel(v int64) {
	o.DbCompatibilityLevel.Set(&v)
}
// SetDbCompatibilityLevelNil sets the value for DbCompatibilityLevel to be an explicit nil
func (o *SqlProtectionSource) SetDbCompatibilityLevelNil() {
	o.DbCompatibilityLevel.Set(nil)
}

// UnsetDbCompatibilityLevel ensures that no value is present for DbCompatibilityLevel, not even an explicit nil
func (o *SqlProtectionSource) UnsetDbCompatibilityLevel() {
	o.DbCompatibilityLevel.Unset()
}

// GetDbFileGroups returns the DbFileGroups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlProtectionSource) GetDbFileGroups() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.DbFileGroups
}

// GetDbFileGroupsOk returns a tuple with the DbFileGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlProtectionSource) GetDbFileGroupsOk() (*[]string, bool) {
	if o == nil || o.DbFileGroups == nil {
		return nil, false
	}
	return &o.DbFileGroups, true
}

// HasDbFileGroups returns a boolean if a field has been set.
func (o *SqlProtectionSource) HasDbFileGroups() bool {
	if o != nil && o.DbFileGroups != nil {
		return true
	}

	return false
}

// SetDbFileGroups gets a reference to the given []string and assigns it to the DbFileGroups field.
func (o *SqlProtectionSource) SetDbFileGroups(v []string) {
	o.DbFileGroups = v
}

// GetDbFiles returns the DbFiles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlProtectionSource) GetDbFiles() []DbFileInfo {
	if o == nil  {
		var ret []DbFileInfo
		return ret
	}
	return o.DbFiles
}

// GetDbFilesOk returns a tuple with the DbFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlProtectionSource) GetDbFilesOk() (*[]DbFileInfo, bool) {
	if o == nil || o.DbFiles == nil {
		return nil, false
	}
	return &o.DbFiles, true
}

// HasDbFiles returns a boolean if a field has been set.
func (o *SqlProtectionSource) HasDbFiles() bool {
	if o != nil && o.DbFiles != nil {
		return true
	}

	return false
}

// SetDbFiles gets a reference to the given []DbFileInfo and assigns it to the DbFiles field.
func (o *SqlProtectionSource) SetDbFiles(v []DbFileInfo) {
	o.DbFiles = v
}

// GetDbOwnerUsername returns the DbOwnerUsername field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlProtectionSource) GetDbOwnerUsername() string {
	if o == nil || o.DbOwnerUsername.Get() == nil {
		var ret string
		return ret
	}
	return *o.DbOwnerUsername.Get()
}

// GetDbOwnerUsernameOk returns a tuple with the DbOwnerUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlProtectionSource) GetDbOwnerUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DbOwnerUsername.Get(), o.DbOwnerUsername.IsSet()
}

// HasDbOwnerUsername returns a boolean if a field has been set.
func (o *SqlProtectionSource) HasDbOwnerUsername() bool {
	if o != nil && o.DbOwnerUsername.IsSet() {
		return true
	}

	return false
}

// SetDbOwnerUsername gets a reference to the given NullableString and assigns it to the DbOwnerUsername field.
func (o *SqlProtectionSource) SetDbOwnerUsername(v string) {
	o.DbOwnerUsername.Set(&v)
}
// SetDbOwnerUsernameNil sets the value for DbOwnerUsername to be an explicit nil
func (o *SqlProtectionSource) SetDbOwnerUsernameNil() {
	o.DbOwnerUsername.Set(nil)
}

// UnsetDbOwnerUsername ensures that no value is present for DbOwnerUsername, not even an explicit nil
func (o *SqlProtectionSource) UnsetDbOwnerUsername() {
	o.DbOwnerUsername.Unset()
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SqlProtectionSource) GetId() SqlSourceId {
	if o == nil || o.Id == nil {
		var ret SqlSourceId
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlProtectionSource) GetIdOk() (*SqlSourceId, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SqlProtectionSource) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given SqlSourceId and assigns it to the Id field.
func (o *SqlProtectionSource) SetId(v SqlSourceId) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlProtectionSource) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlProtectionSource) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *SqlProtectionSource) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *SqlProtectionSource) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *SqlProtectionSource) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *SqlProtectionSource) UnsetName() {
	o.Name.Unset()
}

// GetOwnerId returns the OwnerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlProtectionSource) GetOwnerId() int64 {
	if o == nil || o.OwnerId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.OwnerId.Get()
}

// GetOwnerIdOk returns a tuple with the OwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlProtectionSource) GetOwnerIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OwnerId.Get(), o.OwnerId.IsSet()
}

// HasOwnerId returns a boolean if a field has been set.
func (o *SqlProtectionSource) HasOwnerId() bool {
	if o != nil && o.OwnerId.IsSet() {
		return true
	}

	return false
}

// SetOwnerId gets a reference to the given NullableInt64 and assigns it to the OwnerId field.
func (o *SqlProtectionSource) SetOwnerId(v int64) {
	o.OwnerId.Set(&v)
}
// SetOwnerIdNil sets the value for OwnerId to be an explicit nil
func (o *SqlProtectionSource) SetOwnerIdNil() {
	o.OwnerId.Set(nil)
}

// UnsetOwnerId ensures that no value is present for OwnerId, not even an explicit nil
func (o *SqlProtectionSource) UnsetOwnerId() {
	o.OwnerId.Unset()
}

// GetRecoveryModel returns the RecoveryModel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlProtectionSource) GetRecoveryModel() string {
	if o == nil || o.RecoveryModel.Get() == nil {
		var ret string
		return ret
	}
	return *o.RecoveryModel.Get()
}

// GetRecoveryModelOk returns a tuple with the RecoveryModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlProtectionSource) GetRecoveryModelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RecoveryModel.Get(), o.RecoveryModel.IsSet()
}

// HasRecoveryModel returns a boolean if a field has been set.
func (o *SqlProtectionSource) HasRecoveryModel() bool {
	if o != nil && o.RecoveryModel.IsSet() {
		return true
	}

	return false
}

// SetRecoveryModel gets a reference to the given NullableString and assigns it to the RecoveryModel field.
func (o *SqlProtectionSource) SetRecoveryModel(v string) {
	o.RecoveryModel.Set(&v)
}
// SetRecoveryModelNil sets the value for RecoveryModel to be an explicit nil
func (o *SqlProtectionSource) SetRecoveryModelNil() {
	o.RecoveryModel.Set(nil)
}

// UnsetRecoveryModel ensures that no value is present for RecoveryModel, not even an explicit nil
func (o *SqlProtectionSource) UnsetRecoveryModel() {
	o.RecoveryModel.Unset()
}

// GetSqlServerDbState returns the SqlServerDbState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlProtectionSource) GetSqlServerDbState() string {
	if o == nil || o.SqlServerDbState.Get() == nil {
		var ret string
		return ret
	}
	return *o.SqlServerDbState.Get()
}

// GetSqlServerDbStateOk returns a tuple with the SqlServerDbState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlProtectionSource) GetSqlServerDbStateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SqlServerDbState.Get(), o.SqlServerDbState.IsSet()
}

// HasSqlServerDbState returns a boolean if a field has been set.
func (o *SqlProtectionSource) HasSqlServerDbState() bool {
	if o != nil && o.SqlServerDbState.IsSet() {
		return true
	}

	return false
}

// SetSqlServerDbState gets a reference to the given NullableString and assigns it to the SqlServerDbState field.
func (o *SqlProtectionSource) SetSqlServerDbState(v string) {
	o.SqlServerDbState.Set(&v)
}
// SetSqlServerDbStateNil sets the value for SqlServerDbState to be an explicit nil
func (o *SqlProtectionSource) SetSqlServerDbStateNil() {
	o.SqlServerDbState.Set(nil)
}

// UnsetSqlServerDbState ensures that no value is present for SqlServerDbState, not even an explicit nil
func (o *SqlProtectionSource) UnsetSqlServerDbState() {
	o.SqlServerDbState.Unset()
}

// GetSqlServerInstanceVersion returns the SqlServerInstanceVersion field value if set, zero value otherwise.
func (o *SqlProtectionSource) GetSqlServerInstanceVersion() SQLServerInstanceVersion {
	if o == nil || o.SqlServerInstanceVersion == nil {
		var ret SQLServerInstanceVersion
		return ret
	}
	return *o.SqlServerInstanceVersion
}

// GetSqlServerInstanceVersionOk returns a tuple with the SqlServerInstanceVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlProtectionSource) GetSqlServerInstanceVersionOk() (*SQLServerInstanceVersion, bool) {
	if o == nil || o.SqlServerInstanceVersion == nil {
		return nil, false
	}
	return o.SqlServerInstanceVersion, true
}

// HasSqlServerInstanceVersion returns a boolean if a field has been set.
func (o *SqlProtectionSource) HasSqlServerInstanceVersion() bool {
	if o != nil && o.SqlServerInstanceVersion != nil {
		return true
	}

	return false
}

// SetSqlServerInstanceVersion gets a reference to the given SQLServerInstanceVersion and assigns it to the SqlServerInstanceVersion field.
func (o *SqlProtectionSource) SetSqlServerInstanceVersion(v SQLServerInstanceVersion) {
	o.SqlServerInstanceVersion = &v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlProtectionSource) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlProtectionSource) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *SqlProtectionSource) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *SqlProtectionSource) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *SqlProtectionSource) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *SqlProtectionSource) UnsetType() {
	o.Type.Unset()
}

func (o SqlProtectionSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsAvailableForVssBackup.IsSet() {
		toSerialize["IsAvailableForVssBackup"] = o.IsAvailableForVssBackup.Get()
	}
	if o.CreatedTimestamp.IsSet() {
		toSerialize["createdTimestamp"] = o.CreatedTimestamp.Get()
	}
	if o.DatabaseName.IsSet() {
		toSerialize["databaseName"] = o.DatabaseName.Get()
	}
	if o.DbAagEntityId.IsSet() {
		toSerialize["dbAagEntityId"] = o.DbAagEntityId.Get()
	}
	if o.DbAagName.IsSet() {
		toSerialize["dbAagName"] = o.DbAagName.Get()
	}
	if o.DbCompatibilityLevel.IsSet() {
		toSerialize["dbCompatibilityLevel"] = o.DbCompatibilityLevel.Get()
	}
	if o.DbFileGroups != nil {
		toSerialize["dbFileGroups"] = o.DbFileGroups
	}
	if o.DbFiles != nil {
		toSerialize["dbFiles"] = o.DbFiles
	}
	if o.DbOwnerUsername.IsSet() {
		toSerialize["dbOwnerUsername"] = o.DbOwnerUsername.Get()
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.OwnerId.IsSet() {
		toSerialize["ownerId"] = o.OwnerId.Get()
	}
	if o.RecoveryModel.IsSet() {
		toSerialize["recoveryModel"] = o.RecoveryModel.Get()
	}
	if o.SqlServerDbState.IsSet() {
		toSerialize["sqlServerDbState"] = o.SqlServerDbState.Get()
	}
	if o.SqlServerInstanceVersion != nil {
		toSerialize["sqlServerInstanceVersion"] = o.SqlServerInstanceVersion
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSqlProtectionSource struct {
	value *SqlProtectionSource
	isSet bool
}

func (v NullableSqlProtectionSource) Get() *SqlProtectionSource {
	return v.value
}

func (v *NullableSqlProtectionSource) Set(val *SqlProtectionSource) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlProtectionSource) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlProtectionSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlProtectionSource(val *SqlProtectionSource) *NullableSqlProtectionSource {
	return &NullableSqlProtectionSource{value: val, isSet: true}
}

func (v NullableSqlProtectionSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSqlProtectionSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


