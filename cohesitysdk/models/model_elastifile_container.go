/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ElastifileContainer Specifies information about container in an Elastifile Cluster.
type ElastifileContainer struct {
	// Specifies the creation date of the container.
	CreatedAt NullableString `json:"createdAt,omitempty"`
	// Specifies id of a Elastifile Container in a Cluster.
	Id NullableInt32 `json:"id,omitempty"`
	// Specifies if the container has NFS volumes or not.
	IsNfsInterface NullableBool `json:"isNfsInterface,omitempty"`
	// Specifies if the container has SMB volumes or not.
	IsSmbInterface NullableBool `json:"isSmbInterface,omitempty"`
	// Specifies the name of the container.
	Name NullableString `json:"name,omitempty"`
	// Specifies Elastifile supported Protocol information enabled on Elastifile container. 'kNfs' indicates NFS protocol in an elastifile container. 'kSmb' indicates SMB protocol in an elastifile container.
	Protocols []string `json:"protocols,omitempty"`
	// Specifies the bytes used by the container.
	UsedBytes NullableInt64 `json:"usedBytes,omitempty"`
	// Specifies the UUID of the container.
	Uuid NullableString `json:"uuid,omitempty"`
}

// NewElastifileContainer instantiates a new ElastifileContainer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewElastifileContainer() *ElastifileContainer {
	this := ElastifileContainer{}
	return &this
}

// NewElastifileContainerWithDefaults instantiates a new ElastifileContainer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewElastifileContainerWithDefaults() *ElastifileContainer {
	this := ElastifileContainer{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ElastifileContainer) GetCreatedAt() string {
	if o == nil || o.CreatedAt.Get() == nil {
		var ret string
		return ret
	}
	return *o.CreatedAt.Get()
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ElastifileContainer) GetCreatedAtOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CreatedAt.Get(), o.CreatedAt.IsSet()
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ElastifileContainer) HasCreatedAt() bool {
	if o != nil && o.CreatedAt.IsSet() {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given NullableString and assigns it to the CreatedAt field.
func (o *ElastifileContainer) SetCreatedAt(v string) {
	o.CreatedAt.Set(&v)
}
// SetCreatedAtNil sets the value for CreatedAt to be an explicit nil
func (o *ElastifileContainer) SetCreatedAtNil() {
	o.CreatedAt.Set(nil)
}

// UnsetCreatedAt ensures that no value is present for CreatedAt, not even an explicit nil
func (o *ElastifileContainer) UnsetCreatedAt() {
	o.CreatedAt.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ElastifileContainer) GetId() int32 {
	if o == nil || o.Id.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ElastifileContainer) GetIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *ElastifileContainer) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt32 and assigns it to the Id field.
func (o *ElastifileContainer) SetId(v int32) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *ElastifileContainer) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *ElastifileContainer) UnsetId() {
	o.Id.Unset()
}

// GetIsNfsInterface returns the IsNfsInterface field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ElastifileContainer) GetIsNfsInterface() bool {
	if o == nil || o.IsNfsInterface.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsNfsInterface.Get()
}

// GetIsNfsInterfaceOk returns a tuple with the IsNfsInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ElastifileContainer) GetIsNfsInterfaceOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsNfsInterface.Get(), o.IsNfsInterface.IsSet()
}

// HasIsNfsInterface returns a boolean if a field has been set.
func (o *ElastifileContainer) HasIsNfsInterface() bool {
	if o != nil && o.IsNfsInterface.IsSet() {
		return true
	}

	return false
}

// SetIsNfsInterface gets a reference to the given NullableBool and assigns it to the IsNfsInterface field.
func (o *ElastifileContainer) SetIsNfsInterface(v bool) {
	o.IsNfsInterface.Set(&v)
}
// SetIsNfsInterfaceNil sets the value for IsNfsInterface to be an explicit nil
func (o *ElastifileContainer) SetIsNfsInterfaceNil() {
	o.IsNfsInterface.Set(nil)
}

// UnsetIsNfsInterface ensures that no value is present for IsNfsInterface, not even an explicit nil
func (o *ElastifileContainer) UnsetIsNfsInterface() {
	o.IsNfsInterface.Unset()
}

// GetIsSmbInterface returns the IsSmbInterface field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ElastifileContainer) GetIsSmbInterface() bool {
	if o == nil || o.IsSmbInterface.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsSmbInterface.Get()
}

// GetIsSmbInterfaceOk returns a tuple with the IsSmbInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ElastifileContainer) GetIsSmbInterfaceOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsSmbInterface.Get(), o.IsSmbInterface.IsSet()
}

// HasIsSmbInterface returns a boolean if a field has been set.
func (o *ElastifileContainer) HasIsSmbInterface() bool {
	if o != nil && o.IsSmbInterface.IsSet() {
		return true
	}

	return false
}

// SetIsSmbInterface gets a reference to the given NullableBool and assigns it to the IsSmbInterface field.
func (o *ElastifileContainer) SetIsSmbInterface(v bool) {
	o.IsSmbInterface.Set(&v)
}
// SetIsSmbInterfaceNil sets the value for IsSmbInterface to be an explicit nil
func (o *ElastifileContainer) SetIsSmbInterfaceNil() {
	o.IsSmbInterface.Set(nil)
}

// UnsetIsSmbInterface ensures that no value is present for IsSmbInterface, not even an explicit nil
func (o *ElastifileContainer) UnsetIsSmbInterface() {
	o.IsSmbInterface.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ElastifileContainer) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ElastifileContainer) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ElastifileContainer) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ElastifileContainer) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *ElastifileContainer) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ElastifileContainer) UnsetName() {
	o.Name.Unset()
}

// GetProtocols returns the Protocols field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ElastifileContainer) GetProtocols() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Protocols
}

// GetProtocolsOk returns a tuple with the Protocols field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ElastifileContainer) GetProtocolsOk() (*[]string, bool) {
	if o == nil || o.Protocols == nil {
		return nil, false
	}
	return &o.Protocols, true
}

// HasProtocols returns a boolean if a field has been set.
func (o *ElastifileContainer) HasProtocols() bool {
	if o != nil && o.Protocols != nil {
		return true
	}

	return false
}

// SetProtocols gets a reference to the given []string and assigns it to the Protocols field.
func (o *ElastifileContainer) SetProtocols(v []string) {
	o.Protocols = v
}

// GetUsedBytes returns the UsedBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ElastifileContainer) GetUsedBytes() int64 {
	if o == nil || o.UsedBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.UsedBytes.Get()
}

// GetUsedBytesOk returns a tuple with the UsedBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ElastifileContainer) GetUsedBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UsedBytes.Get(), o.UsedBytes.IsSet()
}

// HasUsedBytes returns a boolean if a field has been set.
func (o *ElastifileContainer) HasUsedBytes() bool {
	if o != nil && o.UsedBytes.IsSet() {
		return true
	}

	return false
}

// SetUsedBytes gets a reference to the given NullableInt64 and assigns it to the UsedBytes field.
func (o *ElastifileContainer) SetUsedBytes(v int64) {
	o.UsedBytes.Set(&v)
}
// SetUsedBytesNil sets the value for UsedBytes to be an explicit nil
func (o *ElastifileContainer) SetUsedBytesNil() {
	o.UsedBytes.Set(nil)
}

// UnsetUsedBytes ensures that no value is present for UsedBytes, not even an explicit nil
func (o *ElastifileContainer) UnsetUsedBytes() {
	o.UsedBytes.Unset()
}

// GetUuid returns the Uuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ElastifileContainer) GetUuid() string {
	if o == nil || o.Uuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.Uuid.Get()
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ElastifileContainer) GetUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Uuid.Get(), o.Uuid.IsSet()
}

// HasUuid returns a boolean if a field has been set.
func (o *ElastifileContainer) HasUuid() bool {
	if o != nil && o.Uuid.IsSet() {
		return true
	}

	return false
}

// SetUuid gets a reference to the given NullableString and assigns it to the Uuid field.
func (o *ElastifileContainer) SetUuid(v string) {
	o.Uuid.Set(&v)
}
// SetUuidNil sets the value for Uuid to be an explicit nil
func (o *ElastifileContainer) SetUuidNil() {
	o.Uuid.Set(nil)
}

// UnsetUuid ensures that no value is present for Uuid, not even an explicit nil
func (o *ElastifileContainer) UnsetUuid() {
	o.Uuid.Unset()
}

func (o ElastifileContainer) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedAt.IsSet() {
		toSerialize["createdAt"] = o.CreatedAt.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.IsNfsInterface.IsSet() {
		toSerialize["isNfsInterface"] = o.IsNfsInterface.Get()
	}
	if o.IsSmbInterface.IsSet() {
		toSerialize["isSmbInterface"] = o.IsSmbInterface.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Protocols != nil {
		toSerialize["protocols"] = o.Protocols
	}
	if o.UsedBytes.IsSet() {
		toSerialize["usedBytes"] = o.UsedBytes.Get()
	}
	if o.Uuid.IsSet() {
		toSerialize["uuid"] = o.Uuid.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableElastifileContainer struct {
	value *ElastifileContainer
	isSet bool
}

func (v NullableElastifileContainer) Get() *ElastifileContainer {
	return v.value
}

func (v *NullableElastifileContainer) Set(val *ElastifileContainer) {
	v.value = val
	v.isSet = true
}

func (v NullableElastifileContainer) IsSet() bool {
	return v.isSet
}

func (v *NullableElastifileContainer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableElastifileContainer(val *ElastifileContainer) *NullableElastifileContainer {
	return &NullableElastifileContainer{value: val, isSet: true}
}

func (v NullableElastifileContainer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableElastifileContainer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


