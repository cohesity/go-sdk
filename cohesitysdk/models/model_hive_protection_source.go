/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// HiveProtectionSource Specifies an Object representing Hive.
type HiveProtectionSource struct {
	// Specifies the instance name of the Hive entity.
	Name NullableString `json:"name,omitempty"`
	TableInfo *HiveTable `json:"tableInfo,omitempty"`
	// Specifies the type of the managed Object in Hive Protection Source. Specifies the type of an Hive source entity. 'kCluster' indicates a Hive cluster distributed over several physical nodes. 'kDatabase' indicates a Database in the Hive environment. 'kTable' indicates a Table in the Hive environment.
	Type NullableString `json:"type,omitempty"`
	// Specifies the UUID for the Hive entity.
	Uuid NullableString `json:"uuid,omitempty"`
}

// NewHiveProtectionSource instantiates a new HiveProtectionSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHiveProtectionSource() *HiveProtectionSource {
	this := HiveProtectionSource{}
	return &this
}

// NewHiveProtectionSourceWithDefaults instantiates a new HiveProtectionSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHiveProtectionSourceWithDefaults() *HiveProtectionSource {
	this := HiveProtectionSource{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HiveProtectionSource) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HiveProtectionSource) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *HiveProtectionSource) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *HiveProtectionSource) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *HiveProtectionSource) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *HiveProtectionSource) UnsetName() {
	o.Name.Unset()
}

// GetTableInfo returns the TableInfo field value if set, zero value otherwise.
func (o *HiveProtectionSource) GetTableInfo() HiveTable {
	if o == nil || o.TableInfo == nil {
		var ret HiveTable
		return ret
	}
	return *o.TableInfo
}

// GetTableInfoOk returns a tuple with the TableInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HiveProtectionSource) GetTableInfoOk() (*HiveTable, bool) {
	if o == nil || o.TableInfo == nil {
		return nil, false
	}
	return o.TableInfo, true
}

// HasTableInfo returns a boolean if a field has been set.
func (o *HiveProtectionSource) HasTableInfo() bool {
	if o != nil && o.TableInfo != nil {
		return true
	}

	return false
}

// SetTableInfo gets a reference to the given HiveTable and assigns it to the TableInfo field.
func (o *HiveProtectionSource) SetTableInfo(v HiveTable) {
	o.TableInfo = &v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HiveProtectionSource) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HiveProtectionSource) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *HiveProtectionSource) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *HiveProtectionSource) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *HiveProtectionSource) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *HiveProtectionSource) UnsetType() {
	o.Type.Unset()
}

// GetUuid returns the Uuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HiveProtectionSource) GetUuid() string {
	if o == nil || o.Uuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.Uuid.Get()
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HiveProtectionSource) GetUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Uuid.Get(), o.Uuid.IsSet()
}

// HasUuid returns a boolean if a field has been set.
func (o *HiveProtectionSource) HasUuid() bool {
	if o != nil && o.Uuid.IsSet() {
		return true
	}

	return false
}

// SetUuid gets a reference to the given NullableString and assigns it to the Uuid field.
func (o *HiveProtectionSource) SetUuid(v string) {
	o.Uuid.Set(&v)
}
// SetUuidNil sets the value for Uuid to be an explicit nil
func (o *HiveProtectionSource) SetUuidNil() {
	o.Uuid.Set(nil)
}

// UnsetUuid ensures that no value is present for Uuid, not even an explicit nil
func (o *HiveProtectionSource) UnsetUuid() {
	o.Uuid.Unset()
}

func (o HiveProtectionSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.TableInfo != nil {
		toSerialize["tableInfo"] = o.TableInfo
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Uuid.IsSet() {
		toSerialize["uuid"] = o.Uuid.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableHiveProtectionSource struct {
	value *HiveProtectionSource
	isSet bool
}

func (v NullableHiveProtectionSource) Get() *HiveProtectionSource {
	return v.value
}

func (v *NullableHiveProtectionSource) Set(val *HiveProtectionSource) {
	v.value = val
	v.isSet = true
}

func (v NullableHiveProtectionSource) IsSet() bool {
	return v.isSet
}

func (v *NullableHiveProtectionSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHiveProtectionSource(val *HiveProtectionSource) *NullableHiveProtectionSource {
	return &NullableHiveProtectionSource{value: val, isSet: true}
}

func (v NullableHiveProtectionSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHiveProtectionSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


