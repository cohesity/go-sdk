/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// CouchbaseBucket Specifies an Object containing information about a couchbase Bucket.
type CouchbaseBucket struct {
	// Type of this bucket.
	BucketType NullableString `json:"bucketType,omitempty"`
	// Number of documents in this bucket.
	DocumentCount NullableInt64 `json:"documentCount,omitempty"`
}

// NewCouchbaseBucket instantiates a new CouchbaseBucket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCouchbaseBucket() *CouchbaseBucket {
	this := CouchbaseBucket{}
	return &this
}

// NewCouchbaseBucketWithDefaults instantiates a new CouchbaseBucket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCouchbaseBucketWithDefaults() *CouchbaseBucket {
	this := CouchbaseBucket{}
	return &this
}

// GetBucketType returns the BucketType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CouchbaseBucket) GetBucketType() string {
	if o == nil || o.BucketType.Get() == nil {
		var ret string
		return ret
	}
	return *o.BucketType.Get()
}

// GetBucketTypeOk returns a tuple with the BucketType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CouchbaseBucket) GetBucketTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BucketType.Get(), o.BucketType.IsSet()
}

// HasBucketType returns a boolean if a field has been set.
func (o *CouchbaseBucket) HasBucketType() bool {
	if o != nil && o.BucketType.IsSet() {
		return true
	}

	return false
}

// SetBucketType gets a reference to the given NullableString and assigns it to the BucketType field.
func (o *CouchbaseBucket) SetBucketType(v string) {
	o.BucketType.Set(&v)
}
// SetBucketTypeNil sets the value for BucketType to be an explicit nil
func (o *CouchbaseBucket) SetBucketTypeNil() {
	o.BucketType.Set(nil)
}

// UnsetBucketType ensures that no value is present for BucketType, not even an explicit nil
func (o *CouchbaseBucket) UnsetBucketType() {
	o.BucketType.Unset()
}

// GetDocumentCount returns the DocumentCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CouchbaseBucket) GetDocumentCount() int64 {
	if o == nil || o.DocumentCount.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DocumentCount.Get()
}

// GetDocumentCountOk returns a tuple with the DocumentCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CouchbaseBucket) GetDocumentCountOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DocumentCount.Get(), o.DocumentCount.IsSet()
}

// HasDocumentCount returns a boolean if a field has been set.
func (o *CouchbaseBucket) HasDocumentCount() bool {
	if o != nil && o.DocumentCount.IsSet() {
		return true
	}

	return false
}

// SetDocumentCount gets a reference to the given NullableInt64 and assigns it to the DocumentCount field.
func (o *CouchbaseBucket) SetDocumentCount(v int64) {
	o.DocumentCount.Set(&v)
}
// SetDocumentCountNil sets the value for DocumentCount to be an explicit nil
func (o *CouchbaseBucket) SetDocumentCountNil() {
	o.DocumentCount.Set(nil)
}

// UnsetDocumentCount ensures that no value is present for DocumentCount, not even an explicit nil
func (o *CouchbaseBucket) UnsetDocumentCount() {
	o.DocumentCount.Unset()
}

func (o CouchbaseBucket) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BucketType.IsSet() {
		toSerialize["bucketType"] = o.BucketType.Get()
	}
	if o.DocumentCount.IsSet() {
		toSerialize["documentCount"] = o.DocumentCount.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCouchbaseBucket struct {
	value *CouchbaseBucket
	isSet bool
}

func (v NullableCouchbaseBucket) Get() *CouchbaseBucket {
	return v.value
}

func (v *NullableCouchbaseBucket) Set(val *CouchbaseBucket) {
	v.value = val
	v.isSet = true
}

func (v NullableCouchbaseBucket) IsSet() bool {
	return v.isSet
}

func (v *NullableCouchbaseBucket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCouchbaseBucket(val *CouchbaseBucket) *NullableCouchbaseBucket {
	return &NullableCouchbaseBucket{value: val, isSet: true}
}

func (v NullableCouchbaseBucket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCouchbaseBucket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


