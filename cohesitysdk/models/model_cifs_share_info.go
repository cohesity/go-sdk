/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// CifsShareInfo Specifies information about a CIFS share of a NetApp volume.
type CifsShareInfo struct {
	// Array of Access Control Lists.  Specifies the ACLs for this share.
	Acls []string `json:"acls,omitempty"`
	// Specifies the name of the CIFS share. This can be different from the volume name that this share belongs to. A single volume can export multiple CIFS shares, each with unique settings such as permissions.
	Name NullableString `json:"name,omitempty"`
	// Specifies the path of this share under the Vserver's root.
	Path NullableString `json:"path,omitempty"`
	// Specifies the CIFS server name (such as 'NETAPP-01') specified by the system administrator. This name is searchable within the active directory domain.
	ServerName NullableString `json:"serverName,omitempty"`
}

// NewCifsShareInfo instantiates a new CifsShareInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCifsShareInfo() *CifsShareInfo {
	this := CifsShareInfo{}
	return &this
}

// NewCifsShareInfoWithDefaults instantiates a new CifsShareInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCifsShareInfoWithDefaults() *CifsShareInfo {
	this := CifsShareInfo{}
	return &this
}

// GetAcls returns the Acls field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CifsShareInfo) GetAcls() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Acls
}

// GetAclsOk returns a tuple with the Acls field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CifsShareInfo) GetAclsOk() (*[]string, bool) {
	if o == nil || o.Acls == nil {
		return nil, false
	}
	return &o.Acls, true
}

// HasAcls returns a boolean if a field has been set.
func (o *CifsShareInfo) HasAcls() bool {
	if o != nil && o.Acls != nil {
		return true
	}

	return false
}

// SetAcls gets a reference to the given []string and assigns it to the Acls field.
func (o *CifsShareInfo) SetAcls(v []string) {
	o.Acls = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CifsShareInfo) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CifsShareInfo) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *CifsShareInfo) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *CifsShareInfo) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *CifsShareInfo) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *CifsShareInfo) UnsetName() {
	o.Name.Unset()
}

// GetPath returns the Path field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CifsShareInfo) GetPath() string {
	if o == nil || o.Path.Get() == nil {
		var ret string
		return ret
	}
	return *o.Path.Get()
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CifsShareInfo) GetPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Path.Get(), o.Path.IsSet()
}

// HasPath returns a boolean if a field has been set.
func (o *CifsShareInfo) HasPath() bool {
	if o != nil && o.Path.IsSet() {
		return true
	}

	return false
}

// SetPath gets a reference to the given NullableString and assigns it to the Path field.
func (o *CifsShareInfo) SetPath(v string) {
	o.Path.Set(&v)
}
// SetPathNil sets the value for Path to be an explicit nil
func (o *CifsShareInfo) SetPathNil() {
	o.Path.Set(nil)
}

// UnsetPath ensures that no value is present for Path, not even an explicit nil
func (o *CifsShareInfo) UnsetPath() {
	o.Path.Unset()
}

// GetServerName returns the ServerName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CifsShareInfo) GetServerName() string {
	if o == nil || o.ServerName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ServerName.Get()
}

// GetServerNameOk returns a tuple with the ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CifsShareInfo) GetServerNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ServerName.Get(), o.ServerName.IsSet()
}

// HasServerName returns a boolean if a field has been set.
func (o *CifsShareInfo) HasServerName() bool {
	if o != nil && o.ServerName.IsSet() {
		return true
	}

	return false
}

// SetServerName gets a reference to the given NullableString and assigns it to the ServerName field.
func (o *CifsShareInfo) SetServerName(v string) {
	o.ServerName.Set(&v)
}
// SetServerNameNil sets the value for ServerName to be an explicit nil
func (o *CifsShareInfo) SetServerNameNil() {
	o.ServerName.Set(nil)
}

// UnsetServerName ensures that no value is present for ServerName, not even an explicit nil
func (o *CifsShareInfo) UnsetServerName() {
	o.ServerName.Unset()
}

func (o CifsShareInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Acls != nil {
		toSerialize["acls"] = o.Acls
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Path.IsSet() {
		toSerialize["path"] = o.Path.Get()
	}
	if o.ServerName.IsSet() {
		toSerialize["serverName"] = o.ServerName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCifsShareInfo struct {
	value *CifsShareInfo
	isSet bool
}

func (v NullableCifsShareInfo) Get() *CifsShareInfo {
	return v.value
}

func (v *NullableCifsShareInfo) Set(val *CifsShareInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCifsShareInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCifsShareInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCifsShareInfo(val *CifsShareInfo) *NullableCifsShareInfo {
	return &NullableCifsShareInfo{value: val, isSet: true}
}

func (v NullableCifsShareInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCifsShareInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


