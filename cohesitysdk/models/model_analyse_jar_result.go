/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// AnalyseJarResult struct for AnalyseJarResult
type AnalyseJarResult struct {
	Error *ErrorProto `json:"error,omitempty"`
	// Name of all mapper classes found in jar file.
	Mappers []string `json:"mappers,omitempty"`
	// Name of all reducers classes found in jar file.
	Reducers []string `json:"reducers,omitempty"`
}

// NewAnalyseJarResult instantiates a new AnalyseJarResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnalyseJarResult() *AnalyseJarResult {
	this := AnalyseJarResult{}
	return &this
}

// NewAnalyseJarResultWithDefaults instantiates a new AnalyseJarResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnalyseJarResultWithDefaults() *AnalyseJarResult {
	this := AnalyseJarResult{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *AnalyseJarResult) GetError() ErrorProto {
	if o == nil || o.Error == nil {
		var ret ErrorProto
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnalyseJarResult) GetErrorOk() (*ErrorProto, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *AnalyseJarResult) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given ErrorProto and assigns it to the Error field.
func (o *AnalyseJarResult) SetError(v ErrorProto) {
	o.Error = &v
}

// GetMappers returns the Mappers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AnalyseJarResult) GetMappers() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Mappers
}

// GetMappersOk returns a tuple with the Mappers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AnalyseJarResult) GetMappersOk() (*[]string, bool) {
	if o == nil || o.Mappers == nil {
		return nil, false
	}
	return &o.Mappers, true
}

// HasMappers returns a boolean if a field has been set.
func (o *AnalyseJarResult) HasMappers() bool {
	if o != nil && o.Mappers != nil {
		return true
	}

	return false
}

// SetMappers gets a reference to the given []string and assigns it to the Mappers field.
func (o *AnalyseJarResult) SetMappers(v []string) {
	o.Mappers = v
}

// GetReducers returns the Reducers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AnalyseJarResult) GetReducers() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Reducers
}

// GetReducersOk returns a tuple with the Reducers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AnalyseJarResult) GetReducersOk() (*[]string, bool) {
	if o == nil || o.Reducers == nil {
		return nil, false
	}
	return &o.Reducers, true
}

// HasReducers returns a boolean if a field has been set.
func (o *AnalyseJarResult) HasReducers() bool {
	if o != nil && o.Reducers != nil {
		return true
	}

	return false
}

// SetReducers gets a reference to the given []string and assigns it to the Reducers field.
func (o *AnalyseJarResult) SetReducers(v []string) {
	o.Reducers = v
}

func (o AnalyseJarResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.Mappers != nil {
		toSerialize["mappers"] = o.Mappers
	}
	if o.Reducers != nil {
		toSerialize["reducers"] = o.Reducers
	}
	return json.Marshal(toSerialize)
}

type NullableAnalyseJarResult struct {
	value *AnalyseJarResult
	isSet bool
}

func (v NullableAnalyseJarResult) Get() *AnalyseJarResult {
	return v.value
}

func (v *NullableAnalyseJarResult) Set(val *AnalyseJarResult) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyseJarResult) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyseJarResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyseJarResult(val *AnalyseJarResult) *NullableAnalyseJarResult {
	return &NullableAnalyseJarResult{value: val, isSet: true}
}

func (v NullableAnalyseJarResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyseJarResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


