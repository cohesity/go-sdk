/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// HypervDatastore Specifies information about a Datastore Object in HyperV environment.
type HypervDatastore struct {
	// Specifies the capacity of the datastore in bytes.
	Capacity NullableInt32 `json:"capacity,omitempty"`
	// Specifies the available space on the datastore in bytes.
	FreeSpace NullableInt32 `json:"freeSpace,omitempty"`
	// Specifies the available mount points on the datastore.
	MountPoints []string `json:"mountPoints,omitempty"`
	// Specifies the type of the datastore object like kFileShare or kVolume. overrideDescription: true Specifies the type of a HyperV datastore object. 'kFileShare' indicates SMB file share datastore. 'kVolume' indicates a volume which can a LUN.
	Type NullableString `json:"type,omitempty"`
}

// NewHypervDatastore instantiates a new HypervDatastore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHypervDatastore() *HypervDatastore {
	this := HypervDatastore{}
	return &this
}

// NewHypervDatastoreWithDefaults instantiates a new HypervDatastore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHypervDatastoreWithDefaults() *HypervDatastore {
	this := HypervDatastore{}
	return &this
}

// GetCapacity returns the Capacity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HypervDatastore) GetCapacity() int32 {
	if o == nil || o.Capacity.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Capacity.Get()
}

// GetCapacityOk returns a tuple with the Capacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HypervDatastore) GetCapacityOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Capacity.Get(), o.Capacity.IsSet()
}

// HasCapacity returns a boolean if a field has been set.
func (o *HypervDatastore) HasCapacity() bool {
	if o != nil && o.Capacity.IsSet() {
		return true
	}

	return false
}

// SetCapacity gets a reference to the given NullableInt32 and assigns it to the Capacity field.
func (o *HypervDatastore) SetCapacity(v int32) {
	o.Capacity.Set(&v)
}
// SetCapacityNil sets the value for Capacity to be an explicit nil
func (o *HypervDatastore) SetCapacityNil() {
	o.Capacity.Set(nil)
}

// UnsetCapacity ensures that no value is present for Capacity, not even an explicit nil
func (o *HypervDatastore) UnsetCapacity() {
	o.Capacity.Unset()
}

// GetFreeSpace returns the FreeSpace field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HypervDatastore) GetFreeSpace() int32 {
	if o == nil || o.FreeSpace.Get() == nil {
		var ret int32
		return ret
	}
	return *o.FreeSpace.Get()
}

// GetFreeSpaceOk returns a tuple with the FreeSpace field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HypervDatastore) GetFreeSpaceOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FreeSpace.Get(), o.FreeSpace.IsSet()
}

// HasFreeSpace returns a boolean if a field has been set.
func (o *HypervDatastore) HasFreeSpace() bool {
	if o != nil && o.FreeSpace.IsSet() {
		return true
	}

	return false
}

// SetFreeSpace gets a reference to the given NullableInt32 and assigns it to the FreeSpace field.
func (o *HypervDatastore) SetFreeSpace(v int32) {
	o.FreeSpace.Set(&v)
}
// SetFreeSpaceNil sets the value for FreeSpace to be an explicit nil
func (o *HypervDatastore) SetFreeSpaceNil() {
	o.FreeSpace.Set(nil)
}

// UnsetFreeSpace ensures that no value is present for FreeSpace, not even an explicit nil
func (o *HypervDatastore) UnsetFreeSpace() {
	o.FreeSpace.Unset()
}

// GetMountPoints returns the MountPoints field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HypervDatastore) GetMountPoints() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.MountPoints
}

// GetMountPointsOk returns a tuple with the MountPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HypervDatastore) GetMountPointsOk() (*[]string, bool) {
	if o == nil || o.MountPoints == nil {
		return nil, false
	}
	return &o.MountPoints, true
}

// HasMountPoints returns a boolean if a field has been set.
func (o *HypervDatastore) HasMountPoints() bool {
	if o != nil && o.MountPoints != nil {
		return true
	}

	return false
}

// SetMountPoints gets a reference to the given []string and assigns it to the MountPoints field.
func (o *HypervDatastore) SetMountPoints(v []string) {
	o.MountPoints = v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HypervDatastore) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HypervDatastore) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *HypervDatastore) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *HypervDatastore) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *HypervDatastore) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *HypervDatastore) UnsetType() {
	o.Type.Unset()
}

func (o HypervDatastore) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Capacity.IsSet() {
		toSerialize["capacity"] = o.Capacity.Get()
	}
	if o.FreeSpace.IsSet() {
		toSerialize["freeSpace"] = o.FreeSpace.Get()
	}
	if o.MountPoints != nil {
		toSerialize["mountPoints"] = o.MountPoints
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableHypervDatastore struct {
	value *HypervDatastore
	isSet bool
}

func (v NullableHypervDatastore) Get() *HypervDatastore {
	return v.value
}

func (v *NullableHypervDatastore) Set(val *HypervDatastore) {
	v.value = val
	v.isSet = true
}

func (v NullableHypervDatastore) IsSet() bool {
	return v.isSet
}

func (v *NullableHypervDatastore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHypervDatastore(val *HypervDatastore) *NullableHypervDatastore {
	return &NullableHypervDatastore{value: val, isSet: true}
}

func (v NullableHypervDatastore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHypervDatastore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


