/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// RestoreExchangeParamsDatabaseOptions struct for RestoreExchangeParamsDatabaseOptions
type RestoreExchangeParamsDatabaseOptions struct {
	// The windows machine to which the database will be restored.
	EntityId NullableInt64 `json:"entityId,omitempty"`
}

// NewRestoreExchangeParamsDatabaseOptions instantiates a new RestoreExchangeParamsDatabaseOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreExchangeParamsDatabaseOptions() *RestoreExchangeParamsDatabaseOptions {
	this := RestoreExchangeParamsDatabaseOptions{}
	return &this
}

// NewRestoreExchangeParamsDatabaseOptionsWithDefaults instantiates a new RestoreExchangeParamsDatabaseOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreExchangeParamsDatabaseOptionsWithDefaults() *RestoreExchangeParamsDatabaseOptions {
	this := RestoreExchangeParamsDatabaseOptions{}
	return &this
}

// GetEntityId returns the EntityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreExchangeParamsDatabaseOptions) GetEntityId() int64 {
	if o == nil || o.EntityId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.EntityId.Get()
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreExchangeParamsDatabaseOptions) GetEntityIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EntityId.Get(), o.EntityId.IsSet()
}

// HasEntityId returns a boolean if a field has been set.
func (o *RestoreExchangeParamsDatabaseOptions) HasEntityId() bool {
	if o != nil && o.EntityId.IsSet() {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given NullableInt64 and assigns it to the EntityId field.
func (o *RestoreExchangeParamsDatabaseOptions) SetEntityId(v int64) {
	o.EntityId.Set(&v)
}
// SetEntityIdNil sets the value for EntityId to be an explicit nil
func (o *RestoreExchangeParamsDatabaseOptions) SetEntityIdNil() {
	o.EntityId.Set(nil)
}

// UnsetEntityId ensures that no value is present for EntityId, not even an explicit nil
func (o *RestoreExchangeParamsDatabaseOptions) UnsetEntityId() {
	o.EntityId.Unset()
}

func (o RestoreExchangeParamsDatabaseOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EntityId.IsSet() {
		toSerialize["entityId"] = o.EntityId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRestoreExchangeParamsDatabaseOptions struct {
	value *RestoreExchangeParamsDatabaseOptions
	isSet bool
}

func (v NullableRestoreExchangeParamsDatabaseOptions) Get() *RestoreExchangeParamsDatabaseOptions {
	return v.value
}

func (v *NullableRestoreExchangeParamsDatabaseOptions) Set(val *RestoreExchangeParamsDatabaseOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreExchangeParamsDatabaseOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreExchangeParamsDatabaseOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreExchangeParamsDatabaseOptions(val *RestoreExchangeParamsDatabaseOptions) *NullableRestoreExchangeParamsDatabaseOptions {
	return &NullableRestoreExchangeParamsDatabaseOptions{value: val, isSet: true}
}

func (v NullableRestoreExchangeParamsDatabaseOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreExchangeParamsDatabaseOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


