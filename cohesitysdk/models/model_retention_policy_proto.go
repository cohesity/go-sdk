/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// RetentionPolicyProto Message that specifies the retention policy for backup snapshots.
type RetentionPolicyProto struct {
	// The number of days to keep the snapshots for a backup run.
	NumDaysToKeep NullableInt64 `json:"numDaysToKeep,omitempty"`
	// The number of seconds to keep the snapshots for a backup run.
	NumSecsToKeep NullableInt32 `json:"numSecsToKeep,omitempty"`
	WormRetention *WormRetentionProto `json:"wormRetention,omitempty"`
}

// NewRetentionPolicyProto instantiates a new RetentionPolicyProto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRetentionPolicyProto() *RetentionPolicyProto {
	this := RetentionPolicyProto{}
	return &this
}

// NewRetentionPolicyProtoWithDefaults instantiates a new RetentionPolicyProto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRetentionPolicyProtoWithDefaults() *RetentionPolicyProto {
	this := RetentionPolicyProto{}
	return &this
}

// GetNumDaysToKeep returns the NumDaysToKeep field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RetentionPolicyProto) GetNumDaysToKeep() int64 {
	if o == nil || o.NumDaysToKeep.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NumDaysToKeep.Get()
}

// GetNumDaysToKeepOk returns a tuple with the NumDaysToKeep field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RetentionPolicyProto) GetNumDaysToKeepOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumDaysToKeep.Get(), o.NumDaysToKeep.IsSet()
}

// HasNumDaysToKeep returns a boolean if a field has been set.
func (o *RetentionPolicyProto) HasNumDaysToKeep() bool {
	if o != nil && o.NumDaysToKeep.IsSet() {
		return true
	}

	return false
}

// SetNumDaysToKeep gets a reference to the given NullableInt64 and assigns it to the NumDaysToKeep field.
func (o *RetentionPolicyProto) SetNumDaysToKeep(v int64) {
	o.NumDaysToKeep.Set(&v)
}
// SetNumDaysToKeepNil sets the value for NumDaysToKeep to be an explicit nil
func (o *RetentionPolicyProto) SetNumDaysToKeepNil() {
	o.NumDaysToKeep.Set(nil)
}

// UnsetNumDaysToKeep ensures that no value is present for NumDaysToKeep, not even an explicit nil
func (o *RetentionPolicyProto) UnsetNumDaysToKeep() {
	o.NumDaysToKeep.Unset()
}

// GetNumSecsToKeep returns the NumSecsToKeep field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RetentionPolicyProto) GetNumSecsToKeep() int32 {
	if o == nil || o.NumSecsToKeep.Get() == nil {
		var ret int32
		return ret
	}
	return *o.NumSecsToKeep.Get()
}

// GetNumSecsToKeepOk returns a tuple with the NumSecsToKeep field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RetentionPolicyProto) GetNumSecsToKeepOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumSecsToKeep.Get(), o.NumSecsToKeep.IsSet()
}

// HasNumSecsToKeep returns a boolean if a field has been set.
func (o *RetentionPolicyProto) HasNumSecsToKeep() bool {
	if o != nil && o.NumSecsToKeep.IsSet() {
		return true
	}

	return false
}

// SetNumSecsToKeep gets a reference to the given NullableInt32 and assigns it to the NumSecsToKeep field.
func (o *RetentionPolicyProto) SetNumSecsToKeep(v int32) {
	o.NumSecsToKeep.Set(&v)
}
// SetNumSecsToKeepNil sets the value for NumSecsToKeep to be an explicit nil
func (o *RetentionPolicyProto) SetNumSecsToKeepNil() {
	o.NumSecsToKeep.Set(nil)
}

// UnsetNumSecsToKeep ensures that no value is present for NumSecsToKeep, not even an explicit nil
func (o *RetentionPolicyProto) UnsetNumSecsToKeep() {
	o.NumSecsToKeep.Unset()
}

// GetWormRetention returns the WormRetention field value if set, zero value otherwise.
func (o *RetentionPolicyProto) GetWormRetention() WormRetentionProto {
	if o == nil || o.WormRetention == nil {
		var ret WormRetentionProto
		return ret
	}
	return *o.WormRetention
}

// GetWormRetentionOk returns a tuple with the WormRetention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RetentionPolicyProto) GetWormRetentionOk() (*WormRetentionProto, bool) {
	if o == nil || o.WormRetention == nil {
		return nil, false
	}
	return o.WormRetention, true
}

// HasWormRetention returns a boolean if a field has been set.
func (o *RetentionPolicyProto) HasWormRetention() bool {
	if o != nil && o.WormRetention != nil {
		return true
	}

	return false
}

// SetWormRetention gets a reference to the given WormRetentionProto and assigns it to the WormRetention field.
func (o *RetentionPolicyProto) SetWormRetention(v WormRetentionProto) {
	o.WormRetention = &v
}

func (o RetentionPolicyProto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NumDaysToKeep.IsSet() {
		toSerialize["numDaysToKeep"] = o.NumDaysToKeep.Get()
	}
	if o.NumSecsToKeep.IsSet() {
		toSerialize["numSecsToKeep"] = o.NumSecsToKeep.Get()
	}
	if o.WormRetention != nil {
		toSerialize["wormRetention"] = o.WormRetention
	}
	return json.Marshal(toSerialize)
}

type NullableRetentionPolicyProto struct {
	value *RetentionPolicyProto
	isSet bool
}

func (v NullableRetentionPolicyProto) Get() *RetentionPolicyProto {
	return v.value
}

func (v *NullableRetentionPolicyProto) Set(val *RetentionPolicyProto) {
	v.value = val
	v.isSet = true
}

func (v NullableRetentionPolicyProto) IsSet() bool {
	return v.isSet
}

func (v *NullableRetentionPolicyProto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRetentionPolicyProto(val *RetentionPolicyProto) *NullableRetentionPolicyProto {
	return &NullableRetentionPolicyProto{value: val, isSet: true}
}

func (v NullableRetentionPolicyProto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRetentionPolicyProto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


