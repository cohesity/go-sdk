/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ElastifileProtectionSource Specifies a Protection Source in Elastifile environment.
type ElastifileProtectionSource struct {
	Cluster *ElastifileCluster `json:"cluster,omitempty"`
	Container *ElastifileContainer `json:"container,omitempty"`
	// Specifies a unique name of the Protection Source.
	Name NullableString `json:"name,omitempty"`
	// Specifies the type of the entity in an Elastifile file system like 'kCluster', 'kContainer'. 'kCluster' indicates an Elastifile Cluster. 'kContainer' indicates a container on Elastifile cluster.
	Type NullableString `json:"type,omitempty"`
}

// NewElastifileProtectionSource instantiates a new ElastifileProtectionSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewElastifileProtectionSource() *ElastifileProtectionSource {
	this := ElastifileProtectionSource{}
	return &this
}

// NewElastifileProtectionSourceWithDefaults instantiates a new ElastifileProtectionSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewElastifileProtectionSourceWithDefaults() *ElastifileProtectionSource {
	this := ElastifileProtectionSource{}
	return &this
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *ElastifileProtectionSource) GetCluster() ElastifileCluster {
	if o == nil || o.Cluster == nil {
		var ret ElastifileCluster
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElastifileProtectionSource) GetClusterOk() (*ElastifileCluster, bool) {
	if o == nil || o.Cluster == nil {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *ElastifileProtectionSource) HasCluster() bool {
	if o != nil && o.Cluster != nil {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ElastifileCluster and assigns it to the Cluster field.
func (o *ElastifileProtectionSource) SetCluster(v ElastifileCluster) {
	o.Cluster = &v
}

// GetContainer returns the Container field value if set, zero value otherwise.
func (o *ElastifileProtectionSource) GetContainer() ElastifileContainer {
	if o == nil || o.Container == nil {
		var ret ElastifileContainer
		return ret
	}
	return *o.Container
}

// GetContainerOk returns a tuple with the Container field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElastifileProtectionSource) GetContainerOk() (*ElastifileContainer, bool) {
	if o == nil || o.Container == nil {
		return nil, false
	}
	return o.Container, true
}

// HasContainer returns a boolean if a field has been set.
func (o *ElastifileProtectionSource) HasContainer() bool {
	if o != nil && o.Container != nil {
		return true
	}

	return false
}

// SetContainer gets a reference to the given ElastifileContainer and assigns it to the Container field.
func (o *ElastifileProtectionSource) SetContainer(v ElastifileContainer) {
	o.Container = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ElastifileProtectionSource) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ElastifileProtectionSource) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ElastifileProtectionSource) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ElastifileProtectionSource) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *ElastifileProtectionSource) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ElastifileProtectionSource) UnsetName() {
	o.Name.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ElastifileProtectionSource) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ElastifileProtectionSource) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *ElastifileProtectionSource) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *ElastifileProtectionSource) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *ElastifileProtectionSource) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *ElastifileProtectionSource) UnsetType() {
	o.Type.Unset()
}

func (o ElastifileProtectionSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Cluster != nil {
		toSerialize["cluster"] = o.Cluster
	}
	if o.Container != nil {
		toSerialize["container"] = o.Container
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableElastifileProtectionSource struct {
	value *ElastifileProtectionSource
	isSet bool
}

func (v NullableElastifileProtectionSource) Get() *ElastifileProtectionSource {
	return v.value
}

func (v *NullableElastifileProtectionSource) Set(val *ElastifileProtectionSource) {
	v.value = val
	v.isSet = true
}

func (v NullableElastifileProtectionSource) IsSet() bool {
	return v.isSet
}

func (v *NullableElastifileProtectionSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableElastifileProtectionSource(val *ElastifileProtectionSource) *NullableElastifileProtectionSource {
	return &NullableElastifileProtectionSource{value: val, isSet: true}
}

func (v NullableElastifileProtectionSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableElastifileProtectionSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


