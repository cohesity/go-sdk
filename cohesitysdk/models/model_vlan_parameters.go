/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// VlanParameters Specifies VLAN parameters for the restore operation.
type VlanParameters struct {
	// Specifies whether to use the VIPs even when VLANs are configured on the Cluster. If configured, VLAN IP addresses are used by default. If VLANs are not configured, this flag is ignored. Set this flag to true to force using the partition VIPs when VLANs are configured on the Cluster.
	DisableVlan NullableBool `json:"disableVlan,omitempty"`
	// Specifies the physical interface group name to use for mounting Cohesity's view on the remote host. If specified, Cohesity hostname or the IP address on this VLAN is used.
	InterfaceName NullableString `json:"interfaceName,omitempty"`
	// Specifies the VLAN to use for mounting Cohesity's view on the remote host. If specified, Cohesity hostname or the IP address on this VLAN is used.
	Vlan NullableInt32 `json:"vlan,omitempty"`
}

// NewVlanParameters instantiates a new VlanParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVlanParameters() *VlanParameters {
	this := VlanParameters{}
	return &this
}

// NewVlanParametersWithDefaults instantiates a new VlanParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVlanParametersWithDefaults() *VlanParameters {
	this := VlanParameters{}
	return &this
}

// GetDisableVlan returns the DisableVlan field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VlanParameters) GetDisableVlan() bool {
	if o == nil || o.DisableVlan.Get() == nil {
		var ret bool
		return ret
	}
	return *o.DisableVlan.Get()
}

// GetDisableVlanOk returns a tuple with the DisableVlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VlanParameters) GetDisableVlanOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisableVlan.Get(), o.DisableVlan.IsSet()
}

// HasDisableVlan returns a boolean if a field has been set.
func (o *VlanParameters) HasDisableVlan() bool {
	if o != nil && o.DisableVlan.IsSet() {
		return true
	}

	return false
}

// SetDisableVlan gets a reference to the given NullableBool and assigns it to the DisableVlan field.
func (o *VlanParameters) SetDisableVlan(v bool) {
	o.DisableVlan.Set(&v)
}
// SetDisableVlanNil sets the value for DisableVlan to be an explicit nil
func (o *VlanParameters) SetDisableVlanNil() {
	o.DisableVlan.Set(nil)
}

// UnsetDisableVlan ensures that no value is present for DisableVlan, not even an explicit nil
func (o *VlanParameters) UnsetDisableVlan() {
	o.DisableVlan.Unset()
}

// GetInterfaceName returns the InterfaceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VlanParameters) GetInterfaceName() string {
	if o == nil || o.InterfaceName.Get() == nil {
		var ret string
		return ret
	}
	return *o.InterfaceName.Get()
}

// GetInterfaceNameOk returns a tuple with the InterfaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VlanParameters) GetInterfaceNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InterfaceName.Get(), o.InterfaceName.IsSet()
}

// HasInterfaceName returns a boolean if a field has been set.
func (o *VlanParameters) HasInterfaceName() bool {
	if o != nil && o.InterfaceName.IsSet() {
		return true
	}

	return false
}

// SetInterfaceName gets a reference to the given NullableString and assigns it to the InterfaceName field.
func (o *VlanParameters) SetInterfaceName(v string) {
	o.InterfaceName.Set(&v)
}
// SetInterfaceNameNil sets the value for InterfaceName to be an explicit nil
func (o *VlanParameters) SetInterfaceNameNil() {
	o.InterfaceName.Set(nil)
}

// UnsetInterfaceName ensures that no value is present for InterfaceName, not even an explicit nil
func (o *VlanParameters) UnsetInterfaceName() {
	o.InterfaceName.Unset()
}

// GetVlan returns the Vlan field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VlanParameters) GetVlan() int32 {
	if o == nil || o.Vlan.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Vlan.Get()
}

// GetVlanOk returns a tuple with the Vlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VlanParameters) GetVlanOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Vlan.Get(), o.Vlan.IsSet()
}

// HasVlan returns a boolean if a field has been set.
func (o *VlanParameters) HasVlan() bool {
	if o != nil && o.Vlan.IsSet() {
		return true
	}

	return false
}

// SetVlan gets a reference to the given NullableInt32 and assigns it to the Vlan field.
func (o *VlanParameters) SetVlan(v int32) {
	o.Vlan.Set(&v)
}
// SetVlanNil sets the value for Vlan to be an explicit nil
func (o *VlanParameters) SetVlanNil() {
	o.Vlan.Set(nil)
}

// UnsetVlan ensures that no value is present for Vlan, not even an explicit nil
func (o *VlanParameters) UnsetVlan() {
	o.Vlan.Unset()
}

func (o VlanParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DisableVlan.IsSet() {
		toSerialize["disableVlan"] = o.DisableVlan.Get()
	}
	if o.InterfaceName.IsSet() {
		toSerialize["interfaceName"] = o.InterfaceName.Get()
	}
	if o.Vlan.IsSet() {
		toSerialize["vlan"] = o.Vlan.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableVlanParameters struct {
	value *VlanParameters
	isSet bool
}

func (v NullableVlanParameters) Get() *VlanParameters {
	return v.value
}

func (v *NullableVlanParameters) Set(val *VlanParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableVlanParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableVlanParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVlanParameters(val *VlanParameters) *NullableVlanParameters {
	return &NullableVlanParameters{value: val, isSet: true}
}

func (v NullableVlanParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVlanParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


