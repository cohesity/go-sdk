/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// RunUid Specifies the universal id of the latest successful Protection Job Run.
type RunUid struct {
	JobUid *UniversalId `json:"jobUid,omitempty"`
	// Specifies the start time of the Protection Job Run.
	StartTimeUsecs NullableInt64 `json:"startTimeUsecs,omitempty"`
}

// NewRunUid instantiates a new RunUid object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunUid() *RunUid {
	this := RunUid{}
	return &this
}

// NewRunUidWithDefaults instantiates a new RunUid object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunUidWithDefaults() *RunUid {
	this := RunUid{}
	return &this
}

// GetJobUid returns the JobUid field value if set, zero value otherwise.
func (o *RunUid) GetJobUid() UniversalId {
	if o == nil || o.JobUid == nil {
		var ret UniversalId
		return ret
	}
	return *o.JobUid
}

// GetJobUidOk returns a tuple with the JobUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunUid) GetJobUidOk() (*UniversalId, bool) {
	if o == nil || o.JobUid == nil {
		return nil, false
	}
	return o.JobUid, true
}

// HasJobUid returns a boolean if a field has been set.
func (o *RunUid) HasJobUid() bool {
	if o != nil && o.JobUid != nil {
		return true
	}

	return false
}

// SetJobUid gets a reference to the given UniversalId and assigns it to the JobUid field.
func (o *RunUid) SetJobUid(v UniversalId) {
	o.JobUid = &v
}

// GetStartTimeUsecs returns the StartTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RunUid) GetStartTimeUsecs() int64 {
	if o == nil || o.StartTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.StartTimeUsecs.Get()
}

// GetStartTimeUsecsOk returns a tuple with the StartTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RunUid) GetStartTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartTimeUsecs.Get(), o.StartTimeUsecs.IsSet()
}

// HasStartTimeUsecs returns a boolean if a field has been set.
func (o *RunUid) HasStartTimeUsecs() bool {
	if o != nil && o.StartTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetStartTimeUsecs gets a reference to the given NullableInt64 and assigns it to the StartTimeUsecs field.
func (o *RunUid) SetStartTimeUsecs(v int64) {
	o.StartTimeUsecs.Set(&v)
}
// SetStartTimeUsecsNil sets the value for StartTimeUsecs to be an explicit nil
func (o *RunUid) SetStartTimeUsecsNil() {
	o.StartTimeUsecs.Set(nil)
}

// UnsetStartTimeUsecs ensures that no value is present for StartTimeUsecs, not even an explicit nil
func (o *RunUid) UnsetStartTimeUsecs() {
	o.StartTimeUsecs.Unset()
}

func (o RunUid) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.JobUid != nil {
		toSerialize["jobUid"] = o.JobUid
	}
	if o.StartTimeUsecs.IsSet() {
		toSerialize["startTimeUsecs"] = o.StartTimeUsecs.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRunUid struct {
	value *RunUid
	isSet bool
}

func (v NullableRunUid) Get() *RunUid {
	return v.value
}

func (v *NullableRunUid) Set(val *RunUid) {
	v.value = val
	v.isSet = true
}

func (v NullableRunUid) IsSet() bool {
	return v.isSet
}

func (v *NullableRunUid) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunUid(val *RunUid) *NullableRunUid {
	return &NullableRunUid{value: val, isSet: true}
}

func (v NullableRunUid) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunUid) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


