/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ViewProtocolStats Specifies the View Protocol stats.
type ViewProtocolStats struct {
	// Specifies the protocols supported on these Views.
	Protocols *[]string `json:"protocols,omitempty"`
	// Specifies the size of all the Views in bytes which are using the specified protocol.
	SizeBytes NullableInt64 `json:"sizeBytes,omitempty"`
	// Specifies the number of Views which are using the specified protocol.
	ViewCount NullableInt64 `json:"viewCount,omitempty"`
}

// NewViewProtocolStats instantiates a new ViewProtocolStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewProtocolStats() *ViewProtocolStats {
	this := ViewProtocolStats{}
	return &this
}

// NewViewProtocolStatsWithDefaults instantiates a new ViewProtocolStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewProtocolStatsWithDefaults() *ViewProtocolStats {
	this := ViewProtocolStats{}
	return &this
}

// GetProtocols returns the Protocols field value if set, zero value otherwise.
func (o *ViewProtocolStats) GetProtocols() []string {
	if o == nil || o.Protocols == nil {
		var ret []string
		return ret
	}
	return *o.Protocols
}

// GetProtocolsOk returns a tuple with the Protocols field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProtocolStats) GetProtocolsOk() (*[]string, bool) {
	if o == nil || o.Protocols == nil {
		return nil, false
	}
	return o.Protocols, true
}

// HasProtocols returns a boolean if a field has been set.
func (o *ViewProtocolStats) HasProtocols() bool {
	if o != nil && o.Protocols != nil {
		return true
	}

	return false
}

// SetProtocols gets a reference to the given []string and assigns it to the Protocols field.
func (o *ViewProtocolStats) SetProtocols(v []string) {
	o.Protocols = &v
}

// GetSizeBytes returns the SizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewProtocolStats) GetSizeBytes() int64 {
	if o == nil || o.SizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SizeBytes.Get()
}

// GetSizeBytesOk returns a tuple with the SizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewProtocolStats) GetSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SizeBytes.Get(), o.SizeBytes.IsSet()
}

// HasSizeBytes returns a boolean if a field has been set.
func (o *ViewProtocolStats) HasSizeBytes() bool {
	if o != nil && o.SizeBytes.IsSet() {
		return true
	}

	return false
}

// SetSizeBytes gets a reference to the given NullableInt64 and assigns it to the SizeBytes field.
func (o *ViewProtocolStats) SetSizeBytes(v int64) {
	o.SizeBytes.Set(&v)
}
// SetSizeBytesNil sets the value for SizeBytes to be an explicit nil
func (o *ViewProtocolStats) SetSizeBytesNil() {
	o.SizeBytes.Set(nil)
}

// UnsetSizeBytes ensures that no value is present for SizeBytes, not even an explicit nil
func (o *ViewProtocolStats) UnsetSizeBytes() {
	o.SizeBytes.Unset()
}

// GetViewCount returns the ViewCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewProtocolStats) GetViewCount() int64 {
	if o == nil || o.ViewCount.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ViewCount.Get()
}

// GetViewCountOk returns a tuple with the ViewCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewProtocolStats) GetViewCountOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewCount.Get(), o.ViewCount.IsSet()
}

// HasViewCount returns a boolean if a field has been set.
func (o *ViewProtocolStats) HasViewCount() bool {
	if o != nil && o.ViewCount.IsSet() {
		return true
	}

	return false
}

// SetViewCount gets a reference to the given NullableInt64 and assigns it to the ViewCount field.
func (o *ViewProtocolStats) SetViewCount(v int64) {
	o.ViewCount.Set(&v)
}
// SetViewCountNil sets the value for ViewCount to be an explicit nil
func (o *ViewProtocolStats) SetViewCountNil() {
	o.ViewCount.Set(nil)
}

// UnsetViewCount ensures that no value is present for ViewCount, not even an explicit nil
func (o *ViewProtocolStats) UnsetViewCount() {
	o.ViewCount.Unset()
}

func (o ViewProtocolStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Protocols != nil {
		toSerialize["protocols"] = o.Protocols
	}
	if o.SizeBytes.IsSet() {
		toSerialize["sizeBytes"] = o.SizeBytes.Get()
	}
	if o.ViewCount.IsSet() {
		toSerialize["viewCount"] = o.ViewCount.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableViewProtocolStats struct {
	value *ViewProtocolStats
	isSet bool
}

func (v NullableViewProtocolStats) Get() *ViewProtocolStats {
	return v.value
}

func (v *NullableViewProtocolStats) Set(val *ViewProtocolStats) {
	v.value = val
	v.isSet = true
}

func (v NullableViewProtocolStats) IsSet() bool {
	return v.isSet
}

func (v *NullableViewProtocolStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewProtocolStats(val *ViewProtocolStats) *NullableViewProtocolStats {
	return &NullableViewProtocolStats{value: val, isSet: true}
}

func (v NullableViewProtocolStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewProtocolStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


