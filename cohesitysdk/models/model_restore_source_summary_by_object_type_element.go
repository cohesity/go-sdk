/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// RestoreSourceSummaryByObjectTypeElement RestoreSourceSummaryByObjectTypeElement represents a recover/clone summary for a single object type.
type RestoreSourceSummaryByObjectTypeElement struct {
	// Specifies the datastore where the object's files are recovered to. This field is populated when objects are recovered to a different resource pool or to a different parent source. This field is not populated when objects are recovered to their original datastore locations in the original parent source.
	DatastoreId NullableInt64 `json:"datastoreId,omitempty"`
	// Specifies a list of restore information of files.
	FileRestoreInfo []FileRestoreInfo `json:"fileRestoreInfo,omitempty"`
	// Specifies the name of the Restore Task. This field must be set and must be a unique name.
	Name NullableString `json:"name"`
	// Array of Objects.  Specifies a list of Protection Source objects or Protection Job objects (with specified Protection Source objects).
	Objects []RestoreObjectDetails `json:"objects,omitempty"`
	// The protection source name.
	ProtectionSourceName NullableString `json:"protectionSourceName,omitempty"`
	// Specifies the start time of the Restore Task as a Unix epoch Timestamp (in microseconds).
	StartTimeUsecs NullableInt64 `json:"startTimeUsecs,omitempty"`
	// Specify the object type to filter with. Specifies the type of Restore Task.  'kRecoverVMs' specifies a Restore Task that recovers VMs. 'kCloneVMs' specifies a Restore Task that clones VMs. 'kCloneView' specifies a Restore Task that clones a View. 'kMountVolumes' specifies a Restore Task that mounts volumes. 'kRestoreFiles' specifies a Restore Task that recovers files and folders. 'kRecoverApp' specifies a Restore Task that recovers app. 'kCloneApp' specifies a Restore Task that clone app. 'kRecoverSanVolume' specifies a Restore Task that recovers SAN volumes. 'kConvertAndDeployVMs' specifies a Restore Task that converts and deploy VMs to a target environment. 'kMountFileVolume' specifies a Restore Task that mounts a file volume. 'kSystem' specifies a Restore Task that recovers a system. 'kRecoverVolumes' specifies a Restore Task that recovers volumes via the physical agent. 'kDeployVolumes' specifies a Restore Task that deploys volumes to a target environment. 'kDownloadFiles' specifies a Restore Task that downloads the requested files and folders in zip format. 'kRecoverEmails' specifies a Restore Task that recovers the mailbox/email items. 'kRecoverDisks' specifies a Restore Task that recovers the virtual disks. 'kRecoverNamespaces' specifies a Restore Task that recovers Kubernetes namespaces. 'kCloneVMsToView' specifies a Restore Task that clones VMs into a View.
	Type NullableString `json:"type,omitempty"`
	// Specifies the Cohesity user who requested this Restore Task.
	Username NullableString `json:"username,omitempty"`
}

// NewRestoreSourceSummaryByObjectTypeElement instantiates a new RestoreSourceSummaryByObjectTypeElement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreSourceSummaryByObjectTypeElement(name NullableString) *RestoreSourceSummaryByObjectTypeElement {
	this := RestoreSourceSummaryByObjectTypeElement{}
	this.Name = name
	return &this
}

// NewRestoreSourceSummaryByObjectTypeElementWithDefaults instantiates a new RestoreSourceSummaryByObjectTypeElement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreSourceSummaryByObjectTypeElementWithDefaults() *RestoreSourceSummaryByObjectTypeElement {
	this := RestoreSourceSummaryByObjectTypeElement{}
	return &this
}

// GetDatastoreId returns the DatastoreId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreSourceSummaryByObjectTypeElement) GetDatastoreId() int64 {
	if o == nil || o.DatastoreId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DatastoreId.Get()
}

// GetDatastoreIdOk returns a tuple with the DatastoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreSourceSummaryByObjectTypeElement) GetDatastoreIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DatastoreId.Get(), o.DatastoreId.IsSet()
}

// HasDatastoreId returns a boolean if a field has been set.
func (o *RestoreSourceSummaryByObjectTypeElement) HasDatastoreId() bool {
	if o != nil && o.DatastoreId.IsSet() {
		return true
	}

	return false
}

// SetDatastoreId gets a reference to the given NullableInt64 and assigns it to the DatastoreId field.
func (o *RestoreSourceSummaryByObjectTypeElement) SetDatastoreId(v int64) {
	o.DatastoreId.Set(&v)
}
// SetDatastoreIdNil sets the value for DatastoreId to be an explicit nil
func (o *RestoreSourceSummaryByObjectTypeElement) SetDatastoreIdNil() {
	o.DatastoreId.Set(nil)
}

// UnsetDatastoreId ensures that no value is present for DatastoreId, not even an explicit nil
func (o *RestoreSourceSummaryByObjectTypeElement) UnsetDatastoreId() {
	o.DatastoreId.Unset()
}

// GetFileRestoreInfo returns the FileRestoreInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreSourceSummaryByObjectTypeElement) GetFileRestoreInfo() []FileRestoreInfo {
	if o == nil  {
		var ret []FileRestoreInfo
		return ret
	}
	return o.FileRestoreInfo
}

// GetFileRestoreInfoOk returns a tuple with the FileRestoreInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreSourceSummaryByObjectTypeElement) GetFileRestoreInfoOk() (*[]FileRestoreInfo, bool) {
	if o == nil || o.FileRestoreInfo == nil {
		return nil, false
	}
	return &o.FileRestoreInfo, true
}

// HasFileRestoreInfo returns a boolean if a field has been set.
func (o *RestoreSourceSummaryByObjectTypeElement) HasFileRestoreInfo() bool {
	if o != nil && o.FileRestoreInfo != nil {
		return true
	}

	return false
}

// SetFileRestoreInfo gets a reference to the given []FileRestoreInfo and assigns it to the FileRestoreInfo field.
func (o *RestoreSourceSummaryByObjectTypeElement) SetFileRestoreInfo(v []FileRestoreInfo) {
	o.FileRestoreInfo = v
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *RestoreSourceSummaryByObjectTypeElement) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreSourceSummaryByObjectTypeElement) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *RestoreSourceSummaryByObjectTypeElement) SetName(v string) {
	o.Name.Set(&v)
}

// GetObjects returns the Objects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreSourceSummaryByObjectTypeElement) GetObjects() []RestoreObjectDetails {
	if o == nil  {
		var ret []RestoreObjectDetails
		return ret
	}
	return o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreSourceSummaryByObjectTypeElement) GetObjectsOk() (*[]RestoreObjectDetails, bool) {
	if o == nil || o.Objects == nil {
		return nil, false
	}
	return &o.Objects, true
}

// HasObjects returns a boolean if a field has been set.
func (o *RestoreSourceSummaryByObjectTypeElement) HasObjects() bool {
	if o != nil && o.Objects != nil {
		return true
	}

	return false
}

// SetObjects gets a reference to the given []RestoreObjectDetails and assigns it to the Objects field.
func (o *RestoreSourceSummaryByObjectTypeElement) SetObjects(v []RestoreObjectDetails) {
	o.Objects = v
}

// GetProtectionSourceName returns the ProtectionSourceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreSourceSummaryByObjectTypeElement) GetProtectionSourceName() string {
	if o == nil || o.ProtectionSourceName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProtectionSourceName.Get()
}

// GetProtectionSourceNameOk returns a tuple with the ProtectionSourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreSourceSummaryByObjectTypeElement) GetProtectionSourceNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProtectionSourceName.Get(), o.ProtectionSourceName.IsSet()
}

// HasProtectionSourceName returns a boolean if a field has been set.
func (o *RestoreSourceSummaryByObjectTypeElement) HasProtectionSourceName() bool {
	if o != nil && o.ProtectionSourceName.IsSet() {
		return true
	}

	return false
}

// SetProtectionSourceName gets a reference to the given NullableString and assigns it to the ProtectionSourceName field.
func (o *RestoreSourceSummaryByObjectTypeElement) SetProtectionSourceName(v string) {
	o.ProtectionSourceName.Set(&v)
}
// SetProtectionSourceNameNil sets the value for ProtectionSourceName to be an explicit nil
func (o *RestoreSourceSummaryByObjectTypeElement) SetProtectionSourceNameNil() {
	o.ProtectionSourceName.Set(nil)
}

// UnsetProtectionSourceName ensures that no value is present for ProtectionSourceName, not even an explicit nil
func (o *RestoreSourceSummaryByObjectTypeElement) UnsetProtectionSourceName() {
	o.ProtectionSourceName.Unset()
}

// GetStartTimeUsecs returns the StartTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreSourceSummaryByObjectTypeElement) GetStartTimeUsecs() int64 {
	if o == nil || o.StartTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.StartTimeUsecs.Get()
}

// GetStartTimeUsecsOk returns a tuple with the StartTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreSourceSummaryByObjectTypeElement) GetStartTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartTimeUsecs.Get(), o.StartTimeUsecs.IsSet()
}

// HasStartTimeUsecs returns a boolean if a field has been set.
func (o *RestoreSourceSummaryByObjectTypeElement) HasStartTimeUsecs() bool {
	if o != nil && o.StartTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetStartTimeUsecs gets a reference to the given NullableInt64 and assigns it to the StartTimeUsecs field.
func (o *RestoreSourceSummaryByObjectTypeElement) SetStartTimeUsecs(v int64) {
	o.StartTimeUsecs.Set(&v)
}
// SetStartTimeUsecsNil sets the value for StartTimeUsecs to be an explicit nil
func (o *RestoreSourceSummaryByObjectTypeElement) SetStartTimeUsecsNil() {
	o.StartTimeUsecs.Set(nil)
}

// UnsetStartTimeUsecs ensures that no value is present for StartTimeUsecs, not even an explicit nil
func (o *RestoreSourceSummaryByObjectTypeElement) UnsetStartTimeUsecs() {
	o.StartTimeUsecs.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreSourceSummaryByObjectTypeElement) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreSourceSummaryByObjectTypeElement) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *RestoreSourceSummaryByObjectTypeElement) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *RestoreSourceSummaryByObjectTypeElement) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *RestoreSourceSummaryByObjectTypeElement) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *RestoreSourceSummaryByObjectTypeElement) UnsetType() {
	o.Type.Unset()
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreSourceSummaryByObjectTypeElement) GetUsername() string {
	if o == nil || o.Username.Get() == nil {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreSourceSummaryByObjectTypeElement) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *RestoreSourceSummaryByObjectTypeElement) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *RestoreSourceSummaryByObjectTypeElement) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *RestoreSourceSummaryByObjectTypeElement) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *RestoreSourceSummaryByObjectTypeElement) UnsetUsername() {
	o.Username.Unset()
}

func (o RestoreSourceSummaryByObjectTypeElement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DatastoreId.IsSet() {
		toSerialize["datastoreId"] = o.DatastoreId.Get()
	}
	if o.FileRestoreInfo != nil {
		toSerialize["fileRestoreInfo"] = o.FileRestoreInfo
	}
	if true {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Objects != nil {
		toSerialize["objects"] = o.Objects
	}
	if o.ProtectionSourceName.IsSet() {
		toSerialize["protectionSourceName"] = o.ProtectionSourceName.Get()
	}
	if o.StartTimeUsecs.IsSet() {
		toSerialize["startTimeUsecs"] = o.StartTimeUsecs.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRestoreSourceSummaryByObjectTypeElement struct {
	value *RestoreSourceSummaryByObjectTypeElement
	isSet bool
}

func (v NullableRestoreSourceSummaryByObjectTypeElement) Get() *RestoreSourceSummaryByObjectTypeElement {
	return v.value
}

func (v *NullableRestoreSourceSummaryByObjectTypeElement) Set(val *RestoreSourceSummaryByObjectTypeElement) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreSourceSummaryByObjectTypeElement) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreSourceSummaryByObjectTypeElement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreSourceSummaryByObjectTypeElement(val *RestoreSourceSummaryByObjectTypeElement) *NullableRestoreSourceSummaryByObjectTypeElement {
	return &NullableRestoreSourceSummaryByObjectTypeElement{value: val, isSet: true}
}

func (v NullableRestoreSourceSummaryByObjectTypeElement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreSourceSummaryByObjectTypeElement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


