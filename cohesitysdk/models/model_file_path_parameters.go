/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// FilePathParameters Specifies a file or a directory to protect in a Physical Server. If a directory is specified, all of its descendants are also backed up. Optionally, files or subdirectories can be explicitly excluded.
type FilePathParameters struct {
	// Specifies absolute path to a file or a directory in a Physical Server to protect.
	BackupFilePath NullableString `json:"backupFilePath,omitempty"`
	// Array of Excluded File Paths.  Specifies absolute paths to descendant files or subdirectories of backupFilePath that should not be protected.
	ExcludedFilePaths []string `json:"excludedFilePaths,omitempty"`
	// Specifies if any subdirectories under backupFilePath, where local or network volumes are mounted, should be excluded from being protected. If true, the volumes are not protected. deprecated: true
	SkipNestedVolumes NullableBool `json:"skipNestedVolumes,omitempty"`
}

// NewFilePathParameters instantiates a new FilePathParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilePathParameters() *FilePathParameters {
	this := FilePathParameters{}
	return &this
}

// NewFilePathParametersWithDefaults instantiates a new FilePathParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilePathParametersWithDefaults() *FilePathParameters {
	this := FilePathParameters{}
	return &this
}

// GetBackupFilePath returns the BackupFilePath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilePathParameters) GetBackupFilePath() string {
	if o == nil || o.BackupFilePath.Get() == nil {
		var ret string
		return ret
	}
	return *o.BackupFilePath.Get()
}

// GetBackupFilePathOk returns a tuple with the BackupFilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilePathParameters) GetBackupFilePathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BackupFilePath.Get(), o.BackupFilePath.IsSet()
}

// HasBackupFilePath returns a boolean if a field has been set.
func (o *FilePathParameters) HasBackupFilePath() bool {
	if o != nil && o.BackupFilePath.IsSet() {
		return true
	}

	return false
}

// SetBackupFilePath gets a reference to the given NullableString and assigns it to the BackupFilePath field.
func (o *FilePathParameters) SetBackupFilePath(v string) {
	o.BackupFilePath.Set(&v)
}
// SetBackupFilePathNil sets the value for BackupFilePath to be an explicit nil
func (o *FilePathParameters) SetBackupFilePathNil() {
	o.BackupFilePath.Set(nil)
}

// UnsetBackupFilePath ensures that no value is present for BackupFilePath, not even an explicit nil
func (o *FilePathParameters) UnsetBackupFilePath() {
	o.BackupFilePath.Unset()
}

// GetExcludedFilePaths returns the ExcludedFilePaths field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilePathParameters) GetExcludedFilePaths() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.ExcludedFilePaths
}

// GetExcludedFilePathsOk returns a tuple with the ExcludedFilePaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilePathParameters) GetExcludedFilePathsOk() (*[]string, bool) {
	if o == nil || o.ExcludedFilePaths == nil {
		return nil, false
	}
	return &o.ExcludedFilePaths, true
}

// HasExcludedFilePaths returns a boolean if a field has been set.
func (o *FilePathParameters) HasExcludedFilePaths() bool {
	if o != nil && o.ExcludedFilePaths != nil {
		return true
	}

	return false
}

// SetExcludedFilePaths gets a reference to the given []string and assigns it to the ExcludedFilePaths field.
func (o *FilePathParameters) SetExcludedFilePaths(v []string) {
	o.ExcludedFilePaths = v
}

// GetSkipNestedVolumes returns the SkipNestedVolumes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilePathParameters) GetSkipNestedVolumes() bool {
	if o == nil || o.SkipNestedVolumes.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SkipNestedVolumes.Get()
}

// GetSkipNestedVolumesOk returns a tuple with the SkipNestedVolumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilePathParameters) GetSkipNestedVolumesOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SkipNestedVolumes.Get(), o.SkipNestedVolumes.IsSet()
}

// HasSkipNestedVolumes returns a boolean if a field has been set.
func (o *FilePathParameters) HasSkipNestedVolumes() bool {
	if o != nil && o.SkipNestedVolumes.IsSet() {
		return true
	}

	return false
}

// SetSkipNestedVolumes gets a reference to the given NullableBool and assigns it to the SkipNestedVolumes field.
func (o *FilePathParameters) SetSkipNestedVolumes(v bool) {
	o.SkipNestedVolumes.Set(&v)
}
// SetSkipNestedVolumesNil sets the value for SkipNestedVolumes to be an explicit nil
func (o *FilePathParameters) SetSkipNestedVolumesNil() {
	o.SkipNestedVolumes.Set(nil)
}

// UnsetSkipNestedVolumes ensures that no value is present for SkipNestedVolumes, not even an explicit nil
func (o *FilePathParameters) UnsetSkipNestedVolumes() {
	o.SkipNestedVolumes.Unset()
}

func (o FilePathParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BackupFilePath.IsSet() {
		toSerialize["backupFilePath"] = o.BackupFilePath.Get()
	}
	if o.ExcludedFilePaths != nil {
		toSerialize["excludedFilePaths"] = o.ExcludedFilePaths
	}
	if o.SkipNestedVolumes.IsSet() {
		toSerialize["skipNestedVolumes"] = o.SkipNestedVolumes.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableFilePathParameters struct {
	value *FilePathParameters
	isSet bool
}

func (v NullableFilePathParameters) Get() *FilePathParameters {
	return v.value
}

func (v *NullableFilePathParameters) Set(val *FilePathParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableFilePathParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableFilePathParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilePathParameters(val *FilePathParameters) *NullableFilePathParameters {
	return &NullableFilePathParameters{value: val, isSet: true}
}

func (v NullableFilePathParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilePathParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


