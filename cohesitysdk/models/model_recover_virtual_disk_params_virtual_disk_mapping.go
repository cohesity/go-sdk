/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// RecoverVirtualDiskParamsVirtualDiskMapping struct for RecoverVirtualDiskParamsVirtualDiskMapping
type RecoverVirtualDiskParamsVirtualDiskMapping struct {
	DiskToOverwrite *VirtualDiskId `json:"diskToOverwrite,omitempty"`
	SrcDisk *VirtualDiskId `json:"srcDisk,omitempty"`
	TargetLocation *EntityProto `json:"targetLocation,omitempty"`
}

// NewRecoverVirtualDiskParamsVirtualDiskMapping instantiates a new RecoverVirtualDiskParamsVirtualDiskMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverVirtualDiskParamsVirtualDiskMapping() *RecoverVirtualDiskParamsVirtualDiskMapping {
	this := RecoverVirtualDiskParamsVirtualDiskMapping{}
	return &this
}

// NewRecoverVirtualDiskParamsVirtualDiskMappingWithDefaults instantiates a new RecoverVirtualDiskParamsVirtualDiskMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverVirtualDiskParamsVirtualDiskMappingWithDefaults() *RecoverVirtualDiskParamsVirtualDiskMapping {
	this := RecoverVirtualDiskParamsVirtualDiskMapping{}
	return &this
}

// GetDiskToOverwrite returns the DiskToOverwrite field value if set, zero value otherwise.
func (o *RecoverVirtualDiskParamsVirtualDiskMapping) GetDiskToOverwrite() VirtualDiskId {
	if o == nil || o.DiskToOverwrite == nil {
		var ret VirtualDiskId
		return ret
	}
	return *o.DiskToOverwrite
}

// GetDiskToOverwriteOk returns a tuple with the DiskToOverwrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecoverVirtualDiskParamsVirtualDiskMapping) GetDiskToOverwriteOk() (*VirtualDiskId, bool) {
	if o == nil || o.DiskToOverwrite == nil {
		return nil, false
	}
	return o.DiskToOverwrite, true
}

// HasDiskToOverwrite returns a boolean if a field has been set.
func (o *RecoverVirtualDiskParamsVirtualDiskMapping) HasDiskToOverwrite() bool {
	if o != nil && o.DiskToOverwrite != nil {
		return true
	}

	return false
}

// SetDiskToOverwrite gets a reference to the given VirtualDiskId and assigns it to the DiskToOverwrite field.
func (o *RecoverVirtualDiskParamsVirtualDiskMapping) SetDiskToOverwrite(v VirtualDiskId) {
	o.DiskToOverwrite = &v
}

// GetSrcDisk returns the SrcDisk field value if set, zero value otherwise.
func (o *RecoverVirtualDiskParamsVirtualDiskMapping) GetSrcDisk() VirtualDiskId {
	if o == nil || o.SrcDisk == nil {
		var ret VirtualDiskId
		return ret
	}
	return *o.SrcDisk
}

// GetSrcDiskOk returns a tuple with the SrcDisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecoverVirtualDiskParamsVirtualDiskMapping) GetSrcDiskOk() (*VirtualDiskId, bool) {
	if o == nil || o.SrcDisk == nil {
		return nil, false
	}
	return o.SrcDisk, true
}

// HasSrcDisk returns a boolean if a field has been set.
func (o *RecoverVirtualDiskParamsVirtualDiskMapping) HasSrcDisk() bool {
	if o != nil && o.SrcDisk != nil {
		return true
	}

	return false
}

// SetSrcDisk gets a reference to the given VirtualDiskId and assigns it to the SrcDisk field.
func (o *RecoverVirtualDiskParamsVirtualDiskMapping) SetSrcDisk(v VirtualDiskId) {
	o.SrcDisk = &v
}

// GetTargetLocation returns the TargetLocation field value if set, zero value otherwise.
func (o *RecoverVirtualDiskParamsVirtualDiskMapping) GetTargetLocation() EntityProto {
	if o == nil || o.TargetLocation == nil {
		var ret EntityProto
		return ret
	}
	return *o.TargetLocation
}

// GetTargetLocationOk returns a tuple with the TargetLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecoverVirtualDiskParamsVirtualDiskMapping) GetTargetLocationOk() (*EntityProto, bool) {
	if o == nil || o.TargetLocation == nil {
		return nil, false
	}
	return o.TargetLocation, true
}

// HasTargetLocation returns a boolean if a field has been set.
func (o *RecoverVirtualDiskParamsVirtualDiskMapping) HasTargetLocation() bool {
	if o != nil && o.TargetLocation != nil {
		return true
	}

	return false
}

// SetTargetLocation gets a reference to the given EntityProto and assigns it to the TargetLocation field.
func (o *RecoverVirtualDiskParamsVirtualDiskMapping) SetTargetLocation(v EntityProto) {
	o.TargetLocation = &v
}

func (o RecoverVirtualDiskParamsVirtualDiskMapping) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DiskToOverwrite != nil {
		toSerialize["diskToOverwrite"] = o.DiskToOverwrite
	}
	if o.SrcDisk != nil {
		toSerialize["srcDisk"] = o.SrcDisk
	}
	if o.TargetLocation != nil {
		toSerialize["targetLocation"] = o.TargetLocation
	}
	return json.Marshal(toSerialize)
}

type NullableRecoverVirtualDiskParamsVirtualDiskMapping struct {
	value *RecoverVirtualDiskParamsVirtualDiskMapping
	isSet bool
}

func (v NullableRecoverVirtualDiskParamsVirtualDiskMapping) Get() *RecoverVirtualDiskParamsVirtualDiskMapping {
	return v.value
}

func (v *NullableRecoverVirtualDiskParamsVirtualDiskMapping) Set(val *RecoverVirtualDiskParamsVirtualDiskMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverVirtualDiskParamsVirtualDiskMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverVirtualDiskParamsVirtualDiskMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverVirtualDiskParamsVirtualDiskMapping(val *RecoverVirtualDiskParamsVirtualDiskMapping) *NullableRecoverVirtualDiskParamsVirtualDiskMapping {
	return &NullableRecoverVirtualDiskParamsVirtualDiskMapping{value: val, isSet: true}
}

func (v NullableRecoverVirtualDiskParamsVirtualDiskMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverVirtualDiskParamsVirtualDiskMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


