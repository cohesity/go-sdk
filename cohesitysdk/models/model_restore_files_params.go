/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// RestoreFilesParams This message captures all the necessary arguments specified by the user to restore files to the source.
type RestoreFilesParams struct {
	// A list of target IP addresses that should not be used.
	BlacklistedIpAddrs []string `json:"blacklistedIpAddrs,omitempty"`
	// Destination endpoint UUID for source s3 objectstore.
	DestinationEpUuid NullableString `json:"destinationEpUuid,omitempty"`
	// Directory name security style map contains mapping of the directory name to security style it supports.  This is needed to restore the same permission for the given directory for Qtrees.
	DirectoryNameSecurityStyleMap []RestoreFilesParamsDirectoryNameSecurityStyleMapEntry `json:"directoryNameSecurityStyleMap,omitempty"`
	// Whether this is a file restore operation from an archive.
	IsArchiveFlr NullableBool `json:"isArchiveFlr,omitempty"`
	// Whether this is a file based volume restore.
	IsFileVolumeRestore NullableBool `json:"isFileVolumeRestore,omitempty"`
	// Whether this is a mount based file restore operation
	IsMountBasedFlr NullableBool `json:"isMountBasedFlr,omitempty"`
	// Whether this is a source initiated restore.
	IsSourceInitiatedRestore NullableBool `json:"isSourceInitiatedRestore,omitempty"`
	// Whether this will attach disks or mount disks on the VM side OR use Storage Proxy RPCs to stream data.
	MountDisksOnVm NullableBool `json:"mountDisksOnVm,omitempty"`
	NasBackupParams *NasBackupParams `json:"nasBackupParams,omitempty"`
	// The NAS protocol type(s) of this restore task. Currently we only support a single restore type. This field is only populated for NAS restore tasks.
	NasProtocolTypeVec []int32 `json:"nasProtocolTypeVec,omitempty"`
	// Object store config name for source initiated backup.
	ObjectstoreConfigName NullableString `json:"objectstoreConfigName,omitempty"`
	// If enabled, magneto physical file restore will be enabled via job framework
	PhysicalFlrParallelRestore NullableBool `json:"physicalFlrParallelRestore,omitempty"`
	ProxyEntity *EntityProto `json:"proxyEntity,omitempty"`
	ProxyEntityParentSource *EntityProto `json:"proxyEntityParentSource,omitempty"`
	RestoreFilesPreferences *RestoreFilesPreferences `json:"restoreFilesPreferences,omitempty"`
	// Determines the type of method to be used to perform FLR.
	RestoreMethod NullableInt32 `json:"restoreMethod,omitempty"`
	// Information regarding files and directories.
	RestoredFileInfoVec []RestoredFileInfo `json:"restoredFileInfoVec,omitempty"`
	S3Viewbackupproperties *S3ViewBackupProperties `json:"s3Viewbackupproperties,omitempty"`
	// Snapshot name need by source to start the restore.
	SourceSnapshotName NullableString `json:"sourceSnapshotName,omitempty"`
	TargetEntity *EntityProto `json:"targetEntity,omitempty"`
	TargetEntityCredentials *Credentials `json:"targetEntityCredentials,omitempty"`
	TargetEntityParentSource *EntityProto `json:"targetEntityParentSource,omitempty"`
	TargetHostEntity *EntityProto `json:"targetHostEntity,omitempty"`
	// The host environment type. This is set in VMware environment to indicate the OS type of the target entity. NOTE: This is expected to be set since magneto does not know the host type for VMware entities.
	TargetHostType NullableInt32 `json:"targetHostType,omitempty"`
	UptierParams *FileUptieringParams `json:"uptierParams,omitempty"`
	// Whether this will use an existing agent on the target VM to do the restore. This field is deprecated. restore_method should be used for populating use of existing agent.
	UseExistingAgent NullableBool `json:"useExistingAgent,omitempty"`
	// View ID
	ViewId NullableInt64 `json:"viewId,omitempty"`
	// Name of the S3 view
	ViewName NullableString `json:"viewName,omitempty"`
	VpcConnectorEntity *EntityProto `json:"vpcConnectorEntity,omitempty"`
}

// NewRestoreFilesParams instantiates a new RestoreFilesParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreFilesParams() *RestoreFilesParams {
	this := RestoreFilesParams{}
	return &this
}

// NewRestoreFilesParamsWithDefaults instantiates a new RestoreFilesParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreFilesParamsWithDefaults() *RestoreFilesParams {
	this := RestoreFilesParams{}
	return &this
}

// GetBlacklistedIpAddrs returns the BlacklistedIpAddrs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesParams) GetBlacklistedIpAddrs() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.BlacklistedIpAddrs
}

// GetBlacklistedIpAddrsOk returns a tuple with the BlacklistedIpAddrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesParams) GetBlacklistedIpAddrsOk() (*[]string, bool) {
	if o == nil || o.BlacklistedIpAddrs == nil {
		return nil, false
	}
	return &o.BlacklistedIpAddrs, true
}

// HasBlacklistedIpAddrs returns a boolean if a field has been set.
func (o *RestoreFilesParams) HasBlacklistedIpAddrs() bool {
	if o != nil && o.BlacklistedIpAddrs != nil {
		return true
	}

	return false
}

// SetBlacklistedIpAddrs gets a reference to the given []string and assigns it to the BlacklistedIpAddrs field.
func (o *RestoreFilesParams) SetBlacklistedIpAddrs(v []string) {
	o.BlacklistedIpAddrs = v
}

// GetDestinationEpUuid returns the DestinationEpUuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesParams) GetDestinationEpUuid() string {
	if o == nil || o.DestinationEpUuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.DestinationEpUuid.Get()
}

// GetDestinationEpUuidOk returns a tuple with the DestinationEpUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesParams) GetDestinationEpUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DestinationEpUuid.Get(), o.DestinationEpUuid.IsSet()
}

// HasDestinationEpUuid returns a boolean if a field has been set.
func (o *RestoreFilesParams) HasDestinationEpUuid() bool {
	if o != nil && o.DestinationEpUuid.IsSet() {
		return true
	}

	return false
}

// SetDestinationEpUuid gets a reference to the given NullableString and assigns it to the DestinationEpUuid field.
func (o *RestoreFilesParams) SetDestinationEpUuid(v string) {
	o.DestinationEpUuid.Set(&v)
}
// SetDestinationEpUuidNil sets the value for DestinationEpUuid to be an explicit nil
func (o *RestoreFilesParams) SetDestinationEpUuidNil() {
	o.DestinationEpUuid.Set(nil)
}

// UnsetDestinationEpUuid ensures that no value is present for DestinationEpUuid, not even an explicit nil
func (o *RestoreFilesParams) UnsetDestinationEpUuid() {
	o.DestinationEpUuid.Unset()
}

// GetDirectoryNameSecurityStyleMap returns the DirectoryNameSecurityStyleMap field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesParams) GetDirectoryNameSecurityStyleMap() []RestoreFilesParamsDirectoryNameSecurityStyleMapEntry {
	if o == nil  {
		var ret []RestoreFilesParamsDirectoryNameSecurityStyleMapEntry
		return ret
	}
	return o.DirectoryNameSecurityStyleMap
}

// GetDirectoryNameSecurityStyleMapOk returns a tuple with the DirectoryNameSecurityStyleMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesParams) GetDirectoryNameSecurityStyleMapOk() (*[]RestoreFilesParamsDirectoryNameSecurityStyleMapEntry, bool) {
	if o == nil || o.DirectoryNameSecurityStyleMap == nil {
		return nil, false
	}
	return &o.DirectoryNameSecurityStyleMap, true
}

// HasDirectoryNameSecurityStyleMap returns a boolean if a field has been set.
func (o *RestoreFilesParams) HasDirectoryNameSecurityStyleMap() bool {
	if o != nil && o.DirectoryNameSecurityStyleMap != nil {
		return true
	}

	return false
}

// SetDirectoryNameSecurityStyleMap gets a reference to the given []RestoreFilesParamsDirectoryNameSecurityStyleMapEntry and assigns it to the DirectoryNameSecurityStyleMap field.
func (o *RestoreFilesParams) SetDirectoryNameSecurityStyleMap(v []RestoreFilesParamsDirectoryNameSecurityStyleMapEntry) {
	o.DirectoryNameSecurityStyleMap = v
}

// GetIsArchiveFlr returns the IsArchiveFlr field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesParams) GetIsArchiveFlr() bool {
	if o == nil || o.IsArchiveFlr.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsArchiveFlr.Get()
}

// GetIsArchiveFlrOk returns a tuple with the IsArchiveFlr field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesParams) GetIsArchiveFlrOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsArchiveFlr.Get(), o.IsArchiveFlr.IsSet()
}

// HasIsArchiveFlr returns a boolean if a field has been set.
func (o *RestoreFilesParams) HasIsArchiveFlr() bool {
	if o != nil && o.IsArchiveFlr.IsSet() {
		return true
	}

	return false
}

// SetIsArchiveFlr gets a reference to the given NullableBool and assigns it to the IsArchiveFlr field.
func (o *RestoreFilesParams) SetIsArchiveFlr(v bool) {
	o.IsArchiveFlr.Set(&v)
}
// SetIsArchiveFlrNil sets the value for IsArchiveFlr to be an explicit nil
func (o *RestoreFilesParams) SetIsArchiveFlrNil() {
	o.IsArchiveFlr.Set(nil)
}

// UnsetIsArchiveFlr ensures that no value is present for IsArchiveFlr, not even an explicit nil
func (o *RestoreFilesParams) UnsetIsArchiveFlr() {
	o.IsArchiveFlr.Unset()
}

// GetIsFileVolumeRestore returns the IsFileVolumeRestore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesParams) GetIsFileVolumeRestore() bool {
	if o == nil || o.IsFileVolumeRestore.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsFileVolumeRestore.Get()
}

// GetIsFileVolumeRestoreOk returns a tuple with the IsFileVolumeRestore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesParams) GetIsFileVolumeRestoreOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsFileVolumeRestore.Get(), o.IsFileVolumeRestore.IsSet()
}

// HasIsFileVolumeRestore returns a boolean if a field has been set.
func (o *RestoreFilesParams) HasIsFileVolumeRestore() bool {
	if o != nil && o.IsFileVolumeRestore.IsSet() {
		return true
	}

	return false
}

// SetIsFileVolumeRestore gets a reference to the given NullableBool and assigns it to the IsFileVolumeRestore field.
func (o *RestoreFilesParams) SetIsFileVolumeRestore(v bool) {
	o.IsFileVolumeRestore.Set(&v)
}
// SetIsFileVolumeRestoreNil sets the value for IsFileVolumeRestore to be an explicit nil
func (o *RestoreFilesParams) SetIsFileVolumeRestoreNil() {
	o.IsFileVolumeRestore.Set(nil)
}

// UnsetIsFileVolumeRestore ensures that no value is present for IsFileVolumeRestore, not even an explicit nil
func (o *RestoreFilesParams) UnsetIsFileVolumeRestore() {
	o.IsFileVolumeRestore.Unset()
}

// GetIsMountBasedFlr returns the IsMountBasedFlr field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesParams) GetIsMountBasedFlr() bool {
	if o == nil || o.IsMountBasedFlr.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsMountBasedFlr.Get()
}

// GetIsMountBasedFlrOk returns a tuple with the IsMountBasedFlr field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesParams) GetIsMountBasedFlrOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsMountBasedFlr.Get(), o.IsMountBasedFlr.IsSet()
}

// HasIsMountBasedFlr returns a boolean if a field has been set.
func (o *RestoreFilesParams) HasIsMountBasedFlr() bool {
	if o != nil && o.IsMountBasedFlr.IsSet() {
		return true
	}

	return false
}

// SetIsMountBasedFlr gets a reference to the given NullableBool and assigns it to the IsMountBasedFlr field.
func (o *RestoreFilesParams) SetIsMountBasedFlr(v bool) {
	o.IsMountBasedFlr.Set(&v)
}
// SetIsMountBasedFlrNil sets the value for IsMountBasedFlr to be an explicit nil
func (o *RestoreFilesParams) SetIsMountBasedFlrNil() {
	o.IsMountBasedFlr.Set(nil)
}

// UnsetIsMountBasedFlr ensures that no value is present for IsMountBasedFlr, not even an explicit nil
func (o *RestoreFilesParams) UnsetIsMountBasedFlr() {
	o.IsMountBasedFlr.Unset()
}

// GetIsSourceInitiatedRestore returns the IsSourceInitiatedRestore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesParams) GetIsSourceInitiatedRestore() bool {
	if o == nil || o.IsSourceInitiatedRestore.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsSourceInitiatedRestore.Get()
}

// GetIsSourceInitiatedRestoreOk returns a tuple with the IsSourceInitiatedRestore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesParams) GetIsSourceInitiatedRestoreOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsSourceInitiatedRestore.Get(), o.IsSourceInitiatedRestore.IsSet()
}

// HasIsSourceInitiatedRestore returns a boolean if a field has been set.
func (o *RestoreFilesParams) HasIsSourceInitiatedRestore() bool {
	if o != nil && o.IsSourceInitiatedRestore.IsSet() {
		return true
	}

	return false
}

// SetIsSourceInitiatedRestore gets a reference to the given NullableBool and assigns it to the IsSourceInitiatedRestore field.
func (o *RestoreFilesParams) SetIsSourceInitiatedRestore(v bool) {
	o.IsSourceInitiatedRestore.Set(&v)
}
// SetIsSourceInitiatedRestoreNil sets the value for IsSourceInitiatedRestore to be an explicit nil
func (o *RestoreFilesParams) SetIsSourceInitiatedRestoreNil() {
	o.IsSourceInitiatedRestore.Set(nil)
}

// UnsetIsSourceInitiatedRestore ensures that no value is present for IsSourceInitiatedRestore, not even an explicit nil
func (o *RestoreFilesParams) UnsetIsSourceInitiatedRestore() {
	o.IsSourceInitiatedRestore.Unset()
}

// GetMountDisksOnVm returns the MountDisksOnVm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesParams) GetMountDisksOnVm() bool {
	if o == nil || o.MountDisksOnVm.Get() == nil {
		var ret bool
		return ret
	}
	return *o.MountDisksOnVm.Get()
}

// GetMountDisksOnVmOk returns a tuple with the MountDisksOnVm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesParams) GetMountDisksOnVmOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MountDisksOnVm.Get(), o.MountDisksOnVm.IsSet()
}

// HasMountDisksOnVm returns a boolean if a field has been set.
func (o *RestoreFilesParams) HasMountDisksOnVm() bool {
	if o != nil && o.MountDisksOnVm.IsSet() {
		return true
	}

	return false
}

// SetMountDisksOnVm gets a reference to the given NullableBool and assigns it to the MountDisksOnVm field.
func (o *RestoreFilesParams) SetMountDisksOnVm(v bool) {
	o.MountDisksOnVm.Set(&v)
}
// SetMountDisksOnVmNil sets the value for MountDisksOnVm to be an explicit nil
func (o *RestoreFilesParams) SetMountDisksOnVmNil() {
	o.MountDisksOnVm.Set(nil)
}

// UnsetMountDisksOnVm ensures that no value is present for MountDisksOnVm, not even an explicit nil
func (o *RestoreFilesParams) UnsetMountDisksOnVm() {
	o.MountDisksOnVm.Unset()
}

// GetNasBackupParams returns the NasBackupParams field value if set, zero value otherwise.
func (o *RestoreFilesParams) GetNasBackupParams() NasBackupParams {
	if o == nil || o.NasBackupParams == nil {
		var ret NasBackupParams
		return ret
	}
	return *o.NasBackupParams
}

// GetNasBackupParamsOk returns a tuple with the NasBackupParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreFilesParams) GetNasBackupParamsOk() (*NasBackupParams, bool) {
	if o == nil || o.NasBackupParams == nil {
		return nil, false
	}
	return o.NasBackupParams, true
}

// HasNasBackupParams returns a boolean if a field has been set.
func (o *RestoreFilesParams) HasNasBackupParams() bool {
	if o != nil && o.NasBackupParams != nil {
		return true
	}

	return false
}

// SetNasBackupParams gets a reference to the given NasBackupParams and assigns it to the NasBackupParams field.
func (o *RestoreFilesParams) SetNasBackupParams(v NasBackupParams) {
	o.NasBackupParams = &v
}

// GetNasProtocolTypeVec returns the NasProtocolTypeVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesParams) GetNasProtocolTypeVec() []int32 {
	if o == nil  {
		var ret []int32
		return ret
	}
	return o.NasProtocolTypeVec
}

// GetNasProtocolTypeVecOk returns a tuple with the NasProtocolTypeVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesParams) GetNasProtocolTypeVecOk() (*[]int32, bool) {
	if o == nil || o.NasProtocolTypeVec == nil {
		return nil, false
	}
	return &o.NasProtocolTypeVec, true
}

// HasNasProtocolTypeVec returns a boolean if a field has been set.
func (o *RestoreFilesParams) HasNasProtocolTypeVec() bool {
	if o != nil && o.NasProtocolTypeVec != nil {
		return true
	}

	return false
}

// SetNasProtocolTypeVec gets a reference to the given []int32 and assigns it to the NasProtocolTypeVec field.
func (o *RestoreFilesParams) SetNasProtocolTypeVec(v []int32) {
	o.NasProtocolTypeVec = v
}

// GetObjectstoreConfigName returns the ObjectstoreConfigName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesParams) GetObjectstoreConfigName() string {
	if o == nil || o.ObjectstoreConfigName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ObjectstoreConfigName.Get()
}

// GetObjectstoreConfigNameOk returns a tuple with the ObjectstoreConfigName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesParams) GetObjectstoreConfigNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ObjectstoreConfigName.Get(), o.ObjectstoreConfigName.IsSet()
}

// HasObjectstoreConfigName returns a boolean if a field has been set.
func (o *RestoreFilesParams) HasObjectstoreConfigName() bool {
	if o != nil && o.ObjectstoreConfigName.IsSet() {
		return true
	}

	return false
}

// SetObjectstoreConfigName gets a reference to the given NullableString and assigns it to the ObjectstoreConfigName field.
func (o *RestoreFilesParams) SetObjectstoreConfigName(v string) {
	o.ObjectstoreConfigName.Set(&v)
}
// SetObjectstoreConfigNameNil sets the value for ObjectstoreConfigName to be an explicit nil
func (o *RestoreFilesParams) SetObjectstoreConfigNameNil() {
	o.ObjectstoreConfigName.Set(nil)
}

// UnsetObjectstoreConfigName ensures that no value is present for ObjectstoreConfigName, not even an explicit nil
func (o *RestoreFilesParams) UnsetObjectstoreConfigName() {
	o.ObjectstoreConfigName.Unset()
}

// GetPhysicalFlrParallelRestore returns the PhysicalFlrParallelRestore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesParams) GetPhysicalFlrParallelRestore() bool {
	if o == nil || o.PhysicalFlrParallelRestore.Get() == nil {
		var ret bool
		return ret
	}
	return *o.PhysicalFlrParallelRestore.Get()
}

// GetPhysicalFlrParallelRestoreOk returns a tuple with the PhysicalFlrParallelRestore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesParams) GetPhysicalFlrParallelRestoreOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PhysicalFlrParallelRestore.Get(), o.PhysicalFlrParallelRestore.IsSet()
}

// HasPhysicalFlrParallelRestore returns a boolean if a field has been set.
func (o *RestoreFilesParams) HasPhysicalFlrParallelRestore() bool {
	if o != nil && o.PhysicalFlrParallelRestore.IsSet() {
		return true
	}

	return false
}

// SetPhysicalFlrParallelRestore gets a reference to the given NullableBool and assigns it to the PhysicalFlrParallelRestore field.
func (o *RestoreFilesParams) SetPhysicalFlrParallelRestore(v bool) {
	o.PhysicalFlrParallelRestore.Set(&v)
}
// SetPhysicalFlrParallelRestoreNil sets the value for PhysicalFlrParallelRestore to be an explicit nil
func (o *RestoreFilesParams) SetPhysicalFlrParallelRestoreNil() {
	o.PhysicalFlrParallelRestore.Set(nil)
}

// UnsetPhysicalFlrParallelRestore ensures that no value is present for PhysicalFlrParallelRestore, not even an explicit nil
func (o *RestoreFilesParams) UnsetPhysicalFlrParallelRestore() {
	o.PhysicalFlrParallelRestore.Unset()
}

// GetProxyEntity returns the ProxyEntity field value if set, zero value otherwise.
func (o *RestoreFilesParams) GetProxyEntity() EntityProto {
	if o == nil || o.ProxyEntity == nil {
		var ret EntityProto
		return ret
	}
	return *o.ProxyEntity
}

// GetProxyEntityOk returns a tuple with the ProxyEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreFilesParams) GetProxyEntityOk() (*EntityProto, bool) {
	if o == nil || o.ProxyEntity == nil {
		return nil, false
	}
	return o.ProxyEntity, true
}

// HasProxyEntity returns a boolean if a field has been set.
func (o *RestoreFilesParams) HasProxyEntity() bool {
	if o != nil && o.ProxyEntity != nil {
		return true
	}

	return false
}

// SetProxyEntity gets a reference to the given EntityProto and assigns it to the ProxyEntity field.
func (o *RestoreFilesParams) SetProxyEntity(v EntityProto) {
	o.ProxyEntity = &v
}

// GetProxyEntityParentSource returns the ProxyEntityParentSource field value if set, zero value otherwise.
func (o *RestoreFilesParams) GetProxyEntityParentSource() EntityProto {
	if o == nil || o.ProxyEntityParentSource == nil {
		var ret EntityProto
		return ret
	}
	return *o.ProxyEntityParentSource
}

// GetProxyEntityParentSourceOk returns a tuple with the ProxyEntityParentSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreFilesParams) GetProxyEntityParentSourceOk() (*EntityProto, bool) {
	if o == nil || o.ProxyEntityParentSource == nil {
		return nil, false
	}
	return o.ProxyEntityParentSource, true
}

// HasProxyEntityParentSource returns a boolean if a field has been set.
func (o *RestoreFilesParams) HasProxyEntityParentSource() bool {
	if o != nil && o.ProxyEntityParentSource != nil {
		return true
	}

	return false
}

// SetProxyEntityParentSource gets a reference to the given EntityProto and assigns it to the ProxyEntityParentSource field.
func (o *RestoreFilesParams) SetProxyEntityParentSource(v EntityProto) {
	o.ProxyEntityParentSource = &v
}

// GetRestoreFilesPreferences returns the RestoreFilesPreferences field value if set, zero value otherwise.
func (o *RestoreFilesParams) GetRestoreFilesPreferences() RestoreFilesPreferences {
	if o == nil || o.RestoreFilesPreferences == nil {
		var ret RestoreFilesPreferences
		return ret
	}
	return *o.RestoreFilesPreferences
}

// GetRestoreFilesPreferencesOk returns a tuple with the RestoreFilesPreferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreFilesParams) GetRestoreFilesPreferencesOk() (*RestoreFilesPreferences, bool) {
	if o == nil || o.RestoreFilesPreferences == nil {
		return nil, false
	}
	return o.RestoreFilesPreferences, true
}

// HasRestoreFilesPreferences returns a boolean if a field has been set.
func (o *RestoreFilesParams) HasRestoreFilesPreferences() bool {
	if o != nil && o.RestoreFilesPreferences != nil {
		return true
	}

	return false
}

// SetRestoreFilesPreferences gets a reference to the given RestoreFilesPreferences and assigns it to the RestoreFilesPreferences field.
func (o *RestoreFilesParams) SetRestoreFilesPreferences(v RestoreFilesPreferences) {
	o.RestoreFilesPreferences = &v
}

// GetRestoreMethod returns the RestoreMethod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesParams) GetRestoreMethod() int32 {
	if o == nil || o.RestoreMethod.Get() == nil {
		var ret int32
		return ret
	}
	return *o.RestoreMethod.Get()
}

// GetRestoreMethodOk returns a tuple with the RestoreMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesParams) GetRestoreMethodOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RestoreMethod.Get(), o.RestoreMethod.IsSet()
}

// HasRestoreMethod returns a boolean if a field has been set.
func (o *RestoreFilesParams) HasRestoreMethod() bool {
	if o != nil && o.RestoreMethod.IsSet() {
		return true
	}

	return false
}

// SetRestoreMethod gets a reference to the given NullableInt32 and assigns it to the RestoreMethod field.
func (o *RestoreFilesParams) SetRestoreMethod(v int32) {
	o.RestoreMethod.Set(&v)
}
// SetRestoreMethodNil sets the value for RestoreMethod to be an explicit nil
func (o *RestoreFilesParams) SetRestoreMethodNil() {
	o.RestoreMethod.Set(nil)
}

// UnsetRestoreMethod ensures that no value is present for RestoreMethod, not even an explicit nil
func (o *RestoreFilesParams) UnsetRestoreMethod() {
	o.RestoreMethod.Unset()
}

// GetRestoredFileInfoVec returns the RestoredFileInfoVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesParams) GetRestoredFileInfoVec() []RestoredFileInfo {
	if o == nil  {
		var ret []RestoredFileInfo
		return ret
	}
	return o.RestoredFileInfoVec
}

// GetRestoredFileInfoVecOk returns a tuple with the RestoredFileInfoVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesParams) GetRestoredFileInfoVecOk() (*[]RestoredFileInfo, bool) {
	if o == nil || o.RestoredFileInfoVec == nil {
		return nil, false
	}
	return &o.RestoredFileInfoVec, true
}

// HasRestoredFileInfoVec returns a boolean if a field has been set.
func (o *RestoreFilesParams) HasRestoredFileInfoVec() bool {
	if o != nil && o.RestoredFileInfoVec != nil {
		return true
	}

	return false
}

// SetRestoredFileInfoVec gets a reference to the given []RestoredFileInfo and assigns it to the RestoredFileInfoVec field.
func (o *RestoreFilesParams) SetRestoredFileInfoVec(v []RestoredFileInfo) {
	o.RestoredFileInfoVec = v
}

// GetS3Viewbackupproperties returns the S3Viewbackupproperties field value if set, zero value otherwise.
func (o *RestoreFilesParams) GetS3Viewbackupproperties() S3ViewBackupProperties {
	if o == nil || o.S3Viewbackupproperties == nil {
		var ret S3ViewBackupProperties
		return ret
	}
	return *o.S3Viewbackupproperties
}

// GetS3ViewbackuppropertiesOk returns a tuple with the S3Viewbackupproperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreFilesParams) GetS3ViewbackuppropertiesOk() (*S3ViewBackupProperties, bool) {
	if o == nil || o.S3Viewbackupproperties == nil {
		return nil, false
	}
	return o.S3Viewbackupproperties, true
}

// HasS3Viewbackupproperties returns a boolean if a field has been set.
func (o *RestoreFilesParams) HasS3Viewbackupproperties() bool {
	if o != nil && o.S3Viewbackupproperties != nil {
		return true
	}

	return false
}

// SetS3Viewbackupproperties gets a reference to the given S3ViewBackupProperties and assigns it to the S3Viewbackupproperties field.
func (o *RestoreFilesParams) SetS3Viewbackupproperties(v S3ViewBackupProperties) {
	o.S3Viewbackupproperties = &v
}

// GetSourceSnapshotName returns the SourceSnapshotName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesParams) GetSourceSnapshotName() string {
	if o == nil || o.SourceSnapshotName.Get() == nil {
		var ret string
		return ret
	}
	return *o.SourceSnapshotName.Get()
}

// GetSourceSnapshotNameOk returns a tuple with the SourceSnapshotName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesParams) GetSourceSnapshotNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceSnapshotName.Get(), o.SourceSnapshotName.IsSet()
}

// HasSourceSnapshotName returns a boolean if a field has been set.
func (o *RestoreFilesParams) HasSourceSnapshotName() bool {
	if o != nil && o.SourceSnapshotName.IsSet() {
		return true
	}

	return false
}

// SetSourceSnapshotName gets a reference to the given NullableString and assigns it to the SourceSnapshotName field.
func (o *RestoreFilesParams) SetSourceSnapshotName(v string) {
	o.SourceSnapshotName.Set(&v)
}
// SetSourceSnapshotNameNil sets the value for SourceSnapshotName to be an explicit nil
func (o *RestoreFilesParams) SetSourceSnapshotNameNil() {
	o.SourceSnapshotName.Set(nil)
}

// UnsetSourceSnapshotName ensures that no value is present for SourceSnapshotName, not even an explicit nil
func (o *RestoreFilesParams) UnsetSourceSnapshotName() {
	o.SourceSnapshotName.Unset()
}

// GetTargetEntity returns the TargetEntity field value if set, zero value otherwise.
func (o *RestoreFilesParams) GetTargetEntity() EntityProto {
	if o == nil || o.TargetEntity == nil {
		var ret EntityProto
		return ret
	}
	return *o.TargetEntity
}

// GetTargetEntityOk returns a tuple with the TargetEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreFilesParams) GetTargetEntityOk() (*EntityProto, bool) {
	if o == nil || o.TargetEntity == nil {
		return nil, false
	}
	return o.TargetEntity, true
}

// HasTargetEntity returns a boolean if a field has been set.
func (o *RestoreFilesParams) HasTargetEntity() bool {
	if o != nil && o.TargetEntity != nil {
		return true
	}

	return false
}

// SetTargetEntity gets a reference to the given EntityProto and assigns it to the TargetEntity field.
func (o *RestoreFilesParams) SetTargetEntity(v EntityProto) {
	o.TargetEntity = &v
}

// GetTargetEntityCredentials returns the TargetEntityCredentials field value if set, zero value otherwise.
func (o *RestoreFilesParams) GetTargetEntityCredentials() Credentials {
	if o == nil || o.TargetEntityCredentials == nil {
		var ret Credentials
		return ret
	}
	return *o.TargetEntityCredentials
}

// GetTargetEntityCredentialsOk returns a tuple with the TargetEntityCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreFilesParams) GetTargetEntityCredentialsOk() (*Credentials, bool) {
	if o == nil || o.TargetEntityCredentials == nil {
		return nil, false
	}
	return o.TargetEntityCredentials, true
}

// HasTargetEntityCredentials returns a boolean if a field has been set.
func (o *RestoreFilesParams) HasTargetEntityCredentials() bool {
	if o != nil && o.TargetEntityCredentials != nil {
		return true
	}

	return false
}

// SetTargetEntityCredentials gets a reference to the given Credentials and assigns it to the TargetEntityCredentials field.
func (o *RestoreFilesParams) SetTargetEntityCredentials(v Credentials) {
	o.TargetEntityCredentials = &v
}

// GetTargetEntityParentSource returns the TargetEntityParentSource field value if set, zero value otherwise.
func (o *RestoreFilesParams) GetTargetEntityParentSource() EntityProto {
	if o == nil || o.TargetEntityParentSource == nil {
		var ret EntityProto
		return ret
	}
	return *o.TargetEntityParentSource
}

// GetTargetEntityParentSourceOk returns a tuple with the TargetEntityParentSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreFilesParams) GetTargetEntityParentSourceOk() (*EntityProto, bool) {
	if o == nil || o.TargetEntityParentSource == nil {
		return nil, false
	}
	return o.TargetEntityParentSource, true
}

// HasTargetEntityParentSource returns a boolean if a field has been set.
func (o *RestoreFilesParams) HasTargetEntityParentSource() bool {
	if o != nil && o.TargetEntityParentSource != nil {
		return true
	}

	return false
}

// SetTargetEntityParentSource gets a reference to the given EntityProto and assigns it to the TargetEntityParentSource field.
func (o *RestoreFilesParams) SetTargetEntityParentSource(v EntityProto) {
	o.TargetEntityParentSource = &v
}

// GetTargetHostEntity returns the TargetHostEntity field value if set, zero value otherwise.
func (o *RestoreFilesParams) GetTargetHostEntity() EntityProto {
	if o == nil || o.TargetHostEntity == nil {
		var ret EntityProto
		return ret
	}
	return *o.TargetHostEntity
}

// GetTargetHostEntityOk returns a tuple with the TargetHostEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreFilesParams) GetTargetHostEntityOk() (*EntityProto, bool) {
	if o == nil || o.TargetHostEntity == nil {
		return nil, false
	}
	return o.TargetHostEntity, true
}

// HasTargetHostEntity returns a boolean if a field has been set.
func (o *RestoreFilesParams) HasTargetHostEntity() bool {
	if o != nil && o.TargetHostEntity != nil {
		return true
	}

	return false
}

// SetTargetHostEntity gets a reference to the given EntityProto and assigns it to the TargetHostEntity field.
func (o *RestoreFilesParams) SetTargetHostEntity(v EntityProto) {
	o.TargetHostEntity = &v
}

// GetTargetHostType returns the TargetHostType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesParams) GetTargetHostType() int32 {
	if o == nil || o.TargetHostType.Get() == nil {
		var ret int32
		return ret
	}
	return *o.TargetHostType.Get()
}

// GetTargetHostTypeOk returns a tuple with the TargetHostType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesParams) GetTargetHostTypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetHostType.Get(), o.TargetHostType.IsSet()
}

// HasTargetHostType returns a boolean if a field has been set.
func (o *RestoreFilesParams) HasTargetHostType() bool {
	if o != nil && o.TargetHostType.IsSet() {
		return true
	}

	return false
}

// SetTargetHostType gets a reference to the given NullableInt32 and assigns it to the TargetHostType field.
func (o *RestoreFilesParams) SetTargetHostType(v int32) {
	o.TargetHostType.Set(&v)
}
// SetTargetHostTypeNil sets the value for TargetHostType to be an explicit nil
func (o *RestoreFilesParams) SetTargetHostTypeNil() {
	o.TargetHostType.Set(nil)
}

// UnsetTargetHostType ensures that no value is present for TargetHostType, not even an explicit nil
func (o *RestoreFilesParams) UnsetTargetHostType() {
	o.TargetHostType.Unset()
}

// GetUptierParams returns the UptierParams field value if set, zero value otherwise.
func (o *RestoreFilesParams) GetUptierParams() FileUptieringParams {
	if o == nil || o.UptierParams == nil {
		var ret FileUptieringParams
		return ret
	}
	return *o.UptierParams
}

// GetUptierParamsOk returns a tuple with the UptierParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreFilesParams) GetUptierParamsOk() (*FileUptieringParams, bool) {
	if o == nil || o.UptierParams == nil {
		return nil, false
	}
	return o.UptierParams, true
}

// HasUptierParams returns a boolean if a field has been set.
func (o *RestoreFilesParams) HasUptierParams() bool {
	if o != nil && o.UptierParams != nil {
		return true
	}

	return false
}

// SetUptierParams gets a reference to the given FileUptieringParams and assigns it to the UptierParams field.
func (o *RestoreFilesParams) SetUptierParams(v FileUptieringParams) {
	o.UptierParams = &v
}

// GetUseExistingAgent returns the UseExistingAgent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesParams) GetUseExistingAgent() bool {
	if o == nil || o.UseExistingAgent.Get() == nil {
		var ret bool
		return ret
	}
	return *o.UseExistingAgent.Get()
}

// GetUseExistingAgentOk returns a tuple with the UseExistingAgent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesParams) GetUseExistingAgentOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UseExistingAgent.Get(), o.UseExistingAgent.IsSet()
}

// HasUseExistingAgent returns a boolean if a field has been set.
func (o *RestoreFilesParams) HasUseExistingAgent() bool {
	if o != nil && o.UseExistingAgent.IsSet() {
		return true
	}

	return false
}

// SetUseExistingAgent gets a reference to the given NullableBool and assigns it to the UseExistingAgent field.
func (o *RestoreFilesParams) SetUseExistingAgent(v bool) {
	o.UseExistingAgent.Set(&v)
}
// SetUseExistingAgentNil sets the value for UseExistingAgent to be an explicit nil
func (o *RestoreFilesParams) SetUseExistingAgentNil() {
	o.UseExistingAgent.Set(nil)
}

// UnsetUseExistingAgent ensures that no value is present for UseExistingAgent, not even an explicit nil
func (o *RestoreFilesParams) UnsetUseExistingAgent() {
	o.UseExistingAgent.Unset()
}

// GetViewId returns the ViewId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesParams) GetViewId() int64 {
	if o == nil || o.ViewId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ViewId.Get()
}

// GetViewIdOk returns a tuple with the ViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesParams) GetViewIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewId.Get(), o.ViewId.IsSet()
}

// HasViewId returns a boolean if a field has been set.
func (o *RestoreFilesParams) HasViewId() bool {
	if o != nil && o.ViewId.IsSet() {
		return true
	}

	return false
}

// SetViewId gets a reference to the given NullableInt64 and assigns it to the ViewId field.
func (o *RestoreFilesParams) SetViewId(v int64) {
	o.ViewId.Set(&v)
}
// SetViewIdNil sets the value for ViewId to be an explicit nil
func (o *RestoreFilesParams) SetViewIdNil() {
	o.ViewId.Set(nil)
}

// UnsetViewId ensures that no value is present for ViewId, not even an explicit nil
func (o *RestoreFilesParams) UnsetViewId() {
	o.ViewId.Unset()
}

// GetViewName returns the ViewName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilesParams) GetViewName() string {
	if o == nil || o.ViewName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ViewName.Get()
}

// GetViewNameOk returns a tuple with the ViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilesParams) GetViewNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewName.Get(), o.ViewName.IsSet()
}

// HasViewName returns a boolean if a field has been set.
func (o *RestoreFilesParams) HasViewName() bool {
	if o != nil && o.ViewName.IsSet() {
		return true
	}

	return false
}

// SetViewName gets a reference to the given NullableString and assigns it to the ViewName field.
func (o *RestoreFilesParams) SetViewName(v string) {
	o.ViewName.Set(&v)
}
// SetViewNameNil sets the value for ViewName to be an explicit nil
func (o *RestoreFilesParams) SetViewNameNil() {
	o.ViewName.Set(nil)
}

// UnsetViewName ensures that no value is present for ViewName, not even an explicit nil
func (o *RestoreFilesParams) UnsetViewName() {
	o.ViewName.Unset()
}

// GetVpcConnectorEntity returns the VpcConnectorEntity field value if set, zero value otherwise.
func (o *RestoreFilesParams) GetVpcConnectorEntity() EntityProto {
	if o == nil || o.VpcConnectorEntity == nil {
		var ret EntityProto
		return ret
	}
	return *o.VpcConnectorEntity
}

// GetVpcConnectorEntityOk returns a tuple with the VpcConnectorEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreFilesParams) GetVpcConnectorEntityOk() (*EntityProto, bool) {
	if o == nil || o.VpcConnectorEntity == nil {
		return nil, false
	}
	return o.VpcConnectorEntity, true
}

// HasVpcConnectorEntity returns a boolean if a field has been set.
func (o *RestoreFilesParams) HasVpcConnectorEntity() bool {
	if o != nil && o.VpcConnectorEntity != nil {
		return true
	}

	return false
}

// SetVpcConnectorEntity gets a reference to the given EntityProto and assigns it to the VpcConnectorEntity field.
func (o *RestoreFilesParams) SetVpcConnectorEntity(v EntityProto) {
	o.VpcConnectorEntity = &v
}

func (o RestoreFilesParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BlacklistedIpAddrs != nil {
		toSerialize["blacklistedIpAddrs"] = o.BlacklistedIpAddrs
	}
	if o.DestinationEpUuid.IsSet() {
		toSerialize["destinationEpUuid"] = o.DestinationEpUuid.Get()
	}
	if o.DirectoryNameSecurityStyleMap != nil {
		toSerialize["directoryNameSecurityStyleMap"] = o.DirectoryNameSecurityStyleMap
	}
	if o.IsArchiveFlr.IsSet() {
		toSerialize["isArchiveFlr"] = o.IsArchiveFlr.Get()
	}
	if o.IsFileVolumeRestore.IsSet() {
		toSerialize["isFileVolumeRestore"] = o.IsFileVolumeRestore.Get()
	}
	if o.IsMountBasedFlr.IsSet() {
		toSerialize["isMountBasedFlr"] = o.IsMountBasedFlr.Get()
	}
	if o.IsSourceInitiatedRestore.IsSet() {
		toSerialize["isSourceInitiatedRestore"] = o.IsSourceInitiatedRestore.Get()
	}
	if o.MountDisksOnVm.IsSet() {
		toSerialize["mountDisksOnVm"] = o.MountDisksOnVm.Get()
	}
	if o.NasBackupParams != nil {
		toSerialize["nasBackupParams"] = o.NasBackupParams
	}
	if o.NasProtocolTypeVec != nil {
		toSerialize["nasProtocolTypeVec"] = o.NasProtocolTypeVec
	}
	if o.ObjectstoreConfigName.IsSet() {
		toSerialize["objectstoreConfigName"] = o.ObjectstoreConfigName.Get()
	}
	if o.PhysicalFlrParallelRestore.IsSet() {
		toSerialize["physicalFlrParallelRestore"] = o.PhysicalFlrParallelRestore.Get()
	}
	if o.ProxyEntity != nil {
		toSerialize["proxyEntity"] = o.ProxyEntity
	}
	if o.ProxyEntityParentSource != nil {
		toSerialize["proxyEntityParentSource"] = o.ProxyEntityParentSource
	}
	if o.RestoreFilesPreferences != nil {
		toSerialize["restoreFilesPreferences"] = o.RestoreFilesPreferences
	}
	if o.RestoreMethod.IsSet() {
		toSerialize["restoreMethod"] = o.RestoreMethod.Get()
	}
	if o.RestoredFileInfoVec != nil {
		toSerialize["restoredFileInfoVec"] = o.RestoredFileInfoVec
	}
	if o.S3Viewbackupproperties != nil {
		toSerialize["s3Viewbackupproperties"] = o.S3Viewbackupproperties
	}
	if o.SourceSnapshotName.IsSet() {
		toSerialize["sourceSnapshotName"] = o.SourceSnapshotName.Get()
	}
	if o.TargetEntity != nil {
		toSerialize["targetEntity"] = o.TargetEntity
	}
	if o.TargetEntityCredentials != nil {
		toSerialize["targetEntityCredentials"] = o.TargetEntityCredentials
	}
	if o.TargetEntityParentSource != nil {
		toSerialize["targetEntityParentSource"] = o.TargetEntityParentSource
	}
	if o.TargetHostEntity != nil {
		toSerialize["targetHostEntity"] = o.TargetHostEntity
	}
	if o.TargetHostType.IsSet() {
		toSerialize["targetHostType"] = o.TargetHostType.Get()
	}
	if o.UptierParams != nil {
		toSerialize["uptierParams"] = o.UptierParams
	}
	if o.UseExistingAgent.IsSet() {
		toSerialize["useExistingAgent"] = o.UseExistingAgent.Get()
	}
	if o.ViewId.IsSet() {
		toSerialize["viewId"] = o.ViewId.Get()
	}
	if o.ViewName.IsSet() {
		toSerialize["viewName"] = o.ViewName.Get()
	}
	if o.VpcConnectorEntity != nil {
		toSerialize["vpcConnectorEntity"] = o.VpcConnectorEntity
	}
	return json.Marshal(toSerialize)
}

type NullableRestoreFilesParams struct {
	value *RestoreFilesParams
	isSet bool
}

func (v NullableRestoreFilesParams) Get() *RestoreFilesParams {
	return v.value
}

func (v *NullableRestoreFilesParams) Set(val *RestoreFilesParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreFilesParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreFilesParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreFilesParams(val *RestoreFilesParams) *NullableRestoreFilesParams {
	return &NullableRestoreFilesParams{value: val, isSet: true}
}

func (v NullableRestoreFilesParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreFilesParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


