/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// CreatedRemoteVaultSearchJobUid Specifies the Uid of the Job created to search the remote vault.
type CreatedRemoteVaultSearchJobUid struct {
	// Specifies the unique id assigned for the search Job on the Cluster.
	SearchJobUid NullableUniversalId `json:"searchJobUid,omitempty"`
}

// NewCreatedRemoteVaultSearchJobUid instantiates a new CreatedRemoteVaultSearchJobUid object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreatedRemoteVaultSearchJobUid() *CreatedRemoteVaultSearchJobUid {
	this := CreatedRemoteVaultSearchJobUid{}
	return &this
}

// NewCreatedRemoteVaultSearchJobUidWithDefaults instantiates a new CreatedRemoteVaultSearchJobUid object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreatedRemoteVaultSearchJobUidWithDefaults() *CreatedRemoteVaultSearchJobUid {
	this := CreatedRemoteVaultSearchJobUid{}
	return &this
}

// GetSearchJobUid returns the SearchJobUid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreatedRemoteVaultSearchJobUid) GetSearchJobUid() UniversalId {
	if o == nil || o.SearchJobUid.Get() == nil {
		var ret UniversalId
		return ret
	}
	return *o.SearchJobUid.Get()
}

// GetSearchJobUidOk returns a tuple with the SearchJobUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreatedRemoteVaultSearchJobUid) GetSearchJobUidOk() (*UniversalId, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SearchJobUid.Get(), o.SearchJobUid.IsSet()
}

// HasSearchJobUid returns a boolean if a field has been set.
func (o *CreatedRemoteVaultSearchJobUid) HasSearchJobUid() bool {
	if o != nil && o.SearchJobUid.IsSet() {
		return true
	}

	return false
}

// SetSearchJobUid gets a reference to the given NullableUniversalId and assigns it to the SearchJobUid field.
func (o *CreatedRemoteVaultSearchJobUid) SetSearchJobUid(v UniversalId) {
	o.SearchJobUid.Set(&v)
}
// SetSearchJobUidNil sets the value for SearchJobUid to be an explicit nil
func (o *CreatedRemoteVaultSearchJobUid) SetSearchJobUidNil() {
	o.SearchJobUid.Set(nil)
}

// UnsetSearchJobUid ensures that no value is present for SearchJobUid, not even an explicit nil
func (o *CreatedRemoteVaultSearchJobUid) UnsetSearchJobUid() {
	o.SearchJobUid.Unset()
}

func (o CreatedRemoteVaultSearchJobUid) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SearchJobUid.IsSet() {
		toSerialize["searchJobUid"] = o.SearchJobUid.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCreatedRemoteVaultSearchJobUid struct {
	value *CreatedRemoteVaultSearchJobUid
	isSet bool
}

func (v NullableCreatedRemoteVaultSearchJobUid) Get() *CreatedRemoteVaultSearchJobUid {
	return v.value
}

func (v *NullableCreatedRemoteVaultSearchJobUid) Set(val *CreatedRemoteVaultSearchJobUid) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatedRemoteVaultSearchJobUid) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatedRemoteVaultSearchJobUid) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatedRemoteVaultSearchJobUid(val *CreatedRemoteVaultSearchJobUid) *NullableCreatedRemoteVaultSearchJobUid {
	return &NullableCreatedRemoteVaultSearchJobUid{value: val, isSet: true}
}

func (v NullableCreatedRemoteVaultSearchJobUid) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreatedRemoteVaultSearchJobUid) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


