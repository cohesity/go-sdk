/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// AdditionalOracleDBParams struct for AdditionalOracleDBParams
type AdditionalOracleDBParams struct {
	// Database app id.
	AppEntityId NullableInt64 `json:"appEntityId,omitempty"`
	// The following proto message should be renamed to a more general message to represent parameters pertaining to a single unique Oracle database. Uniqueness of an Oracle database should be strictly determined by its database unique name. i.e. all backup parameters needed for a unique Oracle database should be expressed in the following proto.  It is a vector for future support of backing up Data Guard sources. We may or may not need this to be vector to support Data Guard sources. For now, the size of this vector is always 1. When we rename this proto in the future, if we determine there is no need to use a vector for Data Guard support, we can choose to remove 'repeated'.
	DbInfoChannelVec []OracleDBChannelInfo `json:"dbInfoChannelVec,omitempty"`
}

// NewAdditionalOracleDBParams instantiates a new AdditionalOracleDBParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdditionalOracleDBParams() *AdditionalOracleDBParams {
	this := AdditionalOracleDBParams{}
	return &this
}

// NewAdditionalOracleDBParamsWithDefaults instantiates a new AdditionalOracleDBParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdditionalOracleDBParamsWithDefaults() *AdditionalOracleDBParams {
	this := AdditionalOracleDBParams{}
	return &this
}

// GetAppEntityId returns the AppEntityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdditionalOracleDBParams) GetAppEntityId() int64 {
	if o == nil || o.AppEntityId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.AppEntityId.Get()
}

// GetAppEntityIdOk returns a tuple with the AppEntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdditionalOracleDBParams) GetAppEntityIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AppEntityId.Get(), o.AppEntityId.IsSet()
}

// HasAppEntityId returns a boolean if a field has been set.
func (o *AdditionalOracleDBParams) HasAppEntityId() bool {
	if o != nil && o.AppEntityId.IsSet() {
		return true
	}

	return false
}

// SetAppEntityId gets a reference to the given NullableInt64 and assigns it to the AppEntityId field.
func (o *AdditionalOracleDBParams) SetAppEntityId(v int64) {
	o.AppEntityId.Set(&v)
}
// SetAppEntityIdNil sets the value for AppEntityId to be an explicit nil
func (o *AdditionalOracleDBParams) SetAppEntityIdNil() {
	o.AppEntityId.Set(nil)
}

// UnsetAppEntityId ensures that no value is present for AppEntityId, not even an explicit nil
func (o *AdditionalOracleDBParams) UnsetAppEntityId() {
	o.AppEntityId.Unset()
}

// GetDbInfoChannelVec returns the DbInfoChannelVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdditionalOracleDBParams) GetDbInfoChannelVec() []OracleDBChannelInfo {
	if o == nil  {
		var ret []OracleDBChannelInfo
		return ret
	}
	return o.DbInfoChannelVec
}

// GetDbInfoChannelVecOk returns a tuple with the DbInfoChannelVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdditionalOracleDBParams) GetDbInfoChannelVecOk() (*[]OracleDBChannelInfo, bool) {
	if o == nil || o.DbInfoChannelVec == nil {
		return nil, false
	}
	return &o.DbInfoChannelVec, true
}

// HasDbInfoChannelVec returns a boolean if a field has been set.
func (o *AdditionalOracleDBParams) HasDbInfoChannelVec() bool {
	if o != nil && o.DbInfoChannelVec != nil {
		return true
	}

	return false
}

// SetDbInfoChannelVec gets a reference to the given []OracleDBChannelInfo and assigns it to the DbInfoChannelVec field.
func (o *AdditionalOracleDBParams) SetDbInfoChannelVec(v []OracleDBChannelInfo) {
	o.DbInfoChannelVec = v
}

func (o AdditionalOracleDBParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AppEntityId.IsSet() {
		toSerialize["appEntityId"] = o.AppEntityId.Get()
	}
	if o.DbInfoChannelVec != nil {
		toSerialize["dbInfoChannelVec"] = o.DbInfoChannelVec
	}
	return json.Marshal(toSerialize)
}

type NullableAdditionalOracleDBParams struct {
	value *AdditionalOracleDBParams
	isSet bool
}

func (v NullableAdditionalOracleDBParams) Get() *AdditionalOracleDBParams {
	return v.value
}

func (v *NullableAdditionalOracleDBParams) Set(val *AdditionalOracleDBParams) {
	v.value = val
	v.isSet = true
}

func (v NullableAdditionalOracleDBParams) IsSet() bool {
	return v.isSet
}

func (v *NullableAdditionalOracleDBParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdditionalOracleDBParams(val *AdditionalOracleDBParams) *NullableAdditionalOracleDBParams {
	return &NullableAdditionalOracleDBParams{value: val, isSet: true}
}

func (v NullableAdditionalOracleDBParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdditionalOracleDBParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


