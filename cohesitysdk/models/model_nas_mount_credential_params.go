/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// NasMountCredentialParams Specifies the credentials to mount a volume on a NetApp server.
type NasMountCredentialParams struct {
	// Specifies the domain in which this credential is valid.
	Domain NullableString `json:"domain,omitempty"`
	// Specifies the domain controller for the selected domain
	DomainController NullableString `json:"domainController,omitempty"`
	// Specifies if Cohesity can manage the password after registration
	ManagePasswordByCohesity NullableBool `json:"managePasswordByCohesity,omitempty"`
	// Specifies the protocol used by the NAS server. Specifies the protocol used by a NAS server. 'kNfs3' indicates NFS v3 protocol. 'kCifs1' indicates CIFS v1.0 protocol.
	NasProtocol NullableString `json:"nasProtocol,omitempty"`
	// Specifies the type of a NAS Object such as 'kGroup', or 'kHost'. Specifies the kind of NAS mount. 'kGroup' indicates top level node that holds individual NAS hosts. 'kHost' indicates a single NAS path that can be mounted. 'kDfsGroup' indicates a DFS group containing top level directories mapped to different servers. 'kDfsTopDir' indicates a top level directory inside a DFS group, discovered when registering a DFS group.
	NasType NullableString `json:"nasType,omitempty"`
	// Specifies the password for the username to use for mounting the NAS.
	Password NullableString `json:"password,omitempty"`
	// Specifies the flag to disable mount point validation during registration process.
	SkipValidation NullableBool `json:"skipValidation,omitempty"`
	// Specifies a username to use for mounting the NAS.
	Username NullableString `json:"username,omitempty"`
}

// NewNasMountCredentialParams instantiates a new NasMountCredentialParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNasMountCredentialParams() *NasMountCredentialParams {
	this := NasMountCredentialParams{}
	return &this
}

// NewNasMountCredentialParamsWithDefaults instantiates a new NasMountCredentialParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNasMountCredentialParamsWithDefaults() *NasMountCredentialParams {
	this := NasMountCredentialParams{}
	return &this
}

// GetDomain returns the Domain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasMountCredentialParams) GetDomain() string {
	if o == nil || o.Domain.Get() == nil {
		var ret string
		return ret
	}
	return *o.Domain.Get()
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasMountCredentialParams) GetDomainOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Domain.Get(), o.Domain.IsSet()
}

// HasDomain returns a boolean if a field has been set.
func (o *NasMountCredentialParams) HasDomain() bool {
	if o != nil && o.Domain.IsSet() {
		return true
	}

	return false
}

// SetDomain gets a reference to the given NullableString and assigns it to the Domain field.
func (o *NasMountCredentialParams) SetDomain(v string) {
	o.Domain.Set(&v)
}
// SetDomainNil sets the value for Domain to be an explicit nil
func (o *NasMountCredentialParams) SetDomainNil() {
	o.Domain.Set(nil)
}

// UnsetDomain ensures that no value is present for Domain, not even an explicit nil
func (o *NasMountCredentialParams) UnsetDomain() {
	o.Domain.Unset()
}

// GetDomainController returns the DomainController field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasMountCredentialParams) GetDomainController() string {
	if o == nil || o.DomainController.Get() == nil {
		var ret string
		return ret
	}
	return *o.DomainController.Get()
}

// GetDomainControllerOk returns a tuple with the DomainController field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasMountCredentialParams) GetDomainControllerOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DomainController.Get(), o.DomainController.IsSet()
}

// HasDomainController returns a boolean if a field has been set.
func (o *NasMountCredentialParams) HasDomainController() bool {
	if o != nil && o.DomainController.IsSet() {
		return true
	}

	return false
}

// SetDomainController gets a reference to the given NullableString and assigns it to the DomainController field.
func (o *NasMountCredentialParams) SetDomainController(v string) {
	o.DomainController.Set(&v)
}
// SetDomainControllerNil sets the value for DomainController to be an explicit nil
func (o *NasMountCredentialParams) SetDomainControllerNil() {
	o.DomainController.Set(nil)
}

// UnsetDomainController ensures that no value is present for DomainController, not even an explicit nil
func (o *NasMountCredentialParams) UnsetDomainController() {
	o.DomainController.Unset()
}

// GetManagePasswordByCohesity returns the ManagePasswordByCohesity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasMountCredentialParams) GetManagePasswordByCohesity() bool {
	if o == nil || o.ManagePasswordByCohesity.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ManagePasswordByCohesity.Get()
}

// GetManagePasswordByCohesityOk returns a tuple with the ManagePasswordByCohesity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasMountCredentialParams) GetManagePasswordByCohesityOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ManagePasswordByCohesity.Get(), o.ManagePasswordByCohesity.IsSet()
}

// HasManagePasswordByCohesity returns a boolean if a field has been set.
func (o *NasMountCredentialParams) HasManagePasswordByCohesity() bool {
	if o != nil && o.ManagePasswordByCohesity.IsSet() {
		return true
	}

	return false
}

// SetManagePasswordByCohesity gets a reference to the given NullableBool and assigns it to the ManagePasswordByCohesity field.
func (o *NasMountCredentialParams) SetManagePasswordByCohesity(v bool) {
	o.ManagePasswordByCohesity.Set(&v)
}
// SetManagePasswordByCohesityNil sets the value for ManagePasswordByCohesity to be an explicit nil
func (o *NasMountCredentialParams) SetManagePasswordByCohesityNil() {
	o.ManagePasswordByCohesity.Set(nil)
}

// UnsetManagePasswordByCohesity ensures that no value is present for ManagePasswordByCohesity, not even an explicit nil
func (o *NasMountCredentialParams) UnsetManagePasswordByCohesity() {
	o.ManagePasswordByCohesity.Unset()
}

// GetNasProtocol returns the NasProtocol field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasMountCredentialParams) GetNasProtocol() string {
	if o == nil || o.NasProtocol.Get() == nil {
		var ret string
		return ret
	}
	return *o.NasProtocol.Get()
}

// GetNasProtocolOk returns a tuple with the NasProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasMountCredentialParams) GetNasProtocolOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NasProtocol.Get(), o.NasProtocol.IsSet()
}

// HasNasProtocol returns a boolean if a field has been set.
func (o *NasMountCredentialParams) HasNasProtocol() bool {
	if o != nil && o.NasProtocol.IsSet() {
		return true
	}

	return false
}

// SetNasProtocol gets a reference to the given NullableString and assigns it to the NasProtocol field.
func (o *NasMountCredentialParams) SetNasProtocol(v string) {
	o.NasProtocol.Set(&v)
}
// SetNasProtocolNil sets the value for NasProtocol to be an explicit nil
func (o *NasMountCredentialParams) SetNasProtocolNil() {
	o.NasProtocol.Set(nil)
}

// UnsetNasProtocol ensures that no value is present for NasProtocol, not even an explicit nil
func (o *NasMountCredentialParams) UnsetNasProtocol() {
	o.NasProtocol.Unset()
}

// GetNasType returns the NasType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasMountCredentialParams) GetNasType() string {
	if o == nil || o.NasType.Get() == nil {
		var ret string
		return ret
	}
	return *o.NasType.Get()
}

// GetNasTypeOk returns a tuple with the NasType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasMountCredentialParams) GetNasTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NasType.Get(), o.NasType.IsSet()
}

// HasNasType returns a boolean if a field has been set.
func (o *NasMountCredentialParams) HasNasType() bool {
	if o != nil && o.NasType.IsSet() {
		return true
	}

	return false
}

// SetNasType gets a reference to the given NullableString and assigns it to the NasType field.
func (o *NasMountCredentialParams) SetNasType(v string) {
	o.NasType.Set(&v)
}
// SetNasTypeNil sets the value for NasType to be an explicit nil
func (o *NasMountCredentialParams) SetNasTypeNil() {
	o.NasType.Set(nil)
}

// UnsetNasType ensures that no value is present for NasType, not even an explicit nil
func (o *NasMountCredentialParams) UnsetNasType() {
	o.NasType.Unset()
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasMountCredentialParams) GetPassword() string {
	if o == nil || o.Password.Get() == nil {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasMountCredentialParams) GetPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *NasMountCredentialParams) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *NasMountCredentialParams) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *NasMountCredentialParams) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *NasMountCredentialParams) UnsetPassword() {
	o.Password.Unset()
}

// GetSkipValidation returns the SkipValidation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasMountCredentialParams) GetSkipValidation() bool {
	if o == nil || o.SkipValidation.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SkipValidation.Get()
}

// GetSkipValidationOk returns a tuple with the SkipValidation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasMountCredentialParams) GetSkipValidationOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SkipValidation.Get(), o.SkipValidation.IsSet()
}

// HasSkipValidation returns a boolean if a field has been set.
func (o *NasMountCredentialParams) HasSkipValidation() bool {
	if o != nil && o.SkipValidation.IsSet() {
		return true
	}

	return false
}

// SetSkipValidation gets a reference to the given NullableBool and assigns it to the SkipValidation field.
func (o *NasMountCredentialParams) SetSkipValidation(v bool) {
	o.SkipValidation.Set(&v)
}
// SetSkipValidationNil sets the value for SkipValidation to be an explicit nil
func (o *NasMountCredentialParams) SetSkipValidationNil() {
	o.SkipValidation.Set(nil)
}

// UnsetSkipValidation ensures that no value is present for SkipValidation, not even an explicit nil
func (o *NasMountCredentialParams) UnsetSkipValidation() {
	o.SkipValidation.Unset()
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasMountCredentialParams) GetUsername() string {
	if o == nil || o.Username.Get() == nil {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasMountCredentialParams) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *NasMountCredentialParams) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *NasMountCredentialParams) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *NasMountCredentialParams) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *NasMountCredentialParams) UnsetUsername() {
	o.Username.Unset()
}

func (o NasMountCredentialParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Domain.IsSet() {
		toSerialize["domain"] = o.Domain.Get()
	}
	if o.DomainController.IsSet() {
		toSerialize["domainController"] = o.DomainController.Get()
	}
	if o.ManagePasswordByCohesity.IsSet() {
		toSerialize["managePasswordByCohesity"] = o.ManagePasswordByCohesity.Get()
	}
	if o.NasProtocol.IsSet() {
		toSerialize["nasProtocol"] = o.NasProtocol.Get()
	}
	if o.NasType.IsSet() {
		toSerialize["nasType"] = o.NasType.Get()
	}
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	if o.SkipValidation.IsSet() {
		toSerialize["skipValidation"] = o.SkipValidation.Get()
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableNasMountCredentialParams struct {
	value *NasMountCredentialParams
	isSet bool
}

func (v NullableNasMountCredentialParams) Get() *NasMountCredentialParams {
	return v.value
}

func (v *NullableNasMountCredentialParams) Set(val *NasMountCredentialParams) {
	v.value = val
	v.isSet = true
}

func (v NullableNasMountCredentialParams) IsSet() bool {
	return v.isSet
}

func (v *NullableNasMountCredentialParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNasMountCredentialParams(val *NasMountCredentialParams) *NullableNasMountCredentialParams {
	return &NullableNasMountCredentialParams{value: val, isSet: true}
}

func (v NullableNasMountCredentialParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNasMountCredentialParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


