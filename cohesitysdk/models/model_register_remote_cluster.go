/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// RegisterRemoteCluster Specifies the settings required for registering a remote Cluster on this local Cluster.
type RegisterRemoteCluster struct {
	// Specifies whether any endpoint (such as a Node) on the remote Cluster is reachable from this local Cluster. If true, a service running on the local Cluster can communicate directly with any of its peers running on the remote Cluster, without using a proxy.
	AllEndpointsReachable NullableBool `json:"allEndpointsReachable,omitempty"`
	// Specifies whether the remote cluster needs to be kept in sync. This will be set to true by default.
	AutoRegisterTarget NullableBool `json:"autoRegisterTarget,omitempty"`
	// Specifies whether the remote registration has happened automatically (due to registration on the other site). Can't think of other states (other than manually & automatically) so this isn't an enum. For a manual registration, this field will not be set.
	AutoRegistration NullableBool `json:"autoRegistration,omitempty"`
	BandwidthLimit *BandwidthLimit `json:"bandwidthLimit,omitempty"`
	// Specifies the unique id of the remote Cluster.
	ClusterId NullableInt64 `json:"clusterId,omitempty"`
	// Specifies the unique incarnation id of the remote Cluster. This id is determined dynamically by contacting the remote Cluster.
	ClusterIncarnationId NullableInt64 `json:"clusterIncarnationId,omitempty"`
	// Specifies whether to compress the outbound data when transferring the replication data over the network to the remote Cluster.
	CompressionEnabled NullableBool `json:"compressionEnabled,omitempty"`
	// Specifies any additional information if needed.
	Description NullableString `json:"description,omitempty"`
	// Specifies the encryption key used for encrypting the replication data from a local Cluster to a remote Cluster. If a key is not specified, replication traffic encryption is disabled. When Snapshots are replicated from a local Cluster to a remote Cluster, the encryption key specified on the local Cluster must be the same as the key specified on the remote Cluster.
	EncryptionKey NullableString `json:"encryptionKey,omitempty"`
	// Specifies the name of the remote cluster. This field is determined dynamically by contacting the remote cluster.
	Name NullableString `json:"name,omitempty"`
	// Specifies the name of the network interfaces to use for communicating with the remote Cluster.
	NetworkInterface NullableString `json:"networkInterface,omitempty"`
	// Specifies the password for Cohesity user to use when connecting to the remote Cluster.
	Password NullableString `json:"password,omitempty"`
	// Whether the remote cluster will be used for remote access for SPOG.
	PurposeRemoteAccess NullableBool `json:"purposeRemoteAccess,omitempty"`
	// Whether the remote cluster will be used for replication.
	PurposeReplication NullableBool `json:"purposeReplication,omitempty"`
	RemoteAccessCredentials *AccessTokenCredential `json:"remoteAccessCredentials,omitempty"`
	// Array of Remote Node IP Addresses.  Specifies the IP addresses of the Nodes on the remote Cluster to connect with. These IP addresses can also be VIPS. Specifying hostnames is not supported.
	RemoteIps []string `json:"remoteIps,omitempty"`
	// Array of Ports.  Specifies the ports to use when connecting to the Nodes of the remote Cluster.
	RemoteIrisPorts []int64 `json:"remoteIrisPorts,omitempty"`
	// Specifies the Cohesity user name used to connect to the remote Cluster.
	UserName NullableString `json:"userName,omitempty"`
	// Whether to only validate the credentials without saving the information.
	ValidateOnly NullableBool `json:"validateOnly,omitempty"`
	// Array of Storage Domain (View Box) Pairs.  Specifies pairings between Storage Domains (View Boxes) on the local Cluster with Storage Domains (View Boxes) on a remote Cluster that are used in replication.
	ViewBoxPairInfo []ViewBoxPairInfo `json:"viewBoxPairInfo,omitempty"`
}

// NewRegisterRemoteCluster instantiates a new RegisterRemoteCluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterRemoteCluster() *RegisterRemoteCluster {
	this := RegisterRemoteCluster{}
	return &this
}

// NewRegisterRemoteClusterWithDefaults instantiates a new RegisterRemoteCluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterRemoteClusterWithDefaults() *RegisterRemoteCluster {
	this := RegisterRemoteCluster{}
	return &this
}

// GetAllEndpointsReachable returns the AllEndpointsReachable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterRemoteCluster) GetAllEndpointsReachable() bool {
	if o == nil || o.AllEndpointsReachable.Get() == nil {
		var ret bool
		return ret
	}
	return *o.AllEndpointsReachable.Get()
}

// GetAllEndpointsReachableOk returns a tuple with the AllEndpointsReachable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterRemoteCluster) GetAllEndpointsReachableOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AllEndpointsReachable.Get(), o.AllEndpointsReachable.IsSet()
}

// HasAllEndpointsReachable returns a boolean if a field has been set.
func (o *RegisterRemoteCluster) HasAllEndpointsReachable() bool {
	if o != nil && o.AllEndpointsReachable.IsSet() {
		return true
	}

	return false
}

// SetAllEndpointsReachable gets a reference to the given NullableBool and assigns it to the AllEndpointsReachable field.
func (o *RegisterRemoteCluster) SetAllEndpointsReachable(v bool) {
	o.AllEndpointsReachable.Set(&v)
}
// SetAllEndpointsReachableNil sets the value for AllEndpointsReachable to be an explicit nil
func (o *RegisterRemoteCluster) SetAllEndpointsReachableNil() {
	o.AllEndpointsReachable.Set(nil)
}

// UnsetAllEndpointsReachable ensures that no value is present for AllEndpointsReachable, not even an explicit nil
func (o *RegisterRemoteCluster) UnsetAllEndpointsReachable() {
	o.AllEndpointsReachable.Unset()
}

// GetAutoRegisterTarget returns the AutoRegisterTarget field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterRemoteCluster) GetAutoRegisterTarget() bool {
	if o == nil || o.AutoRegisterTarget.Get() == nil {
		var ret bool
		return ret
	}
	return *o.AutoRegisterTarget.Get()
}

// GetAutoRegisterTargetOk returns a tuple with the AutoRegisterTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterRemoteCluster) GetAutoRegisterTargetOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AutoRegisterTarget.Get(), o.AutoRegisterTarget.IsSet()
}

// HasAutoRegisterTarget returns a boolean if a field has been set.
func (o *RegisterRemoteCluster) HasAutoRegisterTarget() bool {
	if o != nil && o.AutoRegisterTarget.IsSet() {
		return true
	}

	return false
}

// SetAutoRegisterTarget gets a reference to the given NullableBool and assigns it to the AutoRegisterTarget field.
func (o *RegisterRemoteCluster) SetAutoRegisterTarget(v bool) {
	o.AutoRegisterTarget.Set(&v)
}
// SetAutoRegisterTargetNil sets the value for AutoRegisterTarget to be an explicit nil
func (o *RegisterRemoteCluster) SetAutoRegisterTargetNil() {
	o.AutoRegisterTarget.Set(nil)
}

// UnsetAutoRegisterTarget ensures that no value is present for AutoRegisterTarget, not even an explicit nil
func (o *RegisterRemoteCluster) UnsetAutoRegisterTarget() {
	o.AutoRegisterTarget.Unset()
}

// GetAutoRegistration returns the AutoRegistration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterRemoteCluster) GetAutoRegistration() bool {
	if o == nil || o.AutoRegistration.Get() == nil {
		var ret bool
		return ret
	}
	return *o.AutoRegistration.Get()
}

// GetAutoRegistrationOk returns a tuple with the AutoRegistration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterRemoteCluster) GetAutoRegistrationOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AutoRegistration.Get(), o.AutoRegistration.IsSet()
}

// HasAutoRegistration returns a boolean if a field has been set.
func (o *RegisterRemoteCluster) HasAutoRegistration() bool {
	if o != nil && o.AutoRegistration.IsSet() {
		return true
	}

	return false
}

// SetAutoRegistration gets a reference to the given NullableBool and assigns it to the AutoRegistration field.
func (o *RegisterRemoteCluster) SetAutoRegistration(v bool) {
	o.AutoRegistration.Set(&v)
}
// SetAutoRegistrationNil sets the value for AutoRegistration to be an explicit nil
func (o *RegisterRemoteCluster) SetAutoRegistrationNil() {
	o.AutoRegistration.Set(nil)
}

// UnsetAutoRegistration ensures that no value is present for AutoRegistration, not even an explicit nil
func (o *RegisterRemoteCluster) UnsetAutoRegistration() {
	o.AutoRegistration.Unset()
}

// GetBandwidthLimit returns the BandwidthLimit field value if set, zero value otherwise.
func (o *RegisterRemoteCluster) GetBandwidthLimit() BandwidthLimit {
	if o == nil || o.BandwidthLimit == nil {
		var ret BandwidthLimit
		return ret
	}
	return *o.BandwidthLimit
}

// GetBandwidthLimitOk returns a tuple with the BandwidthLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterRemoteCluster) GetBandwidthLimitOk() (*BandwidthLimit, bool) {
	if o == nil || o.BandwidthLimit == nil {
		return nil, false
	}
	return o.BandwidthLimit, true
}

// HasBandwidthLimit returns a boolean if a field has been set.
func (o *RegisterRemoteCluster) HasBandwidthLimit() bool {
	if o != nil && o.BandwidthLimit != nil {
		return true
	}

	return false
}

// SetBandwidthLimit gets a reference to the given BandwidthLimit and assigns it to the BandwidthLimit field.
func (o *RegisterRemoteCluster) SetBandwidthLimit(v BandwidthLimit) {
	o.BandwidthLimit = &v
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterRemoteCluster) GetClusterId() int64 {
	if o == nil || o.ClusterId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ClusterId.Get()
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterRemoteCluster) GetClusterIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterId.Get(), o.ClusterId.IsSet()
}

// HasClusterId returns a boolean if a field has been set.
func (o *RegisterRemoteCluster) HasClusterId() bool {
	if o != nil && o.ClusterId.IsSet() {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given NullableInt64 and assigns it to the ClusterId field.
func (o *RegisterRemoteCluster) SetClusterId(v int64) {
	o.ClusterId.Set(&v)
}
// SetClusterIdNil sets the value for ClusterId to be an explicit nil
func (o *RegisterRemoteCluster) SetClusterIdNil() {
	o.ClusterId.Set(nil)
}

// UnsetClusterId ensures that no value is present for ClusterId, not even an explicit nil
func (o *RegisterRemoteCluster) UnsetClusterId() {
	o.ClusterId.Unset()
}

// GetClusterIncarnationId returns the ClusterIncarnationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterRemoteCluster) GetClusterIncarnationId() int64 {
	if o == nil || o.ClusterIncarnationId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ClusterIncarnationId.Get()
}

// GetClusterIncarnationIdOk returns a tuple with the ClusterIncarnationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterRemoteCluster) GetClusterIncarnationIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterIncarnationId.Get(), o.ClusterIncarnationId.IsSet()
}

// HasClusterIncarnationId returns a boolean if a field has been set.
func (o *RegisterRemoteCluster) HasClusterIncarnationId() bool {
	if o != nil && o.ClusterIncarnationId.IsSet() {
		return true
	}

	return false
}

// SetClusterIncarnationId gets a reference to the given NullableInt64 and assigns it to the ClusterIncarnationId field.
func (o *RegisterRemoteCluster) SetClusterIncarnationId(v int64) {
	o.ClusterIncarnationId.Set(&v)
}
// SetClusterIncarnationIdNil sets the value for ClusterIncarnationId to be an explicit nil
func (o *RegisterRemoteCluster) SetClusterIncarnationIdNil() {
	o.ClusterIncarnationId.Set(nil)
}

// UnsetClusterIncarnationId ensures that no value is present for ClusterIncarnationId, not even an explicit nil
func (o *RegisterRemoteCluster) UnsetClusterIncarnationId() {
	o.ClusterIncarnationId.Unset()
}

// GetCompressionEnabled returns the CompressionEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterRemoteCluster) GetCompressionEnabled() bool {
	if o == nil || o.CompressionEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.CompressionEnabled.Get()
}

// GetCompressionEnabledOk returns a tuple with the CompressionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterRemoteCluster) GetCompressionEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CompressionEnabled.Get(), o.CompressionEnabled.IsSet()
}

// HasCompressionEnabled returns a boolean if a field has been set.
func (o *RegisterRemoteCluster) HasCompressionEnabled() bool {
	if o != nil && o.CompressionEnabled.IsSet() {
		return true
	}

	return false
}

// SetCompressionEnabled gets a reference to the given NullableBool and assigns it to the CompressionEnabled field.
func (o *RegisterRemoteCluster) SetCompressionEnabled(v bool) {
	o.CompressionEnabled.Set(&v)
}
// SetCompressionEnabledNil sets the value for CompressionEnabled to be an explicit nil
func (o *RegisterRemoteCluster) SetCompressionEnabledNil() {
	o.CompressionEnabled.Set(nil)
}

// UnsetCompressionEnabled ensures that no value is present for CompressionEnabled, not even an explicit nil
func (o *RegisterRemoteCluster) UnsetCompressionEnabled() {
	o.CompressionEnabled.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterRemoteCluster) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterRemoteCluster) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *RegisterRemoteCluster) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *RegisterRemoteCluster) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *RegisterRemoteCluster) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *RegisterRemoteCluster) UnsetDescription() {
	o.Description.Unset()
}

// GetEncryptionKey returns the EncryptionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterRemoteCluster) GetEncryptionKey() string {
	if o == nil || o.EncryptionKey.Get() == nil {
		var ret string
		return ret
	}
	return *o.EncryptionKey.Get()
}

// GetEncryptionKeyOk returns a tuple with the EncryptionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterRemoteCluster) GetEncryptionKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EncryptionKey.Get(), o.EncryptionKey.IsSet()
}

// HasEncryptionKey returns a boolean if a field has been set.
func (o *RegisterRemoteCluster) HasEncryptionKey() bool {
	if o != nil && o.EncryptionKey.IsSet() {
		return true
	}

	return false
}

// SetEncryptionKey gets a reference to the given NullableString and assigns it to the EncryptionKey field.
func (o *RegisterRemoteCluster) SetEncryptionKey(v string) {
	o.EncryptionKey.Set(&v)
}
// SetEncryptionKeyNil sets the value for EncryptionKey to be an explicit nil
func (o *RegisterRemoteCluster) SetEncryptionKeyNil() {
	o.EncryptionKey.Set(nil)
}

// UnsetEncryptionKey ensures that no value is present for EncryptionKey, not even an explicit nil
func (o *RegisterRemoteCluster) UnsetEncryptionKey() {
	o.EncryptionKey.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterRemoteCluster) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterRemoteCluster) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *RegisterRemoteCluster) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *RegisterRemoteCluster) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *RegisterRemoteCluster) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *RegisterRemoteCluster) UnsetName() {
	o.Name.Unset()
}

// GetNetworkInterface returns the NetworkInterface field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterRemoteCluster) GetNetworkInterface() string {
	if o == nil || o.NetworkInterface.Get() == nil {
		var ret string
		return ret
	}
	return *o.NetworkInterface.Get()
}

// GetNetworkInterfaceOk returns a tuple with the NetworkInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterRemoteCluster) GetNetworkInterfaceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NetworkInterface.Get(), o.NetworkInterface.IsSet()
}

// HasNetworkInterface returns a boolean if a field has been set.
func (o *RegisterRemoteCluster) HasNetworkInterface() bool {
	if o != nil && o.NetworkInterface.IsSet() {
		return true
	}

	return false
}

// SetNetworkInterface gets a reference to the given NullableString and assigns it to the NetworkInterface field.
func (o *RegisterRemoteCluster) SetNetworkInterface(v string) {
	o.NetworkInterface.Set(&v)
}
// SetNetworkInterfaceNil sets the value for NetworkInterface to be an explicit nil
func (o *RegisterRemoteCluster) SetNetworkInterfaceNil() {
	o.NetworkInterface.Set(nil)
}

// UnsetNetworkInterface ensures that no value is present for NetworkInterface, not even an explicit nil
func (o *RegisterRemoteCluster) UnsetNetworkInterface() {
	o.NetworkInterface.Unset()
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterRemoteCluster) GetPassword() string {
	if o == nil || o.Password.Get() == nil {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterRemoteCluster) GetPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *RegisterRemoteCluster) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *RegisterRemoteCluster) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *RegisterRemoteCluster) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *RegisterRemoteCluster) UnsetPassword() {
	o.Password.Unset()
}

// GetPurposeRemoteAccess returns the PurposeRemoteAccess field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterRemoteCluster) GetPurposeRemoteAccess() bool {
	if o == nil || o.PurposeRemoteAccess.Get() == nil {
		var ret bool
		return ret
	}
	return *o.PurposeRemoteAccess.Get()
}

// GetPurposeRemoteAccessOk returns a tuple with the PurposeRemoteAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterRemoteCluster) GetPurposeRemoteAccessOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PurposeRemoteAccess.Get(), o.PurposeRemoteAccess.IsSet()
}

// HasPurposeRemoteAccess returns a boolean if a field has been set.
func (o *RegisterRemoteCluster) HasPurposeRemoteAccess() bool {
	if o != nil && o.PurposeRemoteAccess.IsSet() {
		return true
	}

	return false
}

// SetPurposeRemoteAccess gets a reference to the given NullableBool and assigns it to the PurposeRemoteAccess field.
func (o *RegisterRemoteCluster) SetPurposeRemoteAccess(v bool) {
	o.PurposeRemoteAccess.Set(&v)
}
// SetPurposeRemoteAccessNil sets the value for PurposeRemoteAccess to be an explicit nil
func (o *RegisterRemoteCluster) SetPurposeRemoteAccessNil() {
	o.PurposeRemoteAccess.Set(nil)
}

// UnsetPurposeRemoteAccess ensures that no value is present for PurposeRemoteAccess, not even an explicit nil
func (o *RegisterRemoteCluster) UnsetPurposeRemoteAccess() {
	o.PurposeRemoteAccess.Unset()
}

// GetPurposeReplication returns the PurposeReplication field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterRemoteCluster) GetPurposeReplication() bool {
	if o == nil || o.PurposeReplication.Get() == nil {
		var ret bool
		return ret
	}
	return *o.PurposeReplication.Get()
}

// GetPurposeReplicationOk returns a tuple with the PurposeReplication field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterRemoteCluster) GetPurposeReplicationOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PurposeReplication.Get(), o.PurposeReplication.IsSet()
}

// HasPurposeReplication returns a boolean if a field has been set.
func (o *RegisterRemoteCluster) HasPurposeReplication() bool {
	if o != nil && o.PurposeReplication.IsSet() {
		return true
	}

	return false
}

// SetPurposeReplication gets a reference to the given NullableBool and assigns it to the PurposeReplication field.
func (o *RegisterRemoteCluster) SetPurposeReplication(v bool) {
	o.PurposeReplication.Set(&v)
}
// SetPurposeReplicationNil sets the value for PurposeReplication to be an explicit nil
func (o *RegisterRemoteCluster) SetPurposeReplicationNil() {
	o.PurposeReplication.Set(nil)
}

// UnsetPurposeReplication ensures that no value is present for PurposeReplication, not even an explicit nil
func (o *RegisterRemoteCluster) UnsetPurposeReplication() {
	o.PurposeReplication.Unset()
}

// GetRemoteAccessCredentials returns the RemoteAccessCredentials field value if set, zero value otherwise.
func (o *RegisterRemoteCluster) GetRemoteAccessCredentials() AccessTokenCredential {
	if o == nil || o.RemoteAccessCredentials == nil {
		var ret AccessTokenCredential
		return ret
	}
	return *o.RemoteAccessCredentials
}

// GetRemoteAccessCredentialsOk returns a tuple with the RemoteAccessCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterRemoteCluster) GetRemoteAccessCredentialsOk() (*AccessTokenCredential, bool) {
	if o == nil || o.RemoteAccessCredentials == nil {
		return nil, false
	}
	return o.RemoteAccessCredentials, true
}

// HasRemoteAccessCredentials returns a boolean if a field has been set.
func (o *RegisterRemoteCluster) HasRemoteAccessCredentials() bool {
	if o != nil && o.RemoteAccessCredentials != nil {
		return true
	}

	return false
}

// SetRemoteAccessCredentials gets a reference to the given AccessTokenCredential and assigns it to the RemoteAccessCredentials field.
func (o *RegisterRemoteCluster) SetRemoteAccessCredentials(v AccessTokenCredential) {
	o.RemoteAccessCredentials = &v
}

// GetRemoteIps returns the RemoteIps field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterRemoteCluster) GetRemoteIps() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.RemoteIps
}

// GetRemoteIpsOk returns a tuple with the RemoteIps field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterRemoteCluster) GetRemoteIpsOk() (*[]string, bool) {
	if o == nil || o.RemoteIps == nil {
		return nil, false
	}
	return &o.RemoteIps, true
}

// HasRemoteIps returns a boolean if a field has been set.
func (o *RegisterRemoteCluster) HasRemoteIps() bool {
	if o != nil && o.RemoteIps != nil {
		return true
	}

	return false
}

// SetRemoteIps gets a reference to the given []string and assigns it to the RemoteIps field.
func (o *RegisterRemoteCluster) SetRemoteIps(v []string) {
	o.RemoteIps = v
}

// GetRemoteIrisPorts returns the RemoteIrisPorts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterRemoteCluster) GetRemoteIrisPorts() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.RemoteIrisPorts
}

// GetRemoteIrisPortsOk returns a tuple with the RemoteIrisPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterRemoteCluster) GetRemoteIrisPortsOk() (*[]int64, bool) {
	if o == nil || o.RemoteIrisPorts == nil {
		return nil, false
	}
	return &o.RemoteIrisPorts, true
}

// HasRemoteIrisPorts returns a boolean if a field has been set.
func (o *RegisterRemoteCluster) HasRemoteIrisPorts() bool {
	if o != nil && o.RemoteIrisPorts != nil {
		return true
	}

	return false
}

// SetRemoteIrisPorts gets a reference to the given []int64 and assigns it to the RemoteIrisPorts field.
func (o *RegisterRemoteCluster) SetRemoteIrisPorts(v []int64) {
	o.RemoteIrisPorts = v
}

// GetUserName returns the UserName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterRemoteCluster) GetUserName() string {
	if o == nil || o.UserName.Get() == nil {
		var ret string
		return ret
	}
	return *o.UserName.Get()
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterRemoteCluster) GetUserNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UserName.Get(), o.UserName.IsSet()
}

// HasUserName returns a boolean if a field has been set.
func (o *RegisterRemoteCluster) HasUserName() bool {
	if o != nil && o.UserName.IsSet() {
		return true
	}

	return false
}

// SetUserName gets a reference to the given NullableString and assigns it to the UserName field.
func (o *RegisterRemoteCluster) SetUserName(v string) {
	o.UserName.Set(&v)
}
// SetUserNameNil sets the value for UserName to be an explicit nil
func (o *RegisterRemoteCluster) SetUserNameNil() {
	o.UserName.Set(nil)
}

// UnsetUserName ensures that no value is present for UserName, not even an explicit nil
func (o *RegisterRemoteCluster) UnsetUserName() {
	o.UserName.Unset()
}

// GetValidateOnly returns the ValidateOnly field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterRemoteCluster) GetValidateOnly() bool {
	if o == nil || o.ValidateOnly.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ValidateOnly.Get()
}

// GetValidateOnlyOk returns a tuple with the ValidateOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterRemoteCluster) GetValidateOnlyOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ValidateOnly.Get(), o.ValidateOnly.IsSet()
}

// HasValidateOnly returns a boolean if a field has been set.
func (o *RegisterRemoteCluster) HasValidateOnly() bool {
	if o != nil && o.ValidateOnly.IsSet() {
		return true
	}

	return false
}

// SetValidateOnly gets a reference to the given NullableBool and assigns it to the ValidateOnly field.
func (o *RegisterRemoteCluster) SetValidateOnly(v bool) {
	o.ValidateOnly.Set(&v)
}
// SetValidateOnlyNil sets the value for ValidateOnly to be an explicit nil
func (o *RegisterRemoteCluster) SetValidateOnlyNil() {
	o.ValidateOnly.Set(nil)
}

// UnsetValidateOnly ensures that no value is present for ValidateOnly, not even an explicit nil
func (o *RegisterRemoteCluster) UnsetValidateOnly() {
	o.ValidateOnly.Unset()
}

// GetViewBoxPairInfo returns the ViewBoxPairInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterRemoteCluster) GetViewBoxPairInfo() []ViewBoxPairInfo {
	if o == nil  {
		var ret []ViewBoxPairInfo
		return ret
	}
	return o.ViewBoxPairInfo
}

// GetViewBoxPairInfoOk returns a tuple with the ViewBoxPairInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterRemoteCluster) GetViewBoxPairInfoOk() (*[]ViewBoxPairInfo, bool) {
	if o == nil || o.ViewBoxPairInfo == nil {
		return nil, false
	}
	return &o.ViewBoxPairInfo, true
}

// HasViewBoxPairInfo returns a boolean if a field has been set.
func (o *RegisterRemoteCluster) HasViewBoxPairInfo() bool {
	if o != nil && o.ViewBoxPairInfo != nil {
		return true
	}

	return false
}

// SetViewBoxPairInfo gets a reference to the given []ViewBoxPairInfo and assigns it to the ViewBoxPairInfo field.
func (o *RegisterRemoteCluster) SetViewBoxPairInfo(v []ViewBoxPairInfo) {
	o.ViewBoxPairInfo = v
}

func (o RegisterRemoteCluster) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllEndpointsReachable.IsSet() {
		toSerialize["allEndpointsReachable"] = o.AllEndpointsReachable.Get()
	}
	if o.AutoRegisterTarget.IsSet() {
		toSerialize["autoRegisterTarget"] = o.AutoRegisterTarget.Get()
	}
	if o.AutoRegistration.IsSet() {
		toSerialize["autoRegistration"] = o.AutoRegistration.Get()
	}
	if o.BandwidthLimit != nil {
		toSerialize["bandwidthLimit"] = o.BandwidthLimit
	}
	if o.ClusterId.IsSet() {
		toSerialize["clusterId"] = o.ClusterId.Get()
	}
	if o.ClusterIncarnationId.IsSet() {
		toSerialize["clusterIncarnationId"] = o.ClusterIncarnationId.Get()
	}
	if o.CompressionEnabled.IsSet() {
		toSerialize["compressionEnabled"] = o.CompressionEnabled.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.EncryptionKey.IsSet() {
		toSerialize["encryptionKey"] = o.EncryptionKey.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.NetworkInterface.IsSet() {
		toSerialize["networkInterface"] = o.NetworkInterface.Get()
	}
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	if o.PurposeRemoteAccess.IsSet() {
		toSerialize["purposeRemoteAccess"] = o.PurposeRemoteAccess.Get()
	}
	if o.PurposeReplication.IsSet() {
		toSerialize["purposeReplication"] = o.PurposeReplication.Get()
	}
	if o.RemoteAccessCredentials != nil {
		toSerialize["remoteAccessCredentials"] = o.RemoteAccessCredentials
	}
	if o.RemoteIps != nil {
		toSerialize["remoteIps"] = o.RemoteIps
	}
	if o.RemoteIrisPorts != nil {
		toSerialize["remoteIrisPorts"] = o.RemoteIrisPorts
	}
	if o.UserName.IsSet() {
		toSerialize["userName"] = o.UserName.Get()
	}
	if o.ValidateOnly.IsSet() {
		toSerialize["validateOnly"] = o.ValidateOnly.Get()
	}
	if o.ViewBoxPairInfo != nil {
		toSerialize["viewBoxPairInfo"] = o.ViewBoxPairInfo
	}
	return json.Marshal(toSerialize)
}

type NullableRegisterRemoteCluster struct {
	value *RegisterRemoteCluster
	isSet bool
}

func (v NullableRegisterRemoteCluster) Get() *RegisterRemoteCluster {
	return v.value
}

func (v *NullableRegisterRemoteCluster) Set(val *RegisterRemoteCluster) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterRemoteCluster) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterRemoteCluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterRemoteCluster(val *RegisterRemoteCluster) *NullableRegisterRemoteCluster {
	return &NullableRegisterRemoteCluster{value: val, isSet: true}
}

func (v NullableRegisterRemoteCluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterRemoteCluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


