/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// EntitySchemaProtoAttributesDescriptor Specifies a list of attributes about an entity.
type EntitySchemaProtoAttributesDescriptor struct {
	// Array of Attributes.  List of attributes about an entity.
	AttributeVec []EntitySchemaProtoKeyValueDescriptor `json:"attributeVec,omitempty"`
	// Specifies the attribute to use as a unique identifier for the entity. This value is returned in entityId when the GET public/statistics/entities operation is run.
	KeyAttributeNameIndex NullableInt32 `json:"keyAttributeNameIndex,omitempty"`
}

// NewEntitySchemaProtoAttributesDescriptor instantiates a new EntitySchemaProtoAttributesDescriptor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntitySchemaProtoAttributesDescriptor() *EntitySchemaProtoAttributesDescriptor {
	this := EntitySchemaProtoAttributesDescriptor{}
	return &this
}

// NewEntitySchemaProtoAttributesDescriptorWithDefaults instantiates a new EntitySchemaProtoAttributesDescriptor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntitySchemaProtoAttributesDescriptorWithDefaults() *EntitySchemaProtoAttributesDescriptor {
	this := EntitySchemaProtoAttributesDescriptor{}
	return &this
}

// GetAttributeVec returns the AttributeVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EntitySchemaProtoAttributesDescriptor) GetAttributeVec() []EntitySchemaProtoKeyValueDescriptor {
	if o == nil  {
		var ret []EntitySchemaProtoKeyValueDescriptor
		return ret
	}
	return o.AttributeVec
}

// GetAttributeVecOk returns a tuple with the AttributeVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EntitySchemaProtoAttributesDescriptor) GetAttributeVecOk() (*[]EntitySchemaProtoKeyValueDescriptor, bool) {
	if o == nil || o.AttributeVec == nil {
		return nil, false
	}
	return &o.AttributeVec, true
}

// HasAttributeVec returns a boolean if a field has been set.
func (o *EntitySchemaProtoAttributesDescriptor) HasAttributeVec() bool {
	if o != nil && o.AttributeVec != nil {
		return true
	}

	return false
}

// SetAttributeVec gets a reference to the given []EntitySchemaProtoKeyValueDescriptor and assigns it to the AttributeVec field.
func (o *EntitySchemaProtoAttributesDescriptor) SetAttributeVec(v []EntitySchemaProtoKeyValueDescriptor) {
	o.AttributeVec = v
}

// GetKeyAttributeNameIndex returns the KeyAttributeNameIndex field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EntitySchemaProtoAttributesDescriptor) GetKeyAttributeNameIndex() int32 {
	if o == nil || o.KeyAttributeNameIndex.Get() == nil {
		var ret int32
		return ret
	}
	return *o.KeyAttributeNameIndex.Get()
}

// GetKeyAttributeNameIndexOk returns a tuple with the KeyAttributeNameIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EntitySchemaProtoAttributesDescriptor) GetKeyAttributeNameIndexOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.KeyAttributeNameIndex.Get(), o.KeyAttributeNameIndex.IsSet()
}

// HasKeyAttributeNameIndex returns a boolean if a field has been set.
func (o *EntitySchemaProtoAttributesDescriptor) HasKeyAttributeNameIndex() bool {
	if o != nil && o.KeyAttributeNameIndex.IsSet() {
		return true
	}

	return false
}

// SetKeyAttributeNameIndex gets a reference to the given NullableInt32 and assigns it to the KeyAttributeNameIndex field.
func (o *EntitySchemaProtoAttributesDescriptor) SetKeyAttributeNameIndex(v int32) {
	o.KeyAttributeNameIndex.Set(&v)
}
// SetKeyAttributeNameIndexNil sets the value for KeyAttributeNameIndex to be an explicit nil
func (o *EntitySchemaProtoAttributesDescriptor) SetKeyAttributeNameIndexNil() {
	o.KeyAttributeNameIndex.Set(nil)
}

// UnsetKeyAttributeNameIndex ensures that no value is present for KeyAttributeNameIndex, not even an explicit nil
func (o *EntitySchemaProtoAttributesDescriptor) UnsetKeyAttributeNameIndex() {
	o.KeyAttributeNameIndex.Unset()
}

func (o EntitySchemaProtoAttributesDescriptor) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AttributeVec != nil {
		toSerialize["attributeVec"] = o.AttributeVec
	}
	if o.KeyAttributeNameIndex.IsSet() {
		toSerialize["keyAttributeNameIndex"] = o.KeyAttributeNameIndex.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableEntitySchemaProtoAttributesDescriptor struct {
	value *EntitySchemaProtoAttributesDescriptor
	isSet bool
}

func (v NullableEntitySchemaProtoAttributesDescriptor) Get() *EntitySchemaProtoAttributesDescriptor {
	return v.value
}

func (v *NullableEntitySchemaProtoAttributesDescriptor) Set(val *EntitySchemaProtoAttributesDescriptor) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitySchemaProtoAttributesDescriptor) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitySchemaProtoAttributesDescriptor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitySchemaProtoAttributesDescriptor(val *EntitySchemaProtoAttributesDescriptor) *NullableEntitySchemaProtoAttributesDescriptor {
	return &NullableEntitySchemaProtoAttributesDescriptor{value: val, isSet: true}
}

func (v NullableEntitySchemaProtoAttributesDescriptor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitySchemaProtoAttributesDescriptor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


