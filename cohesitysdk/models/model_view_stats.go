/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ViewStats Provides statistics about the View.
type ViewStats struct {
	DataUsageStats *DataUsageStats `json:"dataUsageStats,omitempty"`
	// Specifies the id of the View.
	Id NullableInt64 `json:"id,omitempty"`
}

// NewViewStats instantiates a new ViewStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewStats() *ViewStats {
	this := ViewStats{}
	return &this
}

// NewViewStatsWithDefaults instantiates a new ViewStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewStatsWithDefaults() *ViewStats {
	this := ViewStats{}
	return &this
}

// GetDataUsageStats returns the DataUsageStats field value if set, zero value otherwise.
func (o *ViewStats) GetDataUsageStats() DataUsageStats {
	if o == nil || o.DataUsageStats == nil {
		var ret DataUsageStats
		return ret
	}
	return *o.DataUsageStats
}

// GetDataUsageStatsOk returns a tuple with the DataUsageStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewStats) GetDataUsageStatsOk() (*DataUsageStats, bool) {
	if o == nil || o.DataUsageStats == nil {
		return nil, false
	}
	return o.DataUsageStats, true
}

// HasDataUsageStats returns a boolean if a field has been set.
func (o *ViewStats) HasDataUsageStats() bool {
	if o != nil && o.DataUsageStats != nil {
		return true
	}

	return false
}

// SetDataUsageStats gets a reference to the given DataUsageStats and assigns it to the DataUsageStats field.
func (o *ViewStats) SetDataUsageStats(v DataUsageStats) {
	o.DataUsageStats = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStats) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStats) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *ViewStats) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *ViewStats) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *ViewStats) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *ViewStats) UnsetId() {
	o.Id.Unset()
}

func (o ViewStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DataUsageStats != nil {
		toSerialize["dataUsageStats"] = o.DataUsageStats
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableViewStats struct {
	value *ViewStats
	isSet bool
}

func (v NullableViewStats) Get() *ViewStats {
	return v.value
}

func (v *NullableViewStats) Set(val *ViewStats) {
	v.value = val
	v.isSet = true
}

func (v NullableViewStats) IsSet() bool {
	return v.isSet
}

func (v *NullableViewStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewStats(val *ViewStats) *NullableViewStats {
	return &NullableViewStats{value: val, isSet: true}
}

func (v NullableViewStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


