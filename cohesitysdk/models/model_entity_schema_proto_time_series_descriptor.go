/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// EntitySchemaProtoTimeSeriesDescriptor Specifies the meta-data required to define a time series of data (set of data points) for a metric.
type EntitySchemaProtoTimeSeriesDescriptor struct {
	// Specifies a descriptive name for the metric that is displayed in the Advanced Diagnostics of the Cohesity Dashboard. For example for the 'kUnmorphedUsageBytes' metric, the descriptive name is \"Total Logical Space Used\".
	MetricDescriptiveName NullableString `json:"metricDescriptiveName,omitempty"`
	// Specifies the name of the metric such as 'kUnmorphedUsageBytes'. It should be unique in an entity schema.
	MetricName NullableString `json:"metricName,omitempty"`
	MetricUnit *EntitySchemaProtoTimeSeriesDescriptorMetricUnit `json:"metricUnit,omitempty"`
	// Specifies a suggestion for the interval to collect raw data points.
	RawMetricPublishIntervalHintSecs NullableInt32 `json:"rawMetricPublishIntervalHintSecs,omitempty"`
	// Specifies how long the data point will be stored. Note: In statsv2, as timeseries data of an entity is stored per scribe row with metrics as columns, it is good to have time_to_live_secs per schema(defined below) For existing schemas, we will consider highest time_to_live_secs of all metrics as expiration time for all metrics defined in schema.
	TimeToLiveSecs NullableInt64 `json:"timeToLiveSecs,omitempty"`
	// Specifies the value type for this metric. A metric of type 'string\" is not supported, instead use 'bytes'. Note that an aggregate metric of type 'bytes' is not supported. 0 specifies a value type of Int64. 1 specifies a value type of Double. 2 specifies a value type of String. 3 specifies a value type of Bytes.
	ValueType NullableInt32 `json:"valueType,omitempty"`
}

// NewEntitySchemaProtoTimeSeriesDescriptor instantiates a new EntitySchemaProtoTimeSeriesDescriptor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntitySchemaProtoTimeSeriesDescriptor() *EntitySchemaProtoTimeSeriesDescriptor {
	this := EntitySchemaProtoTimeSeriesDescriptor{}
	return &this
}

// NewEntitySchemaProtoTimeSeriesDescriptorWithDefaults instantiates a new EntitySchemaProtoTimeSeriesDescriptor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntitySchemaProtoTimeSeriesDescriptorWithDefaults() *EntitySchemaProtoTimeSeriesDescriptor {
	this := EntitySchemaProtoTimeSeriesDescriptor{}
	return &this
}

// GetMetricDescriptiveName returns the MetricDescriptiveName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EntitySchemaProtoTimeSeriesDescriptor) GetMetricDescriptiveName() string {
	if o == nil || o.MetricDescriptiveName.Get() == nil {
		var ret string
		return ret
	}
	return *o.MetricDescriptiveName.Get()
}

// GetMetricDescriptiveNameOk returns a tuple with the MetricDescriptiveName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EntitySchemaProtoTimeSeriesDescriptor) GetMetricDescriptiveNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MetricDescriptiveName.Get(), o.MetricDescriptiveName.IsSet()
}

// HasMetricDescriptiveName returns a boolean if a field has been set.
func (o *EntitySchemaProtoTimeSeriesDescriptor) HasMetricDescriptiveName() bool {
	if o != nil && o.MetricDescriptiveName.IsSet() {
		return true
	}

	return false
}

// SetMetricDescriptiveName gets a reference to the given NullableString and assigns it to the MetricDescriptiveName field.
func (o *EntitySchemaProtoTimeSeriesDescriptor) SetMetricDescriptiveName(v string) {
	o.MetricDescriptiveName.Set(&v)
}
// SetMetricDescriptiveNameNil sets the value for MetricDescriptiveName to be an explicit nil
func (o *EntitySchemaProtoTimeSeriesDescriptor) SetMetricDescriptiveNameNil() {
	o.MetricDescriptiveName.Set(nil)
}

// UnsetMetricDescriptiveName ensures that no value is present for MetricDescriptiveName, not even an explicit nil
func (o *EntitySchemaProtoTimeSeriesDescriptor) UnsetMetricDescriptiveName() {
	o.MetricDescriptiveName.Unset()
}

// GetMetricName returns the MetricName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EntitySchemaProtoTimeSeriesDescriptor) GetMetricName() string {
	if o == nil || o.MetricName.Get() == nil {
		var ret string
		return ret
	}
	return *o.MetricName.Get()
}

// GetMetricNameOk returns a tuple with the MetricName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EntitySchemaProtoTimeSeriesDescriptor) GetMetricNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MetricName.Get(), o.MetricName.IsSet()
}

// HasMetricName returns a boolean if a field has been set.
func (o *EntitySchemaProtoTimeSeriesDescriptor) HasMetricName() bool {
	if o != nil && o.MetricName.IsSet() {
		return true
	}

	return false
}

// SetMetricName gets a reference to the given NullableString and assigns it to the MetricName field.
func (o *EntitySchemaProtoTimeSeriesDescriptor) SetMetricName(v string) {
	o.MetricName.Set(&v)
}
// SetMetricNameNil sets the value for MetricName to be an explicit nil
func (o *EntitySchemaProtoTimeSeriesDescriptor) SetMetricNameNil() {
	o.MetricName.Set(nil)
}

// UnsetMetricName ensures that no value is present for MetricName, not even an explicit nil
func (o *EntitySchemaProtoTimeSeriesDescriptor) UnsetMetricName() {
	o.MetricName.Unset()
}

// GetMetricUnit returns the MetricUnit field value if set, zero value otherwise.
func (o *EntitySchemaProtoTimeSeriesDescriptor) GetMetricUnit() EntitySchemaProtoTimeSeriesDescriptorMetricUnit {
	if o == nil || o.MetricUnit == nil {
		var ret EntitySchemaProtoTimeSeriesDescriptorMetricUnit
		return ret
	}
	return *o.MetricUnit
}

// GetMetricUnitOk returns a tuple with the MetricUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitySchemaProtoTimeSeriesDescriptor) GetMetricUnitOk() (*EntitySchemaProtoTimeSeriesDescriptorMetricUnit, bool) {
	if o == nil || o.MetricUnit == nil {
		return nil, false
	}
	return o.MetricUnit, true
}

// HasMetricUnit returns a boolean if a field has been set.
func (o *EntitySchemaProtoTimeSeriesDescriptor) HasMetricUnit() bool {
	if o != nil && o.MetricUnit != nil {
		return true
	}

	return false
}

// SetMetricUnit gets a reference to the given EntitySchemaProtoTimeSeriesDescriptorMetricUnit and assigns it to the MetricUnit field.
func (o *EntitySchemaProtoTimeSeriesDescriptor) SetMetricUnit(v EntitySchemaProtoTimeSeriesDescriptorMetricUnit) {
	o.MetricUnit = &v
}

// GetRawMetricPublishIntervalHintSecs returns the RawMetricPublishIntervalHintSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EntitySchemaProtoTimeSeriesDescriptor) GetRawMetricPublishIntervalHintSecs() int32 {
	if o == nil || o.RawMetricPublishIntervalHintSecs.Get() == nil {
		var ret int32
		return ret
	}
	return *o.RawMetricPublishIntervalHintSecs.Get()
}

// GetRawMetricPublishIntervalHintSecsOk returns a tuple with the RawMetricPublishIntervalHintSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EntitySchemaProtoTimeSeriesDescriptor) GetRawMetricPublishIntervalHintSecsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RawMetricPublishIntervalHintSecs.Get(), o.RawMetricPublishIntervalHintSecs.IsSet()
}

// HasRawMetricPublishIntervalHintSecs returns a boolean if a field has been set.
func (o *EntitySchemaProtoTimeSeriesDescriptor) HasRawMetricPublishIntervalHintSecs() bool {
	if o != nil && o.RawMetricPublishIntervalHintSecs.IsSet() {
		return true
	}

	return false
}

// SetRawMetricPublishIntervalHintSecs gets a reference to the given NullableInt32 and assigns it to the RawMetricPublishIntervalHintSecs field.
func (o *EntitySchemaProtoTimeSeriesDescriptor) SetRawMetricPublishIntervalHintSecs(v int32) {
	o.RawMetricPublishIntervalHintSecs.Set(&v)
}
// SetRawMetricPublishIntervalHintSecsNil sets the value for RawMetricPublishIntervalHintSecs to be an explicit nil
func (o *EntitySchemaProtoTimeSeriesDescriptor) SetRawMetricPublishIntervalHintSecsNil() {
	o.RawMetricPublishIntervalHintSecs.Set(nil)
}

// UnsetRawMetricPublishIntervalHintSecs ensures that no value is present for RawMetricPublishIntervalHintSecs, not even an explicit nil
func (o *EntitySchemaProtoTimeSeriesDescriptor) UnsetRawMetricPublishIntervalHintSecs() {
	o.RawMetricPublishIntervalHintSecs.Unset()
}

// GetTimeToLiveSecs returns the TimeToLiveSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EntitySchemaProtoTimeSeriesDescriptor) GetTimeToLiveSecs() int64 {
	if o == nil || o.TimeToLiveSecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TimeToLiveSecs.Get()
}

// GetTimeToLiveSecsOk returns a tuple with the TimeToLiveSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EntitySchemaProtoTimeSeriesDescriptor) GetTimeToLiveSecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TimeToLiveSecs.Get(), o.TimeToLiveSecs.IsSet()
}

// HasTimeToLiveSecs returns a boolean if a field has been set.
func (o *EntitySchemaProtoTimeSeriesDescriptor) HasTimeToLiveSecs() bool {
	if o != nil && o.TimeToLiveSecs.IsSet() {
		return true
	}

	return false
}

// SetTimeToLiveSecs gets a reference to the given NullableInt64 and assigns it to the TimeToLiveSecs field.
func (o *EntitySchemaProtoTimeSeriesDescriptor) SetTimeToLiveSecs(v int64) {
	o.TimeToLiveSecs.Set(&v)
}
// SetTimeToLiveSecsNil sets the value for TimeToLiveSecs to be an explicit nil
func (o *EntitySchemaProtoTimeSeriesDescriptor) SetTimeToLiveSecsNil() {
	o.TimeToLiveSecs.Set(nil)
}

// UnsetTimeToLiveSecs ensures that no value is present for TimeToLiveSecs, not even an explicit nil
func (o *EntitySchemaProtoTimeSeriesDescriptor) UnsetTimeToLiveSecs() {
	o.TimeToLiveSecs.Unset()
}

// GetValueType returns the ValueType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EntitySchemaProtoTimeSeriesDescriptor) GetValueType() int32 {
	if o == nil || o.ValueType.Get() == nil {
		var ret int32
		return ret
	}
	return *o.ValueType.Get()
}

// GetValueTypeOk returns a tuple with the ValueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EntitySchemaProtoTimeSeriesDescriptor) GetValueTypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ValueType.Get(), o.ValueType.IsSet()
}

// HasValueType returns a boolean if a field has been set.
func (o *EntitySchemaProtoTimeSeriesDescriptor) HasValueType() bool {
	if o != nil && o.ValueType.IsSet() {
		return true
	}

	return false
}

// SetValueType gets a reference to the given NullableInt32 and assigns it to the ValueType field.
func (o *EntitySchemaProtoTimeSeriesDescriptor) SetValueType(v int32) {
	o.ValueType.Set(&v)
}
// SetValueTypeNil sets the value for ValueType to be an explicit nil
func (o *EntitySchemaProtoTimeSeriesDescriptor) SetValueTypeNil() {
	o.ValueType.Set(nil)
}

// UnsetValueType ensures that no value is present for ValueType, not even an explicit nil
func (o *EntitySchemaProtoTimeSeriesDescriptor) UnsetValueType() {
	o.ValueType.Unset()
}

func (o EntitySchemaProtoTimeSeriesDescriptor) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MetricDescriptiveName.IsSet() {
		toSerialize["metricDescriptiveName"] = o.MetricDescriptiveName.Get()
	}
	if o.MetricName.IsSet() {
		toSerialize["metricName"] = o.MetricName.Get()
	}
	if o.MetricUnit != nil {
		toSerialize["metricUnit"] = o.MetricUnit
	}
	if o.RawMetricPublishIntervalHintSecs.IsSet() {
		toSerialize["rawMetricPublishIntervalHintSecs"] = o.RawMetricPublishIntervalHintSecs.Get()
	}
	if o.TimeToLiveSecs.IsSet() {
		toSerialize["timeToLiveSecs"] = o.TimeToLiveSecs.Get()
	}
	if o.ValueType.IsSet() {
		toSerialize["valueType"] = o.ValueType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableEntitySchemaProtoTimeSeriesDescriptor struct {
	value *EntitySchemaProtoTimeSeriesDescriptor
	isSet bool
}

func (v NullableEntitySchemaProtoTimeSeriesDescriptor) Get() *EntitySchemaProtoTimeSeriesDescriptor {
	return v.value
}

func (v *NullableEntitySchemaProtoTimeSeriesDescriptor) Set(val *EntitySchemaProtoTimeSeriesDescriptor) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitySchemaProtoTimeSeriesDescriptor) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitySchemaProtoTimeSeriesDescriptor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitySchemaProtoTimeSeriesDescriptor(val *EntitySchemaProtoTimeSeriesDescriptor) *NullableEntitySchemaProtoTimeSeriesDescriptor {
	return &NullableEntitySchemaProtoTimeSeriesDescriptor{value: val, isSet: true}
}

func (v NullableEntitySchemaProtoTimeSeriesDescriptor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitySchemaProtoTimeSeriesDescriptor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


