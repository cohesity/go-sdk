/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// VaultConfig Specifies the settings required to connect to a specific Vault type. For some Vaults, you must also specify a storage location (bucketName).
type VaultConfig struct {
	Amazon *AmazonCloudCredentials `json:"amazon,omitempty"`
	Azure *AzureCloudCredentials `json:"azure,omitempty"`
	// Specifies the name of a storage location of the Vault, where objects are stored. For Google and AMS, this storage location is called a bucket. For Microsoft Azure, this storage location is called a container. For QStar and NAS, you do not specify a storage location.
	BucketName NullableString `json:"bucketName,omitempty"`
	Google *GoogleCloudCredentials `json:"google,omitempty"`
	Nas *NasCredentials `json:"nas,omitempty"`
	Oracle *OracleCloudCredentials `json:"oracle,omitempty"`
	Qstar *QStarServerCredentials `json:"qstar,omitempty"`
}

// NewVaultConfig instantiates a new VaultConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVaultConfig() *VaultConfig {
	this := VaultConfig{}
	return &this
}

// NewVaultConfigWithDefaults instantiates a new VaultConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVaultConfigWithDefaults() *VaultConfig {
	this := VaultConfig{}
	return &this
}

// GetAmazon returns the Amazon field value if set, zero value otherwise.
func (o *VaultConfig) GetAmazon() AmazonCloudCredentials {
	if o == nil || o.Amazon == nil {
		var ret AmazonCloudCredentials
		return ret
	}
	return *o.Amazon
}

// GetAmazonOk returns a tuple with the Amazon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultConfig) GetAmazonOk() (*AmazonCloudCredentials, bool) {
	if o == nil || o.Amazon == nil {
		return nil, false
	}
	return o.Amazon, true
}

// HasAmazon returns a boolean if a field has been set.
func (o *VaultConfig) HasAmazon() bool {
	if o != nil && o.Amazon != nil {
		return true
	}

	return false
}

// SetAmazon gets a reference to the given AmazonCloudCredentials and assigns it to the Amazon field.
func (o *VaultConfig) SetAmazon(v AmazonCloudCredentials) {
	o.Amazon = &v
}

// GetAzure returns the Azure field value if set, zero value otherwise.
func (o *VaultConfig) GetAzure() AzureCloudCredentials {
	if o == nil || o.Azure == nil {
		var ret AzureCloudCredentials
		return ret
	}
	return *o.Azure
}

// GetAzureOk returns a tuple with the Azure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultConfig) GetAzureOk() (*AzureCloudCredentials, bool) {
	if o == nil || o.Azure == nil {
		return nil, false
	}
	return o.Azure, true
}

// HasAzure returns a boolean if a field has been set.
func (o *VaultConfig) HasAzure() bool {
	if o != nil && o.Azure != nil {
		return true
	}

	return false
}

// SetAzure gets a reference to the given AzureCloudCredentials and assigns it to the Azure field.
func (o *VaultConfig) SetAzure(v AzureCloudCredentials) {
	o.Azure = &v
}

// GetBucketName returns the BucketName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VaultConfig) GetBucketName() string {
	if o == nil || o.BucketName.Get() == nil {
		var ret string
		return ret
	}
	return *o.BucketName.Get()
}

// GetBucketNameOk returns a tuple with the BucketName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VaultConfig) GetBucketNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BucketName.Get(), o.BucketName.IsSet()
}

// HasBucketName returns a boolean if a field has been set.
func (o *VaultConfig) HasBucketName() bool {
	if o != nil && o.BucketName.IsSet() {
		return true
	}

	return false
}

// SetBucketName gets a reference to the given NullableString and assigns it to the BucketName field.
func (o *VaultConfig) SetBucketName(v string) {
	o.BucketName.Set(&v)
}
// SetBucketNameNil sets the value for BucketName to be an explicit nil
func (o *VaultConfig) SetBucketNameNil() {
	o.BucketName.Set(nil)
}

// UnsetBucketName ensures that no value is present for BucketName, not even an explicit nil
func (o *VaultConfig) UnsetBucketName() {
	o.BucketName.Unset()
}

// GetGoogle returns the Google field value if set, zero value otherwise.
func (o *VaultConfig) GetGoogle() GoogleCloudCredentials {
	if o == nil || o.Google == nil {
		var ret GoogleCloudCredentials
		return ret
	}
	return *o.Google
}

// GetGoogleOk returns a tuple with the Google field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultConfig) GetGoogleOk() (*GoogleCloudCredentials, bool) {
	if o == nil || o.Google == nil {
		return nil, false
	}
	return o.Google, true
}

// HasGoogle returns a boolean if a field has been set.
func (o *VaultConfig) HasGoogle() bool {
	if o != nil && o.Google != nil {
		return true
	}

	return false
}

// SetGoogle gets a reference to the given GoogleCloudCredentials and assigns it to the Google field.
func (o *VaultConfig) SetGoogle(v GoogleCloudCredentials) {
	o.Google = &v
}

// GetNas returns the Nas field value if set, zero value otherwise.
func (o *VaultConfig) GetNas() NasCredentials {
	if o == nil || o.Nas == nil {
		var ret NasCredentials
		return ret
	}
	return *o.Nas
}

// GetNasOk returns a tuple with the Nas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultConfig) GetNasOk() (*NasCredentials, bool) {
	if o == nil || o.Nas == nil {
		return nil, false
	}
	return o.Nas, true
}

// HasNas returns a boolean if a field has been set.
func (o *VaultConfig) HasNas() bool {
	if o != nil && o.Nas != nil {
		return true
	}

	return false
}

// SetNas gets a reference to the given NasCredentials and assigns it to the Nas field.
func (o *VaultConfig) SetNas(v NasCredentials) {
	o.Nas = &v
}

// GetOracle returns the Oracle field value if set, zero value otherwise.
func (o *VaultConfig) GetOracle() OracleCloudCredentials {
	if o == nil || o.Oracle == nil {
		var ret OracleCloudCredentials
		return ret
	}
	return *o.Oracle
}

// GetOracleOk returns a tuple with the Oracle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultConfig) GetOracleOk() (*OracleCloudCredentials, bool) {
	if o == nil || o.Oracle == nil {
		return nil, false
	}
	return o.Oracle, true
}

// HasOracle returns a boolean if a field has been set.
func (o *VaultConfig) HasOracle() bool {
	if o != nil && o.Oracle != nil {
		return true
	}

	return false
}

// SetOracle gets a reference to the given OracleCloudCredentials and assigns it to the Oracle field.
func (o *VaultConfig) SetOracle(v OracleCloudCredentials) {
	o.Oracle = &v
}

// GetQstar returns the Qstar field value if set, zero value otherwise.
func (o *VaultConfig) GetQstar() QStarServerCredentials {
	if o == nil || o.Qstar == nil {
		var ret QStarServerCredentials
		return ret
	}
	return *o.Qstar
}

// GetQstarOk returns a tuple with the Qstar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultConfig) GetQstarOk() (*QStarServerCredentials, bool) {
	if o == nil || o.Qstar == nil {
		return nil, false
	}
	return o.Qstar, true
}

// HasQstar returns a boolean if a field has been set.
func (o *VaultConfig) HasQstar() bool {
	if o != nil && o.Qstar != nil {
		return true
	}

	return false
}

// SetQstar gets a reference to the given QStarServerCredentials and assigns it to the Qstar field.
func (o *VaultConfig) SetQstar(v QStarServerCredentials) {
	o.Qstar = &v
}

func (o VaultConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Amazon != nil {
		toSerialize["amazon"] = o.Amazon
	}
	if o.Azure != nil {
		toSerialize["azure"] = o.Azure
	}
	if o.BucketName.IsSet() {
		toSerialize["bucketName"] = o.BucketName.Get()
	}
	if o.Google != nil {
		toSerialize["google"] = o.Google
	}
	if o.Nas != nil {
		toSerialize["nas"] = o.Nas
	}
	if o.Oracle != nil {
		toSerialize["oracle"] = o.Oracle
	}
	if o.Qstar != nil {
		toSerialize["qstar"] = o.Qstar
	}
	return json.Marshal(toSerialize)
}

type NullableVaultConfig struct {
	value *VaultConfig
	isSet bool
}

func (v NullableVaultConfig) Get() *VaultConfig {
	return v.value
}

func (v *NullableVaultConfig) Set(val *VaultConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableVaultConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableVaultConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVaultConfig(val *VaultConfig) *NullableVaultConfig {
	return &NullableVaultConfig{value: val, isSet: true}
}

func (v NullableVaultConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVaultConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


