/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// MapReduceInfo This will be used to encapsulate information about mapper and reducer only. On UI this will be used to show the list of available apps to the user.
type MapReduceInfo struct {
	AppProperty *MapReduceInfoAppProperty `json:"appProperty,omitempty"`
	AuxData *MapReduceAuxData `json:"auxData,omitempty"`
	// Map reduce job description.
	Description NullableString `json:"description,omitempty"`
	// List of all excluded data sources for this app.
	ExcludedDataSourceVec []int32 `json:"excludedDataSourceVec,omitempty"`
	// ID of map reduce job.
	Id NullableInt64 `json:"id,omitempty"`
	// Flag to denote if this is system pre-defined app or user has written this app.
	IsSystemDefined NullableBool `json:"isSystemDefined,omitempty"`
	// ID of the mapper to process the input.
	MapperId NullableInt64 `json:"mapperId,omitempty"`
	// Map reduce job name.
	Name NullableString `json:"name,omitempty"`
	// ID of the reducer.
	ReducerId NullableInt64 `json:"reducerId,omitempty"`
	RequiredPropertyVec []MapReduceInfoRequiredProperty `json:"requiredPropertyVec,omitempty"`
}

// NewMapReduceInfo instantiates a new MapReduceInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMapReduceInfo() *MapReduceInfo {
	this := MapReduceInfo{}
	return &this
}

// NewMapReduceInfoWithDefaults instantiates a new MapReduceInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMapReduceInfoWithDefaults() *MapReduceInfo {
	this := MapReduceInfo{}
	return &this
}

// GetAppProperty returns the AppProperty field value if set, zero value otherwise.
func (o *MapReduceInfo) GetAppProperty() MapReduceInfoAppProperty {
	if o == nil || o.AppProperty == nil {
		var ret MapReduceInfoAppProperty
		return ret
	}
	return *o.AppProperty
}

// GetAppPropertyOk returns a tuple with the AppProperty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapReduceInfo) GetAppPropertyOk() (*MapReduceInfoAppProperty, bool) {
	if o == nil || o.AppProperty == nil {
		return nil, false
	}
	return o.AppProperty, true
}

// HasAppProperty returns a boolean if a field has been set.
func (o *MapReduceInfo) HasAppProperty() bool {
	if o != nil && o.AppProperty != nil {
		return true
	}

	return false
}

// SetAppProperty gets a reference to the given MapReduceInfoAppProperty and assigns it to the AppProperty field.
func (o *MapReduceInfo) SetAppProperty(v MapReduceInfoAppProperty) {
	o.AppProperty = &v
}

// GetAuxData returns the AuxData field value if set, zero value otherwise.
func (o *MapReduceInfo) GetAuxData() MapReduceAuxData {
	if o == nil || o.AuxData == nil {
		var ret MapReduceAuxData
		return ret
	}
	return *o.AuxData
}

// GetAuxDataOk returns a tuple with the AuxData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MapReduceInfo) GetAuxDataOk() (*MapReduceAuxData, bool) {
	if o == nil || o.AuxData == nil {
		return nil, false
	}
	return o.AuxData, true
}

// HasAuxData returns a boolean if a field has been set.
func (o *MapReduceInfo) HasAuxData() bool {
	if o != nil && o.AuxData != nil {
		return true
	}

	return false
}

// SetAuxData gets a reference to the given MapReduceAuxData and assigns it to the AuxData field.
func (o *MapReduceInfo) SetAuxData(v MapReduceAuxData) {
	o.AuxData = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MapReduceInfo) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MapReduceInfo) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *MapReduceInfo) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *MapReduceInfo) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *MapReduceInfo) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *MapReduceInfo) UnsetDescription() {
	o.Description.Unset()
}

// GetExcludedDataSourceVec returns the ExcludedDataSourceVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MapReduceInfo) GetExcludedDataSourceVec() []int32 {
	if o == nil  {
		var ret []int32
		return ret
	}
	return o.ExcludedDataSourceVec
}

// GetExcludedDataSourceVecOk returns a tuple with the ExcludedDataSourceVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MapReduceInfo) GetExcludedDataSourceVecOk() (*[]int32, bool) {
	if o == nil || o.ExcludedDataSourceVec == nil {
		return nil, false
	}
	return &o.ExcludedDataSourceVec, true
}

// HasExcludedDataSourceVec returns a boolean if a field has been set.
func (o *MapReduceInfo) HasExcludedDataSourceVec() bool {
	if o != nil && o.ExcludedDataSourceVec != nil {
		return true
	}

	return false
}

// SetExcludedDataSourceVec gets a reference to the given []int32 and assigns it to the ExcludedDataSourceVec field.
func (o *MapReduceInfo) SetExcludedDataSourceVec(v []int32) {
	o.ExcludedDataSourceVec = v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MapReduceInfo) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MapReduceInfo) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *MapReduceInfo) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *MapReduceInfo) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *MapReduceInfo) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *MapReduceInfo) UnsetId() {
	o.Id.Unset()
}

// GetIsSystemDefined returns the IsSystemDefined field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MapReduceInfo) GetIsSystemDefined() bool {
	if o == nil || o.IsSystemDefined.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsSystemDefined.Get()
}

// GetIsSystemDefinedOk returns a tuple with the IsSystemDefined field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MapReduceInfo) GetIsSystemDefinedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsSystemDefined.Get(), o.IsSystemDefined.IsSet()
}

// HasIsSystemDefined returns a boolean if a field has been set.
func (o *MapReduceInfo) HasIsSystemDefined() bool {
	if o != nil && o.IsSystemDefined.IsSet() {
		return true
	}

	return false
}

// SetIsSystemDefined gets a reference to the given NullableBool and assigns it to the IsSystemDefined field.
func (o *MapReduceInfo) SetIsSystemDefined(v bool) {
	o.IsSystemDefined.Set(&v)
}
// SetIsSystemDefinedNil sets the value for IsSystemDefined to be an explicit nil
func (o *MapReduceInfo) SetIsSystemDefinedNil() {
	o.IsSystemDefined.Set(nil)
}

// UnsetIsSystemDefined ensures that no value is present for IsSystemDefined, not even an explicit nil
func (o *MapReduceInfo) UnsetIsSystemDefined() {
	o.IsSystemDefined.Unset()
}

// GetMapperId returns the MapperId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MapReduceInfo) GetMapperId() int64 {
	if o == nil || o.MapperId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.MapperId.Get()
}

// GetMapperIdOk returns a tuple with the MapperId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MapReduceInfo) GetMapperIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MapperId.Get(), o.MapperId.IsSet()
}

// HasMapperId returns a boolean if a field has been set.
func (o *MapReduceInfo) HasMapperId() bool {
	if o != nil && o.MapperId.IsSet() {
		return true
	}

	return false
}

// SetMapperId gets a reference to the given NullableInt64 and assigns it to the MapperId field.
func (o *MapReduceInfo) SetMapperId(v int64) {
	o.MapperId.Set(&v)
}
// SetMapperIdNil sets the value for MapperId to be an explicit nil
func (o *MapReduceInfo) SetMapperIdNil() {
	o.MapperId.Set(nil)
}

// UnsetMapperId ensures that no value is present for MapperId, not even an explicit nil
func (o *MapReduceInfo) UnsetMapperId() {
	o.MapperId.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MapReduceInfo) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MapReduceInfo) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *MapReduceInfo) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *MapReduceInfo) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *MapReduceInfo) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *MapReduceInfo) UnsetName() {
	o.Name.Unset()
}

// GetReducerId returns the ReducerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MapReduceInfo) GetReducerId() int64 {
	if o == nil || o.ReducerId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ReducerId.Get()
}

// GetReducerIdOk returns a tuple with the ReducerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MapReduceInfo) GetReducerIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ReducerId.Get(), o.ReducerId.IsSet()
}

// HasReducerId returns a boolean if a field has been set.
func (o *MapReduceInfo) HasReducerId() bool {
	if o != nil && o.ReducerId.IsSet() {
		return true
	}

	return false
}

// SetReducerId gets a reference to the given NullableInt64 and assigns it to the ReducerId field.
func (o *MapReduceInfo) SetReducerId(v int64) {
	o.ReducerId.Set(&v)
}
// SetReducerIdNil sets the value for ReducerId to be an explicit nil
func (o *MapReduceInfo) SetReducerIdNil() {
	o.ReducerId.Set(nil)
}

// UnsetReducerId ensures that no value is present for ReducerId, not even an explicit nil
func (o *MapReduceInfo) UnsetReducerId() {
	o.ReducerId.Unset()
}

// GetRequiredPropertyVec returns the RequiredPropertyVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MapReduceInfo) GetRequiredPropertyVec() []MapReduceInfoRequiredProperty {
	if o == nil  {
		var ret []MapReduceInfoRequiredProperty
		return ret
	}
	return o.RequiredPropertyVec
}

// GetRequiredPropertyVecOk returns a tuple with the RequiredPropertyVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MapReduceInfo) GetRequiredPropertyVecOk() (*[]MapReduceInfoRequiredProperty, bool) {
	if o == nil || o.RequiredPropertyVec == nil {
		return nil, false
	}
	return &o.RequiredPropertyVec, true
}

// HasRequiredPropertyVec returns a boolean if a field has been set.
func (o *MapReduceInfo) HasRequiredPropertyVec() bool {
	if o != nil && o.RequiredPropertyVec != nil {
		return true
	}

	return false
}

// SetRequiredPropertyVec gets a reference to the given []MapReduceInfoRequiredProperty and assigns it to the RequiredPropertyVec field.
func (o *MapReduceInfo) SetRequiredPropertyVec(v []MapReduceInfoRequiredProperty) {
	o.RequiredPropertyVec = v
}

func (o MapReduceInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AppProperty != nil {
		toSerialize["appProperty"] = o.AppProperty
	}
	if o.AuxData != nil {
		toSerialize["auxData"] = o.AuxData
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.ExcludedDataSourceVec != nil {
		toSerialize["excludedDataSourceVec"] = o.ExcludedDataSourceVec
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.IsSystemDefined.IsSet() {
		toSerialize["isSystemDefined"] = o.IsSystemDefined.Get()
	}
	if o.MapperId.IsSet() {
		toSerialize["mapperId"] = o.MapperId.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.ReducerId.IsSet() {
		toSerialize["reducerId"] = o.ReducerId.Get()
	}
	if o.RequiredPropertyVec != nil {
		toSerialize["requiredPropertyVec"] = o.RequiredPropertyVec
	}
	return json.Marshal(toSerialize)
}

type NullableMapReduceInfo struct {
	value *MapReduceInfo
	isSet bool
}

func (v NullableMapReduceInfo) Get() *MapReduceInfo {
	return v.value
}

func (v *NullableMapReduceInfo) Set(val *MapReduceInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableMapReduceInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableMapReduceInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMapReduceInfo(val *MapReduceInfo) *NullableMapReduceInfo {
	return &NullableMapReduceInfo{value: val, isSet: true}
}

func (v NullableMapReduceInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMapReduceInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


