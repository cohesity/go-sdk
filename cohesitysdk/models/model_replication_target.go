/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ReplicationTarget Message that specifies the details about a remote cluster where backup snapshots may be replicated to.
type ReplicationTarget struct {
	// The id of the remote cluster.
	ClusterId NullableInt64 `json:"clusterId,omitempty"`
	// The name of the remote cluster.
	ClusterName NullableString `json:"clusterName,omitempty"`
}

// NewReplicationTarget instantiates a new ReplicationTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplicationTarget() *ReplicationTarget {
	this := ReplicationTarget{}
	return &this
}

// NewReplicationTargetWithDefaults instantiates a new ReplicationTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplicationTargetWithDefaults() *ReplicationTarget {
	this := ReplicationTarget{}
	return &this
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicationTarget) GetClusterId() int64 {
	if o == nil || o.ClusterId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ClusterId.Get()
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationTarget) GetClusterIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterId.Get(), o.ClusterId.IsSet()
}

// HasClusterId returns a boolean if a field has been set.
func (o *ReplicationTarget) HasClusterId() bool {
	if o != nil && o.ClusterId.IsSet() {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given NullableInt64 and assigns it to the ClusterId field.
func (o *ReplicationTarget) SetClusterId(v int64) {
	o.ClusterId.Set(&v)
}
// SetClusterIdNil sets the value for ClusterId to be an explicit nil
func (o *ReplicationTarget) SetClusterIdNil() {
	o.ClusterId.Set(nil)
}

// UnsetClusterId ensures that no value is present for ClusterId, not even an explicit nil
func (o *ReplicationTarget) UnsetClusterId() {
	o.ClusterId.Unset()
}

// GetClusterName returns the ClusterName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicationTarget) GetClusterName() string {
	if o == nil || o.ClusterName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ClusterName.Get()
}

// GetClusterNameOk returns a tuple with the ClusterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationTarget) GetClusterNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterName.Get(), o.ClusterName.IsSet()
}

// HasClusterName returns a boolean if a field has been set.
func (o *ReplicationTarget) HasClusterName() bool {
	if o != nil && o.ClusterName.IsSet() {
		return true
	}

	return false
}

// SetClusterName gets a reference to the given NullableString and assigns it to the ClusterName field.
func (o *ReplicationTarget) SetClusterName(v string) {
	o.ClusterName.Set(&v)
}
// SetClusterNameNil sets the value for ClusterName to be an explicit nil
func (o *ReplicationTarget) SetClusterNameNil() {
	o.ClusterName.Set(nil)
}

// UnsetClusterName ensures that no value is present for ClusterName, not even an explicit nil
func (o *ReplicationTarget) UnsetClusterName() {
	o.ClusterName.Unset()
}

func (o ReplicationTarget) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClusterId.IsSet() {
		toSerialize["clusterId"] = o.ClusterId.Get()
	}
	if o.ClusterName.IsSet() {
		toSerialize["clusterName"] = o.ClusterName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableReplicationTarget struct {
	value *ReplicationTarget
	isSet bool
}

func (v NullableReplicationTarget) Get() *ReplicationTarget {
	return v.value
}

func (v *NullableReplicationTarget) Set(val *ReplicationTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicationTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicationTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicationTarget(val *ReplicationTarget) *NullableReplicationTarget {
	return &NullableReplicationTarget{value: val, isSet: true}
}

func (v NullableReplicationTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicationTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


