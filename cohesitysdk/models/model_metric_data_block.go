/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// MetricDataBlock Specifies a series of metric data points for a time series.
type MetricDataBlock struct {
	// Array of Data Points.  Specifies a list of metric data points for a time series.
	DataPointVec []MetricDataPoint `json:"dataPointVec,omitempty"`
	// Specifies the name of a metric such as 'kDiskAwaitTimeMsecs'.
	MetricName NullableString `json:"metricName,omitempty"`
	// Specifies the data type of the data points. 0 specifies a data point of type Int64. 1 specifies a data point of type Double. 2 specifies a data point of type String. 3 specifies a data point of type Bytes.
	Type NullableInt32 `json:"type,omitempty"`
}

// NewMetricDataBlock instantiates a new MetricDataBlock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricDataBlock() *MetricDataBlock {
	this := MetricDataBlock{}
	return &this
}

// NewMetricDataBlockWithDefaults instantiates a new MetricDataBlock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricDataBlockWithDefaults() *MetricDataBlock {
	this := MetricDataBlock{}
	return &this
}

// GetDataPointVec returns the DataPointVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricDataBlock) GetDataPointVec() []MetricDataPoint {
	if o == nil  {
		var ret []MetricDataPoint
		return ret
	}
	return o.DataPointVec
}

// GetDataPointVecOk returns a tuple with the DataPointVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricDataBlock) GetDataPointVecOk() (*[]MetricDataPoint, bool) {
	if o == nil || o.DataPointVec == nil {
		return nil, false
	}
	return &o.DataPointVec, true
}

// HasDataPointVec returns a boolean if a field has been set.
func (o *MetricDataBlock) HasDataPointVec() bool {
	if o != nil && o.DataPointVec != nil {
		return true
	}

	return false
}

// SetDataPointVec gets a reference to the given []MetricDataPoint and assigns it to the DataPointVec field.
func (o *MetricDataBlock) SetDataPointVec(v []MetricDataPoint) {
	o.DataPointVec = v
}

// GetMetricName returns the MetricName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricDataBlock) GetMetricName() string {
	if o == nil || o.MetricName.Get() == nil {
		var ret string
		return ret
	}
	return *o.MetricName.Get()
}

// GetMetricNameOk returns a tuple with the MetricName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricDataBlock) GetMetricNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MetricName.Get(), o.MetricName.IsSet()
}

// HasMetricName returns a boolean if a field has been set.
func (o *MetricDataBlock) HasMetricName() bool {
	if o != nil && o.MetricName.IsSet() {
		return true
	}

	return false
}

// SetMetricName gets a reference to the given NullableString and assigns it to the MetricName field.
func (o *MetricDataBlock) SetMetricName(v string) {
	o.MetricName.Set(&v)
}
// SetMetricNameNil sets the value for MetricName to be an explicit nil
func (o *MetricDataBlock) SetMetricNameNil() {
	o.MetricName.Set(nil)
}

// UnsetMetricName ensures that no value is present for MetricName, not even an explicit nil
func (o *MetricDataBlock) UnsetMetricName() {
	o.MetricName.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricDataBlock) GetType() int32 {
	if o == nil || o.Type.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricDataBlock) GetTypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *MetricDataBlock) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableInt32 and assigns it to the Type field.
func (o *MetricDataBlock) SetType(v int32) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *MetricDataBlock) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *MetricDataBlock) UnsetType() {
	o.Type.Unset()
}

func (o MetricDataBlock) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DataPointVec != nil {
		toSerialize["dataPointVec"] = o.DataPointVec
	}
	if o.MetricName.IsSet() {
		toSerialize["metricName"] = o.MetricName.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMetricDataBlock struct {
	value *MetricDataBlock
	isSet bool
}

func (v NullableMetricDataBlock) Get() *MetricDataBlock {
	return v.value
}

func (v *NullableMetricDataBlock) Set(val *MetricDataBlock) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricDataBlock) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricDataBlock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricDataBlock(val *MetricDataBlock) *NullableMetricDataBlock {
	return &NullableMetricDataBlock{value: val, isSet: true}
}

func (v NullableMetricDataBlock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricDataBlock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


