/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ContinuousSchedule Specifies the time interval between two Job Runs of a continuous backup schedule and any blackout periods when new Job Runs should NOT be started.
type ContinuousSchedule struct {
	// If specified, this field defines the time interval in minutes when new Job Runs are started.
	BackupIntervalMins NullableInt64 `json:"backupIntervalMins,omitempty"`
}

// NewContinuousSchedule instantiates a new ContinuousSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContinuousSchedule() *ContinuousSchedule {
	this := ContinuousSchedule{}
	return &this
}

// NewContinuousScheduleWithDefaults instantiates a new ContinuousSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContinuousScheduleWithDefaults() *ContinuousSchedule {
	this := ContinuousSchedule{}
	return &this
}

// GetBackupIntervalMins returns the BackupIntervalMins field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContinuousSchedule) GetBackupIntervalMins() int64 {
	if o == nil || o.BackupIntervalMins.Get() == nil {
		var ret int64
		return ret
	}
	return *o.BackupIntervalMins.Get()
}

// GetBackupIntervalMinsOk returns a tuple with the BackupIntervalMins field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContinuousSchedule) GetBackupIntervalMinsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BackupIntervalMins.Get(), o.BackupIntervalMins.IsSet()
}

// HasBackupIntervalMins returns a boolean if a field has been set.
func (o *ContinuousSchedule) HasBackupIntervalMins() bool {
	if o != nil && o.BackupIntervalMins.IsSet() {
		return true
	}

	return false
}

// SetBackupIntervalMins gets a reference to the given NullableInt64 and assigns it to the BackupIntervalMins field.
func (o *ContinuousSchedule) SetBackupIntervalMins(v int64) {
	o.BackupIntervalMins.Set(&v)
}
// SetBackupIntervalMinsNil sets the value for BackupIntervalMins to be an explicit nil
func (o *ContinuousSchedule) SetBackupIntervalMinsNil() {
	o.BackupIntervalMins.Set(nil)
}

// UnsetBackupIntervalMins ensures that no value is present for BackupIntervalMins, not even an explicit nil
func (o *ContinuousSchedule) UnsetBackupIntervalMins() {
	o.BackupIntervalMins.Unset()
}

func (o ContinuousSchedule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BackupIntervalMins.IsSet() {
		toSerialize["backupIntervalMins"] = o.BackupIntervalMins.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableContinuousSchedule struct {
	value *ContinuousSchedule
	isSet bool
}

func (v NullableContinuousSchedule) Get() *ContinuousSchedule {
	return v.value
}

func (v *NullableContinuousSchedule) Set(val *ContinuousSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableContinuousSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableContinuousSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContinuousSchedule(val *ContinuousSchedule) *NullableContinuousSchedule {
	return &NullableContinuousSchedule{value: val, isSet: true}
}

func (v NullableContinuousSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContinuousSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


