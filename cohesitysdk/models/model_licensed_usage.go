/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// LicensedUsage struct for LicensedUsage
type LicensedUsage struct {
	// Feature usage by the cluster.
	CapacityGiB NullableInt64 `json:"capacityGiB,omitempty"`
	// Expiry time(epoch) of each feature. There could be multiple expiry time for the given SKU.
	ExpiryTime NullableInt64 `json:"expiryTime,omitempty"`
	// Name of feature.
	FeatureName NullableString `json:"featureName,omitempty"`
	// Type of License
	LicenseType NullableString `json:"licenseType,omitempty"`
	// Number of VM spinned.
	NumVm NullableInt64 `json:"numVm,omitempty"`
}

// NewLicensedUsage instantiates a new LicensedUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicensedUsage() *LicensedUsage {
	this := LicensedUsage{}
	return &this
}

// NewLicensedUsageWithDefaults instantiates a new LicensedUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicensedUsageWithDefaults() *LicensedUsage {
	this := LicensedUsage{}
	return &this
}

// GetCapacityGiB returns the CapacityGiB field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicensedUsage) GetCapacityGiB() int64 {
	if o == nil || o.CapacityGiB.Get() == nil {
		var ret int64
		return ret
	}
	return *o.CapacityGiB.Get()
}

// GetCapacityGiBOk returns a tuple with the CapacityGiB field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicensedUsage) GetCapacityGiBOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CapacityGiB.Get(), o.CapacityGiB.IsSet()
}

// HasCapacityGiB returns a boolean if a field has been set.
func (o *LicensedUsage) HasCapacityGiB() bool {
	if o != nil && o.CapacityGiB.IsSet() {
		return true
	}

	return false
}

// SetCapacityGiB gets a reference to the given NullableInt64 and assigns it to the CapacityGiB field.
func (o *LicensedUsage) SetCapacityGiB(v int64) {
	o.CapacityGiB.Set(&v)
}
// SetCapacityGiBNil sets the value for CapacityGiB to be an explicit nil
func (o *LicensedUsage) SetCapacityGiBNil() {
	o.CapacityGiB.Set(nil)
}

// UnsetCapacityGiB ensures that no value is present for CapacityGiB, not even an explicit nil
func (o *LicensedUsage) UnsetCapacityGiB() {
	o.CapacityGiB.Unset()
}

// GetExpiryTime returns the ExpiryTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicensedUsage) GetExpiryTime() int64 {
	if o == nil || o.ExpiryTime.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ExpiryTime.Get()
}

// GetExpiryTimeOk returns a tuple with the ExpiryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicensedUsage) GetExpiryTimeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExpiryTime.Get(), o.ExpiryTime.IsSet()
}

// HasExpiryTime returns a boolean if a field has been set.
func (o *LicensedUsage) HasExpiryTime() bool {
	if o != nil && o.ExpiryTime.IsSet() {
		return true
	}

	return false
}

// SetExpiryTime gets a reference to the given NullableInt64 and assigns it to the ExpiryTime field.
func (o *LicensedUsage) SetExpiryTime(v int64) {
	o.ExpiryTime.Set(&v)
}
// SetExpiryTimeNil sets the value for ExpiryTime to be an explicit nil
func (o *LicensedUsage) SetExpiryTimeNil() {
	o.ExpiryTime.Set(nil)
}

// UnsetExpiryTime ensures that no value is present for ExpiryTime, not even an explicit nil
func (o *LicensedUsage) UnsetExpiryTime() {
	o.ExpiryTime.Unset()
}

// GetFeatureName returns the FeatureName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicensedUsage) GetFeatureName() string {
	if o == nil || o.FeatureName.Get() == nil {
		var ret string
		return ret
	}
	return *o.FeatureName.Get()
}

// GetFeatureNameOk returns a tuple with the FeatureName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicensedUsage) GetFeatureNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FeatureName.Get(), o.FeatureName.IsSet()
}

// HasFeatureName returns a boolean if a field has been set.
func (o *LicensedUsage) HasFeatureName() bool {
	if o != nil && o.FeatureName.IsSet() {
		return true
	}

	return false
}

// SetFeatureName gets a reference to the given NullableString and assigns it to the FeatureName field.
func (o *LicensedUsage) SetFeatureName(v string) {
	o.FeatureName.Set(&v)
}
// SetFeatureNameNil sets the value for FeatureName to be an explicit nil
func (o *LicensedUsage) SetFeatureNameNil() {
	o.FeatureName.Set(nil)
}

// UnsetFeatureName ensures that no value is present for FeatureName, not even an explicit nil
func (o *LicensedUsage) UnsetFeatureName() {
	o.FeatureName.Unset()
}

// GetLicenseType returns the LicenseType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicensedUsage) GetLicenseType() string {
	if o == nil || o.LicenseType.Get() == nil {
		var ret string
		return ret
	}
	return *o.LicenseType.Get()
}

// GetLicenseTypeOk returns a tuple with the LicenseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicensedUsage) GetLicenseTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LicenseType.Get(), o.LicenseType.IsSet()
}

// HasLicenseType returns a boolean if a field has been set.
func (o *LicensedUsage) HasLicenseType() bool {
	if o != nil && o.LicenseType.IsSet() {
		return true
	}

	return false
}

// SetLicenseType gets a reference to the given NullableString and assigns it to the LicenseType field.
func (o *LicensedUsage) SetLicenseType(v string) {
	o.LicenseType.Set(&v)
}
// SetLicenseTypeNil sets the value for LicenseType to be an explicit nil
func (o *LicensedUsage) SetLicenseTypeNil() {
	o.LicenseType.Set(nil)
}

// UnsetLicenseType ensures that no value is present for LicenseType, not even an explicit nil
func (o *LicensedUsage) UnsetLicenseType() {
	o.LicenseType.Unset()
}

// GetNumVm returns the NumVm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicensedUsage) GetNumVm() int64 {
	if o == nil || o.NumVm.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NumVm.Get()
}

// GetNumVmOk returns a tuple with the NumVm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicensedUsage) GetNumVmOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumVm.Get(), o.NumVm.IsSet()
}

// HasNumVm returns a boolean if a field has been set.
func (o *LicensedUsage) HasNumVm() bool {
	if o != nil && o.NumVm.IsSet() {
		return true
	}

	return false
}

// SetNumVm gets a reference to the given NullableInt64 and assigns it to the NumVm field.
func (o *LicensedUsage) SetNumVm(v int64) {
	o.NumVm.Set(&v)
}
// SetNumVmNil sets the value for NumVm to be an explicit nil
func (o *LicensedUsage) SetNumVmNil() {
	o.NumVm.Set(nil)
}

// UnsetNumVm ensures that no value is present for NumVm, not even an explicit nil
func (o *LicensedUsage) UnsetNumVm() {
	o.NumVm.Unset()
}

func (o LicensedUsage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CapacityGiB.IsSet() {
		toSerialize["capacityGiB"] = o.CapacityGiB.Get()
	}
	if o.ExpiryTime.IsSet() {
		toSerialize["expiryTime"] = o.ExpiryTime.Get()
	}
	if o.FeatureName.IsSet() {
		toSerialize["featureName"] = o.FeatureName.Get()
	}
	if o.LicenseType.IsSet() {
		toSerialize["licenseType"] = o.LicenseType.Get()
	}
	if o.NumVm.IsSet() {
		toSerialize["numVm"] = o.NumVm.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableLicensedUsage struct {
	value *LicensedUsage
	isSet bool
}

func (v NullableLicensedUsage) Get() *LicensedUsage {
	return v.value
}

func (v *NullableLicensedUsage) Set(val *LicensedUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableLicensedUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableLicensedUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicensedUsage(val *LicensedUsage) *NullableLicensedUsage {
	return &NullableLicensedUsage{value: val, isSet: true}
}

func (v NullableLicensedUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicensedUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


