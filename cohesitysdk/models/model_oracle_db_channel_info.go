/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// OracleDBChannelInfo Note: The name of this proto message is out-dated. This proto can represent more than just the database channel information. It should be renamed in the future.
type OracleDBChannelInfo struct {
	// Archived log deletion policy for this unique Oracle database. 1: keep archived log forever 0: delete archived log immediately n>0: delete archived log after n days
	ArchivelogKeepDays NullableInt32 `json:"archivelogKeepDays,omitempty"`
	// The unique name of the database.
	DbUniqueName NullableString `json:"dbUniqueName,omitempty"`
	// Database id, internal field, is filled by magneto master based on corresponding app entity id.
	DbUuid NullableString `json:"dbUuid,omitempty"`
	// If set to false, and if the DG database role is primary, we will not allow the backup of that database.
	EnableDgPrimaryBackup NullableBool `json:"enableDgPrimaryBackup,omitempty"`
	// Vector of Oracle hosts from which we are allowed to take the backup/restore. In case of RAC database it may be more than one.
	HostInfoVec []OracleDBChannelInfoHostInfo `json:"hostInfoVec,omitempty"`
	// Maximum number of hosts from which we are allowed to take backup/restore parallely. This will be less than or equal to host_info_vec_size. If this is less than host_info_vec_size we will choose max_num_host from host_info_vec and take backup/restore from this number of host.
	MaxNumHost NullableInt32 `json:"maxNumHost,omitempty"`
	// The default number of channels to use per host per db. This value is used on all hosts unless host_info_vec.num_channels is specified for that host. Default value for num_channels will be calculated as minimum number of nodes in cohesity cluster, and 2 * number of cpu on Oracle host. Preference order for number of channels per host for given db is: 1. If user has specified host_info_vec.num_channels for host we will use that. 2. If user has not specified host_info_vec.num_channels but specified num_channels we will use this. 3. If user has neither specified host_info_vec.num_channels nor num_channels we will calculate default channels with above formula.
	NumChannels NullableInt32 `json:"numChannels,omitempty"`
	// Type of Oracle RMAN backup rquested (i.e ImageCopy, BackupSets).
	RmanBackupType NullableInt32 `json:"rmanBackupType,omitempty"`
}

// NewOracleDBChannelInfo instantiates a new OracleDBChannelInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleDBChannelInfo() *OracleDBChannelInfo {
	this := OracleDBChannelInfo{}
	return &this
}

// NewOracleDBChannelInfoWithDefaults instantiates a new OracleDBChannelInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleDBChannelInfoWithDefaults() *OracleDBChannelInfo {
	this := OracleDBChannelInfo{}
	return &this
}

// GetArchivelogKeepDays returns the ArchivelogKeepDays field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDBChannelInfo) GetArchivelogKeepDays() int32 {
	if o == nil || o.ArchivelogKeepDays.Get() == nil {
		var ret int32
		return ret
	}
	return *o.ArchivelogKeepDays.Get()
}

// GetArchivelogKeepDaysOk returns a tuple with the ArchivelogKeepDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDBChannelInfo) GetArchivelogKeepDaysOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ArchivelogKeepDays.Get(), o.ArchivelogKeepDays.IsSet()
}

// HasArchivelogKeepDays returns a boolean if a field has been set.
func (o *OracleDBChannelInfo) HasArchivelogKeepDays() bool {
	if o != nil && o.ArchivelogKeepDays.IsSet() {
		return true
	}

	return false
}

// SetArchivelogKeepDays gets a reference to the given NullableInt32 and assigns it to the ArchivelogKeepDays field.
func (o *OracleDBChannelInfo) SetArchivelogKeepDays(v int32) {
	o.ArchivelogKeepDays.Set(&v)
}
// SetArchivelogKeepDaysNil sets the value for ArchivelogKeepDays to be an explicit nil
func (o *OracleDBChannelInfo) SetArchivelogKeepDaysNil() {
	o.ArchivelogKeepDays.Set(nil)
}

// UnsetArchivelogKeepDays ensures that no value is present for ArchivelogKeepDays, not even an explicit nil
func (o *OracleDBChannelInfo) UnsetArchivelogKeepDays() {
	o.ArchivelogKeepDays.Unset()
}

// GetDbUniqueName returns the DbUniqueName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDBChannelInfo) GetDbUniqueName() string {
	if o == nil || o.DbUniqueName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DbUniqueName.Get()
}

// GetDbUniqueNameOk returns a tuple with the DbUniqueName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDBChannelInfo) GetDbUniqueNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DbUniqueName.Get(), o.DbUniqueName.IsSet()
}

// HasDbUniqueName returns a boolean if a field has been set.
func (o *OracleDBChannelInfo) HasDbUniqueName() bool {
	if o != nil && o.DbUniqueName.IsSet() {
		return true
	}

	return false
}

// SetDbUniqueName gets a reference to the given NullableString and assigns it to the DbUniqueName field.
func (o *OracleDBChannelInfo) SetDbUniqueName(v string) {
	o.DbUniqueName.Set(&v)
}
// SetDbUniqueNameNil sets the value for DbUniqueName to be an explicit nil
func (o *OracleDBChannelInfo) SetDbUniqueNameNil() {
	o.DbUniqueName.Set(nil)
}

// UnsetDbUniqueName ensures that no value is present for DbUniqueName, not even an explicit nil
func (o *OracleDBChannelInfo) UnsetDbUniqueName() {
	o.DbUniqueName.Unset()
}

// GetDbUuid returns the DbUuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDBChannelInfo) GetDbUuid() string {
	if o == nil || o.DbUuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.DbUuid.Get()
}

// GetDbUuidOk returns a tuple with the DbUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDBChannelInfo) GetDbUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DbUuid.Get(), o.DbUuid.IsSet()
}

// HasDbUuid returns a boolean if a field has been set.
func (o *OracleDBChannelInfo) HasDbUuid() bool {
	if o != nil && o.DbUuid.IsSet() {
		return true
	}

	return false
}

// SetDbUuid gets a reference to the given NullableString and assigns it to the DbUuid field.
func (o *OracleDBChannelInfo) SetDbUuid(v string) {
	o.DbUuid.Set(&v)
}
// SetDbUuidNil sets the value for DbUuid to be an explicit nil
func (o *OracleDBChannelInfo) SetDbUuidNil() {
	o.DbUuid.Set(nil)
}

// UnsetDbUuid ensures that no value is present for DbUuid, not even an explicit nil
func (o *OracleDBChannelInfo) UnsetDbUuid() {
	o.DbUuid.Unset()
}

// GetEnableDgPrimaryBackup returns the EnableDgPrimaryBackup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDBChannelInfo) GetEnableDgPrimaryBackup() bool {
	if o == nil || o.EnableDgPrimaryBackup.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableDgPrimaryBackup.Get()
}

// GetEnableDgPrimaryBackupOk returns a tuple with the EnableDgPrimaryBackup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDBChannelInfo) GetEnableDgPrimaryBackupOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableDgPrimaryBackup.Get(), o.EnableDgPrimaryBackup.IsSet()
}

// HasEnableDgPrimaryBackup returns a boolean if a field has been set.
func (o *OracleDBChannelInfo) HasEnableDgPrimaryBackup() bool {
	if o != nil && o.EnableDgPrimaryBackup.IsSet() {
		return true
	}

	return false
}

// SetEnableDgPrimaryBackup gets a reference to the given NullableBool and assigns it to the EnableDgPrimaryBackup field.
func (o *OracleDBChannelInfo) SetEnableDgPrimaryBackup(v bool) {
	o.EnableDgPrimaryBackup.Set(&v)
}
// SetEnableDgPrimaryBackupNil sets the value for EnableDgPrimaryBackup to be an explicit nil
func (o *OracleDBChannelInfo) SetEnableDgPrimaryBackupNil() {
	o.EnableDgPrimaryBackup.Set(nil)
}

// UnsetEnableDgPrimaryBackup ensures that no value is present for EnableDgPrimaryBackup, not even an explicit nil
func (o *OracleDBChannelInfo) UnsetEnableDgPrimaryBackup() {
	o.EnableDgPrimaryBackup.Unset()
}

// GetHostInfoVec returns the HostInfoVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDBChannelInfo) GetHostInfoVec() []OracleDBChannelInfoHostInfo {
	if o == nil  {
		var ret []OracleDBChannelInfoHostInfo
		return ret
	}
	return o.HostInfoVec
}

// GetHostInfoVecOk returns a tuple with the HostInfoVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDBChannelInfo) GetHostInfoVecOk() (*[]OracleDBChannelInfoHostInfo, bool) {
	if o == nil || o.HostInfoVec == nil {
		return nil, false
	}
	return &o.HostInfoVec, true
}

// HasHostInfoVec returns a boolean if a field has been set.
func (o *OracleDBChannelInfo) HasHostInfoVec() bool {
	if o != nil && o.HostInfoVec != nil {
		return true
	}

	return false
}

// SetHostInfoVec gets a reference to the given []OracleDBChannelInfoHostInfo and assigns it to the HostInfoVec field.
func (o *OracleDBChannelInfo) SetHostInfoVec(v []OracleDBChannelInfoHostInfo) {
	o.HostInfoVec = v
}

// GetMaxNumHost returns the MaxNumHost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDBChannelInfo) GetMaxNumHost() int32 {
	if o == nil || o.MaxNumHost.Get() == nil {
		var ret int32
		return ret
	}
	return *o.MaxNumHost.Get()
}

// GetMaxNumHostOk returns a tuple with the MaxNumHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDBChannelInfo) GetMaxNumHostOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MaxNumHost.Get(), o.MaxNumHost.IsSet()
}

// HasMaxNumHost returns a boolean if a field has been set.
func (o *OracleDBChannelInfo) HasMaxNumHost() bool {
	if o != nil && o.MaxNumHost.IsSet() {
		return true
	}

	return false
}

// SetMaxNumHost gets a reference to the given NullableInt32 and assigns it to the MaxNumHost field.
func (o *OracleDBChannelInfo) SetMaxNumHost(v int32) {
	o.MaxNumHost.Set(&v)
}
// SetMaxNumHostNil sets the value for MaxNumHost to be an explicit nil
func (o *OracleDBChannelInfo) SetMaxNumHostNil() {
	o.MaxNumHost.Set(nil)
}

// UnsetMaxNumHost ensures that no value is present for MaxNumHost, not even an explicit nil
func (o *OracleDBChannelInfo) UnsetMaxNumHost() {
	o.MaxNumHost.Unset()
}

// GetNumChannels returns the NumChannels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDBChannelInfo) GetNumChannels() int32 {
	if o == nil || o.NumChannels.Get() == nil {
		var ret int32
		return ret
	}
	return *o.NumChannels.Get()
}

// GetNumChannelsOk returns a tuple with the NumChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDBChannelInfo) GetNumChannelsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumChannels.Get(), o.NumChannels.IsSet()
}

// HasNumChannels returns a boolean if a field has been set.
func (o *OracleDBChannelInfo) HasNumChannels() bool {
	if o != nil && o.NumChannels.IsSet() {
		return true
	}

	return false
}

// SetNumChannels gets a reference to the given NullableInt32 and assigns it to the NumChannels field.
func (o *OracleDBChannelInfo) SetNumChannels(v int32) {
	o.NumChannels.Set(&v)
}
// SetNumChannelsNil sets the value for NumChannels to be an explicit nil
func (o *OracleDBChannelInfo) SetNumChannelsNil() {
	o.NumChannels.Set(nil)
}

// UnsetNumChannels ensures that no value is present for NumChannels, not even an explicit nil
func (o *OracleDBChannelInfo) UnsetNumChannels() {
	o.NumChannels.Unset()
}

// GetRmanBackupType returns the RmanBackupType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDBChannelInfo) GetRmanBackupType() int32 {
	if o == nil || o.RmanBackupType.Get() == nil {
		var ret int32
		return ret
	}
	return *o.RmanBackupType.Get()
}

// GetRmanBackupTypeOk returns a tuple with the RmanBackupType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDBChannelInfo) GetRmanBackupTypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RmanBackupType.Get(), o.RmanBackupType.IsSet()
}

// HasRmanBackupType returns a boolean if a field has been set.
func (o *OracleDBChannelInfo) HasRmanBackupType() bool {
	if o != nil && o.RmanBackupType.IsSet() {
		return true
	}

	return false
}

// SetRmanBackupType gets a reference to the given NullableInt32 and assigns it to the RmanBackupType field.
func (o *OracleDBChannelInfo) SetRmanBackupType(v int32) {
	o.RmanBackupType.Set(&v)
}
// SetRmanBackupTypeNil sets the value for RmanBackupType to be an explicit nil
func (o *OracleDBChannelInfo) SetRmanBackupTypeNil() {
	o.RmanBackupType.Set(nil)
}

// UnsetRmanBackupType ensures that no value is present for RmanBackupType, not even an explicit nil
func (o *OracleDBChannelInfo) UnsetRmanBackupType() {
	o.RmanBackupType.Unset()
}

func (o OracleDBChannelInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ArchivelogKeepDays.IsSet() {
		toSerialize["archivelogKeepDays"] = o.ArchivelogKeepDays.Get()
	}
	if o.DbUniqueName.IsSet() {
		toSerialize["dbUniqueName"] = o.DbUniqueName.Get()
	}
	if o.DbUuid.IsSet() {
		toSerialize["dbUuid"] = o.DbUuid.Get()
	}
	if o.EnableDgPrimaryBackup.IsSet() {
		toSerialize["enableDgPrimaryBackup"] = o.EnableDgPrimaryBackup.Get()
	}
	if o.HostInfoVec != nil {
		toSerialize["hostInfoVec"] = o.HostInfoVec
	}
	if o.MaxNumHost.IsSet() {
		toSerialize["maxNumHost"] = o.MaxNumHost.Get()
	}
	if o.NumChannels.IsSet() {
		toSerialize["numChannels"] = o.NumChannels.Get()
	}
	if o.RmanBackupType.IsSet() {
		toSerialize["rmanBackupType"] = o.RmanBackupType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableOracleDBChannelInfo struct {
	value *OracleDBChannelInfo
	isSet bool
}

func (v NullableOracleDBChannelInfo) Get() *OracleDBChannelInfo {
	return v.value
}

func (v *NullableOracleDBChannelInfo) Set(val *OracleDBChannelInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleDBChannelInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleDBChannelInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleDBChannelInfo(val *OracleDBChannelInfo) *NullableOracleDBChannelInfo {
	return &NullableOracleDBChannelInfo{value: val, isSet: true}
}

func (v NullableOracleDBChannelInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleDBChannelInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


