/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// RestoreOracleAppObjectParams struct for RestoreOracleAppObjectParams
type RestoreOracleAppObjectParams struct {
	AlternateLocationParams *RestoreOracleAppObjectParamsAlternateLocationParams `json:"alternateLocationParams,omitempty"`
	// If set to true, the recovered database will not be opened.
	NoOpenMode NullableBool `json:"noOpenMode,omitempty"`
	// Following field contains information related to view expose workflow. Ex mountpoint identifier specified by User from UI.
	OracleCloneAppViewParamsVec []CloneAppViewParams `json:"oracleCloneAppViewParamsVec,omitempty"`
	OracleTargetParams *OracleSourceParams `json:"oracleTargetParams,omitempty"`
	// If set to true, parallel backups/restores/clones are enabled on same host.
	ParallelOpEnabled NullableBool `json:"parallelOpEnabled,omitempty"`
	// The time to which the Oracle database needs to be restored. This allows for granular recovery of Oracle databases. If this is not set, the Oracle database will be recovered to the full/incremental snapshot (specified in the owner's restore object in AppOwnerRestoreInfo). This is only applicable if restoring to the original Oracle instance.
	RestoreTimeSecs NullableInt64 `json:"restoreTimeSecs,omitempty"`
	ShellEnvironmentVec []RestoreOracleAppObjectParamsKeyValuePair `json:"shellEnvironmentVec,omitempty"`
}

// NewRestoreOracleAppObjectParams instantiates a new RestoreOracleAppObjectParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreOracleAppObjectParams() *RestoreOracleAppObjectParams {
	this := RestoreOracleAppObjectParams{}
	return &this
}

// NewRestoreOracleAppObjectParamsWithDefaults instantiates a new RestoreOracleAppObjectParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreOracleAppObjectParamsWithDefaults() *RestoreOracleAppObjectParams {
	this := RestoreOracleAppObjectParams{}
	return &this
}

// GetAlternateLocationParams returns the AlternateLocationParams field value if set, zero value otherwise.
func (o *RestoreOracleAppObjectParams) GetAlternateLocationParams() RestoreOracleAppObjectParamsAlternateLocationParams {
	if o == nil || o.AlternateLocationParams == nil {
		var ret RestoreOracleAppObjectParamsAlternateLocationParams
		return ret
	}
	return *o.AlternateLocationParams
}

// GetAlternateLocationParamsOk returns a tuple with the AlternateLocationParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreOracleAppObjectParams) GetAlternateLocationParamsOk() (*RestoreOracleAppObjectParamsAlternateLocationParams, bool) {
	if o == nil || o.AlternateLocationParams == nil {
		return nil, false
	}
	return o.AlternateLocationParams, true
}

// HasAlternateLocationParams returns a boolean if a field has been set.
func (o *RestoreOracleAppObjectParams) HasAlternateLocationParams() bool {
	if o != nil && o.AlternateLocationParams != nil {
		return true
	}

	return false
}

// SetAlternateLocationParams gets a reference to the given RestoreOracleAppObjectParamsAlternateLocationParams and assigns it to the AlternateLocationParams field.
func (o *RestoreOracleAppObjectParams) SetAlternateLocationParams(v RestoreOracleAppObjectParamsAlternateLocationParams) {
	o.AlternateLocationParams = &v
}

// GetNoOpenMode returns the NoOpenMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreOracleAppObjectParams) GetNoOpenMode() bool {
	if o == nil || o.NoOpenMode.Get() == nil {
		var ret bool
		return ret
	}
	return *o.NoOpenMode.Get()
}

// GetNoOpenModeOk returns a tuple with the NoOpenMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreOracleAppObjectParams) GetNoOpenModeOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NoOpenMode.Get(), o.NoOpenMode.IsSet()
}

// HasNoOpenMode returns a boolean if a field has been set.
func (o *RestoreOracleAppObjectParams) HasNoOpenMode() bool {
	if o != nil && o.NoOpenMode.IsSet() {
		return true
	}

	return false
}

// SetNoOpenMode gets a reference to the given NullableBool and assigns it to the NoOpenMode field.
func (o *RestoreOracleAppObjectParams) SetNoOpenMode(v bool) {
	o.NoOpenMode.Set(&v)
}
// SetNoOpenModeNil sets the value for NoOpenMode to be an explicit nil
func (o *RestoreOracleAppObjectParams) SetNoOpenModeNil() {
	o.NoOpenMode.Set(nil)
}

// UnsetNoOpenMode ensures that no value is present for NoOpenMode, not even an explicit nil
func (o *RestoreOracleAppObjectParams) UnsetNoOpenMode() {
	o.NoOpenMode.Unset()
}

// GetOracleCloneAppViewParamsVec returns the OracleCloneAppViewParamsVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreOracleAppObjectParams) GetOracleCloneAppViewParamsVec() []CloneAppViewParams {
	if o == nil  {
		var ret []CloneAppViewParams
		return ret
	}
	return o.OracleCloneAppViewParamsVec
}

// GetOracleCloneAppViewParamsVecOk returns a tuple with the OracleCloneAppViewParamsVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreOracleAppObjectParams) GetOracleCloneAppViewParamsVecOk() (*[]CloneAppViewParams, bool) {
	if o == nil || o.OracleCloneAppViewParamsVec == nil {
		return nil, false
	}
	return &o.OracleCloneAppViewParamsVec, true
}

// HasOracleCloneAppViewParamsVec returns a boolean if a field has been set.
func (o *RestoreOracleAppObjectParams) HasOracleCloneAppViewParamsVec() bool {
	if o != nil && o.OracleCloneAppViewParamsVec != nil {
		return true
	}

	return false
}

// SetOracleCloneAppViewParamsVec gets a reference to the given []CloneAppViewParams and assigns it to the OracleCloneAppViewParamsVec field.
func (o *RestoreOracleAppObjectParams) SetOracleCloneAppViewParamsVec(v []CloneAppViewParams) {
	o.OracleCloneAppViewParamsVec = v
}

// GetOracleTargetParams returns the OracleTargetParams field value if set, zero value otherwise.
func (o *RestoreOracleAppObjectParams) GetOracleTargetParams() OracleSourceParams {
	if o == nil || o.OracleTargetParams == nil {
		var ret OracleSourceParams
		return ret
	}
	return *o.OracleTargetParams
}

// GetOracleTargetParamsOk returns a tuple with the OracleTargetParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreOracleAppObjectParams) GetOracleTargetParamsOk() (*OracleSourceParams, bool) {
	if o == nil || o.OracleTargetParams == nil {
		return nil, false
	}
	return o.OracleTargetParams, true
}

// HasOracleTargetParams returns a boolean if a field has been set.
func (o *RestoreOracleAppObjectParams) HasOracleTargetParams() bool {
	if o != nil && o.OracleTargetParams != nil {
		return true
	}

	return false
}

// SetOracleTargetParams gets a reference to the given OracleSourceParams and assigns it to the OracleTargetParams field.
func (o *RestoreOracleAppObjectParams) SetOracleTargetParams(v OracleSourceParams) {
	o.OracleTargetParams = &v
}

// GetParallelOpEnabled returns the ParallelOpEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreOracleAppObjectParams) GetParallelOpEnabled() bool {
	if o == nil || o.ParallelOpEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ParallelOpEnabled.Get()
}

// GetParallelOpEnabledOk returns a tuple with the ParallelOpEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreOracleAppObjectParams) GetParallelOpEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ParallelOpEnabled.Get(), o.ParallelOpEnabled.IsSet()
}

// HasParallelOpEnabled returns a boolean if a field has been set.
func (o *RestoreOracleAppObjectParams) HasParallelOpEnabled() bool {
	if o != nil && o.ParallelOpEnabled.IsSet() {
		return true
	}

	return false
}

// SetParallelOpEnabled gets a reference to the given NullableBool and assigns it to the ParallelOpEnabled field.
func (o *RestoreOracleAppObjectParams) SetParallelOpEnabled(v bool) {
	o.ParallelOpEnabled.Set(&v)
}
// SetParallelOpEnabledNil sets the value for ParallelOpEnabled to be an explicit nil
func (o *RestoreOracleAppObjectParams) SetParallelOpEnabledNil() {
	o.ParallelOpEnabled.Set(nil)
}

// UnsetParallelOpEnabled ensures that no value is present for ParallelOpEnabled, not even an explicit nil
func (o *RestoreOracleAppObjectParams) UnsetParallelOpEnabled() {
	o.ParallelOpEnabled.Unset()
}

// GetRestoreTimeSecs returns the RestoreTimeSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreOracleAppObjectParams) GetRestoreTimeSecs() int64 {
	if o == nil || o.RestoreTimeSecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RestoreTimeSecs.Get()
}

// GetRestoreTimeSecsOk returns a tuple with the RestoreTimeSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreOracleAppObjectParams) GetRestoreTimeSecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RestoreTimeSecs.Get(), o.RestoreTimeSecs.IsSet()
}

// HasRestoreTimeSecs returns a boolean if a field has been set.
func (o *RestoreOracleAppObjectParams) HasRestoreTimeSecs() bool {
	if o != nil && o.RestoreTimeSecs.IsSet() {
		return true
	}

	return false
}

// SetRestoreTimeSecs gets a reference to the given NullableInt64 and assigns it to the RestoreTimeSecs field.
func (o *RestoreOracleAppObjectParams) SetRestoreTimeSecs(v int64) {
	o.RestoreTimeSecs.Set(&v)
}
// SetRestoreTimeSecsNil sets the value for RestoreTimeSecs to be an explicit nil
func (o *RestoreOracleAppObjectParams) SetRestoreTimeSecsNil() {
	o.RestoreTimeSecs.Set(nil)
}

// UnsetRestoreTimeSecs ensures that no value is present for RestoreTimeSecs, not even an explicit nil
func (o *RestoreOracleAppObjectParams) UnsetRestoreTimeSecs() {
	o.RestoreTimeSecs.Unset()
}

// GetShellEnvironmentVec returns the ShellEnvironmentVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreOracleAppObjectParams) GetShellEnvironmentVec() []RestoreOracleAppObjectParamsKeyValuePair {
	if o == nil  {
		var ret []RestoreOracleAppObjectParamsKeyValuePair
		return ret
	}
	return o.ShellEnvironmentVec
}

// GetShellEnvironmentVecOk returns a tuple with the ShellEnvironmentVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreOracleAppObjectParams) GetShellEnvironmentVecOk() (*[]RestoreOracleAppObjectParamsKeyValuePair, bool) {
	if o == nil || o.ShellEnvironmentVec == nil {
		return nil, false
	}
	return &o.ShellEnvironmentVec, true
}

// HasShellEnvironmentVec returns a boolean if a field has been set.
func (o *RestoreOracleAppObjectParams) HasShellEnvironmentVec() bool {
	if o != nil && o.ShellEnvironmentVec != nil {
		return true
	}

	return false
}

// SetShellEnvironmentVec gets a reference to the given []RestoreOracleAppObjectParamsKeyValuePair and assigns it to the ShellEnvironmentVec field.
func (o *RestoreOracleAppObjectParams) SetShellEnvironmentVec(v []RestoreOracleAppObjectParamsKeyValuePair) {
	o.ShellEnvironmentVec = v
}

func (o RestoreOracleAppObjectParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AlternateLocationParams != nil {
		toSerialize["alternateLocationParams"] = o.AlternateLocationParams
	}
	if o.NoOpenMode.IsSet() {
		toSerialize["noOpenMode"] = o.NoOpenMode.Get()
	}
	if o.OracleCloneAppViewParamsVec != nil {
		toSerialize["oracleCloneAppViewParamsVec"] = o.OracleCloneAppViewParamsVec
	}
	if o.OracleTargetParams != nil {
		toSerialize["oracleTargetParams"] = o.OracleTargetParams
	}
	if o.ParallelOpEnabled.IsSet() {
		toSerialize["parallelOpEnabled"] = o.ParallelOpEnabled.Get()
	}
	if o.RestoreTimeSecs.IsSet() {
		toSerialize["restoreTimeSecs"] = o.RestoreTimeSecs.Get()
	}
	if o.ShellEnvironmentVec != nil {
		toSerialize["shellEnvironmentVec"] = o.ShellEnvironmentVec
	}
	return json.Marshal(toSerialize)
}

type NullableRestoreOracleAppObjectParams struct {
	value *RestoreOracleAppObjectParams
	isSet bool
}

func (v NullableRestoreOracleAppObjectParams) Get() *RestoreOracleAppObjectParams {
	return v.value
}

func (v *NullableRestoreOracleAppObjectParams) Set(val *RestoreOracleAppObjectParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreOracleAppObjectParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreOracleAppObjectParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreOracleAppObjectParams(val *RestoreOracleAppObjectParams) *NullableRestoreOracleAppObjectParams {
	return &NullableRestoreOracleAppObjectParams{value: val, isSet: true}
}

func (v NullableRestoreOracleAppObjectParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreOracleAppObjectParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


