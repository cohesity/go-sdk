/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// VMwareBackupSourceParams Message to capture additional backup params for a VMware type source.
type VMwareBackupSourceParams struct {
	SourceAppParams *SourceAppParams `json:"sourceAppParams,omitempty"`
	VmCredentials *Credentials `json:"vmCredentials,omitempty"`
	// List of Virtual Disk(s) to be excluded from the backup job for the source. Overrides the exclusion list requested (if any) through EnvBackupParams.VMwareBackupEnvParams.
	VmwareDiskExclusionInfo []VMwareDiskExclusionProto `json:"vmwareDiskExclusionInfo,omitempty"`
}

// NewVMwareBackupSourceParams instantiates a new VMwareBackupSourceParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVMwareBackupSourceParams() *VMwareBackupSourceParams {
	this := VMwareBackupSourceParams{}
	return &this
}

// NewVMwareBackupSourceParamsWithDefaults instantiates a new VMwareBackupSourceParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVMwareBackupSourceParamsWithDefaults() *VMwareBackupSourceParams {
	this := VMwareBackupSourceParams{}
	return &this
}

// GetSourceAppParams returns the SourceAppParams field value if set, zero value otherwise.
func (o *VMwareBackupSourceParams) GetSourceAppParams() SourceAppParams {
	if o == nil || o.SourceAppParams == nil {
		var ret SourceAppParams
		return ret
	}
	return *o.SourceAppParams
}

// GetSourceAppParamsOk returns a tuple with the SourceAppParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMwareBackupSourceParams) GetSourceAppParamsOk() (*SourceAppParams, bool) {
	if o == nil || o.SourceAppParams == nil {
		return nil, false
	}
	return o.SourceAppParams, true
}

// HasSourceAppParams returns a boolean if a field has been set.
func (o *VMwareBackupSourceParams) HasSourceAppParams() bool {
	if o != nil && o.SourceAppParams != nil {
		return true
	}

	return false
}

// SetSourceAppParams gets a reference to the given SourceAppParams and assigns it to the SourceAppParams field.
func (o *VMwareBackupSourceParams) SetSourceAppParams(v SourceAppParams) {
	o.SourceAppParams = &v
}

// GetVmCredentials returns the VmCredentials field value if set, zero value otherwise.
func (o *VMwareBackupSourceParams) GetVmCredentials() Credentials {
	if o == nil || o.VmCredentials == nil {
		var ret Credentials
		return ret
	}
	return *o.VmCredentials
}

// GetVmCredentialsOk returns a tuple with the VmCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMwareBackupSourceParams) GetVmCredentialsOk() (*Credentials, bool) {
	if o == nil || o.VmCredentials == nil {
		return nil, false
	}
	return o.VmCredentials, true
}

// HasVmCredentials returns a boolean if a field has been set.
func (o *VMwareBackupSourceParams) HasVmCredentials() bool {
	if o != nil && o.VmCredentials != nil {
		return true
	}

	return false
}

// SetVmCredentials gets a reference to the given Credentials and assigns it to the VmCredentials field.
func (o *VMwareBackupSourceParams) SetVmCredentials(v Credentials) {
	o.VmCredentials = &v
}

// GetVmwareDiskExclusionInfo returns the VmwareDiskExclusionInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VMwareBackupSourceParams) GetVmwareDiskExclusionInfo() []VMwareDiskExclusionProto {
	if o == nil  {
		var ret []VMwareDiskExclusionProto
		return ret
	}
	return o.VmwareDiskExclusionInfo
}

// GetVmwareDiskExclusionInfoOk returns a tuple with the VmwareDiskExclusionInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VMwareBackupSourceParams) GetVmwareDiskExclusionInfoOk() (*[]VMwareDiskExclusionProto, bool) {
	if o == nil || o.VmwareDiskExclusionInfo == nil {
		return nil, false
	}
	return &o.VmwareDiskExclusionInfo, true
}

// HasVmwareDiskExclusionInfo returns a boolean if a field has been set.
func (o *VMwareBackupSourceParams) HasVmwareDiskExclusionInfo() bool {
	if o != nil && o.VmwareDiskExclusionInfo != nil {
		return true
	}

	return false
}

// SetVmwareDiskExclusionInfo gets a reference to the given []VMwareDiskExclusionProto and assigns it to the VmwareDiskExclusionInfo field.
func (o *VMwareBackupSourceParams) SetVmwareDiskExclusionInfo(v []VMwareDiskExclusionProto) {
	o.VmwareDiskExclusionInfo = v
}

func (o VMwareBackupSourceParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SourceAppParams != nil {
		toSerialize["sourceAppParams"] = o.SourceAppParams
	}
	if o.VmCredentials != nil {
		toSerialize["vmCredentials"] = o.VmCredentials
	}
	if o.VmwareDiskExclusionInfo != nil {
		toSerialize["vmwareDiskExclusionInfo"] = o.VmwareDiskExclusionInfo
	}
	return json.Marshal(toSerialize)
}

type NullableVMwareBackupSourceParams struct {
	value *VMwareBackupSourceParams
	isSet bool
}

func (v NullableVMwareBackupSourceParams) Get() *VMwareBackupSourceParams {
	return v.value
}

func (v *NullableVMwareBackupSourceParams) Set(val *VMwareBackupSourceParams) {
	v.value = val
	v.isSet = true
}

func (v NullableVMwareBackupSourceParams) IsSet() bool {
	return v.isSet
}

func (v *NullableVMwareBackupSourceParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVMwareBackupSourceParams(val *VMwareBackupSourceParams) *NullableVMwareBackupSourceParams {
	return &NullableVMwareBackupSourceParams{value: val, isSet: true}
}

func (v NullableVMwareBackupSourceParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVMwareBackupSourceParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


