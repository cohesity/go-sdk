/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ProtectionPolicyRequest Specifies information about a Protection Policy.
type ProtectionPolicyRequest struct {
	// Array of Blackout Periods.  If specified, this field defines black periods when new Job Runs are not started. If a Job Run has been scheduled but not yet executed and the blackout period starts, the behavior depends on the policy field AbortInBlackoutPeriod.
	BlackoutPeriods []BlackoutPeriod `json:"blackoutPeriods,omitempty"`
	CdpSchedulingPolicy *SchedulingPolicy `json:"cdpSchedulingPolicy,omitempty"`
	// Array of Cloud Deploy Policies.  Specifies settings for copying Snapshots to Cloud. CloudDeploy target where backup snapshots may be converted and stored. It also defines the retention of copied Snapshots on the Cloud.
	CloudDeployPolicies []SnapshotCloudCopyPolicy `json:"cloudDeployPolicies,omitempty"`
	DatalockConfig *DataLockConfig `json:"datalockConfig,omitempty"`
	DatalockConfigLog *DataLockConfig `json:"datalockConfigLog,omitempty"`
	DatalockConfigSystem *DataLockConfig `json:"datalockConfigSystem,omitempty"`
	// Specifies how many days to retain Snapshots on the Cohesity Cluster.
	DaysToKeep NullableInt64 `json:"daysToKeep,omitempty"`
	// Specifies the number of days to retain log run if Log Schedule exists.
	DaysToKeepLog NullableInt64 `json:"daysToKeepLog,omitempty"`
	// Specifies the number of days to retain system backups made for bare metal recovery. This field is applicable if systemSchedulingPolicy is specified.
	DaysToKeepSystem NullableInt64 `json:"daysToKeepSystem,omitempty"`
	// Description of the Protection Policy.
	Description NullableString `json:"description,omitempty"`
	// Specifies additional retention policies that should be applied to the backup snapshots. A backup snapshot will be retained up to a time that is the maximum of all retention policies that are applicable to it.
	ExtendedRetentionPolicies []ExtendedRetentionPolicy `json:"extendedRetentionPolicies,omitempty"`
	// Specifies the Full (no CBT) backup schedule of a Protection Job and how long Snapshots captured by this schedule are retained on the Cohesity Cluster.
	FullSchedulingPolicy NullableSchedulingPolicy `json:"fullSchedulingPolicy,omitempty"`
	// Specifies the CBT-based backup schedule of a Protection Job and how long Snapshots captured by this schedule are retained on the Cohesity Cluster.
	IncrementalSchedulingPolicy NullableSchedulingPolicy `json:"incrementalSchedulingPolicy,omitempty"`
	LogSchedulingPolicy *SchedulingPolicy `json:"logSchedulingPolicy,omitempty"`
	// Specifies the name of the Protection Policy.
	Name NullableString `json:"name,omitempty"`
	// Species the number of policies linked to a global policy.
	NumLinkedPolicies NullableInt64 `json:"numLinkedPolicies,omitempty"`
	// Specifies the parent global policy Id. This must be specified when creating a policy from global policy template.
	ParentPolicyId NullableString `json:"parentPolicyId,omitempty"`
	// Specifies the number of times to retry capturing Snapshots before the Job Run fails.
	Retries NullableInt32 `json:"retries,omitempty"`
	// Specifies the number of minutes before retrying a failed Protection Job.
	RetryIntervalMins NullableInt32 `json:"retryIntervalMins,omitempty"`
	RpoPolicySettings *RpoPolicySettings `json:"rpoPolicySettings,omitempty"`
	// Specifies the period of time before skipping the execution of new Job Runs if an existing queued Job Run of the same Protection Job has not started. For example if this field is set to 30 minutes and a Job Run is scheduled to start at 5:00 AM every day but does not start due to conflicts (such as too many Jobs are running). If the new Job Run does not start by 5:30AM, the Cohesity Cluster will skip the new Job Run. If the original Job Run completes before 5:30AM the next day, a new Job Run is created and starts executing. This field is optional.
	SkipIntervalMins NullableInt32 `json:"skipIntervalMins,omitempty"`
	// Array of External Targets.  Specifies settings for copying Snapshots to  Archival External Targets (such as AWS or Tape). It also defines the retention of copied Snapshots on an External Targets such as AWS and Tape.
	SnapshotArchivalCopyPolicies []SnapshotArchivalCopyPolicy `json:"snapshotArchivalCopyPolicies,omitempty"`
	// Array of Remote Clusters.  Specifies settings for copying Snapshots to Remote Clusters. It also defines the retention of copied Snapshots on a Remote Cluster.
	SnapshotReplicationCopyPolicies []SnapshotReplicationCopyPolicy `json:"snapshotReplicationCopyPolicies,omitempty"`
	SystemSchedulingPolicy *SchedulingPolicy `json:"systemSchedulingPolicy,omitempty"`
	// Specifies the type of the protection policy. 'kRegular' means a regular Protection Policy. 'kRPO' means an RPO Protection Policy.
	Type NullableString `json:"type,omitempty"`
	// Specifies WORM retention type for the snapshots. When a WORM retention type is specified, the snapshots of the Protection Jobs using this policy will be kept until the maximum of the snapshot retention time. During that time, the snapshots cannot be deleted. This field is deprecated. Use DataLockConfig for incremental runs, DataLockConfigLog for log runs, DataLockConfigSystem for BMR runs, and DataLockConfig in extended retention and for copy targets config. deprecated: true 'kNone' implies there is no WORM retention set. 'kCompliance' implies WORM retention is set for compliance reason. 'kAdministrative' implies WORM retention is set for administrative purposes.
	WormRetentionType NullableString `json:"wormRetentionType,omitempty"`
}

// NewProtectionPolicyRequest instantiates a new ProtectionPolicyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtectionPolicyRequest() *ProtectionPolicyRequest {
	this := ProtectionPolicyRequest{}
	return &this
}

// NewProtectionPolicyRequestWithDefaults instantiates a new ProtectionPolicyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtectionPolicyRequestWithDefaults() *ProtectionPolicyRequest {
	this := ProtectionPolicyRequest{}
	return &this
}

// GetBlackoutPeriods returns the BlackoutPeriods field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionPolicyRequest) GetBlackoutPeriods() []BlackoutPeriod {
	if o == nil  {
		var ret []BlackoutPeriod
		return ret
	}
	return o.BlackoutPeriods
}

// GetBlackoutPeriodsOk returns a tuple with the BlackoutPeriods field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionPolicyRequest) GetBlackoutPeriodsOk() (*[]BlackoutPeriod, bool) {
	if o == nil || o.BlackoutPeriods == nil {
		return nil, false
	}
	return &o.BlackoutPeriods, true
}

// HasBlackoutPeriods returns a boolean if a field has been set.
func (o *ProtectionPolicyRequest) HasBlackoutPeriods() bool {
	if o != nil && o.BlackoutPeriods != nil {
		return true
	}

	return false
}

// SetBlackoutPeriods gets a reference to the given []BlackoutPeriod and assigns it to the BlackoutPeriods field.
func (o *ProtectionPolicyRequest) SetBlackoutPeriods(v []BlackoutPeriod) {
	o.BlackoutPeriods = v
}

// GetCdpSchedulingPolicy returns the CdpSchedulingPolicy field value if set, zero value otherwise.
func (o *ProtectionPolicyRequest) GetCdpSchedulingPolicy() SchedulingPolicy {
	if o == nil || o.CdpSchedulingPolicy == nil {
		var ret SchedulingPolicy
		return ret
	}
	return *o.CdpSchedulingPolicy
}

// GetCdpSchedulingPolicyOk returns a tuple with the CdpSchedulingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectionPolicyRequest) GetCdpSchedulingPolicyOk() (*SchedulingPolicy, bool) {
	if o == nil || o.CdpSchedulingPolicy == nil {
		return nil, false
	}
	return o.CdpSchedulingPolicy, true
}

// HasCdpSchedulingPolicy returns a boolean if a field has been set.
func (o *ProtectionPolicyRequest) HasCdpSchedulingPolicy() bool {
	if o != nil && o.CdpSchedulingPolicy != nil {
		return true
	}

	return false
}

// SetCdpSchedulingPolicy gets a reference to the given SchedulingPolicy and assigns it to the CdpSchedulingPolicy field.
func (o *ProtectionPolicyRequest) SetCdpSchedulingPolicy(v SchedulingPolicy) {
	o.CdpSchedulingPolicy = &v
}

// GetCloudDeployPolicies returns the CloudDeployPolicies field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionPolicyRequest) GetCloudDeployPolicies() []SnapshotCloudCopyPolicy {
	if o == nil  {
		var ret []SnapshotCloudCopyPolicy
		return ret
	}
	return o.CloudDeployPolicies
}

// GetCloudDeployPoliciesOk returns a tuple with the CloudDeployPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionPolicyRequest) GetCloudDeployPoliciesOk() (*[]SnapshotCloudCopyPolicy, bool) {
	if o == nil || o.CloudDeployPolicies == nil {
		return nil, false
	}
	return &o.CloudDeployPolicies, true
}

// HasCloudDeployPolicies returns a boolean if a field has been set.
func (o *ProtectionPolicyRequest) HasCloudDeployPolicies() bool {
	if o != nil && o.CloudDeployPolicies != nil {
		return true
	}

	return false
}

// SetCloudDeployPolicies gets a reference to the given []SnapshotCloudCopyPolicy and assigns it to the CloudDeployPolicies field.
func (o *ProtectionPolicyRequest) SetCloudDeployPolicies(v []SnapshotCloudCopyPolicy) {
	o.CloudDeployPolicies = v
}

// GetDatalockConfig returns the DatalockConfig field value if set, zero value otherwise.
func (o *ProtectionPolicyRequest) GetDatalockConfig() DataLockConfig {
	if o == nil || o.DatalockConfig == nil {
		var ret DataLockConfig
		return ret
	}
	return *o.DatalockConfig
}

// GetDatalockConfigOk returns a tuple with the DatalockConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectionPolicyRequest) GetDatalockConfigOk() (*DataLockConfig, bool) {
	if o == nil || o.DatalockConfig == nil {
		return nil, false
	}
	return o.DatalockConfig, true
}

// HasDatalockConfig returns a boolean if a field has been set.
func (o *ProtectionPolicyRequest) HasDatalockConfig() bool {
	if o != nil && o.DatalockConfig != nil {
		return true
	}

	return false
}

// SetDatalockConfig gets a reference to the given DataLockConfig and assigns it to the DatalockConfig field.
func (o *ProtectionPolicyRequest) SetDatalockConfig(v DataLockConfig) {
	o.DatalockConfig = &v
}

// GetDatalockConfigLog returns the DatalockConfigLog field value if set, zero value otherwise.
func (o *ProtectionPolicyRequest) GetDatalockConfigLog() DataLockConfig {
	if o == nil || o.DatalockConfigLog == nil {
		var ret DataLockConfig
		return ret
	}
	return *o.DatalockConfigLog
}

// GetDatalockConfigLogOk returns a tuple with the DatalockConfigLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectionPolicyRequest) GetDatalockConfigLogOk() (*DataLockConfig, bool) {
	if o == nil || o.DatalockConfigLog == nil {
		return nil, false
	}
	return o.DatalockConfigLog, true
}

// HasDatalockConfigLog returns a boolean if a field has been set.
func (o *ProtectionPolicyRequest) HasDatalockConfigLog() bool {
	if o != nil && o.DatalockConfigLog != nil {
		return true
	}

	return false
}

// SetDatalockConfigLog gets a reference to the given DataLockConfig and assigns it to the DatalockConfigLog field.
func (o *ProtectionPolicyRequest) SetDatalockConfigLog(v DataLockConfig) {
	o.DatalockConfigLog = &v
}

// GetDatalockConfigSystem returns the DatalockConfigSystem field value if set, zero value otherwise.
func (o *ProtectionPolicyRequest) GetDatalockConfigSystem() DataLockConfig {
	if o == nil || o.DatalockConfigSystem == nil {
		var ret DataLockConfig
		return ret
	}
	return *o.DatalockConfigSystem
}

// GetDatalockConfigSystemOk returns a tuple with the DatalockConfigSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectionPolicyRequest) GetDatalockConfigSystemOk() (*DataLockConfig, bool) {
	if o == nil || o.DatalockConfigSystem == nil {
		return nil, false
	}
	return o.DatalockConfigSystem, true
}

// HasDatalockConfigSystem returns a boolean if a field has been set.
func (o *ProtectionPolicyRequest) HasDatalockConfigSystem() bool {
	if o != nil && o.DatalockConfigSystem != nil {
		return true
	}

	return false
}

// SetDatalockConfigSystem gets a reference to the given DataLockConfig and assigns it to the DatalockConfigSystem field.
func (o *ProtectionPolicyRequest) SetDatalockConfigSystem(v DataLockConfig) {
	o.DatalockConfigSystem = &v
}

// GetDaysToKeep returns the DaysToKeep field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionPolicyRequest) GetDaysToKeep() int64 {
	if o == nil || o.DaysToKeep.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DaysToKeep.Get()
}

// GetDaysToKeepOk returns a tuple with the DaysToKeep field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionPolicyRequest) GetDaysToKeepOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DaysToKeep.Get(), o.DaysToKeep.IsSet()
}

// HasDaysToKeep returns a boolean if a field has been set.
func (o *ProtectionPolicyRequest) HasDaysToKeep() bool {
	if o != nil && o.DaysToKeep.IsSet() {
		return true
	}

	return false
}

// SetDaysToKeep gets a reference to the given NullableInt64 and assigns it to the DaysToKeep field.
func (o *ProtectionPolicyRequest) SetDaysToKeep(v int64) {
	o.DaysToKeep.Set(&v)
}
// SetDaysToKeepNil sets the value for DaysToKeep to be an explicit nil
func (o *ProtectionPolicyRequest) SetDaysToKeepNil() {
	o.DaysToKeep.Set(nil)
}

// UnsetDaysToKeep ensures that no value is present for DaysToKeep, not even an explicit nil
func (o *ProtectionPolicyRequest) UnsetDaysToKeep() {
	o.DaysToKeep.Unset()
}

// GetDaysToKeepLog returns the DaysToKeepLog field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionPolicyRequest) GetDaysToKeepLog() int64 {
	if o == nil || o.DaysToKeepLog.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DaysToKeepLog.Get()
}

// GetDaysToKeepLogOk returns a tuple with the DaysToKeepLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionPolicyRequest) GetDaysToKeepLogOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DaysToKeepLog.Get(), o.DaysToKeepLog.IsSet()
}

// HasDaysToKeepLog returns a boolean if a field has been set.
func (o *ProtectionPolicyRequest) HasDaysToKeepLog() bool {
	if o != nil && o.DaysToKeepLog.IsSet() {
		return true
	}

	return false
}

// SetDaysToKeepLog gets a reference to the given NullableInt64 and assigns it to the DaysToKeepLog field.
func (o *ProtectionPolicyRequest) SetDaysToKeepLog(v int64) {
	o.DaysToKeepLog.Set(&v)
}
// SetDaysToKeepLogNil sets the value for DaysToKeepLog to be an explicit nil
func (o *ProtectionPolicyRequest) SetDaysToKeepLogNil() {
	o.DaysToKeepLog.Set(nil)
}

// UnsetDaysToKeepLog ensures that no value is present for DaysToKeepLog, not even an explicit nil
func (o *ProtectionPolicyRequest) UnsetDaysToKeepLog() {
	o.DaysToKeepLog.Unset()
}

// GetDaysToKeepSystem returns the DaysToKeepSystem field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionPolicyRequest) GetDaysToKeepSystem() int64 {
	if o == nil || o.DaysToKeepSystem.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DaysToKeepSystem.Get()
}

// GetDaysToKeepSystemOk returns a tuple with the DaysToKeepSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionPolicyRequest) GetDaysToKeepSystemOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DaysToKeepSystem.Get(), o.DaysToKeepSystem.IsSet()
}

// HasDaysToKeepSystem returns a boolean if a field has been set.
func (o *ProtectionPolicyRequest) HasDaysToKeepSystem() bool {
	if o != nil && o.DaysToKeepSystem.IsSet() {
		return true
	}

	return false
}

// SetDaysToKeepSystem gets a reference to the given NullableInt64 and assigns it to the DaysToKeepSystem field.
func (o *ProtectionPolicyRequest) SetDaysToKeepSystem(v int64) {
	o.DaysToKeepSystem.Set(&v)
}
// SetDaysToKeepSystemNil sets the value for DaysToKeepSystem to be an explicit nil
func (o *ProtectionPolicyRequest) SetDaysToKeepSystemNil() {
	o.DaysToKeepSystem.Set(nil)
}

// UnsetDaysToKeepSystem ensures that no value is present for DaysToKeepSystem, not even an explicit nil
func (o *ProtectionPolicyRequest) UnsetDaysToKeepSystem() {
	o.DaysToKeepSystem.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionPolicyRequest) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionPolicyRequest) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *ProtectionPolicyRequest) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *ProtectionPolicyRequest) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *ProtectionPolicyRequest) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *ProtectionPolicyRequest) UnsetDescription() {
	o.Description.Unset()
}

// GetExtendedRetentionPolicies returns the ExtendedRetentionPolicies field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionPolicyRequest) GetExtendedRetentionPolicies() []ExtendedRetentionPolicy {
	if o == nil  {
		var ret []ExtendedRetentionPolicy
		return ret
	}
	return o.ExtendedRetentionPolicies
}

// GetExtendedRetentionPoliciesOk returns a tuple with the ExtendedRetentionPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionPolicyRequest) GetExtendedRetentionPoliciesOk() (*[]ExtendedRetentionPolicy, bool) {
	if o == nil || o.ExtendedRetentionPolicies == nil {
		return nil, false
	}
	return &o.ExtendedRetentionPolicies, true
}

// HasExtendedRetentionPolicies returns a boolean if a field has been set.
func (o *ProtectionPolicyRequest) HasExtendedRetentionPolicies() bool {
	if o != nil && o.ExtendedRetentionPolicies != nil {
		return true
	}

	return false
}

// SetExtendedRetentionPolicies gets a reference to the given []ExtendedRetentionPolicy and assigns it to the ExtendedRetentionPolicies field.
func (o *ProtectionPolicyRequest) SetExtendedRetentionPolicies(v []ExtendedRetentionPolicy) {
	o.ExtendedRetentionPolicies = v
}

// GetFullSchedulingPolicy returns the FullSchedulingPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionPolicyRequest) GetFullSchedulingPolicy() SchedulingPolicy {
	if o == nil || o.FullSchedulingPolicy.Get() == nil {
		var ret SchedulingPolicy
		return ret
	}
	return *o.FullSchedulingPolicy.Get()
}

// GetFullSchedulingPolicyOk returns a tuple with the FullSchedulingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionPolicyRequest) GetFullSchedulingPolicyOk() (*SchedulingPolicy, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FullSchedulingPolicy.Get(), o.FullSchedulingPolicy.IsSet()
}

// HasFullSchedulingPolicy returns a boolean if a field has been set.
func (o *ProtectionPolicyRequest) HasFullSchedulingPolicy() bool {
	if o != nil && o.FullSchedulingPolicy.IsSet() {
		return true
	}

	return false
}

// SetFullSchedulingPolicy gets a reference to the given NullableSchedulingPolicy and assigns it to the FullSchedulingPolicy field.
func (o *ProtectionPolicyRequest) SetFullSchedulingPolicy(v SchedulingPolicy) {
	o.FullSchedulingPolicy.Set(&v)
}
// SetFullSchedulingPolicyNil sets the value for FullSchedulingPolicy to be an explicit nil
func (o *ProtectionPolicyRequest) SetFullSchedulingPolicyNil() {
	o.FullSchedulingPolicy.Set(nil)
}

// UnsetFullSchedulingPolicy ensures that no value is present for FullSchedulingPolicy, not even an explicit nil
func (o *ProtectionPolicyRequest) UnsetFullSchedulingPolicy() {
	o.FullSchedulingPolicy.Unset()
}

// GetIncrementalSchedulingPolicy returns the IncrementalSchedulingPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionPolicyRequest) GetIncrementalSchedulingPolicy() SchedulingPolicy {
	if o == nil || o.IncrementalSchedulingPolicy.Get() == nil {
		var ret SchedulingPolicy
		return ret
	}
	return *o.IncrementalSchedulingPolicy.Get()
}

// GetIncrementalSchedulingPolicyOk returns a tuple with the IncrementalSchedulingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionPolicyRequest) GetIncrementalSchedulingPolicyOk() (*SchedulingPolicy, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IncrementalSchedulingPolicy.Get(), o.IncrementalSchedulingPolicy.IsSet()
}

// HasIncrementalSchedulingPolicy returns a boolean if a field has been set.
func (o *ProtectionPolicyRequest) HasIncrementalSchedulingPolicy() bool {
	if o != nil && o.IncrementalSchedulingPolicy.IsSet() {
		return true
	}

	return false
}

// SetIncrementalSchedulingPolicy gets a reference to the given NullableSchedulingPolicy and assigns it to the IncrementalSchedulingPolicy field.
func (o *ProtectionPolicyRequest) SetIncrementalSchedulingPolicy(v SchedulingPolicy) {
	o.IncrementalSchedulingPolicy.Set(&v)
}
// SetIncrementalSchedulingPolicyNil sets the value for IncrementalSchedulingPolicy to be an explicit nil
func (o *ProtectionPolicyRequest) SetIncrementalSchedulingPolicyNil() {
	o.IncrementalSchedulingPolicy.Set(nil)
}

// UnsetIncrementalSchedulingPolicy ensures that no value is present for IncrementalSchedulingPolicy, not even an explicit nil
func (o *ProtectionPolicyRequest) UnsetIncrementalSchedulingPolicy() {
	o.IncrementalSchedulingPolicy.Unset()
}

// GetLogSchedulingPolicy returns the LogSchedulingPolicy field value if set, zero value otherwise.
func (o *ProtectionPolicyRequest) GetLogSchedulingPolicy() SchedulingPolicy {
	if o == nil || o.LogSchedulingPolicy == nil {
		var ret SchedulingPolicy
		return ret
	}
	return *o.LogSchedulingPolicy
}

// GetLogSchedulingPolicyOk returns a tuple with the LogSchedulingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectionPolicyRequest) GetLogSchedulingPolicyOk() (*SchedulingPolicy, bool) {
	if o == nil || o.LogSchedulingPolicy == nil {
		return nil, false
	}
	return o.LogSchedulingPolicy, true
}

// HasLogSchedulingPolicy returns a boolean if a field has been set.
func (o *ProtectionPolicyRequest) HasLogSchedulingPolicy() bool {
	if o != nil && o.LogSchedulingPolicy != nil {
		return true
	}

	return false
}

// SetLogSchedulingPolicy gets a reference to the given SchedulingPolicy and assigns it to the LogSchedulingPolicy field.
func (o *ProtectionPolicyRequest) SetLogSchedulingPolicy(v SchedulingPolicy) {
	o.LogSchedulingPolicy = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionPolicyRequest) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionPolicyRequest) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ProtectionPolicyRequest) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ProtectionPolicyRequest) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *ProtectionPolicyRequest) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ProtectionPolicyRequest) UnsetName() {
	o.Name.Unset()
}

// GetNumLinkedPolicies returns the NumLinkedPolicies field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionPolicyRequest) GetNumLinkedPolicies() int64 {
	if o == nil || o.NumLinkedPolicies.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NumLinkedPolicies.Get()
}

// GetNumLinkedPoliciesOk returns a tuple with the NumLinkedPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionPolicyRequest) GetNumLinkedPoliciesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumLinkedPolicies.Get(), o.NumLinkedPolicies.IsSet()
}

// HasNumLinkedPolicies returns a boolean if a field has been set.
func (o *ProtectionPolicyRequest) HasNumLinkedPolicies() bool {
	if o != nil && o.NumLinkedPolicies.IsSet() {
		return true
	}

	return false
}

// SetNumLinkedPolicies gets a reference to the given NullableInt64 and assigns it to the NumLinkedPolicies field.
func (o *ProtectionPolicyRequest) SetNumLinkedPolicies(v int64) {
	o.NumLinkedPolicies.Set(&v)
}
// SetNumLinkedPoliciesNil sets the value for NumLinkedPolicies to be an explicit nil
func (o *ProtectionPolicyRequest) SetNumLinkedPoliciesNil() {
	o.NumLinkedPolicies.Set(nil)
}

// UnsetNumLinkedPolicies ensures that no value is present for NumLinkedPolicies, not even an explicit nil
func (o *ProtectionPolicyRequest) UnsetNumLinkedPolicies() {
	o.NumLinkedPolicies.Unset()
}

// GetParentPolicyId returns the ParentPolicyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionPolicyRequest) GetParentPolicyId() string {
	if o == nil || o.ParentPolicyId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ParentPolicyId.Get()
}

// GetParentPolicyIdOk returns a tuple with the ParentPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionPolicyRequest) GetParentPolicyIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ParentPolicyId.Get(), o.ParentPolicyId.IsSet()
}

// HasParentPolicyId returns a boolean if a field has been set.
func (o *ProtectionPolicyRequest) HasParentPolicyId() bool {
	if o != nil && o.ParentPolicyId.IsSet() {
		return true
	}

	return false
}

// SetParentPolicyId gets a reference to the given NullableString and assigns it to the ParentPolicyId field.
func (o *ProtectionPolicyRequest) SetParentPolicyId(v string) {
	o.ParentPolicyId.Set(&v)
}
// SetParentPolicyIdNil sets the value for ParentPolicyId to be an explicit nil
func (o *ProtectionPolicyRequest) SetParentPolicyIdNil() {
	o.ParentPolicyId.Set(nil)
}

// UnsetParentPolicyId ensures that no value is present for ParentPolicyId, not even an explicit nil
func (o *ProtectionPolicyRequest) UnsetParentPolicyId() {
	o.ParentPolicyId.Unset()
}

// GetRetries returns the Retries field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionPolicyRequest) GetRetries() int32 {
	if o == nil || o.Retries.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Retries.Get()
}

// GetRetriesOk returns a tuple with the Retries field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionPolicyRequest) GetRetriesOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Retries.Get(), o.Retries.IsSet()
}

// HasRetries returns a boolean if a field has been set.
func (o *ProtectionPolicyRequest) HasRetries() bool {
	if o != nil && o.Retries.IsSet() {
		return true
	}

	return false
}

// SetRetries gets a reference to the given NullableInt32 and assigns it to the Retries field.
func (o *ProtectionPolicyRequest) SetRetries(v int32) {
	o.Retries.Set(&v)
}
// SetRetriesNil sets the value for Retries to be an explicit nil
func (o *ProtectionPolicyRequest) SetRetriesNil() {
	o.Retries.Set(nil)
}

// UnsetRetries ensures that no value is present for Retries, not even an explicit nil
func (o *ProtectionPolicyRequest) UnsetRetries() {
	o.Retries.Unset()
}

// GetRetryIntervalMins returns the RetryIntervalMins field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionPolicyRequest) GetRetryIntervalMins() int32 {
	if o == nil || o.RetryIntervalMins.Get() == nil {
		var ret int32
		return ret
	}
	return *o.RetryIntervalMins.Get()
}

// GetRetryIntervalMinsOk returns a tuple with the RetryIntervalMins field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionPolicyRequest) GetRetryIntervalMinsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RetryIntervalMins.Get(), o.RetryIntervalMins.IsSet()
}

// HasRetryIntervalMins returns a boolean if a field has been set.
func (o *ProtectionPolicyRequest) HasRetryIntervalMins() bool {
	if o != nil && o.RetryIntervalMins.IsSet() {
		return true
	}

	return false
}

// SetRetryIntervalMins gets a reference to the given NullableInt32 and assigns it to the RetryIntervalMins field.
func (o *ProtectionPolicyRequest) SetRetryIntervalMins(v int32) {
	o.RetryIntervalMins.Set(&v)
}
// SetRetryIntervalMinsNil sets the value for RetryIntervalMins to be an explicit nil
func (o *ProtectionPolicyRequest) SetRetryIntervalMinsNil() {
	o.RetryIntervalMins.Set(nil)
}

// UnsetRetryIntervalMins ensures that no value is present for RetryIntervalMins, not even an explicit nil
func (o *ProtectionPolicyRequest) UnsetRetryIntervalMins() {
	o.RetryIntervalMins.Unset()
}

// GetRpoPolicySettings returns the RpoPolicySettings field value if set, zero value otherwise.
func (o *ProtectionPolicyRequest) GetRpoPolicySettings() RpoPolicySettings {
	if o == nil || o.RpoPolicySettings == nil {
		var ret RpoPolicySettings
		return ret
	}
	return *o.RpoPolicySettings
}

// GetRpoPolicySettingsOk returns a tuple with the RpoPolicySettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectionPolicyRequest) GetRpoPolicySettingsOk() (*RpoPolicySettings, bool) {
	if o == nil || o.RpoPolicySettings == nil {
		return nil, false
	}
	return o.RpoPolicySettings, true
}

// HasRpoPolicySettings returns a boolean if a field has been set.
func (o *ProtectionPolicyRequest) HasRpoPolicySettings() bool {
	if o != nil && o.RpoPolicySettings != nil {
		return true
	}

	return false
}

// SetRpoPolicySettings gets a reference to the given RpoPolicySettings and assigns it to the RpoPolicySettings field.
func (o *ProtectionPolicyRequest) SetRpoPolicySettings(v RpoPolicySettings) {
	o.RpoPolicySettings = &v
}

// GetSkipIntervalMins returns the SkipIntervalMins field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionPolicyRequest) GetSkipIntervalMins() int32 {
	if o == nil || o.SkipIntervalMins.Get() == nil {
		var ret int32
		return ret
	}
	return *o.SkipIntervalMins.Get()
}

// GetSkipIntervalMinsOk returns a tuple with the SkipIntervalMins field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionPolicyRequest) GetSkipIntervalMinsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SkipIntervalMins.Get(), o.SkipIntervalMins.IsSet()
}

// HasSkipIntervalMins returns a boolean if a field has been set.
func (o *ProtectionPolicyRequest) HasSkipIntervalMins() bool {
	if o != nil && o.SkipIntervalMins.IsSet() {
		return true
	}

	return false
}

// SetSkipIntervalMins gets a reference to the given NullableInt32 and assigns it to the SkipIntervalMins field.
func (o *ProtectionPolicyRequest) SetSkipIntervalMins(v int32) {
	o.SkipIntervalMins.Set(&v)
}
// SetSkipIntervalMinsNil sets the value for SkipIntervalMins to be an explicit nil
func (o *ProtectionPolicyRequest) SetSkipIntervalMinsNil() {
	o.SkipIntervalMins.Set(nil)
}

// UnsetSkipIntervalMins ensures that no value is present for SkipIntervalMins, not even an explicit nil
func (o *ProtectionPolicyRequest) UnsetSkipIntervalMins() {
	o.SkipIntervalMins.Unset()
}

// GetSnapshotArchivalCopyPolicies returns the SnapshotArchivalCopyPolicies field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionPolicyRequest) GetSnapshotArchivalCopyPolicies() []SnapshotArchivalCopyPolicy {
	if o == nil  {
		var ret []SnapshotArchivalCopyPolicy
		return ret
	}
	return o.SnapshotArchivalCopyPolicies
}

// GetSnapshotArchivalCopyPoliciesOk returns a tuple with the SnapshotArchivalCopyPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionPolicyRequest) GetSnapshotArchivalCopyPoliciesOk() (*[]SnapshotArchivalCopyPolicy, bool) {
	if o == nil || o.SnapshotArchivalCopyPolicies == nil {
		return nil, false
	}
	return &o.SnapshotArchivalCopyPolicies, true
}

// HasSnapshotArchivalCopyPolicies returns a boolean if a field has been set.
func (o *ProtectionPolicyRequest) HasSnapshotArchivalCopyPolicies() bool {
	if o != nil && o.SnapshotArchivalCopyPolicies != nil {
		return true
	}

	return false
}

// SetSnapshotArchivalCopyPolicies gets a reference to the given []SnapshotArchivalCopyPolicy and assigns it to the SnapshotArchivalCopyPolicies field.
func (o *ProtectionPolicyRequest) SetSnapshotArchivalCopyPolicies(v []SnapshotArchivalCopyPolicy) {
	o.SnapshotArchivalCopyPolicies = v
}

// GetSnapshotReplicationCopyPolicies returns the SnapshotReplicationCopyPolicies field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionPolicyRequest) GetSnapshotReplicationCopyPolicies() []SnapshotReplicationCopyPolicy {
	if o == nil  {
		var ret []SnapshotReplicationCopyPolicy
		return ret
	}
	return o.SnapshotReplicationCopyPolicies
}

// GetSnapshotReplicationCopyPoliciesOk returns a tuple with the SnapshotReplicationCopyPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionPolicyRequest) GetSnapshotReplicationCopyPoliciesOk() (*[]SnapshotReplicationCopyPolicy, bool) {
	if o == nil || o.SnapshotReplicationCopyPolicies == nil {
		return nil, false
	}
	return &o.SnapshotReplicationCopyPolicies, true
}

// HasSnapshotReplicationCopyPolicies returns a boolean if a field has been set.
func (o *ProtectionPolicyRequest) HasSnapshotReplicationCopyPolicies() bool {
	if o != nil && o.SnapshotReplicationCopyPolicies != nil {
		return true
	}

	return false
}

// SetSnapshotReplicationCopyPolicies gets a reference to the given []SnapshotReplicationCopyPolicy and assigns it to the SnapshotReplicationCopyPolicies field.
func (o *ProtectionPolicyRequest) SetSnapshotReplicationCopyPolicies(v []SnapshotReplicationCopyPolicy) {
	o.SnapshotReplicationCopyPolicies = v
}

// GetSystemSchedulingPolicy returns the SystemSchedulingPolicy field value if set, zero value otherwise.
func (o *ProtectionPolicyRequest) GetSystemSchedulingPolicy() SchedulingPolicy {
	if o == nil || o.SystemSchedulingPolicy == nil {
		var ret SchedulingPolicy
		return ret
	}
	return *o.SystemSchedulingPolicy
}

// GetSystemSchedulingPolicyOk returns a tuple with the SystemSchedulingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectionPolicyRequest) GetSystemSchedulingPolicyOk() (*SchedulingPolicy, bool) {
	if o == nil || o.SystemSchedulingPolicy == nil {
		return nil, false
	}
	return o.SystemSchedulingPolicy, true
}

// HasSystemSchedulingPolicy returns a boolean if a field has been set.
func (o *ProtectionPolicyRequest) HasSystemSchedulingPolicy() bool {
	if o != nil && o.SystemSchedulingPolicy != nil {
		return true
	}

	return false
}

// SetSystemSchedulingPolicy gets a reference to the given SchedulingPolicy and assigns it to the SystemSchedulingPolicy field.
func (o *ProtectionPolicyRequest) SetSystemSchedulingPolicy(v SchedulingPolicy) {
	o.SystemSchedulingPolicy = &v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionPolicyRequest) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionPolicyRequest) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *ProtectionPolicyRequest) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *ProtectionPolicyRequest) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *ProtectionPolicyRequest) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *ProtectionPolicyRequest) UnsetType() {
	o.Type.Unset()
}

// GetWormRetentionType returns the WormRetentionType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionPolicyRequest) GetWormRetentionType() string {
	if o == nil || o.WormRetentionType.Get() == nil {
		var ret string
		return ret
	}
	return *o.WormRetentionType.Get()
}

// GetWormRetentionTypeOk returns a tuple with the WormRetentionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionPolicyRequest) GetWormRetentionTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.WormRetentionType.Get(), o.WormRetentionType.IsSet()
}

// HasWormRetentionType returns a boolean if a field has been set.
func (o *ProtectionPolicyRequest) HasWormRetentionType() bool {
	if o != nil && o.WormRetentionType.IsSet() {
		return true
	}

	return false
}

// SetWormRetentionType gets a reference to the given NullableString and assigns it to the WormRetentionType field.
func (o *ProtectionPolicyRequest) SetWormRetentionType(v string) {
	o.WormRetentionType.Set(&v)
}
// SetWormRetentionTypeNil sets the value for WormRetentionType to be an explicit nil
func (o *ProtectionPolicyRequest) SetWormRetentionTypeNil() {
	o.WormRetentionType.Set(nil)
}

// UnsetWormRetentionType ensures that no value is present for WormRetentionType, not even an explicit nil
func (o *ProtectionPolicyRequest) UnsetWormRetentionType() {
	o.WormRetentionType.Unset()
}

func (o ProtectionPolicyRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BlackoutPeriods != nil {
		toSerialize["blackoutPeriods"] = o.BlackoutPeriods
	}
	if o.CdpSchedulingPolicy != nil {
		toSerialize["cdpSchedulingPolicy"] = o.CdpSchedulingPolicy
	}
	if o.CloudDeployPolicies != nil {
		toSerialize["cloudDeployPolicies"] = o.CloudDeployPolicies
	}
	if o.DatalockConfig != nil {
		toSerialize["datalockConfig"] = o.DatalockConfig
	}
	if o.DatalockConfigLog != nil {
		toSerialize["datalockConfigLog"] = o.DatalockConfigLog
	}
	if o.DatalockConfigSystem != nil {
		toSerialize["datalockConfigSystem"] = o.DatalockConfigSystem
	}
	if o.DaysToKeep.IsSet() {
		toSerialize["daysToKeep"] = o.DaysToKeep.Get()
	}
	if o.DaysToKeepLog.IsSet() {
		toSerialize["daysToKeepLog"] = o.DaysToKeepLog.Get()
	}
	if o.DaysToKeepSystem.IsSet() {
		toSerialize["daysToKeepSystem"] = o.DaysToKeepSystem.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.ExtendedRetentionPolicies != nil {
		toSerialize["extendedRetentionPolicies"] = o.ExtendedRetentionPolicies
	}
	if o.FullSchedulingPolicy.IsSet() {
		toSerialize["fullSchedulingPolicy"] = o.FullSchedulingPolicy.Get()
	}
	if o.IncrementalSchedulingPolicy.IsSet() {
		toSerialize["incrementalSchedulingPolicy"] = o.IncrementalSchedulingPolicy.Get()
	}
	if o.LogSchedulingPolicy != nil {
		toSerialize["logSchedulingPolicy"] = o.LogSchedulingPolicy
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.NumLinkedPolicies.IsSet() {
		toSerialize["numLinkedPolicies"] = o.NumLinkedPolicies.Get()
	}
	if o.ParentPolicyId.IsSet() {
		toSerialize["parentPolicyId"] = o.ParentPolicyId.Get()
	}
	if o.Retries.IsSet() {
		toSerialize["retries"] = o.Retries.Get()
	}
	if o.RetryIntervalMins.IsSet() {
		toSerialize["retryIntervalMins"] = o.RetryIntervalMins.Get()
	}
	if o.RpoPolicySettings != nil {
		toSerialize["rpoPolicySettings"] = o.RpoPolicySettings
	}
	if o.SkipIntervalMins.IsSet() {
		toSerialize["skipIntervalMins"] = o.SkipIntervalMins.Get()
	}
	if o.SnapshotArchivalCopyPolicies != nil {
		toSerialize["snapshotArchivalCopyPolicies"] = o.SnapshotArchivalCopyPolicies
	}
	if o.SnapshotReplicationCopyPolicies != nil {
		toSerialize["snapshotReplicationCopyPolicies"] = o.SnapshotReplicationCopyPolicies
	}
	if o.SystemSchedulingPolicy != nil {
		toSerialize["systemSchedulingPolicy"] = o.SystemSchedulingPolicy
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.WormRetentionType.IsSet() {
		toSerialize["wormRetentionType"] = o.WormRetentionType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableProtectionPolicyRequest struct {
	value *ProtectionPolicyRequest
	isSet bool
}

func (v NullableProtectionPolicyRequest) Get() *ProtectionPolicyRequest {
	return v.value
}

func (v *NullableProtectionPolicyRequest) Set(val *ProtectionPolicyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableProtectionPolicyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableProtectionPolicyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtectionPolicyRequest(val *ProtectionPolicyRequest) *NullableProtectionPolicyRequest {
	return &NullableProtectionPolicyRequest{value: val, isSet: true}
}

func (v NullableProtectionPolicyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtectionPolicyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


