/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// Role Specifies information about role such as the category, privileges, description, etc. A role can be a default system role or a custom role. Custom roles are user-defined roles that are created using the Cohesity Dashboard, the REST API or the CLI. System roles are provided by default on the Cohesity Cluster.
type Role struct {
	// Specifies the epoch time in milliseconds when the role was created.
	CreatedTimeMsecs NullableInt64 `json:"createdTimeMsecs,omitempty"`
	// Specifies a description about the role.
	Description NullableString `json:"description,omitempty"`
	// Specifies if the role is a user-defined custom role. If true, the role is a user-defined custom role that was created using the REST API, the Cohesity Dashboard or the CLI. If false, the role is a default system role that was created during Cluster creation.
	IsCustomRole NullableBool `json:"isCustomRole,omitempty"`
	// Specifies the label for the role as displayed on the Cohesity Dashboard such as 'Viewer'.
	Label NullableString `json:"label,omitempty"`
	// Specifies the epoch time in milliseconds when the role was last modified.
	LastUpdatedTimeMsecs NullableInt64 `json:"lastUpdatedTimeMsecs,omitempty"`
	// Specifies the internal Cluster name for the role such as COHESITY_VIEWER. For custom roles, the name and the label are the same. For default system roles, the name and label are different.
	Name NullableString `json:"name,omitempty"`
	// Array of Privileges.  Specifies the privileges assigned to the role. When a user or group is assigned this role, these privileges define the operations the user or group can perform on the Cohesity Cluster.
	Privileges []string `json:"privileges,omitempty"`
	// Specifies unique id of the tenant owning the role.
	TenantId NullableString `json:"tenantId,omitempty"`
	// Specifies id of tenants using this role.
	TenantIds []string `json:"tenantIds,omitempty"`
}

// NewRole instantiates a new Role object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRole() *Role {
	this := Role{}
	return &this
}

// NewRoleWithDefaults instantiates a new Role object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleWithDefaults() *Role {
	this := Role{}
	return &this
}

// GetCreatedTimeMsecs returns the CreatedTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Role) GetCreatedTimeMsecs() int64 {
	if o == nil || o.CreatedTimeMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.CreatedTimeMsecs.Get()
}

// GetCreatedTimeMsecsOk returns a tuple with the CreatedTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Role) GetCreatedTimeMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CreatedTimeMsecs.Get(), o.CreatedTimeMsecs.IsSet()
}

// HasCreatedTimeMsecs returns a boolean if a field has been set.
func (o *Role) HasCreatedTimeMsecs() bool {
	if o != nil && o.CreatedTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetCreatedTimeMsecs gets a reference to the given NullableInt64 and assigns it to the CreatedTimeMsecs field.
func (o *Role) SetCreatedTimeMsecs(v int64) {
	o.CreatedTimeMsecs.Set(&v)
}
// SetCreatedTimeMsecsNil sets the value for CreatedTimeMsecs to be an explicit nil
func (o *Role) SetCreatedTimeMsecsNil() {
	o.CreatedTimeMsecs.Set(nil)
}

// UnsetCreatedTimeMsecs ensures that no value is present for CreatedTimeMsecs, not even an explicit nil
func (o *Role) UnsetCreatedTimeMsecs() {
	o.CreatedTimeMsecs.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Role) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Role) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *Role) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *Role) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *Role) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *Role) UnsetDescription() {
	o.Description.Unset()
}

// GetIsCustomRole returns the IsCustomRole field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Role) GetIsCustomRole() bool {
	if o == nil || o.IsCustomRole.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsCustomRole.Get()
}

// GetIsCustomRoleOk returns a tuple with the IsCustomRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Role) GetIsCustomRoleOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsCustomRole.Get(), o.IsCustomRole.IsSet()
}

// HasIsCustomRole returns a boolean if a field has been set.
func (o *Role) HasIsCustomRole() bool {
	if o != nil && o.IsCustomRole.IsSet() {
		return true
	}

	return false
}

// SetIsCustomRole gets a reference to the given NullableBool and assigns it to the IsCustomRole field.
func (o *Role) SetIsCustomRole(v bool) {
	o.IsCustomRole.Set(&v)
}
// SetIsCustomRoleNil sets the value for IsCustomRole to be an explicit nil
func (o *Role) SetIsCustomRoleNil() {
	o.IsCustomRole.Set(nil)
}

// UnsetIsCustomRole ensures that no value is present for IsCustomRole, not even an explicit nil
func (o *Role) UnsetIsCustomRole() {
	o.IsCustomRole.Unset()
}

// GetLabel returns the Label field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Role) GetLabel() string {
	if o == nil || o.Label.Get() == nil {
		var ret string
		return ret
	}
	return *o.Label.Get()
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Role) GetLabelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Label.Get(), o.Label.IsSet()
}

// HasLabel returns a boolean if a field has been set.
func (o *Role) HasLabel() bool {
	if o != nil && o.Label.IsSet() {
		return true
	}

	return false
}

// SetLabel gets a reference to the given NullableString and assigns it to the Label field.
func (o *Role) SetLabel(v string) {
	o.Label.Set(&v)
}
// SetLabelNil sets the value for Label to be an explicit nil
func (o *Role) SetLabelNil() {
	o.Label.Set(nil)
}

// UnsetLabel ensures that no value is present for Label, not even an explicit nil
func (o *Role) UnsetLabel() {
	o.Label.Unset()
}

// GetLastUpdatedTimeMsecs returns the LastUpdatedTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Role) GetLastUpdatedTimeMsecs() int64 {
	if o == nil || o.LastUpdatedTimeMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LastUpdatedTimeMsecs.Get()
}

// GetLastUpdatedTimeMsecsOk returns a tuple with the LastUpdatedTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Role) GetLastUpdatedTimeMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastUpdatedTimeMsecs.Get(), o.LastUpdatedTimeMsecs.IsSet()
}

// HasLastUpdatedTimeMsecs returns a boolean if a field has been set.
func (o *Role) HasLastUpdatedTimeMsecs() bool {
	if o != nil && o.LastUpdatedTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetLastUpdatedTimeMsecs gets a reference to the given NullableInt64 and assigns it to the LastUpdatedTimeMsecs field.
func (o *Role) SetLastUpdatedTimeMsecs(v int64) {
	o.LastUpdatedTimeMsecs.Set(&v)
}
// SetLastUpdatedTimeMsecsNil sets the value for LastUpdatedTimeMsecs to be an explicit nil
func (o *Role) SetLastUpdatedTimeMsecsNil() {
	o.LastUpdatedTimeMsecs.Set(nil)
}

// UnsetLastUpdatedTimeMsecs ensures that no value is present for LastUpdatedTimeMsecs, not even an explicit nil
func (o *Role) UnsetLastUpdatedTimeMsecs() {
	o.LastUpdatedTimeMsecs.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Role) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Role) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Role) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *Role) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *Role) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Role) UnsetName() {
	o.Name.Unset()
}

// GetPrivileges returns the Privileges field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Role) GetPrivileges() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Privileges
}

// GetPrivilegesOk returns a tuple with the Privileges field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Role) GetPrivilegesOk() (*[]string, bool) {
	if o == nil || o.Privileges == nil {
		return nil, false
	}
	return &o.Privileges, true
}

// HasPrivileges returns a boolean if a field has been set.
func (o *Role) HasPrivileges() bool {
	if o != nil && o.Privileges != nil {
		return true
	}

	return false
}

// SetPrivileges gets a reference to the given []string and assigns it to the Privileges field.
func (o *Role) SetPrivileges(v []string) {
	o.Privileges = v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Role) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Role) GetTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *Role) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *Role) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *Role) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *Role) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetTenantIds returns the TenantIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Role) GetTenantIds() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.TenantIds
}

// GetTenantIdsOk returns a tuple with the TenantIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Role) GetTenantIdsOk() (*[]string, bool) {
	if o == nil || o.TenantIds == nil {
		return nil, false
	}
	return &o.TenantIds, true
}

// HasTenantIds returns a boolean if a field has been set.
func (o *Role) HasTenantIds() bool {
	if o != nil && o.TenantIds != nil {
		return true
	}

	return false
}

// SetTenantIds gets a reference to the given []string and assigns it to the TenantIds field.
func (o *Role) SetTenantIds(v []string) {
	o.TenantIds = v
}

func (o Role) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedTimeMsecs.IsSet() {
		toSerialize["createdTimeMsecs"] = o.CreatedTimeMsecs.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.IsCustomRole.IsSet() {
		toSerialize["isCustomRole"] = o.IsCustomRole.Get()
	}
	if o.Label.IsSet() {
		toSerialize["label"] = o.Label.Get()
	}
	if o.LastUpdatedTimeMsecs.IsSet() {
		toSerialize["lastUpdatedTimeMsecs"] = o.LastUpdatedTimeMsecs.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Privileges != nil {
		toSerialize["privileges"] = o.Privileges
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.TenantIds != nil {
		toSerialize["tenantIds"] = o.TenantIds
	}
	return json.Marshal(toSerialize)
}

type NullableRole struct {
	value *Role
	isSet bool
}

func (v NullableRole) Get() *Role {
	return v.value
}

func (v *NullableRole) Set(val *Role) {
	v.value = val
	v.isSet = true
}

func (v NullableRole) IsSet() bool {
	return v.isSet
}

func (v *NullableRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRole(val *Role) *NullableRole {
	return &NullableRole{value: val, isSet: true}
}

func (v NullableRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


