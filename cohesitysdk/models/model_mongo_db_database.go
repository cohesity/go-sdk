/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// MongoDBDatabase Specifies an Object containing information about a mongodb database.
type MongoDBDatabase struct {
	// Size of this Database.
	SizeBytes NullableInt64 `json:"sizeBytes,omitempty"`
}

// NewMongoDBDatabase instantiates a new MongoDBDatabase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMongoDBDatabase() *MongoDBDatabase {
	this := MongoDBDatabase{}
	return &this
}

// NewMongoDBDatabaseWithDefaults instantiates a new MongoDBDatabase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMongoDBDatabaseWithDefaults() *MongoDBDatabase {
	this := MongoDBDatabase{}
	return &this
}

// GetSizeBytes returns the SizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MongoDBDatabase) GetSizeBytes() int64 {
	if o == nil || o.SizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SizeBytes.Get()
}

// GetSizeBytesOk returns a tuple with the SizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MongoDBDatabase) GetSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SizeBytes.Get(), o.SizeBytes.IsSet()
}

// HasSizeBytes returns a boolean if a field has been set.
func (o *MongoDBDatabase) HasSizeBytes() bool {
	if o != nil && o.SizeBytes.IsSet() {
		return true
	}

	return false
}

// SetSizeBytes gets a reference to the given NullableInt64 and assigns it to the SizeBytes field.
func (o *MongoDBDatabase) SetSizeBytes(v int64) {
	o.SizeBytes.Set(&v)
}
// SetSizeBytesNil sets the value for SizeBytes to be an explicit nil
func (o *MongoDBDatabase) SetSizeBytesNil() {
	o.SizeBytes.Set(nil)
}

// UnsetSizeBytes ensures that no value is present for SizeBytes, not even an explicit nil
func (o *MongoDBDatabase) UnsetSizeBytes() {
	o.SizeBytes.Unset()
}

func (o MongoDBDatabase) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SizeBytes.IsSet() {
		toSerialize["sizeBytes"] = o.SizeBytes.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMongoDBDatabase struct {
	value *MongoDBDatabase
	isSet bool
}

func (v NullableMongoDBDatabase) Get() *MongoDBDatabase {
	return v.value
}

func (v *NullableMongoDBDatabase) Set(val *MongoDBDatabase) {
	v.value = val
	v.isSet = true
}

func (v NullableMongoDBDatabase) IsSet() bool {
	return v.isSet
}

func (v *NullableMongoDBDatabase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMongoDBDatabase(val *MongoDBDatabase) *NullableMongoDBDatabase {
	return &NullableMongoDBDatabase{value: val, isSet: true}
}

func (v NullableMongoDBDatabase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMongoDBDatabase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


