/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// FleetNetworkParams Specifies the various network params for the fleet.
type FleetNetworkParams struct {
	// Specifies the region for the fleet.
	Region NullableString `json:"region,omitempty"`
	// Specifies the subnet for the fleet.
	Subnet NullableString `json:"subnet,omitempty"`
	// Specifies the vpc for the fleet.
	Vpc NullableString `json:"vpc,omitempty"`
}

// NewFleetNetworkParams instantiates a new FleetNetworkParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFleetNetworkParams() *FleetNetworkParams {
	this := FleetNetworkParams{}
	return &this
}

// NewFleetNetworkParamsWithDefaults instantiates a new FleetNetworkParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFleetNetworkParamsWithDefaults() *FleetNetworkParams {
	this := FleetNetworkParams{}
	return &this
}

// GetRegion returns the Region field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FleetNetworkParams) GetRegion() string {
	if o == nil || o.Region.Get() == nil {
		var ret string
		return ret
	}
	return *o.Region.Get()
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FleetNetworkParams) GetRegionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Region.Get(), o.Region.IsSet()
}

// HasRegion returns a boolean if a field has been set.
func (o *FleetNetworkParams) HasRegion() bool {
	if o != nil && o.Region.IsSet() {
		return true
	}

	return false
}

// SetRegion gets a reference to the given NullableString and assigns it to the Region field.
func (o *FleetNetworkParams) SetRegion(v string) {
	o.Region.Set(&v)
}
// SetRegionNil sets the value for Region to be an explicit nil
func (o *FleetNetworkParams) SetRegionNil() {
	o.Region.Set(nil)
}

// UnsetRegion ensures that no value is present for Region, not even an explicit nil
func (o *FleetNetworkParams) UnsetRegion() {
	o.Region.Unset()
}

// GetSubnet returns the Subnet field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FleetNetworkParams) GetSubnet() string {
	if o == nil || o.Subnet.Get() == nil {
		var ret string
		return ret
	}
	return *o.Subnet.Get()
}

// GetSubnetOk returns a tuple with the Subnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FleetNetworkParams) GetSubnetOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Subnet.Get(), o.Subnet.IsSet()
}

// HasSubnet returns a boolean if a field has been set.
func (o *FleetNetworkParams) HasSubnet() bool {
	if o != nil && o.Subnet.IsSet() {
		return true
	}

	return false
}

// SetSubnet gets a reference to the given NullableString and assigns it to the Subnet field.
func (o *FleetNetworkParams) SetSubnet(v string) {
	o.Subnet.Set(&v)
}
// SetSubnetNil sets the value for Subnet to be an explicit nil
func (o *FleetNetworkParams) SetSubnetNil() {
	o.Subnet.Set(nil)
}

// UnsetSubnet ensures that no value is present for Subnet, not even an explicit nil
func (o *FleetNetworkParams) UnsetSubnet() {
	o.Subnet.Unset()
}

// GetVpc returns the Vpc field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FleetNetworkParams) GetVpc() string {
	if o == nil || o.Vpc.Get() == nil {
		var ret string
		return ret
	}
	return *o.Vpc.Get()
}

// GetVpcOk returns a tuple with the Vpc field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FleetNetworkParams) GetVpcOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Vpc.Get(), o.Vpc.IsSet()
}

// HasVpc returns a boolean if a field has been set.
func (o *FleetNetworkParams) HasVpc() bool {
	if o != nil && o.Vpc.IsSet() {
		return true
	}

	return false
}

// SetVpc gets a reference to the given NullableString and assigns it to the Vpc field.
func (o *FleetNetworkParams) SetVpc(v string) {
	o.Vpc.Set(&v)
}
// SetVpcNil sets the value for Vpc to be an explicit nil
func (o *FleetNetworkParams) SetVpcNil() {
	o.Vpc.Set(nil)
}

// UnsetVpc ensures that no value is present for Vpc, not even an explicit nil
func (o *FleetNetworkParams) UnsetVpc() {
	o.Vpc.Unset()
}

func (o FleetNetworkParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Region.IsSet() {
		toSerialize["region"] = o.Region.Get()
	}
	if o.Subnet.IsSet() {
		toSerialize["subnet"] = o.Subnet.Get()
	}
	if o.Vpc.IsSet() {
		toSerialize["vpc"] = o.Vpc.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableFleetNetworkParams struct {
	value *FleetNetworkParams
	isSet bool
}

func (v NullableFleetNetworkParams) Get() *FleetNetworkParams {
	return v.value
}

func (v *NullableFleetNetworkParams) Set(val *FleetNetworkParams) {
	v.value = val
	v.isSet = true
}

func (v NullableFleetNetworkParams) IsSet() bool {
	return v.isSet
}

func (v *NullableFleetNetworkParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFleetNetworkParams(val *FleetNetworkParams) *NullableFleetNetworkParams {
	return &NullableFleetNetworkParams{value: val, isSet: true}
}

func (v NullableFleetNetworkParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFleetNetworkParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


