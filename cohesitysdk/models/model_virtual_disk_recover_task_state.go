/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// VirtualDiskRecoverTaskState Specifies the complete information about a recover virtual disk task state.
type VirtualDiskRecoverTaskState struct {
	Error *RequestError `json:"error,omitempty"`
	// Specifies if instant recovery of the virtual disk is complete.
	IsInstantRecoveryFinished NullableBool `json:"isInstantRecoveryFinished,omitempty"`
	// Specifies the current state of the restore virtual disks task. Specifies the current state of the restore virtual disks task. 'kDetachDisksDone' indicates the detached state of disks. 'kSetupDisksDone' indicates that disks setup is completed. 'kMigrateDisksStarted' indicates that disks are being migrated. 'kMigrateDisksDone' indicates that disk migration is completed. 'kUnMountDatastoreDone' indicates that disk has unmounted the datastore.
	TaskState NullableString `json:"taskState,omitempty"`
	VirtualDiskRestoreResponse *VirtualDiskRestoreResponse `json:"virtualDiskRestoreResponse,omitempty"`
}

// NewVirtualDiskRecoverTaskState instantiates a new VirtualDiskRecoverTaskState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualDiskRecoverTaskState() *VirtualDiskRecoverTaskState {
	this := VirtualDiskRecoverTaskState{}
	return &this
}

// NewVirtualDiskRecoverTaskStateWithDefaults instantiates a new VirtualDiskRecoverTaskState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualDiskRecoverTaskStateWithDefaults() *VirtualDiskRecoverTaskState {
	this := VirtualDiskRecoverTaskState{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *VirtualDiskRecoverTaskState) GetError() RequestError {
	if o == nil || o.Error == nil {
		var ret RequestError
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDiskRecoverTaskState) GetErrorOk() (*RequestError, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *VirtualDiskRecoverTaskState) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given RequestError and assigns it to the Error field.
func (o *VirtualDiskRecoverTaskState) SetError(v RequestError) {
	o.Error = &v
}

// GetIsInstantRecoveryFinished returns the IsInstantRecoveryFinished field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualDiskRecoverTaskState) GetIsInstantRecoveryFinished() bool {
	if o == nil || o.IsInstantRecoveryFinished.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsInstantRecoveryFinished.Get()
}

// GetIsInstantRecoveryFinishedOk returns a tuple with the IsInstantRecoveryFinished field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualDiskRecoverTaskState) GetIsInstantRecoveryFinishedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsInstantRecoveryFinished.Get(), o.IsInstantRecoveryFinished.IsSet()
}

// HasIsInstantRecoveryFinished returns a boolean if a field has been set.
func (o *VirtualDiskRecoverTaskState) HasIsInstantRecoveryFinished() bool {
	if o != nil && o.IsInstantRecoveryFinished.IsSet() {
		return true
	}

	return false
}

// SetIsInstantRecoveryFinished gets a reference to the given NullableBool and assigns it to the IsInstantRecoveryFinished field.
func (o *VirtualDiskRecoverTaskState) SetIsInstantRecoveryFinished(v bool) {
	o.IsInstantRecoveryFinished.Set(&v)
}
// SetIsInstantRecoveryFinishedNil sets the value for IsInstantRecoveryFinished to be an explicit nil
func (o *VirtualDiskRecoverTaskState) SetIsInstantRecoveryFinishedNil() {
	o.IsInstantRecoveryFinished.Set(nil)
}

// UnsetIsInstantRecoveryFinished ensures that no value is present for IsInstantRecoveryFinished, not even an explicit nil
func (o *VirtualDiskRecoverTaskState) UnsetIsInstantRecoveryFinished() {
	o.IsInstantRecoveryFinished.Unset()
}

// GetTaskState returns the TaskState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualDiskRecoverTaskState) GetTaskState() string {
	if o == nil || o.TaskState.Get() == nil {
		var ret string
		return ret
	}
	return *o.TaskState.Get()
}

// GetTaskStateOk returns a tuple with the TaskState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualDiskRecoverTaskState) GetTaskStateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TaskState.Get(), o.TaskState.IsSet()
}

// HasTaskState returns a boolean if a field has been set.
func (o *VirtualDiskRecoverTaskState) HasTaskState() bool {
	if o != nil && o.TaskState.IsSet() {
		return true
	}

	return false
}

// SetTaskState gets a reference to the given NullableString and assigns it to the TaskState field.
func (o *VirtualDiskRecoverTaskState) SetTaskState(v string) {
	o.TaskState.Set(&v)
}
// SetTaskStateNil sets the value for TaskState to be an explicit nil
func (o *VirtualDiskRecoverTaskState) SetTaskStateNil() {
	o.TaskState.Set(nil)
}

// UnsetTaskState ensures that no value is present for TaskState, not even an explicit nil
func (o *VirtualDiskRecoverTaskState) UnsetTaskState() {
	o.TaskState.Unset()
}

// GetVirtualDiskRestoreResponse returns the VirtualDiskRestoreResponse field value if set, zero value otherwise.
func (o *VirtualDiskRecoverTaskState) GetVirtualDiskRestoreResponse() VirtualDiskRestoreResponse {
	if o == nil || o.VirtualDiskRestoreResponse == nil {
		var ret VirtualDiskRestoreResponse
		return ret
	}
	return *o.VirtualDiskRestoreResponse
}

// GetVirtualDiskRestoreResponseOk returns a tuple with the VirtualDiskRestoreResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDiskRecoverTaskState) GetVirtualDiskRestoreResponseOk() (*VirtualDiskRestoreResponse, bool) {
	if o == nil || o.VirtualDiskRestoreResponse == nil {
		return nil, false
	}
	return o.VirtualDiskRestoreResponse, true
}

// HasVirtualDiskRestoreResponse returns a boolean if a field has been set.
func (o *VirtualDiskRecoverTaskState) HasVirtualDiskRestoreResponse() bool {
	if o != nil && o.VirtualDiskRestoreResponse != nil {
		return true
	}

	return false
}

// SetVirtualDiskRestoreResponse gets a reference to the given VirtualDiskRestoreResponse and assigns it to the VirtualDiskRestoreResponse field.
func (o *VirtualDiskRecoverTaskState) SetVirtualDiskRestoreResponse(v VirtualDiskRestoreResponse) {
	o.VirtualDiskRestoreResponse = &v
}

func (o VirtualDiskRecoverTaskState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.IsInstantRecoveryFinished.IsSet() {
		toSerialize["isInstantRecoveryFinished"] = o.IsInstantRecoveryFinished.Get()
	}
	if o.TaskState.IsSet() {
		toSerialize["taskState"] = o.TaskState.Get()
	}
	if o.VirtualDiskRestoreResponse != nil {
		toSerialize["virtualDiskRestoreResponse"] = o.VirtualDiskRestoreResponse
	}
	return json.Marshal(toSerialize)
}

type NullableVirtualDiskRecoverTaskState struct {
	value *VirtualDiskRecoverTaskState
	isSet bool
}

func (v NullableVirtualDiskRecoverTaskState) Get() *VirtualDiskRecoverTaskState {
	return v.value
}

func (v *NullableVirtualDiskRecoverTaskState) Set(val *VirtualDiskRecoverTaskState) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualDiskRecoverTaskState) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualDiskRecoverTaskState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualDiskRecoverTaskState(val *VirtualDiskRecoverTaskState) *NullableVirtualDiskRecoverTaskState {
	return &NullableVirtualDiskRecoverTaskState{value: val, isSet: true}
}

func (v NullableVirtualDiskRecoverTaskState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualDiskRecoverTaskState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


