/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// SourceFilters For SQL, this filters will be applicable only for auto protect sources and can be used at the host, instance level.
type SourceFilters struct {
	// This contains the list of exclude filters to be applied on the entities in the backup source.
	ExcludeSourceFilterVec []SourceFiltersSourceFilter `json:"excludeSourceFilterVec,omitempty"`
}

// NewSourceFilters instantiates a new SourceFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceFilters() *SourceFilters {
	this := SourceFilters{}
	return &this
}

// NewSourceFiltersWithDefaults instantiates a new SourceFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceFiltersWithDefaults() *SourceFilters {
	this := SourceFilters{}
	return &this
}

// GetExcludeSourceFilterVec returns the ExcludeSourceFilterVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceFilters) GetExcludeSourceFilterVec() []SourceFiltersSourceFilter {
	if o == nil  {
		var ret []SourceFiltersSourceFilter
		return ret
	}
	return o.ExcludeSourceFilterVec
}

// GetExcludeSourceFilterVecOk returns a tuple with the ExcludeSourceFilterVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceFilters) GetExcludeSourceFilterVecOk() (*[]SourceFiltersSourceFilter, bool) {
	if o == nil || o.ExcludeSourceFilterVec == nil {
		return nil, false
	}
	return &o.ExcludeSourceFilterVec, true
}

// HasExcludeSourceFilterVec returns a boolean if a field has been set.
func (o *SourceFilters) HasExcludeSourceFilterVec() bool {
	if o != nil && o.ExcludeSourceFilterVec != nil {
		return true
	}

	return false
}

// SetExcludeSourceFilterVec gets a reference to the given []SourceFiltersSourceFilter and assigns it to the ExcludeSourceFilterVec field.
func (o *SourceFilters) SetExcludeSourceFilterVec(v []SourceFiltersSourceFilter) {
	o.ExcludeSourceFilterVec = v
}

func (o SourceFilters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExcludeSourceFilterVec != nil {
		toSerialize["excludeSourceFilterVec"] = o.ExcludeSourceFilterVec
	}
	return json.Marshal(toSerialize)
}

type NullableSourceFilters struct {
	value *SourceFilters
	isSet bool
}

func (v NullableSourceFilters) Get() *SourceFilters {
	return v.value
}

func (v *NullableSourceFilters) Set(val *SourceFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceFilters(val *SourceFilters) *NullableSourceFilters {
	return &NullableSourceFilters{value: val, isSet: true}
}

func (v NullableSourceFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


