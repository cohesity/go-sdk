/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// BackupPolicyProtoDailySchedule The daily schedule encompasses weekly schedules as well. This has been done so there is only one way of specifying a schedule (backing up daily is the same as backing up weekly, but on all days of the week).
type BackupPolicyProtoDailySchedule struct {
	// The days of the week backup must be performed. If no days are specified, then the backup will be performed on all days.
	Days []int32 `json:"days,omitempty"`
	Time *Time `json:"time,omitempty"`
}

// NewBackupPolicyProtoDailySchedule instantiates a new BackupPolicyProtoDailySchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupPolicyProtoDailySchedule() *BackupPolicyProtoDailySchedule {
	this := BackupPolicyProtoDailySchedule{}
	return &this
}

// NewBackupPolicyProtoDailyScheduleWithDefaults instantiates a new BackupPolicyProtoDailySchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupPolicyProtoDailyScheduleWithDefaults() *BackupPolicyProtoDailySchedule {
	this := BackupPolicyProtoDailySchedule{}
	return &this
}

// GetDays returns the Days field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupPolicyProtoDailySchedule) GetDays() []int32 {
	if o == nil  {
		var ret []int32
		return ret
	}
	return o.Days
}

// GetDaysOk returns a tuple with the Days field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupPolicyProtoDailySchedule) GetDaysOk() (*[]int32, bool) {
	if o == nil || o.Days == nil {
		return nil, false
	}
	return &o.Days, true
}

// HasDays returns a boolean if a field has been set.
func (o *BackupPolicyProtoDailySchedule) HasDays() bool {
	if o != nil && o.Days != nil {
		return true
	}

	return false
}

// SetDays gets a reference to the given []int32 and assigns it to the Days field.
func (o *BackupPolicyProtoDailySchedule) SetDays(v []int32) {
	o.Days = v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *BackupPolicyProtoDailySchedule) GetTime() Time {
	if o == nil || o.Time == nil {
		var ret Time
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupPolicyProtoDailySchedule) GetTimeOk() (*Time, bool) {
	if o == nil || o.Time == nil {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *BackupPolicyProtoDailySchedule) HasTime() bool {
	if o != nil && o.Time != nil {
		return true
	}

	return false
}

// SetTime gets a reference to the given Time and assigns it to the Time field.
func (o *BackupPolicyProtoDailySchedule) SetTime(v Time) {
	o.Time = &v
}

func (o BackupPolicyProtoDailySchedule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Days != nil {
		toSerialize["days"] = o.Days
	}
	if o.Time != nil {
		toSerialize["time"] = o.Time
	}
	return json.Marshal(toSerialize)
}

type NullableBackupPolicyProtoDailySchedule struct {
	value *BackupPolicyProtoDailySchedule
	isSet bool
}

func (v NullableBackupPolicyProtoDailySchedule) Get() *BackupPolicyProtoDailySchedule {
	return v.value
}

func (v *NullableBackupPolicyProtoDailySchedule) Set(val *BackupPolicyProtoDailySchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupPolicyProtoDailySchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupPolicyProtoDailySchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupPolicyProtoDailySchedule(val *BackupPolicyProtoDailySchedule) *NullableBackupPolicyProtoDailySchedule {
	return &NullableBackupPolicyProtoDailySchedule{value: val, isSet: true}
}

func (v NullableBackupPolicyProtoDailySchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupPolicyProtoDailySchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


