/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ClusterConfigProtoSID Represents the security identifier that uniquely defines a security principal. SIDs are associated with users and groups. Reference: https://msdn.microsoft.com/en-us/library/aa379597.aspx
type ClusterConfigProtoSID struct {
	// The authority under which the SID was created. This is always 6 bytes long.
	IdentifierAuthority []int32 `json:"identifierAuthority,omitempty"`
	// The revision level of the SID.
	RevisionLevel NullableInt32 `json:"revisionLevel,omitempty"`
	// List of ids relative to the identifier_authority that uniquely identify a principal. The last entry in this list is the RID, which uniquely identifies the principal within a domain.
	SubAuthority []int32 `json:"subAuthority,omitempty"`
}

// NewClusterConfigProtoSID instantiates a new ClusterConfigProtoSID object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterConfigProtoSID() *ClusterConfigProtoSID {
	this := ClusterConfigProtoSID{}
	return &this
}

// NewClusterConfigProtoSIDWithDefaults instantiates a new ClusterConfigProtoSID object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterConfigProtoSIDWithDefaults() *ClusterConfigProtoSID {
	this := ClusterConfigProtoSID{}
	return &this
}

// GetIdentifierAuthority returns the IdentifierAuthority field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterConfigProtoSID) GetIdentifierAuthority() []int32 {
	if o == nil  {
		var ret []int32
		return ret
	}
	return o.IdentifierAuthority
}

// GetIdentifierAuthorityOk returns a tuple with the IdentifierAuthority field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterConfigProtoSID) GetIdentifierAuthorityOk() (*[]int32, bool) {
	if o == nil || o.IdentifierAuthority == nil {
		return nil, false
	}
	return &o.IdentifierAuthority, true
}

// HasIdentifierAuthority returns a boolean if a field has been set.
func (o *ClusterConfigProtoSID) HasIdentifierAuthority() bool {
	if o != nil && o.IdentifierAuthority != nil {
		return true
	}

	return false
}

// SetIdentifierAuthority gets a reference to the given []int32 and assigns it to the IdentifierAuthority field.
func (o *ClusterConfigProtoSID) SetIdentifierAuthority(v []int32) {
	o.IdentifierAuthority = v
}

// GetRevisionLevel returns the RevisionLevel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterConfigProtoSID) GetRevisionLevel() int32 {
	if o == nil || o.RevisionLevel.Get() == nil {
		var ret int32
		return ret
	}
	return *o.RevisionLevel.Get()
}

// GetRevisionLevelOk returns a tuple with the RevisionLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterConfigProtoSID) GetRevisionLevelOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RevisionLevel.Get(), o.RevisionLevel.IsSet()
}

// HasRevisionLevel returns a boolean if a field has been set.
func (o *ClusterConfigProtoSID) HasRevisionLevel() bool {
	if o != nil && o.RevisionLevel.IsSet() {
		return true
	}

	return false
}

// SetRevisionLevel gets a reference to the given NullableInt32 and assigns it to the RevisionLevel field.
func (o *ClusterConfigProtoSID) SetRevisionLevel(v int32) {
	o.RevisionLevel.Set(&v)
}
// SetRevisionLevelNil sets the value for RevisionLevel to be an explicit nil
func (o *ClusterConfigProtoSID) SetRevisionLevelNil() {
	o.RevisionLevel.Set(nil)
}

// UnsetRevisionLevel ensures that no value is present for RevisionLevel, not even an explicit nil
func (o *ClusterConfigProtoSID) UnsetRevisionLevel() {
	o.RevisionLevel.Unset()
}

// GetSubAuthority returns the SubAuthority field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterConfigProtoSID) GetSubAuthority() []int32 {
	if o == nil  {
		var ret []int32
		return ret
	}
	return o.SubAuthority
}

// GetSubAuthorityOk returns a tuple with the SubAuthority field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterConfigProtoSID) GetSubAuthorityOk() (*[]int32, bool) {
	if o == nil || o.SubAuthority == nil {
		return nil, false
	}
	return &o.SubAuthority, true
}

// HasSubAuthority returns a boolean if a field has been set.
func (o *ClusterConfigProtoSID) HasSubAuthority() bool {
	if o != nil && o.SubAuthority != nil {
		return true
	}

	return false
}

// SetSubAuthority gets a reference to the given []int32 and assigns it to the SubAuthority field.
func (o *ClusterConfigProtoSID) SetSubAuthority(v []int32) {
	o.SubAuthority = v
}

func (o ClusterConfigProtoSID) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IdentifierAuthority != nil {
		toSerialize["identifierAuthority"] = o.IdentifierAuthority
	}
	if o.RevisionLevel.IsSet() {
		toSerialize["revisionLevel"] = o.RevisionLevel.Get()
	}
	if o.SubAuthority != nil {
		toSerialize["subAuthority"] = o.SubAuthority
	}
	return json.Marshal(toSerialize)
}

type NullableClusterConfigProtoSID struct {
	value *ClusterConfigProtoSID
	isSet bool
}

func (v NullableClusterConfigProtoSID) Get() *ClusterConfigProtoSID {
	return v.value
}

func (v *NullableClusterConfigProtoSID) Set(val *ClusterConfigProtoSID) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterConfigProtoSID) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterConfigProtoSID) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterConfigProtoSID(val *ClusterConfigProtoSID) *NullableClusterConfigProtoSID {
	return &NullableClusterConfigProtoSID{value: val, isSet: true}
}

func (v NullableClusterConfigProtoSID) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterConfigProtoSID) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


