/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// UserPreferencesResult Specifies the result of user preference.
type UserPreferencesResult struct {
	// Preferences is a key-value map of preferences.
	Preferences map[string]string `json:"preferences,omitempty"`
}

// NewUserPreferencesResult instantiates a new UserPreferencesResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPreferencesResult() *UserPreferencesResult {
	this := UserPreferencesResult{}
	return &this
}

// NewUserPreferencesResultWithDefaults instantiates a new UserPreferencesResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPreferencesResultWithDefaults() *UserPreferencesResult {
	this := UserPreferencesResult{}
	return &this
}

// GetPreferences returns the Preferences field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserPreferencesResult) GetPreferences() map[string]string {
	if o == nil  {
		var ret map[string]string
		return ret
	}
	return o.Preferences
}

// GetPreferencesOk returns a tuple with the Preferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserPreferencesResult) GetPreferencesOk() (*map[string]string, bool) {
	if o == nil || o.Preferences == nil {
		return nil, false
	}
	return &o.Preferences, true
}

// HasPreferences returns a boolean if a field has been set.
func (o *UserPreferencesResult) HasPreferences() bool {
	if o != nil && o.Preferences != nil {
		return true
	}

	return false
}

// SetPreferences gets a reference to the given map[string]string and assigns it to the Preferences field.
func (o *UserPreferencesResult) SetPreferences(v map[string]string) {
	o.Preferences = v
}

func (o UserPreferencesResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Preferences != nil {
		toSerialize["preferences"] = o.Preferences
	}
	return json.Marshal(toSerialize)
}

type NullableUserPreferencesResult struct {
	value *UserPreferencesResult
	isSet bool
}

func (v NullableUserPreferencesResult) Get() *UserPreferencesResult {
	return v.value
}

func (v *NullableUserPreferencesResult) Set(val *UserPreferencesResult) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPreferencesResult) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPreferencesResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPreferencesResult(val *UserPreferencesResult) *NullableUserPreferencesResult {
	return &NullableUserPreferencesResult{value: val, isSet: true}
}

func (v NullableUserPreferencesResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPreferencesResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


