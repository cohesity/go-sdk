/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// UsageAndPerformanceStats Provides usage and performance statistics for entities such as a disks, Nodes or Clusters.
type UsageAndPerformanceStats struct {
	// Specifies the data read from the protected objects by the Cohesity Cluster before any data reduction using deduplication and compression.
	DataInBytes NullableInt64 `json:"dataInBytes,omitempty"`
	// Morphed Usage before data is replicated to other nodes as per RF or Erasure Coding policy.
	DataInBytesAfterReduction NullableInt64 `json:"dataInBytesAfterReduction,omitempty"`
	// Specifies the minimum usable capacity available after erasure coding or RF. This will only be populated for cluster. If a cluster has multiple Domains (View Boxes) with different RF or erasure coding, this metric will be computed using the scheme that will provide least saving.
	MinUsablePhysicalCapacityBytes NullableInt64 `json:"minUsablePhysicalCapacityBytes,omitempty"`
	// Provides the total number of bytes read in the last 30 seconds.
	NumBytesRead NullableInt64 `json:"numBytesRead,omitempty"`
	// Provides the total number of bytes written in the last 30 second.
	NumBytesWritten NullableInt64 `json:"numBytesWritten,omitempty"`
	// Provides the total physical capacity in bytes of all the storage devices, after subtracting space reserved for cluster services
	PhysicalCapacityBytes NullableInt64 `json:"physicalCapacityBytes,omitempty"`
	// Provides the number of Read IOs that occurred in the last 30 seconds.
	ReadIos NullableInt64 `json:"readIos,omitempty"`
	// Provides the Read latency in milliseconds for the Read IOs that occurred during the last 30 seconds.
	ReadLatencyMsecs NullableFloat64 `json:"readLatencyMsecs,omitempty"`
	// Provides the total available capacity as computed by the Linux 'statfs' command.
	SystemCapacityBytes NullableInt64 `json:"systemCapacityBytes,omitempty"`
	// Provides the usage of bytes, as computed by the Linux 'statfs' command, after the size of the data is reduced by change-block tracking, compression and deduplication.
	SystemUsageBytes NullableInt64 `json:"systemUsageBytes,omitempty"`
	// Provides the usage of bytes, as computed by the Cohesity Cluster, before the size of the data is reduced by change-block tracking, compression and deduplication.
	TotalPhysicalRawUsageBytes NullableInt64 `json:"totalPhysicalRawUsageBytes,omitempty"`
	// Provides the data stored locally, after the data has been reduced by deduplication and compression, including the space required for honoring the resiliency settings (EC/RF).
	TotalPhysicalUsageBytes NullableInt64 `json:"totalPhysicalUsageBytes,omitempty"`
	// Provides the number of Write IOs that occurred in the last 30 seconds.
	WriteIos NullableInt64 `json:"writeIos,omitempty"`
	// Provides the Write latency in milliseconds for the Write IOs that occurred during the last 30 seconds.
	WriteLatencyMsecs NullableFloat64 `json:"writeLatencyMsecs,omitempty"`
}

// NewUsageAndPerformanceStats instantiates a new UsageAndPerformanceStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageAndPerformanceStats() *UsageAndPerformanceStats {
	this := UsageAndPerformanceStats{}
	return &this
}

// NewUsageAndPerformanceStatsWithDefaults instantiates a new UsageAndPerformanceStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageAndPerformanceStatsWithDefaults() *UsageAndPerformanceStats {
	this := UsageAndPerformanceStats{}
	return &this
}

// GetDataInBytes returns the DataInBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UsageAndPerformanceStats) GetDataInBytes() int64 {
	if o == nil || o.DataInBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DataInBytes.Get()
}

// GetDataInBytesOk returns a tuple with the DataInBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsageAndPerformanceStats) GetDataInBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DataInBytes.Get(), o.DataInBytes.IsSet()
}

// HasDataInBytes returns a boolean if a field has been set.
func (o *UsageAndPerformanceStats) HasDataInBytes() bool {
	if o != nil && o.DataInBytes.IsSet() {
		return true
	}

	return false
}

// SetDataInBytes gets a reference to the given NullableInt64 and assigns it to the DataInBytes field.
func (o *UsageAndPerformanceStats) SetDataInBytes(v int64) {
	o.DataInBytes.Set(&v)
}
// SetDataInBytesNil sets the value for DataInBytes to be an explicit nil
func (o *UsageAndPerformanceStats) SetDataInBytesNil() {
	o.DataInBytes.Set(nil)
}

// UnsetDataInBytes ensures that no value is present for DataInBytes, not even an explicit nil
func (o *UsageAndPerformanceStats) UnsetDataInBytes() {
	o.DataInBytes.Unset()
}

// GetDataInBytesAfterReduction returns the DataInBytesAfterReduction field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UsageAndPerformanceStats) GetDataInBytesAfterReduction() int64 {
	if o == nil || o.DataInBytesAfterReduction.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DataInBytesAfterReduction.Get()
}

// GetDataInBytesAfterReductionOk returns a tuple with the DataInBytesAfterReduction field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsageAndPerformanceStats) GetDataInBytesAfterReductionOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DataInBytesAfterReduction.Get(), o.DataInBytesAfterReduction.IsSet()
}

// HasDataInBytesAfterReduction returns a boolean if a field has been set.
func (o *UsageAndPerformanceStats) HasDataInBytesAfterReduction() bool {
	if o != nil && o.DataInBytesAfterReduction.IsSet() {
		return true
	}

	return false
}

// SetDataInBytesAfterReduction gets a reference to the given NullableInt64 and assigns it to the DataInBytesAfterReduction field.
func (o *UsageAndPerformanceStats) SetDataInBytesAfterReduction(v int64) {
	o.DataInBytesAfterReduction.Set(&v)
}
// SetDataInBytesAfterReductionNil sets the value for DataInBytesAfterReduction to be an explicit nil
func (o *UsageAndPerformanceStats) SetDataInBytesAfterReductionNil() {
	o.DataInBytesAfterReduction.Set(nil)
}

// UnsetDataInBytesAfterReduction ensures that no value is present for DataInBytesAfterReduction, not even an explicit nil
func (o *UsageAndPerformanceStats) UnsetDataInBytesAfterReduction() {
	o.DataInBytesAfterReduction.Unset()
}

// GetMinUsablePhysicalCapacityBytes returns the MinUsablePhysicalCapacityBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UsageAndPerformanceStats) GetMinUsablePhysicalCapacityBytes() int64 {
	if o == nil || o.MinUsablePhysicalCapacityBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.MinUsablePhysicalCapacityBytes.Get()
}

// GetMinUsablePhysicalCapacityBytesOk returns a tuple with the MinUsablePhysicalCapacityBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsageAndPerformanceStats) GetMinUsablePhysicalCapacityBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MinUsablePhysicalCapacityBytes.Get(), o.MinUsablePhysicalCapacityBytes.IsSet()
}

// HasMinUsablePhysicalCapacityBytes returns a boolean if a field has been set.
func (o *UsageAndPerformanceStats) HasMinUsablePhysicalCapacityBytes() bool {
	if o != nil && o.MinUsablePhysicalCapacityBytes.IsSet() {
		return true
	}

	return false
}

// SetMinUsablePhysicalCapacityBytes gets a reference to the given NullableInt64 and assigns it to the MinUsablePhysicalCapacityBytes field.
func (o *UsageAndPerformanceStats) SetMinUsablePhysicalCapacityBytes(v int64) {
	o.MinUsablePhysicalCapacityBytes.Set(&v)
}
// SetMinUsablePhysicalCapacityBytesNil sets the value for MinUsablePhysicalCapacityBytes to be an explicit nil
func (o *UsageAndPerformanceStats) SetMinUsablePhysicalCapacityBytesNil() {
	o.MinUsablePhysicalCapacityBytes.Set(nil)
}

// UnsetMinUsablePhysicalCapacityBytes ensures that no value is present for MinUsablePhysicalCapacityBytes, not even an explicit nil
func (o *UsageAndPerformanceStats) UnsetMinUsablePhysicalCapacityBytes() {
	o.MinUsablePhysicalCapacityBytes.Unset()
}

// GetNumBytesRead returns the NumBytesRead field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UsageAndPerformanceStats) GetNumBytesRead() int64 {
	if o == nil || o.NumBytesRead.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NumBytesRead.Get()
}

// GetNumBytesReadOk returns a tuple with the NumBytesRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsageAndPerformanceStats) GetNumBytesReadOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumBytesRead.Get(), o.NumBytesRead.IsSet()
}

// HasNumBytesRead returns a boolean if a field has been set.
func (o *UsageAndPerformanceStats) HasNumBytesRead() bool {
	if o != nil && o.NumBytesRead.IsSet() {
		return true
	}

	return false
}

// SetNumBytesRead gets a reference to the given NullableInt64 and assigns it to the NumBytesRead field.
func (o *UsageAndPerformanceStats) SetNumBytesRead(v int64) {
	o.NumBytesRead.Set(&v)
}
// SetNumBytesReadNil sets the value for NumBytesRead to be an explicit nil
func (o *UsageAndPerformanceStats) SetNumBytesReadNil() {
	o.NumBytesRead.Set(nil)
}

// UnsetNumBytesRead ensures that no value is present for NumBytesRead, not even an explicit nil
func (o *UsageAndPerformanceStats) UnsetNumBytesRead() {
	o.NumBytesRead.Unset()
}

// GetNumBytesWritten returns the NumBytesWritten field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UsageAndPerformanceStats) GetNumBytesWritten() int64 {
	if o == nil || o.NumBytesWritten.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NumBytesWritten.Get()
}

// GetNumBytesWrittenOk returns a tuple with the NumBytesWritten field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsageAndPerformanceStats) GetNumBytesWrittenOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumBytesWritten.Get(), o.NumBytesWritten.IsSet()
}

// HasNumBytesWritten returns a boolean if a field has been set.
func (o *UsageAndPerformanceStats) HasNumBytesWritten() bool {
	if o != nil && o.NumBytesWritten.IsSet() {
		return true
	}

	return false
}

// SetNumBytesWritten gets a reference to the given NullableInt64 and assigns it to the NumBytesWritten field.
func (o *UsageAndPerformanceStats) SetNumBytesWritten(v int64) {
	o.NumBytesWritten.Set(&v)
}
// SetNumBytesWrittenNil sets the value for NumBytesWritten to be an explicit nil
func (o *UsageAndPerformanceStats) SetNumBytesWrittenNil() {
	o.NumBytesWritten.Set(nil)
}

// UnsetNumBytesWritten ensures that no value is present for NumBytesWritten, not even an explicit nil
func (o *UsageAndPerformanceStats) UnsetNumBytesWritten() {
	o.NumBytesWritten.Unset()
}

// GetPhysicalCapacityBytes returns the PhysicalCapacityBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UsageAndPerformanceStats) GetPhysicalCapacityBytes() int64 {
	if o == nil || o.PhysicalCapacityBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.PhysicalCapacityBytes.Get()
}

// GetPhysicalCapacityBytesOk returns a tuple with the PhysicalCapacityBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsageAndPerformanceStats) GetPhysicalCapacityBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PhysicalCapacityBytes.Get(), o.PhysicalCapacityBytes.IsSet()
}

// HasPhysicalCapacityBytes returns a boolean if a field has been set.
func (o *UsageAndPerformanceStats) HasPhysicalCapacityBytes() bool {
	if o != nil && o.PhysicalCapacityBytes.IsSet() {
		return true
	}

	return false
}

// SetPhysicalCapacityBytes gets a reference to the given NullableInt64 and assigns it to the PhysicalCapacityBytes field.
func (o *UsageAndPerformanceStats) SetPhysicalCapacityBytes(v int64) {
	o.PhysicalCapacityBytes.Set(&v)
}
// SetPhysicalCapacityBytesNil sets the value for PhysicalCapacityBytes to be an explicit nil
func (o *UsageAndPerformanceStats) SetPhysicalCapacityBytesNil() {
	o.PhysicalCapacityBytes.Set(nil)
}

// UnsetPhysicalCapacityBytes ensures that no value is present for PhysicalCapacityBytes, not even an explicit nil
func (o *UsageAndPerformanceStats) UnsetPhysicalCapacityBytes() {
	o.PhysicalCapacityBytes.Unset()
}

// GetReadIos returns the ReadIos field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UsageAndPerformanceStats) GetReadIos() int64 {
	if o == nil || o.ReadIos.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ReadIos.Get()
}

// GetReadIosOk returns a tuple with the ReadIos field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsageAndPerformanceStats) GetReadIosOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ReadIos.Get(), o.ReadIos.IsSet()
}

// HasReadIos returns a boolean if a field has been set.
func (o *UsageAndPerformanceStats) HasReadIos() bool {
	if o != nil && o.ReadIos.IsSet() {
		return true
	}

	return false
}

// SetReadIos gets a reference to the given NullableInt64 and assigns it to the ReadIos field.
func (o *UsageAndPerformanceStats) SetReadIos(v int64) {
	o.ReadIos.Set(&v)
}
// SetReadIosNil sets the value for ReadIos to be an explicit nil
func (o *UsageAndPerformanceStats) SetReadIosNil() {
	o.ReadIos.Set(nil)
}

// UnsetReadIos ensures that no value is present for ReadIos, not even an explicit nil
func (o *UsageAndPerformanceStats) UnsetReadIos() {
	o.ReadIos.Unset()
}

// GetReadLatencyMsecs returns the ReadLatencyMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UsageAndPerformanceStats) GetReadLatencyMsecs() float64 {
	if o == nil || o.ReadLatencyMsecs.Get() == nil {
		var ret float64
		return ret
	}
	return *o.ReadLatencyMsecs.Get()
}

// GetReadLatencyMsecsOk returns a tuple with the ReadLatencyMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsageAndPerformanceStats) GetReadLatencyMsecsOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ReadLatencyMsecs.Get(), o.ReadLatencyMsecs.IsSet()
}

// HasReadLatencyMsecs returns a boolean if a field has been set.
func (o *UsageAndPerformanceStats) HasReadLatencyMsecs() bool {
	if o != nil && o.ReadLatencyMsecs.IsSet() {
		return true
	}

	return false
}

// SetReadLatencyMsecs gets a reference to the given NullableFloat64 and assigns it to the ReadLatencyMsecs field.
func (o *UsageAndPerformanceStats) SetReadLatencyMsecs(v float64) {
	o.ReadLatencyMsecs.Set(&v)
}
// SetReadLatencyMsecsNil sets the value for ReadLatencyMsecs to be an explicit nil
func (o *UsageAndPerformanceStats) SetReadLatencyMsecsNil() {
	o.ReadLatencyMsecs.Set(nil)
}

// UnsetReadLatencyMsecs ensures that no value is present for ReadLatencyMsecs, not even an explicit nil
func (o *UsageAndPerformanceStats) UnsetReadLatencyMsecs() {
	o.ReadLatencyMsecs.Unset()
}

// GetSystemCapacityBytes returns the SystemCapacityBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UsageAndPerformanceStats) GetSystemCapacityBytes() int64 {
	if o == nil || o.SystemCapacityBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SystemCapacityBytes.Get()
}

// GetSystemCapacityBytesOk returns a tuple with the SystemCapacityBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsageAndPerformanceStats) GetSystemCapacityBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SystemCapacityBytes.Get(), o.SystemCapacityBytes.IsSet()
}

// HasSystemCapacityBytes returns a boolean if a field has been set.
func (o *UsageAndPerformanceStats) HasSystemCapacityBytes() bool {
	if o != nil && o.SystemCapacityBytes.IsSet() {
		return true
	}

	return false
}

// SetSystemCapacityBytes gets a reference to the given NullableInt64 and assigns it to the SystemCapacityBytes field.
func (o *UsageAndPerformanceStats) SetSystemCapacityBytes(v int64) {
	o.SystemCapacityBytes.Set(&v)
}
// SetSystemCapacityBytesNil sets the value for SystemCapacityBytes to be an explicit nil
func (o *UsageAndPerformanceStats) SetSystemCapacityBytesNil() {
	o.SystemCapacityBytes.Set(nil)
}

// UnsetSystemCapacityBytes ensures that no value is present for SystemCapacityBytes, not even an explicit nil
func (o *UsageAndPerformanceStats) UnsetSystemCapacityBytes() {
	o.SystemCapacityBytes.Unset()
}

// GetSystemUsageBytes returns the SystemUsageBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UsageAndPerformanceStats) GetSystemUsageBytes() int64 {
	if o == nil || o.SystemUsageBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SystemUsageBytes.Get()
}

// GetSystemUsageBytesOk returns a tuple with the SystemUsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsageAndPerformanceStats) GetSystemUsageBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SystemUsageBytes.Get(), o.SystemUsageBytes.IsSet()
}

// HasSystemUsageBytes returns a boolean if a field has been set.
func (o *UsageAndPerformanceStats) HasSystemUsageBytes() bool {
	if o != nil && o.SystemUsageBytes.IsSet() {
		return true
	}

	return false
}

// SetSystemUsageBytes gets a reference to the given NullableInt64 and assigns it to the SystemUsageBytes field.
func (o *UsageAndPerformanceStats) SetSystemUsageBytes(v int64) {
	o.SystemUsageBytes.Set(&v)
}
// SetSystemUsageBytesNil sets the value for SystemUsageBytes to be an explicit nil
func (o *UsageAndPerformanceStats) SetSystemUsageBytesNil() {
	o.SystemUsageBytes.Set(nil)
}

// UnsetSystemUsageBytes ensures that no value is present for SystemUsageBytes, not even an explicit nil
func (o *UsageAndPerformanceStats) UnsetSystemUsageBytes() {
	o.SystemUsageBytes.Unset()
}

// GetTotalPhysicalRawUsageBytes returns the TotalPhysicalRawUsageBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UsageAndPerformanceStats) GetTotalPhysicalRawUsageBytes() int64 {
	if o == nil || o.TotalPhysicalRawUsageBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TotalPhysicalRawUsageBytes.Get()
}

// GetTotalPhysicalRawUsageBytesOk returns a tuple with the TotalPhysicalRawUsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsageAndPerformanceStats) GetTotalPhysicalRawUsageBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TotalPhysicalRawUsageBytes.Get(), o.TotalPhysicalRawUsageBytes.IsSet()
}

// HasTotalPhysicalRawUsageBytes returns a boolean if a field has been set.
func (o *UsageAndPerformanceStats) HasTotalPhysicalRawUsageBytes() bool {
	if o != nil && o.TotalPhysicalRawUsageBytes.IsSet() {
		return true
	}

	return false
}

// SetTotalPhysicalRawUsageBytes gets a reference to the given NullableInt64 and assigns it to the TotalPhysicalRawUsageBytes field.
func (o *UsageAndPerformanceStats) SetTotalPhysicalRawUsageBytes(v int64) {
	o.TotalPhysicalRawUsageBytes.Set(&v)
}
// SetTotalPhysicalRawUsageBytesNil sets the value for TotalPhysicalRawUsageBytes to be an explicit nil
func (o *UsageAndPerformanceStats) SetTotalPhysicalRawUsageBytesNil() {
	o.TotalPhysicalRawUsageBytes.Set(nil)
}

// UnsetTotalPhysicalRawUsageBytes ensures that no value is present for TotalPhysicalRawUsageBytes, not even an explicit nil
func (o *UsageAndPerformanceStats) UnsetTotalPhysicalRawUsageBytes() {
	o.TotalPhysicalRawUsageBytes.Unset()
}

// GetTotalPhysicalUsageBytes returns the TotalPhysicalUsageBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UsageAndPerformanceStats) GetTotalPhysicalUsageBytes() int64 {
	if o == nil || o.TotalPhysicalUsageBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TotalPhysicalUsageBytes.Get()
}

// GetTotalPhysicalUsageBytesOk returns a tuple with the TotalPhysicalUsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsageAndPerformanceStats) GetTotalPhysicalUsageBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TotalPhysicalUsageBytes.Get(), o.TotalPhysicalUsageBytes.IsSet()
}

// HasTotalPhysicalUsageBytes returns a boolean if a field has been set.
func (o *UsageAndPerformanceStats) HasTotalPhysicalUsageBytes() bool {
	if o != nil && o.TotalPhysicalUsageBytes.IsSet() {
		return true
	}

	return false
}

// SetTotalPhysicalUsageBytes gets a reference to the given NullableInt64 and assigns it to the TotalPhysicalUsageBytes field.
func (o *UsageAndPerformanceStats) SetTotalPhysicalUsageBytes(v int64) {
	o.TotalPhysicalUsageBytes.Set(&v)
}
// SetTotalPhysicalUsageBytesNil sets the value for TotalPhysicalUsageBytes to be an explicit nil
func (o *UsageAndPerformanceStats) SetTotalPhysicalUsageBytesNil() {
	o.TotalPhysicalUsageBytes.Set(nil)
}

// UnsetTotalPhysicalUsageBytes ensures that no value is present for TotalPhysicalUsageBytes, not even an explicit nil
func (o *UsageAndPerformanceStats) UnsetTotalPhysicalUsageBytes() {
	o.TotalPhysicalUsageBytes.Unset()
}

// GetWriteIos returns the WriteIos field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UsageAndPerformanceStats) GetWriteIos() int64 {
	if o == nil || o.WriteIos.Get() == nil {
		var ret int64
		return ret
	}
	return *o.WriteIos.Get()
}

// GetWriteIosOk returns a tuple with the WriteIos field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsageAndPerformanceStats) GetWriteIosOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.WriteIos.Get(), o.WriteIos.IsSet()
}

// HasWriteIos returns a boolean if a field has been set.
func (o *UsageAndPerformanceStats) HasWriteIos() bool {
	if o != nil && o.WriteIos.IsSet() {
		return true
	}

	return false
}

// SetWriteIos gets a reference to the given NullableInt64 and assigns it to the WriteIos field.
func (o *UsageAndPerformanceStats) SetWriteIos(v int64) {
	o.WriteIos.Set(&v)
}
// SetWriteIosNil sets the value for WriteIos to be an explicit nil
func (o *UsageAndPerformanceStats) SetWriteIosNil() {
	o.WriteIos.Set(nil)
}

// UnsetWriteIos ensures that no value is present for WriteIos, not even an explicit nil
func (o *UsageAndPerformanceStats) UnsetWriteIos() {
	o.WriteIos.Unset()
}

// GetWriteLatencyMsecs returns the WriteLatencyMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UsageAndPerformanceStats) GetWriteLatencyMsecs() float64 {
	if o == nil || o.WriteLatencyMsecs.Get() == nil {
		var ret float64
		return ret
	}
	return *o.WriteLatencyMsecs.Get()
}

// GetWriteLatencyMsecsOk returns a tuple with the WriteLatencyMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsageAndPerformanceStats) GetWriteLatencyMsecsOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.WriteLatencyMsecs.Get(), o.WriteLatencyMsecs.IsSet()
}

// HasWriteLatencyMsecs returns a boolean if a field has been set.
func (o *UsageAndPerformanceStats) HasWriteLatencyMsecs() bool {
	if o != nil && o.WriteLatencyMsecs.IsSet() {
		return true
	}

	return false
}

// SetWriteLatencyMsecs gets a reference to the given NullableFloat64 and assigns it to the WriteLatencyMsecs field.
func (o *UsageAndPerformanceStats) SetWriteLatencyMsecs(v float64) {
	o.WriteLatencyMsecs.Set(&v)
}
// SetWriteLatencyMsecsNil sets the value for WriteLatencyMsecs to be an explicit nil
func (o *UsageAndPerformanceStats) SetWriteLatencyMsecsNil() {
	o.WriteLatencyMsecs.Set(nil)
}

// UnsetWriteLatencyMsecs ensures that no value is present for WriteLatencyMsecs, not even an explicit nil
func (o *UsageAndPerformanceStats) UnsetWriteLatencyMsecs() {
	o.WriteLatencyMsecs.Unset()
}

func (o UsageAndPerformanceStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DataInBytes.IsSet() {
		toSerialize["dataInBytes"] = o.DataInBytes.Get()
	}
	if o.DataInBytesAfterReduction.IsSet() {
		toSerialize["dataInBytesAfterReduction"] = o.DataInBytesAfterReduction.Get()
	}
	if o.MinUsablePhysicalCapacityBytes.IsSet() {
		toSerialize["minUsablePhysicalCapacityBytes"] = o.MinUsablePhysicalCapacityBytes.Get()
	}
	if o.NumBytesRead.IsSet() {
		toSerialize["numBytesRead"] = o.NumBytesRead.Get()
	}
	if o.NumBytesWritten.IsSet() {
		toSerialize["numBytesWritten"] = o.NumBytesWritten.Get()
	}
	if o.PhysicalCapacityBytes.IsSet() {
		toSerialize["physicalCapacityBytes"] = o.PhysicalCapacityBytes.Get()
	}
	if o.ReadIos.IsSet() {
		toSerialize["readIos"] = o.ReadIos.Get()
	}
	if o.ReadLatencyMsecs.IsSet() {
		toSerialize["readLatencyMsecs"] = o.ReadLatencyMsecs.Get()
	}
	if o.SystemCapacityBytes.IsSet() {
		toSerialize["systemCapacityBytes"] = o.SystemCapacityBytes.Get()
	}
	if o.SystemUsageBytes.IsSet() {
		toSerialize["systemUsageBytes"] = o.SystemUsageBytes.Get()
	}
	if o.TotalPhysicalRawUsageBytes.IsSet() {
		toSerialize["totalPhysicalRawUsageBytes"] = o.TotalPhysicalRawUsageBytes.Get()
	}
	if o.TotalPhysicalUsageBytes.IsSet() {
		toSerialize["totalPhysicalUsageBytes"] = o.TotalPhysicalUsageBytes.Get()
	}
	if o.WriteIos.IsSet() {
		toSerialize["writeIos"] = o.WriteIos.Get()
	}
	if o.WriteLatencyMsecs.IsSet() {
		toSerialize["writeLatencyMsecs"] = o.WriteLatencyMsecs.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUsageAndPerformanceStats struct {
	value *UsageAndPerformanceStats
	isSet bool
}

func (v NullableUsageAndPerformanceStats) Get() *UsageAndPerformanceStats {
	return v.value
}

func (v *NullableUsageAndPerformanceStats) Set(val *UsageAndPerformanceStats) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageAndPerformanceStats) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageAndPerformanceStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageAndPerformanceStats(val *UsageAndPerformanceStats) *NullableUsageAndPerformanceStats {
	return &NullableUsageAndPerformanceStats{value: val, isSet: true}
}

func (v NullableUsageAndPerformanceStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageAndPerformanceStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


