/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ViewIdMappingProtoProtocolAccessInfo struct for ViewIdMappingProtoProtocolAccessInfo
type ViewIdMappingProtoProtocolAccessInfo struct {
	// Access control for iSCSI protocol for this view.
	IscsiAccess NullableInt32 `json:"iscsiAccess,omitempty"`
	// Access control for NFS protocol for this view.
	NfsAccess NullableInt32 `json:"nfsAccess,omitempty"`
	// Access control for S3 protocol for this view.
	S3Access NullableInt32 `json:"s3Access,omitempty"`
	// Access control for SMB protocol for this view.
	SmbAccess NullableInt32 `json:"smbAccess,omitempty"`
	// Access control for Swift protocol for this view.
	SwiftAccess NullableInt32 `json:"swiftAccess,omitempty"`
}

// NewViewIdMappingProtoProtocolAccessInfo instantiates a new ViewIdMappingProtoProtocolAccessInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewIdMappingProtoProtocolAccessInfo() *ViewIdMappingProtoProtocolAccessInfo {
	this := ViewIdMappingProtoProtocolAccessInfo{}
	return &this
}

// NewViewIdMappingProtoProtocolAccessInfoWithDefaults instantiates a new ViewIdMappingProtoProtocolAccessInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewIdMappingProtoProtocolAccessInfoWithDefaults() *ViewIdMappingProtoProtocolAccessInfo {
	this := ViewIdMappingProtoProtocolAccessInfo{}
	return &this
}

// GetIscsiAccess returns the IscsiAccess field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewIdMappingProtoProtocolAccessInfo) GetIscsiAccess() int32 {
	if o == nil || o.IscsiAccess.Get() == nil {
		var ret int32
		return ret
	}
	return *o.IscsiAccess.Get()
}

// GetIscsiAccessOk returns a tuple with the IscsiAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewIdMappingProtoProtocolAccessInfo) GetIscsiAccessOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IscsiAccess.Get(), o.IscsiAccess.IsSet()
}

// HasIscsiAccess returns a boolean if a field has been set.
func (o *ViewIdMappingProtoProtocolAccessInfo) HasIscsiAccess() bool {
	if o != nil && o.IscsiAccess.IsSet() {
		return true
	}

	return false
}

// SetIscsiAccess gets a reference to the given NullableInt32 and assigns it to the IscsiAccess field.
func (o *ViewIdMappingProtoProtocolAccessInfo) SetIscsiAccess(v int32) {
	o.IscsiAccess.Set(&v)
}
// SetIscsiAccessNil sets the value for IscsiAccess to be an explicit nil
func (o *ViewIdMappingProtoProtocolAccessInfo) SetIscsiAccessNil() {
	o.IscsiAccess.Set(nil)
}

// UnsetIscsiAccess ensures that no value is present for IscsiAccess, not even an explicit nil
func (o *ViewIdMappingProtoProtocolAccessInfo) UnsetIscsiAccess() {
	o.IscsiAccess.Unset()
}

// GetNfsAccess returns the NfsAccess field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewIdMappingProtoProtocolAccessInfo) GetNfsAccess() int32 {
	if o == nil || o.NfsAccess.Get() == nil {
		var ret int32
		return ret
	}
	return *o.NfsAccess.Get()
}

// GetNfsAccessOk returns a tuple with the NfsAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewIdMappingProtoProtocolAccessInfo) GetNfsAccessOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NfsAccess.Get(), o.NfsAccess.IsSet()
}

// HasNfsAccess returns a boolean if a field has been set.
func (o *ViewIdMappingProtoProtocolAccessInfo) HasNfsAccess() bool {
	if o != nil && o.NfsAccess.IsSet() {
		return true
	}

	return false
}

// SetNfsAccess gets a reference to the given NullableInt32 and assigns it to the NfsAccess field.
func (o *ViewIdMappingProtoProtocolAccessInfo) SetNfsAccess(v int32) {
	o.NfsAccess.Set(&v)
}
// SetNfsAccessNil sets the value for NfsAccess to be an explicit nil
func (o *ViewIdMappingProtoProtocolAccessInfo) SetNfsAccessNil() {
	o.NfsAccess.Set(nil)
}

// UnsetNfsAccess ensures that no value is present for NfsAccess, not even an explicit nil
func (o *ViewIdMappingProtoProtocolAccessInfo) UnsetNfsAccess() {
	o.NfsAccess.Unset()
}

// GetS3Access returns the S3Access field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewIdMappingProtoProtocolAccessInfo) GetS3Access() int32 {
	if o == nil || o.S3Access.Get() == nil {
		var ret int32
		return ret
	}
	return *o.S3Access.Get()
}

// GetS3AccessOk returns a tuple with the S3Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewIdMappingProtoProtocolAccessInfo) GetS3AccessOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.S3Access.Get(), o.S3Access.IsSet()
}

// HasS3Access returns a boolean if a field has been set.
func (o *ViewIdMappingProtoProtocolAccessInfo) HasS3Access() bool {
	if o != nil && o.S3Access.IsSet() {
		return true
	}

	return false
}

// SetS3Access gets a reference to the given NullableInt32 and assigns it to the S3Access field.
func (o *ViewIdMappingProtoProtocolAccessInfo) SetS3Access(v int32) {
	o.S3Access.Set(&v)
}
// SetS3AccessNil sets the value for S3Access to be an explicit nil
func (o *ViewIdMappingProtoProtocolAccessInfo) SetS3AccessNil() {
	o.S3Access.Set(nil)
}

// UnsetS3Access ensures that no value is present for S3Access, not even an explicit nil
func (o *ViewIdMappingProtoProtocolAccessInfo) UnsetS3Access() {
	o.S3Access.Unset()
}

// GetSmbAccess returns the SmbAccess field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewIdMappingProtoProtocolAccessInfo) GetSmbAccess() int32 {
	if o == nil || o.SmbAccess.Get() == nil {
		var ret int32
		return ret
	}
	return *o.SmbAccess.Get()
}

// GetSmbAccessOk returns a tuple with the SmbAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewIdMappingProtoProtocolAccessInfo) GetSmbAccessOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SmbAccess.Get(), o.SmbAccess.IsSet()
}

// HasSmbAccess returns a boolean if a field has been set.
func (o *ViewIdMappingProtoProtocolAccessInfo) HasSmbAccess() bool {
	if o != nil && o.SmbAccess.IsSet() {
		return true
	}

	return false
}

// SetSmbAccess gets a reference to the given NullableInt32 and assigns it to the SmbAccess field.
func (o *ViewIdMappingProtoProtocolAccessInfo) SetSmbAccess(v int32) {
	o.SmbAccess.Set(&v)
}
// SetSmbAccessNil sets the value for SmbAccess to be an explicit nil
func (o *ViewIdMappingProtoProtocolAccessInfo) SetSmbAccessNil() {
	o.SmbAccess.Set(nil)
}

// UnsetSmbAccess ensures that no value is present for SmbAccess, not even an explicit nil
func (o *ViewIdMappingProtoProtocolAccessInfo) UnsetSmbAccess() {
	o.SmbAccess.Unset()
}

// GetSwiftAccess returns the SwiftAccess field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewIdMappingProtoProtocolAccessInfo) GetSwiftAccess() int32 {
	if o == nil || o.SwiftAccess.Get() == nil {
		var ret int32
		return ret
	}
	return *o.SwiftAccess.Get()
}

// GetSwiftAccessOk returns a tuple with the SwiftAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewIdMappingProtoProtocolAccessInfo) GetSwiftAccessOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SwiftAccess.Get(), o.SwiftAccess.IsSet()
}

// HasSwiftAccess returns a boolean if a field has been set.
func (o *ViewIdMappingProtoProtocolAccessInfo) HasSwiftAccess() bool {
	if o != nil && o.SwiftAccess.IsSet() {
		return true
	}

	return false
}

// SetSwiftAccess gets a reference to the given NullableInt32 and assigns it to the SwiftAccess field.
func (o *ViewIdMappingProtoProtocolAccessInfo) SetSwiftAccess(v int32) {
	o.SwiftAccess.Set(&v)
}
// SetSwiftAccessNil sets the value for SwiftAccess to be an explicit nil
func (o *ViewIdMappingProtoProtocolAccessInfo) SetSwiftAccessNil() {
	o.SwiftAccess.Set(nil)
}

// UnsetSwiftAccess ensures that no value is present for SwiftAccess, not even an explicit nil
func (o *ViewIdMappingProtoProtocolAccessInfo) UnsetSwiftAccess() {
	o.SwiftAccess.Unset()
}

func (o ViewIdMappingProtoProtocolAccessInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IscsiAccess.IsSet() {
		toSerialize["iscsiAccess"] = o.IscsiAccess.Get()
	}
	if o.NfsAccess.IsSet() {
		toSerialize["nfsAccess"] = o.NfsAccess.Get()
	}
	if o.S3Access.IsSet() {
		toSerialize["s3Access"] = o.S3Access.Get()
	}
	if o.SmbAccess.IsSet() {
		toSerialize["smbAccess"] = o.SmbAccess.Get()
	}
	if o.SwiftAccess.IsSet() {
		toSerialize["swiftAccess"] = o.SwiftAccess.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableViewIdMappingProtoProtocolAccessInfo struct {
	value *ViewIdMappingProtoProtocolAccessInfo
	isSet bool
}

func (v NullableViewIdMappingProtoProtocolAccessInfo) Get() *ViewIdMappingProtoProtocolAccessInfo {
	return v.value
}

func (v *NullableViewIdMappingProtoProtocolAccessInfo) Set(val *ViewIdMappingProtoProtocolAccessInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableViewIdMappingProtoProtocolAccessInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableViewIdMappingProtoProtocolAccessInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewIdMappingProtoProtocolAccessInfo(val *ViewIdMappingProtoProtocolAccessInfo) *NullableViewIdMappingProtoProtocolAccessInfo {
	return &NullableViewIdMappingProtoProtocolAccessInfo{value: val, isSet: true}
}

func (v NullableViewIdMappingProtoProtocolAccessInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewIdMappingProtoProtocolAccessInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


