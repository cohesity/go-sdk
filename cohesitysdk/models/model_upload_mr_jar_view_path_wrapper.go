/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// UploadMRJarViewPathWrapper UploadMRJarViewPathWrapper contains jar name and local mount path where the Jars will be uploaded.
type UploadMRJarViewPathWrapper struct {
	// JarName is the name of the uploaded jar.
	JarName NullableString `json:"jarName,omitempty"`
	// JarPath is the path for the directory where uploaded jar is stored.
	JarPath NullableString `json:"jarPath,omitempty"`
}

// NewUploadMRJarViewPathWrapper instantiates a new UploadMRJarViewPathWrapper object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadMRJarViewPathWrapper() *UploadMRJarViewPathWrapper {
	this := UploadMRJarViewPathWrapper{}
	return &this
}

// NewUploadMRJarViewPathWrapperWithDefaults instantiates a new UploadMRJarViewPathWrapper object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadMRJarViewPathWrapperWithDefaults() *UploadMRJarViewPathWrapper {
	this := UploadMRJarViewPathWrapper{}
	return &this
}

// GetJarName returns the JarName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UploadMRJarViewPathWrapper) GetJarName() string {
	if o == nil || o.JarName.Get() == nil {
		var ret string
		return ret
	}
	return *o.JarName.Get()
}

// GetJarNameOk returns a tuple with the JarName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UploadMRJarViewPathWrapper) GetJarNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.JarName.Get(), o.JarName.IsSet()
}

// HasJarName returns a boolean if a field has been set.
func (o *UploadMRJarViewPathWrapper) HasJarName() bool {
	if o != nil && o.JarName.IsSet() {
		return true
	}

	return false
}

// SetJarName gets a reference to the given NullableString and assigns it to the JarName field.
func (o *UploadMRJarViewPathWrapper) SetJarName(v string) {
	o.JarName.Set(&v)
}
// SetJarNameNil sets the value for JarName to be an explicit nil
func (o *UploadMRJarViewPathWrapper) SetJarNameNil() {
	o.JarName.Set(nil)
}

// UnsetJarName ensures that no value is present for JarName, not even an explicit nil
func (o *UploadMRJarViewPathWrapper) UnsetJarName() {
	o.JarName.Unset()
}

// GetJarPath returns the JarPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UploadMRJarViewPathWrapper) GetJarPath() string {
	if o == nil || o.JarPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.JarPath.Get()
}

// GetJarPathOk returns a tuple with the JarPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UploadMRJarViewPathWrapper) GetJarPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.JarPath.Get(), o.JarPath.IsSet()
}

// HasJarPath returns a boolean if a field has been set.
func (o *UploadMRJarViewPathWrapper) HasJarPath() bool {
	if o != nil && o.JarPath.IsSet() {
		return true
	}

	return false
}

// SetJarPath gets a reference to the given NullableString and assigns it to the JarPath field.
func (o *UploadMRJarViewPathWrapper) SetJarPath(v string) {
	o.JarPath.Set(&v)
}
// SetJarPathNil sets the value for JarPath to be an explicit nil
func (o *UploadMRJarViewPathWrapper) SetJarPathNil() {
	o.JarPath.Set(nil)
}

// UnsetJarPath ensures that no value is present for JarPath, not even an explicit nil
func (o *UploadMRJarViewPathWrapper) UnsetJarPath() {
	o.JarPath.Unset()
}

func (o UploadMRJarViewPathWrapper) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.JarName.IsSet() {
		toSerialize["jarName"] = o.JarName.Get()
	}
	if o.JarPath.IsSet() {
		toSerialize["jarPath"] = o.JarPath.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUploadMRJarViewPathWrapper struct {
	value *UploadMRJarViewPathWrapper
	isSet bool
}

func (v NullableUploadMRJarViewPathWrapper) Get() *UploadMRJarViewPathWrapper {
	return v.value
}

func (v *NullableUploadMRJarViewPathWrapper) Set(val *UploadMRJarViewPathWrapper) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadMRJarViewPathWrapper) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadMRJarViewPathWrapper) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadMRJarViewPathWrapper(val *UploadMRJarViewPathWrapper) *NullableUploadMRJarViewPathWrapper {
	return &NullableUploadMRJarViewPathWrapper{value: val, isSet: true}
}

func (v NullableUploadMRJarViewPathWrapper) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadMRJarViewPathWrapper) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


