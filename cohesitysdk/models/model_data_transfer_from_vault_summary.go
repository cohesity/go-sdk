/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// DataTransferFromVaultSummary Specifies summary statistics about the transfer of data from a Vault to this Cohesity Cluster.
type DataTransferFromVaultSummary struct {
	// Array of Data Transferred Per Task.  Specifies the transfer of data from this Vault to this Cohesity Cluster for each clone or recover task.
	DataTransferPerTask []DataTransferFromVaultPerTask `json:"dataTransferPerTask,omitempty"`
	// Specifies the total number of logical bytes that have been transferred from this Vault (External Target) to this Cohesity Cluster. The logical size is when the data is fully hydrated or expanded.
	NumLogicalBytesTransferred NullableInt64 `json:"numLogicalBytesTransferred,omitempty"`
	// Specifies the total number of physical bytes that have been transferred from this Vault (External Target) to the Cohesity Cluster.
	NumPhysicalBytesTransferred NullableInt64 `json:"numPhysicalBytesTransferred,omitempty"`
	// Specifies the number of recover or clone tasks that have transferred data from this Vault (External Target) to this Cohesity Cluster.
	NumTasks NullableInt64 `json:"numTasks,omitempty"`
	// Array of Physical Data Transferred Per Day.  Specifies the physical data transferred from this Vault to the Cohesity Cluster during the time period specified using the startTimeMsecs and endTimeMsecs parameters. For each day in the time period, an array element is returned, for example if 7 days are specified, 7 array elements are returned.
	PhysicalDataTransferredBytesDuringTimeRange []int64 `json:"physicalDataTransferredBytesDuringTimeRange,omitempty"`
	// Specifies the name of the Vault (External Target).
	VaultName NullableString `json:"vaultName,omitempty"`
}

// NewDataTransferFromVaultSummary instantiates a new DataTransferFromVaultSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataTransferFromVaultSummary() *DataTransferFromVaultSummary {
	this := DataTransferFromVaultSummary{}
	return &this
}

// NewDataTransferFromVaultSummaryWithDefaults instantiates a new DataTransferFromVaultSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataTransferFromVaultSummaryWithDefaults() *DataTransferFromVaultSummary {
	this := DataTransferFromVaultSummary{}
	return &this
}

// GetDataTransferPerTask returns the DataTransferPerTask field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTransferFromVaultSummary) GetDataTransferPerTask() []DataTransferFromVaultPerTask {
	if o == nil  {
		var ret []DataTransferFromVaultPerTask
		return ret
	}
	return o.DataTransferPerTask
}

// GetDataTransferPerTaskOk returns a tuple with the DataTransferPerTask field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTransferFromVaultSummary) GetDataTransferPerTaskOk() (*[]DataTransferFromVaultPerTask, bool) {
	if o == nil || o.DataTransferPerTask == nil {
		return nil, false
	}
	return &o.DataTransferPerTask, true
}

// HasDataTransferPerTask returns a boolean if a field has been set.
func (o *DataTransferFromVaultSummary) HasDataTransferPerTask() bool {
	if o != nil && o.DataTransferPerTask != nil {
		return true
	}

	return false
}

// SetDataTransferPerTask gets a reference to the given []DataTransferFromVaultPerTask and assigns it to the DataTransferPerTask field.
func (o *DataTransferFromVaultSummary) SetDataTransferPerTask(v []DataTransferFromVaultPerTask) {
	o.DataTransferPerTask = v
}

// GetNumLogicalBytesTransferred returns the NumLogicalBytesTransferred field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTransferFromVaultSummary) GetNumLogicalBytesTransferred() int64 {
	if o == nil || o.NumLogicalBytesTransferred.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NumLogicalBytesTransferred.Get()
}

// GetNumLogicalBytesTransferredOk returns a tuple with the NumLogicalBytesTransferred field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTransferFromVaultSummary) GetNumLogicalBytesTransferredOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumLogicalBytesTransferred.Get(), o.NumLogicalBytesTransferred.IsSet()
}

// HasNumLogicalBytesTransferred returns a boolean if a field has been set.
func (o *DataTransferFromVaultSummary) HasNumLogicalBytesTransferred() bool {
	if o != nil && o.NumLogicalBytesTransferred.IsSet() {
		return true
	}

	return false
}

// SetNumLogicalBytesTransferred gets a reference to the given NullableInt64 and assigns it to the NumLogicalBytesTransferred field.
func (o *DataTransferFromVaultSummary) SetNumLogicalBytesTransferred(v int64) {
	o.NumLogicalBytesTransferred.Set(&v)
}
// SetNumLogicalBytesTransferredNil sets the value for NumLogicalBytesTransferred to be an explicit nil
func (o *DataTransferFromVaultSummary) SetNumLogicalBytesTransferredNil() {
	o.NumLogicalBytesTransferred.Set(nil)
}

// UnsetNumLogicalBytesTransferred ensures that no value is present for NumLogicalBytesTransferred, not even an explicit nil
func (o *DataTransferFromVaultSummary) UnsetNumLogicalBytesTransferred() {
	o.NumLogicalBytesTransferred.Unset()
}

// GetNumPhysicalBytesTransferred returns the NumPhysicalBytesTransferred field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTransferFromVaultSummary) GetNumPhysicalBytesTransferred() int64 {
	if o == nil || o.NumPhysicalBytesTransferred.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NumPhysicalBytesTransferred.Get()
}

// GetNumPhysicalBytesTransferredOk returns a tuple with the NumPhysicalBytesTransferred field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTransferFromVaultSummary) GetNumPhysicalBytesTransferredOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumPhysicalBytesTransferred.Get(), o.NumPhysicalBytesTransferred.IsSet()
}

// HasNumPhysicalBytesTransferred returns a boolean if a field has been set.
func (o *DataTransferFromVaultSummary) HasNumPhysicalBytesTransferred() bool {
	if o != nil && o.NumPhysicalBytesTransferred.IsSet() {
		return true
	}

	return false
}

// SetNumPhysicalBytesTransferred gets a reference to the given NullableInt64 and assigns it to the NumPhysicalBytesTransferred field.
func (o *DataTransferFromVaultSummary) SetNumPhysicalBytesTransferred(v int64) {
	o.NumPhysicalBytesTransferred.Set(&v)
}
// SetNumPhysicalBytesTransferredNil sets the value for NumPhysicalBytesTransferred to be an explicit nil
func (o *DataTransferFromVaultSummary) SetNumPhysicalBytesTransferredNil() {
	o.NumPhysicalBytesTransferred.Set(nil)
}

// UnsetNumPhysicalBytesTransferred ensures that no value is present for NumPhysicalBytesTransferred, not even an explicit nil
func (o *DataTransferFromVaultSummary) UnsetNumPhysicalBytesTransferred() {
	o.NumPhysicalBytesTransferred.Unset()
}

// GetNumTasks returns the NumTasks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTransferFromVaultSummary) GetNumTasks() int64 {
	if o == nil || o.NumTasks.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NumTasks.Get()
}

// GetNumTasksOk returns a tuple with the NumTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTransferFromVaultSummary) GetNumTasksOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumTasks.Get(), o.NumTasks.IsSet()
}

// HasNumTasks returns a boolean if a field has been set.
func (o *DataTransferFromVaultSummary) HasNumTasks() bool {
	if o != nil && o.NumTasks.IsSet() {
		return true
	}

	return false
}

// SetNumTasks gets a reference to the given NullableInt64 and assigns it to the NumTasks field.
func (o *DataTransferFromVaultSummary) SetNumTasks(v int64) {
	o.NumTasks.Set(&v)
}
// SetNumTasksNil sets the value for NumTasks to be an explicit nil
func (o *DataTransferFromVaultSummary) SetNumTasksNil() {
	o.NumTasks.Set(nil)
}

// UnsetNumTasks ensures that no value is present for NumTasks, not even an explicit nil
func (o *DataTransferFromVaultSummary) UnsetNumTasks() {
	o.NumTasks.Unset()
}

// GetPhysicalDataTransferredBytesDuringTimeRange returns the PhysicalDataTransferredBytesDuringTimeRange field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTransferFromVaultSummary) GetPhysicalDataTransferredBytesDuringTimeRange() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.PhysicalDataTransferredBytesDuringTimeRange
}

// GetPhysicalDataTransferredBytesDuringTimeRangeOk returns a tuple with the PhysicalDataTransferredBytesDuringTimeRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTransferFromVaultSummary) GetPhysicalDataTransferredBytesDuringTimeRangeOk() (*[]int64, bool) {
	if o == nil || o.PhysicalDataTransferredBytesDuringTimeRange == nil {
		return nil, false
	}
	return &o.PhysicalDataTransferredBytesDuringTimeRange, true
}

// HasPhysicalDataTransferredBytesDuringTimeRange returns a boolean if a field has been set.
func (o *DataTransferFromVaultSummary) HasPhysicalDataTransferredBytesDuringTimeRange() bool {
	if o != nil && o.PhysicalDataTransferredBytesDuringTimeRange != nil {
		return true
	}

	return false
}

// SetPhysicalDataTransferredBytesDuringTimeRange gets a reference to the given []int64 and assigns it to the PhysicalDataTransferredBytesDuringTimeRange field.
func (o *DataTransferFromVaultSummary) SetPhysicalDataTransferredBytesDuringTimeRange(v []int64) {
	o.PhysicalDataTransferredBytesDuringTimeRange = v
}

// GetVaultName returns the VaultName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTransferFromVaultSummary) GetVaultName() string {
	if o == nil || o.VaultName.Get() == nil {
		var ret string
		return ret
	}
	return *o.VaultName.Get()
}

// GetVaultNameOk returns a tuple with the VaultName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTransferFromVaultSummary) GetVaultNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VaultName.Get(), o.VaultName.IsSet()
}

// HasVaultName returns a boolean if a field has been set.
func (o *DataTransferFromVaultSummary) HasVaultName() bool {
	if o != nil && o.VaultName.IsSet() {
		return true
	}

	return false
}

// SetVaultName gets a reference to the given NullableString and assigns it to the VaultName field.
func (o *DataTransferFromVaultSummary) SetVaultName(v string) {
	o.VaultName.Set(&v)
}
// SetVaultNameNil sets the value for VaultName to be an explicit nil
func (o *DataTransferFromVaultSummary) SetVaultNameNil() {
	o.VaultName.Set(nil)
}

// UnsetVaultName ensures that no value is present for VaultName, not even an explicit nil
func (o *DataTransferFromVaultSummary) UnsetVaultName() {
	o.VaultName.Unset()
}

func (o DataTransferFromVaultSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DataTransferPerTask != nil {
		toSerialize["dataTransferPerTask"] = o.DataTransferPerTask
	}
	if o.NumLogicalBytesTransferred.IsSet() {
		toSerialize["numLogicalBytesTransferred"] = o.NumLogicalBytesTransferred.Get()
	}
	if o.NumPhysicalBytesTransferred.IsSet() {
		toSerialize["numPhysicalBytesTransferred"] = o.NumPhysicalBytesTransferred.Get()
	}
	if o.NumTasks.IsSet() {
		toSerialize["numTasks"] = o.NumTasks.Get()
	}
	if o.PhysicalDataTransferredBytesDuringTimeRange != nil {
		toSerialize["physicalDataTransferredBytesDuringTimeRange"] = o.PhysicalDataTransferredBytesDuringTimeRange
	}
	if o.VaultName.IsSet() {
		toSerialize["vaultName"] = o.VaultName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDataTransferFromVaultSummary struct {
	value *DataTransferFromVaultSummary
	isSet bool
}

func (v NullableDataTransferFromVaultSummary) Get() *DataTransferFromVaultSummary {
	return v.value
}

func (v *NullableDataTransferFromVaultSummary) Set(val *DataTransferFromVaultSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableDataTransferFromVaultSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableDataTransferFromVaultSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataTransferFromVaultSummary(val *DataTransferFromVaultSummary) *NullableDataTransferFromVaultSummary {
	return &NullableDataTransferFromVaultSummary{value: val, isSet: true}
}

func (v NullableDataTransferFromVaultSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataTransferFromVaultSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


