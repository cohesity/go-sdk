/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// IpDetails Entity Type      |  IP Address Details             | Details field  kHostSystem      |  VMKernel Adapter IP Addresses  | VMKernelAdapter  TODO(Matthew) : Use an enum for the 'Details'.
type IpDetails struct {
	// Details of the IP Addresses captured below
	Details NullableString `json:"details,omitempty"`
	// The IP Addresses
	IpAddresses []string `json:"ipAddresses,omitempty"`
}

// NewIpDetails instantiates a new IpDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpDetails() *IpDetails {
	this := IpDetails{}
	return &this
}

// NewIpDetailsWithDefaults instantiates a new IpDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpDetailsWithDefaults() *IpDetails {
	this := IpDetails{}
	return &this
}

// GetDetails returns the Details field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpDetails) GetDetails() string {
	if o == nil || o.Details.Get() == nil {
		var ret string
		return ret
	}
	return *o.Details.Get()
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpDetails) GetDetailsOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Details.Get(), o.Details.IsSet()
}

// HasDetails returns a boolean if a field has been set.
func (o *IpDetails) HasDetails() bool {
	if o != nil && o.Details.IsSet() {
		return true
	}

	return false
}

// SetDetails gets a reference to the given NullableString and assigns it to the Details field.
func (o *IpDetails) SetDetails(v string) {
	o.Details.Set(&v)
}
// SetDetailsNil sets the value for Details to be an explicit nil
func (o *IpDetails) SetDetailsNil() {
	o.Details.Set(nil)
}

// UnsetDetails ensures that no value is present for Details, not even an explicit nil
func (o *IpDetails) UnsetDetails() {
	o.Details.Unset()
}

// GetIpAddresses returns the IpAddresses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpDetails) GetIpAddresses() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.IpAddresses
}

// GetIpAddressesOk returns a tuple with the IpAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpDetails) GetIpAddressesOk() (*[]string, bool) {
	if o == nil || o.IpAddresses == nil {
		return nil, false
	}
	return &o.IpAddresses, true
}

// HasIpAddresses returns a boolean if a field has been set.
func (o *IpDetails) HasIpAddresses() bool {
	if o != nil && o.IpAddresses != nil {
		return true
	}

	return false
}

// SetIpAddresses gets a reference to the given []string and assigns it to the IpAddresses field.
func (o *IpDetails) SetIpAddresses(v []string) {
	o.IpAddresses = v
}

func (o IpDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Details.IsSet() {
		toSerialize["details"] = o.Details.Get()
	}
	if o.IpAddresses != nil {
		toSerialize["ipAddresses"] = o.IpAddresses
	}
	return json.Marshal(toSerialize)
}

type NullableIpDetails struct {
	value *IpDetails
	isSet bool
}

func (v NullableIpDetails) Get() *IpDetails {
	return v.value
}

func (v *NullableIpDetails) Set(val *IpDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableIpDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableIpDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpDetails(val *IpDetails) *NullableIpDetails {
	return &NullableIpDetails{value: val, isSet: true}
}

func (v NullableIpDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


