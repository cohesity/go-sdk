/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// FileRestoreInfo Specifies restore information of a file or a folder.
type FileRestoreInfo struct {
	Error *RequestError `json:"error,omitempty"`
	// Specifies the path of the file/directory.
	Filename NullableString `json:"filename,omitempty"`
	FilesystemVolume *FilesystemVolume `json:"filesystemVolume,omitempty"`
	// Specifies whether the file path is a folder.
	IsFolder NullableBool `json:"isFolder,omitempty"`
}

// NewFileRestoreInfo instantiates a new FileRestoreInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileRestoreInfo() *FileRestoreInfo {
	this := FileRestoreInfo{}
	return &this
}

// NewFileRestoreInfoWithDefaults instantiates a new FileRestoreInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileRestoreInfoWithDefaults() *FileRestoreInfo {
	this := FileRestoreInfo{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *FileRestoreInfo) GetError() RequestError {
	if o == nil || o.Error == nil {
		var ret RequestError
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileRestoreInfo) GetErrorOk() (*RequestError, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *FileRestoreInfo) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given RequestError and assigns it to the Error field.
func (o *FileRestoreInfo) SetError(v RequestError) {
	o.Error = &v
}

// GetFilename returns the Filename field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileRestoreInfo) GetFilename() string {
	if o == nil || o.Filename.Get() == nil {
		var ret string
		return ret
	}
	return *o.Filename.Get()
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileRestoreInfo) GetFilenameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Filename.Get(), o.Filename.IsSet()
}

// HasFilename returns a boolean if a field has been set.
func (o *FileRestoreInfo) HasFilename() bool {
	if o != nil && o.Filename.IsSet() {
		return true
	}

	return false
}

// SetFilename gets a reference to the given NullableString and assigns it to the Filename field.
func (o *FileRestoreInfo) SetFilename(v string) {
	o.Filename.Set(&v)
}
// SetFilenameNil sets the value for Filename to be an explicit nil
func (o *FileRestoreInfo) SetFilenameNil() {
	o.Filename.Set(nil)
}

// UnsetFilename ensures that no value is present for Filename, not even an explicit nil
func (o *FileRestoreInfo) UnsetFilename() {
	o.Filename.Unset()
}

// GetFilesystemVolume returns the FilesystemVolume field value if set, zero value otherwise.
func (o *FileRestoreInfo) GetFilesystemVolume() FilesystemVolume {
	if o == nil || o.FilesystemVolume == nil {
		var ret FilesystemVolume
		return ret
	}
	return *o.FilesystemVolume
}

// GetFilesystemVolumeOk returns a tuple with the FilesystemVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileRestoreInfo) GetFilesystemVolumeOk() (*FilesystemVolume, bool) {
	if o == nil || o.FilesystemVolume == nil {
		return nil, false
	}
	return o.FilesystemVolume, true
}

// HasFilesystemVolume returns a boolean if a field has been set.
func (o *FileRestoreInfo) HasFilesystemVolume() bool {
	if o != nil && o.FilesystemVolume != nil {
		return true
	}

	return false
}

// SetFilesystemVolume gets a reference to the given FilesystemVolume and assigns it to the FilesystemVolume field.
func (o *FileRestoreInfo) SetFilesystemVolume(v FilesystemVolume) {
	o.FilesystemVolume = &v
}

// GetIsFolder returns the IsFolder field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileRestoreInfo) GetIsFolder() bool {
	if o == nil || o.IsFolder.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsFolder.Get()
}

// GetIsFolderOk returns a tuple with the IsFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileRestoreInfo) GetIsFolderOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsFolder.Get(), o.IsFolder.IsSet()
}

// HasIsFolder returns a boolean if a field has been set.
func (o *FileRestoreInfo) HasIsFolder() bool {
	if o != nil && o.IsFolder.IsSet() {
		return true
	}

	return false
}

// SetIsFolder gets a reference to the given NullableBool and assigns it to the IsFolder field.
func (o *FileRestoreInfo) SetIsFolder(v bool) {
	o.IsFolder.Set(&v)
}
// SetIsFolderNil sets the value for IsFolder to be an explicit nil
func (o *FileRestoreInfo) SetIsFolderNil() {
	o.IsFolder.Set(nil)
}

// UnsetIsFolder ensures that no value is present for IsFolder, not even an explicit nil
func (o *FileRestoreInfo) UnsetIsFolder() {
	o.IsFolder.Unset()
}

func (o FileRestoreInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.Filename.IsSet() {
		toSerialize["filename"] = o.Filename.Get()
	}
	if o.FilesystemVolume != nil {
		toSerialize["filesystemVolume"] = o.FilesystemVolume
	}
	if o.IsFolder.IsSet() {
		toSerialize["isFolder"] = o.IsFolder.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableFileRestoreInfo struct {
	value *FileRestoreInfo
	isSet bool
}

func (v NullableFileRestoreInfo) Get() *FileRestoreInfo {
	return v.value
}

func (v *NullableFileRestoreInfo) Set(val *FileRestoreInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableFileRestoreInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableFileRestoreInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileRestoreInfo(val *FileRestoreInfo) *NullableFileRestoreInfo {
	return &NullableFileRestoreInfo{value: val, isSet: true}
}

func (v NullableFileRestoreInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileRestoreInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


