/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// DataTransferFromVaultPerTask Specifies statistics about the transfer of data from a Vault (External Target) to this Cohesity Cluster for a recover or clone task.
type DataTransferFromVaultPerTask struct {
	// Specifies the total number of logical bytes that are transferred from this Vault to the Cohesity Cluster for this task. The logical size is when the data is fully hydrated or expanded.
	NumLogicalBytesTransferred NullableInt64 `json:"numLogicalBytesTransferred,omitempty"`
	// Specifies the total number of physical bytes that are transferred from this Vault to the Cohesity Cluster for this task.
	NumPhysicalBytesTransferred NullableInt64 `json:"numPhysicalBytesTransferred,omitempty"`
	// Specifies the task name.
	TaskName NullableString `json:"taskName,omitempty"`
	// Specifies the task type.
	TaskType NullableString `json:"taskType,omitempty"`
}

// NewDataTransferFromVaultPerTask instantiates a new DataTransferFromVaultPerTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataTransferFromVaultPerTask() *DataTransferFromVaultPerTask {
	this := DataTransferFromVaultPerTask{}
	return &this
}

// NewDataTransferFromVaultPerTaskWithDefaults instantiates a new DataTransferFromVaultPerTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataTransferFromVaultPerTaskWithDefaults() *DataTransferFromVaultPerTask {
	this := DataTransferFromVaultPerTask{}
	return &this
}

// GetNumLogicalBytesTransferred returns the NumLogicalBytesTransferred field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTransferFromVaultPerTask) GetNumLogicalBytesTransferred() int64 {
	if o == nil || o.NumLogicalBytesTransferred.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NumLogicalBytesTransferred.Get()
}

// GetNumLogicalBytesTransferredOk returns a tuple with the NumLogicalBytesTransferred field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTransferFromVaultPerTask) GetNumLogicalBytesTransferredOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumLogicalBytesTransferred.Get(), o.NumLogicalBytesTransferred.IsSet()
}

// HasNumLogicalBytesTransferred returns a boolean if a field has been set.
func (o *DataTransferFromVaultPerTask) HasNumLogicalBytesTransferred() bool {
	if o != nil && o.NumLogicalBytesTransferred.IsSet() {
		return true
	}

	return false
}

// SetNumLogicalBytesTransferred gets a reference to the given NullableInt64 and assigns it to the NumLogicalBytesTransferred field.
func (o *DataTransferFromVaultPerTask) SetNumLogicalBytesTransferred(v int64) {
	o.NumLogicalBytesTransferred.Set(&v)
}
// SetNumLogicalBytesTransferredNil sets the value for NumLogicalBytesTransferred to be an explicit nil
func (o *DataTransferFromVaultPerTask) SetNumLogicalBytesTransferredNil() {
	o.NumLogicalBytesTransferred.Set(nil)
}

// UnsetNumLogicalBytesTransferred ensures that no value is present for NumLogicalBytesTransferred, not even an explicit nil
func (o *DataTransferFromVaultPerTask) UnsetNumLogicalBytesTransferred() {
	o.NumLogicalBytesTransferred.Unset()
}

// GetNumPhysicalBytesTransferred returns the NumPhysicalBytesTransferred field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTransferFromVaultPerTask) GetNumPhysicalBytesTransferred() int64 {
	if o == nil || o.NumPhysicalBytesTransferred.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NumPhysicalBytesTransferred.Get()
}

// GetNumPhysicalBytesTransferredOk returns a tuple with the NumPhysicalBytesTransferred field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTransferFromVaultPerTask) GetNumPhysicalBytesTransferredOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumPhysicalBytesTransferred.Get(), o.NumPhysicalBytesTransferred.IsSet()
}

// HasNumPhysicalBytesTransferred returns a boolean if a field has been set.
func (o *DataTransferFromVaultPerTask) HasNumPhysicalBytesTransferred() bool {
	if o != nil && o.NumPhysicalBytesTransferred.IsSet() {
		return true
	}

	return false
}

// SetNumPhysicalBytesTransferred gets a reference to the given NullableInt64 and assigns it to the NumPhysicalBytesTransferred field.
func (o *DataTransferFromVaultPerTask) SetNumPhysicalBytesTransferred(v int64) {
	o.NumPhysicalBytesTransferred.Set(&v)
}
// SetNumPhysicalBytesTransferredNil sets the value for NumPhysicalBytesTransferred to be an explicit nil
func (o *DataTransferFromVaultPerTask) SetNumPhysicalBytesTransferredNil() {
	o.NumPhysicalBytesTransferred.Set(nil)
}

// UnsetNumPhysicalBytesTransferred ensures that no value is present for NumPhysicalBytesTransferred, not even an explicit nil
func (o *DataTransferFromVaultPerTask) UnsetNumPhysicalBytesTransferred() {
	o.NumPhysicalBytesTransferred.Unset()
}

// GetTaskName returns the TaskName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTransferFromVaultPerTask) GetTaskName() string {
	if o == nil || o.TaskName.Get() == nil {
		var ret string
		return ret
	}
	return *o.TaskName.Get()
}

// GetTaskNameOk returns a tuple with the TaskName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTransferFromVaultPerTask) GetTaskNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TaskName.Get(), o.TaskName.IsSet()
}

// HasTaskName returns a boolean if a field has been set.
func (o *DataTransferFromVaultPerTask) HasTaskName() bool {
	if o != nil && o.TaskName.IsSet() {
		return true
	}

	return false
}

// SetTaskName gets a reference to the given NullableString and assigns it to the TaskName field.
func (o *DataTransferFromVaultPerTask) SetTaskName(v string) {
	o.TaskName.Set(&v)
}
// SetTaskNameNil sets the value for TaskName to be an explicit nil
func (o *DataTransferFromVaultPerTask) SetTaskNameNil() {
	o.TaskName.Set(nil)
}

// UnsetTaskName ensures that no value is present for TaskName, not even an explicit nil
func (o *DataTransferFromVaultPerTask) UnsetTaskName() {
	o.TaskName.Unset()
}

// GetTaskType returns the TaskType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTransferFromVaultPerTask) GetTaskType() string {
	if o == nil || o.TaskType.Get() == nil {
		var ret string
		return ret
	}
	return *o.TaskType.Get()
}

// GetTaskTypeOk returns a tuple with the TaskType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTransferFromVaultPerTask) GetTaskTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TaskType.Get(), o.TaskType.IsSet()
}

// HasTaskType returns a boolean if a field has been set.
func (o *DataTransferFromVaultPerTask) HasTaskType() bool {
	if o != nil && o.TaskType.IsSet() {
		return true
	}

	return false
}

// SetTaskType gets a reference to the given NullableString and assigns it to the TaskType field.
func (o *DataTransferFromVaultPerTask) SetTaskType(v string) {
	o.TaskType.Set(&v)
}
// SetTaskTypeNil sets the value for TaskType to be an explicit nil
func (o *DataTransferFromVaultPerTask) SetTaskTypeNil() {
	o.TaskType.Set(nil)
}

// UnsetTaskType ensures that no value is present for TaskType, not even an explicit nil
func (o *DataTransferFromVaultPerTask) UnsetTaskType() {
	o.TaskType.Unset()
}

func (o DataTransferFromVaultPerTask) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NumLogicalBytesTransferred.IsSet() {
		toSerialize["numLogicalBytesTransferred"] = o.NumLogicalBytesTransferred.Get()
	}
	if o.NumPhysicalBytesTransferred.IsSet() {
		toSerialize["numPhysicalBytesTransferred"] = o.NumPhysicalBytesTransferred.Get()
	}
	if o.TaskName.IsSet() {
		toSerialize["taskName"] = o.TaskName.Get()
	}
	if o.TaskType.IsSet() {
		toSerialize["taskType"] = o.TaskType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDataTransferFromVaultPerTask struct {
	value *DataTransferFromVaultPerTask
	isSet bool
}

func (v NullableDataTransferFromVaultPerTask) Get() *DataTransferFromVaultPerTask {
	return v.value
}

func (v *NullableDataTransferFromVaultPerTask) Set(val *DataTransferFromVaultPerTask) {
	v.value = val
	v.isSet = true
}

func (v NullableDataTransferFromVaultPerTask) IsSet() bool {
	return v.isSet
}

func (v *NullableDataTransferFromVaultPerTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataTransferFromVaultPerTask(val *DataTransferFromVaultPerTask) *NullableDataTransferFromVaultPerTask {
	return &NullableDataTransferFromVaultPerTask{value: val, isSet: true}
}

func (v NullableDataTransferFromVaultPerTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataTransferFromVaultPerTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


