/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// NodeIpmiUser struct for NodeIpmiUser
type NodeIpmiUser struct {
	// In request, IPMI password is entered by the user. In response, it is is set to empty and hence will be omitted.
	IpmiPassword NullableString `json:"ipmiPassword,omitempty"`
	IpmiUser NullableString `json:"ipmiUser,omitempty"`
	NodeIp NullableString `json:"nodeIp,omitempty"`
}

// NewNodeIpmiUser instantiates a new NodeIpmiUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeIpmiUser() *NodeIpmiUser {
	this := NodeIpmiUser{}
	return &this
}

// NewNodeIpmiUserWithDefaults instantiates a new NodeIpmiUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeIpmiUserWithDefaults() *NodeIpmiUser {
	this := NodeIpmiUser{}
	return &this
}

// GetIpmiPassword returns the IpmiPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeIpmiUser) GetIpmiPassword() string {
	if o == nil || o.IpmiPassword.Get() == nil {
		var ret string
		return ret
	}
	return *o.IpmiPassword.Get()
}

// GetIpmiPasswordOk returns a tuple with the IpmiPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeIpmiUser) GetIpmiPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IpmiPassword.Get(), o.IpmiPassword.IsSet()
}

// HasIpmiPassword returns a boolean if a field has been set.
func (o *NodeIpmiUser) HasIpmiPassword() bool {
	if o != nil && o.IpmiPassword.IsSet() {
		return true
	}

	return false
}

// SetIpmiPassword gets a reference to the given NullableString and assigns it to the IpmiPassword field.
func (o *NodeIpmiUser) SetIpmiPassword(v string) {
	o.IpmiPassword.Set(&v)
}
// SetIpmiPasswordNil sets the value for IpmiPassword to be an explicit nil
func (o *NodeIpmiUser) SetIpmiPasswordNil() {
	o.IpmiPassword.Set(nil)
}

// UnsetIpmiPassword ensures that no value is present for IpmiPassword, not even an explicit nil
func (o *NodeIpmiUser) UnsetIpmiPassword() {
	o.IpmiPassword.Unset()
}

// GetIpmiUser returns the IpmiUser field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeIpmiUser) GetIpmiUser() string {
	if o == nil || o.IpmiUser.Get() == nil {
		var ret string
		return ret
	}
	return *o.IpmiUser.Get()
}

// GetIpmiUserOk returns a tuple with the IpmiUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeIpmiUser) GetIpmiUserOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IpmiUser.Get(), o.IpmiUser.IsSet()
}

// HasIpmiUser returns a boolean if a field has been set.
func (o *NodeIpmiUser) HasIpmiUser() bool {
	if o != nil && o.IpmiUser.IsSet() {
		return true
	}

	return false
}

// SetIpmiUser gets a reference to the given NullableString and assigns it to the IpmiUser field.
func (o *NodeIpmiUser) SetIpmiUser(v string) {
	o.IpmiUser.Set(&v)
}
// SetIpmiUserNil sets the value for IpmiUser to be an explicit nil
func (o *NodeIpmiUser) SetIpmiUserNil() {
	o.IpmiUser.Set(nil)
}

// UnsetIpmiUser ensures that no value is present for IpmiUser, not even an explicit nil
func (o *NodeIpmiUser) UnsetIpmiUser() {
	o.IpmiUser.Unset()
}

// GetNodeIp returns the NodeIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeIpmiUser) GetNodeIp() string {
	if o == nil || o.NodeIp.Get() == nil {
		var ret string
		return ret
	}
	return *o.NodeIp.Get()
}

// GetNodeIpOk returns a tuple with the NodeIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeIpmiUser) GetNodeIpOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NodeIp.Get(), o.NodeIp.IsSet()
}

// HasNodeIp returns a boolean if a field has been set.
func (o *NodeIpmiUser) HasNodeIp() bool {
	if o != nil && o.NodeIp.IsSet() {
		return true
	}

	return false
}

// SetNodeIp gets a reference to the given NullableString and assigns it to the NodeIp field.
func (o *NodeIpmiUser) SetNodeIp(v string) {
	o.NodeIp.Set(&v)
}
// SetNodeIpNil sets the value for NodeIp to be an explicit nil
func (o *NodeIpmiUser) SetNodeIpNil() {
	o.NodeIp.Set(nil)
}

// UnsetNodeIp ensures that no value is present for NodeIp, not even an explicit nil
func (o *NodeIpmiUser) UnsetNodeIp() {
	o.NodeIp.Unset()
}

func (o NodeIpmiUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IpmiPassword.IsSet() {
		toSerialize["ipmiPassword"] = o.IpmiPassword.Get()
	}
	if o.IpmiUser.IsSet() {
		toSerialize["ipmiUser"] = o.IpmiUser.Get()
	}
	if o.NodeIp.IsSet() {
		toSerialize["nodeIp"] = o.NodeIp.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableNodeIpmiUser struct {
	value *NodeIpmiUser
	isSet bool
}

func (v NullableNodeIpmiUser) Get() *NodeIpmiUser {
	return v.value
}

func (v *NullableNodeIpmiUser) Set(val *NodeIpmiUser) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeIpmiUser) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeIpmiUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeIpmiUser(val *NodeIpmiUser) *NullableNodeIpmiUser {
	return &NullableNodeIpmiUser{value: val, isSet: true}
}

func (v NullableNodeIpmiUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeIpmiUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


