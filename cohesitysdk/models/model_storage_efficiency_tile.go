/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// StorageEfficiencyTile StorageEfficiencyTile gives tile information for the storage saved because of compression and dedupe done on the cluster.
type StorageEfficiencyTile struct {
	// Specifies the size of data brought into the cluster. This is the usage before data reduction if we ignore the zeroes and effects of cloning.
	DataInBytes NullableInt64 `json:"dataInBytes,omitempty"`
	// Specifies the samples taken for Data brought into the cluster in bytes in ascending order of time.
	DataInBytesSamples []Sample `json:"dataInBytesSamples,omitempty"`
	// Specifies the size of data after compression and or dedupe operations just before the data is replicated to other nodes as per RF or Erasure Coding policy.
	DataInDedupedBytes NullableInt64 `json:"dataInDedupedBytes,omitempty"`
	// Specifies the samples taken for morphed data in bytes in ascending order of time.
	DataInDedupedBytesSamples []Sample `json:"dataInDedupedBytesSamples,omitempty"`
	// Specifies the current dedupe ratio on the cluster. It is the ratio of DataInBytes to DataInDedupedBytes.
	DedupeRatio NullableFloat64 `json:"dedupeRatio,omitempty"`
	// Specifies the samples for data reduction ratio in ascending order of time.
	DedupeRatioSamples []Sample `json:"dedupeRatioSamples,omitempty"`
	// Specifies the duration in days in which the samples were taken. For this tile, it is 7 days.
	DurationDays NullableInt32 `json:"durationDays,omitempty"`
	// Specifies the interval between the samples in seconds. For this tile, it is 1 day which is 86400 seconds.
	IntervalSeconds NullableInt32 `json:"intervalSeconds,omitempty"`
	// Specifies the size of logical data currently represented on the cluster.
	LogicalUsedBytes NullableInt64 `json:"logicalUsedBytes,omitempty"`
	// Specifies the samples taken for logical data represented in bytes in ascending order of time.
	LogicalUsedBytesSamples []Sample `json:"logicalUsedBytesSamples,omitempty"`
	// Specifies the size of physical data currently consumed on the cluster.
	PhysicalUsedBytes NullableInt64 `json:"physicalUsedBytes,omitempty"`
	// Specifies the samples taken for physical data consumed in bytes in ascending order of time.
	PhysicalUsedBytesSamples []Sample `json:"physicalUsedBytesSamples,omitempty"`
	// Specifies the current storage reduction ratio on the cluster. It is the ratio of LogicalUsedBytes to PhysicalUsedBytes.
	StorageReductionRatio NullableFloat64 `json:"storageReductionRatio,omitempty"`
	// Specifies the samples for storage reduction ratio in ascending order of time.
	StorageReductionSamples []Sample `json:"storageReductionSamples,omitempty"`
}

// NewStorageEfficiencyTile instantiates a new StorageEfficiencyTile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageEfficiencyTile() *StorageEfficiencyTile {
	this := StorageEfficiencyTile{}
	return &this
}

// NewStorageEfficiencyTileWithDefaults instantiates a new StorageEfficiencyTile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageEfficiencyTileWithDefaults() *StorageEfficiencyTile {
	this := StorageEfficiencyTile{}
	return &this
}

// GetDataInBytes returns the DataInBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageEfficiencyTile) GetDataInBytes() int64 {
	if o == nil || o.DataInBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DataInBytes.Get()
}

// GetDataInBytesOk returns a tuple with the DataInBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageEfficiencyTile) GetDataInBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DataInBytes.Get(), o.DataInBytes.IsSet()
}

// HasDataInBytes returns a boolean if a field has been set.
func (o *StorageEfficiencyTile) HasDataInBytes() bool {
	if o != nil && o.DataInBytes.IsSet() {
		return true
	}

	return false
}

// SetDataInBytes gets a reference to the given NullableInt64 and assigns it to the DataInBytes field.
func (o *StorageEfficiencyTile) SetDataInBytes(v int64) {
	o.DataInBytes.Set(&v)
}
// SetDataInBytesNil sets the value for DataInBytes to be an explicit nil
func (o *StorageEfficiencyTile) SetDataInBytesNil() {
	o.DataInBytes.Set(nil)
}

// UnsetDataInBytes ensures that no value is present for DataInBytes, not even an explicit nil
func (o *StorageEfficiencyTile) UnsetDataInBytes() {
	o.DataInBytes.Unset()
}

// GetDataInBytesSamples returns the DataInBytesSamples field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageEfficiencyTile) GetDataInBytesSamples() []Sample {
	if o == nil  {
		var ret []Sample
		return ret
	}
	return o.DataInBytesSamples
}

// GetDataInBytesSamplesOk returns a tuple with the DataInBytesSamples field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageEfficiencyTile) GetDataInBytesSamplesOk() (*[]Sample, bool) {
	if o == nil || o.DataInBytesSamples == nil {
		return nil, false
	}
	return &o.DataInBytesSamples, true
}

// HasDataInBytesSamples returns a boolean if a field has been set.
func (o *StorageEfficiencyTile) HasDataInBytesSamples() bool {
	if o != nil && o.DataInBytesSamples != nil {
		return true
	}

	return false
}

// SetDataInBytesSamples gets a reference to the given []Sample and assigns it to the DataInBytesSamples field.
func (o *StorageEfficiencyTile) SetDataInBytesSamples(v []Sample) {
	o.DataInBytesSamples = v
}

// GetDataInDedupedBytes returns the DataInDedupedBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageEfficiencyTile) GetDataInDedupedBytes() int64 {
	if o == nil || o.DataInDedupedBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DataInDedupedBytes.Get()
}

// GetDataInDedupedBytesOk returns a tuple with the DataInDedupedBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageEfficiencyTile) GetDataInDedupedBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DataInDedupedBytes.Get(), o.DataInDedupedBytes.IsSet()
}

// HasDataInDedupedBytes returns a boolean if a field has been set.
func (o *StorageEfficiencyTile) HasDataInDedupedBytes() bool {
	if o != nil && o.DataInDedupedBytes.IsSet() {
		return true
	}

	return false
}

// SetDataInDedupedBytes gets a reference to the given NullableInt64 and assigns it to the DataInDedupedBytes field.
func (o *StorageEfficiencyTile) SetDataInDedupedBytes(v int64) {
	o.DataInDedupedBytes.Set(&v)
}
// SetDataInDedupedBytesNil sets the value for DataInDedupedBytes to be an explicit nil
func (o *StorageEfficiencyTile) SetDataInDedupedBytesNil() {
	o.DataInDedupedBytes.Set(nil)
}

// UnsetDataInDedupedBytes ensures that no value is present for DataInDedupedBytes, not even an explicit nil
func (o *StorageEfficiencyTile) UnsetDataInDedupedBytes() {
	o.DataInDedupedBytes.Unset()
}

// GetDataInDedupedBytesSamples returns the DataInDedupedBytesSamples field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageEfficiencyTile) GetDataInDedupedBytesSamples() []Sample {
	if o == nil  {
		var ret []Sample
		return ret
	}
	return o.DataInDedupedBytesSamples
}

// GetDataInDedupedBytesSamplesOk returns a tuple with the DataInDedupedBytesSamples field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageEfficiencyTile) GetDataInDedupedBytesSamplesOk() (*[]Sample, bool) {
	if o == nil || o.DataInDedupedBytesSamples == nil {
		return nil, false
	}
	return &o.DataInDedupedBytesSamples, true
}

// HasDataInDedupedBytesSamples returns a boolean if a field has been set.
func (o *StorageEfficiencyTile) HasDataInDedupedBytesSamples() bool {
	if o != nil && o.DataInDedupedBytesSamples != nil {
		return true
	}

	return false
}

// SetDataInDedupedBytesSamples gets a reference to the given []Sample and assigns it to the DataInDedupedBytesSamples field.
func (o *StorageEfficiencyTile) SetDataInDedupedBytesSamples(v []Sample) {
	o.DataInDedupedBytesSamples = v
}

// GetDedupeRatio returns the DedupeRatio field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageEfficiencyTile) GetDedupeRatio() float64 {
	if o == nil || o.DedupeRatio.Get() == nil {
		var ret float64
		return ret
	}
	return *o.DedupeRatio.Get()
}

// GetDedupeRatioOk returns a tuple with the DedupeRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageEfficiencyTile) GetDedupeRatioOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DedupeRatio.Get(), o.DedupeRatio.IsSet()
}

// HasDedupeRatio returns a boolean if a field has been set.
func (o *StorageEfficiencyTile) HasDedupeRatio() bool {
	if o != nil && o.DedupeRatio.IsSet() {
		return true
	}

	return false
}

// SetDedupeRatio gets a reference to the given NullableFloat64 and assigns it to the DedupeRatio field.
func (o *StorageEfficiencyTile) SetDedupeRatio(v float64) {
	o.DedupeRatio.Set(&v)
}
// SetDedupeRatioNil sets the value for DedupeRatio to be an explicit nil
func (o *StorageEfficiencyTile) SetDedupeRatioNil() {
	o.DedupeRatio.Set(nil)
}

// UnsetDedupeRatio ensures that no value is present for DedupeRatio, not even an explicit nil
func (o *StorageEfficiencyTile) UnsetDedupeRatio() {
	o.DedupeRatio.Unset()
}

// GetDedupeRatioSamples returns the DedupeRatioSamples field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageEfficiencyTile) GetDedupeRatioSamples() []Sample {
	if o == nil  {
		var ret []Sample
		return ret
	}
	return o.DedupeRatioSamples
}

// GetDedupeRatioSamplesOk returns a tuple with the DedupeRatioSamples field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageEfficiencyTile) GetDedupeRatioSamplesOk() (*[]Sample, bool) {
	if o == nil || o.DedupeRatioSamples == nil {
		return nil, false
	}
	return &o.DedupeRatioSamples, true
}

// HasDedupeRatioSamples returns a boolean if a field has been set.
func (o *StorageEfficiencyTile) HasDedupeRatioSamples() bool {
	if o != nil && o.DedupeRatioSamples != nil {
		return true
	}

	return false
}

// SetDedupeRatioSamples gets a reference to the given []Sample and assigns it to the DedupeRatioSamples field.
func (o *StorageEfficiencyTile) SetDedupeRatioSamples(v []Sample) {
	o.DedupeRatioSamples = v
}

// GetDurationDays returns the DurationDays field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageEfficiencyTile) GetDurationDays() int32 {
	if o == nil || o.DurationDays.Get() == nil {
		var ret int32
		return ret
	}
	return *o.DurationDays.Get()
}

// GetDurationDaysOk returns a tuple with the DurationDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageEfficiencyTile) GetDurationDaysOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DurationDays.Get(), o.DurationDays.IsSet()
}

// HasDurationDays returns a boolean if a field has been set.
func (o *StorageEfficiencyTile) HasDurationDays() bool {
	if o != nil && o.DurationDays.IsSet() {
		return true
	}

	return false
}

// SetDurationDays gets a reference to the given NullableInt32 and assigns it to the DurationDays field.
func (o *StorageEfficiencyTile) SetDurationDays(v int32) {
	o.DurationDays.Set(&v)
}
// SetDurationDaysNil sets the value for DurationDays to be an explicit nil
func (o *StorageEfficiencyTile) SetDurationDaysNil() {
	o.DurationDays.Set(nil)
}

// UnsetDurationDays ensures that no value is present for DurationDays, not even an explicit nil
func (o *StorageEfficiencyTile) UnsetDurationDays() {
	o.DurationDays.Unset()
}

// GetIntervalSeconds returns the IntervalSeconds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageEfficiencyTile) GetIntervalSeconds() int32 {
	if o == nil || o.IntervalSeconds.Get() == nil {
		var ret int32
		return ret
	}
	return *o.IntervalSeconds.Get()
}

// GetIntervalSecondsOk returns a tuple with the IntervalSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageEfficiencyTile) GetIntervalSecondsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IntervalSeconds.Get(), o.IntervalSeconds.IsSet()
}

// HasIntervalSeconds returns a boolean if a field has been set.
func (o *StorageEfficiencyTile) HasIntervalSeconds() bool {
	if o != nil && o.IntervalSeconds.IsSet() {
		return true
	}

	return false
}

// SetIntervalSeconds gets a reference to the given NullableInt32 and assigns it to the IntervalSeconds field.
func (o *StorageEfficiencyTile) SetIntervalSeconds(v int32) {
	o.IntervalSeconds.Set(&v)
}
// SetIntervalSecondsNil sets the value for IntervalSeconds to be an explicit nil
func (o *StorageEfficiencyTile) SetIntervalSecondsNil() {
	o.IntervalSeconds.Set(nil)
}

// UnsetIntervalSeconds ensures that no value is present for IntervalSeconds, not even an explicit nil
func (o *StorageEfficiencyTile) UnsetIntervalSeconds() {
	o.IntervalSeconds.Unset()
}

// GetLogicalUsedBytes returns the LogicalUsedBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageEfficiencyTile) GetLogicalUsedBytes() int64 {
	if o == nil || o.LogicalUsedBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LogicalUsedBytes.Get()
}

// GetLogicalUsedBytesOk returns a tuple with the LogicalUsedBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageEfficiencyTile) GetLogicalUsedBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogicalUsedBytes.Get(), o.LogicalUsedBytes.IsSet()
}

// HasLogicalUsedBytes returns a boolean if a field has been set.
func (o *StorageEfficiencyTile) HasLogicalUsedBytes() bool {
	if o != nil && o.LogicalUsedBytes.IsSet() {
		return true
	}

	return false
}

// SetLogicalUsedBytes gets a reference to the given NullableInt64 and assigns it to the LogicalUsedBytes field.
func (o *StorageEfficiencyTile) SetLogicalUsedBytes(v int64) {
	o.LogicalUsedBytes.Set(&v)
}
// SetLogicalUsedBytesNil sets the value for LogicalUsedBytes to be an explicit nil
func (o *StorageEfficiencyTile) SetLogicalUsedBytesNil() {
	o.LogicalUsedBytes.Set(nil)
}

// UnsetLogicalUsedBytes ensures that no value is present for LogicalUsedBytes, not even an explicit nil
func (o *StorageEfficiencyTile) UnsetLogicalUsedBytes() {
	o.LogicalUsedBytes.Unset()
}

// GetLogicalUsedBytesSamples returns the LogicalUsedBytesSamples field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageEfficiencyTile) GetLogicalUsedBytesSamples() []Sample {
	if o == nil  {
		var ret []Sample
		return ret
	}
	return o.LogicalUsedBytesSamples
}

// GetLogicalUsedBytesSamplesOk returns a tuple with the LogicalUsedBytesSamples field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageEfficiencyTile) GetLogicalUsedBytesSamplesOk() (*[]Sample, bool) {
	if o == nil || o.LogicalUsedBytesSamples == nil {
		return nil, false
	}
	return &o.LogicalUsedBytesSamples, true
}

// HasLogicalUsedBytesSamples returns a boolean if a field has been set.
func (o *StorageEfficiencyTile) HasLogicalUsedBytesSamples() bool {
	if o != nil && o.LogicalUsedBytesSamples != nil {
		return true
	}

	return false
}

// SetLogicalUsedBytesSamples gets a reference to the given []Sample and assigns it to the LogicalUsedBytesSamples field.
func (o *StorageEfficiencyTile) SetLogicalUsedBytesSamples(v []Sample) {
	o.LogicalUsedBytesSamples = v
}

// GetPhysicalUsedBytes returns the PhysicalUsedBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageEfficiencyTile) GetPhysicalUsedBytes() int64 {
	if o == nil || o.PhysicalUsedBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.PhysicalUsedBytes.Get()
}

// GetPhysicalUsedBytesOk returns a tuple with the PhysicalUsedBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageEfficiencyTile) GetPhysicalUsedBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PhysicalUsedBytes.Get(), o.PhysicalUsedBytes.IsSet()
}

// HasPhysicalUsedBytes returns a boolean if a field has been set.
func (o *StorageEfficiencyTile) HasPhysicalUsedBytes() bool {
	if o != nil && o.PhysicalUsedBytes.IsSet() {
		return true
	}

	return false
}

// SetPhysicalUsedBytes gets a reference to the given NullableInt64 and assigns it to the PhysicalUsedBytes field.
func (o *StorageEfficiencyTile) SetPhysicalUsedBytes(v int64) {
	o.PhysicalUsedBytes.Set(&v)
}
// SetPhysicalUsedBytesNil sets the value for PhysicalUsedBytes to be an explicit nil
func (o *StorageEfficiencyTile) SetPhysicalUsedBytesNil() {
	o.PhysicalUsedBytes.Set(nil)
}

// UnsetPhysicalUsedBytes ensures that no value is present for PhysicalUsedBytes, not even an explicit nil
func (o *StorageEfficiencyTile) UnsetPhysicalUsedBytes() {
	o.PhysicalUsedBytes.Unset()
}

// GetPhysicalUsedBytesSamples returns the PhysicalUsedBytesSamples field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageEfficiencyTile) GetPhysicalUsedBytesSamples() []Sample {
	if o == nil  {
		var ret []Sample
		return ret
	}
	return o.PhysicalUsedBytesSamples
}

// GetPhysicalUsedBytesSamplesOk returns a tuple with the PhysicalUsedBytesSamples field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageEfficiencyTile) GetPhysicalUsedBytesSamplesOk() (*[]Sample, bool) {
	if o == nil || o.PhysicalUsedBytesSamples == nil {
		return nil, false
	}
	return &o.PhysicalUsedBytesSamples, true
}

// HasPhysicalUsedBytesSamples returns a boolean if a field has been set.
func (o *StorageEfficiencyTile) HasPhysicalUsedBytesSamples() bool {
	if o != nil && o.PhysicalUsedBytesSamples != nil {
		return true
	}

	return false
}

// SetPhysicalUsedBytesSamples gets a reference to the given []Sample and assigns it to the PhysicalUsedBytesSamples field.
func (o *StorageEfficiencyTile) SetPhysicalUsedBytesSamples(v []Sample) {
	o.PhysicalUsedBytesSamples = v
}

// GetStorageReductionRatio returns the StorageReductionRatio field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageEfficiencyTile) GetStorageReductionRatio() float64 {
	if o == nil || o.StorageReductionRatio.Get() == nil {
		var ret float64
		return ret
	}
	return *o.StorageReductionRatio.Get()
}

// GetStorageReductionRatioOk returns a tuple with the StorageReductionRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageEfficiencyTile) GetStorageReductionRatioOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageReductionRatio.Get(), o.StorageReductionRatio.IsSet()
}

// HasStorageReductionRatio returns a boolean if a field has been set.
func (o *StorageEfficiencyTile) HasStorageReductionRatio() bool {
	if o != nil && o.StorageReductionRatio.IsSet() {
		return true
	}

	return false
}

// SetStorageReductionRatio gets a reference to the given NullableFloat64 and assigns it to the StorageReductionRatio field.
func (o *StorageEfficiencyTile) SetStorageReductionRatio(v float64) {
	o.StorageReductionRatio.Set(&v)
}
// SetStorageReductionRatioNil sets the value for StorageReductionRatio to be an explicit nil
func (o *StorageEfficiencyTile) SetStorageReductionRatioNil() {
	o.StorageReductionRatio.Set(nil)
}

// UnsetStorageReductionRatio ensures that no value is present for StorageReductionRatio, not even an explicit nil
func (o *StorageEfficiencyTile) UnsetStorageReductionRatio() {
	o.StorageReductionRatio.Unset()
}

// GetStorageReductionSamples returns the StorageReductionSamples field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageEfficiencyTile) GetStorageReductionSamples() []Sample {
	if o == nil  {
		var ret []Sample
		return ret
	}
	return o.StorageReductionSamples
}

// GetStorageReductionSamplesOk returns a tuple with the StorageReductionSamples field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageEfficiencyTile) GetStorageReductionSamplesOk() (*[]Sample, bool) {
	if o == nil || o.StorageReductionSamples == nil {
		return nil, false
	}
	return &o.StorageReductionSamples, true
}

// HasStorageReductionSamples returns a boolean if a field has been set.
func (o *StorageEfficiencyTile) HasStorageReductionSamples() bool {
	if o != nil && o.StorageReductionSamples != nil {
		return true
	}

	return false
}

// SetStorageReductionSamples gets a reference to the given []Sample and assigns it to the StorageReductionSamples field.
func (o *StorageEfficiencyTile) SetStorageReductionSamples(v []Sample) {
	o.StorageReductionSamples = v
}

func (o StorageEfficiencyTile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DataInBytes.IsSet() {
		toSerialize["dataInBytes"] = o.DataInBytes.Get()
	}
	if o.DataInBytesSamples != nil {
		toSerialize["dataInBytesSamples"] = o.DataInBytesSamples
	}
	if o.DataInDedupedBytes.IsSet() {
		toSerialize["dataInDedupedBytes"] = o.DataInDedupedBytes.Get()
	}
	if o.DataInDedupedBytesSamples != nil {
		toSerialize["dataInDedupedBytesSamples"] = o.DataInDedupedBytesSamples
	}
	if o.DedupeRatio.IsSet() {
		toSerialize["dedupeRatio"] = o.DedupeRatio.Get()
	}
	if o.DedupeRatioSamples != nil {
		toSerialize["dedupeRatioSamples"] = o.DedupeRatioSamples
	}
	if o.DurationDays.IsSet() {
		toSerialize["durationDays"] = o.DurationDays.Get()
	}
	if o.IntervalSeconds.IsSet() {
		toSerialize["intervalSeconds"] = o.IntervalSeconds.Get()
	}
	if o.LogicalUsedBytes.IsSet() {
		toSerialize["logicalUsedBytes"] = o.LogicalUsedBytes.Get()
	}
	if o.LogicalUsedBytesSamples != nil {
		toSerialize["logicalUsedBytesSamples"] = o.LogicalUsedBytesSamples
	}
	if o.PhysicalUsedBytes.IsSet() {
		toSerialize["physicalUsedBytes"] = o.PhysicalUsedBytes.Get()
	}
	if o.PhysicalUsedBytesSamples != nil {
		toSerialize["physicalUsedBytesSamples"] = o.PhysicalUsedBytesSamples
	}
	if o.StorageReductionRatio.IsSet() {
		toSerialize["storageReductionRatio"] = o.StorageReductionRatio.Get()
	}
	if o.StorageReductionSamples != nil {
		toSerialize["storageReductionSamples"] = o.StorageReductionSamples
	}
	return json.Marshal(toSerialize)
}

type NullableStorageEfficiencyTile struct {
	value *StorageEfficiencyTile
	isSet bool
}

func (v NullableStorageEfficiencyTile) Get() *StorageEfficiencyTile {
	return v.value
}

func (v *NullableStorageEfficiencyTile) Set(val *StorageEfficiencyTile) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageEfficiencyTile) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageEfficiencyTile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageEfficiencyTile(val *StorageEfficiencyTile) *NullableStorageEfficiencyTile {
	return &NullableStorageEfficiencyTile{value: val, isSet: true}
}

func (v NullableStorageEfficiencyTile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageEfficiencyTile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


