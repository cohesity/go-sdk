/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ProtectedObjectsByEnv Number of Protected Objects by Type.
type ProtectedObjectsByEnv struct {
	// Environment Type.
	EnvType NullableString `json:"envType,omitempty"`
	// Number of Protected Objects.
	ProtectedCount NullableInt32 `json:"protectedCount,omitempty"`
	// Size of Protected Objects.
	ProtectedSizeBytes NullableInt64 `json:"protectedSizeBytes,omitempty"`
	// Number of Unprotected Objects.
	UnprotectedCount NullableInt32 `json:"unprotectedCount,omitempty"`
	// Size of Unprotected Objects.
	UnprotectedSizeBytes NullableInt64 `json:"unprotectedSizeBytes,omitempty"`
}

// NewProtectedObjectsByEnv instantiates a new ProtectedObjectsByEnv object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtectedObjectsByEnv() *ProtectedObjectsByEnv {
	this := ProtectedObjectsByEnv{}
	return &this
}

// NewProtectedObjectsByEnvWithDefaults instantiates a new ProtectedObjectsByEnv object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtectedObjectsByEnvWithDefaults() *ProtectedObjectsByEnv {
	this := ProtectedObjectsByEnv{}
	return &this
}

// GetEnvType returns the EnvType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectedObjectsByEnv) GetEnvType() string {
	if o == nil || o.EnvType.Get() == nil {
		var ret string
		return ret
	}
	return *o.EnvType.Get()
}

// GetEnvTypeOk returns a tuple with the EnvType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectedObjectsByEnv) GetEnvTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnvType.Get(), o.EnvType.IsSet()
}

// HasEnvType returns a boolean if a field has been set.
func (o *ProtectedObjectsByEnv) HasEnvType() bool {
	if o != nil && o.EnvType.IsSet() {
		return true
	}

	return false
}

// SetEnvType gets a reference to the given NullableString and assigns it to the EnvType field.
func (o *ProtectedObjectsByEnv) SetEnvType(v string) {
	o.EnvType.Set(&v)
}
// SetEnvTypeNil sets the value for EnvType to be an explicit nil
func (o *ProtectedObjectsByEnv) SetEnvTypeNil() {
	o.EnvType.Set(nil)
}

// UnsetEnvType ensures that no value is present for EnvType, not even an explicit nil
func (o *ProtectedObjectsByEnv) UnsetEnvType() {
	o.EnvType.Unset()
}

// GetProtectedCount returns the ProtectedCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectedObjectsByEnv) GetProtectedCount() int32 {
	if o == nil || o.ProtectedCount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.ProtectedCount.Get()
}

// GetProtectedCountOk returns a tuple with the ProtectedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectedObjectsByEnv) GetProtectedCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProtectedCount.Get(), o.ProtectedCount.IsSet()
}

// HasProtectedCount returns a boolean if a field has been set.
func (o *ProtectedObjectsByEnv) HasProtectedCount() bool {
	if o != nil && o.ProtectedCount.IsSet() {
		return true
	}

	return false
}

// SetProtectedCount gets a reference to the given NullableInt32 and assigns it to the ProtectedCount field.
func (o *ProtectedObjectsByEnv) SetProtectedCount(v int32) {
	o.ProtectedCount.Set(&v)
}
// SetProtectedCountNil sets the value for ProtectedCount to be an explicit nil
func (o *ProtectedObjectsByEnv) SetProtectedCountNil() {
	o.ProtectedCount.Set(nil)
}

// UnsetProtectedCount ensures that no value is present for ProtectedCount, not even an explicit nil
func (o *ProtectedObjectsByEnv) UnsetProtectedCount() {
	o.ProtectedCount.Unset()
}

// GetProtectedSizeBytes returns the ProtectedSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectedObjectsByEnv) GetProtectedSizeBytes() int64 {
	if o == nil || o.ProtectedSizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ProtectedSizeBytes.Get()
}

// GetProtectedSizeBytesOk returns a tuple with the ProtectedSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectedObjectsByEnv) GetProtectedSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProtectedSizeBytes.Get(), o.ProtectedSizeBytes.IsSet()
}

// HasProtectedSizeBytes returns a boolean if a field has been set.
func (o *ProtectedObjectsByEnv) HasProtectedSizeBytes() bool {
	if o != nil && o.ProtectedSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetProtectedSizeBytes gets a reference to the given NullableInt64 and assigns it to the ProtectedSizeBytes field.
func (o *ProtectedObjectsByEnv) SetProtectedSizeBytes(v int64) {
	o.ProtectedSizeBytes.Set(&v)
}
// SetProtectedSizeBytesNil sets the value for ProtectedSizeBytes to be an explicit nil
func (o *ProtectedObjectsByEnv) SetProtectedSizeBytesNil() {
	o.ProtectedSizeBytes.Set(nil)
}

// UnsetProtectedSizeBytes ensures that no value is present for ProtectedSizeBytes, not even an explicit nil
func (o *ProtectedObjectsByEnv) UnsetProtectedSizeBytes() {
	o.ProtectedSizeBytes.Unset()
}

// GetUnprotectedCount returns the UnprotectedCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectedObjectsByEnv) GetUnprotectedCount() int32 {
	if o == nil || o.UnprotectedCount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.UnprotectedCount.Get()
}

// GetUnprotectedCountOk returns a tuple with the UnprotectedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectedObjectsByEnv) GetUnprotectedCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UnprotectedCount.Get(), o.UnprotectedCount.IsSet()
}

// HasUnprotectedCount returns a boolean if a field has been set.
func (o *ProtectedObjectsByEnv) HasUnprotectedCount() bool {
	if o != nil && o.UnprotectedCount.IsSet() {
		return true
	}

	return false
}

// SetUnprotectedCount gets a reference to the given NullableInt32 and assigns it to the UnprotectedCount field.
func (o *ProtectedObjectsByEnv) SetUnprotectedCount(v int32) {
	o.UnprotectedCount.Set(&v)
}
// SetUnprotectedCountNil sets the value for UnprotectedCount to be an explicit nil
func (o *ProtectedObjectsByEnv) SetUnprotectedCountNil() {
	o.UnprotectedCount.Set(nil)
}

// UnsetUnprotectedCount ensures that no value is present for UnprotectedCount, not even an explicit nil
func (o *ProtectedObjectsByEnv) UnsetUnprotectedCount() {
	o.UnprotectedCount.Unset()
}

// GetUnprotectedSizeBytes returns the UnprotectedSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectedObjectsByEnv) GetUnprotectedSizeBytes() int64 {
	if o == nil || o.UnprotectedSizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.UnprotectedSizeBytes.Get()
}

// GetUnprotectedSizeBytesOk returns a tuple with the UnprotectedSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectedObjectsByEnv) GetUnprotectedSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UnprotectedSizeBytes.Get(), o.UnprotectedSizeBytes.IsSet()
}

// HasUnprotectedSizeBytes returns a boolean if a field has been set.
func (o *ProtectedObjectsByEnv) HasUnprotectedSizeBytes() bool {
	if o != nil && o.UnprotectedSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetUnprotectedSizeBytes gets a reference to the given NullableInt64 and assigns it to the UnprotectedSizeBytes field.
func (o *ProtectedObjectsByEnv) SetUnprotectedSizeBytes(v int64) {
	o.UnprotectedSizeBytes.Set(&v)
}
// SetUnprotectedSizeBytesNil sets the value for UnprotectedSizeBytes to be an explicit nil
func (o *ProtectedObjectsByEnv) SetUnprotectedSizeBytesNil() {
	o.UnprotectedSizeBytes.Set(nil)
}

// UnsetUnprotectedSizeBytes ensures that no value is present for UnprotectedSizeBytes, not even an explicit nil
func (o *ProtectedObjectsByEnv) UnsetUnprotectedSizeBytes() {
	o.UnprotectedSizeBytes.Unset()
}

func (o ProtectedObjectsByEnv) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EnvType.IsSet() {
		toSerialize["envType"] = o.EnvType.Get()
	}
	if o.ProtectedCount.IsSet() {
		toSerialize["protectedCount"] = o.ProtectedCount.Get()
	}
	if o.ProtectedSizeBytes.IsSet() {
		toSerialize["protectedSizeBytes"] = o.ProtectedSizeBytes.Get()
	}
	if o.UnprotectedCount.IsSet() {
		toSerialize["unprotectedCount"] = o.UnprotectedCount.Get()
	}
	if o.UnprotectedSizeBytes.IsSet() {
		toSerialize["unprotectedSizeBytes"] = o.UnprotectedSizeBytes.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableProtectedObjectsByEnv struct {
	value *ProtectedObjectsByEnv
	isSet bool
}

func (v NullableProtectedObjectsByEnv) Get() *ProtectedObjectsByEnv {
	return v.value
}

func (v *NullableProtectedObjectsByEnv) Set(val *ProtectedObjectsByEnv) {
	v.value = val
	v.isSet = true
}

func (v NullableProtectedObjectsByEnv) IsSet() bool {
	return v.isSet
}

func (v *NullableProtectedObjectsByEnv) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtectedObjectsByEnv(val *ProtectedObjectsByEnv) *NullableProtectedObjectsByEnv {
	return &NullableProtectedObjectsByEnv{value: val, isSet: true}
}

func (v NullableProtectedObjectsByEnv) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtectedObjectsByEnv) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


