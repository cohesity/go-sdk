/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// MountVolumesParams struct for MountVolumesParams
type MountVolumesParams struct {
	HypervParams *MountVolumesHyperVParams `json:"hypervParams,omitempty"`
	// Allows the caller to force the Agent to perform a read-only mount. This is not usually required and we want to give customers the ability to mutate this mount for test/dev purposes.
	ReadonlyMount NullableBool `json:"readonlyMount,omitempty"`
	TargetEntity *EntityProto `json:"targetEntity,omitempty"`
	// Whether this will use an existing agent on the target vm to do a restore operation.
	UseExistingAgent NullableBool `json:"useExistingAgent,omitempty"`
	VmwareParams *MountVolumesVMwareParams `json:"vmwareParams,omitempty"`
	// Optional names of volumes that need to be mounted. The names here correspond to the volume names obtained by Iris from Yoda as part of VMVolumeInfo call. NOTE: If this is not specified then all volumes that are part of the server will be mounted on the target entity.
	VolumeNameVec []string `json:"volumeNameVec,omitempty"`
}

// NewMountVolumesParams instantiates a new MountVolumesParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMountVolumesParams() *MountVolumesParams {
	this := MountVolumesParams{}
	return &this
}

// NewMountVolumesParamsWithDefaults instantiates a new MountVolumesParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMountVolumesParamsWithDefaults() *MountVolumesParams {
	this := MountVolumesParams{}
	return &this
}

// GetHypervParams returns the HypervParams field value if set, zero value otherwise.
func (o *MountVolumesParams) GetHypervParams() MountVolumesHyperVParams {
	if o == nil || o.HypervParams == nil {
		var ret MountVolumesHyperVParams
		return ret
	}
	return *o.HypervParams
}

// GetHypervParamsOk returns a tuple with the HypervParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MountVolumesParams) GetHypervParamsOk() (*MountVolumesHyperVParams, bool) {
	if o == nil || o.HypervParams == nil {
		return nil, false
	}
	return o.HypervParams, true
}

// HasHypervParams returns a boolean if a field has been set.
func (o *MountVolumesParams) HasHypervParams() bool {
	if o != nil && o.HypervParams != nil {
		return true
	}

	return false
}

// SetHypervParams gets a reference to the given MountVolumesHyperVParams and assigns it to the HypervParams field.
func (o *MountVolumesParams) SetHypervParams(v MountVolumesHyperVParams) {
	o.HypervParams = &v
}

// GetReadonlyMount returns the ReadonlyMount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MountVolumesParams) GetReadonlyMount() bool {
	if o == nil || o.ReadonlyMount.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ReadonlyMount.Get()
}

// GetReadonlyMountOk returns a tuple with the ReadonlyMount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MountVolumesParams) GetReadonlyMountOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ReadonlyMount.Get(), o.ReadonlyMount.IsSet()
}

// HasReadonlyMount returns a boolean if a field has been set.
func (o *MountVolumesParams) HasReadonlyMount() bool {
	if o != nil && o.ReadonlyMount.IsSet() {
		return true
	}

	return false
}

// SetReadonlyMount gets a reference to the given NullableBool and assigns it to the ReadonlyMount field.
func (o *MountVolumesParams) SetReadonlyMount(v bool) {
	o.ReadonlyMount.Set(&v)
}
// SetReadonlyMountNil sets the value for ReadonlyMount to be an explicit nil
func (o *MountVolumesParams) SetReadonlyMountNil() {
	o.ReadonlyMount.Set(nil)
}

// UnsetReadonlyMount ensures that no value is present for ReadonlyMount, not even an explicit nil
func (o *MountVolumesParams) UnsetReadonlyMount() {
	o.ReadonlyMount.Unset()
}

// GetTargetEntity returns the TargetEntity field value if set, zero value otherwise.
func (o *MountVolumesParams) GetTargetEntity() EntityProto {
	if o == nil || o.TargetEntity == nil {
		var ret EntityProto
		return ret
	}
	return *o.TargetEntity
}

// GetTargetEntityOk returns a tuple with the TargetEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MountVolumesParams) GetTargetEntityOk() (*EntityProto, bool) {
	if o == nil || o.TargetEntity == nil {
		return nil, false
	}
	return o.TargetEntity, true
}

// HasTargetEntity returns a boolean if a field has been set.
func (o *MountVolumesParams) HasTargetEntity() bool {
	if o != nil && o.TargetEntity != nil {
		return true
	}

	return false
}

// SetTargetEntity gets a reference to the given EntityProto and assigns it to the TargetEntity field.
func (o *MountVolumesParams) SetTargetEntity(v EntityProto) {
	o.TargetEntity = &v
}

// GetUseExistingAgent returns the UseExistingAgent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MountVolumesParams) GetUseExistingAgent() bool {
	if o == nil || o.UseExistingAgent.Get() == nil {
		var ret bool
		return ret
	}
	return *o.UseExistingAgent.Get()
}

// GetUseExistingAgentOk returns a tuple with the UseExistingAgent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MountVolumesParams) GetUseExistingAgentOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UseExistingAgent.Get(), o.UseExistingAgent.IsSet()
}

// HasUseExistingAgent returns a boolean if a field has been set.
func (o *MountVolumesParams) HasUseExistingAgent() bool {
	if o != nil && o.UseExistingAgent.IsSet() {
		return true
	}

	return false
}

// SetUseExistingAgent gets a reference to the given NullableBool and assigns it to the UseExistingAgent field.
func (o *MountVolumesParams) SetUseExistingAgent(v bool) {
	o.UseExistingAgent.Set(&v)
}
// SetUseExistingAgentNil sets the value for UseExistingAgent to be an explicit nil
func (o *MountVolumesParams) SetUseExistingAgentNil() {
	o.UseExistingAgent.Set(nil)
}

// UnsetUseExistingAgent ensures that no value is present for UseExistingAgent, not even an explicit nil
func (o *MountVolumesParams) UnsetUseExistingAgent() {
	o.UseExistingAgent.Unset()
}

// GetVmwareParams returns the VmwareParams field value if set, zero value otherwise.
func (o *MountVolumesParams) GetVmwareParams() MountVolumesVMwareParams {
	if o == nil || o.VmwareParams == nil {
		var ret MountVolumesVMwareParams
		return ret
	}
	return *o.VmwareParams
}

// GetVmwareParamsOk returns a tuple with the VmwareParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MountVolumesParams) GetVmwareParamsOk() (*MountVolumesVMwareParams, bool) {
	if o == nil || o.VmwareParams == nil {
		return nil, false
	}
	return o.VmwareParams, true
}

// HasVmwareParams returns a boolean if a field has been set.
func (o *MountVolumesParams) HasVmwareParams() bool {
	if o != nil && o.VmwareParams != nil {
		return true
	}

	return false
}

// SetVmwareParams gets a reference to the given MountVolumesVMwareParams and assigns it to the VmwareParams field.
func (o *MountVolumesParams) SetVmwareParams(v MountVolumesVMwareParams) {
	o.VmwareParams = &v
}

// GetVolumeNameVec returns the VolumeNameVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MountVolumesParams) GetVolumeNameVec() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.VolumeNameVec
}

// GetVolumeNameVecOk returns a tuple with the VolumeNameVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MountVolumesParams) GetVolumeNameVecOk() (*[]string, bool) {
	if o == nil || o.VolumeNameVec == nil {
		return nil, false
	}
	return &o.VolumeNameVec, true
}

// HasVolumeNameVec returns a boolean if a field has been set.
func (o *MountVolumesParams) HasVolumeNameVec() bool {
	if o != nil && o.VolumeNameVec != nil {
		return true
	}

	return false
}

// SetVolumeNameVec gets a reference to the given []string and assigns it to the VolumeNameVec field.
func (o *MountVolumesParams) SetVolumeNameVec(v []string) {
	o.VolumeNameVec = v
}

func (o MountVolumesParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.HypervParams != nil {
		toSerialize["hypervParams"] = o.HypervParams
	}
	if o.ReadonlyMount.IsSet() {
		toSerialize["readonlyMount"] = o.ReadonlyMount.Get()
	}
	if o.TargetEntity != nil {
		toSerialize["targetEntity"] = o.TargetEntity
	}
	if o.UseExistingAgent.IsSet() {
		toSerialize["useExistingAgent"] = o.UseExistingAgent.Get()
	}
	if o.VmwareParams != nil {
		toSerialize["vmwareParams"] = o.VmwareParams
	}
	if o.VolumeNameVec != nil {
		toSerialize["volumeNameVec"] = o.VolumeNameVec
	}
	return json.Marshal(toSerialize)
}

type NullableMountVolumesParams struct {
	value *MountVolumesParams
	isSet bool
}

func (v NullableMountVolumesParams) Get() *MountVolumesParams {
	return v.value
}

func (v *NullableMountVolumesParams) Set(val *MountVolumesParams) {
	v.value = val
	v.isSet = true
}

func (v NullableMountVolumesParams) IsSet() bool {
	return v.isSet
}

func (v *NullableMountVolumesParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMountVolumesParams(val *MountVolumesParams) *NullableMountVolumesParams {
	return &NullableMountVolumesParams{value: val, isSet: true}
}

func (v NullableMountVolumesParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMountVolumesParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


