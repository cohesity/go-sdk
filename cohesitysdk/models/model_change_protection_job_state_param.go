/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ChangeProtectionJobStateParam Specifies if the Run state of a Protection Job should change.
type ChangeProtectionJobStateParam struct {
	// If true, the specified Protection Job is paused and no new Runs of the Job are started. Any Runs that were executing continue to run. If false and the Protection Job was in a paused state, the Protection Job resumes and new Runs are started according to the schedule defined in the associated Policy.
	Pause NullableBool `json:"pause,omitempty"`
	// Specifies the reason of pausing the job so that depending on the pause reason, only specific jobs can be resumed. All the jobs paused manually by the user will be identified by nil PauseReason.
	PauseReason NullableInt32 `json:"pauseReason,omitempty"`
}

// NewChangeProtectionJobStateParam instantiates a new ChangeProtectionJobStateParam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeProtectionJobStateParam() *ChangeProtectionJobStateParam {
	this := ChangeProtectionJobStateParam{}
	return &this
}

// NewChangeProtectionJobStateParamWithDefaults instantiates a new ChangeProtectionJobStateParam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeProtectionJobStateParamWithDefaults() *ChangeProtectionJobStateParam {
	this := ChangeProtectionJobStateParam{}
	return &this
}

// GetPause returns the Pause field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChangeProtectionJobStateParam) GetPause() bool {
	if o == nil || o.Pause.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Pause.Get()
}

// GetPauseOk returns a tuple with the Pause field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChangeProtectionJobStateParam) GetPauseOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Pause.Get(), o.Pause.IsSet()
}

// HasPause returns a boolean if a field has been set.
func (o *ChangeProtectionJobStateParam) HasPause() bool {
	if o != nil && o.Pause.IsSet() {
		return true
	}

	return false
}

// SetPause gets a reference to the given NullableBool and assigns it to the Pause field.
func (o *ChangeProtectionJobStateParam) SetPause(v bool) {
	o.Pause.Set(&v)
}
// SetPauseNil sets the value for Pause to be an explicit nil
func (o *ChangeProtectionJobStateParam) SetPauseNil() {
	o.Pause.Set(nil)
}

// UnsetPause ensures that no value is present for Pause, not even an explicit nil
func (o *ChangeProtectionJobStateParam) UnsetPause() {
	o.Pause.Unset()
}

// GetPauseReason returns the PauseReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChangeProtectionJobStateParam) GetPauseReason() int32 {
	if o == nil || o.PauseReason.Get() == nil {
		var ret int32
		return ret
	}
	return *o.PauseReason.Get()
}

// GetPauseReasonOk returns a tuple with the PauseReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChangeProtectionJobStateParam) GetPauseReasonOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PauseReason.Get(), o.PauseReason.IsSet()
}

// HasPauseReason returns a boolean if a field has been set.
func (o *ChangeProtectionJobStateParam) HasPauseReason() bool {
	if o != nil && o.PauseReason.IsSet() {
		return true
	}

	return false
}

// SetPauseReason gets a reference to the given NullableInt32 and assigns it to the PauseReason field.
func (o *ChangeProtectionJobStateParam) SetPauseReason(v int32) {
	o.PauseReason.Set(&v)
}
// SetPauseReasonNil sets the value for PauseReason to be an explicit nil
func (o *ChangeProtectionJobStateParam) SetPauseReasonNil() {
	o.PauseReason.Set(nil)
}

// UnsetPauseReason ensures that no value is present for PauseReason, not even an explicit nil
func (o *ChangeProtectionJobStateParam) UnsetPauseReason() {
	o.PauseReason.Unset()
}

func (o ChangeProtectionJobStateParam) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Pause.IsSet() {
		toSerialize["pause"] = o.Pause.Get()
	}
	if o.PauseReason.IsSet() {
		toSerialize["pauseReason"] = o.PauseReason.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableChangeProtectionJobStateParam struct {
	value *ChangeProtectionJobStateParam
	isSet bool
}

func (v NullableChangeProtectionJobStateParam) Get() *ChangeProtectionJobStateParam {
	return v.value
}

func (v *NullableChangeProtectionJobStateParam) Set(val *ChangeProtectionJobStateParam) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeProtectionJobStateParam) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeProtectionJobStateParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeProtectionJobStateParam(val *ChangeProtectionJobStateParam) *NullableChangeProtectionJobStateParam {
	return &NullableChangeProtectionJobStateParam{value: val, isSet: true}
}

func (v NullableChangeProtectionJobStateParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeProtectionJobStateParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


