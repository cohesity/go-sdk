/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// InputSpecInputVMsSelector struct for InputSpecInputVMsSelector
type InputSpecInputVMsSelector struct {
	FileTimeFilter *InputSpecFileTimeFilter `json:"fileTimeFilter,omitempty"`
	// After VMDKs are selected as above, the files within them can be selected by using these predicates.
	FilenameGlob []string `json:"filenameGlob,omitempty"`
	JobIds []int64 `json:"jobIds,omitempty"`
	// Exclusive end of snapshot_timestamp range. If missing, inf will be used as the timestamp range.
	MaxSnapshotTimestamp NullableInt64 `json:"maxSnapshotTimestamp,omitempty"`
	// Inclusive. If missing, 0 will the default lower end of timestamp range
	MinSnapshotTimestamp NullableInt64 `json:"minSnapshotTimestamp,omitempty"`
	// Filters are AND of ORs.
	PartitionIds []int64 `json:"partitionIds,omitempty"`
	// Boolean flag to indicate if only latest snapshot of each object should be processed.
	ProcessLatestOnly NullableBool `json:"processLatestOnly,omitempty"`
	// Within each volume, traversal will be rooted at this directory. A typical value here might be /home
	RootDir NullableString `json:"rootDir,omitempty"`
	SourceEntityIds []int64 `json:"sourceEntityIds,omitempty"`
	ViewBoxIds []int64 `json:"viewBoxIds,omitempty"`
	ViewNames []string `json:"viewNames,omitempty"`
}

// NewInputSpecInputVMsSelector instantiates a new InputSpecInputVMsSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputSpecInputVMsSelector() *InputSpecInputVMsSelector {
	this := InputSpecInputVMsSelector{}
	return &this
}

// NewInputSpecInputVMsSelectorWithDefaults instantiates a new InputSpecInputVMsSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputSpecInputVMsSelectorWithDefaults() *InputSpecInputVMsSelector {
	this := InputSpecInputVMsSelector{}
	return &this
}

// GetFileTimeFilter returns the FileTimeFilter field value if set, zero value otherwise.
func (o *InputSpecInputVMsSelector) GetFileTimeFilter() InputSpecFileTimeFilter {
	if o == nil || o.FileTimeFilter == nil {
		var ret InputSpecFileTimeFilter
		return ret
	}
	return *o.FileTimeFilter
}

// GetFileTimeFilterOk returns a tuple with the FileTimeFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InputSpecInputVMsSelector) GetFileTimeFilterOk() (*InputSpecFileTimeFilter, bool) {
	if o == nil || o.FileTimeFilter == nil {
		return nil, false
	}
	return o.FileTimeFilter, true
}

// HasFileTimeFilter returns a boolean if a field has been set.
func (o *InputSpecInputVMsSelector) HasFileTimeFilter() bool {
	if o != nil && o.FileTimeFilter != nil {
		return true
	}

	return false
}

// SetFileTimeFilter gets a reference to the given InputSpecFileTimeFilter and assigns it to the FileTimeFilter field.
func (o *InputSpecInputVMsSelector) SetFileTimeFilter(v InputSpecFileTimeFilter) {
	o.FileTimeFilter = &v
}

// GetFilenameGlob returns the FilenameGlob field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InputSpecInputVMsSelector) GetFilenameGlob() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.FilenameGlob
}

// GetFilenameGlobOk returns a tuple with the FilenameGlob field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InputSpecInputVMsSelector) GetFilenameGlobOk() (*[]string, bool) {
	if o == nil || o.FilenameGlob == nil {
		return nil, false
	}
	return &o.FilenameGlob, true
}

// HasFilenameGlob returns a boolean if a field has been set.
func (o *InputSpecInputVMsSelector) HasFilenameGlob() bool {
	if o != nil && o.FilenameGlob != nil {
		return true
	}

	return false
}

// SetFilenameGlob gets a reference to the given []string and assigns it to the FilenameGlob field.
func (o *InputSpecInputVMsSelector) SetFilenameGlob(v []string) {
	o.FilenameGlob = v
}

// GetJobIds returns the JobIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InputSpecInputVMsSelector) GetJobIds() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.JobIds
}

// GetJobIdsOk returns a tuple with the JobIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InputSpecInputVMsSelector) GetJobIdsOk() (*[]int64, bool) {
	if o == nil || o.JobIds == nil {
		return nil, false
	}
	return &o.JobIds, true
}

// HasJobIds returns a boolean if a field has been set.
func (o *InputSpecInputVMsSelector) HasJobIds() bool {
	if o != nil && o.JobIds != nil {
		return true
	}

	return false
}

// SetJobIds gets a reference to the given []int64 and assigns it to the JobIds field.
func (o *InputSpecInputVMsSelector) SetJobIds(v []int64) {
	o.JobIds = v
}

// GetMaxSnapshotTimestamp returns the MaxSnapshotTimestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InputSpecInputVMsSelector) GetMaxSnapshotTimestamp() int64 {
	if o == nil || o.MaxSnapshotTimestamp.Get() == nil {
		var ret int64
		return ret
	}
	return *o.MaxSnapshotTimestamp.Get()
}

// GetMaxSnapshotTimestampOk returns a tuple with the MaxSnapshotTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InputSpecInputVMsSelector) GetMaxSnapshotTimestampOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MaxSnapshotTimestamp.Get(), o.MaxSnapshotTimestamp.IsSet()
}

// HasMaxSnapshotTimestamp returns a boolean if a field has been set.
func (o *InputSpecInputVMsSelector) HasMaxSnapshotTimestamp() bool {
	if o != nil && o.MaxSnapshotTimestamp.IsSet() {
		return true
	}

	return false
}

// SetMaxSnapshotTimestamp gets a reference to the given NullableInt64 and assigns it to the MaxSnapshotTimestamp field.
func (o *InputSpecInputVMsSelector) SetMaxSnapshotTimestamp(v int64) {
	o.MaxSnapshotTimestamp.Set(&v)
}
// SetMaxSnapshotTimestampNil sets the value for MaxSnapshotTimestamp to be an explicit nil
func (o *InputSpecInputVMsSelector) SetMaxSnapshotTimestampNil() {
	o.MaxSnapshotTimestamp.Set(nil)
}

// UnsetMaxSnapshotTimestamp ensures that no value is present for MaxSnapshotTimestamp, not even an explicit nil
func (o *InputSpecInputVMsSelector) UnsetMaxSnapshotTimestamp() {
	o.MaxSnapshotTimestamp.Unset()
}

// GetMinSnapshotTimestamp returns the MinSnapshotTimestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InputSpecInputVMsSelector) GetMinSnapshotTimestamp() int64 {
	if o == nil || o.MinSnapshotTimestamp.Get() == nil {
		var ret int64
		return ret
	}
	return *o.MinSnapshotTimestamp.Get()
}

// GetMinSnapshotTimestampOk returns a tuple with the MinSnapshotTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InputSpecInputVMsSelector) GetMinSnapshotTimestampOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MinSnapshotTimestamp.Get(), o.MinSnapshotTimestamp.IsSet()
}

// HasMinSnapshotTimestamp returns a boolean if a field has been set.
func (o *InputSpecInputVMsSelector) HasMinSnapshotTimestamp() bool {
	if o != nil && o.MinSnapshotTimestamp.IsSet() {
		return true
	}

	return false
}

// SetMinSnapshotTimestamp gets a reference to the given NullableInt64 and assigns it to the MinSnapshotTimestamp field.
func (o *InputSpecInputVMsSelector) SetMinSnapshotTimestamp(v int64) {
	o.MinSnapshotTimestamp.Set(&v)
}
// SetMinSnapshotTimestampNil sets the value for MinSnapshotTimestamp to be an explicit nil
func (o *InputSpecInputVMsSelector) SetMinSnapshotTimestampNil() {
	o.MinSnapshotTimestamp.Set(nil)
}

// UnsetMinSnapshotTimestamp ensures that no value is present for MinSnapshotTimestamp, not even an explicit nil
func (o *InputSpecInputVMsSelector) UnsetMinSnapshotTimestamp() {
	o.MinSnapshotTimestamp.Unset()
}

// GetPartitionIds returns the PartitionIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InputSpecInputVMsSelector) GetPartitionIds() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.PartitionIds
}

// GetPartitionIdsOk returns a tuple with the PartitionIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InputSpecInputVMsSelector) GetPartitionIdsOk() (*[]int64, bool) {
	if o == nil || o.PartitionIds == nil {
		return nil, false
	}
	return &o.PartitionIds, true
}

// HasPartitionIds returns a boolean if a field has been set.
func (o *InputSpecInputVMsSelector) HasPartitionIds() bool {
	if o != nil && o.PartitionIds != nil {
		return true
	}

	return false
}

// SetPartitionIds gets a reference to the given []int64 and assigns it to the PartitionIds field.
func (o *InputSpecInputVMsSelector) SetPartitionIds(v []int64) {
	o.PartitionIds = v
}

// GetProcessLatestOnly returns the ProcessLatestOnly field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InputSpecInputVMsSelector) GetProcessLatestOnly() bool {
	if o == nil || o.ProcessLatestOnly.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ProcessLatestOnly.Get()
}

// GetProcessLatestOnlyOk returns a tuple with the ProcessLatestOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InputSpecInputVMsSelector) GetProcessLatestOnlyOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProcessLatestOnly.Get(), o.ProcessLatestOnly.IsSet()
}

// HasProcessLatestOnly returns a boolean if a field has been set.
func (o *InputSpecInputVMsSelector) HasProcessLatestOnly() bool {
	if o != nil && o.ProcessLatestOnly.IsSet() {
		return true
	}

	return false
}

// SetProcessLatestOnly gets a reference to the given NullableBool and assigns it to the ProcessLatestOnly field.
func (o *InputSpecInputVMsSelector) SetProcessLatestOnly(v bool) {
	o.ProcessLatestOnly.Set(&v)
}
// SetProcessLatestOnlyNil sets the value for ProcessLatestOnly to be an explicit nil
func (o *InputSpecInputVMsSelector) SetProcessLatestOnlyNil() {
	o.ProcessLatestOnly.Set(nil)
}

// UnsetProcessLatestOnly ensures that no value is present for ProcessLatestOnly, not even an explicit nil
func (o *InputSpecInputVMsSelector) UnsetProcessLatestOnly() {
	o.ProcessLatestOnly.Unset()
}

// GetRootDir returns the RootDir field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InputSpecInputVMsSelector) GetRootDir() string {
	if o == nil || o.RootDir.Get() == nil {
		var ret string
		return ret
	}
	return *o.RootDir.Get()
}

// GetRootDirOk returns a tuple with the RootDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InputSpecInputVMsSelector) GetRootDirOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RootDir.Get(), o.RootDir.IsSet()
}

// HasRootDir returns a boolean if a field has been set.
func (o *InputSpecInputVMsSelector) HasRootDir() bool {
	if o != nil && o.RootDir.IsSet() {
		return true
	}

	return false
}

// SetRootDir gets a reference to the given NullableString and assigns it to the RootDir field.
func (o *InputSpecInputVMsSelector) SetRootDir(v string) {
	o.RootDir.Set(&v)
}
// SetRootDirNil sets the value for RootDir to be an explicit nil
func (o *InputSpecInputVMsSelector) SetRootDirNil() {
	o.RootDir.Set(nil)
}

// UnsetRootDir ensures that no value is present for RootDir, not even an explicit nil
func (o *InputSpecInputVMsSelector) UnsetRootDir() {
	o.RootDir.Unset()
}

// GetSourceEntityIds returns the SourceEntityIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InputSpecInputVMsSelector) GetSourceEntityIds() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.SourceEntityIds
}

// GetSourceEntityIdsOk returns a tuple with the SourceEntityIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InputSpecInputVMsSelector) GetSourceEntityIdsOk() (*[]int64, bool) {
	if o == nil || o.SourceEntityIds == nil {
		return nil, false
	}
	return &o.SourceEntityIds, true
}

// HasSourceEntityIds returns a boolean if a field has been set.
func (o *InputSpecInputVMsSelector) HasSourceEntityIds() bool {
	if o != nil && o.SourceEntityIds != nil {
		return true
	}

	return false
}

// SetSourceEntityIds gets a reference to the given []int64 and assigns it to the SourceEntityIds field.
func (o *InputSpecInputVMsSelector) SetSourceEntityIds(v []int64) {
	o.SourceEntityIds = v
}

// GetViewBoxIds returns the ViewBoxIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InputSpecInputVMsSelector) GetViewBoxIds() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.ViewBoxIds
}

// GetViewBoxIdsOk returns a tuple with the ViewBoxIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InputSpecInputVMsSelector) GetViewBoxIdsOk() (*[]int64, bool) {
	if o == nil || o.ViewBoxIds == nil {
		return nil, false
	}
	return &o.ViewBoxIds, true
}

// HasViewBoxIds returns a boolean if a field has been set.
func (o *InputSpecInputVMsSelector) HasViewBoxIds() bool {
	if o != nil && o.ViewBoxIds != nil {
		return true
	}

	return false
}

// SetViewBoxIds gets a reference to the given []int64 and assigns it to the ViewBoxIds field.
func (o *InputSpecInputVMsSelector) SetViewBoxIds(v []int64) {
	o.ViewBoxIds = v
}

// GetViewNames returns the ViewNames field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InputSpecInputVMsSelector) GetViewNames() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.ViewNames
}

// GetViewNamesOk returns a tuple with the ViewNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InputSpecInputVMsSelector) GetViewNamesOk() (*[]string, bool) {
	if o == nil || o.ViewNames == nil {
		return nil, false
	}
	return &o.ViewNames, true
}

// HasViewNames returns a boolean if a field has been set.
func (o *InputSpecInputVMsSelector) HasViewNames() bool {
	if o != nil && o.ViewNames != nil {
		return true
	}

	return false
}

// SetViewNames gets a reference to the given []string and assigns it to the ViewNames field.
func (o *InputSpecInputVMsSelector) SetViewNames(v []string) {
	o.ViewNames = v
}

func (o InputSpecInputVMsSelector) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FileTimeFilter != nil {
		toSerialize["fileTimeFilter"] = o.FileTimeFilter
	}
	if o.FilenameGlob != nil {
		toSerialize["filenameGlob"] = o.FilenameGlob
	}
	if o.JobIds != nil {
		toSerialize["jobIds"] = o.JobIds
	}
	if o.MaxSnapshotTimestamp.IsSet() {
		toSerialize["maxSnapshotTimestamp"] = o.MaxSnapshotTimestamp.Get()
	}
	if o.MinSnapshotTimestamp.IsSet() {
		toSerialize["minSnapshotTimestamp"] = o.MinSnapshotTimestamp.Get()
	}
	if o.PartitionIds != nil {
		toSerialize["partitionIds"] = o.PartitionIds
	}
	if o.ProcessLatestOnly.IsSet() {
		toSerialize["processLatestOnly"] = o.ProcessLatestOnly.Get()
	}
	if o.RootDir.IsSet() {
		toSerialize["rootDir"] = o.RootDir.Get()
	}
	if o.SourceEntityIds != nil {
		toSerialize["sourceEntityIds"] = o.SourceEntityIds
	}
	if o.ViewBoxIds != nil {
		toSerialize["viewBoxIds"] = o.ViewBoxIds
	}
	if o.ViewNames != nil {
		toSerialize["viewNames"] = o.ViewNames
	}
	return json.Marshal(toSerialize)
}

type NullableInputSpecInputVMsSelector struct {
	value *InputSpecInputVMsSelector
	isSet bool
}

func (v NullableInputSpecInputVMsSelector) Get() *InputSpecInputVMsSelector {
	return v.value
}

func (v *NullableInputSpecInputVMsSelector) Set(val *InputSpecInputVMsSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableInputSpecInputVMsSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableInputSpecInputVMsSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputSpecInputVMsSelector(val *InputSpecInputVMsSelector) *NullableInputSpecInputVMsSelector {
	return &NullableInputSpecInputVMsSelector{value: val, isSet: true}
}

func (v NullableInputSpecInputVMsSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputSpecInputVMsSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


