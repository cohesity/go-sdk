/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// CloudParameters Specifies Cloud parameters that are applicable to all Protection Sources in a Protection Job in certain scenarios.
type CloudParameters struct {
	// Specifies whether the Protection Sources in this Protection Job will be failed over to Cloud. This flag is applicable to backup on-prem Sources.
	FailoverToCloud NullableBool `json:"failoverToCloud,omitempty"`
}

// NewCloudParameters instantiates a new CloudParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudParameters() *CloudParameters {
	this := CloudParameters{}
	return &this
}

// NewCloudParametersWithDefaults instantiates a new CloudParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudParametersWithDefaults() *CloudParameters {
	this := CloudParameters{}
	return &this
}

// GetFailoverToCloud returns the FailoverToCloud field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloudParameters) GetFailoverToCloud() bool {
	if o == nil || o.FailoverToCloud.Get() == nil {
		var ret bool
		return ret
	}
	return *o.FailoverToCloud.Get()
}

// GetFailoverToCloudOk returns a tuple with the FailoverToCloud field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloudParameters) GetFailoverToCloudOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FailoverToCloud.Get(), o.FailoverToCloud.IsSet()
}

// HasFailoverToCloud returns a boolean if a field has been set.
func (o *CloudParameters) HasFailoverToCloud() bool {
	if o != nil && o.FailoverToCloud.IsSet() {
		return true
	}

	return false
}

// SetFailoverToCloud gets a reference to the given NullableBool and assigns it to the FailoverToCloud field.
func (o *CloudParameters) SetFailoverToCloud(v bool) {
	o.FailoverToCloud.Set(&v)
}
// SetFailoverToCloudNil sets the value for FailoverToCloud to be an explicit nil
func (o *CloudParameters) SetFailoverToCloudNil() {
	o.FailoverToCloud.Set(nil)
}

// UnsetFailoverToCloud ensures that no value is present for FailoverToCloud, not even an explicit nil
func (o *CloudParameters) UnsetFailoverToCloud() {
	o.FailoverToCloud.Unset()
}

func (o CloudParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FailoverToCloud.IsSet() {
		toSerialize["failoverToCloud"] = o.FailoverToCloud.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCloudParameters struct {
	value *CloudParameters
	isSet bool
}

func (v NullableCloudParameters) Get() *CloudParameters {
	return v.value
}

func (v *NullableCloudParameters) Set(val *CloudParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudParameters(val *CloudParameters) *NullableCloudParameters {
	return &NullableCloudParameters{value: val, isSet: true}
}

func (v NullableCloudParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


