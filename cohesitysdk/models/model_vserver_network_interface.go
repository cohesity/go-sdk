/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// VserverNetworkInterface Specifies information about a logical network interface on a NetApp Vserver. The interface's IP address is the mount point for a specific data protocol, such as NFS or CIFS.
type VserverNetworkInterface struct {
	// Array of Data Protocols.  Specifies the set of data protocols supported by this interface. 'kNfs' indicates NFS connections. 'kCifs' indicates SMB (CIFS) connections. 'kIscsi' indicates iSCSI connections. 'kFc' indicates Fiber Channel connections. 'kFcache' indicates Flex Cache connections. 'kHttp' indicates HTTP connections. 'kNdmp' indicates NDMP connections. 'kManagement' indicates non-data connections used for management purposes. 'kNvme' indicates NVMe connections.
	DataProtocols []string `json:"dataProtocols,omitempty"`
	// Specifies the IP address of this interface.
	IpAddress NullableString `json:"ipAddress,omitempty"`
	// Specifies the name of this interface.
	Name NullableString `json:"name,omitempty"`
}

// NewVserverNetworkInterface instantiates a new VserverNetworkInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVserverNetworkInterface() *VserverNetworkInterface {
	this := VserverNetworkInterface{}
	return &this
}

// NewVserverNetworkInterfaceWithDefaults instantiates a new VserverNetworkInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVserverNetworkInterfaceWithDefaults() *VserverNetworkInterface {
	this := VserverNetworkInterface{}
	return &this
}

// GetDataProtocols returns the DataProtocols field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VserverNetworkInterface) GetDataProtocols() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.DataProtocols
}

// GetDataProtocolsOk returns a tuple with the DataProtocols field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VserverNetworkInterface) GetDataProtocolsOk() (*[]string, bool) {
	if o == nil || o.DataProtocols == nil {
		return nil, false
	}
	return &o.DataProtocols, true
}

// HasDataProtocols returns a boolean if a field has been set.
func (o *VserverNetworkInterface) HasDataProtocols() bool {
	if o != nil && o.DataProtocols != nil {
		return true
	}

	return false
}

// SetDataProtocols gets a reference to the given []string and assigns it to the DataProtocols field.
func (o *VserverNetworkInterface) SetDataProtocols(v []string) {
	o.DataProtocols = v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VserverNetworkInterface) GetIpAddress() string {
	if o == nil || o.IpAddress.Get() == nil {
		var ret string
		return ret
	}
	return *o.IpAddress.Get()
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VserverNetworkInterface) GetIpAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IpAddress.Get(), o.IpAddress.IsSet()
}

// HasIpAddress returns a boolean if a field has been set.
func (o *VserverNetworkInterface) HasIpAddress() bool {
	if o != nil && o.IpAddress.IsSet() {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given NullableString and assigns it to the IpAddress field.
func (o *VserverNetworkInterface) SetIpAddress(v string) {
	o.IpAddress.Set(&v)
}
// SetIpAddressNil sets the value for IpAddress to be an explicit nil
func (o *VserverNetworkInterface) SetIpAddressNil() {
	o.IpAddress.Set(nil)
}

// UnsetIpAddress ensures that no value is present for IpAddress, not even an explicit nil
func (o *VserverNetworkInterface) UnsetIpAddress() {
	o.IpAddress.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VserverNetworkInterface) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VserverNetworkInterface) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *VserverNetworkInterface) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *VserverNetworkInterface) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *VserverNetworkInterface) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *VserverNetworkInterface) UnsetName() {
	o.Name.Unset()
}

func (o VserverNetworkInterface) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DataProtocols != nil {
		toSerialize["dataProtocols"] = o.DataProtocols
	}
	if o.IpAddress.IsSet() {
		toSerialize["ipAddress"] = o.IpAddress.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableVserverNetworkInterface struct {
	value *VserverNetworkInterface
	isSet bool
}

func (v NullableVserverNetworkInterface) Get() *VserverNetworkInterface {
	return v.value
}

func (v *NullableVserverNetworkInterface) Set(val *VserverNetworkInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableVserverNetworkInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableVserverNetworkInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVserverNetworkInterface(val *VserverNetworkInterface) *NullableVserverNetworkInterface {
	return &NullableVserverNetworkInterface{value: val, isSet: true}
}

func (v NullableVserverNetworkInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVserverNetworkInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


