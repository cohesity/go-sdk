/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// NetworkMapping Specifies the information needed when mapping the source networks to target networks during restore and clone actions.
type NetworkMapping struct {
	// Specifies if the network should be disabled. On restore or clone of the VM, if the network should be kept in disabled state, set this flag to true. The mapped network is enabled by default.
	DisableNetwork NullableBool `json:"disableNetwork,omitempty"`
	// Specifies if the source mac address should be preserved after restore or clone. In case of collision of mac address on target network the job won't fail. Address collision should be resolved manually.
	PreserveMacAddress NullableBool `json:"preserveMacAddress,omitempty"`
	// Specifies the id of the source network.
	SourceNetworkId NullableInt64 `json:"sourceNetworkId,omitempty"`
	// Specifies the id of target network.
	TargetNetworkId NullableInt64 `json:"targetNetworkId,omitempty"`
}

// NewNetworkMapping instantiates a new NetworkMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkMapping() *NetworkMapping {
	this := NetworkMapping{}
	return &this
}

// NewNetworkMappingWithDefaults instantiates a new NetworkMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkMappingWithDefaults() *NetworkMapping {
	this := NetworkMapping{}
	return &this
}

// GetDisableNetwork returns the DisableNetwork field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkMapping) GetDisableNetwork() bool {
	if o == nil || o.DisableNetwork.Get() == nil {
		var ret bool
		return ret
	}
	return *o.DisableNetwork.Get()
}

// GetDisableNetworkOk returns a tuple with the DisableNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkMapping) GetDisableNetworkOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisableNetwork.Get(), o.DisableNetwork.IsSet()
}

// HasDisableNetwork returns a boolean if a field has been set.
func (o *NetworkMapping) HasDisableNetwork() bool {
	if o != nil && o.DisableNetwork.IsSet() {
		return true
	}

	return false
}

// SetDisableNetwork gets a reference to the given NullableBool and assigns it to the DisableNetwork field.
func (o *NetworkMapping) SetDisableNetwork(v bool) {
	o.DisableNetwork.Set(&v)
}
// SetDisableNetworkNil sets the value for DisableNetwork to be an explicit nil
func (o *NetworkMapping) SetDisableNetworkNil() {
	o.DisableNetwork.Set(nil)
}

// UnsetDisableNetwork ensures that no value is present for DisableNetwork, not even an explicit nil
func (o *NetworkMapping) UnsetDisableNetwork() {
	o.DisableNetwork.Unset()
}

// GetPreserveMacAddress returns the PreserveMacAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkMapping) GetPreserveMacAddress() bool {
	if o == nil || o.PreserveMacAddress.Get() == nil {
		var ret bool
		return ret
	}
	return *o.PreserveMacAddress.Get()
}

// GetPreserveMacAddressOk returns a tuple with the PreserveMacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkMapping) GetPreserveMacAddressOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PreserveMacAddress.Get(), o.PreserveMacAddress.IsSet()
}

// HasPreserveMacAddress returns a boolean if a field has been set.
func (o *NetworkMapping) HasPreserveMacAddress() bool {
	if o != nil && o.PreserveMacAddress.IsSet() {
		return true
	}

	return false
}

// SetPreserveMacAddress gets a reference to the given NullableBool and assigns it to the PreserveMacAddress field.
func (o *NetworkMapping) SetPreserveMacAddress(v bool) {
	o.PreserveMacAddress.Set(&v)
}
// SetPreserveMacAddressNil sets the value for PreserveMacAddress to be an explicit nil
func (o *NetworkMapping) SetPreserveMacAddressNil() {
	o.PreserveMacAddress.Set(nil)
}

// UnsetPreserveMacAddress ensures that no value is present for PreserveMacAddress, not even an explicit nil
func (o *NetworkMapping) UnsetPreserveMacAddress() {
	o.PreserveMacAddress.Unset()
}

// GetSourceNetworkId returns the SourceNetworkId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkMapping) GetSourceNetworkId() int64 {
	if o == nil || o.SourceNetworkId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SourceNetworkId.Get()
}

// GetSourceNetworkIdOk returns a tuple with the SourceNetworkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkMapping) GetSourceNetworkIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceNetworkId.Get(), o.SourceNetworkId.IsSet()
}

// HasSourceNetworkId returns a boolean if a field has been set.
func (o *NetworkMapping) HasSourceNetworkId() bool {
	if o != nil && o.SourceNetworkId.IsSet() {
		return true
	}

	return false
}

// SetSourceNetworkId gets a reference to the given NullableInt64 and assigns it to the SourceNetworkId field.
func (o *NetworkMapping) SetSourceNetworkId(v int64) {
	o.SourceNetworkId.Set(&v)
}
// SetSourceNetworkIdNil sets the value for SourceNetworkId to be an explicit nil
func (o *NetworkMapping) SetSourceNetworkIdNil() {
	o.SourceNetworkId.Set(nil)
}

// UnsetSourceNetworkId ensures that no value is present for SourceNetworkId, not even an explicit nil
func (o *NetworkMapping) UnsetSourceNetworkId() {
	o.SourceNetworkId.Unset()
}

// GetTargetNetworkId returns the TargetNetworkId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkMapping) GetTargetNetworkId() int64 {
	if o == nil || o.TargetNetworkId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TargetNetworkId.Get()
}

// GetTargetNetworkIdOk returns a tuple with the TargetNetworkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkMapping) GetTargetNetworkIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetNetworkId.Get(), o.TargetNetworkId.IsSet()
}

// HasTargetNetworkId returns a boolean if a field has been set.
func (o *NetworkMapping) HasTargetNetworkId() bool {
	if o != nil && o.TargetNetworkId.IsSet() {
		return true
	}

	return false
}

// SetTargetNetworkId gets a reference to the given NullableInt64 and assigns it to the TargetNetworkId field.
func (o *NetworkMapping) SetTargetNetworkId(v int64) {
	o.TargetNetworkId.Set(&v)
}
// SetTargetNetworkIdNil sets the value for TargetNetworkId to be an explicit nil
func (o *NetworkMapping) SetTargetNetworkIdNil() {
	o.TargetNetworkId.Set(nil)
}

// UnsetTargetNetworkId ensures that no value is present for TargetNetworkId, not even an explicit nil
func (o *NetworkMapping) UnsetTargetNetworkId() {
	o.TargetNetworkId.Unset()
}

func (o NetworkMapping) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DisableNetwork.IsSet() {
		toSerialize["disableNetwork"] = o.DisableNetwork.Get()
	}
	if o.PreserveMacAddress.IsSet() {
		toSerialize["preserveMacAddress"] = o.PreserveMacAddress.Get()
	}
	if o.SourceNetworkId.IsSet() {
		toSerialize["sourceNetworkId"] = o.SourceNetworkId.Get()
	}
	if o.TargetNetworkId.IsSet() {
		toSerialize["targetNetworkId"] = o.TargetNetworkId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkMapping struct {
	value *NetworkMapping
	isSet bool
}

func (v NullableNetworkMapping) Get() *NetworkMapping {
	return v.value
}

func (v *NullableNetworkMapping) Set(val *NetworkMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkMapping(val *NetworkMapping) *NullableNetworkMapping {
	return &NullableNetworkMapping{value: val, isSet: true}
}

func (v NullableNetworkMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


