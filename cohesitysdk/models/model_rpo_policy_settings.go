/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// RpoPolicySettings Specifies all the additional settings that are applicable only to an RPO policy. This can include storage domain, settings of different environments, etc.
type RpoPolicySettings struct {
	AlertingConfig *AlertingConfig `json:"alertingConfig,omitempty"`
	// Array of Job Events.  During Job Runs, the following Job Events are generated: 1) Job succeeds 2) Job fails 3) Job violates the SLA These Job Events can cause Alerts to be generated. 'kSuccess' means the Protection Job succeeded. 'kFailure' means the Protection Job failed. 'kSlaViolation' means the Protection Job took longer than the time period specified in the SLA.
	AlertingPolicy []string `json:"alertingPolicy,omitempty"`
	EnvironmentTypeJobParams *EnvironmentTypeJobParameters `json:"environmentTypeJobParams,omitempty"`
	IndexingPolicy *IndexingPolicy `json:"indexingPolicy,omitempty"`
	// Specifies the QoS policy type to use. 'kBackupHDD' indicates the Cohesity Cluster writes data directly to the HDD tier for this Protection Job. This is the recommended setting. 'kBackupSSD' indicates the Cohesity Cluster writes data directly to the SSD tier for this Protection Job. Only specify this policy if you need fast ingest speed for a small number of Protection Jobs.
	QosType NullableString `json:"qosType,omitempty"`
	// Specifies the Storage Domain to which data will be written.
	StorageDomainId NullableInt64 `json:"storageDomainId,omitempty"`
}

// NewRpoPolicySettings instantiates a new RpoPolicySettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRpoPolicySettings() *RpoPolicySettings {
	this := RpoPolicySettings{}
	return &this
}

// NewRpoPolicySettingsWithDefaults instantiates a new RpoPolicySettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRpoPolicySettingsWithDefaults() *RpoPolicySettings {
	this := RpoPolicySettings{}
	return &this
}

// GetAlertingConfig returns the AlertingConfig field value if set, zero value otherwise.
func (o *RpoPolicySettings) GetAlertingConfig() AlertingConfig {
	if o == nil || o.AlertingConfig == nil {
		var ret AlertingConfig
		return ret
	}
	return *o.AlertingConfig
}

// GetAlertingConfigOk returns a tuple with the AlertingConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RpoPolicySettings) GetAlertingConfigOk() (*AlertingConfig, bool) {
	if o == nil || o.AlertingConfig == nil {
		return nil, false
	}
	return o.AlertingConfig, true
}

// HasAlertingConfig returns a boolean if a field has been set.
func (o *RpoPolicySettings) HasAlertingConfig() bool {
	if o != nil && o.AlertingConfig != nil {
		return true
	}

	return false
}

// SetAlertingConfig gets a reference to the given AlertingConfig and assigns it to the AlertingConfig field.
func (o *RpoPolicySettings) SetAlertingConfig(v AlertingConfig) {
	o.AlertingConfig = &v
}

// GetAlertingPolicy returns the AlertingPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RpoPolicySettings) GetAlertingPolicy() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.AlertingPolicy
}

// GetAlertingPolicyOk returns a tuple with the AlertingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RpoPolicySettings) GetAlertingPolicyOk() (*[]string, bool) {
	if o == nil || o.AlertingPolicy == nil {
		return nil, false
	}
	return &o.AlertingPolicy, true
}

// HasAlertingPolicy returns a boolean if a field has been set.
func (o *RpoPolicySettings) HasAlertingPolicy() bool {
	if o != nil && o.AlertingPolicy != nil {
		return true
	}

	return false
}

// SetAlertingPolicy gets a reference to the given []string and assigns it to the AlertingPolicy field.
func (o *RpoPolicySettings) SetAlertingPolicy(v []string) {
	o.AlertingPolicy = v
}

// GetEnvironmentTypeJobParams returns the EnvironmentTypeJobParams field value if set, zero value otherwise.
func (o *RpoPolicySettings) GetEnvironmentTypeJobParams() EnvironmentTypeJobParameters {
	if o == nil || o.EnvironmentTypeJobParams == nil {
		var ret EnvironmentTypeJobParameters
		return ret
	}
	return *o.EnvironmentTypeJobParams
}

// GetEnvironmentTypeJobParamsOk returns a tuple with the EnvironmentTypeJobParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RpoPolicySettings) GetEnvironmentTypeJobParamsOk() (*EnvironmentTypeJobParameters, bool) {
	if o == nil || o.EnvironmentTypeJobParams == nil {
		return nil, false
	}
	return o.EnvironmentTypeJobParams, true
}

// HasEnvironmentTypeJobParams returns a boolean if a field has been set.
func (o *RpoPolicySettings) HasEnvironmentTypeJobParams() bool {
	if o != nil && o.EnvironmentTypeJobParams != nil {
		return true
	}

	return false
}

// SetEnvironmentTypeJobParams gets a reference to the given EnvironmentTypeJobParameters and assigns it to the EnvironmentTypeJobParams field.
func (o *RpoPolicySettings) SetEnvironmentTypeJobParams(v EnvironmentTypeJobParameters) {
	o.EnvironmentTypeJobParams = &v
}

// GetIndexingPolicy returns the IndexingPolicy field value if set, zero value otherwise.
func (o *RpoPolicySettings) GetIndexingPolicy() IndexingPolicy {
	if o == nil || o.IndexingPolicy == nil {
		var ret IndexingPolicy
		return ret
	}
	return *o.IndexingPolicy
}

// GetIndexingPolicyOk returns a tuple with the IndexingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RpoPolicySettings) GetIndexingPolicyOk() (*IndexingPolicy, bool) {
	if o == nil || o.IndexingPolicy == nil {
		return nil, false
	}
	return o.IndexingPolicy, true
}

// HasIndexingPolicy returns a boolean if a field has been set.
func (o *RpoPolicySettings) HasIndexingPolicy() bool {
	if o != nil && o.IndexingPolicy != nil {
		return true
	}

	return false
}

// SetIndexingPolicy gets a reference to the given IndexingPolicy and assigns it to the IndexingPolicy field.
func (o *RpoPolicySettings) SetIndexingPolicy(v IndexingPolicy) {
	o.IndexingPolicy = &v
}

// GetQosType returns the QosType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RpoPolicySettings) GetQosType() string {
	if o == nil || o.QosType.Get() == nil {
		var ret string
		return ret
	}
	return *o.QosType.Get()
}

// GetQosTypeOk returns a tuple with the QosType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RpoPolicySettings) GetQosTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.QosType.Get(), o.QosType.IsSet()
}

// HasQosType returns a boolean if a field has been set.
func (o *RpoPolicySettings) HasQosType() bool {
	if o != nil && o.QosType.IsSet() {
		return true
	}

	return false
}

// SetQosType gets a reference to the given NullableString and assigns it to the QosType field.
func (o *RpoPolicySettings) SetQosType(v string) {
	o.QosType.Set(&v)
}
// SetQosTypeNil sets the value for QosType to be an explicit nil
func (o *RpoPolicySettings) SetQosTypeNil() {
	o.QosType.Set(nil)
}

// UnsetQosType ensures that no value is present for QosType, not even an explicit nil
func (o *RpoPolicySettings) UnsetQosType() {
	o.QosType.Unset()
}

// GetStorageDomainId returns the StorageDomainId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RpoPolicySettings) GetStorageDomainId() int64 {
	if o == nil || o.StorageDomainId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.StorageDomainId.Get()
}

// GetStorageDomainIdOk returns a tuple with the StorageDomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RpoPolicySettings) GetStorageDomainIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageDomainId.Get(), o.StorageDomainId.IsSet()
}

// HasStorageDomainId returns a boolean if a field has been set.
func (o *RpoPolicySettings) HasStorageDomainId() bool {
	if o != nil && o.StorageDomainId.IsSet() {
		return true
	}

	return false
}

// SetStorageDomainId gets a reference to the given NullableInt64 and assigns it to the StorageDomainId field.
func (o *RpoPolicySettings) SetStorageDomainId(v int64) {
	o.StorageDomainId.Set(&v)
}
// SetStorageDomainIdNil sets the value for StorageDomainId to be an explicit nil
func (o *RpoPolicySettings) SetStorageDomainIdNil() {
	o.StorageDomainId.Set(nil)
}

// UnsetStorageDomainId ensures that no value is present for StorageDomainId, not even an explicit nil
func (o *RpoPolicySettings) UnsetStorageDomainId() {
	o.StorageDomainId.Unset()
}

func (o RpoPolicySettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AlertingConfig != nil {
		toSerialize["alertingConfig"] = o.AlertingConfig
	}
	if o.AlertingPolicy != nil {
		toSerialize["alertingPolicy"] = o.AlertingPolicy
	}
	if o.EnvironmentTypeJobParams != nil {
		toSerialize["environmentTypeJobParams"] = o.EnvironmentTypeJobParams
	}
	if o.IndexingPolicy != nil {
		toSerialize["indexingPolicy"] = o.IndexingPolicy
	}
	if o.QosType.IsSet() {
		toSerialize["qosType"] = o.QosType.Get()
	}
	if o.StorageDomainId.IsSet() {
		toSerialize["storageDomainId"] = o.StorageDomainId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRpoPolicySettings struct {
	value *RpoPolicySettings
	isSet bool
}

func (v NullableRpoPolicySettings) Get() *RpoPolicySettings {
	return v.value
}

func (v *NullableRpoPolicySettings) Set(val *RpoPolicySettings) {
	v.value = val
	v.isSet = true
}

func (v NullableRpoPolicySettings) IsSet() bool {
	return v.isSet
}

func (v *NullableRpoPolicySettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRpoPolicySettings(val *RpoPolicySettings) *NullableRpoPolicySettings {
	return &NullableRpoPolicySettings{value: val, isSet: true}
}

func (v NullableRpoPolicySettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRpoPolicySettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


