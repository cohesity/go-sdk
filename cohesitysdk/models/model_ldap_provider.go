/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// LdapProvider Specifies the configuration settings for an LDAP provider.
type LdapProvider struct {
	// Specifies the domain name of an Active Directory which is mapped to this LDAP provider
	AdDomainName NullableString `json:"adDomainName,omitempty"`
	// Specifies the authentication type used while connecting to LDAP servers. Authentication level. 'kAnonymous' indicates LDAP authentication type 'Anonymous' 'kSimple' indicates LDAP authentication type 'Simple'
	AuthType NullableString `json:"authType,omitempty"`
	// Specifies the base distinguished name used as the base for LDAP search requests.
	BaseDistinguishedName NullableString `json:"baseDistinguishedName,omitempty"`
	// Specifies the name of the domain name to be used for querying LDAP servers from DNS. If PreferredLdapServerList is set, then DomainName field is ignored.
	DomainName NullableString `json:"domainName,omitempty"`
	// Specifies the name of the LDAP provider.
	Name NullableString `json:"name,omitempty"`
	// Specifies LDAP server port.
	Port NullableInt32 `json:"port,omitempty"`
	// Specifies the preferred LDAP servers. Server names should be either in fully qualified domain name (FQDN) format or IP addresses.
	PreferredLdapServerList []string `json:"preferredLdapServerList,omitempty"`
	// Specifies the unique id of the tenant.
	TenantId NullableString `json:"tenantId,omitempty"`
	// Specifies whether to use SSL for LDAP connections.
	UseSsl NullableBool `json:"useSsl,omitempty"`
	// Specifies the user distinguished name that is used for LDAP authentication. It should be provided if the AuthType is set to either kSimple or kSasl.
	UserDistinguishedName NullableString `json:"userDistinguishedName,omitempty"`
	// Specifies the user password that is used for LDAP authentication.
	UserPassword NullableString `json:"userPassword,omitempty"`
}

// NewLdapProvider instantiates a new LdapProvider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLdapProvider() *LdapProvider {
	this := LdapProvider{}
	return &this
}

// NewLdapProviderWithDefaults instantiates a new LdapProvider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLdapProviderWithDefaults() *LdapProvider {
	this := LdapProvider{}
	return &this
}

// GetAdDomainName returns the AdDomainName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LdapProvider) GetAdDomainName() string {
	if o == nil || o.AdDomainName.Get() == nil {
		var ret string
		return ret
	}
	return *o.AdDomainName.Get()
}

// GetAdDomainNameOk returns a tuple with the AdDomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LdapProvider) GetAdDomainNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AdDomainName.Get(), o.AdDomainName.IsSet()
}

// HasAdDomainName returns a boolean if a field has been set.
func (o *LdapProvider) HasAdDomainName() bool {
	if o != nil && o.AdDomainName.IsSet() {
		return true
	}

	return false
}

// SetAdDomainName gets a reference to the given NullableString and assigns it to the AdDomainName field.
func (o *LdapProvider) SetAdDomainName(v string) {
	o.AdDomainName.Set(&v)
}
// SetAdDomainNameNil sets the value for AdDomainName to be an explicit nil
func (o *LdapProvider) SetAdDomainNameNil() {
	o.AdDomainName.Set(nil)
}

// UnsetAdDomainName ensures that no value is present for AdDomainName, not even an explicit nil
func (o *LdapProvider) UnsetAdDomainName() {
	o.AdDomainName.Unset()
}

// GetAuthType returns the AuthType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LdapProvider) GetAuthType() string {
	if o == nil || o.AuthType.Get() == nil {
		var ret string
		return ret
	}
	return *o.AuthType.Get()
}

// GetAuthTypeOk returns a tuple with the AuthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LdapProvider) GetAuthTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AuthType.Get(), o.AuthType.IsSet()
}

// HasAuthType returns a boolean if a field has been set.
func (o *LdapProvider) HasAuthType() bool {
	if o != nil && o.AuthType.IsSet() {
		return true
	}

	return false
}

// SetAuthType gets a reference to the given NullableString and assigns it to the AuthType field.
func (o *LdapProvider) SetAuthType(v string) {
	o.AuthType.Set(&v)
}
// SetAuthTypeNil sets the value for AuthType to be an explicit nil
func (o *LdapProvider) SetAuthTypeNil() {
	o.AuthType.Set(nil)
}

// UnsetAuthType ensures that no value is present for AuthType, not even an explicit nil
func (o *LdapProvider) UnsetAuthType() {
	o.AuthType.Unset()
}

// GetBaseDistinguishedName returns the BaseDistinguishedName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LdapProvider) GetBaseDistinguishedName() string {
	if o == nil || o.BaseDistinguishedName.Get() == nil {
		var ret string
		return ret
	}
	return *o.BaseDistinguishedName.Get()
}

// GetBaseDistinguishedNameOk returns a tuple with the BaseDistinguishedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LdapProvider) GetBaseDistinguishedNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BaseDistinguishedName.Get(), o.BaseDistinguishedName.IsSet()
}

// HasBaseDistinguishedName returns a boolean if a field has been set.
func (o *LdapProvider) HasBaseDistinguishedName() bool {
	if o != nil && o.BaseDistinguishedName.IsSet() {
		return true
	}

	return false
}

// SetBaseDistinguishedName gets a reference to the given NullableString and assigns it to the BaseDistinguishedName field.
func (o *LdapProvider) SetBaseDistinguishedName(v string) {
	o.BaseDistinguishedName.Set(&v)
}
// SetBaseDistinguishedNameNil sets the value for BaseDistinguishedName to be an explicit nil
func (o *LdapProvider) SetBaseDistinguishedNameNil() {
	o.BaseDistinguishedName.Set(nil)
}

// UnsetBaseDistinguishedName ensures that no value is present for BaseDistinguishedName, not even an explicit nil
func (o *LdapProvider) UnsetBaseDistinguishedName() {
	o.BaseDistinguishedName.Unset()
}

// GetDomainName returns the DomainName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LdapProvider) GetDomainName() string {
	if o == nil || o.DomainName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DomainName.Get()
}

// GetDomainNameOk returns a tuple with the DomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LdapProvider) GetDomainNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DomainName.Get(), o.DomainName.IsSet()
}

// HasDomainName returns a boolean if a field has been set.
func (o *LdapProvider) HasDomainName() bool {
	if o != nil && o.DomainName.IsSet() {
		return true
	}

	return false
}

// SetDomainName gets a reference to the given NullableString and assigns it to the DomainName field.
func (o *LdapProvider) SetDomainName(v string) {
	o.DomainName.Set(&v)
}
// SetDomainNameNil sets the value for DomainName to be an explicit nil
func (o *LdapProvider) SetDomainNameNil() {
	o.DomainName.Set(nil)
}

// UnsetDomainName ensures that no value is present for DomainName, not even an explicit nil
func (o *LdapProvider) UnsetDomainName() {
	o.DomainName.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LdapProvider) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LdapProvider) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *LdapProvider) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *LdapProvider) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *LdapProvider) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *LdapProvider) UnsetName() {
	o.Name.Unset()
}

// GetPort returns the Port field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LdapProvider) GetPort() int32 {
	if o == nil || o.Port.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Port.Get()
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LdapProvider) GetPortOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Port.Get(), o.Port.IsSet()
}

// HasPort returns a boolean if a field has been set.
func (o *LdapProvider) HasPort() bool {
	if o != nil && o.Port.IsSet() {
		return true
	}

	return false
}

// SetPort gets a reference to the given NullableInt32 and assigns it to the Port field.
func (o *LdapProvider) SetPort(v int32) {
	o.Port.Set(&v)
}
// SetPortNil sets the value for Port to be an explicit nil
func (o *LdapProvider) SetPortNil() {
	o.Port.Set(nil)
}

// UnsetPort ensures that no value is present for Port, not even an explicit nil
func (o *LdapProvider) UnsetPort() {
	o.Port.Unset()
}

// GetPreferredLdapServerList returns the PreferredLdapServerList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LdapProvider) GetPreferredLdapServerList() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.PreferredLdapServerList
}

// GetPreferredLdapServerListOk returns a tuple with the PreferredLdapServerList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LdapProvider) GetPreferredLdapServerListOk() (*[]string, bool) {
	if o == nil || o.PreferredLdapServerList == nil {
		return nil, false
	}
	return &o.PreferredLdapServerList, true
}

// HasPreferredLdapServerList returns a boolean if a field has been set.
func (o *LdapProvider) HasPreferredLdapServerList() bool {
	if o != nil && o.PreferredLdapServerList != nil {
		return true
	}

	return false
}

// SetPreferredLdapServerList gets a reference to the given []string and assigns it to the PreferredLdapServerList field.
func (o *LdapProvider) SetPreferredLdapServerList(v []string) {
	o.PreferredLdapServerList = v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LdapProvider) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LdapProvider) GetTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *LdapProvider) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *LdapProvider) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *LdapProvider) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *LdapProvider) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetUseSsl returns the UseSsl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LdapProvider) GetUseSsl() bool {
	if o == nil || o.UseSsl.Get() == nil {
		var ret bool
		return ret
	}
	return *o.UseSsl.Get()
}

// GetUseSslOk returns a tuple with the UseSsl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LdapProvider) GetUseSslOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UseSsl.Get(), o.UseSsl.IsSet()
}

// HasUseSsl returns a boolean if a field has been set.
func (o *LdapProvider) HasUseSsl() bool {
	if o != nil && o.UseSsl.IsSet() {
		return true
	}

	return false
}

// SetUseSsl gets a reference to the given NullableBool and assigns it to the UseSsl field.
func (o *LdapProvider) SetUseSsl(v bool) {
	o.UseSsl.Set(&v)
}
// SetUseSslNil sets the value for UseSsl to be an explicit nil
func (o *LdapProvider) SetUseSslNil() {
	o.UseSsl.Set(nil)
}

// UnsetUseSsl ensures that no value is present for UseSsl, not even an explicit nil
func (o *LdapProvider) UnsetUseSsl() {
	o.UseSsl.Unset()
}

// GetUserDistinguishedName returns the UserDistinguishedName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LdapProvider) GetUserDistinguishedName() string {
	if o == nil || o.UserDistinguishedName.Get() == nil {
		var ret string
		return ret
	}
	return *o.UserDistinguishedName.Get()
}

// GetUserDistinguishedNameOk returns a tuple with the UserDistinguishedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LdapProvider) GetUserDistinguishedNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UserDistinguishedName.Get(), o.UserDistinguishedName.IsSet()
}

// HasUserDistinguishedName returns a boolean if a field has been set.
func (o *LdapProvider) HasUserDistinguishedName() bool {
	if o != nil && o.UserDistinguishedName.IsSet() {
		return true
	}

	return false
}

// SetUserDistinguishedName gets a reference to the given NullableString and assigns it to the UserDistinguishedName field.
func (o *LdapProvider) SetUserDistinguishedName(v string) {
	o.UserDistinguishedName.Set(&v)
}
// SetUserDistinguishedNameNil sets the value for UserDistinguishedName to be an explicit nil
func (o *LdapProvider) SetUserDistinguishedNameNil() {
	o.UserDistinguishedName.Set(nil)
}

// UnsetUserDistinguishedName ensures that no value is present for UserDistinguishedName, not even an explicit nil
func (o *LdapProvider) UnsetUserDistinguishedName() {
	o.UserDistinguishedName.Unset()
}

// GetUserPassword returns the UserPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LdapProvider) GetUserPassword() string {
	if o == nil || o.UserPassword.Get() == nil {
		var ret string
		return ret
	}
	return *o.UserPassword.Get()
}

// GetUserPasswordOk returns a tuple with the UserPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LdapProvider) GetUserPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UserPassword.Get(), o.UserPassword.IsSet()
}

// HasUserPassword returns a boolean if a field has been set.
func (o *LdapProvider) HasUserPassword() bool {
	if o != nil && o.UserPassword.IsSet() {
		return true
	}

	return false
}

// SetUserPassword gets a reference to the given NullableString and assigns it to the UserPassword field.
func (o *LdapProvider) SetUserPassword(v string) {
	o.UserPassword.Set(&v)
}
// SetUserPasswordNil sets the value for UserPassword to be an explicit nil
func (o *LdapProvider) SetUserPasswordNil() {
	o.UserPassword.Set(nil)
}

// UnsetUserPassword ensures that no value is present for UserPassword, not even an explicit nil
func (o *LdapProvider) UnsetUserPassword() {
	o.UserPassword.Unset()
}

func (o LdapProvider) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AdDomainName.IsSet() {
		toSerialize["adDomainName"] = o.AdDomainName.Get()
	}
	if o.AuthType.IsSet() {
		toSerialize["authType"] = o.AuthType.Get()
	}
	if o.BaseDistinguishedName.IsSet() {
		toSerialize["baseDistinguishedName"] = o.BaseDistinguishedName.Get()
	}
	if o.DomainName.IsSet() {
		toSerialize["domainName"] = o.DomainName.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Port.IsSet() {
		toSerialize["port"] = o.Port.Get()
	}
	if o.PreferredLdapServerList != nil {
		toSerialize["preferredLdapServerList"] = o.PreferredLdapServerList
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.UseSsl.IsSet() {
		toSerialize["useSsl"] = o.UseSsl.Get()
	}
	if o.UserDistinguishedName.IsSet() {
		toSerialize["userDistinguishedName"] = o.UserDistinguishedName.Get()
	}
	if o.UserPassword.IsSet() {
		toSerialize["userPassword"] = o.UserPassword.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableLdapProvider struct {
	value *LdapProvider
	isSet bool
}

func (v NullableLdapProvider) Get() *LdapProvider {
	return v.value
}

func (v *NullableLdapProvider) Set(val *LdapProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableLdapProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableLdapProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLdapProvider(val *LdapProvider) *NullableLdapProvider {
	return &NullableLdapProvider{value: val, isSet: true}
}

func (v NullableLdapProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLdapProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


