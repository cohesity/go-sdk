/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// FlashBladeProtectionSource Specifies a Protection Source in Pure Storage FlashBlade environment.
type FlashBladeProtectionSource struct {
	FileSystem *FlashBladeFileSystem `json:"fileSystem,omitempty"`
	// Specifies a unique name of the Protection Source.
	Name NullableString `json:"name,omitempty"`
	StorageArray *FlashBladeStorageArray `json:"storageArray,omitempty"`
	// Specifies the type of managed object in a Pure Storage FlashBlade like 'kStorageArray' or 'kFileSystem'. 'kStorageArray' indicates a top level Pure Storage FlashBlade array. 'kFileSystem' indicates a Pure Storage FlashBlade file system within the array.
	Type NullableString `json:"type,omitempty"`
}

// NewFlashBladeProtectionSource instantiates a new FlashBladeProtectionSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlashBladeProtectionSource() *FlashBladeProtectionSource {
	this := FlashBladeProtectionSource{}
	return &this
}

// NewFlashBladeProtectionSourceWithDefaults instantiates a new FlashBladeProtectionSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlashBladeProtectionSourceWithDefaults() *FlashBladeProtectionSource {
	this := FlashBladeProtectionSource{}
	return &this
}

// GetFileSystem returns the FileSystem field value if set, zero value otherwise.
func (o *FlashBladeProtectionSource) GetFileSystem() FlashBladeFileSystem {
	if o == nil || o.FileSystem == nil {
		var ret FlashBladeFileSystem
		return ret
	}
	return *o.FileSystem
}

// GetFileSystemOk returns a tuple with the FileSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlashBladeProtectionSource) GetFileSystemOk() (*FlashBladeFileSystem, bool) {
	if o == nil || o.FileSystem == nil {
		return nil, false
	}
	return o.FileSystem, true
}

// HasFileSystem returns a boolean if a field has been set.
func (o *FlashBladeProtectionSource) HasFileSystem() bool {
	if o != nil && o.FileSystem != nil {
		return true
	}

	return false
}

// SetFileSystem gets a reference to the given FlashBladeFileSystem and assigns it to the FileSystem field.
func (o *FlashBladeProtectionSource) SetFileSystem(v FlashBladeFileSystem) {
	o.FileSystem = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FlashBladeProtectionSource) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FlashBladeProtectionSource) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *FlashBladeProtectionSource) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *FlashBladeProtectionSource) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *FlashBladeProtectionSource) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *FlashBladeProtectionSource) UnsetName() {
	o.Name.Unset()
}

// GetStorageArray returns the StorageArray field value if set, zero value otherwise.
func (o *FlashBladeProtectionSource) GetStorageArray() FlashBladeStorageArray {
	if o == nil || o.StorageArray == nil {
		var ret FlashBladeStorageArray
		return ret
	}
	return *o.StorageArray
}

// GetStorageArrayOk returns a tuple with the StorageArray field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlashBladeProtectionSource) GetStorageArrayOk() (*FlashBladeStorageArray, bool) {
	if o == nil || o.StorageArray == nil {
		return nil, false
	}
	return o.StorageArray, true
}

// HasStorageArray returns a boolean if a field has been set.
func (o *FlashBladeProtectionSource) HasStorageArray() bool {
	if o != nil && o.StorageArray != nil {
		return true
	}

	return false
}

// SetStorageArray gets a reference to the given FlashBladeStorageArray and assigns it to the StorageArray field.
func (o *FlashBladeProtectionSource) SetStorageArray(v FlashBladeStorageArray) {
	o.StorageArray = &v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FlashBladeProtectionSource) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FlashBladeProtectionSource) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *FlashBladeProtectionSource) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *FlashBladeProtectionSource) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *FlashBladeProtectionSource) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *FlashBladeProtectionSource) UnsetType() {
	o.Type.Unset()
}

func (o FlashBladeProtectionSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FileSystem != nil {
		toSerialize["fileSystem"] = o.FileSystem
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.StorageArray != nil {
		toSerialize["storageArray"] = o.StorageArray
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableFlashBladeProtectionSource struct {
	value *FlashBladeProtectionSource
	isSet bool
}

func (v NullableFlashBladeProtectionSource) Get() *FlashBladeProtectionSource {
	return v.value
}

func (v *NullableFlashBladeProtectionSource) Set(val *FlashBladeProtectionSource) {
	v.value = val
	v.isSet = true
}

func (v NullableFlashBladeProtectionSource) IsSet() bool {
	return v.isSet
}

func (v *NullableFlashBladeProtectionSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlashBladeProtectionSource(val *FlashBladeProtectionSource) *NullableFlashBladeProtectionSource {
	return &NullableFlashBladeProtectionSource{value: val, isSet: true}
}

func (v NullableFlashBladeProtectionSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlashBladeProtectionSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


