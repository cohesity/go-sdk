/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// BackupRun Specifies details about the Backup task for a Job Run. A Backup task captures the original backup snapshots for each Protection Source in the Job.
type BackupRun struct {
	// Specifies the environment type that the task is protecting. Supported environment types such as 'kView', 'kSQL', 'kVMware', etc. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter. 'kVMware' indicates the VMware Protection Source environment. 'kHyperV' indicates the HyperV Protection Source environment. 'kSQL' indicates the SQL Protection Source environment. 'kView' indicates the View Protection Source environment. 'kPuppeteer' indicates the Cohesity's Remote Adapter. 'kPhysical' indicates the physical Protection Source environment. 'kPure' indicates the Pure Storage Protection Source environment. 'Nimble' indicates the Nimble Storage Protection Source environment. 'kAzure' indicates the Microsoft's Azure Protection Source environment. 'kNetapp' indicates the Netapp Protection Source environment. 'kAgent' indicates the Agent Protection Source environment. 'kGenericNas' indicates the Generic Network Attached Storage Protection Source environment. 'kAcropolis' indicates the Acropolis Protection Source environment. 'kPhsicalFiles' indicates the Physical Files Protection Source environment. 'kIsilon' indicates the Dell EMC's Isilon Protection Source environment. 'kGPFS' indicates IBM's GPFS Protection Source environment. 'kKVM' indicates the KVM Protection Source environment. 'kAWS' indicates the AWS Protection Source environment. 'kExchange' indicates the Exchange Protection Source environment. 'kHyperVVSS' indicates the HyperV VSS Protection Source environment. 'kOracle' indicates the Oracle Protection Source environment. 'kGCP' indicates the Google Cloud Platform Protection Source environment. 'kFlashBlade' indicates the Flash Blade Protection Source environment. 'kAWSNative' indicates the AWS Native Protection Source environment. 'kO365' indicates the Office 365 Protection Source environment. 'kO365Outlook' indicates Office 365 outlook Protection Source environment. 'kHyperFlex' indicates the Hyper Flex Protection Source environment. 'kGCPNative' indicates the GCP Native Protection Source environment. 'kAzureNative' indicates the Azure Native Protection Source environment. 'kKubernetes' indicates a Kubernetes Protection Source environment. 'kElastifile' indicates Elastifile Protection Source environment. 'kAD' indicates Active Directory Protection Source environment. 'kRDSSnapshotManager' indicates AWS RDS Protection Source environment. 'kCassandra' indicates Cassandra Protection Source environment. 'kMongoDB' indicates MongoDB Protection Source environment. 'kCouchbase' indicates Couchbase Protection Source environment. 'kHdfs' indicates Hdfs Protection Source environment. 'kHive' indicates Hive Protection Source environment. 'kHBase' indicates HBase Protection Source environment.
	Environment NullableString `json:"environment,omitempty"`
	// Specifies if an error occurred (if any) while running this task. This field is populated when the status is equal to 'kFailure'.
	Error NullableString `json:"error,omitempty"`
	// Specifies the id of the Job Run that ran the backup task and the copy tasks.
	JobRunId NullableInt64 `json:"jobRunId,omitempty"`
	// Specifies a message after finishing the task successfully. This field is optionally populated when the status is equal to 'kSuccess'.
	Message NullableString `json:"message,omitempty"`
	// Specifies if the metadata and snapshots associated with this Job Run have been deleted. This field is set to true when the snapshots, which are marked for deletion, are removed by garbage collection. The associated metadata is also deleted.
	MetadataDeleted NullableBool `json:"metadataDeleted,omitempty"`
	// Specifies if app-consistent snapshot was captured. This field is set to true, if an app-consistent snapshot was taken by quiescing applications and the file system before taking a backup.
	Quiesced NullableBool `json:"quiesced,omitempty"`
	// Specifies the type of backup such as 'kRegular', 'kFull', 'kLog' or 'kSystem'. 'kRegular' indicates a incremental (CBT) backup. Incremental backups utilizing CBT (if supported) are captured of the target protection objects. The first run of a kRegular schedule captures all the blocks. 'kFull' indicates a full (no CBT) backup. A complete backup (all blocks) of the target protection objects are always captured and Change Block Tracking (CBT) is not utilized. 'kLog' indicates a Database Log backup. Capture the database transaction logs to allow rolling back to a specific point in time. 'kSystem' indicates a system backup. System backups are used to do bare metal recovery of the system to a specific point in time.
	RunType NullableString `json:"runType,omitempty"`
	// Specifies if the SLA was violated for the Job Run. This field is set to true, if time to complete the Job Run is longer than the SLA specified. This field is populated when the status is set to 'kSuccess' or 'kFailure'.
	SlaViolated NullableBool `json:"slaViolated,omitempty"`
	// Specifies if backup snapshots associated with this Job Run have been marked for deletion because of the retention settings in the Policy or if they were manually deleted from the Cohesity Dashboard.
	SnapshotsDeleted NullableBool `json:"snapshotsDeleted,omitempty"`
	// Specifies if backup snapshots associated with this Job Run have been marked for deletion because of the retention settings in the Policy or if they were manually deleted from the Cohesity Dashboard.
	SnapshotsDeletedTimeUsecs NullableInt64 `json:"snapshotsDeletedTimeUsecs,omitempty"`
	// Array of Source Object Backup Status.  Specifies the status of backing up each source objects (such as VMs) associated with the job.
	SourceBackupStatus []SourceBackupStatus `json:"sourceBackupStatus,omitempty"`
	Stats *ProtectionJobRunStats `json:"stats,omitempty"`
	// Specifies the status of Backup task such as 'kRunning', 'kSuccess', 'kFailure' etc. 'kAccepted' indicates the task is queued to run but not yet running. 'kRunning' indicates the task is running. 'kCanceling' indicates a request to cancel the task has occurred but the task is not yet canceled. 'kCanceled' indicates the task has been canceled. 'kSuccess' indicates the task was successful. 'kFailure' indicates the task failed. 'kWarning' indicates the task has finished with warning. 'kOnHold' indicates the task is kept onHold. 'kMissed' indicates the task is missed.
	Status NullableString `json:"status,omitempty"`
	// Array of Warnings.  Specifies the warnings that occurred (if any) while running this task.
	Warnings []string `json:"warnings,omitempty"`
	// Specifies WORM retention type for the snapshot as given by the policy. When a WORM retention type is specified, the snapshot will be kept until the maximum of the snapshot retention time. During that time, the snapshot cannot be deleted. 'kNone' implies there is no WORM retention set. 'kCompliance' implies WORM retention is set for compliance reason. 'kAdministrative' implies WORM retention is set for administrative purposes.
	WormRetentionType NullableString `json:"wormRetentionType,omitempty"`
}

// NewBackupRun instantiates a new BackupRun object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupRun() *BackupRun {
	this := BackupRun{}
	return &this
}

// NewBackupRunWithDefaults instantiates a new BackupRun object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupRunWithDefaults() *BackupRun {
	this := BackupRun{}
	return &this
}

// GetEnvironment returns the Environment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRun) GetEnvironment() string {
	if o == nil || o.Environment.Get() == nil {
		var ret string
		return ret
	}
	return *o.Environment.Get()
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRun) GetEnvironmentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Environment.Get(), o.Environment.IsSet()
}

// HasEnvironment returns a boolean if a field has been set.
func (o *BackupRun) HasEnvironment() bool {
	if o != nil && o.Environment.IsSet() {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given NullableString and assigns it to the Environment field.
func (o *BackupRun) SetEnvironment(v string) {
	o.Environment.Set(&v)
}
// SetEnvironmentNil sets the value for Environment to be an explicit nil
func (o *BackupRun) SetEnvironmentNil() {
	o.Environment.Set(nil)
}

// UnsetEnvironment ensures that no value is present for Environment, not even an explicit nil
func (o *BackupRun) UnsetEnvironment() {
	o.Environment.Unset()
}

// GetError returns the Error field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRun) GetError() string {
	if o == nil || o.Error.Get() == nil {
		var ret string
		return ret
	}
	return *o.Error.Get()
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRun) GetErrorOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Error.Get(), o.Error.IsSet()
}

// HasError returns a boolean if a field has been set.
func (o *BackupRun) HasError() bool {
	if o != nil && o.Error.IsSet() {
		return true
	}

	return false
}

// SetError gets a reference to the given NullableString and assigns it to the Error field.
func (o *BackupRun) SetError(v string) {
	o.Error.Set(&v)
}
// SetErrorNil sets the value for Error to be an explicit nil
func (o *BackupRun) SetErrorNil() {
	o.Error.Set(nil)
}

// UnsetError ensures that no value is present for Error, not even an explicit nil
func (o *BackupRun) UnsetError() {
	o.Error.Unset()
}

// GetJobRunId returns the JobRunId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRun) GetJobRunId() int64 {
	if o == nil || o.JobRunId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.JobRunId.Get()
}

// GetJobRunIdOk returns a tuple with the JobRunId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRun) GetJobRunIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.JobRunId.Get(), o.JobRunId.IsSet()
}

// HasJobRunId returns a boolean if a field has been set.
func (o *BackupRun) HasJobRunId() bool {
	if o != nil && o.JobRunId.IsSet() {
		return true
	}

	return false
}

// SetJobRunId gets a reference to the given NullableInt64 and assigns it to the JobRunId field.
func (o *BackupRun) SetJobRunId(v int64) {
	o.JobRunId.Set(&v)
}
// SetJobRunIdNil sets the value for JobRunId to be an explicit nil
func (o *BackupRun) SetJobRunIdNil() {
	o.JobRunId.Set(nil)
}

// UnsetJobRunId ensures that no value is present for JobRunId, not even an explicit nil
func (o *BackupRun) UnsetJobRunId() {
	o.JobRunId.Unset()
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRun) GetMessage() string {
	if o == nil || o.Message.Get() == nil {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRun) GetMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *BackupRun) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *BackupRun) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *BackupRun) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *BackupRun) UnsetMessage() {
	o.Message.Unset()
}

// GetMetadataDeleted returns the MetadataDeleted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRun) GetMetadataDeleted() bool {
	if o == nil || o.MetadataDeleted.Get() == nil {
		var ret bool
		return ret
	}
	return *o.MetadataDeleted.Get()
}

// GetMetadataDeletedOk returns a tuple with the MetadataDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRun) GetMetadataDeletedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MetadataDeleted.Get(), o.MetadataDeleted.IsSet()
}

// HasMetadataDeleted returns a boolean if a field has been set.
func (o *BackupRun) HasMetadataDeleted() bool {
	if o != nil && o.MetadataDeleted.IsSet() {
		return true
	}

	return false
}

// SetMetadataDeleted gets a reference to the given NullableBool and assigns it to the MetadataDeleted field.
func (o *BackupRun) SetMetadataDeleted(v bool) {
	o.MetadataDeleted.Set(&v)
}
// SetMetadataDeletedNil sets the value for MetadataDeleted to be an explicit nil
func (o *BackupRun) SetMetadataDeletedNil() {
	o.MetadataDeleted.Set(nil)
}

// UnsetMetadataDeleted ensures that no value is present for MetadataDeleted, not even an explicit nil
func (o *BackupRun) UnsetMetadataDeleted() {
	o.MetadataDeleted.Unset()
}

// GetQuiesced returns the Quiesced field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRun) GetQuiesced() bool {
	if o == nil || o.Quiesced.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Quiesced.Get()
}

// GetQuiescedOk returns a tuple with the Quiesced field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRun) GetQuiescedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Quiesced.Get(), o.Quiesced.IsSet()
}

// HasQuiesced returns a boolean if a field has been set.
func (o *BackupRun) HasQuiesced() bool {
	if o != nil && o.Quiesced.IsSet() {
		return true
	}

	return false
}

// SetQuiesced gets a reference to the given NullableBool and assigns it to the Quiesced field.
func (o *BackupRun) SetQuiesced(v bool) {
	o.Quiesced.Set(&v)
}
// SetQuiescedNil sets the value for Quiesced to be an explicit nil
func (o *BackupRun) SetQuiescedNil() {
	o.Quiesced.Set(nil)
}

// UnsetQuiesced ensures that no value is present for Quiesced, not even an explicit nil
func (o *BackupRun) UnsetQuiesced() {
	o.Quiesced.Unset()
}

// GetRunType returns the RunType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRun) GetRunType() string {
	if o == nil || o.RunType.Get() == nil {
		var ret string
		return ret
	}
	return *o.RunType.Get()
}

// GetRunTypeOk returns a tuple with the RunType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRun) GetRunTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RunType.Get(), o.RunType.IsSet()
}

// HasRunType returns a boolean if a field has been set.
func (o *BackupRun) HasRunType() bool {
	if o != nil && o.RunType.IsSet() {
		return true
	}

	return false
}

// SetRunType gets a reference to the given NullableString and assigns it to the RunType field.
func (o *BackupRun) SetRunType(v string) {
	o.RunType.Set(&v)
}
// SetRunTypeNil sets the value for RunType to be an explicit nil
func (o *BackupRun) SetRunTypeNil() {
	o.RunType.Set(nil)
}

// UnsetRunType ensures that no value is present for RunType, not even an explicit nil
func (o *BackupRun) UnsetRunType() {
	o.RunType.Unset()
}

// GetSlaViolated returns the SlaViolated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRun) GetSlaViolated() bool {
	if o == nil || o.SlaViolated.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SlaViolated.Get()
}

// GetSlaViolatedOk returns a tuple with the SlaViolated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRun) GetSlaViolatedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SlaViolated.Get(), o.SlaViolated.IsSet()
}

// HasSlaViolated returns a boolean if a field has been set.
func (o *BackupRun) HasSlaViolated() bool {
	if o != nil && o.SlaViolated.IsSet() {
		return true
	}

	return false
}

// SetSlaViolated gets a reference to the given NullableBool and assigns it to the SlaViolated field.
func (o *BackupRun) SetSlaViolated(v bool) {
	o.SlaViolated.Set(&v)
}
// SetSlaViolatedNil sets the value for SlaViolated to be an explicit nil
func (o *BackupRun) SetSlaViolatedNil() {
	o.SlaViolated.Set(nil)
}

// UnsetSlaViolated ensures that no value is present for SlaViolated, not even an explicit nil
func (o *BackupRun) UnsetSlaViolated() {
	o.SlaViolated.Unset()
}

// GetSnapshotsDeleted returns the SnapshotsDeleted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRun) GetSnapshotsDeleted() bool {
	if o == nil || o.SnapshotsDeleted.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SnapshotsDeleted.Get()
}

// GetSnapshotsDeletedOk returns a tuple with the SnapshotsDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRun) GetSnapshotsDeletedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SnapshotsDeleted.Get(), o.SnapshotsDeleted.IsSet()
}

// HasSnapshotsDeleted returns a boolean if a field has been set.
func (o *BackupRun) HasSnapshotsDeleted() bool {
	if o != nil && o.SnapshotsDeleted.IsSet() {
		return true
	}

	return false
}

// SetSnapshotsDeleted gets a reference to the given NullableBool and assigns it to the SnapshotsDeleted field.
func (o *BackupRun) SetSnapshotsDeleted(v bool) {
	o.SnapshotsDeleted.Set(&v)
}
// SetSnapshotsDeletedNil sets the value for SnapshotsDeleted to be an explicit nil
func (o *BackupRun) SetSnapshotsDeletedNil() {
	o.SnapshotsDeleted.Set(nil)
}

// UnsetSnapshotsDeleted ensures that no value is present for SnapshotsDeleted, not even an explicit nil
func (o *BackupRun) UnsetSnapshotsDeleted() {
	o.SnapshotsDeleted.Unset()
}

// GetSnapshotsDeletedTimeUsecs returns the SnapshotsDeletedTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRun) GetSnapshotsDeletedTimeUsecs() int64 {
	if o == nil || o.SnapshotsDeletedTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SnapshotsDeletedTimeUsecs.Get()
}

// GetSnapshotsDeletedTimeUsecsOk returns a tuple with the SnapshotsDeletedTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRun) GetSnapshotsDeletedTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SnapshotsDeletedTimeUsecs.Get(), o.SnapshotsDeletedTimeUsecs.IsSet()
}

// HasSnapshotsDeletedTimeUsecs returns a boolean if a field has been set.
func (o *BackupRun) HasSnapshotsDeletedTimeUsecs() bool {
	if o != nil && o.SnapshotsDeletedTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetSnapshotsDeletedTimeUsecs gets a reference to the given NullableInt64 and assigns it to the SnapshotsDeletedTimeUsecs field.
func (o *BackupRun) SetSnapshotsDeletedTimeUsecs(v int64) {
	o.SnapshotsDeletedTimeUsecs.Set(&v)
}
// SetSnapshotsDeletedTimeUsecsNil sets the value for SnapshotsDeletedTimeUsecs to be an explicit nil
func (o *BackupRun) SetSnapshotsDeletedTimeUsecsNil() {
	o.SnapshotsDeletedTimeUsecs.Set(nil)
}

// UnsetSnapshotsDeletedTimeUsecs ensures that no value is present for SnapshotsDeletedTimeUsecs, not even an explicit nil
func (o *BackupRun) UnsetSnapshotsDeletedTimeUsecs() {
	o.SnapshotsDeletedTimeUsecs.Unset()
}

// GetSourceBackupStatus returns the SourceBackupStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRun) GetSourceBackupStatus() []SourceBackupStatus {
	if o == nil  {
		var ret []SourceBackupStatus
		return ret
	}
	return o.SourceBackupStatus
}

// GetSourceBackupStatusOk returns a tuple with the SourceBackupStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRun) GetSourceBackupStatusOk() (*[]SourceBackupStatus, bool) {
	if o == nil || o.SourceBackupStatus == nil {
		return nil, false
	}
	return &o.SourceBackupStatus, true
}

// HasSourceBackupStatus returns a boolean if a field has been set.
func (o *BackupRun) HasSourceBackupStatus() bool {
	if o != nil && o.SourceBackupStatus != nil {
		return true
	}

	return false
}

// SetSourceBackupStatus gets a reference to the given []SourceBackupStatus and assigns it to the SourceBackupStatus field.
func (o *BackupRun) SetSourceBackupStatus(v []SourceBackupStatus) {
	o.SourceBackupStatus = v
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *BackupRun) GetStats() ProtectionJobRunStats {
	if o == nil || o.Stats == nil {
		var ret ProtectionJobRunStats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupRun) GetStatsOk() (*ProtectionJobRunStats, bool) {
	if o == nil || o.Stats == nil {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *BackupRun) HasStats() bool {
	if o != nil && o.Stats != nil {
		return true
	}

	return false
}

// SetStats gets a reference to the given ProtectionJobRunStats and assigns it to the Stats field.
func (o *BackupRun) SetStats(v ProtectionJobRunStats) {
	o.Stats = &v
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRun) GetStatus() string {
	if o == nil || o.Status.Get() == nil {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRun) GetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *BackupRun) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *BackupRun) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *BackupRun) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *BackupRun) UnsetStatus() {
	o.Status.Unset()
}

// GetWarnings returns the Warnings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRun) GetWarnings() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRun) GetWarningsOk() (*[]string, bool) {
	if o == nil || o.Warnings == nil {
		return nil, false
	}
	return &o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *BackupRun) HasWarnings() bool {
	if o != nil && o.Warnings != nil {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []string and assigns it to the Warnings field.
func (o *BackupRun) SetWarnings(v []string) {
	o.Warnings = v
}

// GetWormRetentionType returns the WormRetentionType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRun) GetWormRetentionType() string {
	if o == nil || o.WormRetentionType.Get() == nil {
		var ret string
		return ret
	}
	return *o.WormRetentionType.Get()
}

// GetWormRetentionTypeOk returns a tuple with the WormRetentionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRun) GetWormRetentionTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.WormRetentionType.Get(), o.WormRetentionType.IsSet()
}

// HasWormRetentionType returns a boolean if a field has been set.
func (o *BackupRun) HasWormRetentionType() bool {
	if o != nil && o.WormRetentionType.IsSet() {
		return true
	}

	return false
}

// SetWormRetentionType gets a reference to the given NullableString and assigns it to the WormRetentionType field.
func (o *BackupRun) SetWormRetentionType(v string) {
	o.WormRetentionType.Set(&v)
}
// SetWormRetentionTypeNil sets the value for WormRetentionType to be an explicit nil
func (o *BackupRun) SetWormRetentionTypeNil() {
	o.WormRetentionType.Set(nil)
}

// UnsetWormRetentionType ensures that no value is present for WormRetentionType, not even an explicit nil
func (o *BackupRun) UnsetWormRetentionType() {
	o.WormRetentionType.Unset()
}

func (o BackupRun) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Environment.IsSet() {
		toSerialize["environment"] = o.Environment.Get()
	}
	if o.Error.IsSet() {
		toSerialize["error"] = o.Error.Get()
	}
	if o.JobRunId.IsSet() {
		toSerialize["jobRunId"] = o.JobRunId.Get()
	}
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	if o.MetadataDeleted.IsSet() {
		toSerialize["metadataDeleted"] = o.MetadataDeleted.Get()
	}
	if o.Quiesced.IsSet() {
		toSerialize["quiesced"] = o.Quiesced.Get()
	}
	if o.RunType.IsSet() {
		toSerialize["runType"] = o.RunType.Get()
	}
	if o.SlaViolated.IsSet() {
		toSerialize["slaViolated"] = o.SlaViolated.Get()
	}
	if o.SnapshotsDeleted.IsSet() {
		toSerialize["snapshotsDeleted"] = o.SnapshotsDeleted.Get()
	}
	if o.SnapshotsDeletedTimeUsecs.IsSet() {
		toSerialize["snapshotsDeletedTimeUsecs"] = o.SnapshotsDeletedTimeUsecs.Get()
	}
	if o.SourceBackupStatus != nil {
		toSerialize["sourceBackupStatus"] = o.SourceBackupStatus
	}
	if o.Stats != nil {
		toSerialize["stats"] = o.Stats
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.Warnings != nil {
		toSerialize["warnings"] = o.Warnings
	}
	if o.WormRetentionType.IsSet() {
		toSerialize["wormRetentionType"] = o.WormRetentionType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableBackupRun struct {
	value *BackupRun
	isSet bool
}

func (v NullableBackupRun) Get() *BackupRun {
	return v.value
}

func (v *NullableBackupRun) Set(val *BackupRun) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupRun) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupRun) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupRun(val *BackupRun) *NullableBackupRun {
	return &NullableBackupRun{value: val, isSet: true}
}

func (v NullableBackupRun) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupRun) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


