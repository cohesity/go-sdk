/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// DirQuotaPolicy Specifies a policy configuration for the directory quota. A policy is the sole entity which describes the usage limits of a directory in a view.  `DirPath` is the identifier of a policy. It must be specified for adding, updating or removing a policy. If `Policy` is not set, then it is considered to be removed.
type DirQuotaPolicy struct {
	// Specifies the path of the directory in the view.
	DirPath NullableString `json:"dirPath,omitempty"`
	// Denotes directory quota walk is pending or not.
	DirWalkPending NullableBool `json:"dirWalkPending,omitempty"`
	Policy *QuotaPolicy `json:"policy,omitempty"`
	// Specifies the current usage (in bytes) by the directory in the view. This is set by the response received from bridge when querying directory quota usage.
	UsageBytes NullableInt64 `json:"usageBytes,omitempty"`
}

// NewDirQuotaPolicy instantiates a new DirQuotaPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDirQuotaPolicy() *DirQuotaPolicy {
	this := DirQuotaPolicy{}
	return &this
}

// NewDirQuotaPolicyWithDefaults instantiates a new DirQuotaPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDirQuotaPolicyWithDefaults() *DirQuotaPolicy {
	this := DirQuotaPolicy{}
	return &this
}

// GetDirPath returns the DirPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DirQuotaPolicy) GetDirPath() string {
	if o == nil || o.DirPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.DirPath.Get()
}

// GetDirPathOk returns a tuple with the DirPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DirQuotaPolicy) GetDirPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DirPath.Get(), o.DirPath.IsSet()
}

// HasDirPath returns a boolean if a field has been set.
func (o *DirQuotaPolicy) HasDirPath() bool {
	if o != nil && o.DirPath.IsSet() {
		return true
	}

	return false
}

// SetDirPath gets a reference to the given NullableString and assigns it to the DirPath field.
func (o *DirQuotaPolicy) SetDirPath(v string) {
	o.DirPath.Set(&v)
}
// SetDirPathNil sets the value for DirPath to be an explicit nil
func (o *DirQuotaPolicy) SetDirPathNil() {
	o.DirPath.Set(nil)
}

// UnsetDirPath ensures that no value is present for DirPath, not even an explicit nil
func (o *DirQuotaPolicy) UnsetDirPath() {
	o.DirPath.Unset()
}

// GetDirWalkPending returns the DirWalkPending field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DirQuotaPolicy) GetDirWalkPending() bool {
	if o == nil || o.DirWalkPending.Get() == nil {
		var ret bool
		return ret
	}
	return *o.DirWalkPending.Get()
}

// GetDirWalkPendingOk returns a tuple with the DirWalkPending field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DirQuotaPolicy) GetDirWalkPendingOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DirWalkPending.Get(), o.DirWalkPending.IsSet()
}

// HasDirWalkPending returns a boolean if a field has been set.
func (o *DirQuotaPolicy) HasDirWalkPending() bool {
	if o != nil && o.DirWalkPending.IsSet() {
		return true
	}

	return false
}

// SetDirWalkPending gets a reference to the given NullableBool and assigns it to the DirWalkPending field.
func (o *DirQuotaPolicy) SetDirWalkPending(v bool) {
	o.DirWalkPending.Set(&v)
}
// SetDirWalkPendingNil sets the value for DirWalkPending to be an explicit nil
func (o *DirQuotaPolicy) SetDirWalkPendingNil() {
	o.DirWalkPending.Set(nil)
}

// UnsetDirWalkPending ensures that no value is present for DirWalkPending, not even an explicit nil
func (o *DirQuotaPolicy) UnsetDirWalkPending() {
	o.DirWalkPending.Unset()
}

// GetPolicy returns the Policy field value if set, zero value otherwise.
func (o *DirQuotaPolicy) GetPolicy() QuotaPolicy {
	if o == nil || o.Policy == nil {
		var ret QuotaPolicy
		return ret
	}
	return *o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DirQuotaPolicy) GetPolicyOk() (*QuotaPolicy, bool) {
	if o == nil || o.Policy == nil {
		return nil, false
	}
	return o.Policy, true
}

// HasPolicy returns a boolean if a field has been set.
func (o *DirQuotaPolicy) HasPolicy() bool {
	if o != nil && o.Policy != nil {
		return true
	}

	return false
}

// SetPolicy gets a reference to the given QuotaPolicy and assigns it to the Policy field.
func (o *DirQuotaPolicy) SetPolicy(v QuotaPolicy) {
	o.Policy = &v
}

// GetUsageBytes returns the UsageBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DirQuotaPolicy) GetUsageBytes() int64 {
	if o == nil || o.UsageBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.UsageBytes.Get()
}

// GetUsageBytesOk returns a tuple with the UsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DirQuotaPolicy) GetUsageBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UsageBytes.Get(), o.UsageBytes.IsSet()
}

// HasUsageBytes returns a boolean if a field has been set.
func (o *DirQuotaPolicy) HasUsageBytes() bool {
	if o != nil && o.UsageBytes.IsSet() {
		return true
	}

	return false
}

// SetUsageBytes gets a reference to the given NullableInt64 and assigns it to the UsageBytes field.
func (o *DirQuotaPolicy) SetUsageBytes(v int64) {
	o.UsageBytes.Set(&v)
}
// SetUsageBytesNil sets the value for UsageBytes to be an explicit nil
func (o *DirQuotaPolicy) SetUsageBytesNil() {
	o.UsageBytes.Set(nil)
}

// UnsetUsageBytes ensures that no value is present for UsageBytes, not even an explicit nil
func (o *DirQuotaPolicy) UnsetUsageBytes() {
	o.UsageBytes.Unset()
}

func (o DirQuotaPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DirPath.IsSet() {
		toSerialize["dirPath"] = o.DirPath.Get()
	}
	if o.DirWalkPending.IsSet() {
		toSerialize["dirWalkPending"] = o.DirWalkPending.Get()
	}
	if o.Policy != nil {
		toSerialize["policy"] = o.Policy
	}
	if o.UsageBytes.IsSet() {
		toSerialize["usageBytes"] = o.UsageBytes.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDirQuotaPolicy struct {
	value *DirQuotaPolicy
	isSet bool
}

func (v NullableDirQuotaPolicy) Get() *DirQuotaPolicy {
	return v.value
}

func (v *NullableDirQuotaPolicy) Set(val *DirQuotaPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableDirQuotaPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableDirQuotaPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDirQuotaPolicy(val *DirQuotaPolicy) *NullableDirQuotaPolicy {
	return &NullableDirQuotaPolicy{value: val, isSet: true}
}

func (v NullableDirQuotaPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDirQuotaPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


