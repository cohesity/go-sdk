/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// SwiftContainerTaggingProto struct for SwiftContainerTaggingProto
type SwiftContainerTaggingProto struct {
	AclRootUser *User `json:"aclRootUser,omitempty"`
	ProjectTag *Project `json:"projectTag,omitempty"`
}

// NewSwiftContainerTaggingProto instantiates a new SwiftContainerTaggingProto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSwiftContainerTaggingProto() *SwiftContainerTaggingProto {
	this := SwiftContainerTaggingProto{}
	return &this
}

// NewSwiftContainerTaggingProtoWithDefaults instantiates a new SwiftContainerTaggingProto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSwiftContainerTaggingProtoWithDefaults() *SwiftContainerTaggingProto {
	this := SwiftContainerTaggingProto{}
	return &this
}

// GetAclRootUser returns the AclRootUser field value if set, zero value otherwise.
func (o *SwiftContainerTaggingProto) GetAclRootUser() User {
	if o == nil || o.AclRootUser == nil {
		var ret User
		return ret
	}
	return *o.AclRootUser
}

// GetAclRootUserOk returns a tuple with the AclRootUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwiftContainerTaggingProto) GetAclRootUserOk() (*User, bool) {
	if o == nil || o.AclRootUser == nil {
		return nil, false
	}
	return o.AclRootUser, true
}

// HasAclRootUser returns a boolean if a field has been set.
func (o *SwiftContainerTaggingProto) HasAclRootUser() bool {
	if o != nil && o.AclRootUser != nil {
		return true
	}

	return false
}

// SetAclRootUser gets a reference to the given User and assigns it to the AclRootUser field.
func (o *SwiftContainerTaggingProto) SetAclRootUser(v User) {
	o.AclRootUser = &v
}

// GetProjectTag returns the ProjectTag field value if set, zero value otherwise.
func (o *SwiftContainerTaggingProto) GetProjectTag() Project {
	if o == nil || o.ProjectTag == nil {
		var ret Project
		return ret
	}
	return *o.ProjectTag
}

// GetProjectTagOk returns a tuple with the ProjectTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwiftContainerTaggingProto) GetProjectTagOk() (*Project, bool) {
	if o == nil || o.ProjectTag == nil {
		return nil, false
	}
	return o.ProjectTag, true
}

// HasProjectTag returns a boolean if a field has been set.
func (o *SwiftContainerTaggingProto) HasProjectTag() bool {
	if o != nil && o.ProjectTag != nil {
		return true
	}

	return false
}

// SetProjectTag gets a reference to the given Project and assigns it to the ProjectTag field.
func (o *SwiftContainerTaggingProto) SetProjectTag(v Project) {
	o.ProjectTag = &v
}

func (o SwiftContainerTaggingProto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AclRootUser != nil {
		toSerialize["aclRootUser"] = o.AclRootUser
	}
	if o.ProjectTag != nil {
		toSerialize["projectTag"] = o.ProjectTag
	}
	return json.Marshal(toSerialize)
}

type NullableSwiftContainerTaggingProto struct {
	value *SwiftContainerTaggingProto
	isSet bool
}

func (v NullableSwiftContainerTaggingProto) Get() *SwiftContainerTaggingProto {
	return v.value
}

func (v *NullableSwiftContainerTaggingProto) Set(val *SwiftContainerTaggingProto) {
	v.value = val
	v.isSet = true
}

func (v NullableSwiftContainerTaggingProto) IsSet() bool {
	return v.isSet
}

func (v *NullableSwiftContainerTaggingProto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwiftContainerTaggingProto(val *SwiftContainerTaggingProto) *NullableSwiftContainerTaggingProto {
	return &NullableSwiftContainerTaggingProto{value: val, isSet: true}
}

func (v NullableSwiftContainerTaggingProto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwiftContainerTaggingProto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


