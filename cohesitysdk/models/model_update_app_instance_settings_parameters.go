/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// UpdateAppInstanceSettingsParameters Specifies update app instance settings parameters.
type UpdateAppInstanceSettingsParameters struct {
	// Description of the app instance.
	Description NullableString `json:"description,omitempty"`
	Settings *AppInstanceSettings `json:"settings,omitempty"`
}

// NewUpdateAppInstanceSettingsParameters instantiates a new UpdateAppInstanceSettingsParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateAppInstanceSettingsParameters() *UpdateAppInstanceSettingsParameters {
	this := UpdateAppInstanceSettingsParameters{}
	return &this
}

// NewUpdateAppInstanceSettingsParametersWithDefaults instantiates a new UpdateAppInstanceSettingsParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateAppInstanceSettingsParametersWithDefaults() *UpdateAppInstanceSettingsParameters {
	this := UpdateAppInstanceSettingsParameters{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateAppInstanceSettingsParameters) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateAppInstanceSettingsParameters) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateAppInstanceSettingsParameters) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *UpdateAppInstanceSettingsParameters) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *UpdateAppInstanceSettingsParameters) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *UpdateAppInstanceSettingsParameters) UnsetDescription() {
	o.Description.Unset()
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *UpdateAppInstanceSettingsParameters) GetSettings() AppInstanceSettings {
	if o == nil || o.Settings == nil {
		var ret AppInstanceSettings
		return ret
	}
	return *o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateAppInstanceSettingsParameters) GetSettingsOk() (*AppInstanceSettings, bool) {
	if o == nil || o.Settings == nil {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *UpdateAppInstanceSettingsParameters) HasSettings() bool {
	if o != nil && o.Settings != nil {
		return true
	}

	return false
}

// SetSettings gets a reference to the given AppInstanceSettings and assigns it to the Settings field.
func (o *UpdateAppInstanceSettingsParameters) SetSettings(v AppInstanceSettings) {
	o.Settings = &v
}

func (o UpdateAppInstanceSettingsParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Settings != nil {
		toSerialize["settings"] = o.Settings
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateAppInstanceSettingsParameters struct {
	value *UpdateAppInstanceSettingsParameters
	isSet bool
}

func (v NullableUpdateAppInstanceSettingsParameters) Get() *UpdateAppInstanceSettingsParameters {
	return v.value
}

func (v *NullableUpdateAppInstanceSettingsParameters) Set(val *UpdateAppInstanceSettingsParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAppInstanceSettingsParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAppInstanceSettingsParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAppInstanceSettingsParameters(val *UpdateAppInstanceSettingsParameters) *NullableUpdateAppInstanceSettingsParameters {
	return &NullableUpdateAppInstanceSettingsParameters{value: val, isSet: true}
}

func (v NullableUpdateAppInstanceSettingsParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAppInstanceSettingsParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


