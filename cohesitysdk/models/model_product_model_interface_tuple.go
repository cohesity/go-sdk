/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package cohesitysdk
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/cohesitysdk/utils"
)

var _ = NullableBool{}

// ProductModelInterfaceTuple Specifies a group of product model and interface set.
type ProductModelInterfaceTuple struct {
	// Specifies the name of the interface.
	IfaceName NullableString `json:"ifaceName,omitempty"`
	// Specifies the product model name.
	ProductModelName NullableString `json:"productModelName,omitempty"`
}

// NewProductModelInterfaceTuple instantiates a new ProductModelInterfaceTuple object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductModelInterfaceTuple() *ProductModelInterfaceTuple {
	this := ProductModelInterfaceTuple{}
	return &this
}

// NewProductModelInterfaceTupleWithDefaults instantiates a new ProductModelInterfaceTuple object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductModelInterfaceTupleWithDefaults() *ProductModelInterfaceTuple {
	this := ProductModelInterfaceTuple{}
	return &this
}

// GetIfaceName returns the IfaceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductModelInterfaceTuple) GetIfaceName() string {
	if o == nil || o.IfaceName.Get() == nil {
		var ret string
		return ret
	}
	return *o.IfaceName.Get()
}

// GetIfaceNameOk returns a tuple with the IfaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductModelInterfaceTuple) GetIfaceNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IfaceName.Get(), o.IfaceName.IsSet()
}

// HasIfaceName returns a boolean if a field has been set.
func (o *ProductModelInterfaceTuple) HasIfaceName() bool {
	if o != nil && o.IfaceName.IsSet() {
		return true
	}

	return false
}

// SetIfaceName gets a reference to the given NullableString and assigns it to the IfaceName field.
func (o *ProductModelInterfaceTuple) SetIfaceName(v string) {
	o.IfaceName.Set(&v)
}
// SetIfaceNameNil sets the value for IfaceName to be an explicit nil
func (o *ProductModelInterfaceTuple) SetIfaceNameNil() {
	o.IfaceName.Set(nil)
}

// UnsetIfaceName ensures that no value is present for IfaceName, not even an explicit nil
func (o *ProductModelInterfaceTuple) UnsetIfaceName() {
	o.IfaceName.Unset()
}

// GetProductModelName returns the ProductModelName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductModelInterfaceTuple) GetProductModelName() string {
	if o == nil || o.ProductModelName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProductModelName.Get()
}

// GetProductModelNameOk returns a tuple with the ProductModelName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductModelInterfaceTuple) GetProductModelNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProductModelName.Get(), o.ProductModelName.IsSet()
}

// HasProductModelName returns a boolean if a field has been set.
func (o *ProductModelInterfaceTuple) HasProductModelName() bool {
	if o != nil && o.ProductModelName.IsSet() {
		return true
	}

	return false
}

// SetProductModelName gets a reference to the given NullableString and assigns it to the ProductModelName field.
func (o *ProductModelInterfaceTuple) SetProductModelName(v string) {
	o.ProductModelName.Set(&v)
}
// SetProductModelNameNil sets the value for ProductModelName to be an explicit nil
func (o *ProductModelInterfaceTuple) SetProductModelNameNil() {
	o.ProductModelName.Set(nil)
}

// UnsetProductModelName ensures that no value is present for ProductModelName, not even an explicit nil
func (o *ProductModelInterfaceTuple) UnsetProductModelName() {
	o.ProductModelName.Unset()
}

func (o ProductModelInterfaceTuple) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IfaceName.IsSet() {
		toSerialize["ifaceName"] = o.IfaceName.Get()
	}
	if o.ProductModelName.IsSet() {
		toSerialize["productModelName"] = o.ProductModelName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableProductModelInterfaceTuple struct {
	value *ProductModelInterfaceTuple
	isSet bool
}

func (v NullableProductModelInterfaceTuple) Get() *ProductModelInterfaceTuple {
	return v.value
}

func (v *NullableProductModelInterfaceTuple) Set(val *ProductModelInterfaceTuple) {
	v.value = val
	v.isSet = true
}

func (v NullableProductModelInterfaceTuple) IsSet() bool {
	return v.isSet
}

func (v *NullableProductModelInterfaceTuple) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductModelInterfaceTuple(val *ProductModelInterfaceTuple) *NullableProductModelInterfaceTuple {
	return &NullableProductModelInterfaceTuple{value: val, isSet: true}
}

func (v NullableProductModelInterfaceTuple) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductModelInterfaceTuple) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


