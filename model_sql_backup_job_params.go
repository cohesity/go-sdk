/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// SqlBackupJobParams Message to capture additional backup job params specific to SQL.
type SqlBackupJobParams struct {
	// Preference type for backing up databases that are part of an AAG. Only applicable if 'use_aag_preferences_from_sql_server' is set to false.
	AagBackupPreferenceType NullableInt32 `json:"aagBackupPreferenceType,omitempty"`
	// If set to true, only the volumes associated with databases should be backed up. The user cannot select additional volumes at host level for backup.  If set to false, all the volumes on the host machine will be backed up. In this case, the user can further select the exact set of volumes using host level params.  Note that the volumes associated with selected databases will always be included in the backup.
	BackupDatabaseVolumesOnly NullableBool `json:"backupDatabaseVolumesOnly,omitempty"`
	// Set to true if system databases should be backed up.
	BackupSystemDbs NullableBool `json:"backupSystemDbs,omitempty"`
	// Whether backup should continue after encountering a page checksum error.
	ContinueAfterError NullableBool `json:"continueAfterError,omitempty"`
	// Whether backup checksums are enabled.
	EnableChecksum NullableBool `json:"enableChecksum,omitempty"`
	// If this is set to true, then incremental backup will be performed after the server restarts, otherwise a full-backup will be done.
	EnableIncrementalBackupAfterRestart NullableBool `json:"enableIncrementalBackupAfterRestart,omitempty"`
	// The type of SQL full backup to be used for this job.
	FullBackupType NullableInt32 `json:"fullBackupType,omitempty"`
	// Whether full backups should be copy-only.
	IsCopyOnlyFull NullableBool `json:"isCopyOnlyFull,omitempty"`
	// Whether log backups should be copy-only.
	IsCopyOnlyLog NullableBool `json:"isCopyOnlyLog,omitempty"`
	// The number of databases to be backed up per batch. This is only applicable for file based sql backup. If this is not specified, we use the value specified in magneto_vss_sql_app_file_batch_size gflag.
	NumDbsPerBatch NullableInt32 `json:"numDbsPerBatch,omitempty"`
	// The number of streams to be used in native sql backup command. This is only applicable for native sql backup. If this is not specified, we use the value specified in magneto_sql_num_streams_for_each_db_backup gflag.
	NumStreams NullableInt32 `json:"numStreams,omitempty"`
	// Set to true if we should use AAG preferences specified at the SQL server host.
	UseAagPreferencesFromSqlServer NullableBool `json:"useAagPreferencesFromSqlServer,omitempty"`
	// Preference type for backing up user databases on the host.
	UserDbPreferenceType NullableInt32 `json:"userDbPreferenceType,omitempty"`
	// 'with_clause' contains 'with clause' to be used in native sql backup command. This is only applicable for native sql backup. Here user can specify multiple backup options. Example: \"WITH BUFFERCOUNT = 575, MAXTRANSFERSIZE = 2097152\". If this is not specified, we use the value specified in magneto_sql_native_backup_with_clause gflag.
	WithClause NullableString `json:"withClause,omitempty"`
}

// NewSqlBackupJobParams instantiates a new SqlBackupJobParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSqlBackupJobParams() *SqlBackupJobParams {
	this := SqlBackupJobParams{}
	return &this
}

// NewSqlBackupJobParamsWithDefaults instantiates a new SqlBackupJobParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSqlBackupJobParamsWithDefaults() *SqlBackupJobParams {
	this := SqlBackupJobParams{}
	return &this
}

// GetAagBackupPreferenceType returns the AagBackupPreferenceType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlBackupJobParams) GetAagBackupPreferenceType() int32 {
	if o == nil || o.AagBackupPreferenceType.Get() == nil {
		var ret int32
		return ret
	}
	return *o.AagBackupPreferenceType.Get()
}

// GetAagBackupPreferenceTypeOk returns a tuple with the AagBackupPreferenceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlBackupJobParams) GetAagBackupPreferenceTypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AagBackupPreferenceType.Get(), o.AagBackupPreferenceType.IsSet()
}

// HasAagBackupPreferenceType returns a boolean if a field has been set.
func (o *SqlBackupJobParams) HasAagBackupPreferenceType() bool {
	if o != nil && o.AagBackupPreferenceType.IsSet() {
		return true
	}

	return false
}

// SetAagBackupPreferenceType gets a reference to the given NullableInt32 and assigns it to the AagBackupPreferenceType field.
func (o *SqlBackupJobParams) SetAagBackupPreferenceType(v int32) {
	o.AagBackupPreferenceType.Set(&v)
}
// SetAagBackupPreferenceTypeNil sets the value for AagBackupPreferenceType to be an explicit nil
func (o *SqlBackupJobParams) SetAagBackupPreferenceTypeNil() {
	o.AagBackupPreferenceType.Set(nil)
}

// UnsetAagBackupPreferenceType ensures that no value is present for AagBackupPreferenceType, not even an explicit nil
func (o *SqlBackupJobParams) UnsetAagBackupPreferenceType() {
	o.AagBackupPreferenceType.Unset()
}

// GetBackupDatabaseVolumesOnly returns the BackupDatabaseVolumesOnly field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlBackupJobParams) GetBackupDatabaseVolumesOnly() bool {
	if o == nil || o.BackupDatabaseVolumesOnly.Get() == nil {
		var ret bool
		return ret
	}
	return *o.BackupDatabaseVolumesOnly.Get()
}

// GetBackupDatabaseVolumesOnlyOk returns a tuple with the BackupDatabaseVolumesOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlBackupJobParams) GetBackupDatabaseVolumesOnlyOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BackupDatabaseVolumesOnly.Get(), o.BackupDatabaseVolumesOnly.IsSet()
}

// HasBackupDatabaseVolumesOnly returns a boolean if a field has been set.
func (o *SqlBackupJobParams) HasBackupDatabaseVolumesOnly() bool {
	if o != nil && o.BackupDatabaseVolumesOnly.IsSet() {
		return true
	}

	return false
}

// SetBackupDatabaseVolumesOnly gets a reference to the given NullableBool and assigns it to the BackupDatabaseVolumesOnly field.
func (o *SqlBackupJobParams) SetBackupDatabaseVolumesOnly(v bool) {
	o.BackupDatabaseVolumesOnly.Set(&v)
}
// SetBackupDatabaseVolumesOnlyNil sets the value for BackupDatabaseVolumesOnly to be an explicit nil
func (o *SqlBackupJobParams) SetBackupDatabaseVolumesOnlyNil() {
	o.BackupDatabaseVolumesOnly.Set(nil)
}

// UnsetBackupDatabaseVolumesOnly ensures that no value is present for BackupDatabaseVolumesOnly, not even an explicit nil
func (o *SqlBackupJobParams) UnsetBackupDatabaseVolumesOnly() {
	o.BackupDatabaseVolumesOnly.Unset()
}

// GetBackupSystemDbs returns the BackupSystemDbs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlBackupJobParams) GetBackupSystemDbs() bool {
	if o == nil || o.BackupSystemDbs.Get() == nil {
		var ret bool
		return ret
	}
	return *o.BackupSystemDbs.Get()
}

// GetBackupSystemDbsOk returns a tuple with the BackupSystemDbs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlBackupJobParams) GetBackupSystemDbsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BackupSystemDbs.Get(), o.BackupSystemDbs.IsSet()
}

// HasBackupSystemDbs returns a boolean if a field has been set.
func (o *SqlBackupJobParams) HasBackupSystemDbs() bool {
	if o != nil && o.BackupSystemDbs.IsSet() {
		return true
	}

	return false
}

// SetBackupSystemDbs gets a reference to the given NullableBool and assigns it to the BackupSystemDbs field.
func (o *SqlBackupJobParams) SetBackupSystemDbs(v bool) {
	o.BackupSystemDbs.Set(&v)
}
// SetBackupSystemDbsNil sets the value for BackupSystemDbs to be an explicit nil
func (o *SqlBackupJobParams) SetBackupSystemDbsNil() {
	o.BackupSystemDbs.Set(nil)
}

// UnsetBackupSystemDbs ensures that no value is present for BackupSystemDbs, not even an explicit nil
func (o *SqlBackupJobParams) UnsetBackupSystemDbs() {
	o.BackupSystemDbs.Unset()
}

// GetContinueAfterError returns the ContinueAfterError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlBackupJobParams) GetContinueAfterError() bool {
	if o == nil || o.ContinueAfterError.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ContinueAfterError.Get()
}

// GetContinueAfterErrorOk returns a tuple with the ContinueAfterError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlBackupJobParams) GetContinueAfterErrorOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ContinueAfterError.Get(), o.ContinueAfterError.IsSet()
}

// HasContinueAfterError returns a boolean if a field has been set.
func (o *SqlBackupJobParams) HasContinueAfterError() bool {
	if o != nil && o.ContinueAfterError.IsSet() {
		return true
	}

	return false
}

// SetContinueAfterError gets a reference to the given NullableBool and assigns it to the ContinueAfterError field.
func (o *SqlBackupJobParams) SetContinueAfterError(v bool) {
	o.ContinueAfterError.Set(&v)
}
// SetContinueAfterErrorNil sets the value for ContinueAfterError to be an explicit nil
func (o *SqlBackupJobParams) SetContinueAfterErrorNil() {
	o.ContinueAfterError.Set(nil)
}

// UnsetContinueAfterError ensures that no value is present for ContinueAfterError, not even an explicit nil
func (o *SqlBackupJobParams) UnsetContinueAfterError() {
	o.ContinueAfterError.Unset()
}

// GetEnableChecksum returns the EnableChecksum field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlBackupJobParams) GetEnableChecksum() bool {
	if o == nil || o.EnableChecksum.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableChecksum.Get()
}

// GetEnableChecksumOk returns a tuple with the EnableChecksum field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlBackupJobParams) GetEnableChecksumOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableChecksum.Get(), o.EnableChecksum.IsSet()
}

// HasEnableChecksum returns a boolean if a field has been set.
func (o *SqlBackupJobParams) HasEnableChecksum() bool {
	if o != nil && o.EnableChecksum.IsSet() {
		return true
	}

	return false
}

// SetEnableChecksum gets a reference to the given NullableBool and assigns it to the EnableChecksum field.
func (o *SqlBackupJobParams) SetEnableChecksum(v bool) {
	o.EnableChecksum.Set(&v)
}
// SetEnableChecksumNil sets the value for EnableChecksum to be an explicit nil
func (o *SqlBackupJobParams) SetEnableChecksumNil() {
	o.EnableChecksum.Set(nil)
}

// UnsetEnableChecksum ensures that no value is present for EnableChecksum, not even an explicit nil
func (o *SqlBackupJobParams) UnsetEnableChecksum() {
	o.EnableChecksum.Unset()
}

// GetEnableIncrementalBackupAfterRestart returns the EnableIncrementalBackupAfterRestart field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlBackupJobParams) GetEnableIncrementalBackupAfterRestart() bool {
	if o == nil || o.EnableIncrementalBackupAfterRestart.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableIncrementalBackupAfterRestart.Get()
}

// GetEnableIncrementalBackupAfterRestartOk returns a tuple with the EnableIncrementalBackupAfterRestart field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlBackupJobParams) GetEnableIncrementalBackupAfterRestartOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableIncrementalBackupAfterRestart.Get(), o.EnableIncrementalBackupAfterRestart.IsSet()
}

// HasEnableIncrementalBackupAfterRestart returns a boolean if a field has been set.
func (o *SqlBackupJobParams) HasEnableIncrementalBackupAfterRestart() bool {
	if o != nil && o.EnableIncrementalBackupAfterRestart.IsSet() {
		return true
	}

	return false
}

// SetEnableIncrementalBackupAfterRestart gets a reference to the given NullableBool and assigns it to the EnableIncrementalBackupAfterRestart field.
func (o *SqlBackupJobParams) SetEnableIncrementalBackupAfterRestart(v bool) {
	o.EnableIncrementalBackupAfterRestart.Set(&v)
}
// SetEnableIncrementalBackupAfterRestartNil sets the value for EnableIncrementalBackupAfterRestart to be an explicit nil
func (o *SqlBackupJobParams) SetEnableIncrementalBackupAfterRestartNil() {
	o.EnableIncrementalBackupAfterRestart.Set(nil)
}

// UnsetEnableIncrementalBackupAfterRestart ensures that no value is present for EnableIncrementalBackupAfterRestart, not even an explicit nil
func (o *SqlBackupJobParams) UnsetEnableIncrementalBackupAfterRestart() {
	o.EnableIncrementalBackupAfterRestart.Unset()
}

// GetFullBackupType returns the FullBackupType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlBackupJobParams) GetFullBackupType() int32 {
	if o == nil || o.FullBackupType.Get() == nil {
		var ret int32
		return ret
	}
	return *o.FullBackupType.Get()
}

// GetFullBackupTypeOk returns a tuple with the FullBackupType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlBackupJobParams) GetFullBackupTypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FullBackupType.Get(), o.FullBackupType.IsSet()
}

// HasFullBackupType returns a boolean if a field has been set.
func (o *SqlBackupJobParams) HasFullBackupType() bool {
	if o != nil && o.FullBackupType.IsSet() {
		return true
	}

	return false
}

// SetFullBackupType gets a reference to the given NullableInt32 and assigns it to the FullBackupType field.
func (o *SqlBackupJobParams) SetFullBackupType(v int32) {
	o.FullBackupType.Set(&v)
}
// SetFullBackupTypeNil sets the value for FullBackupType to be an explicit nil
func (o *SqlBackupJobParams) SetFullBackupTypeNil() {
	o.FullBackupType.Set(nil)
}

// UnsetFullBackupType ensures that no value is present for FullBackupType, not even an explicit nil
func (o *SqlBackupJobParams) UnsetFullBackupType() {
	o.FullBackupType.Unset()
}

// GetIsCopyOnlyFull returns the IsCopyOnlyFull field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlBackupJobParams) GetIsCopyOnlyFull() bool {
	if o == nil || o.IsCopyOnlyFull.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsCopyOnlyFull.Get()
}

// GetIsCopyOnlyFullOk returns a tuple with the IsCopyOnlyFull field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlBackupJobParams) GetIsCopyOnlyFullOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsCopyOnlyFull.Get(), o.IsCopyOnlyFull.IsSet()
}

// HasIsCopyOnlyFull returns a boolean if a field has been set.
func (o *SqlBackupJobParams) HasIsCopyOnlyFull() bool {
	if o != nil && o.IsCopyOnlyFull.IsSet() {
		return true
	}

	return false
}

// SetIsCopyOnlyFull gets a reference to the given NullableBool and assigns it to the IsCopyOnlyFull field.
func (o *SqlBackupJobParams) SetIsCopyOnlyFull(v bool) {
	o.IsCopyOnlyFull.Set(&v)
}
// SetIsCopyOnlyFullNil sets the value for IsCopyOnlyFull to be an explicit nil
func (o *SqlBackupJobParams) SetIsCopyOnlyFullNil() {
	o.IsCopyOnlyFull.Set(nil)
}

// UnsetIsCopyOnlyFull ensures that no value is present for IsCopyOnlyFull, not even an explicit nil
func (o *SqlBackupJobParams) UnsetIsCopyOnlyFull() {
	o.IsCopyOnlyFull.Unset()
}

// GetIsCopyOnlyLog returns the IsCopyOnlyLog field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlBackupJobParams) GetIsCopyOnlyLog() bool {
	if o == nil || o.IsCopyOnlyLog.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsCopyOnlyLog.Get()
}

// GetIsCopyOnlyLogOk returns a tuple with the IsCopyOnlyLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlBackupJobParams) GetIsCopyOnlyLogOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsCopyOnlyLog.Get(), o.IsCopyOnlyLog.IsSet()
}

// HasIsCopyOnlyLog returns a boolean if a field has been set.
func (o *SqlBackupJobParams) HasIsCopyOnlyLog() bool {
	if o != nil && o.IsCopyOnlyLog.IsSet() {
		return true
	}

	return false
}

// SetIsCopyOnlyLog gets a reference to the given NullableBool and assigns it to the IsCopyOnlyLog field.
func (o *SqlBackupJobParams) SetIsCopyOnlyLog(v bool) {
	o.IsCopyOnlyLog.Set(&v)
}
// SetIsCopyOnlyLogNil sets the value for IsCopyOnlyLog to be an explicit nil
func (o *SqlBackupJobParams) SetIsCopyOnlyLogNil() {
	o.IsCopyOnlyLog.Set(nil)
}

// UnsetIsCopyOnlyLog ensures that no value is present for IsCopyOnlyLog, not even an explicit nil
func (o *SqlBackupJobParams) UnsetIsCopyOnlyLog() {
	o.IsCopyOnlyLog.Unset()
}

// GetNumDbsPerBatch returns the NumDbsPerBatch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlBackupJobParams) GetNumDbsPerBatch() int32 {
	if o == nil || o.NumDbsPerBatch.Get() == nil {
		var ret int32
		return ret
	}
	return *o.NumDbsPerBatch.Get()
}

// GetNumDbsPerBatchOk returns a tuple with the NumDbsPerBatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlBackupJobParams) GetNumDbsPerBatchOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumDbsPerBatch.Get(), o.NumDbsPerBatch.IsSet()
}

// HasNumDbsPerBatch returns a boolean if a field has been set.
func (o *SqlBackupJobParams) HasNumDbsPerBatch() bool {
	if o != nil && o.NumDbsPerBatch.IsSet() {
		return true
	}

	return false
}

// SetNumDbsPerBatch gets a reference to the given NullableInt32 and assigns it to the NumDbsPerBatch field.
func (o *SqlBackupJobParams) SetNumDbsPerBatch(v int32) {
	o.NumDbsPerBatch.Set(&v)
}
// SetNumDbsPerBatchNil sets the value for NumDbsPerBatch to be an explicit nil
func (o *SqlBackupJobParams) SetNumDbsPerBatchNil() {
	o.NumDbsPerBatch.Set(nil)
}

// UnsetNumDbsPerBatch ensures that no value is present for NumDbsPerBatch, not even an explicit nil
func (o *SqlBackupJobParams) UnsetNumDbsPerBatch() {
	o.NumDbsPerBatch.Unset()
}

// GetNumStreams returns the NumStreams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlBackupJobParams) GetNumStreams() int32 {
	if o == nil || o.NumStreams.Get() == nil {
		var ret int32
		return ret
	}
	return *o.NumStreams.Get()
}

// GetNumStreamsOk returns a tuple with the NumStreams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlBackupJobParams) GetNumStreamsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumStreams.Get(), o.NumStreams.IsSet()
}

// HasNumStreams returns a boolean if a field has been set.
func (o *SqlBackupJobParams) HasNumStreams() bool {
	if o != nil && o.NumStreams.IsSet() {
		return true
	}

	return false
}

// SetNumStreams gets a reference to the given NullableInt32 and assigns it to the NumStreams field.
func (o *SqlBackupJobParams) SetNumStreams(v int32) {
	o.NumStreams.Set(&v)
}
// SetNumStreamsNil sets the value for NumStreams to be an explicit nil
func (o *SqlBackupJobParams) SetNumStreamsNil() {
	o.NumStreams.Set(nil)
}

// UnsetNumStreams ensures that no value is present for NumStreams, not even an explicit nil
func (o *SqlBackupJobParams) UnsetNumStreams() {
	o.NumStreams.Unset()
}

// GetUseAagPreferencesFromSqlServer returns the UseAagPreferencesFromSqlServer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlBackupJobParams) GetUseAagPreferencesFromSqlServer() bool {
	if o == nil || o.UseAagPreferencesFromSqlServer.Get() == nil {
		var ret bool
		return ret
	}
	return *o.UseAagPreferencesFromSqlServer.Get()
}

// GetUseAagPreferencesFromSqlServerOk returns a tuple with the UseAagPreferencesFromSqlServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlBackupJobParams) GetUseAagPreferencesFromSqlServerOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UseAagPreferencesFromSqlServer.Get(), o.UseAagPreferencesFromSqlServer.IsSet()
}

// HasUseAagPreferencesFromSqlServer returns a boolean if a field has been set.
func (o *SqlBackupJobParams) HasUseAagPreferencesFromSqlServer() bool {
	if o != nil && o.UseAagPreferencesFromSqlServer.IsSet() {
		return true
	}

	return false
}

// SetUseAagPreferencesFromSqlServer gets a reference to the given NullableBool and assigns it to the UseAagPreferencesFromSqlServer field.
func (o *SqlBackupJobParams) SetUseAagPreferencesFromSqlServer(v bool) {
	o.UseAagPreferencesFromSqlServer.Set(&v)
}
// SetUseAagPreferencesFromSqlServerNil sets the value for UseAagPreferencesFromSqlServer to be an explicit nil
func (o *SqlBackupJobParams) SetUseAagPreferencesFromSqlServerNil() {
	o.UseAagPreferencesFromSqlServer.Set(nil)
}

// UnsetUseAagPreferencesFromSqlServer ensures that no value is present for UseAagPreferencesFromSqlServer, not even an explicit nil
func (o *SqlBackupJobParams) UnsetUseAagPreferencesFromSqlServer() {
	o.UseAagPreferencesFromSqlServer.Unset()
}

// GetUserDbPreferenceType returns the UserDbPreferenceType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlBackupJobParams) GetUserDbPreferenceType() int32 {
	if o == nil || o.UserDbPreferenceType.Get() == nil {
		var ret int32
		return ret
	}
	return *o.UserDbPreferenceType.Get()
}

// GetUserDbPreferenceTypeOk returns a tuple with the UserDbPreferenceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlBackupJobParams) GetUserDbPreferenceTypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UserDbPreferenceType.Get(), o.UserDbPreferenceType.IsSet()
}

// HasUserDbPreferenceType returns a boolean if a field has been set.
func (o *SqlBackupJobParams) HasUserDbPreferenceType() bool {
	if o != nil && o.UserDbPreferenceType.IsSet() {
		return true
	}

	return false
}

// SetUserDbPreferenceType gets a reference to the given NullableInt32 and assigns it to the UserDbPreferenceType field.
func (o *SqlBackupJobParams) SetUserDbPreferenceType(v int32) {
	o.UserDbPreferenceType.Set(&v)
}
// SetUserDbPreferenceTypeNil sets the value for UserDbPreferenceType to be an explicit nil
func (o *SqlBackupJobParams) SetUserDbPreferenceTypeNil() {
	o.UserDbPreferenceType.Set(nil)
}

// UnsetUserDbPreferenceType ensures that no value is present for UserDbPreferenceType, not even an explicit nil
func (o *SqlBackupJobParams) UnsetUserDbPreferenceType() {
	o.UserDbPreferenceType.Unset()
}

// GetWithClause returns the WithClause field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SqlBackupJobParams) GetWithClause() string {
	if o == nil || o.WithClause.Get() == nil {
		var ret string
		return ret
	}
	return *o.WithClause.Get()
}

// GetWithClauseOk returns a tuple with the WithClause field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SqlBackupJobParams) GetWithClauseOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.WithClause.Get(), o.WithClause.IsSet()
}

// HasWithClause returns a boolean if a field has been set.
func (o *SqlBackupJobParams) HasWithClause() bool {
	if o != nil && o.WithClause.IsSet() {
		return true
	}

	return false
}

// SetWithClause gets a reference to the given NullableString and assigns it to the WithClause field.
func (o *SqlBackupJobParams) SetWithClause(v string) {
	o.WithClause.Set(&v)
}
// SetWithClauseNil sets the value for WithClause to be an explicit nil
func (o *SqlBackupJobParams) SetWithClauseNil() {
	o.WithClause.Set(nil)
}

// UnsetWithClause ensures that no value is present for WithClause, not even an explicit nil
func (o *SqlBackupJobParams) UnsetWithClause() {
	o.WithClause.Unset()
}

func (o SqlBackupJobParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AagBackupPreferenceType.IsSet() {
		toSerialize["aagBackupPreferenceType"] = o.AagBackupPreferenceType.Get()
	}
	if o.BackupDatabaseVolumesOnly.IsSet() {
		toSerialize["backupDatabaseVolumesOnly"] = o.BackupDatabaseVolumesOnly.Get()
	}
	if o.BackupSystemDbs.IsSet() {
		toSerialize["backupSystemDbs"] = o.BackupSystemDbs.Get()
	}
	if o.ContinueAfterError.IsSet() {
		toSerialize["continueAfterError"] = o.ContinueAfterError.Get()
	}
	if o.EnableChecksum.IsSet() {
		toSerialize["enableChecksum"] = o.EnableChecksum.Get()
	}
	if o.EnableIncrementalBackupAfterRestart.IsSet() {
		toSerialize["enableIncrementalBackupAfterRestart"] = o.EnableIncrementalBackupAfterRestart.Get()
	}
	if o.FullBackupType.IsSet() {
		toSerialize["fullBackupType"] = o.FullBackupType.Get()
	}
	if o.IsCopyOnlyFull.IsSet() {
		toSerialize["isCopyOnlyFull"] = o.IsCopyOnlyFull.Get()
	}
	if o.IsCopyOnlyLog.IsSet() {
		toSerialize["isCopyOnlyLog"] = o.IsCopyOnlyLog.Get()
	}
	if o.NumDbsPerBatch.IsSet() {
		toSerialize["numDbsPerBatch"] = o.NumDbsPerBatch.Get()
	}
	if o.NumStreams.IsSet() {
		toSerialize["numStreams"] = o.NumStreams.Get()
	}
	if o.UseAagPreferencesFromSqlServer.IsSet() {
		toSerialize["useAagPreferencesFromSqlServer"] = o.UseAagPreferencesFromSqlServer.Get()
	}
	if o.UserDbPreferenceType.IsSet() {
		toSerialize["userDbPreferenceType"] = o.UserDbPreferenceType.Get()
	}
	if o.WithClause.IsSet() {
		toSerialize["withClause"] = o.WithClause.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSqlBackupJobParams struct {
	value *SqlBackupJobParams
	isSet bool
}

func (v NullableSqlBackupJobParams) Get() *SqlBackupJobParams {
	return v.value
}

func (v *NullableSqlBackupJobParams) Set(val *SqlBackupJobParams) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlBackupJobParams) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlBackupJobParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlBackupJobParams(val *SqlBackupJobParams) *NullableSqlBackupJobParams {
	return &NullableSqlBackupJobParams{value: val, isSet: true}
}

func (v NullableSqlBackupJobParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSqlBackupJobParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


