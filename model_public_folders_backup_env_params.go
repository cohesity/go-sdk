/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// PublicFoldersBackupEnvParams Message to capture any additional backup params for Public Folders within Office365 environment.
type PublicFoldersBackupEnvParams struct {
	FilteringPolicy *FilteringPolicyProto `json:"filteringPolicy,omitempty"`
}

// NewPublicFoldersBackupEnvParams instantiates a new PublicFoldersBackupEnvParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicFoldersBackupEnvParams() *PublicFoldersBackupEnvParams {
	this := PublicFoldersBackupEnvParams{}
	return &this
}

// NewPublicFoldersBackupEnvParamsWithDefaults instantiates a new PublicFoldersBackupEnvParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicFoldersBackupEnvParamsWithDefaults() *PublicFoldersBackupEnvParams {
	this := PublicFoldersBackupEnvParams{}
	return &this
}

// GetFilteringPolicy returns the FilteringPolicy field value if set, zero value otherwise.
func (o *PublicFoldersBackupEnvParams) GetFilteringPolicy() FilteringPolicyProto {
	if o == nil || o.FilteringPolicy == nil {
		var ret FilteringPolicyProto
		return ret
	}
	return *o.FilteringPolicy
}

// GetFilteringPolicyOk returns a tuple with the FilteringPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicFoldersBackupEnvParams) GetFilteringPolicyOk() (*FilteringPolicyProto, bool) {
	if o == nil || o.FilteringPolicy == nil {
		return nil, false
	}
	return o.FilteringPolicy, true
}

// HasFilteringPolicy returns a boolean if a field has been set.
func (o *PublicFoldersBackupEnvParams) HasFilteringPolicy() bool {
	if o != nil && o.FilteringPolicy != nil {
		return true
	}

	return false
}

// SetFilteringPolicy gets a reference to the given FilteringPolicyProto and assigns it to the FilteringPolicy field.
func (o *PublicFoldersBackupEnvParams) SetFilteringPolicy(v FilteringPolicyProto) {
	o.FilteringPolicy = &v
}

func (o PublicFoldersBackupEnvParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FilteringPolicy != nil {
		toSerialize["filteringPolicy"] = o.FilteringPolicy
	}
	return json.Marshal(toSerialize)
}

type NullablePublicFoldersBackupEnvParams struct {
	value *PublicFoldersBackupEnvParams
	isSet bool
}

func (v NullablePublicFoldersBackupEnvParams) Get() *PublicFoldersBackupEnvParams {
	return v.value
}

func (v *NullablePublicFoldersBackupEnvParams) Set(val *PublicFoldersBackupEnvParams) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicFoldersBackupEnvParams) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicFoldersBackupEnvParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicFoldersBackupEnvParams(val *PublicFoldersBackupEnvParams) *NullablePublicFoldersBackupEnvParams {
	return &NullablePublicFoldersBackupEnvParams{value: val, isSet: true}
}

func (v NullablePublicFoldersBackupEnvParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicFoldersBackupEnvParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


