/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// AnalyseJarArg API to analyse a JAR file. This JAR may contain multiple mappers/reducers. Jar will be analysed and list of all mappers/reducers found in the jar will be returned.
type AnalyseJarArg struct {
	// Name of the JAR to be analysed.
	JarName NullableString `json:"jarName,omitempty"`
	// Path of the jar file.
	JarPath NullableString `json:"jarPath,omitempty"`
	JarRelativePath NullableString `json:"jarRelativePath,omitempty"`
	// If this flag is true, then also save mapper and reducers in scribe.
	SaveEntities NullableBool `json:"saveEntities,omitempty"`
}

// NewAnalyseJarArg instantiates a new AnalyseJarArg object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnalyseJarArg() *AnalyseJarArg {
	this := AnalyseJarArg{}
	return &this
}

// NewAnalyseJarArgWithDefaults instantiates a new AnalyseJarArg object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnalyseJarArgWithDefaults() *AnalyseJarArg {
	this := AnalyseJarArg{}
	return &this
}

// GetJarName returns the JarName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AnalyseJarArg) GetJarName() string {
	if o == nil || o.JarName.Get() == nil {
		var ret string
		return ret
	}
	return *o.JarName.Get()
}

// GetJarNameOk returns a tuple with the JarName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AnalyseJarArg) GetJarNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.JarName.Get(), o.JarName.IsSet()
}

// HasJarName returns a boolean if a field has been set.
func (o *AnalyseJarArg) HasJarName() bool {
	if o != nil && o.JarName.IsSet() {
		return true
	}

	return false
}

// SetJarName gets a reference to the given NullableString and assigns it to the JarName field.
func (o *AnalyseJarArg) SetJarName(v string) {
	o.JarName.Set(&v)
}
// SetJarNameNil sets the value for JarName to be an explicit nil
func (o *AnalyseJarArg) SetJarNameNil() {
	o.JarName.Set(nil)
}

// UnsetJarName ensures that no value is present for JarName, not even an explicit nil
func (o *AnalyseJarArg) UnsetJarName() {
	o.JarName.Unset()
}

// GetJarPath returns the JarPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AnalyseJarArg) GetJarPath() string {
	if o == nil || o.JarPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.JarPath.Get()
}

// GetJarPathOk returns a tuple with the JarPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AnalyseJarArg) GetJarPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.JarPath.Get(), o.JarPath.IsSet()
}

// HasJarPath returns a boolean if a field has been set.
func (o *AnalyseJarArg) HasJarPath() bool {
	if o != nil && o.JarPath.IsSet() {
		return true
	}

	return false
}

// SetJarPath gets a reference to the given NullableString and assigns it to the JarPath field.
func (o *AnalyseJarArg) SetJarPath(v string) {
	o.JarPath.Set(&v)
}
// SetJarPathNil sets the value for JarPath to be an explicit nil
func (o *AnalyseJarArg) SetJarPathNil() {
	o.JarPath.Set(nil)
}

// UnsetJarPath ensures that no value is present for JarPath, not even an explicit nil
func (o *AnalyseJarArg) UnsetJarPath() {
	o.JarPath.Unset()
}

// GetJarRelativePath returns the JarRelativePath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AnalyseJarArg) GetJarRelativePath() string {
	if o == nil || o.JarRelativePath.Get() == nil {
		var ret string
		return ret
	}
	return *o.JarRelativePath.Get()
}

// GetJarRelativePathOk returns a tuple with the JarRelativePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AnalyseJarArg) GetJarRelativePathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.JarRelativePath.Get(), o.JarRelativePath.IsSet()
}

// HasJarRelativePath returns a boolean if a field has been set.
func (o *AnalyseJarArg) HasJarRelativePath() bool {
	if o != nil && o.JarRelativePath.IsSet() {
		return true
	}

	return false
}

// SetJarRelativePath gets a reference to the given NullableString and assigns it to the JarRelativePath field.
func (o *AnalyseJarArg) SetJarRelativePath(v string) {
	o.JarRelativePath.Set(&v)
}
// SetJarRelativePathNil sets the value for JarRelativePath to be an explicit nil
func (o *AnalyseJarArg) SetJarRelativePathNil() {
	o.JarRelativePath.Set(nil)
}

// UnsetJarRelativePath ensures that no value is present for JarRelativePath, not even an explicit nil
func (o *AnalyseJarArg) UnsetJarRelativePath() {
	o.JarRelativePath.Unset()
}

// GetSaveEntities returns the SaveEntities field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AnalyseJarArg) GetSaveEntities() bool {
	if o == nil || o.SaveEntities.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SaveEntities.Get()
}

// GetSaveEntitiesOk returns a tuple with the SaveEntities field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AnalyseJarArg) GetSaveEntitiesOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SaveEntities.Get(), o.SaveEntities.IsSet()
}

// HasSaveEntities returns a boolean if a field has been set.
func (o *AnalyseJarArg) HasSaveEntities() bool {
	if o != nil && o.SaveEntities.IsSet() {
		return true
	}

	return false
}

// SetSaveEntities gets a reference to the given NullableBool and assigns it to the SaveEntities field.
func (o *AnalyseJarArg) SetSaveEntities(v bool) {
	o.SaveEntities.Set(&v)
}
// SetSaveEntitiesNil sets the value for SaveEntities to be an explicit nil
func (o *AnalyseJarArg) SetSaveEntitiesNil() {
	o.SaveEntities.Set(nil)
}

// UnsetSaveEntities ensures that no value is present for SaveEntities, not even an explicit nil
func (o *AnalyseJarArg) UnsetSaveEntities() {
	o.SaveEntities.Unset()
}

func (o AnalyseJarArg) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.JarName.IsSet() {
		toSerialize["jarName"] = o.JarName.Get()
	}
	if o.JarPath.IsSet() {
		toSerialize["jarPath"] = o.JarPath.Get()
	}
	if o.JarRelativePath.IsSet() {
		toSerialize["jarRelativePath"] = o.JarRelativePath.Get()
	}
	if o.SaveEntities.IsSet() {
		toSerialize["saveEntities"] = o.SaveEntities.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAnalyseJarArg struct {
	value *AnalyseJarArg
	isSet bool
}

func (v NullableAnalyseJarArg) Get() *AnalyseJarArg {
	return v.value
}

func (v *NullableAnalyseJarArg) Set(val *AnalyseJarArg) {
	v.value = val
	v.isSet = true
}

func (v NullableAnalyseJarArg) IsSet() bool {
	return v.isSet
}

func (v *NullableAnalyseJarArg) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnalyseJarArg(val *AnalyseJarArg) *NullableAnalyseJarArg {
	return &NullableAnalyseJarArg{value: val, isSet: true}
}

func (v NullableAnalyseJarArg) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnalyseJarArg) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


