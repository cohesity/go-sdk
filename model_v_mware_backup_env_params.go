/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// VMwareBackupEnvParams Message to capture any additional backup params for a VMware environment.
type VMwareBackupEnvParams struct {
	// Whether to fallback to take a crash-consistent snapshot incase taking an app-consistent snapshot fails.
	AllowCrashConsistentSnapshot NullableBool `json:"allowCrashConsistentSnapshot,omitempty"`
	// Whether to fallback to use NBDSSL transport for backup in case using SAN transport backup fails.
	AllowNbdsslTransportFallback NullableBool `json:"allowNbdsslTransportFallback,omitempty"`
	// Physical RDM disks cannot be backed up using VADP. By default the backups of such VMs will fail. If this is set to true, then such VMs in this backup job will be backed up by excluding the physical RDM disks.
	AllowVmsWithPhysicalRdmDisks NullableBool `json:"allowVmsWithPhysicalRdmDisks,omitempty"`
	// List of Virtual Disk(s) to be excluded from the backup job. These disks will be excluded for all VMs in this environment unless overriden by the disk exclusion list from BackupSourceParams.VMwareBackupSourceParams.
	VmwareDiskExclusionInfo []VMwareDiskExclusionProto `json:"vmwareDiskExclusionInfo,omitempty"`
}

// NewVMwareBackupEnvParams instantiates a new VMwareBackupEnvParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVMwareBackupEnvParams() *VMwareBackupEnvParams {
	this := VMwareBackupEnvParams{}
	return &this
}

// NewVMwareBackupEnvParamsWithDefaults instantiates a new VMwareBackupEnvParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVMwareBackupEnvParamsWithDefaults() *VMwareBackupEnvParams {
	this := VMwareBackupEnvParams{}
	return &this
}

// GetAllowCrashConsistentSnapshot returns the AllowCrashConsistentSnapshot field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VMwareBackupEnvParams) GetAllowCrashConsistentSnapshot() bool {
	if o == nil || o.AllowCrashConsistentSnapshot.Get() == nil {
		var ret bool
		return ret
	}
	return *o.AllowCrashConsistentSnapshot.Get()
}

// GetAllowCrashConsistentSnapshotOk returns a tuple with the AllowCrashConsistentSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VMwareBackupEnvParams) GetAllowCrashConsistentSnapshotOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AllowCrashConsistentSnapshot.Get(), o.AllowCrashConsistentSnapshot.IsSet()
}

// HasAllowCrashConsistentSnapshot returns a boolean if a field has been set.
func (o *VMwareBackupEnvParams) HasAllowCrashConsistentSnapshot() bool {
	if o != nil && o.AllowCrashConsistentSnapshot.IsSet() {
		return true
	}

	return false
}

// SetAllowCrashConsistentSnapshot gets a reference to the given NullableBool and assigns it to the AllowCrashConsistentSnapshot field.
func (o *VMwareBackupEnvParams) SetAllowCrashConsistentSnapshot(v bool) {
	o.AllowCrashConsistentSnapshot.Set(&v)
}
// SetAllowCrashConsistentSnapshotNil sets the value for AllowCrashConsistentSnapshot to be an explicit nil
func (o *VMwareBackupEnvParams) SetAllowCrashConsistentSnapshotNil() {
	o.AllowCrashConsistentSnapshot.Set(nil)
}

// UnsetAllowCrashConsistentSnapshot ensures that no value is present for AllowCrashConsistentSnapshot, not even an explicit nil
func (o *VMwareBackupEnvParams) UnsetAllowCrashConsistentSnapshot() {
	o.AllowCrashConsistentSnapshot.Unset()
}

// GetAllowNbdsslTransportFallback returns the AllowNbdsslTransportFallback field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VMwareBackupEnvParams) GetAllowNbdsslTransportFallback() bool {
	if o == nil || o.AllowNbdsslTransportFallback.Get() == nil {
		var ret bool
		return ret
	}
	return *o.AllowNbdsslTransportFallback.Get()
}

// GetAllowNbdsslTransportFallbackOk returns a tuple with the AllowNbdsslTransportFallback field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VMwareBackupEnvParams) GetAllowNbdsslTransportFallbackOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AllowNbdsslTransportFallback.Get(), o.AllowNbdsslTransportFallback.IsSet()
}

// HasAllowNbdsslTransportFallback returns a boolean if a field has been set.
func (o *VMwareBackupEnvParams) HasAllowNbdsslTransportFallback() bool {
	if o != nil && o.AllowNbdsslTransportFallback.IsSet() {
		return true
	}

	return false
}

// SetAllowNbdsslTransportFallback gets a reference to the given NullableBool and assigns it to the AllowNbdsslTransportFallback field.
func (o *VMwareBackupEnvParams) SetAllowNbdsslTransportFallback(v bool) {
	o.AllowNbdsslTransportFallback.Set(&v)
}
// SetAllowNbdsslTransportFallbackNil sets the value for AllowNbdsslTransportFallback to be an explicit nil
func (o *VMwareBackupEnvParams) SetAllowNbdsslTransportFallbackNil() {
	o.AllowNbdsslTransportFallback.Set(nil)
}

// UnsetAllowNbdsslTransportFallback ensures that no value is present for AllowNbdsslTransportFallback, not even an explicit nil
func (o *VMwareBackupEnvParams) UnsetAllowNbdsslTransportFallback() {
	o.AllowNbdsslTransportFallback.Unset()
}

// GetAllowVmsWithPhysicalRdmDisks returns the AllowVmsWithPhysicalRdmDisks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VMwareBackupEnvParams) GetAllowVmsWithPhysicalRdmDisks() bool {
	if o == nil || o.AllowVmsWithPhysicalRdmDisks.Get() == nil {
		var ret bool
		return ret
	}
	return *o.AllowVmsWithPhysicalRdmDisks.Get()
}

// GetAllowVmsWithPhysicalRdmDisksOk returns a tuple with the AllowVmsWithPhysicalRdmDisks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VMwareBackupEnvParams) GetAllowVmsWithPhysicalRdmDisksOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AllowVmsWithPhysicalRdmDisks.Get(), o.AllowVmsWithPhysicalRdmDisks.IsSet()
}

// HasAllowVmsWithPhysicalRdmDisks returns a boolean if a field has been set.
func (o *VMwareBackupEnvParams) HasAllowVmsWithPhysicalRdmDisks() bool {
	if o != nil && o.AllowVmsWithPhysicalRdmDisks.IsSet() {
		return true
	}

	return false
}

// SetAllowVmsWithPhysicalRdmDisks gets a reference to the given NullableBool and assigns it to the AllowVmsWithPhysicalRdmDisks field.
func (o *VMwareBackupEnvParams) SetAllowVmsWithPhysicalRdmDisks(v bool) {
	o.AllowVmsWithPhysicalRdmDisks.Set(&v)
}
// SetAllowVmsWithPhysicalRdmDisksNil sets the value for AllowVmsWithPhysicalRdmDisks to be an explicit nil
func (o *VMwareBackupEnvParams) SetAllowVmsWithPhysicalRdmDisksNil() {
	o.AllowVmsWithPhysicalRdmDisks.Set(nil)
}

// UnsetAllowVmsWithPhysicalRdmDisks ensures that no value is present for AllowVmsWithPhysicalRdmDisks, not even an explicit nil
func (o *VMwareBackupEnvParams) UnsetAllowVmsWithPhysicalRdmDisks() {
	o.AllowVmsWithPhysicalRdmDisks.Unset()
}

// GetVmwareDiskExclusionInfo returns the VmwareDiskExclusionInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VMwareBackupEnvParams) GetVmwareDiskExclusionInfo() []VMwareDiskExclusionProto {
	if o == nil  {
		var ret []VMwareDiskExclusionProto
		return ret
	}
	return o.VmwareDiskExclusionInfo
}

// GetVmwareDiskExclusionInfoOk returns a tuple with the VmwareDiskExclusionInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VMwareBackupEnvParams) GetVmwareDiskExclusionInfoOk() (*[]VMwareDiskExclusionProto, bool) {
	if o == nil || o.VmwareDiskExclusionInfo == nil {
		return nil, false
	}
	return &o.VmwareDiskExclusionInfo, true
}

// HasVmwareDiskExclusionInfo returns a boolean if a field has been set.
func (o *VMwareBackupEnvParams) HasVmwareDiskExclusionInfo() bool {
	if o != nil && o.VmwareDiskExclusionInfo != nil {
		return true
	}

	return false
}

// SetVmwareDiskExclusionInfo gets a reference to the given []VMwareDiskExclusionProto and assigns it to the VmwareDiskExclusionInfo field.
func (o *VMwareBackupEnvParams) SetVmwareDiskExclusionInfo(v []VMwareDiskExclusionProto) {
	o.VmwareDiskExclusionInfo = v
}

func (o VMwareBackupEnvParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowCrashConsistentSnapshot.IsSet() {
		toSerialize["allowCrashConsistentSnapshot"] = o.AllowCrashConsistentSnapshot.Get()
	}
	if o.AllowNbdsslTransportFallback.IsSet() {
		toSerialize["allowNbdsslTransportFallback"] = o.AllowNbdsslTransportFallback.Get()
	}
	if o.AllowVmsWithPhysicalRdmDisks.IsSet() {
		toSerialize["allowVmsWithPhysicalRdmDisks"] = o.AllowVmsWithPhysicalRdmDisks.Get()
	}
	if o.VmwareDiskExclusionInfo != nil {
		toSerialize["vmwareDiskExclusionInfo"] = o.VmwareDiskExclusionInfo
	}
	return json.Marshal(toSerialize)
}

type NullableVMwareBackupEnvParams struct {
	value *VMwareBackupEnvParams
	isSet bool
}

func (v NullableVMwareBackupEnvParams) Get() *VMwareBackupEnvParams {
	return v.value
}

func (v *NullableVMwareBackupEnvParams) Set(val *VMwareBackupEnvParams) {
	v.value = val
	v.isSet = true
}

func (v NullableVMwareBackupEnvParams) IsSet() bool {
	return v.isSet
}

func (v *NullableVMwareBackupEnvParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVMwareBackupEnvParams(val *VMwareBackupEnvParams) *NullableVMwareBackupEnvParams {
	return &NullableVMwareBackupEnvParams{value: val, isSet: true}
}

func (v NullableVMwareBackupEnvParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVMwareBackupEnvParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


