/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// LogicalVolume Specifies attributes for a kLVM (Linux) or kLDM (Windows) filesystem.
type LogicalVolume struct {
	DeviceRootNode *DeviceTreeDetails `json:"deviceRootNode,omitempty"`
	// Specifies the group name of the logical volume.
	GroupName NullableString `json:"groupName,omitempty"`
	// Specifies the group uuid of the logical volume.
	GroupUuid NullableString `json:"groupUuid,omitempty"`
	// Specifies the name of the logical volume.
	Name NullableString `json:"name,omitempty"`
	// Specifies the uuid of the logical volume.
	Uuid NullableString `json:"uuid,omitempty"`
}

// NewLogicalVolume instantiates a new LogicalVolume object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogicalVolume() *LogicalVolume {
	this := LogicalVolume{}
	return &this
}

// NewLogicalVolumeWithDefaults instantiates a new LogicalVolume object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogicalVolumeWithDefaults() *LogicalVolume {
	this := LogicalVolume{}
	return &this
}

// GetDeviceRootNode returns the DeviceRootNode field value if set, zero value otherwise.
func (o *LogicalVolume) GetDeviceRootNode() DeviceTreeDetails {
	if o == nil || o.DeviceRootNode == nil {
		var ret DeviceTreeDetails
		return ret
	}
	return *o.DeviceRootNode
}

// GetDeviceRootNodeOk returns a tuple with the DeviceRootNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalVolume) GetDeviceRootNodeOk() (*DeviceTreeDetails, bool) {
	if o == nil || o.DeviceRootNode == nil {
		return nil, false
	}
	return o.DeviceRootNode, true
}

// HasDeviceRootNode returns a boolean if a field has been set.
func (o *LogicalVolume) HasDeviceRootNode() bool {
	if o != nil && o.DeviceRootNode != nil {
		return true
	}

	return false
}

// SetDeviceRootNode gets a reference to the given DeviceTreeDetails and assigns it to the DeviceRootNode field.
func (o *LogicalVolume) SetDeviceRootNode(v DeviceTreeDetails) {
	o.DeviceRootNode = &v
}

// GetGroupName returns the GroupName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LogicalVolume) GetGroupName() string {
	if o == nil || o.GroupName.Get() == nil {
		var ret string
		return ret
	}
	return *o.GroupName.Get()
}

// GetGroupNameOk returns a tuple with the GroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LogicalVolume) GetGroupNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.GroupName.Get(), o.GroupName.IsSet()
}

// HasGroupName returns a boolean if a field has been set.
func (o *LogicalVolume) HasGroupName() bool {
	if o != nil && o.GroupName.IsSet() {
		return true
	}

	return false
}

// SetGroupName gets a reference to the given NullableString and assigns it to the GroupName field.
func (o *LogicalVolume) SetGroupName(v string) {
	o.GroupName.Set(&v)
}
// SetGroupNameNil sets the value for GroupName to be an explicit nil
func (o *LogicalVolume) SetGroupNameNil() {
	o.GroupName.Set(nil)
}

// UnsetGroupName ensures that no value is present for GroupName, not even an explicit nil
func (o *LogicalVolume) UnsetGroupName() {
	o.GroupName.Unset()
}

// GetGroupUuid returns the GroupUuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LogicalVolume) GetGroupUuid() string {
	if o == nil || o.GroupUuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.GroupUuid.Get()
}

// GetGroupUuidOk returns a tuple with the GroupUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LogicalVolume) GetGroupUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.GroupUuid.Get(), o.GroupUuid.IsSet()
}

// HasGroupUuid returns a boolean if a field has been set.
func (o *LogicalVolume) HasGroupUuid() bool {
	if o != nil && o.GroupUuid.IsSet() {
		return true
	}

	return false
}

// SetGroupUuid gets a reference to the given NullableString and assigns it to the GroupUuid field.
func (o *LogicalVolume) SetGroupUuid(v string) {
	o.GroupUuid.Set(&v)
}
// SetGroupUuidNil sets the value for GroupUuid to be an explicit nil
func (o *LogicalVolume) SetGroupUuidNil() {
	o.GroupUuid.Set(nil)
}

// UnsetGroupUuid ensures that no value is present for GroupUuid, not even an explicit nil
func (o *LogicalVolume) UnsetGroupUuid() {
	o.GroupUuid.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LogicalVolume) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LogicalVolume) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *LogicalVolume) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *LogicalVolume) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *LogicalVolume) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *LogicalVolume) UnsetName() {
	o.Name.Unset()
}

// GetUuid returns the Uuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LogicalVolume) GetUuid() string {
	if o == nil || o.Uuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.Uuid.Get()
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LogicalVolume) GetUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Uuid.Get(), o.Uuid.IsSet()
}

// HasUuid returns a boolean if a field has been set.
func (o *LogicalVolume) HasUuid() bool {
	if o != nil && o.Uuid.IsSet() {
		return true
	}

	return false
}

// SetUuid gets a reference to the given NullableString and assigns it to the Uuid field.
func (o *LogicalVolume) SetUuid(v string) {
	o.Uuid.Set(&v)
}
// SetUuidNil sets the value for Uuid to be an explicit nil
func (o *LogicalVolume) SetUuidNil() {
	o.Uuid.Set(nil)
}

// UnsetUuid ensures that no value is present for Uuid, not even an explicit nil
func (o *LogicalVolume) UnsetUuid() {
	o.Uuid.Unset()
}

func (o LogicalVolume) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DeviceRootNode != nil {
		toSerialize["deviceRootNode"] = o.DeviceRootNode
	}
	if o.GroupName.IsSet() {
		toSerialize["groupName"] = o.GroupName.Get()
	}
	if o.GroupUuid.IsSet() {
		toSerialize["groupUuid"] = o.GroupUuid.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Uuid.IsSet() {
		toSerialize["uuid"] = o.Uuid.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableLogicalVolume struct {
	value *LogicalVolume
	isSet bool
}

func (v NullableLogicalVolume) Get() *LogicalVolume {
	return v.value
}

func (v *NullableLogicalVolume) Set(val *LogicalVolume) {
	v.value = val
	v.isSet = true
}

func (v NullableLogicalVolume) IsSet() bool {
	return v.isSet
}

func (v *NullableLogicalVolume) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogicalVolume(val *LogicalVolume) *NullableLogicalVolume {
	return &NullableLogicalVolume{value: val, isSet: true}
}

func (v NullableLogicalVolume) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogicalVolume) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


