/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// LockRange struct for LockRange
type LockRange struct {
	IsExclusive NullableBool `json:"isExclusive,omitempty"`
	Length NullableInt32 `json:"length,omitempty"`
	Offset NullableInt32 `json:"offset,omitempty"`
}

// NewLockRange instantiates a new LockRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLockRange() *LockRange {
	this := LockRange{}
	return &this
}

// NewLockRangeWithDefaults instantiates a new LockRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLockRangeWithDefaults() *LockRange {
	this := LockRange{}
	return &this
}

// GetIsExclusive returns the IsExclusive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LockRange) GetIsExclusive() bool {
	if o == nil || o.IsExclusive.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsExclusive.Get()
}

// GetIsExclusiveOk returns a tuple with the IsExclusive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LockRange) GetIsExclusiveOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsExclusive.Get(), o.IsExclusive.IsSet()
}

// HasIsExclusive returns a boolean if a field has been set.
func (o *LockRange) HasIsExclusive() bool {
	if o != nil && o.IsExclusive.IsSet() {
		return true
	}

	return false
}

// SetIsExclusive gets a reference to the given NullableBool and assigns it to the IsExclusive field.
func (o *LockRange) SetIsExclusive(v bool) {
	o.IsExclusive.Set(&v)
}
// SetIsExclusiveNil sets the value for IsExclusive to be an explicit nil
func (o *LockRange) SetIsExclusiveNil() {
	o.IsExclusive.Set(nil)
}

// UnsetIsExclusive ensures that no value is present for IsExclusive, not even an explicit nil
func (o *LockRange) UnsetIsExclusive() {
	o.IsExclusive.Unset()
}

// GetLength returns the Length field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LockRange) GetLength() int32 {
	if o == nil || o.Length.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Length.Get()
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LockRange) GetLengthOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Length.Get(), o.Length.IsSet()
}

// HasLength returns a boolean if a field has been set.
func (o *LockRange) HasLength() bool {
	if o != nil && o.Length.IsSet() {
		return true
	}

	return false
}

// SetLength gets a reference to the given NullableInt32 and assigns it to the Length field.
func (o *LockRange) SetLength(v int32) {
	o.Length.Set(&v)
}
// SetLengthNil sets the value for Length to be an explicit nil
func (o *LockRange) SetLengthNil() {
	o.Length.Set(nil)
}

// UnsetLength ensures that no value is present for Length, not even an explicit nil
func (o *LockRange) UnsetLength() {
	o.Length.Unset()
}

// GetOffset returns the Offset field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LockRange) GetOffset() int32 {
	if o == nil || o.Offset.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Offset.Get()
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LockRange) GetOffsetOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Offset.Get(), o.Offset.IsSet()
}

// HasOffset returns a boolean if a field has been set.
func (o *LockRange) HasOffset() bool {
	if o != nil && o.Offset.IsSet() {
		return true
	}

	return false
}

// SetOffset gets a reference to the given NullableInt32 and assigns it to the Offset field.
func (o *LockRange) SetOffset(v int32) {
	o.Offset.Set(&v)
}
// SetOffsetNil sets the value for Offset to be an explicit nil
func (o *LockRange) SetOffsetNil() {
	o.Offset.Set(nil)
}

// UnsetOffset ensures that no value is present for Offset, not even an explicit nil
func (o *LockRange) UnsetOffset() {
	o.Offset.Unset()
}

func (o LockRange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsExclusive.IsSet() {
		toSerialize["isExclusive"] = o.IsExclusive.Get()
	}
	if o.Length.IsSet() {
		toSerialize["length"] = o.Length.Get()
	}
	if o.Offset.IsSet() {
		toSerialize["offset"] = o.Offset.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableLockRange struct {
	value *LockRange
	isSet bool
}

func (v NullableLockRange) Get() *LockRange {
	return v.value
}

func (v *NullableLockRange) Set(val *LockRange) {
	v.value = val
	v.isSet = true
}

func (v NullableLockRange) IsSet() bool {
	return v.isSet
}

func (v *NullableLockRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLockRange(val *LockRange) *NullableLockRange {
	return &NullableLockRange{value: val, isSet: true}
}

func (v NullableLockRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLockRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


