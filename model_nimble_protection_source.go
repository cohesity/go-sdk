/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// NimbleProtectionSource Specifies a Protection Source in a Nimble environment.
type NimbleProtectionSource struct {
	// Specifies a unique name of the Protection Source
	Name NullableString `json:"name,omitempty"`
	StorageArray *SanStorageArray `json:"storageArray,omitempty"`
	// Specifies the type of managed Object in a SAN/Nimble Protection Source like a kStorageArray or kVolume. Examples of SAN Objects include 'kStorageArray' and 'kVolume'. 'kStorageArray' indicates that entire SAN storage array is being protected. 'kVolume' indicates that volume within the array is being protected.
	Type NullableString `json:"type,omitempty"`
	Volume *SanVolume `json:"volume,omitempty"`
}

// NewNimbleProtectionSource instantiates a new NimbleProtectionSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNimbleProtectionSource() *NimbleProtectionSource {
	this := NimbleProtectionSource{}
	return &this
}

// NewNimbleProtectionSourceWithDefaults instantiates a new NimbleProtectionSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNimbleProtectionSourceWithDefaults() *NimbleProtectionSource {
	this := NimbleProtectionSource{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NimbleProtectionSource) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NimbleProtectionSource) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *NimbleProtectionSource) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *NimbleProtectionSource) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *NimbleProtectionSource) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *NimbleProtectionSource) UnsetName() {
	o.Name.Unset()
}

// GetStorageArray returns the StorageArray field value if set, zero value otherwise.
func (o *NimbleProtectionSource) GetStorageArray() SanStorageArray {
	if o == nil || o.StorageArray == nil {
		var ret SanStorageArray
		return ret
	}
	return *o.StorageArray
}

// GetStorageArrayOk returns a tuple with the StorageArray field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NimbleProtectionSource) GetStorageArrayOk() (*SanStorageArray, bool) {
	if o == nil || o.StorageArray == nil {
		return nil, false
	}
	return o.StorageArray, true
}

// HasStorageArray returns a boolean if a field has been set.
func (o *NimbleProtectionSource) HasStorageArray() bool {
	if o != nil && o.StorageArray != nil {
		return true
	}

	return false
}

// SetStorageArray gets a reference to the given SanStorageArray and assigns it to the StorageArray field.
func (o *NimbleProtectionSource) SetStorageArray(v SanStorageArray) {
	o.StorageArray = &v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NimbleProtectionSource) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NimbleProtectionSource) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *NimbleProtectionSource) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *NimbleProtectionSource) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *NimbleProtectionSource) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *NimbleProtectionSource) UnsetType() {
	o.Type.Unset()
}

// GetVolume returns the Volume field value if set, zero value otherwise.
func (o *NimbleProtectionSource) GetVolume() SanVolume {
	if o == nil || o.Volume == nil {
		var ret SanVolume
		return ret
	}
	return *o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NimbleProtectionSource) GetVolumeOk() (*SanVolume, bool) {
	if o == nil || o.Volume == nil {
		return nil, false
	}
	return o.Volume, true
}

// HasVolume returns a boolean if a field has been set.
func (o *NimbleProtectionSource) HasVolume() bool {
	if o != nil && o.Volume != nil {
		return true
	}

	return false
}

// SetVolume gets a reference to the given SanVolume and assigns it to the Volume field.
func (o *NimbleProtectionSource) SetVolume(v SanVolume) {
	o.Volume = &v
}

func (o NimbleProtectionSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.StorageArray != nil {
		toSerialize["storageArray"] = o.StorageArray
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Volume != nil {
		toSerialize["volume"] = o.Volume
	}
	return json.Marshal(toSerialize)
}

type NullableNimbleProtectionSource struct {
	value *NimbleProtectionSource
	isSet bool
}

func (v NullableNimbleProtectionSource) Get() *NimbleProtectionSource {
	return v.value
}

func (v *NullableNimbleProtectionSource) Set(val *NimbleProtectionSource) {
	v.value = val
	v.isSet = true
}

func (v NullableNimbleProtectionSource) IsSet() bool {
	return v.isSet
}

func (v *NullableNimbleProtectionSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNimbleProtectionSource(val *NimbleProtectionSource) *NullableNimbleProtectionSource {
	return &NullableNimbleProtectionSource{value: val, isSet: true}
}

func (v NullableNimbleProtectionSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNimbleProtectionSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


