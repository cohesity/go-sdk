/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// MetricValue Specifies one data point of a metric.
type MetricValue struct {
	// Specifies the metric name.
	MetricName NullableString `json:"metricName,omitempty"`
	// Specifies the creation time of a data point as a Unix epoch Timestamp (in milliseconds).
	TimestampMsecs NullableInt64 `json:"timestampMsecs,omitempty"`
	Value *Value `json:"value,omitempty"`
}

// NewMetricValue instantiates a new MetricValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricValue() *MetricValue {
	this := MetricValue{}
	return &this
}

// NewMetricValueWithDefaults instantiates a new MetricValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricValueWithDefaults() *MetricValue {
	this := MetricValue{}
	return &this
}

// GetMetricName returns the MetricName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricValue) GetMetricName() string {
	if o == nil || o.MetricName.Get() == nil {
		var ret string
		return ret
	}
	return *o.MetricName.Get()
}

// GetMetricNameOk returns a tuple with the MetricName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricValue) GetMetricNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MetricName.Get(), o.MetricName.IsSet()
}

// HasMetricName returns a boolean if a field has been set.
func (o *MetricValue) HasMetricName() bool {
	if o != nil && o.MetricName.IsSet() {
		return true
	}

	return false
}

// SetMetricName gets a reference to the given NullableString and assigns it to the MetricName field.
func (o *MetricValue) SetMetricName(v string) {
	o.MetricName.Set(&v)
}
// SetMetricNameNil sets the value for MetricName to be an explicit nil
func (o *MetricValue) SetMetricNameNil() {
	o.MetricName.Set(nil)
}

// UnsetMetricName ensures that no value is present for MetricName, not even an explicit nil
func (o *MetricValue) UnsetMetricName() {
	o.MetricName.Unset()
}

// GetTimestampMsecs returns the TimestampMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetricValue) GetTimestampMsecs() int64 {
	if o == nil || o.TimestampMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TimestampMsecs.Get()
}

// GetTimestampMsecsOk returns a tuple with the TimestampMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetricValue) GetTimestampMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TimestampMsecs.Get(), o.TimestampMsecs.IsSet()
}

// HasTimestampMsecs returns a boolean if a field has been set.
func (o *MetricValue) HasTimestampMsecs() bool {
	if o != nil && o.TimestampMsecs.IsSet() {
		return true
	}

	return false
}

// SetTimestampMsecs gets a reference to the given NullableInt64 and assigns it to the TimestampMsecs field.
func (o *MetricValue) SetTimestampMsecs(v int64) {
	o.TimestampMsecs.Set(&v)
}
// SetTimestampMsecsNil sets the value for TimestampMsecs to be an explicit nil
func (o *MetricValue) SetTimestampMsecsNil() {
	o.TimestampMsecs.Set(nil)
}

// UnsetTimestampMsecs ensures that no value is present for TimestampMsecs, not even an explicit nil
func (o *MetricValue) UnsetTimestampMsecs() {
	o.TimestampMsecs.Unset()
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *MetricValue) GetValue() Value {
	if o == nil || o.Value == nil {
		var ret Value
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricValue) GetValueOk() (*Value, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *MetricValue) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given Value and assigns it to the Value field.
func (o *MetricValue) SetValue(v Value) {
	o.Value = &v
}

func (o MetricValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MetricName.IsSet() {
		toSerialize["metricName"] = o.MetricName.Get()
	}
	if o.TimestampMsecs.IsSet() {
		toSerialize["timestampMsecs"] = o.TimestampMsecs.Get()
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableMetricValue struct {
	value *MetricValue
	isSet bool
}

func (v NullableMetricValue) Get() *MetricValue {
	return v.value
}

func (v *NullableMetricValue) Set(val *MetricValue) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricValue) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricValue(val *MetricValue) *NullableMetricValue {
	return &NullableMetricValue{value: val, isSet: true}
}

func (v NullableMetricValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


