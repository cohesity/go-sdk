/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// BackupScript Specifies details about the pre and post backup scripts for 'kPhysical' jobs.
type BackupScript struct {
	// Specifies the script that should run for the Full (no CBT) backup schedule of a Remote Adapter 'kPuppeteer' Job. This field is mandatory if the Policy associated with this Job has a Full (no CBT) backup schedule and this is Remote Adapter 'kPuppeteer' Job.
	FullBackupScript NullableRemoteScriptPathAndParams `json:"fullBackupScript,omitempty"`
	// Specifies the script that should run for the CBT-based backup schedule of a Remote Adapter 'kPuppeteer' Job. A CBT-based backup schedule is utilizing Change Block Tracking when capturing Snapshots. This field is mandatory if the Policy associated with this Job has a CBT-based backup schedule and this is Remote Adapter 'kPuppeteer' Job.
	IncrementalBackupScript NullableRemoteScriptPathAndParams `json:"incrementalBackupScript,omitempty"`
	// Specifies the script that should run for the Log backup schedule of a Remote Adapter 'kPuppeteer' Job. This field is mandatory if the Policy associated with this Job has a Log backup schedule and this is Remote Adapter 'kPuppeteer' Job.
	LogBackupScript NullableRemoteScriptPathAndParams `json:"logBackupScript,omitempty"`
	// Specifies the remote host where the remote scripts are executed. This field must be set for Remote Adapter Jobs.
	RemoteHost NullableRemoteHost `json:"remoteHost,omitempty"`
	// Specifies the username that will be used to login to the remote host. For host type 'kLinux', it is expected that user has setup the password-less access. So only username field is required.
	Username NullableString `json:"username,omitempty"`
}

// NewBackupScript instantiates a new BackupScript object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupScript() *BackupScript {
	this := BackupScript{}
	return &this
}

// NewBackupScriptWithDefaults instantiates a new BackupScript object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupScriptWithDefaults() *BackupScript {
	this := BackupScript{}
	return &this
}

// GetFullBackupScript returns the FullBackupScript field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupScript) GetFullBackupScript() RemoteScriptPathAndParams {
	if o == nil || o.FullBackupScript.Get() == nil {
		var ret RemoteScriptPathAndParams
		return ret
	}
	return *o.FullBackupScript.Get()
}

// GetFullBackupScriptOk returns a tuple with the FullBackupScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupScript) GetFullBackupScriptOk() (*RemoteScriptPathAndParams, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FullBackupScript.Get(), o.FullBackupScript.IsSet()
}

// HasFullBackupScript returns a boolean if a field has been set.
func (o *BackupScript) HasFullBackupScript() bool {
	if o != nil && o.FullBackupScript.IsSet() {
		return true
	}

	return false
}

// SetFullBackupScript gets a reference to the given NullableRemoteScriptPathAndParams and assigns it to the FullBackupScript field.
func (o *BackupScript) SetFullBackupScript(v RemoteScriptPathAndParams) {
	o.FullBackupScript.Set(&v)
}
// SetFullBackupScriptNil sets the value for FullBackupScript to be an explicit nil
func (o *BackupScript) SetFullBackupScriptNil() {
	o.FullBackupScript.Set(nil)
}

// UnsetFullBackupScript ensures that no value is present for FullBackupScript, not even an explicit nil
func (o *BackupScript) UnsetFullBackupScript() {
	o.FullBackupScript.Unset()
}

// GetIncrementalBackupScript returns the IncrementalBackupScript field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupScript) GetIncrementalBackupScript() RemoteScriptPathAndParams {
	if o == nil || o.IncrementalBackupScript.Get() == nil {
		var ret RemoteScriptPathAndParams
		return ret
	}
	return *o.IncrementalBackupScript.Get()
}

// GetIncrementalBackupScriptOk returns a tuple with the IncrementalBackupScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupScript) GetIncrementalBackupScriptOk() (*RemoteScriptPathAndParams, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IncrementalBackupScript.Get(), o.IncrementalBackupScript.IsSet()
}

// HasIncrementalBackupScript returns a boolean if a field has been set.
func (o *BackupScript) HasIncrementalBackupScript() bool {
	if o != nil && o.IncrementalBackupScript.IsSet() {
		return true
	}

	return false
}

// SetIncrementalBackupScript gets a reference to the given NullableRemoteScriptPathAndParams and assigns it to the IncrementalBackupScript field.
func (o *BackupScript) SetIncrementalBackupScript(v RemoteScriptPathAndParams) {
	o.IncrementalBackupScript.Set(&v)
}
// SetIncrementalBackupScriptNil sets the value for IncrementalBackupScript to be an explicit nil
func (o *BackupScript) SetIncrementalBackupScriptNil() {
	o.IncrementalBackupScript.Set(nil)
}

// UnsetIncrementalBackupScript ensures that no value is present for IncrementalBackupScript, not even an explicit nil
func (o *BackupScript) UnsetIncrementalBackupScript() {
	o.IncrementalBackupScript.Unset()
}

// GetLogBackupScript returns the LogBackupScript field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupScript) GetLogBackupScript() RemoteScriptPathAndParams {
	if o == nil || o.LogBackupScript.Get() == nil {
		var ret RemoteScriptPathAndParams
		return ret
	}
	return *o.LogBackupScript.Get()
}

// GetLogBackupScriptOk returns a tuple with the LogBackupScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupScript) GetLogBackupScriptOk() (*RemoteScriptPathAndParams, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogBackupScript.Get(), o.LogBackupScript.IsSet()
}

// HasLogBackupScript returns a boolean if a field has been set.
func (o *BackupScript) HasLogBackupScript() bool {
	if o != nil && o.LogBackupScript.IsSet() {
		return true
	}

	return false
}

// SetLogBackupScript gets a reference to the given NullableRemoteScriptPathAndParams and assigns it to the LogBackupScript field.
func (o *BackupScript) SetLogBackupScript(v RemoteScriptPathAndParams) {
	o.LogBackupScript.Set(&v)
}
// SetLogBackupScriptNil sets the value for LogBackupScript to be an explicit nil
func (o *BackupScript) SetLogBackupScriptNil() {
	o.LogBackupScript.Set(nil)
}

// UnsetLogBackupScript ensures that no value is present for LogBackupScript, not even an explicit nil
func (o *BackupScript) UnsetLogBackupScript() {
	o.LogBackupScript.Unset()
}

// GetRemoteHost returns the RemoteHost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupScript) GetRemoteHost() RemoteHost {
	if o == nil || o.RemoteHost.Get() == nil {
		var ret RemoteHost
		return ret
	}
	return *o.RemoteHost.Get()
}

// GetRemoteHostOk returns a tuple with the RemoteHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupScript) GetRemoteHostOk() (*RemoteHost, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RemoteHost.Get(), o.RemoteHost.IsSet()
}

// HasRemoteHost returns a boolean if a field has been set.
func (o *BackupScript) HasRemoteHost() bool {
	if o != nil && o.RemoteHost.IsSet() {
		return true
	}

	return false
}

// SetRemoteHost gets a reference to the given NullableRemoteHost and assigns it to the RemoteHost field.
func (o *BackupScript) SetRemoteHost(v RemoteHost) {
	o.RemoteHost.Set(&v)
}
// SetRemoteHostNil sets the value for RemoteHost to be an explicit nil
func (o *BackupScript) SetRemoteHostNil() {
	o.RemoteHost.Set(nil)
}

// UnsetRemoteHost ensures that no value is present for RemoteHost, not even an explicit nil
func (o *BackupScript) UnsetRemoteHost() {
	o.RemoteHost.Unset()
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupScript) GetUsername() string {
	if o == nil || o.Username.Get() == nil {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupScript) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *BackupScript) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *BackupScript) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *BackupScript) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *BackupScript) UnsetUsername() {
	o.Username.Unset()
}

func (o BackupScript) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FullBackupScript.IsSet() {
		toSerialize["fullBackupScript"] = o.FullBackupScript.Get()
	}
	if o.IncrementalBackupScript.IsSet() {
		toSerialize["incrementalBackupScript"] = o.IncrementalBackupScript.Get()
	}
	if o.LogBackupScript.IsSet() {
		toSerialize["logBackupScript"] = o.LogBackupScript.Get()
	}
	if o.RemoteHost.IsSet() {
		toSerialize["remoteHost"] = o.RemoteHost.Get()
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableBackupScript struct {
	value *BackupScript
	isSet bool
}

func (v NullableBackupScript) Get() *BackupScript {
	return v.value
}

func (v *NullableBackupScript) Set(val *BackupScript) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupScript) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupScript) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupScript(val *BackupScript) *NullableBackupScript {
	return &NullableBackupScript{value: val, isSet: true}
}

func (v NullableBackupScript) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupScript) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


