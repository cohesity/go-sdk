/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// BlackoutPeriod Specifies a time range in a single day when new Job Runs of Protection Jobs cannot be started. For example, a Protection Job with a daily schedule could define a blackout period for Sunday.
type BlackoutPeriod struct {
	// Specified the Id for a snapshot copy policy. This is generated when the policy is created.
	Id NullableString `json:"Id,omitempty"`
	// Blackout Day.  Specifies a day in the week when no new Job Runs should be started such as 'kSunday'. If not set, the time range applies to all days. Specifies a day in a week such as 'kSunday', 'kMonday', etc.
	Day NullableString `json:"day,omitempty"`
	// Specifies the end time of the blackout time range.
	EndTime NullableTimeOfDay `json:"endTime,omitempty"`
	// Specifies the start time of the blackout time range.
	StartTime NullableTimeOfDay `json:"startTime,omitempty"`
}

// NewBlackoutPeriod instantiates a new BlackoutPeriod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlackoutPeriod() *BlackoutPeriod {
	this := BlackoutPeriod{}
	return &this
}

// NewBlackoutPeriodWithDefaults instantiates a new BlackoutPeriod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlackoutPeriodWithDefaults() *BlackoutPeriod {
	this := BlackoutPeriod{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlackoutPeriod) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlackoutPeriod) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *BlackoutPeriod) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *BlackoutPeriod) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *BlackoutPeriod) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *BlackoutPeriod) UnsetId() {
	o.Id.Unset()
}

// GetDay returns the Day field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlackoutPeriod) GetDay() string {
	if o == nil || o.Day.Get() == nil {
		var ret string
		return ret
	}
	return *o.Day.Get()
}

// GetDayOk returns a tuple with the Day field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlackoutPeriod) GetDayOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Day.Get(), o.Day.IsSet()
}

// HasDay returns a boolean if a field has been set.
func (o *BlackoutPeriod) HasDay() bool {
	if o != nil && o.Day.IsSet() {
		return true
	}

	return false
}

// SetDay gets a reference to the given NullableString and assigns it to the Day field.
func (o *BlackoutPeriod) SetDay(v string) {
	o.Day.Set(&v)
}
// SetDayNil sets the value for Day to be an explicit nil
func (o *BlackoutPeriod) SetDayNil() {
	o.Day.Set(nil)
}

// UnsetDay ensures that no value is present for Day, not even an explicit nil
func (o *BlackoutPeriod) UnsetDay() {
	o.Day.Unset()
}

// GetEndTime returns the EndTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlackoutPeriod) GetEndTime() TimeOfDay {
	if o == nil || o.EndTime.Get() == nil {
		var ret TimeOfDay
		return ret
	}
	return *o.EndTime.Get()
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlackoutPeriod) GetEndTimeOk() (*TimeOfDay, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EndTime.Get(), o.EndTime.IsSet()
}

// HasEndTime returns a boolean if a field has been set.
func (o *BlackoutPeriod) HasEndTime() bool {
	if o != nil && o.EndTime.IsSet() {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given NullableTimeOfDay and assigns it to the EndTime field.
func (o *BlackoutPeriod) SetEndTime(v TimeOfDay) {
	o.EndTime.Set(&v)
}
// SetEndTimeNil sets the value for EndTime to be an explicit nil
func (o *BlackoutPeriod) SetEndTimeNil() {
	o.EndTime.Set(nil)
}

// UnsetEndTime ensures that no value is present for EndTime, not even an explicit nil
func (o *BlackoutPeriod) UnsetEndTime() {
	o.EndTime.Unset()
}

// GetStartTime returns the StartTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlackoutPeriod) GetStartTime() TimeOfDay {
	if o == nil || o.StartTime.Get() == nil {
		var ret TimeOfDay
		return ret
	}
	return *o.StartTime.Get()
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlackoutPeriod) GetStartTimeOk() (*TimeOfDay, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartTime.Get(), o.StartTime.IsSet()
}

// HasStartTime returns a boolean if a field has been set.
func (o *BlackoutPeriod) HasStartTime() bool {
	if o != nil && o.StartTime.IsSet() {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given NullableTimeOfDay and assigns it to the StartTime field.
func (o *BlackoutPeriod) SetStartTime(v TimeOfDay) {
	o.StartTime.Set(&v)
}
// SetStartTimeNil sets the value for StartTime to be an explicit nil
func (o *BlackoutPeriod) SetStartTimeNil() {
	o.StartTime.Set(nil)
}

// UnsetStartTime ensures that no value is present for StartTime, not even an explicit nil
func (o *BlackoutPeriod) UnsetStartTime() {
	o.StartTime.Unset()
}

func (o BlackoutPeriod) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["Id"] = o.Id.Get()
	}
	if o.Day.IsSet() {
		toSerialize["day"] = o.Day.Get()
	}
	if o.EndTime.IsSet() {
		toSerialize["endTime"] = o.EndTime.Get()
	}
	if o.StartTime.IsSet() {
		toSerialize["startTime"] = o.StartTime.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableBlackoutPeriod struct {
	value *BlackoutPeriod
	isSet bool
}

func (v NullableBlackoutPeriod) Get() *BlackoutPeriod {
	return v.value
}

func (v *NullableBlackoutPeriod) Set(val *BlackoutPeriod) {
	v.value = val
	v.isSet = true
}

func (v NullableBlackoutPeriod) IsSet() bool {
	return v.isSet
}

func (v *NullableBlackoutPeriod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlackoutPeriod(val *BlackoutPeriod) *NullableBlackoutPeriod {
	return &NullableBlackoutPeriod{value: val, isSet: true}
}

func (v NullableBlackoutPeriod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlackoutPeriod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


