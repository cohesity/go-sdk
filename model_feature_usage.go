/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// FeatureUsage struct for FeatureUsage
type FeatureUsage struct {
	// Feature usage by the cluster.
	CurrentUsageGiB NullableInt64 `json:"currentUsageGiB,omitempty"`
	// Name of feature.
	FeatureName NullableString `json:"featureName,omitempty"`
	// Number of VM spinned.
	NumVm NullableInt64 `json:"numVm,omitempty"`
}

// NewFeatureUsage instantiates a new FeatureUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeatureUsage() *FeatureUsage {
	this := FeatureUsage{}
	return &this
}

// NewFeatureUsageWithDefaults instantiates a new FeatureUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeatureUsageWithDefaults() *FeatureUsage {
	this := FeatureUsage{}
	return &this
}

// GetCurrentUsageGiB returns the CurrentUsageGiB field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeatureUsage) GetCurrentUsageGiB() int64 {
	if o == nil || o.CurrentUsageGiB.Get() == nil {
		var ret int64
		return ret
	}
	return *o.CurrentUsageGiB.Get()
}

// GetCurrentUsageGiBOk returns a tuple with the CurrentUsageGiB field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeatureUsage) GetCurrentUsageGiBOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CurrentUsageGiB.Get(), o.CurrentUsageGiB.IsSet()
}

// HasCurrentUsageGiB returns a boolean if a field has been set.
func (o *FeatureUsage) HasCurrentUsageGiB() bool {
	if o != nil && o.CurrentUsageGiB.IsSet() {
		return true
	}

	return false
}

// SetCurrentUsageGiB gets a reference to the given NullableInt64 and assigns it to the CurrentUsageGiB field.
func (o *FeatureUsage) SetCurrentUsageGiB(v int64) {
	o.CurrentUsageGiB.Set(&v)
}
// SetCurrentUsageGiBNil sets the value for CurrentUsageGiB to be an explicit nil
func (o *FeatureUsage) SetCurrentUsageGiBNil() {
	o.CurrentUsageGiB.Set(nil)
}

// UnsetCurrentUsageGiB ensures that no value is present for CurrentUsageGiB, not even an explicit nil
func (o *FeatureUsage) UnsetCurrentUsageGiB() {
	o.CurrentUsageGiB.Unset()
}

// GetFeatureName returns the FeatureName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeatureUsage) GetFeatureName() string {
	if o == nil || o.FeatureName.Get() == nil {
		var ret string
		return ret
	}
	return *o.FeatureName.Get()
}

// GetFeatureNameOk returns a tuple with the FeatureName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeatureUsage) GetFeatureNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FeatureName.Get(), o.FeatureName.IsSet()
}

// HasFeatureName returns a boolean if a field has been set.
func (o *FeatureUsage) HasFeatureName() bool {
	if o != nil && o.FeatureName.IsSet() {
		return true
	}

	return false
}

// SetFeatureName gets a reference to the given NullableString and assigns it to the FeatureName field.
func (o *FeatureUsage) SetFeatureName(v string) {
	o.FeatureName.Set(&v)
}
// SetFeatureNameNil sets the value for FeatureName to be an explicit nil
func (o *FeatureUsage) SetFeatureNameNil() {
	o.FeatureName.Set(nil)
}

// UnsetFeatureName ensures that no value is present for FeatureName, not even an explicit nil
func (o *FeatureUsage) UnsetFeatureName() {
	o.FeatureName.Unset()
}

// GetNumVm returns the NumVm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeatureUsage) GetNumVm() int64 {
	if o == nil || o.NumVm.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NumVm.Get()
}

// GetNumVmOk returns a tuple with the NumVm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeatureUsage) GetNumVmOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumVm.Get(), o.NumVm.IsSet()
}

// HasNumVm returns a boolean if a field has been set.
func (o *FeatureUsage) HasNumVm() bool {
	if o != nil && o.NumVm.IsSet() {
		return true
	}

	return false
}

// SetNumVm gets a reference to the given NullableInt64 and assigns it to the NumVm field.
func (o *FeatureUsage) SetNumVm(v int64) {
	o.NumVm.Set(&v)
}
// SetNumVmNil sets the value for NumVm to be an explicit nil
func (o *FeatureUsage) SetNumVmNil() {
	o.NumVm.Set(nil)
}

// UnsetNumVm ensures that no value is present for NumVm, not even an explicit nil
func (o *FeatureUsage) UnsetNumVm() {
	o.NumVm.Unset()
}

func (o FeatureUsage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CurrentUsageGiB.IsSet() {
		toSerialize["currentUsageGiB"] = o.CurrentUsageGiB.Get()
	}
	if o.FeatureName.IsSet() {
		toSerialize["featureName"] = o.FeatureName.Get()
	}
	if o.NumVm.IsSet() {
		toSerialize["numVm"] = o.NumVm.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableFeatureUsage struct {
	value *FeatureUsage
	isSet bool
}

func (v NullableFeatureUsage) Get() *FeatureUsage {
	return v.value
}

func (v *NullableFeatureUsage) Set(val *FeatureUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableFeatureUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableFeatureUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeatureUsage(val *FeatureUsage) *NullableFeatureUsage {
	return &NullableFeatureUsage{value: val, isSet: true}
}

func (v NullableFeatureUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeatureUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


