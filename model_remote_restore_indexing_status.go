/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// RemoteRestoreIndexingStatus Specifies the status of an indexing task.
type RemoteRestoreIndexingStatus struct {
	// Specifies the end time of the time range that is being indexed. The indexing task is creating an index of the Job Runs that occurred between the startTimeUsecs and this endTimeUsecs. This field is recorded as a Unix epoch Timestamp (in microseconds).
	EndTimeUsecs NullableInt64 `json:"endTimeUsecs,omitempty"`
	// Specifies the error message if the indexing Job/task fails.
	Error NullableString `json:"error,omitempty"`
	// Specifies when the indexing task completed. This time is recorded as a Unix epoch Timestamp (in microseconds). This field is not set if the indexing task is still in progress.
	IndexingTaskEndTimeUsecs NullableInt64 `json:"indexingTaskEndTimeUsecs,omitempty"`
	// Specifies when the indexing task started. This time is recorded as a Unix epoch Timestamp (in microseconds).
	IndexingTaskStartTimeUsecs NullableInt64 `json:"indexingTaskStartTimeUsecs,omitempty"`
	// Specifies the status of the indexing Job/task. 'kJobRunning' indicates that the Job/task is currently running. 'kJobFinished' indicates that the Job/task completed and finished. 'kJobFailed' indicates that the Job/task failed and did not complete. 'kJobCanceled' indicates that the Job/task was canceled. 'kJobPaused' indicates the Job/task is paused.
	IndexingTaskStatus NullableString `json:"indexingTaskStatus,omitempty"`
	// Specifies the unique id of the indexing task assigned by this Cluster.
	IndexingTaskUid NullableUniversalId `json:"indexingTaskUid,omitempty"`
	// For all the Snapshots retrieved by this Job, specifies the latest time when a Snapshot expires.
	LatestExpiryTimeUsecs NullableInt64 `json:"latestExpiryTimeUsecs,omitempty"`
	// Specifies the path to progress monitor task to track the progress of building the index.
	ProgressMonitorTask NullableString `json:"progressMonitorTask,omitempty"`
	// Specifies the start time of the time range that is being indexed. The indexing task is creating an index of the Job Runs that occurred between this startTimeUsecs and the endTimeUsecs. This field is recorded as a Unix epoch Timestamp (in microseconds).
	StartTimeUsecs NullableInt64 `json:"startTimeUsecs,omitempty"`
}

// NewRemoteRestoreIndexingStatus instantiates a new RemoteRestoreIndexingStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteRestoreIndexingStatus() *RemoteRestoreIndexingStatus {
	this := RemoteRestoreIndexingStatus{}
	return &this
}

// NewRemoteRestoreIndexingStatusWithDefaults instantiates a new RemoteRestoreIndexingStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteRestoreIndexingStatusWithDefaults() *RemoteRestoreIndexingStatus {
	this := RemoteRestoreIndexingStatus{}
	return &this
}

// GetEndTimeUsecs returns the EndTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteRestoreIndexingStatus) GetEndTimeUsecs() int64 {
	if o == nil || o.EndTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.EndTimeUsecs.Get()
}

// GetEndTimeUsecsOk returns a tuple with the EndTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteRestoreIndexingStatus) GetEndTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EndTimeUsecs.Get(), o.EndTimeUsecs.IsSet()
}

// HasEndTimeUsecs returns a boolean if a field has been set.
func (o *RemoteRestoreIndexingStatus) HasEndTimeUsecs() bool {
	if o != nil && o.EndTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetEndTimeUsecs gets a reference to the given NullableInt64 and assigns it to the EndTimeUsecs field.
func (o *RemoteRestoreIndexingStatus) SetEndTimeUsecs(v int64) {
	o.EndTimeUsecs.Set(&v)
}
// SetEndTimeUsecsNil sets the value for EndTimeUsecs to be an explicit nil
func (o *RemoteRestoreIndexingStatus) SetEndTimeUsecsNil() {
	o.EndTimeUsecs.Set(nil)
}

// UnsetEndTimeUsecs ensures that no value is present for EndTimeUsecs, not even an explicit nil
func (o *RemoteRestoreIndexingStatus) UnsetEndTimeUsecs() {
	o.EndTimeUsecs.Unset()
}

// GetError returns the Error field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteRestoreIndexingStatus) GetError() string {
	if o == nil || o.Error.Get() == nil {
		var ret string
		return ret
	}
	return *o.Error.Get()
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteRestoreIndexingStatus) GetErrorOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Error.Get(), o.Error.IsSet()
}

// HasError returns a boolean if a field has been set.
func (o *RemoteRestoreIndexingStatus) HasError() bool {
	if o != nil && o.Error.IsSet() {
		return true
	}

	return false
}

// SetError gets a reference to the given NullableString and assigns it to the Error field.
func (o *RemoteRestoreIndexingStatus) SetError(v string) {
	o.Error.Set(&v)
}
// SetErrorNil sets the value for Error to be an explicit nil
func (o *RemoteRestoreIndexingStatus) SetErrorNil() {
	o.Error.Set(nil)
}

// UnsetError ensures that no value is present for Error, not even an explicit nil
func (o *RemoteRestoreIndexingStatus) UnsetError() {
	o.Error.Unset()
}

// GetIndexingTaskEndTimeUsecs returns the IndexingTaskEndTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteRestoreIndexingStatus) GetIndexingTaskEndTimeUsecs() int64 {
	if o == nil || o.IndexingTaskEndTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.IndexingTaskEndTimeUsecs.Get()
}

// GetIndexingTaskEndTimeUsecsOk returns a tuple with the IndexingTaskEndTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteRestoreIndexingStatus) GetIndexingTaskEndTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IndexingTaskEndTimeUsecs.Get(), o.IndexingTaskEndTimeUsecs.IsSet()
}

// HasIndexingTaskEndTimeUsecs returns a boolean if a field has been set.
func (o *RemoteRestoreIndexingStatus) HasIndexingTaskEndTimeUsecs() bool {
	if o != nil && o.IndexingTaskEndTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetIndexingTaskEndTimeUsecs gets a reference to the given NullableInt64 and assigns it to the IndexingTaskEndTimeUsecs field.
func (o *RemoteRestoreIndexingStatus) SetIndexingTaskEndTimeUsecs(v int64) {
	o.IndexingTaskEndTimeUsecs.Set(&v)
}
// SetIndexingTaskEndTimeUsecsNil sets the value for IndexingTaskEndTimeUsecs to be an explicit nil
func (o *RemoteRestoreIndexingStatus) SetIndexingTaskEndTimeUsecsNil() {
	o.IndexingTaskEndTimeUsecs.Set(nil)
}

// UnsetIndexingTaskEndTimeUsecs ensures that no value is present for IndexingTaskEndTimeUsecs, not even an explicit nil
func (o *RemoteRestoreIndexingStatus) UnsetIndexingTaskEndTimeUsecs() {
	o.IndexingTaskEndTimeUsecs.Unset()
}

// GetIndexingTaskStartTimeUsecs returns the IndexingTaskStartTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteRestoreIndexingStatus) GetIndexingTaskStartTimeUsecs() int64 {
	if o == nil || o.IndexingTaskStartTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.IndexingTaskStartTimeUsecs.Get()
}

// GetIndexingTaskStartTimeUsecsOk returns a tuple with the IndexingTaskStartTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteRestoreIndexingStatus) GetIndexingTaskStartTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IndexingTaskStartTimeUsecs.Get(), o.IndexingTaskStartTimeUsecs.IsSet()
}

// HasIndexingTaskStartTimeUsecs returns a boolean if a field has been set.
func (o *RemoteRestoreIndexingStatus) HasIndexingTaskStartTimeUsecs() bool {
	if o != nil && o.IndexingTaskStartTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetIndexingTaskStartTimeUsecs gets a reference to the given NullableInt64 and assigns it to the IndexingTaskStartTimeUsecs field.
func (o *RemoteRestoreIndexingStatus) SetIndexingTaskStartTimeUsecs(v int64) {
	o.IndexingTaskStartTimeUsecs.Set(&v)
}
// SetIndexingTaskStartTimeUsecsNil sets the value for IndexingTaskStartTimeUsecs to be an explicit nil
func (o *RemoteRestoreIndexingStatus) SetIndexingTaskStartTimeUsecsNil() {
	o.IndexingTaskStartTimeUsecs.Set(nil)
}

// UnsetIndexingTaskStartTimeUsecs ensures that no value is present for IndexingTaskStartTimeUsecs, not even an explicit nil
func (o *RemoteRestoreIndexingStatus) UnsetIndexingTaskStartTimeUsecs() {
	o.IndexingTaskStartTimeUsecs.Unset()
}

// GetIndexingTaskStatus returns the IndexingTaskStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteRestoreIndexingStatus) GetIndexingTaskStatus() string {
	if o == nil || o.IndexingTaskStatus.Get() == nil {
		var ret string
		return ret
	}
	return *o.IndexingTaskStatus.Get()
}

// GetIndexingTaskStatusOk returns a tuple with the IndexingTaskStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteRestoreIndexingStatus) GetIndexingTaskStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IndexingTaskStatus.Get(), o.IndexingTaskStatus.IsSet()
}

// HasIndexingTaskStatus returns a boolean if a field has been set.
func (o *RemoteRestoreIndexingStatus) HasIndexingTaskStatus() bool {
	if o != nil && o.IndexingTaskStatus.IsSet() {
		return true
	}

	return false
}

// SetIndexingTaskStatus gets a reference to the given NullableString and assigns it to the IndexingTaskStatus field.
func (o *RemoteRestoreIndexingStatus) SetIndexingTaskStatus(v string) {
	o.IndexingTaskStatus.Set(&v)
}
// SetIndexingTaskStatusNil sets the value for IndexingTaskStatus to be an explicit nil
func (o *RemoteRestoreIndexingStatus) SetIndexingTaskStatusNil() {
	o.IndexingTaskStatus.Set(nil)
}

// UnsetIndexingTaskStatus ensures that no value is present for IndexingTaskStatus, not even an explicit nil
func (o *RemoteRestoreIndexingStatus) UnsetIndexingTaskStatus() {
	o.IndexingTaskStatus.Unset()
}

// GetIndexingTaskUid returns the IndexingTaskUid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteRestoreIndexingStatus) GetIndexingTaskUid() UniversalId {
	if o == nil || o.IndexingTaskUid.Get() == nil {
		var ret UniversalId
		return ret
	}
	return *o.IndexingTaskUid.Get()
}

// GetIndexingTaskUidOk returns a tuple with the IndexingTaskUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteRestoreIndexingStatus) GetIndexingTaskUidOk() (*UniversalId, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IndexingTaskUid.Get(), o.IndexingTaskUid.IsSet()
}

// HasIndexingTaskUid returns a boolean if a field has been set.
func (o *RemoteRestoreIndexingStatus) HasIndexingTaskUid() bool {
	if o != nil && o.IndexingTaskUid.IsSet() {
		return true
	}

	return false
}

// SetIndexingTaskUid gets a reference to the given NullableUniversalId and assigns it to the IndexingTaskUid field.
func (o *RemoteRestoreIndexingStatus) SetIndexingTaskUid(v UniversalId) {
	o.IndexingTaskUid.Set(&v)
}
// SetIndexingTaskUidNil sets the value for IndexingTaskUid to be an explicit nil
func (o *RemoteRestoreIndexingStatus) SetIndexingTaskUidNil() {
	o.IndexingTaskUid.Set(nil)
}

// UnsetIndexingTaskUid ensures that no value is present for IndexingTaskUid, not even an explicit nil
func (o *RemoteRestoreIndexingStatus) UnsetIndexingTaskUid() {
	o.IndexingTaskUid.Unset()
}

// GetLatestExpiryTimeUsecs returns the LatestExpiryTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteRestoreIndexingStatus) GetLatestExpiryTimeUsecs() int64 {
	if o == nil || o.LatestExpiryTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LatestExpiryTimeUsecs.Get()
}

// GetLatestExpiryTimeUsecsOk returns a tuple with the LatestExpiryTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteRestoreIndexingStatus) GetLatestExpiryTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LatestExpiryTimeUsecs.Get(), o.LatestExpiryTimeUsecs.IsSet()
}

// HasLatestExpiryTimeUsecs returns a boolean if a field has been set.
func (o *RemoteRestoreIndexingStatus) HasLatestExpiryTimeUsecs() bool {
	if o != nil && o.LatestExpiryTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetLatestExpiryTimeUsecs gets a reference to the given NullableInt64 and assigns it to the LatestExpiryTimeUsecs field.
func (o *RemoteRestoreIndexingStatus) SetLatestExpiryTimeUsecs(v int64) {
	o.LatestExpiryTimeUsecs.Set(&v)
}
// SetLatestExpiryTimeUsecsNil sets the value for LatestExpiryTimeUsecs to be an explicit nil
func (o *RemoteRestoreIndexingStatus) SetLatestExpiryTimeUsecsNil() {
	o.LatestExpiryTimeUsecs.Set(nil)
}

// UnsetLatestExpiryTimeUsecs ensures that no value is present for LatestExpiryTimeUsecs, not even an explicit nil
func (o *RemoteRestoreIndexingStatus) UnsetLatestExpiryTimeUsecs() {
	o.LatestExpiryTimeUsecs.Unset()
}

// GetProgressMonitorTask returns the ProgressMonitorTask field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteRestoreIndexingStatus) GetProgressMonitorTask() string {
	if o == nil || o.ProgressMonitorTask.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProgressMonitorTask.Get()
}

// GetProgressMonitorTaskOk returns a tuple with the ProgressMonitorTask field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteRestoreIndexingStatus) GetProgressMonitorTaskOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProgressMonitorTask.Get(), o.ProgressMonitorTask.IsSet()
}

// HasProgressMonitorTask returns a boolean if a field has been set.
func (o *RemoteRestoreIndexingStatus) HasProgressMonitorTask() bool {
	if o != nil && o.ProgressMonitorTask.IsSet() {
		return true
	}

	return false
}

// SetProgressMonitorTask gets a reference to the given NullableString and assigns it to the ProgressMonitorTask field.
func (o *RemoteRestoreIndexingStatus) SetProgressMonitorTask(v string) {
	o.ProgressMonitorTask.Set(&v)
}
// SetProgressMonitorTaskNil sets the value for ProgressMonitorTask to be an explicit nil
func (o *RemoteRestoreIndexingStatus) SetProgressMonitorTaskNil() {
	o.ProgressMonitorTask.Set(nil)
}

// UnsetProgressMonitorTask ensures that no value is present for ProgressMonitorTask, not even an explicit nil
func (o *RemoteRestoreIndexingStatus) UnsetProgressMonitorTask() {
	o.ProgressMonitorTask.Unset()
}

// GetStartTimeUsecs returns the StartTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteRestoreIndexingStatus) GetStartTimeUsecs() int64 {
	if o == nil || o.StartTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.StartTimeUsecs.Get()
}

// GetStartTimeUsecsOk returns a tuple with the StartTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteRestoreIndexingStatus) GetStartTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartTimeUsecs.Get(), o.StartTimeUsecs.IsSet()
}

// HasStartTimeUsecs returns a boolean if a field has been set.
func (o *RemoteRestoreIndexingStatus) HasStartTimeUsecs() bool {
	if o != nil && o.StartTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetStartTimeUsecs gets a reference to the given NullableInt64 and assigns it to the StartTimeUsecs field.
func (o *RemoteRestoreIndexingStatus) SetStartTimeUsecs(v int64) {
	o.StartTimeUsecs.Set(&v)
}
// SetStartTimeUsecsNil sets the value for StartTimeUsecs to be an explicit nil
func (o *RemoteRestoreIndexingStatus) SetStartTimeUsecsNil() {
	o.StartTimeUsecs.Set(nil)
}

// UnsetStartTimeUsecs ensures that no value is present for StartTimeUsecs, not even an explicit nil
func (o *RemoteRestoreIndexingStatus) UnsetStartTimeUsecs() {
	o.StartTimeUsecs.Unset()
}

func (o RemoteRestoreIndexingStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EndTimeUsecs.IsSet() {
		toSerialize["endTimeUsecs"] = o.EndTimeUsecs.Get()
	}
	if o.Error.IsSet() {
		toSerialize["error"] = o.Error.Get()
	}
	if o.IndexingTaskEndTimeUsecs.IsSet() {
		toSerialize["indexingTaskEndTimeUsecs"] = o.IndexingTaskEndTimeUsecs.Get()
	}
	if o.IndexingTaskStartTimeUsecs.IsSet() {
		toSerialize["indexingTaskStartTimeUsecs"] = o.IndexingTaskStartTimeUsecs.Get()
	}
	if o.IndexingTaskStatus.IsSet() {
		toSerialize["indexingTaskStatus"] = o.IndexingTaskStatus.Get()
	}
	if o.IndexingTaskUid.IsSet() {
		toSerialize["indexingTaskUid"] = o.IndexingTaskUid.Get()
	}
	if o.LatestExpiryTimeUsecs.IsSet() {
		toSerialize["latestExpiryTimeUsecs"] = o.LatestExpiryTimeUsecs.Get()
	}
	if o.ProgressMonitorTask.IsSet() {
		toSerialize["progressMonitorTask"] = o.ProgressMonitorTask.Get()
	}
	if o.StartTimeUsecs.IsSet() {
		toSerialize["startTimeUsecs"] = o.StartTimeUsecs.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRemoteRestoreIndexingStatus struct {
	value *RemoteRestoreIndexingStatus
	isSet bool
}

func (v NullableRemoteRestoreIndexingStatus) Get() *RemoteRestoreIndexingStatus {
	return v.value
}

func (v *NullableRemoteRestoreIndexingStatus) Set(val *RemoteRestoreIndexingStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteRestoreIndexingStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteRestoreIndexingStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteRestoreIndexingStatus(val *RemoteRestoreIndexingStatus) *NullableRemoteRestoreIndexingStatus {
	return &NullableRemoteRestoreIndexingStatus{value: val, isSet: true}
}

func (v NullableRemoteRestoreIndexingStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteRestoreIndexingStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


