/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ConsumerStats ConsumerStats is the stats of a single consumer. A consumer is a entity which consumes the storage space of a storage domain. A consumer can be a View, Protection Job or a Replication Job.
type ConsumerStats struct {
	// Specifies the type of the consumer. Type of the consumer can be one of the following three,  'kViews', indicates the stats info of Views used per organization (tenant) per view box (storage domain). 'kProtectionRuns', indicates the stats info of Protection Runs used per organization (tenant) per view box (storage domain). 'kReplicationRuns', indicates the stats info of Replication In used per organization (tenant) per view box (storage domain). 'kViewProtectionRuns', indicates the stats info of View Protection Runs used per organization (tenant) per view box (storage domain).
	ConsumerType NullableString `json:"consumerType,omitempty"`
	// Specifies a list of groups associated to this consumer.
	GroupList []StatsGroup `json:"groupList,omitempty"`
	// Specifies the id of the consumer.
	Id NullableInt64 `json:"id,omitempty"`
	// Specifies the name of the consumer.
	Name NullableString `json:"name,omitempty"`
	// Specifies the source environment of the protection job. Supported environment types such as 'kView', 'kSQL', 'kVMware', etc. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter. 'kVMware' indicates the VMware Protection Source environment. 'kHyperV' indicates the HyperV Protection Source environment. 'kSQL' indicates the SQL Protection Source environment. 'kView' indicates the View Protection Source environment. 'kPuppeteer' indicates the Cohesity's Remote Adapter. 'kPhysical' indicates the physical Protection Source environment. 'kPure' indicates the Pure Storage Protection Source environment. 'Nimble' indicates the Nimble Storage Protection Source environment. 'kAzure' indicates the Microsoft's Azure Protection Source environment. 'kNetapp' indicates the Netapp Protection Source environment. 'kAgent' indicates the Agent Protection Source environment. 'kGenericNas' indicates the Generic Network Attached Storage Protection Source environment. 'kAcropolis' indicates the Acropolis Protection Source environment. 'kPhsicalFiles' indicates the Physical Files Protection Source environment. 'kIsilon' indicates the Dell EMC's Isilon Protection Source environment. 'kGPFS' indicates IBM's GPFS Protection Source environment. 'kKVM' indicates the KVM Protection Source environment. 'kAWS' indicates the AWS Protection Source environment. 'kExchange' indicates the Exchange Protection Source environment. 'kHyperVVSS' indicates the HyperV VSS Protection Source environment. 'kOracle' indicates the Oracle Protection Source environment. 'kGCP' indicates the Google Cloud Platform Protection Source environment. 'kFlashBlade' indicates the Flash Blade Protection Source environment. 'kAWSNative' indicates the AWS Native Protection Source environment. 'kO365' indicates the Office 365 Protection Source environment. 'kO365Outlook' indicates Office 365 outlook Protection Source environment. 'kHyperFlex' indicates the Hyper Flex Protection Source environment. 'kGCPNative' indicates the GCP Native Protection Source environment. 'kAzureNative' indicates the Azure Native Protection Source environment. 'kKubernetes' indicates a Kubernetes Protection Source environment. 'kElastifile' indicates Elastifile Protection Source environment. 'kAD' indicates Active Directory Protection Source environment. 'kRDSSnapshotManager' indicates AWS RDS Protection Source environment. 'kCassandra' indicates Cassandra Protection Source environment. 'kMongoDB' indicates MongoDB Protection Source environment. 'kCouchbase' indicates Couchbase Protection Source environment. 'kHdfs' indicates Hdfs Protection Source environment. 'kHive' indicates Hive Protection Source environment. 'kHBase' indicates HBase Protection Source environment.
	ProtectionEnvironment NullableString `json:"protectionEnvironment,omitempty"`
	// Specifies the name of the protection policy for 'kProtectionRuns' and 'kReplicationRuns' consumer.
	ProtectionPolicyName NullableString `json:"protectionPolicyName,omitempty"`
	// Specifies the hard limit of logical quota of the consumer. This field will be returned only if consumer type is view.
	QuotaHardLimitBytes NullableInt64 `json:"quotaHardLimitBytes,omitempty"`
	// Specifies a list of schemaInfos of the consumer.
	SchemaInfoList []UsageSchemaInfo `json:"schemaInfoList,omitempty"`
	Stats *DataUsageStats `json:"stats,omitempty"`
}

// NewConsumerStats instantiates a new ConsumerStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsumerStats() *ConsumerStats {
	this := ConsumerStats{}
	return &this
}

// NewConsumerStatsWithDefaults instantiates a new ConsumerStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsumerStatsWithDefaults() *ConsumerStats {
	this := ConsumerStats{}
	return &this
}

// GetConsumerType returns the ConsumerType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConsumerStats) GetConsumerType() string {
	if o == nil || o.ConsumerType.Get() == nil {
		var ret string
		return ret
	}
	return *o.ConsumerType.Get()
}

// GetConsumerTypeOk returns a tuple with the ConsumerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConsumerStats) GetConsumerTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ConsumerType.Get(), o.ConsumerType.IsSet()
}

// HasConsumerType returns a boolean if a field has been set.
func (o *ConsumerStats) HasConsumerType() bool {
	if o != nil && o.ConsumerType.IsSet() {
		return true
	}

	return false
}

// SetConsumerType gets a reference to the given NullableString and assigns it to the ConsumerType field.
func (o *ConsumerStats) SetConsumerType(v string) {
	o.ConsumerType.Set(&v)
}
// SetConsumerTypeNil sets the value for ConsumerType to be an explicit nil
func (o *ConsumerStats) SetConsumerTypeNil() {
	o.ConsumerType.Set(nil)
}

// UnsetConsumerType ensures that no value is present for ConsumerType, not even an explicit nil
func (o *ConsumerStats) UnsetConsumerType() {
	o.ConsumerType.Unset()
}

// GetGroupList returns the GroupList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConsumerStats) GetGroupList() []StatsGroup {
	if o == nil  {
		var ret []StatsGroup
		return ret
	}
	return o.GroupList
}

// GetGroupListOk returns a tuple with the GroupList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConsumerStats) GetGroupListOk() (*[]StatsGroup, bool) {
	if o == nil || o.GroupList == nil {
		return nil, false
	}
	return &o.GroupList, true
}

// HasGroupList returns a boolean if a field has been set.
func (o *ConsumerStats) HasGroupList() bool {
	if o != nil && o.GroupList != nil {
		return true
	}

	return false
}

// SetGroupList gets a reference to the given []StatsGroup and assigns it to the GroupList field.
func (o *ConsumerStats) SetGroupList(v []StatsGroup) {
	o.GroupList = v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConsumerStats) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConsumerStats) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *ConsumerStats) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *ConsumerStats) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *ConsumerStats) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *ConsumerStats) UnsetId() {
	o.Id.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConsumerStats) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConsumerStats) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ConsumerStats) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ConsumerStats) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *ConsumerStats) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ConsumerStats) UnsetName() {
	o.Name.Unset()
}

// GetProtectionEnvironment returns the ProtectionEnvironment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConsumerStats) GetProtectionEnvironment() string {
	if o == nil || o.ProtectionEnvironment.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProtectionEnvironment.Get()
}

// GetProtectionEnvironmentOk returns a tuple with the ProtectionEnvironment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConsumerStats) GetProtectionEnvironmentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProtectionEnvironment.Get(), o.ProtectionEnvironment.IsSet()
}

// HasProtectionEnvironment returns a boolean if a field has been set.
func (o *ConsumerStats) HasProtectionEnvironment() bool {
	if o != nil && o.ProtectionEnvironment.IsSet() {
		return true
	}

	return false
}

// SetProtectionEnvironment gets a reference to the given NullableString and assigns it to the ProtectionEnvironment field.
func (o *ConsumerStats) SetProtectionEnvironment(v string) {
	o.ProtectionEnvironment.Set(&v)
}
// SetProtectionEnvironmentNil sets the value for ProtectionEnvironment to be an explicit nil
func (o *ConsumerStats) SetProtectionEnvironmentNil() {
	o.ProtectionEnvironment.Set(nil)
}

// UnsetProtectionEnvironment ensures that no value is present for ProtectionEnvironment, not even an explicit nil
func (o *ConsumerStats) UnsetProtectionEnvironment() {
	o.ProtectionEnvironment.Unset()
}

// GetProtectionPolicyName returns the ProtectionPolicyName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConsumerStats) GetProtectionPolicyName() string {
	if o == nil || o.ProtectionPolicyName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProtectionPolicyName.Get()
}

// GetProtectionPolicyNameOk returns a tuple with the ProtectionPolicyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConsumerStats) GetProtectionPolicyNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProtectionPolicyName.Get(), o.ProtectionPolicyName.IsSet()
}

// HasProtectionPolicyName returns a boolean if a field has been set.
func (o *ConsumerStats) HasProtectionPolicyName() bool {
	if o != nil && o.ProtectionPolicyName.IsSet() {
		return true
	}

	return false
}

// SetProtectionPolicyName gets a reference to the given NullableString and assigns it to the ProtectionPolicyName field.
func (o *ConsumerStats) SetProtectionPolicyName(v string) {
	o.ProtectionPolicyName.Set(&v)
}
// SetProtectionPolicyNameNil sets the value for ProtectionPolicyName to be an explicit nil
func (o *ConsumerStats) SetProtectionPolicyNameNil() {
	o.ProtectionPolicyName.Set(nil)
}

// UnsetProtectionPolicyName ensures that no value is present for ProtectionPolicyName, not even an explicit nil
func (o *ConsumerStats) UnsetProtectionPolicyName() {
	o.ProtectionPolicyName.Unset()
}

// GetQuotaHardLimitBytes returns the QuotaHardLimitBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConsumerStats) GetQuotaHardLimitBytes() int64 {
	if o == nil || o.QuotaHardLimitBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.QuotaHardLimitBytes.Get()
}

// GetQuotaHardLimitBytesOk returns a tuple with the QuotaHardLimitBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConsumerStats) GetQuotaHardLimitBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.QuotaHardLimitBytes.Get(), o.QuotaHardLimitBytes.IsSet()
}

// HasQuotaHardLimitBytes returns a boolean if a field has been set.
func (o *ConsumerStats) HasQuotaHardLimitBytes() bool {
	if o != nil && o.QuotaHardLimitBytes.IsSet() {
		return true
	}

	return false
}

// SetQuotaHardLimitBytes gets a reference to the given NullableInt64 and assigns it to the QuotaHardLimitBytes field.
func (o *ConsumerStats) SetQuotaHardLimitBytes(v int64) {
	o.QuotaHardLimitBytes.Set(&v)
}
// SetQuotaHardLimitBytesNil sets the value for QuotaHardLimitBytes to be an explicit nil
func (o *ConsumerStats) SetQuotaHardLimitBytesNil() {
	o.QuotaHardLimitBytes.Set(nil)
}

// UnsetQuotaHardLimitBytes ensures that no value is present for QuotaHardLimitBytes, not even an explicit nil
func (o *ConsumerStats) UnsetQuotaHardLimitBytes() {
	o.QuotaHardLimitBytes.Unset()
}

// GetSchemaInfoList returns the SchemaInfoList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConsumerStats) GetSchemaInfoList() []UsageSchemaInfo {
	if o == nil  {
		var ret []UsageSchemaInfo
		return ret
	}
	return o.SchemaInfoList
}

// GetSchemaInfoListOk returns a tuple with the SchemaInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConsumerStats) GetSchemaInfoListOk() (*[]UsageSchemaInfo, bool) {
	if o == nil || o.SchemaInfoList == nil {
		return nil, false
	}
	return &o.SchemaInfoList, true
}

// HasSchemaInfoList returns a boolean if a field has been set.
func (o *ConsumerStats) HasSchemaInfoList() bool {
	if o != nil && o.SchemaInfoList != nil {
		return true
	}

	return false
}

// SetSchemaInfoList gets a reference to the given []UsageSchemaInfo and assigns it to the SchemaInfoList field.
func (o *ConsumerStats) SetSchemaInfoList(v []UsageSchemaInfo) {
	o.SchemaInfoList = v
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *ConsumerStats) GetStats() DataUsageStats {
	if o == nil || o.Stats == nil {
		var ret DataUsageStats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumerStats) GetStatsOk() (*DataUsageStats, bool) {
	if o == nil || o.Stats == nil {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *ConsumerStats) HasStats() bool {
	if o != nil && o.Stats != nil {
		return true
	}

	return false
}

// SetStats gets a reference to the given DataUsageStats and assigns it to the Stats field.
func (o *ConsumerStats) SetStats(v DataUsageStats) {
	o.Stats = &v
}

func (o ConsumerStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ConsumerType.IsSet() {
		toSerialize["consumerType"] = o.ConsumerType.Get()
	}
	if o.GroupList != nil {
		toSerialize["groupList"] = o.GroupList
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.ProtectionEnvironment.IsSet() {
		toSerialize["protectionEnvironment"] = o.ProtectionEnvironment.Get()
	}
	if o.ProtectionPolicyName.IsSet() {
		toSerialize["protectionPolicyName"] = o.ProtectionPolicyName.Get()
	}
	if o.QuotaHardLimitBytes.IsSet() {
		toSerialize["quotaHardLimitBytes"] = o.QuotaHardLimitBytes.Get()
	}
	if o.SchemaInfoList != nil {
		toSerialize["schemaInfoList"] = o.SchemaInfoList
	}
	if o.Stats != nil {
		toSerialize["stats"] = o.Stats
	}
	return json.Marshal(toSerialize)
}

type NullableConsumerStats struct {
	value *ConsumerStats
	isSet bool
}

func (v NullableConsumerStats) Get() *ConsumerStats {
	return v.value
}

func (v *NullableConsumerStats) Set(val *ConsumerStats) {
	v.value = val
	v.isSet = true
}

func (v NullableConsumerStats) IsSet() bool {
	return v.isSet
}

func (v *NullableConsumerStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsumerStats(val *ConsumerStats) *NullableConsumerStats {
	return &NullableConsumerStats{value: val, isSet: true}
}

func (v NullableConsumerStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsumerStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


