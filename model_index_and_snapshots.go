/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// IndexAndSnapshots Specifies settings required to restore the index and Snapshots of a Protection Job.
type IndexAndSnapshots struct {
	// Specifies a unique id of the Archive task that originally archived the object to the Vault.
	ArchiveTaskUid NullableUniversalId `json:"archiveTaskUid,omitempty"`
	// Specifies the end time as a Unix epoch Timestamp (in microseconds). If set, only index and Snapshots for Protection Job Runs that started before the specified end time are restored.
	EndTimeUsecs NullableInt64 `json:"endTimeUsecs,omitempty"`
	// Specifies a unique id assigned to the original Protection Job by the original Cluster that archived data to the remote Vault.
	RemoteProtectionJobUid NullableUniversalId `json:"remoteProtectionJobUid,omitempty"`
	// Specifies the start time as a Unix epoch Timestamp (in microseconds). If set, only the index and Snapshots for Protection Job Runs that started after the specified start time are restored.
	StartTimeUsecs NullableInt64 `json:"startTimeUsecs,omitempty"`
	// Specifies the id of the local Storage Domain (View Box) where the index and the Snapshot will be restored to.
	ViewBoxId NullableInt64 `json:"viewBoxId,omitempty"`
}

// NewIndexAndSnapshots instantiates a new IndexAndSnapshots object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndexAndSnapshots() *IndexAndSnapshots {
	this := IndexAndSnapshots{}
	return &this
}

// NewIndexAndSnapshotsWithDefaults instantiates a new IndexAndSnapshots object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndexAndSnapshotsWithDefaults() *IndexAndSnapshots {
	this := IndexAndSnapshots{}
	return &this
}

// GetArchiveTaskUid returns the ArchiveTaskUid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IndexAndSnapshots) GetArchiveTaskUid() UniversalId {
	if o == nil || o.ArchiveTaskUid.Get() == nil {
		var ret UniversalId
		return ret
	}
	return *o.ArchiveTaskUid.Get()
}

// GetArchiveTaskUidOk returns a tuple with the ArchiveTaskUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IndexAndSnapshots) GetArchiveTaskUidOk() (*UniversalId, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ArchiveTaskUid.Get(), o.ArchiveTaskUid.IsSet()
}

// HasArchiveTaskUid returns a boolean if a field has been set.
func (o *IndexAndSnapshots) HasArchiveTaskUid() bool {
	if o != nil && o.ArchiveTaskUid.IsSet() {
		return true
	}

	return false
}

// SetArchiveTaskUid gets a reference to the given NullableUniversalId and assigns it to the ArchiveTaskUid field.
func (o *IndexAndSnapshots) SetArchiveTaskUid(v UniversalId) {
	o.ArchiveTaskUid.Set(&v)
}
// SetArchiveTaskUidNil sets the value for ArchiveTaskUid to be an explicit nil
func (o *IndexAndSnapshots) SetArchiveTaskUidNil() {
	o.ArchiveTaskUid.Set(nil)
}

// UnsetArchiveTaskUid ensures that no value is present for ArchiveTaskUid, not even an explicit nil
func (o *IndexAndSnapshots) UnsetArchiveTaskUid() {
	o.ArchiveTaskUid.Unset()
}

// GetEndTimeUsecs returns the EndTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IndexAndSnapshots) GetEndTimeUsecs() int64 {
	if o == nil || o.EndTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.EndTimeUsecs.Get()
}

// GetEndTimeUsecsOk returns a tuple with the EndTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IndexAndSnapshots) GetEndTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EndTimeUsecs.Get(), o.EndTimeUsecs.IsSet()
}

// HasEndTimeUsecs returns a boolean if a field has been set.
func (o *IndexAndSnapshots) HasEndTimeUsecs() bool {
	if o != nil && o.EndTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetEndTimeUsecs gets a reference to the given NullableInt64 and assigns it to the EndTimeUsecs field.
func (o *IndexAndSnapshots) SetEndTimeUsecs(v int64) {
	o.EndTimeUsecs.Set(&v)
}
// SetEndTimeUsecsNil sets the value for EndTimeUsecs to be an explicit nil
func (o *IndexAndSnapshots) SetEndTimeUsecsNil() {
	o.EndTimeUsecs.Set(nil)
}

// UnsetEndTimeUsecs ensures that no value is present for EndTimeUsecs, not even an explicit nil
func (o *IndexAndSnapshots) UnsetEndTimeUsecs() {
	o.EndTimeUsecs.Unset()
}

// GetRemoteProtectionJobUid returns the RemoteProtectionJobUid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IndexAndSnapshots) GetRemoteProtectionJobUid() UniversalId {
	if o == nil || o.RemoteProtectionJobUid.Get() == nil {
		var ret UniversalId
		return ret
	}
	return *o.RemoteProtectionJobUid.Get()
}

// GetRemoteProtectionJobUidOk returns a tuple with the RemoteProtectionJobUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IndexAndSnapshots) GetRemoteProtectionJobUidOk() (*UniversalId, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RemoteProtectionJobUid.Get(), o.RemoteProtectionJobUid.IsSet()
}

// HasRemoteProtectionJobUid returns a boolean if a field has been set.
func (o *IndexAndSnapshots) HasRemoteProtectionJobUid() bool {
	if o != nil && o.RemoteProtectionJobUid.IsSet() {
		return true
	}

	return false
}

// SetRemoteProtectionJobUid gets a reference to the given NullableUniversalId and assigns it to the RemoteProtectionJobUid field.
func (o *IndexAndSnapshots) SetRemoteProtectionJobUid(v UniversalId) {
	o.RemoteProtectionJobUid.Set(&v)
}
// SetRemoteProtectionJobUidNil sets the value for RemoteProtectionJobUid to be an explicit nil
func (o *IndexAndSnapshots) SetRemoteProtectionJobUidNil() {
	o.RemoteProtectionJobUid.Set(nil)
}

// UnsetRemoteProtectionJobUid ensures that no value is present for RemoteProtectionJobUid, not even an explicit nil
func (o *IndexAndSnapshots) UnsetRemoteProtectionJobUid() {
	o.RemoteProtectionJobUid.Unset()
}

// GetStartTimeUsecs returns the StartTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IndexAndSnapshots) GetStartTimeUsecs() int64 {
	if o == nil || o.StartTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.StartTimeUsecs.Get()
}

// GetStartTimeUsecsOk returns a tuple with the StartTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IndexAndSnapshots) GetStartTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartTimeUsecs.Get(), o.StartTimeUsecs.IsSet()
}

// HasStartTimeUsecs returns a boolean if a field has been set.
func (o *IndexAndSnapshots) HasStartTimeUsecs() bool {
	if o != nil && o.StartTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetStartTimeUsecs gets a reference to the given NullableInt64 and assigns it to the StartTimeUsecs field.
func (o *IndexAndSnapshots) SetStartTimeUsecs(v int64) {
	o.StartTimeUsecs.Set(&v)
}
// SetStartTimeUsecsNil sets the value for StartTimeUsecs to be an explicit nil
func (o *IndexAndSnapshots) SetStartTimeUsecsNil() {
	o.StartTimeUsecs.Set(nil)
}

// UnsetStartTimeUsecs ensures that no value is present for StartTimeUsecs, not even an explicit nil
func (o *IndexAndSnapshots) UnsetStartTimeUsecs() {
	o.StartTimeUsecs.Unset()
}

// GetViewBoxId returns the ViewBoxId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IndexAndSnapshots) GetViewBoxId() int64 {
	if o == nil || o.ViewBoxId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ViewBoxId.Get()
}

// GetViewBoxIdOk returns a tuple with the ViewBoxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IndexAndSnapshots) GetViewBoxIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewBoxId.Get(), o.ViewBoxId.IsSet()
}

// HasViewBoxId returns a boolean if a field has been set.
func (o *IndexAndSnapshots) HasViewBoxId() bool {
	if o != nil && o.ViewBoxId.IsSet() {
		return true
	}

	return false
}

// SetViewBoxId gets a reference to the given NullableInt64 and assigns it to the ViewBoxId field.
func (o *IndexAndSnapshots) SetViewBoxId(v int64) {
	o.ViewBoxId.Set(&v)
}
// SetViewBoxIdNil sets the value for ViewBoxId to be an explicit nil
func (o *IndexAndSnapshots) SetViewBoxIdNil() {
	o.ViewBoxId.Set(nil)
}

// UnsetViewBoxId ensures that no value is present for ViewBoxId, not even an explicit nil
func (o *IndexAndSnapshots) UnsetViewBoxId() {
	o.ViewBoxId.Unset()
}

func (o IndexAndSnapshots) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ArchiveTaskUid.IsSet() {
		toSerialize["archiveTaskUid"] = o.ArchiveTaskUid.Get()
	}
	if o.EndTimeUsecs.IsSet() {
		toSerialize["endTimeUsecs"] = o.EndTimeUsecs.Get()
	}
	if o.RemoteProtectionJobUid.IsSet() {
		toSerialize["remoteProtectionJobUid"] = o.RemoteProtectionJobUid.Get()
	}
	if o.StartTimeUsecs.IsSet() {
		toSerialize["startTimeUsecs"] = o.StartTimeUsecs.Get()
	}
	if o.ViewBoxId.IsSet() {
		toSerialize["viewBoxId"] = o.ViewBoxId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableIndexAndSnapshots struct {
	value *IndexAndSnapshots
	isSet bool
}

func (v NullableIndexAndSnapshots) Get() *IndexAndSnapshots {
	return v.value
}

func (v *NullableIndexAndSnapshots) Set(val *IndexAndSnapshots) {
	v.value = val
	v.isSet = true
}

func (v NullableIndexAndSnapshots) IsSet() bool {
	return v.isSet
}

func (v *NullableIndexAndSnapshots) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndexAndSnapshots(val *IndexAndSnapshots) *NullableIndexAndSnapshots {
	return &NullableIndexAndSnapshots{value: val, isSet: true}
}

func (v NullableIndexAndSnapshots) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndexAndSnapshots) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


