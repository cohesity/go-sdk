/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// DeployDBInstancesToRDSParams Contains RDS specfic options that can be supplied while restoring the RDS DB instance.
type DeployDBInstancesToRDSParams struct {
	// Whether to enable auto minor version upgrade in the restored DB.
	AutoMinorVersionUpgrade NullableBool `json:"autoMinorVersionUpgrade,omitempty"`
	AvailabilityZone *EntityProto `json:"availabilityZone,omitempty"`
	// Whether to enable copying of tags to snapshots of the DB.
	CopyTagsToSnapshots NullableBool `json:"copyTagsToSnapshots,omitempty"`
	// The DB instance identifier to use for the restored DB. This field is required.
	DbInstanceId NullableString `json:"dbInstanceId,omitempty"`
	DbOptionGroup *EntityProto `json:"dbOptionGroup,omitempty"`
	DbParameterGroup *EntityProto `json:"dbParameterGroup,omitempty"`
	// Port to use for the DB in the restored RDS instance.
	DbPort NullableInt32 `json:"dbPort,omitempty"`
	// Whether to enable IAM authentication for the DB.
	IamDbAuthentication NullableBool `json:"iamDbAuthentication,omitempty"`
	// Whether this is a multi-az deployment or not.
	MultiAzDeployment NullableBool `json:"multiAzDeployment,omitempty"`
	PointInTimeParams *DeployDBInstancesToRDSParamsPointInTimeRestoreParams `json:"pointInTimeParams,omitempty"`
	// Whether this DB will be publicly accessible or not.
	PublicAccessibility NullableBool `json:"publicAccessibility,omitempty"`
}

// NewDeployDBInstancesToRDSParams instantiates a new DeployDBInstancesToRDSParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeployDBInstancesToRDSParams() *DeployDBInstancesToRDSParams {
	this := DeployDBInstancesToRDSParams{}
	return &this
}

// NewDeployDBInstancesToRDSParamsWithDefaults instantiates a new DeployDBInstancesToRDSParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeployDBInstancesToRDSParamsWithDefaults() *DeployDBInstancesToRDSParams {
	this := DeployDBInstancesToRDSParams{}
	return &this
}

// GetAutoMinorVersionUpgrade returns the AutoMinorVersionUpgrade field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeployDBInstancesToRDSParams) GetAutoMinorVersionUpgrade() bool {
	if o == nil || o.AutoMinorVersionUpgrade.Get() == nil {
		var ret bool
		return ret
	}
	return *o.AutoMinorVersionUpgrade.Get()
}

// GetAutoMinorVersionUpgradeOk returns a tuple with the AutoMinorVersionUpgrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeployDBInstancesToRDSParams) GetAutoMinorVersionUpgradeOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AutoMinorVersionUpgrade.Get(), o.AutoMinorVersionUpgrade.IsSet()
}

// HasAutoMinorVersionUpgrade returns a boolean if a field has been set.
func (o *DeployDBInstancesToRDSParams) HasAutoMinorVersionUpgrade() bool {
	if o != nil && o.AutoMinorVersionUpgrade.IsSet() {
		return true
	}

	return false
}

// SetAutoMinorVersionUpgrade gets a reference to the given NullableBool and assigns it to the AutoMinorVersionUpgrade field.
func (o *DeployDBInstancesToRDSParams) SetAutoMinorVersionUpgrade(v bool) {
	o.AutoMinorVersionUpgrade.Set(&v)
}
// SetAutoMinorVersionUpgradeNil sets the value for AutoMinorVersionUpgrade to be an explicit nil
func (o *DeployDBInstancesToRDSParams) SetAutoMinorVersionUpgradeNil() {
	o.AutoMinorVersionUpgrade.Set(nil)
}

// UnsetAutoMinorVersionUpgrade ensures that no value is present for AutoMinorVersionUpgrade, not even an explicit nil
func (o *DeployDBInstancesToRDSParams) UnsetAutoMinorVersionUpgrade() {
	o.AutoMinorVersionUpgrade.Unset()
}

// GetAvailabilityZone returns the AvailabilityZone field value if set, zero value otherwise.
func (o *DeployDBInstancesToRDSParams) GetAvailabilityZone() EntityProto {
	if o == nil || o.AvailabilityZone == nil {
		var ret EntityProto
		return ret
	}
	return *o.AvailabilityZone
}

// GetAvailabilityZoneOk returns a tuple with the AvailabilityZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeployDBInstancesToRDSParams) GetAvailabilityZoneOk() (*EntityProto, bool) {
	if o == nil || o.AvailabilityZone == nil {
		return nil, false
	}
	return o.AvailabilityZone, true
}

// HasAvailabilityZone returns a boolean if a field has been set.
func (o *DeployDBInstancesToRDSParams) HasAvailabilityZone() bool {
	if o != nil && o.AvailabilityZone != nil {
		return true
	}

	return false
}

// SetAvailabilityZone gets a reference to the given EntityProto and assigns it to the AvailabilityZone field.
func (o *DeployDBInstancesToRDSParams) SetAvailabilityZone(v EntityProto) {
	o.AvailabilityZone = &v
}

// GetCopyTagsToSnapshots returns the CopyTagsToSnapshots field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeployDBInstancesToRDSParams) GetCopyTagsToSnapshots() bool {
	if o == nil || o.CopyTagsToSnapshots.Get() == nil {
		var ret bool
		return ret
	}
	return *o.CopyTagsToSnapshots.Get()
}

// GetCopyTagsToSnapshotsOk returns a tuple with the CopyTagsToSnapshots field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeployDBInstancesToRDSParams) GetCopyTagsToSnapshotsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CopyTagsToSnapshots.Get(), o.CopyTagsToSnapshots.IsSet()
}

// HasCopyTagsToSnapshots returns a boolean if a field has been set.
func (o *DeployDBInstancesToRDSParams) HasCopyTagsToSnapshots() bool {
	if o != nil && o.CopyTagsToSnapshots.IsSet() {
		return true
	}

	return false
}

// SetCopyTagsToSnapshots gets a reference to the given NullableBool and assigns it to the CopyTagsToSnapshots field.
func (o *DeployDBInstancesToRDSParams) SetCopyTagsToSnapshots(v bool) {
	o.CopyTagsToSnapshots.Set(&v)
}
// SetCopyTagsToSnapshotsNil sets the value for CopyTagsToSnapshots to be an explicit nil
func (o *DeployDBInstancesToRDSParams) SetCopyTagsToSnapshotsNil() {
	o.CopyTagsToSnapshots.Set(nil)
}

// UnsetCopyTagsToSnapshots ensures that no value is present for CopyTagsToSnapshots, not even an explicit nil
func (o *DeployDBInstancesToRDSParams) UnsetCopyTagsToSnapshots() {
	o.CopyTagsToSnapshots.Unset()
}

// GetDbInstanceId returns the DbInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeployDBInstancesToRDSParams) GetDbInstanceId() string {
	if o == nil || o.DbInstanceId.Get() == nil {
		var ret string
		return ret
	}
	return *o.DbInstanceId.Get()
}

// GetDbInstanceIdOk returns a tuple with the DbInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeployDBInstancesToRDSParams) GetDbInstanceIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DbInstanceId.Get(), o.DbInstanceId.IsSet()
}

// HasDbInstanceId returns a boolean if a field has been set.
func (o *DeployDBInstancesToRDSParams) HasDbInstanceId() bool {
	if o != nil && o.DbInstanceId.IsSet() {
		return true
	}

	return false
}

// SetDbInstanceId gets a reference to the given NullableString and assigns it to the DbInstanceId field.
func (o *DeployDBInstancesToRDSParams) SetDbInstanceId(v string) {
	o.DbInstanceId.Set(&v)
}
// SetDbInstanceIdNil sets the value for DbInstanceId to be an explicit nil
func (o *DeployDBInstancesToRDSParams) SetDbInstanceIdNil() {
	o.DbInstanceId.Set(nil)
}

// UnsetDbInstanceId ensures that no value is present for DbInstanceId, not even an explicit nil
func (o *DeployDBInstancesToRDSParams) UnsetDbInstanceId() {
	o.DbInstanceId.Unset()
}

// GetDbOptionGroup returns the DbOptionGroup field value if set, zero value otherwise.
func (o *DeployDBInstancesToRDSParams) GetDbOptionGroup() EntityProto {
	if o == nil || o.DbOptionGroup == nil {
		var ret EntityProto
		return ret
	}
	return *o.DbOptionGroup
}

// GetDbOptionGroupOk returns a tuple with the DbOptionGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeployDBInstancesToRDSParams) GetDbOptionGroupOk() (*EntityProto, bool) {
	if o == nil || o.DbOptionGroup == nil {
		return nil, false
	}
	return o.DbOptionGroup, true
}

// HasDbOptionGroup returns a boolean if a field has been set.
func (o *DeployDBInstancesToRDSParams) HasDbOptionGroup() bool {
	if o != nil && o.DbOptionGroup != nil {
		return true
	}

	return false
}

// SetDbOptionGroup gets a reference to the given EntityProto and assigns it to the DbOptionGroup field.
func (o *DeployDBInstancesToRDSParams) SetDbOptionGroup(v EntityProto) {
	o.DbOptionGroup = &v
}

// GetDbParameterGroup returns the DbParameterGroup field value if set, zero value otherwise.
func (o *DeployDBInstancesToRDSParams) GetDbParameterGroup() EntityProto {
	if o == nil || o.DbParameterGroup == nil {
		var ret EntityProto
		return ret
	}
	return *o.DbParameterGroup
}

// GetDbParameterGroupOk returns a tuple with the DbParameterGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeployDBInstancesToRDSParams) GetDbParameterGroupOk() (*EntityProto, bool) {
	if o == nil || o.DbParameterGroup == nil {
		return nil, false
	}
	return o.DbParameterGroup, true
}

// HasDbParameterGroup returns a boolean if a field has been set.
func (o *DeployDBInstancesToRDSParams) HasDbParameterGroup() bool {
	if o != nil && o.DbParameterGroup != nil {
		return true
	}

	return false
}

// SetDbParameterGroup gets a reference to the given EntityProto and assigns it to the DbParameterGroup field.
func (o *DeployDBInstancesToRDSParams) SetDbParameterGroup(v EntityProto) {
	o.DbParameterGroup = &v
}

// GetDbPort returns the DbPort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeployDBInstancesToRDSParams) GetDbPort() int32 {
	if o == nil || o.DbPort.Get() == nil {
		var ret int32
		return ret
	}
	return *o.DbPort.Get()
}

// GetDbPortOk returns a tuple with the DbPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeployDBInstancesToRDSParams) GetDbPortOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DbPort.Get(), o.DbPort.IsSet()
}

// HasDbPort returns a boolean if a field has been set.
func (o *DeployDBInstancesToRDSParams) HasDbPort() bool {
	if o != nil && o.DbPort.IsSet() {
		return true
	}

	return false
}

// SetDbPort gets a reference to the given NullableInt32 and assigns it to the DbPort field.
func (o *DeployDBInstancesToRDSParams) SetDbPort(v int32) {
	o.DbPort.Set(&v)
}
// SetDbPortNil sets the value for DbPort to be an explicit nil
func (o *DeployDBInstancesToRDSParams) SetDbPortNil() {
	o.DbPort.Set(nil)
}

// UnsetDbPort ensures that no value is present for DbPort, not even an explicit nil
func (o *DeployDBInstancesToRDSParams) UnsetDbPort() {
	o.DbPort.Unset()
}

// GetIamDbAuthentication returns the IamDbAuthentication field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeployDBInstancesToRDSParams) GetIamDbAuthentication() bool {
	if o == nil || o.IamDbAuthentication.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IamDbAuthentication.Get()
}

// GetIamDbAuthenticationOk returns a tuple with the IamDbAuthentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeployDBInstancesToRDSParams) GetIamDbAuthenticationOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IamDbAuthentication.Get(), o.IamDbAuthentication.IsSet()
}

// HasIamDbAuthentication returns a boolean if a field has been set.
func (o *DeployDBInstancesToRDSParams) HasIamDbAuthentication() bool {
	if o != nil && o.IamDbAuthentication.IsSet() {
		return true
	}

	return false
}

// SetIamDbAuthentication gets a reference to the given NullableBool and assigns it to the IamDbAuthentication field.
func (o *DeployDBInstancesToRDSParams) SetIamDbAuthentication(v bool) {
	o.IamDbAuthentication.Set(&v)
}
// SetIamDbAuthenticationNil sets the value for IamDbAuthentication to be an explicit nil
func (o *DeployDBInstancesToRDSParams) SetIamDbAuthenticationNil() {
	o.IamDbAuthentication.Set(nil)
}

// UnsetIamDbAuthentication ensures that no value is present for IamDbAuthentication, not even an explicit nil
func (o *DeployDBInstancesToRDSParams) UnsetIamDbAuthentication() {
	o.IamDbAuthentication.Unset()
}

// GetMultiAzDeployment returns the MultiAzDeployment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeployDBInstancesToRDSParams) GetMultiAzDeployment() bool {
	if o == nil || o.MultiAzDeployment.Get() == nil {
		var ret bool
		return ret
	}
	return *o.MultiAzDeployment.Get()
}

// GetMultiAzDeploymentOk returns a tuple with the MultiAzDeployment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeployDBInstancesToRDSParams) GetMultiAzDeploymentOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MultiAzDeployment.Get(), o.MultiAzDeployment.IsSet()
}

// HasMultiAzDeployment returns a boolean if a field has been set.
func (o *DeployDBInstancesToRDSParams) HasMultiAzDeployment() bool {
	if o != nil && o.MultiAzDeployment.IsSet() {
		return true
	}

	return false
}

// SetMultiAzDeployment gets a reference to the given NullableBool and assigns it to the MultiAzDeployment field.
func (o *DeployDBInstancesToRDSParams) SetMultiAzDeployment(v bool) {
	o.MultiAzDeployment.Set(&v)
}
// SetMultiAzDeploymentNil sets the value for MultiAzDeployment to be an explicit nil
func (o *DeployDBInstancesToRDSParams) SetMultiAzDeploymentNil() {
	o.MultiAzDeployment.Set(nil)
}

// UnsetMultiAzDeployment ensures that no value is present for MultiAzDeployment, not even an explicit nil
func (o *DeployDBInstancesToRDSParams) UnsetMultiAzDeployment() {
	o.MultiAzDeployment.Unset()
}

// GetPointInTimeParams returns the PointInTimeParams field value if set, zero value otherwise.
func (o *DeployDBInstancesToRDSParams) GetPointInTimeParams() DeployDBInstancesToRDSParamsPointInTimeRestoreParams {
	if o == nil || o.PointInTimeParams == nil {
		var ret DeployDBInstancesToRDSParamsPointInTimeRestoreParams
		return ret
	}
	return *o.PointInTimeParams
}

// GetPointInTimeParamsOk returns a tuple with the PointInTimeParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeployDBInstancesToRDSParams) GetPointInTimeParamsOk() (*DeployDBInstancesToRDSParamsPointInTimeRestoreParams, bool) {
	if o == nil || o.PointInTimeParams == nil {
		return nil, false
	}
	return o.PointInTimeParams, true
}

// HasPointInTimeParams returns a boolean if a field has been set.
func (o *DeployDBInstancesToRDSParams) HasPointInTimeParams() bool {
	if o != nil && o.PointInTimeParams != nil {
		return true
	}

	return false
}

// SetPointInTimeParams gets a reference to the given DeployDBInstancesToRDSParamsPointInTimeRestoreParams and assigns it to the PointInTimeParams field.
func (o *DeployDBInstancesToRDSParams) SetPointInTimeParams(v DeployDBInstancesToRDSParamsPointInTimeRestoreParams) {
	o.PointInTimeParams = &v
}

// GetPublicAccessibility returns the PublicAccessibility field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeployDBInstancesToRDSParams) GetPublicAccessibility() bool {
	if o == nil || o.PublicAccessibility.Get() == nil {
		var ret bool
		return ret
	}
	return *o.PublicAccessibility.Get()
}

// GetPublicAccessibilityOk returns a tuple with the PublicAccessibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeployDBInstancesToRDSParams) GetPublicAccessibilityOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PublicAccessibility.Get(), o.PublicAccessibility.IsSet()
}

// HasPublicAccessibility returns a boolean if a field has been set.
func (o *DeployDBInstancesToRDSParams) HasPublicAccessibility() bool {
	if o != nil && o.PublicAccessibility.IsSet() {
		return true
	}

	return false
}

// SetPublicAccessibility gets a reference to the given NullableBool and assigns it to the PublicAccessibility field.
func (o *DeployDBInstancesToRDSParams) SetPublicAccessibility(v bool) {
	o.PublicAccessibility.Set(&v)
}
// SetPublicAccessibilityNil sets the value for PublicAccessibility to be an explicit nil
func (o *DeployDBInstancesToRDSParams) SetPublicAccessibilityNil() {
	o.PublicAccessibility.Set(nil)
}

// UnsetPublicAccessibility ensures that no value is present for PublicAccessibility, not even an explicit nil
func (o *DeployDBInstancesToRDSParams) UnsetPublicAccessibility() {
	o.PublicAccessibility.Unset()
}

func (o DeployDBInstancesToRDSParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AutoMinorVersionUpgrade.IsSet() {
		toSerialize["autoMinorVersionUpgrade"] = o.AutoMinorVersionUpgrade.Get()
	}
	if o.AvailabilityZone != nil {
		toSerialize["availabilityZone"] = o.AvailabilityZone
	}
	if o.CopyTagsToSnapshots.IsSet() {
		toSerialize["copyTagsToSnapshots"] = o.CopyTagsToSnapshots.Get()
	}
	if o.DbInstanceId.IsSet() {
		toSerialize["dbInstanceId"] = o.DbInstanceId.Get()
	}
	if o.DbOptionGroup != nil {
		toSerialize["dbOptionGroup"] = o.DbOptionGroup
	}
	if o.DbParameterGroup != nil {
		toSerialize["dbParameterGroup"] = o.DbParameterGroup
	}
	if o.DbPort.IsSet() {
		toSerialize["dbPort"] = o.DbPort.Get()
	}
	if o.IamDbAuthentication.IsSet() {
		toSerialize["iamDbAuthentication"] = o.IamDbAuthentication.Get()
	}
	if o.MultiAzDeployment.IsSet() {
		toSerialize["multiAzDeployment"] = o.MultiAzDeployment.Get()
	}
	if o.PointInTimeParams != nil {
		toSerialize["pointInTimeParams"] = o.PointInTimeParams
	}
	if o.PublicAccessibility.IsSet() {
		toSerialize["publicAccessibility"] = o.PublicAccessibility.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDeployDBInstancesToRDSParams struct {
	value *DeployDBInstancesToRDSParams
	isSet bool
}

func (v NullableDeployDBInstancesToRDSParams) Get() *DeployDBInstancesToRDSParams {
	return v.value
}

func (v *NullableDeployDBInstancesToRDSParams) Set(val *DeployDBInstancesToRDSParams) {
	v.value = val
	v.isSet = true
}

func (v NullableDeployDBInstancesToRDSParams) IsSet() bool {
	return v.isSet
}

func (v *NullableDeployDBInstancesToRDSParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeployDBInstancesToRDSParams(val *DeployDBInstancesToRDSParams) *NullableDeployDBInstancesToRDSParams {
	return &NullableDeployDBInstancesToRDSParams{value: val, isSet: true}
}

func (v NullableDeployDBInstancesToRDSParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeployDBInstancesToRDSParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


