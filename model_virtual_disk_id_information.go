/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// VirtualDiskIdInformation Specifies information about virtual disk which includes disk uuid, controller type, bus number and unit number.
type VirtualDiskIdInformation struct {
	// Specifies the Id of the controller bus that controls the disk.
	BusNumber NullableInt64 `json:"busNumber,omitempty"`
	// Specifies the controller type like SCSI, or IDE etc.
	ControllerType NullableString `json:"controllerType,omitempty"`
	// Specifies the uuid of the virtual disk.
	DiskId NullableString `json:"diskId,omitempty"`
	// Specifies the disk file name. This is the VMDK name and not the flat file name.
	UnitNumber NullableInt64 `json:"unitNumber,omitempty"`
}

// NewVirtualDiskIdInformation instantiates a new VirtualDiskIdInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualDiskIdInformation() *VirtualDiskIdInformation {
	this := VirtualDiskIdInformation{}
	return &this
}

// NewVirtualDiskIdInformationWithDefaults instantiates a new VirtualDiskIdInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualDiskIdInformationWithDefaults() *VirtualDiskIdInformation {
	this := VirtualDiskIdInformation{}
	return &this
}

// GetBusNumber returns the BusNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualDiskIdInformation) GetBusNumber() int64 {
	if o == nil || o.BusNumber.Get() == nil {
		var ret int64
		return ret
	}
	return *o.BusNumber.Get()
}

// GetBusNumberOk returns a tuple with the BusNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualDiskIdInformation) GetBusNumberOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BusNumber.Get(), o.BusNumber.IsSet()
}

// HasBusNumber returns a boolean if a field has been set.
func (o *VirtualDiskIdInformation) HasBusNumber() bool {
	if o != nil && o.BusNumber.IsSet() {
		return true
	}

	return false
}

// SetBusNumber gets a reference to the given NullableInt64 and assigns it to the BusNumber field.
func (o *VirtualDiskIdInformation) SetBusNumber(v int64) {
	o.BusNumber.Set(&v)
}
// SetBusNumberNil sets the value for BusNumber to be an explicit nil
func (o *VirtualDiskIdInformation) SetBusNumberNil() {
	o.BusNumber.Set(nil)
}

// UnsetBusNumber ensures that no value is present for BusNumber, not even an explicit nil
func (o *VirtualDiskIdInformation) UnsetBusNumber() {
	o.BusNumber.Unset()
}

// GetControllerType returns the ControllerType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualDiskIdInformation) GetControllerType() string {
	if o == nil || o.ControllerType.Get() == nil {
		var ret string
		return ret
	}
	return *o.ControllerType.Get()
}

// GetControllerTypeOk returns a tuple with the ControllerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualDiskIdInformation) GetControllerTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ControllerType.Get(), o.ControllerType.IsSet()
}

// HasControllerType returns a boolean if a field has been set.
func (o *VirtualDiskIdInformation) HasControllerType() bool {
	if o != nil && o.ControllerType.IsSet() {
		return true
	}

	return false
}

// SetControllerType gets a reference to the given NullableString and assigns it to the ControllerType field.
func (o *VirtualDiskIdInformation) SetControllerType(v string) {
	o.ControllerType.Set(&v)
}
// SetControllerTypeNil sets the value for ControllerType to be an explicit nil
func (o *VirtualDiskIdInformation) SetControllerTypeNil() {
	o.ControllerType.Set(nil)
}

// UnsetControllerType ensures that no value is present for ControllerType, not even an explicit nil
func (o *VirtualDiskIdInformation) UnsetControllerType() {
	o.ControllerType.Unset()
}

// GetDiskId returns the DiskId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualDiskIdInformation) GetDiskId() string {
	if o == nil || o.DiskId.Get() == nil {
		var ret string
		return ret
	}
	return *o.DiskId.Get()
}

// GetDiskIdOk returns a tuple with the DiskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualDiskIdInformation) GetDiskIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DiskId.Get(), o.DiskId.IsSet()
}

// HasDiskId returns a boolean if a field has been set.
func (o *VirtualDiskIdInformation) HasDiskId() bool {
	if o != nil && o.DiskId.IsSet() {
		return true
	}

	return false
}

// SetDiskId gets a reference to the given NullableString and assigns it to the DiskId field.
func (o *VirtualDiskIdInformation) SetDiskId(v string) {
	o.DiskId.Set(&v)
}
// SetDiskIdNil sets the value for DiskId to be an explicit nil
func (o *VirtualDiskIdInformation) SetDiskIdNil() {
	o.DiskId.Set(nil)
}

// UnsetDiskId ensures that no value is present for DiskId, not even an explicit nil
func (o *VirtualDiskIdInformation) UnsetDiskId() {
	o.DiskId.Unset()
}

// GetUnitNumber returns the UnitNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualDiskIdInformation) GetUnitNumber() int64 {
	if o == nil || o.UnitNumber.Get() == nil {
		var ret int64
		return ret
	}
	return *o.UnitNumber.Get()
}

// GetUnitNumberOk returns a tuple with the UnitNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualDiskIdInformation) GetUnitNumberOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UnitNumber.Get(), o.UnitNumber.IsSet()
}

// HasUnitNumber returns a boolean if a field has been set.
func (o *VirtualDiskIdInformation) HasUnitNumber() bool {
	if o != nil && o.UnitNumber.IsSet() {
		return true
	}

	return false
}

// SetUnitNumber gets a reference to the given NullableInt64 and assigns it to the UnitNumber field.
func (o *VirtualDiskIdInformation) SetUnitNumber(v int64) {
	o.UnitNumber.Set(&v)
}
// SetUnitNumberNil sets the value for UnitNumber to be an explicit nil
func (o *VirtualDiskIdInformation) SetUnitNumberNil() {
	o.UnitNumber.Set(nil)
}

// UnsetUnitNumber ensures that no value is present for UnitNumber, not even an explicit nil
func (o *VirtualDiskIdInformation) UnsetUnitNumber() {
	o.UnitNumber.Unset()
}

func (o VirtualDiskIdInformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BusNumber.IsSet() {
		toSerialize["busNumber"] = o.BusNumber.Get()
	}
	if o.ControllerType.IsSet() {
		toSerialize["controllerType"] = o.ControllerType.Get()
	}
	if o.DiskId.IsSet() {
		toSerialize["diskId"] = o.DiskId.Get()
	}
	if o.UnitNumber.IsSet() {
		toSerialize["unitNumber"] = o.UnitNumber.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableVirtualDiskIdInformation struct {
	value *VirtualDiskIdInformation
	isSet bool
}

func (v NullableVirtualDiskIdInformation) Get() *VirtualDiskIdInformation {
	return v.value
}

func (v *NullableVirtualDiskIdInformation) Set(val *VirtualDiskIdInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualDiskIdInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualDiskIdInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualDiskIdInformation(val *VirtualDiskIdInformation) *NullableVirtualDiskIdInformation {
	return &NullableVirtualDiskIdInformation{value: val, isSet: true}
}

func (v NullableVirtualDiskIdInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualDiskIdInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


