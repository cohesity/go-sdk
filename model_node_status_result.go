/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// NodeStatusResult Specifies the current status of a Node in the cluster.
type NodeStatusResult struct {
	// Specifies the active operation on the Node if there is one. 'kNone' specifies that there is no active operation on the Node. 'kDestroyCluster' specifies that the Cluster which the Node is a part of is currently being destroyed. 'kUpgradeCluster' specifies that the Cluster which the Node is a part of is currently being upgraded to a new software package. 'kRestartCluster' specifies that the Cluster which the Node is a part of is currently being restarted. 'kCreateCluster' specifies that the Node is currently being used to create a new Cluster. 'kExpandCluster' specifies that the Node is currently being added to a Cluster or being used to assist in adding another Node to a Cluster. 'kUpgradeNode' specifies that the Node is currently being upgraded to a new software package. 'kRemoveNode' specifies that the Node is currently being removed from a Cluster or that it is assisting in removing another Node from a Cluster. 'kAddDisks' specifies that the Node is being used to assist in adding disks to the Cluster. 'kMarkDiskOffline' specifies that the Node is being use to assist in marking a disk in the Cluster as offline.
	ActiveOperation NullableString `json:"activeOperation,omitempty"`
	// Specifies the Cluster ID if the Node is part of a Cluster.
	ClusterId NullableInt64 `json:"clusterId,omitempty"`
	// Specifies the ID of the Node.
	Id NullableInt64 `json:"id,omitempty"`
	// Specifies whether or not the Node is part of a Cluster.
	InCluster NullableBool `json:"inCluster,omitempty"`
	// Specifies the Incarnation ID if the Node is part of a Cluster.
	IncarnationId NullableInt64 `json:"incarnationId,omitempty"`
	// Specifies the IP address of the Node.
	Ip NullableString `json:"ip,omitempty"`
	// Specifies the time of the last upgrade in seconds since the epoch.
	LastUpgradeTimeSecs NullableInt64 `json:"lastUpgradeTimeSecs,omitempty"`
	// Specifies whether or not this node is marked for removal.
	MarkedForRemoval NullableBool `json:"markedForRemoval,omitempty"`
	// Specifies an optional message describing the current state of the Node.
	Message NullableString `json:"message,omitempty"`
	// Specifies the reason for the removal operation if there is a removal operation going on. 'kUnknown' specifies that the removal reason is not known. 'kAutoHealthCheck' specifies that an internal health check found problems with the Node. 'kUserGracefulRemoval' specifies that the user requested a graceful removal. 'kUserAvoidAccess' specifies that the user requested to avoid access to this Node. 'kUserGracefulNodeRemoval' specifies that the user requested a graceful removal for all of the disks in this Node. 'kUserRemoveDownNode' specifies that the user requested a graceful removal of the Node while it is down.
	RemovalReason NullableString `json:"removalReason,omitempty"`
	// Specifies the list of services running on the cluster and their process Ids.
	Services []ServiceProcessEntry `json:"services,omitempty"`
	// Specifies the version of the software running on the Node.
	SoftwareVersion NullableString `json:"softwareVersion,omitempty"`
	// Uptime of node.
	Uptime NullableString `json:"uptime,omitempty"`
}

// NewNodeStatusResult instantiates a new NodeStatusResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeStatusResult() *NodeStatusResult {
	this := NodeStatusResult{}
	return &this
}

// NewNodeStatusResultWithDefaults instantiates a new NodeStatusResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeStatusResultWithDefaults() *NodeStatusResult {
	this := NodeStatusResult{}
	return &this
}

// GetActiveOperation returns the ActiveOperation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeStatusResult) GetActiveOperation() string {
	if o == nil || o.ActiveOperation.Get() == nil {
		var ret string
		return ret
	}
	return *o.ActiveOperation.Get()
}

// GetActiveOperationOk returns a tuple with the ActiveOperation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeStatusResult) GetActiveOperationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ActiveOperation.Get(), o.ActiveOperation.IsSet()
}

// HasActiveOperation returns a boolean if a field has been set.
func (o *NodeStatusResult) HasActiveOperation() bool {
	if o != nil && o.ActiveOperation.IsSet() {
		return true
	}

	return false
}

// SetActiveOperation gets a reference to the given NullableString and assigns it to the ActiveOperation field.
func (o *NodeStatusResult) SetActiveOperation(v string) {
	o.ActiveOperation.Set(&v)
}
// SetActiveOperationNil sets the value for ActiveOperation to be an explicit nil
func (o *NodeStatusResult) SetActiveOperationNil() {
	o.ActiveOperation.Set(nil)
}

// UnsetActiveOperation ensures that no value is present for ActiveOperation, not even an explicit nil
func (o *NodeStatusResult) UnsetActiveOperation() {
	o.ActiveOperation.Unset()
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeStatusResult) GetClusterId() int64 {
	if o == nil || o.ClusterId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ClusterId.Get()
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeStatusResult) GetClusterIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterId.Get(), o.ClusterId.IsSet()
}

// HasClusterId returns a boolean if a field has been set.
func (o *NodeStatusResult) HasClusterId() bool {
	if o != nil && o.ClusterId.IsSet() {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given NullableInt64 and assigns it to the ClusterId field.
func (o *NodeStatusResult) SetClusterId(v int64) {
	o.ClusterId.Set(&v)
}
// SetClusterIdNil sets the value for ClusterId to be an explicit nil
func (o *NodeStatusResult) SetClusterIdNil() {
	o.ClusterId.Set(nil)
}

// UnsetClusterId ensures that no value is present for ClusterId, not even an explicit nil
func (o *NodeStatusResult) UnsetClusterId() {
	o.ClusterId.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeStatusResult) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeStatusResult) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *NodeStatusResult) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *NodeStatusResult) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *NodeStatusResult) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *NodeStatusResult) UnsetId() {
	o.Id.Unset()
}

// GetInCluster returns the InCluster field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeStatusResult) GetInCluster() bool {
	if o == nil || o.InCluster.Get() == nil {
		var ret bool
		return ret
	}
	return *o.InCluster.Get()
}

// GetInClusterOk returns a tuple with the InCluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeStatusResult) GetInClusterOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InCluster.Get(), o.InCluster.IsSet()
}

// HasInCluster returns a boolean if a field has been set.
func (o *NodeStatusResult) HasInCluster() bool {
	if o != nil && o.InCluster.IsSet() {
		return true
	}

	return false
}

// SetInCluster gets a reference to the given NullableBool and assigns it to the InCluster field.
func (o *NodeStatusResult) SetInCluster(v bool) {
	o.InCluster.Set(&v)
}
// SetInClusterNil sets the value for InCluster to be an explicit nil
func (o *NodeStatusResult) SetInClusterNil() {
	o.InCluster.Set(nil)
}

// UnsetInCluster ensures that no value is present for InCluster, not even an explicit nil
func (o *NodeStatusResult) UnsetInCluster() {
	o.InCluster.Unset()
}

// GetIncarnationId returns the IncarnationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeStatusResult) GetIncarnationId() int64 {
	if o == nil || o.IncarnationId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.IncarnationId.Get()
}

// GetIncarnationIdOk returns a tuple with the IncarnationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeStatusResult) GetIncarnationIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IncarnationId.Get(), o.IncarnationId.IsSet()
}

// HasIncarnationId returns a boolean if a field has been set.
func (o *NodeStatusResult) HasIncarnationId() bool {
	if o != nil && o.IncarnationId.IsSet() {
		return true
	}

	return false
}

// SetIncarnationId gets a reference to the given NullableInt64 and assigns it to the IncarnationId field.
func (o *NodeStatusResult) SetIncarnationId(v int64) {
	o.IncarnationId.Set(&v)
}
// SetIncarnationIdNil sets the value for IncarnationId to be an explicit nil
func (o *NodeStatusResult) SetIncarnationIdNil() {
	o.IncarnationId.Set(nil)
}

// UnsetIncarnationId ensures that no value is present for IncarnationId, not even an explicit nil
func (o *NodeStatusResult) UnsetIncarnationId() {
	o.IncarnationId.Unset()
}

// GetIp returns the Ip field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeStatusResult) GetIp() string {
	if o == nil || o.Ip.Get() == nil {
		var ret string
		return ret
	}
	return *o.Ip.Get()
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeStatusResult) GetIpOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Ip.Get(), o.Ip.IsSet()
}

// HasIp returns a boolean if a field has been set.
func (o *NodeStatusResult) HasIp() bool {
	if o != nil && o.Ip.IsSet() {
		return true
	}

	return false
}

// SetIp gets a reference to the given NullableString and assigns it to the Ip field.
func (o *NodeStatusResult) SetIp(v string) {
	o.Ip.Set(&v)
}
// SetIpNil sets the value for Ip to be an explicit nil
func (o *NodeStatusResult) SetIpNil() {
	o.Ip.Set(nil)
}

// UnsetIp ensures that no value is present for Ip, not even an explicit nil
func (o *NodeStatusResult) UnsetIp() {
	o.Ip.Unset()
}

// GetLastUpgradeTimeSecs returns the LastUpgradeTimeSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeStatusResult) GetLastUpgradeTimeSecs() int64 {
	if o == nil || o.LastUpgradeTimeSecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LastUpgradeTimeSecs.Get()
}

// GetLastUpgradeTimeSecsOk returns a tuple with the LastUpgradeTimeSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeStatusResult) GetLastUpgradeTimeSecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastUpgradeTimeSecs.Get(), o.LastUpgradeTimeSecs.IsSet()
}

// HasLastUpgradeTimeSecs returns a boolean if a field has been set.
func (o *NodeStatusResult) HasLastUpgradeTimeSecs() bool {
	if o != nil && o.LastUpgradeTimeSecs.IsSet() {
		return true
	}

	return false
}

// SetLastUpgradeTimeSecs gets a reference to the given NullableInt64 and assigns it to the LastUpgradeTimeSecs field.
func (o *NodeStatusResult) SetLastUpgradeTimeSecs(v int64) {
	o.LastUpgradeTimeSecs.Set(&v)
}
// SetLastUpgradeTimeSecsNil sets the value for LastUpgradeTimeSecs to be an explicit nil
func (o *NodeStatusResult) SetLastUpgradeTimeSecsNil() {
	o.LastUpgradeTimeSecs.Set(nil)
}

// UnsetLastUpgradeTimeSecs ensures that no value is present for LastUpgradeTimeSecs, not even an explicit nil
func (o *NodeStatusResult) UnsetLastUpgradeTimeSecs() {
	o.LastUpgradeTimeSecs.Unset()
}

// GetMarkedForRemoval returns the MarkedForRemoval field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeStatusResult) GetMarkedForRemoval() bool {
	if o == nil || o.MarkedForRemoval.Get() == nil {
		var ret bool
		return ret
	}
	return *o.MarkedForRemoval.Get()
}

// GetMarkedForRemovalOk returns a tuple with the MarkedForRemoval field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeStatusResult) GetMarkedForRemovalOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MarkedForRemoval.Get(), o.MarkedForRemoval.IsSet()
}

// HasMarkedForRemoval returns a boolean if a field has been set.
func (o *NodeStatusResult) HasMarkedForRemoval() bool {
	if o != nil && o.MarkedForRemoval.IsSet() {
		return true
	}

	return false
}

// SetMarkedForRemoval gets a reference to the given NullableBool and assigns it to the MarkedForRemoval field.
func (o *NodeStatusResult) SetMarkedForRemoval(v bool) {
	o.MarkedForRemoval.Set(&v)
}
// SetMarkedForRemovalNil sets the value for MarkedForRemoval to be an explicit nil
func (o *NodeStatusResult) SetMarkedForRemovalNil() {
	o.MarkedForRemoval.Set(nil)
}

// UnsetMarkedForRemoval ensures that no value is present for MarkedForRemoval, not even an explicit nil
func (o *NodeStatusResult) UnsetMarkedForRemoval() {
	o.MarkedForRemoval.Unset()
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeStatusResult) GetMessage() string {
	if o == nil || o.Message.Get() == nil {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeStatusResult) GetMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *NodeStatusResult) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *NodeStatusResult) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *NodeStatusResult) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *NodeStatusResult) UnsetMessage() {
	o.Message.Unset()
}

// GetRemovalReason returns the RemovalReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeStatusResult) GetRemovalReason() string {
	if o == nil || o.RemovalReason.Get() == nil {
		var ret string
		return ret
	}
	return *o.RemovalReason.Get()
}

// GetRemovalReasonOk returns a tuple with the RemovalReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeStatusResult) GetRemovalReasonOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RemovalReason.Get(), o.RemovalReason.IsSet()
}

// HasRemovalReason returns a boolean if a field has been set.
func (o *NodeStatusResult) HasRemovalReason() bool {
	if o != nil && o.RemovalReason.IsSet() {
		return true
	}

	return false
}

// SetRemovalReason gets a reference to the given NullableString and assigns it to the RemovalReason field.
func (o *NodeStatusResult) SetRemovalReason(v string) {
	o.RemovalReason.Set(&v)
}
// SetRemovalReasonNil sets the value for RemovalReason to be an explicit nil
func (o *NodeStatusResult) SetRemovalReasonNil() {
	o.RemovalReason.Set(nil)
}

// UnsetRemovalReason ensures that no value is present for RemovalReason, not even an explicit nil
func (o *NodeStatusResult) UnsetRemovalReason() {
	o.RemovalReason.Unset()
}

// GetServices returns the Services field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeStatusResult) GetServices() []ServiceProcessEntry {
	if o == nil  {
		var ret []ServiceProcessEntry
		return ret
	}
	return o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeStatusResult) GetServicesOk() (*[]ServiceProcessEntry, bool) {
	if o == nil || o.Services == nil {
		return nil, false
	}
	return &o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *NodeStatusResult) HasServices() bool {
	if o != nil && o.Services != nil {
		return true
	}

	return false
}

// SetServices gets a reference to the given []ServiceProcessEntry and assigns it to the Services field.
func (o *NodeStatusResult) SetServices(v []ServiceProcessEntry) {
	o.Services = v
}

// GetSoftwareVersion returns the SoftwareVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeStatusResult) GetSoftwareVersion() string {
	if o == nil || o.SoftwareVersion.Get() == nil {
		var ret string
		return ret
	}
	return *o.SoftwareVersion.Get()
}

// GetSoftwareVersionOk returns a tuple with the SoftwareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeStatusResult) GetSoftwareVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SoftwareVersion.Get(), o.SoftwareVersion.IsSet()
}

// HasSoftwareVersion returns a boolean if a field has been set.
func (o *NodeStatusResult) HasSoftwareVersion() bool {
	if o != nil && o.SoftwareVersion.IsSet() {
		return true
	}

	return false
}

// SetSoftwareVersion gets a reference to the given NullableString and assigns it to the SoftwareVersion field.
func (o *NodeStatusResult) SetSoftwareVersion(v string) {
	o.SoftwareVersion.Set(&v)
}
// SetSoftwareVersionNil sets the value for SoftwareVersion to be an explicit nil
func (o *NodeStatusResult) SetSoftwareVersionNil() {
	o.SoftwareVersion.Set(nil)
}

// UnsetSoftwareVersion ensures that no value is present for SoftwareVersion, not even an explicit nil
func (o *NodeStatusResult) UnsetSoftwareVersion() {
	o.SoftwareVersion.Unset()
}

// GetUptime returns the Uptime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeStatusResult) GetUptime() string {
	if o == nil || o.Uptime.Get() == nil {
		var ret string
		return ret
	}
	return *o.Uptime.Get()
}

// GetUptimeOk returns a tuple with the Uptime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeStatusResult) GetUptimeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Uptime.Get(), o.Uptime.IsSet()
}

// HasUptime returns a boolean if a field has been set.
func (o *NodeStatusResult) HasUptime() bool {
	if o != nil && o.Uptime.IsSet() {
		return true
	}

	return false
}

// SetUptime gets a reference to the given NullableString and assigns it to the Uptime field.
func (o *NodeStatusResult) SetUptime(v string) {
	o.Uptime.Set(&v)
}
// SetUptimeNil sets the value for Uptime to be an explicit nil
func (o *NodeStatusResult) SetUptimeNil() {
	o.Uptime.Set(nil)
}

// UnsetUptime ensures that no value is present for Uptime, not even an explicit nil
func (o *NodeStatusResult) UnsetUptime() {
	o.Uptime.Unset()
}

func (o NodeStatusResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ActiveOperation.IsSet() {
		toSerialize["activeOperation"] = o.ActiveOperation.Get()
	}
	if o.ClusterId.IsSet() {
		toSerialize["clusterId"] = o.ClusterId.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.InCluster.IsSet() {
		toSerialize["inCluster"] = o.InCluster.Get()
	}
	if o.IncarnationId.IsSet() {
		toSerialize["incarnationId"] = o.IncarnationId.Get()
	}
	if o.Ip.IsSet() {
		toSerialize["ip"] = o.Ip.Get()
	}
	if o.LastUpgradeTimeSecs.IsSet() {
		toSerialize["lastUpgradeTimeSecs"] = o.LastUpgradeTimeSecs.Get()
	}
	if o.MarkedForRemoval.IsSet() {
		toSerialize["markedForRemoval"] = o.MarkedForRemoval.Get()
	}
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	if o.RemovalReason.IsSet() {
		toSerialize["removalReason"] = o.RemovalReason.Get()
	}
	if o.Services != nil {
		toSerialize["services"] = o.Services
	}
	if o.SoftwareVersion.IsSet() {
		toSerialize["softwareVersion"] = o.SoftwareVersion.Get()
	}
	if o.Uptime.IsSet() {
		toSerialize["uptime"] = o.Uptime.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableNodeStatusResult struct {
	value *NodeStatusResult
	isSet bool
}

func (v NullableNodeStatusResult) Get() *NodeStatusResult {
	return v.value
}

func (v *NullableNodeStatusResult) Set(val *NodeStatusResult) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeStatusResult) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeStatusResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeStatusResult(val *NodeStatusResult) *NullableNodeStatusResult {
	return &NullableNodeStatusResult{value: val, isSet: true}
}

func (v NullableNodeStatusResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeStatusResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


