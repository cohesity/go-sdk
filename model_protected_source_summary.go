/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ProtectedSourceSummary ProtectedSourceSummary is the summary of all the Protection Runs for the Protection Jobs using the Specified Protection Policy. This is only populated for a policy of type kRPO.
type ProtectedSourceSummary struct {
	BackupRun *BackupRun `json:"backupRun,omitempty"`
	// Specifies details about the Copy tasks of the Job Run. A Copy task copies the captured snapshots to an external target or a Remote Cohesity Cluster.
	CopyRuns []CopyRun `json:"copyRuns,omitempty"`
	// Specifies the status of the backup job.
	IsPaused NullableBool `json:"isPaused,omitempty"`
	// Specifies the time at which the next Protection Run is scheduled for the given Protection Source in Unix epoch Time (microseconds).
	NextProtectionRunTimeUsecs NullableInt64 `json:"nextProtectionRunTimeUsecs,omitempty"`
	ProtectedSourceUid *UniversalId `json:"protectedSourceUid,omitempty"`
	ProtectionSource *ProtectionSource `json:"protectionSource,omitempty"`
	// Specifies additional special settings for a single Protected Source.
	SourceParameters []SourceSpecialParameter `json:"sourceParameters,omitempty"`
}

// NewProtectedSourceSummary instantiates a new ProtectedSourceSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtectedSourceSummary() *ProtectedSourceSummary {
	this := ProtectedSourceSummary{}
	return &this
}

// NewProtectedSourceSummaryWithDefaults instantiates a new ProtectedSourceSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtectedSourceSummaryWithDefaults() *ProtectedSourceSummary {
	this := ProtectedSourceSummary{}
	return &this
}

// GetBackupRun returns the BackupRun field value if set, zero value otherwise.
func (o *ProtectedSourceSummary) GetBackupRun() BackupRun {
	if o == nil || o.BackupRun == nil {
		var ret BackupRun
		return ret
	}
	return *o.BackupRun
}

// GetBackupRunOk returns a tuple with the BackupRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectedSourceSummary) GetBackupRunOk() (*BackupRun, bool) {
	if o == nil || o.BackupRun == nil {
		return nil, false
	}
	return o.BackupRun, true
}

// HasBackupRun returns a boolean if a field has been set.
func (o *ProtectedSourceSummary) HasBackupRun() bool {
	if o != nil && o.BackupRun != nil {
		return true
	}

	return false
}

// SetBackupRun gets a reference to the given BackupRun and assigns it to the BackupRun field.
func (o *ProtectedSourceSummary) SetBackupRun(v BackupRun) {
	o.BackupRun = &v
}

// GetCopyRuns returns the CopyRuns field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectedSourceSummary) GetCopyRuns() []CopyRun {
	if o == nil  {
		var ret []CopyRun
		return ret
	}
	return o.CopyRuns
}

// GetCopyRunsOk returns a tuple with the CopyRuns field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectedSourceSummary) GetCopyRunsOk() (*[]CopyRun, bool) {
	if o == nil || o.CopyRuns == nil {
		return nil, false
	}
	return &o.CopyRuns, true
}

// HasCopyRuns returns a boolean if a field has been set.
func (o *ProtectedSourceSummary) HasCopyRuns() bool {
	if o != nil && o.CopyRuns != nil {
		return true
	}

	return false
}

// SetCopyRuns gets a reference to the given []CopyRun and assigns it to the CopyRuns field.
func (o *ProtectedSourceSummary) SetCopyRuns(v []CopyRun) {
	o.CopyRuns = v
}

// GetIsPaused returns the IsPaused field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectedSourceSummary) GetIsPaused() bool {
	if o == nil || o.IsPaused.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsPaused.Get()
}

// GetIsPausedOk returns a tuple with the IsPaused field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectedSourceSummary) GetIsPausedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsPaused.Get(), o.IsPaused.IsSet()
}

// HasIsPaused returns a boolean if a field has been set.
func (o *ProtectedSourceSummary) HasIsPaused() bool {
	if o != nil && o.IsPaused.IsSet() {
		return true
	}

	return false
}

// SetIsPaused gets a reference to the given NullableBool and assigns it to the IsPaused field.
func (o *ProtectedSourceSummary) SetIsPaused(v bool) {
	o.IsPaused.Set(&v)
}
// SetIsPausedNil sets the value for IsPaused to be an explicit nil
func (o *ProtectedSourceSummary) SetIsPausedNil() {
	o.IsPaused.Set(nil)
}

// UnsetIsPaused ensures that no value is present for IsPaused, not even an explicit nil
func (o *ProtectedSourceSummary) UnsetIsPaused() {
	o.IsPaused.Unset()
}

// GetNextProtectionRunTimeUsecs returns the NextProtectionRunTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectedSourceSummary) GetNextProtectionRunTimeUsecs() int64 {
	if o == nil || o.NextProtectionRunTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NextProtectionRunTimeUsecs.Get()
}

// GetNextProtectionRunTimeUsecsOk returns a tuple with the NextProtectionRunTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectedSourceSummary) GetNextProtectionRunTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NextProtectionRunTimeUsecs.Get(), o.NextProtectionRunTimeUsecs.IsSet()
}

// HasNextProtectionRunTimeUsecs returns a boolean if a field has been set.
func (o *ProtectedSourceSummary) HasNextProtectionRunTimeUsecs() bool {
	if o != nil && o.NextProtectionRunTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetNextProtectionRunTimeUsecs gets a reference to the given NullableInt64 and assigns it to the NextProtectionRunTimeUsecs field.
func (o *ProtectedSourceSummary) SetNextProtectionRunTimeUsecs(v int64) {
	o.NextProtectionRunTimeUsecs.Set(&v)
}
// SetNextProtectionRunTimeUsecsNil sets the value for NextProtectionRunTimeUsecs to be an explicit nil
func (o *ProtectedSourceSummary) SetNextProtectionRunTimeUsecsNil() {
	o.NextProtectionRunTimeUsecs.Set(nil)
}

// UnsetNextProtectionRunTimeUsecs ensures that no value is present for NextProtectionRunTimeUsecs, not even an explicit nil
func (o *ProtectedSourceSummary) UnsetNextProtectionRunTimeUsecs() {
	o.NextProtectionRunTimeUsecs.Unset()
}

// GetProtectedSourceUid returns the ProtectedSourceUid field value if set, zero value otherwise.
func (o *ProtectedSourceSummary) GetProtectedSourceUid() UniversalId {
	if o == nil || o.ProtectedSourceUid == nil {
		var ret UniversalId
		return ret
	}
	return *o.ProtectedSourceUid
}

// GetProtectedSourceUidOk returns a tuple with the ProtectedSourceUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectedSourceSummary) GetProtectedSourceUidOk() (*UniversalId, bool) {
	if o == nil || o.ProtectedSourceUid == nil {
		return nil, false
	}
	return o.ProtectedSourceUid, true
}

// HasProtectedSourceUid returns a boolean if a field has been set.
func (o *ProtectedSourceSummary) HasProtectedSourceUid() bool {
	if o != nil && o.ProtectedSourceUid != nil {
		return true
	}

	return false
}

// SetProtectedSourceUid gets a reference to the given UniversalId and assigns it to the ProtectedSourceUid field.
func (o *ProtectedSourceSummary) SetProtectedSourceUid(v UniversalId) {
	o.ProtectedSourceUid = &v
}

// GetProtectionSource returns the ProtectionSource field value if set, zero value otherwise.
func (o *ProtectedSourceSummary) GetProtectionSource() ProtectionSource {
	if o == nil || o.ProtectionSource == nil {
		var ret ProtectionSource
		return ret
	}
	return *o.ProtectionSource
}

// GetProtectionSourceOk returns a tuple with the ProtectionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectedSourceSummary) GetProtectionSourceOk() (*ProtectionSource, bool) {
	if o == nil || o.ProtectionSource == nil {
		return nil, false
	}
	return o.ProtectionSource, true
}

// HasProtectionSource returns a boolean if a field has been set.
func (o *ProtectedSourceSummary) HasProtectionSource() bool {
	if o != nil && o.ProtectionSource != nil {
		return true
	}

	return false
}

// SetProtectionSource gets a reference to the given ProtectionSource and assigns it to the ProtectionSource field.
func (o *ProtectedSourceSummary) SetProtectionSource(v ProtectionSource) {
	o.ProtectionSource = &v
}

// GetSourceParameters returns the SourceParameters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectedSourceSummary) GetSourceParameters() []SourceSpecialParameter {
	if o == nil  {
		var ret []SourceSpecialParameter
		return ret
	}
	return o.SourceParameters
}

// GetSourceParametersOk returns a tuple with the SourceParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectedSourceSummary) GetSourceParametersOk() (*[]SourceSpecialParameter, bool) {
	if o == nil || o.SourceParameters == nil {
		return nil, false
	}
	return &o.SourceParameters, true
}

// HasSourceParameters returns a boolean if a field has been set.
func (o *ProtectedSourceSummary) HasSourceParameters() bool {
	if o != nil && o.SourceParameters != nil {
		return true
	}

	return false
}

// SetSourceParameters gets a reference to the given []SourceSpecialParameter and assigns it to the SourceParameters field.
func (o *ProtectedSourceSummary) SetSourceParameters(v []SourceSpecialParameter) {
	o.SourceParameters = v
}

func (o ProtectedSourceSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BackupRun != nil {
		toSerialize["backupRun"] = o.BackupRun
	}
	if o.CopyRuns != nil {
		toSerialize["copyRuns"] = o.CopyRuns
	}
	if o.IsPaused.IsSet() {
		toSerialize["isPaused"] = o.IsPaused.Get()
	}
	if o.NextProtectionRunTimeUsecs.IsSet() {
		toSerialize["nextProtectionRunTimeUsecs"] = o.NextProtectionRunTimeUsecs.Get()
	}
	if o.ProtectedSourceUid != nil {
		toSerialize["protectedSourceUid"] = o.ProtectedSourceUid
	}
	if o.ProtectionSource != nil {
		toSerialize["protectionSource"] = o.ProtectionSource
	}
	if o.SourceParameters != nil {
		toSerialize["sourceParameters"] = o.SourceParameters
	}
	return json.Marshal(toSerialize)
}

type NullableProtectedSourceSummary struct {
	value *ProtectedSourceSummary
	isSet bool
}

func (v NullableProtectedSourceSummary) Get() *ProtectedSourceSummary {
	return v.value
}

func (v *NullableProtectedSourceSummary) Set(val *ProtectedSourceSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableProtectedSourceSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableProtectedSourceSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtectedSourceSummary(val *ProtectedSourceSummary) *NullableProtectedSourceSummary {
	return &NullableProtectedSourceSummary{value: val, isSet: true}
}

func (v NullableProtectedSourceSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtectedSourceSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


