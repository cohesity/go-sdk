/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// NotificationRule Specifies a rule to notify delivery targets such as sending emails, invoking an external api etc based on the alert type, category and severity of the generated alert.
type NotificationRule struct {
	// Specifies alert types this rule is applicable to.
	AlertTypeList []int32 `json:"alertTypeList,omitempty"`
	// Specifies alert categories this rule is applicable to. Specifies the category of an Alert. kDisk - Alerts that are related to Disk. kNode - Alerts that are related to Node. kCluster - Alerts that are related to Cluster. kNodeHealth - Alerts that are related to Node Health. kClusterHealth - Alerts that are related to Cluster Health. kBackupRestore - Alerts that are related to Backup/Restore. kEncryption - Alerts that are related to Encryption. kArchivalRestore - Alerts that are related to Archival/Restore. kRemoteReplication - Alerts that are related to Remote Replication. kQuota - Alerts that are related to Quota. kLicense - Alerts that are related to License. kHeliosProActiveWellness - Alerts that are related to Helios ProActive Wellness. kHeliosAnalyticsJobs - Alerts that are related to Helios Analytics Jobs. kHeliosSignatureJobs - Alerts that are related to Helios Signature Jobs. kSecurity - Alerts that are related to Security. kAppsInfra - Alerts that are related to applications infra. kAntivirus - Alerts that are related to antivirus. kArchivalCopy - Alerts that are related to archival copies.
	Categories []string `json:"categories,omitempty"`
	// Specifies email addresses to be notified when an alert matching this rule is generated.
	EmailDeliveryTargets []EmailDeliveryTarget `json:"emailDeliveryTargets,omitempty"`
	// Specifies id of the alert delivery rule.
	RuleId NullableInt64 `json:"ruleId,omitempty"`
	// Specifies name of the alert delivery rule.
	RuleName NullableString `json:"ruleName,omitempty"`
	// Specifies alert severity types this rule is applicable to. Specifies the severity level of an Alert. kCritical - Alerts whose severity type is Critical. kWarning - Alerts whose severity type is Warning. kInfo - Alerts whose severity type is Info.
	Severities []string `json:"severities,omitempty"`
	// Specifies whether SNMP notification to be invoked when an alert matching this rule is generated.
	SnmpEnabled NullableBool `json:"snmpEnabled,omitempty"`
	// Specifies whether syslog notification to be invoked when an alert matching this rule is generated.
	SyslogEnabled NullableBool `json:"syslogEnabled,omitempty"`
	// Specifies tenant id this rule is applicable to.
	TenantId NullableString `json:"tenantId,omitempty"`
	// Specifies external api urls to be invoked when an alert matching this rule is generated.
	WebHookDeliveryTargets []WebHookDeliveryTarget `json:"webHookDeliveryTargets,omitempty"`
}

// NewNotificationRule instantiates a new NotificationRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationRule() *NotificationRule {
	this := NotificationRule{}
	return &this
}

// NewNotificationRuleWithDefaults instantiates a new NotificationRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationRuleWithDefaults() *NotificationRule {
	this := NotificationRule{}
	return &this
}

// GetAlertTypeList returns the AlertTypeList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationRule) GetAlertTypeList() []int32 {
	if o == nil  {
		var ret []int32
		return ret
	}
	return o.AlertTypeList
}

// GetAlertTypeListOk returns a tuple with the AlertTypeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationRule) GetAlertTypeListOk() (*[]int32, bool) {
	if o == nil || o.AlertTypeList == nil {
		return nil, false
	}
	return &o.AlertTypeList, true
}

// HasAlertTypeList returns a boolean if a field has been set.
func (o *NotificationRule) HasAlertTypeList() bool {
	if o != nil && o.AlertTypeList != nil {
		return true
	}

	return false
}

// SetAlertTypeList gets a reference to the given []int32 and assigns it to the AlertTypeList field.
func (o *NotificationRule) SetAlertTypeList(v []int32) {
	o.AlertTypeList = v
}

// GetCategories returns the Categories field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationRule) GetCategories() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationRule) GetCategoriesOk() (*[]string, bool) {
	if o == nil || o.Categories == nil {
		return nil, false
	}
	return &o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *NotificationRule) HasCategories() bool {
	if o != nil && o.Categories != nil {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []string and assigns it to the Categories field.
func (o *NotificationRule) SetCategories(v []string) {
	o.Categories = v
}

// GetEmailDeliveryTargets returns the EmailDeliveryTargets field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationRule) GetEmailDeliveryTargets() []EmailDeliveryTarget {
	if o == nil  {
		var ret []EmailDeliveryTarget
		return ret
	}
	return o.EmailDeliveryTargets
}

// GetEmailDeliveryTargetsOk returns a tuple with the EmailDeliveryTargets field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationRule) GetEmailDeliveryTargetsOk() (*[]EmailDeliveryTarget, bool) {
	if o == nil || o.EmailDeliveryTargets == nil {
		return nil, false
	}
	return &o.EmailDeliveryTargets, true
}

// HasEmailDeliveryTargets returns a boolean if a field has been set.
func (o *NotificationRule) HasEmailDeliveryTargets() bool {
	if o != nil && o.EmailDeliveryTargets != nil {
		return true
	}

	return false
}

// SetEmailDeliveryTargets gets a reference to the given []EmailDeliveryTarget and assigns it to the EmailDeliveryTargets field.
func (o *NotificationRule) SetEmailDeliveryTargets(v []EmailDeliveryTarget) {
	o.EmailDeliveryTargets = v
}

// GetRuleId returns the RuleId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationRule) GetRuleId() int64 {
	if o == nil || o.RuleId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RuleId.Get()
}

// GetRuleIdOk returns a tuple with the RuleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationRule) GetRuleIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RuleId.Get(), o.RuleId.IsSet()
}

// HasRuleId returns a boolean if a field has been set.
func (o *NotificationRule) HasRuleId() bool {
	if o != nil && o.RuleId.IsSet() {
		return true
	}

	return false
}

// SetRuleId gets a reference to the given NullableInt64 and assigns it to the RuleId field.
func (o *NotificationRule) SetRuleId(v int64) {
	o.RuleId.Set(&v)
}
// SetRuleIdNil sets the value for RuleId to be an explicit nil
func (o *NotificationRule) SetRuleIdNil() {
	o.RuleId.Set(nil)
}

// UnsetRuleId ensures that no value is present for RuleId, not even an explicit nil
func (o *NotificationRule) UnsetRuleId() {
	o.RuleId.Unset()
}

// GetRuleName returns the RuleName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationRule) GetRuleName() string {
	if o == nil || o.RuleName.Get() == nil {
		var ret string
		return ret
	}
	return *o.RuleName.Get()
}

// GetRuleNameOk returns a tuple with the RuleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationRule) GetRuleNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RuleName.Get(), o.RuleName.IsSet()
}

// HasRuleName returns a boolean if a field has been set.
func (o *NotificationRule) HasRuleName() bool {
	if o != nil && o.RuleName.IsSet() {
		return true
	}

	return false
}

// SetRuleName gets a reference to the given NullableString and assigns it to the RuleName field.
func (o *NotificationRule) SetRuleName(v string) {
	o.RuleName.Set(&v)
}
// SetRuleNameNil sets the value for RuleName to be an explicit nil
func (o *NotificationRule) SetRuleNameNil() {
	o.RuleName.Set(nil)
}

// UnsetRuleName ensures that no value is present for RuleName, not even an explicit nil
func (o *NotificationRule) UnsetRuleName() {
	o.RuleName.Unset()
}

// GetSeverities returns the Severities field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationRule) GetSeverities() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Severities
}

// GetSeveritiesOk returns a tuple with the Severities field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationRule) GetSeveritiesOk() (*[]string, bool) {
	if o == nil || o.Severities == nil {
		return nil, false
	}
	return &o.Severities, true
}

// HasSeverities returns a boolean if a field has been set.
func (o *NotificationRule) HasSeverities() bool {
	if o != nil && o.Severities != nil {
		return true
	}

	return false
}

// SetSeverities gets a reference to the given []string and assigns it to the Severities field.
func (o *NotificationRule) SetSeverities(v []string) {
	o.Severities = v
}

// GetSnmpEnabled returns the SnmpEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationRule) GetSnmpEnabled() bool {
	if o == nil || o.SnmpEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SnmpEnabled.Get()
}

// GetSnmpEnabledOk returns a tuple with the SnmpEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationRule) GetSnmpEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SnmpEnabled.Get(), o.SnmpEnabled.IsSet()
}

// HasSnmpEnabled returns a boolean if a field has been set.
func (o *NotificationRule) HasSnmpEnabled() bool {
	if o != nil && o.SnmpEnabled.IsSet() {
		return true
	}

	return false
}

// SetSnmpEnabled gets a reference to the given NullableBool and assigns it to the SnmpEnabled field.
func (o *NotificationRule) SetSnmpEnabled(v bool) {
	o.SnmpEnabled.Set(&v)
}
// SetSnmpEnabledNil sets the value for SnmpEnabled to be an explicit nil
func (o *NotificationRule) SetSnmpEnabledNil() {
	o.SnmpEnabled.Set(nil)
}

// UnsetSnmpEnabled ensures that no value is present for SnmpEnabled, not even an explicit nil
func (o *NotificationRule) UnsetSnmpEnabled() {
	o.SnmpEnabled.Unset()
}

// GetSyslogEnabled returns the SyslogEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationRule) GetSyslogEnabled() bool {
	if o == nil || o.SyslogEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SyslogEnabled.Get()
}

// GetSyslogEnabledOk returns a tuple with the SyslogEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationRule) GetSyslogEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SyslogEnabled.Get(), o.SyslogEnabled.IsSet()
}

// HasSyslogEnabled returns a boolean if a field has been set.
func (o *NotificationRule) HasSyslogEnabled() bool {
	if o != nil && o.SyslogEnabled.IsSet() {
		return true
	}

	return false
}

// SetSyslogEnabled gets a reference to the given NullableBool and assigns it to the SyslogEnabled field.
func (o *NotificationRule) SetSyslogEnabled(v bool) {
	o.SyslogEnabled.Set(&v)
}
// SetSyslogEnabledNil sets the value for SyslogEnabled to be an explicit nil
func (o *NotificationRule) SetSyslogEnabledNil() {
	o.SyslogEnabled.Set(nil)
}

// UnsetSyslogEnabled ensures that no value is present for SyslogEnabled, not even an explicit nil
func (o *NotificationRule) UnsetSyslogEnabled() {
	o.SyslogEnabled.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationRule) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationRule) GetTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *NotificationRule) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *NotificationRule) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *NotificationRule) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *NotificationRule) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetWebHookDeliveryTargets returns the WebHookDeliveryTargets field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationRule) GetWebHookDeliveryTargets() []WebHookDeliveryTarget {
	if o == nil  {
		var ret []WebHookDeliveryTarget
		return ret
	}
	return o.WebHookDeliveryTargets
}

// GetWebHookDeliveryTargetsOk returns a tuple with the WebHookDeliveryTargets field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationRule) GetWebHookDeliveryTargetsOk() (*[]WebHookDeliveryTarget, bool) {
	if o == nil || o.WebHookDeliveryTargets == nil {
		return nil, false
	}
	return &o.WebHookDeliveryTargets, true
}

// HasWebHookDeliveryTargets returns a boolean if a field has been set.
func (o *NotificationRule) HasWebHookDeliveryTargets() bool {
	if o != nil && o.WebHookDeliveryTargets != nil {
		return true
	}

	return false
}

// SetWebHookDeliveryTargets gets a reference to the given []WebHookDeliveryTarget and assigns it to the WebHookDeliveryTargets field.
func (o *NotificationRule) SetWebHookDeliveryTargets(v []WebHookDeliveryTarget) {
	o.WebHookDeliveryTargets = v
}

func (o NotificationRule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AlertTypeList != nil {
		toSerialize["alertTypeList"] = o.AlertTypeList
	}
	if o.Categories != nil {
		toSerialize["categories"] = o.Categories
	}
	if o.EmailDeliveryTargets != nil {
		toSerialize["emailDeliveryTargets"] = o.EmailDeliveryTargets
	}
	if o.RuleId.IsSet() {
		toSerialize["ruleId"] = o.RuleId.Get()
	}
	if o.RuleName.IsSet() {
		toSerialize["ruleName"] = o.RuleName.Get()
	}
	if o.Severities != nil {
		toSerialize["severities"] = o.Severities
	}
	if o.SnmpEnabled.IsSet() {
		toSerialize["snmpEnabled"] = o.SnmpEnabled.Get()
	}
	if o.SyslogEnabled.IsSet() {
		toSerialize["syslogEnabled"] = o.SyslogEnabled.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.WebHookDeliveryTargets != nil {
		toSerialize["webHookDeliveryTargets"] = o.WebHookDeliveryTargets
	}
	return json.Marshal(toSerialize)
}

type NullableNotificationRule struct {
	value *NotificationRule
	isSet bool
}

func (v NullableNotificationRule) Get() *NotificationRule {
	return v.value
}

func (v *NullableNotificationRule) Set(val *NotificationRule) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationRule) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationRule(val *NotificationRule) *NullableNotificationRule {
	return &NullableNotificationRule{value: val, isSet: true}
}

func (v NullableNotificationRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


