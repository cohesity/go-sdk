/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// NasCredentials Specifies the server credentials to connect to a NetApp server.
type NasCredentials struct {
	// Specifies the hostname or IP address of the NAS server.
	Host NullableString `json:"host,omitempty"`
	// Specifies the mount path to the NAS server.
	MountPath NullableString `json:"mountPath,omitempty"`
	// If using the CIFS protocol and a Username was specified, specify the password for the username.
	Password NullableString `json:"password,omitempty"`
	// Specifies the sharing protocol type used to mount the file system. Currently, only NFS is supported. 'kNFS' indicates use the NFS protocol to mount the file system. 'kCIFS' indicates use the CIFS protocol to mount the file system.
	ShareType NullableString `json:"shareType,omitempty"`
	// If using the CIFS protocol, you can optional specify a username to use when mounting.
	Username NullableString `json:"username,omitempty"`
}

// NewNasCredentials instantiates a new NasCredentials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNasCredentials() *NasCredentials {
	this := NasCredentials{}
	return &this
}

// NewNasCredentialsWithDefaults instantiates a new NasCredentials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNasCredentialsWithDefaults() *NasCredentials {
	this := NasCredentials{}
	return &this
}

// GetHost returns the Host field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasCredentials) GetHost() string {
	if o == nil || o.Host.Get() == nil {
		var ret string
		return ret
	}
	return *o.Host.Get()
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasCredentials) GetHostOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Host.Get(), o.Host.IsSet()
}

// HasHost returns a boolean if a field has been set.
func (o *NasCredentials) HasHost() bool {
	if o != nil && o.Host.IsSet() {
		return true
	}

	return false
}

// SetHost gets a reference to the given NullableString and assigns it to the Host field.
func (o *NasCredentials) SetHost(v string) {
	o.Host.Set(&v)
}
// SetHostNil sets the value for Host to be an explicit nil
func (o *NasCredentials) SetHostNil() {
	o.Host.Set(nil)
}

// UnsetHost ensures that no value is present for Host, not even an explicit nil
func (o *NasCredentials) UnsetHost() {
	o.Host.Unset()
}

// GetMountPath returns the MountPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasCredentials) GetMountPath() string {
	if o == nil || o.MountPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.MountPath.Get()
}

// GetMountPathOk returns a tuple with the MountPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasCredentials) GetMountPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MountPath.Get(), o.MountPath.IsSet()
}

// HasMountPath returns a boolean if a field has been set.
func (o *NasCredentials) HasMountPath() bool {
	if o != nil && o.MountPath.IsSet() {
		return true
	}

	return false
}

// SetMountPath gets a reference to the given NullableString and assigns it to the MountPath field.
func (o *NasCredentials) SetMountPath(v string) {
	o.MountPath.Set(&v)
}
// SetMountPathNil sets the value for MountPath to be an explicit nil
func (o *NasCredentials) SetMountPathNil() {
	o.MountPath.Set(nil)
}

// UnsetMountPath ensures that no value is present for MountPath, not even an explicit nil
func (o *NasCredentials) UnsetMountPath() {
	o.MountPath.Unset()
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasCredentials) GetPassword() string {
	if o == nil || o.Password.Get() == nil {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasCredentials) GetPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *NasCredentials) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *NasCredentials) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *NasCredentials) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *NasCredentials) UnsetPassword() {
	o.Password.Unset()
}

// GetShareType returns the ShareType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasCredentials) GetShareType() string {
	if o == nil || o.ShareType.Get() == nil {
		var ret string
		return ret
	}
	return *o.ShareType.Get()
}

// GetShareTypeOk returns a tuple with the ShareType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasCredentials) GetShareTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ShareType.Get(), o.ShareType.IsSet()
}

// HasShareType returns a boolean if a field has been set.
func (o *NasCredentials) HasShareType() bool {
	if o != nil && o.ShareType.IsSet() {
		return true
	}

	return false
}

// SetShareType gets a reference to the given NullableString and assigns it to the ShareType field.
func (o *NasCredentials) SetShareType(v string) {
	o.ShareType.Set(&v)
}
// SetShareTypeNil sets the value for ShareType to be an explicit nil
func (o *NasCredentials) SetShareTypeNil() {
	o.ShareType.Set(nil)
}

// UnsetShareType ensures that no value is present for ShareType, not even an explicit nil
func (o *NasCredentials) UnsetShareType() {
	o.ShareType.Unset()
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasCredentials) GetUsername() string {
	if o == nil || o.Username.Get() == nil {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasCredentials) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *NasCredentials) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *NasCredentials) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *NasCredentials) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *NasCredentials) UnsetUsername() {
	o.Username.Unset()
}

func (o NasCredentials) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Host.IsSet() {
		toSerialize["host"] = o.Host.Get()
	}
	if o.MountPath.IsSet() {
		toSerialize["mountPath"] = o.MountPath.Get()
	}
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	if o.ShareType.IsSet() {
		toSerialize["shareType"] = o.ShareType.Get()
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableNasCredentials struct {
	value *NasCredentials
	isSet bool
}

func (v NullableNasCredentials) Get() *NasCredentials {
	return v.value
}

func (v *NullableNasCredentials) Set(val *NasCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullableNasCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableNasCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNasCredentials(val *NasCredentials) *NullableNasCredentials {
	return &NullableNasCredentials{value: val, isSet: true}
}

func (v NullableNasCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNasCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


