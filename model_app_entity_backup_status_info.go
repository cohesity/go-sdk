/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// AppEntityBackupStatusInfo Specifies the app level backup status and information.
type AppEntityBackupStatusInfo struct {
	// Specifies the Id of the App entity. This is typically a database entity in case of SQL, Oracle jobs etc.
	AppId NullableInt64 `json:"appId,omitempty"`
	// Specifies if an error occurred (if any) while running this task. This field is populated when the status is equal to 'kFailure'.
	Error NullableString `json:"error,omitempty"`
	// Specifies the name of the app entity.
	Name NullableString `json:"name,omitempty"`
	// Specifies the owner id of the the app. Owner is the host under which the app is located. Example: SQL DB entities can be hosted by Physical host or virtual machine.
	OwnerId NullableInt64 `json:"ownerId,omitempty"`
	// Specifies the backup status for this app entity. 'kAccepted' indicates the task is queued to run but not yet running. 'kRunning' indicates the task is running. 'kCanceling' indicates a request to cancel the task has occurred but the task is not yet canceled. 'kCanceled' indicates the task has been canceled. 'kSuccess' indicates the task was successful. 'kFailure' indicates the task failed. 'kWarning' indicates the task has finished with warning. 'kOnHold' indicates the task is kept onHold. 'kMissed' indicates the task is missed.
	Status NullableString `json:"status,omitempty"`
	// Specifies the warnings that occurred (if any) while running this task.
	Warnings []string `json:"warnings,omitempty"`
}

// NewAppEntityBackupStatusInfo instantiates a new AppEntityBackupStatusInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppEntityBackupStatusInfo() *AppEntityBackupStatusInfo {
	this := AppEntityBackupStatusInfo{}
	return &this
}

// NewAppEntityBackupStatusInfoWithDefaults instantiates a new AppEntityBackupStatusInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppEntityBackupStatusInfoWithDefaults() *AppEntityBackupStatusInfo {
	this := AppEntityBackupStatusInfo{}
	return &this
}

// GetAppId returns the AppId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppEntityBackupStatusInfo) GetAppId() int64 {
	if o == nil || o.AppId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.AppId.Get()
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppEntityBackupStatusInfo) GetAppIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AppId.Get(), o.AppId.IsSet()
}

// HasAppId returns a boolean if a field has been set.
func (o *AppEntityBackupStatusInfo) HasAppId() bool {
	if o != nil && o.AppId.IsSet() {
		return true
	}

	return false
}

// SetAppId gets a reference to the given NullableInt64 and assigns it to the AppId field.
func (o *AppEntityBackupStatusInfo) SetAppId(v int64) {
	o.AppId.Set(&v)
}
// SetAppIdNil sets the value for AppId to be an explicit nil
func (o *AppEntityBackupStatusInfo) SetAppIdNil() {
	o.AppId.Set(nil)
}

// UnsetAppId ensures that no value is present for AppId, not even an explicit nil
func (o *AppEntityBackupStatusInfo) UnsetAppId() {
	o.AppId.Unset()
}

// GetError returns the Error field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppEntityBackupStatusInfo) GetError() string {
	if o == nil || o.Error.Get() == nil {
		var ret string
		return ret
	}
	return *o.Error.Get()
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppEntityBackupStatusInfo) GetErrorOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Error.Get(), o.Error.IsSet()
}

// HasError returns a boolean if a field has been set.
func (o *AppEntityBackupStatusInfo) HasError() bool {
	if o != nil && o.Error.IsSet() {
		return true
	}

	return false
}

// SetError gets a reference to the given NullableString and assigns it to the Error field.
func (o *AppEntityBackupStatusInfo) SetError(v string) {
	o.Error.Set(&v)
}
// SetErrorNil sets the value for Error to be an explicit nil
func (o *AppEntityBackupStatusInfo) SetErrorNil() {
	o.Error.Set(nil)
}

// UnsetError ensures that no value is present for Error, not even an explicit nil
func (o *AppEntityBackupStatusInfo) UnsetError() {
	o.Error.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppEntityBackupStatusInfo) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppEntityBackupStatusInfo) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *AppEntityBackupStatusInfo) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *AppEntityBackupStatusInfo) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *AppEntityBackupStatusInfo) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *AppEntityBackupStatusInfo) UnsetName() {
	o.Name.Unset()
}

// GetOwnerId returns the OwnerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppEntityBackupStatusInfo) GetOwnerId() int64 {
	if o == nil || o.OwnerId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.OwnerId.Get()
}

// GetOwnerIdOk returns a tuple with the OwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppEntityBackupStatusInfo) GetOwnerIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OwnerId.Get(), o.OwnerId.IsSet()
}

// HasOwnerId returns a boolean if a field has been set.
func (o *AppEntityBackupStatusInfo) HasOwnerId() bool {
	if o != nil && o.OwnerId.IsSet() {
		return true
	}

	return false
}

// SetOwnerId gets a reference to the given NullableInt64 and assigns it to the OwnerId field.
func (o *AppEntityBackupStatusInfo) SetOwnerId(v int64) {
	o.OwnerId.Set(&v)
}
// SetOwnerIdNil sets the value for OwnerId to be an explicit nil
func (o *AppEntityBackupStatusInfo) SetOwnerIdNil() {
	o.OwnerId.Set(nil)
}

// UnsetOwnerId ensures that no value is present for OwnerId, not even an explicit nil
func (o *AppEntityBackupStatusInfo) UnsetOwnerId() {
	o.OwnerId.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppEntityBackupStatusInfo) GetStatus() string {
	if o == nil || o.Status.Get() == nil {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppEntityBackupStatusInfo) GetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *AppEntityBackupStatusInfo) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *AppEntityBackupStatusInfo) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *AppEntityBackupStatusInfo) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *AppEntityBackupStatusInfo) UnsetStatus() {
	o.Status.Unset()
}

// GetWarnings returns the Warnings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppEntityBackupStatusInfo) GetWarnings() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppEntityBackupStatusInfo) GetWarningsOk() (*[]string, bool) {
	if o == nil || o.Warnings == nil {
		return nil, false
	}
	return &o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *AppEntityBackupStatusInfo) HasWarnings() bool {
	if o != nil && o.Warnings != nil {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []string and assigns it to the Warnings field.
func (o *AppEntityBackupStatusInfo) SetWarnings(v []string) {
	o.Warnings = v
}

func (o AppEntityBackupStatusInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AppId.IsSet() {
		toSerialize["appId"] = o.AppId.Get()
	}
	if o.Error.IsSet() {
		toSerialize["error"] = o.Error.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.OwnerId.IsSet() {
		toSerialize["ownerId"] = o.OwnerId.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.Warnings != nil {
		toSerialize["warnings"] = o.Warnings
	}
	return json.Marshal(toSerialize)
}

type NullableAppEntityBackupStatusInfo struct {
	value *AppEntityBackupStatusInfo
	isSet bool
}

func (v NullableAppEntityBackupStatusInfo) Get() *AppEntityBackupStatusInfo {
	return v.value
}

func (v *NullableAppEntityBackupStatusInfo) Set(val *AppEntityBackupStatusInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAppEntityBackupStatusInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAppEntityBackupStatusInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppEntityBackupStatusInfo(val *AppEntityBackupStatusInfo) *NullableAppEntityBackupStatusInfo {
	return &NullableAppEntityBackupStatusInfo{value: val, isSet: true}
}

func (v NullableAppEntityBackupStatusInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppEntityBackupStatusInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


