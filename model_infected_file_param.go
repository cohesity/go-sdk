/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// InfectedFileParam struct for InfectedFileParam
type InfectedFileParam struct {
	// Specifies the entity id of the infected file.
	EntityId NullableInt64 `json:"entityId,omitempty"`
	// Specifies the remediation state of the file. Remediation State. 'kQuarantine' indicates 'Quarantine' state of the file. This state blocks the client access. The administrator will have to manually delete, rescan or unquarantine the file. 'kUnquarantine' indicates 'Unquarantine' state of the file. The administrator has manually moved files from quarantined to the unquarantined state to allow client access. Unquarantined files are not scanned for virus until manually reset.
	RemediationState NullableString `json:"remediationState,omitempty"`
	// Specifies the root inode id of the file system that infected file belongs to.
	RootInodeId NullableInt64 `json:"rootInodeId,omitempty"`
	// Specifies the id of the View the infected file belongs to.
	ViewId NullableInt64 `json:"viewId,omitempty"`
}

// NewInfectedFileParam instantiates a new InfectedFileParam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfectedFileParam() *InfectedFileParam {
	this := InfectedFileParam{}
	return &this
}

// NewInfectedFileParamWithDefaults instantiates a new InfectedFileParam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfectedFileParamWithDefaults() *InfectedFileParam {
	this := InfectedFileParam{}
	return &this
}

// GetEntityId returns the EntityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InfectedFileParam) GetEntityId() int64 {
	if o == nil || o.EntityId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.EntityId.Get()
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedFileParam) GetEntityIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EntityId.Get(), o.EntityId.IsSet()
}

// HasEntityId returns a boolean if a field has been set.
func (o *InfectedFileParam) HasEntityId() bool {
	if o != nil && o.EntityId.IsSet() {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given NullableInt64 and assigns it to the EntityId field.
func (o *InfectedFileParam) SetEntityId(v int64) {
	o.EntityId.Set(&v)
}
// SetEntityIdNil sets the value for EntityId to be an explicit nil
func (o *InfectedFileParam) SetEntityIdNil() {
	o.EntityId.Set(nil)
}

// UnsetEntityId ensures that no value is present for EntityId, not even an explicit nil
func (o *InfectedFileParam) UnsetEntityId() {
	o.EntityId.Unset()
}

// GetRemediationState returns the RemediationState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InfectedFileParam) GetRemediationState() string {
	if o == nil || o.RemediationState.Get() == nil {
		var ret string
		return ret
	}
	return *o.RemediationState.Get()
}

// GetRemediationStateOk returns a tuple with the RemediationState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedFileParam) GetRemediationStateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RemediationState.Get(), o.RemediationState.IsSet()
}

// HasRemediationState returns a boolean if a field has been set.
func (o *InfectedFileParam) HasRemediationState() bool {
	if o != nil && o.RemediationState.IsSet() {
		return true
	}

	return false
}

// SetRemediationState gets a reference to the given NullableString and assigns it to the RemediationState field.
func (o *InfectedFileParam) SetRemediationState(v string) {
	o.RemediationState.Set(&v)
}
// SetRemediationStateNil sets the value for RemediationState to be an explicit nil
func (o *InfectedFileParam) SetRemediationStateNil() {
	o.RemediationState.Set(nil)
}

// UnsetRemediationState ensures that no value is present for RemediationState, not even an explicit nil
func (o *InfectedFileParam) UnsetRemediationState() {
	o.RemediationState.Unset()
}

// GetRootInodeId returns the RootInodeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InfectedFileParam) GetRootInodeId() int64 {
	if o == nil || o.RootInodeId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RootInodeId.Get()
}

// GetRootInodeIdOk returns a tuple with the RootInodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedFileParam) GetRootInodeIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RootInodeId.Get(), o.RootInodeId.IsSet()
}

// HasRootInodeId returns a boolean if a field has been set.
func (o *InfectedFileParam) HasRootInodeId() bool {
	if o != nil && o.RootInodeId.IsSet() {
		return true
	}

	return false
}

// SetRootInodeId gets a reference to the given NullableInt64 and assigns it to the RootInodeId field.
func (o *InfectedFileParam) SetRootInodeId(v int64) {
	o.RootInodeId.Set(&v)
}
// SetRootInodeIdNil sets the value for RootInodeId to be an explicit nil
func (o *InfectedFileParam) SetRootInodeIdNil() {
	o.RootInodeId.Set(nil)
}

// UnsetRootInodeId ensures that no value is present for RootInodeId, not even an explicit nil
func (o *InfectedFileParam) UnsetRootInodeId() {
	o.RootInodeId.Unset()
}

// GetViewId returns the ViewId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InfectedFileParam) GetViewId() int64 {
	if o == nil || o.ViewId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ViewId.Get()
}

// GetViewIdOk returns a tuple with the ViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedFileParam) GetViewIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewId.Get(), o.ViewId.IsSet()
}

// HasViewId returns a boolean if a field has been set.
func (o *InfectedFileParam) HasViewId() bool {
	if o != nil && o.ViewId.IsSet() {
		return true
	}

	return false
}

// SetViewId gets a reference to the given NullableInt64 and assigns it to the ViewId field.
func (o *InfectedFileParam) SetViewId(v int64) {
	o.ViewId.Set(&v)
}
// SetViewIdNil sets the value for ViewId to be an explicit nil
func (o *InfectedFileParam) SetViewIdNil() {
	o.ViewId.Set(nil)
}

// UnsetViewId ensures that no value is present for ViewId, not even an explicit nil
func (o *InfectedFileParam) UnsetViewId() {
	o.ViewId.Unset()
}

func (o InfectedFileParam) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EntityId.IsSet() {
		toSerialize["entityId"] = o.EntityId.Get()
	}
	if o.RemediationState.IsSet() {
		toSerialize["remediationState"] = o.RemediationState.Get()
	}
	if o.RootInodeId.IsSet() {
		toSerialize["rootInodeId"] = o.RootInodeId.Get()
	}
	if o.ViewId.IsSet() {
		toSerialize["viewId"] = o.ViewId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableInfectedFileParam struct {
	value *InfectedFileParam
	isSet bool
}

func (v NullableInfectedFileParam) Get() *InfectedFileParam {
	return v.value
}

func (v *NullableInfectedFileParam) Set(val *InfectedFileParam) {
	v.value = val
	v.isSet = true
}

func (v NullableInfectedFileParam) IsSet() bool {
	return v.isSet
}

func (v *NullableInfectedFileParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfectedFileParam(val *InfectedFileParam) *NullableInfectedFileParam {
	return &NullableInfectedFileParam{value: val, isSet: true}
}

func (v NullableInfectedFileParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfectedFileParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


