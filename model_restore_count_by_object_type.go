/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// RestoreCountByObjectType Number of restore operations by object type.
type RestoreCountByObjectType struct {
	// Specifies the number of restores of the object type.
	ObjectCount NullableInt32 `json:"objectCount,omitempty"`
	// Specifies the type of the restored object.
	ObjectType NullableString `json:"objectType,omitempty"`
}

// NewRestoreCountByObjectType instantiates a new RestoreCountByObjectType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreCountByObjectType() *RestoreCountByObjectType {
	this := RestoreCountByObjectType{}
	return &this
}

// NewRestoreCountByObjectTypeWithDefaults instantiates a new RestoreCountByObjectType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreCountByObjectTypeWithDefaults() *RestoreCountByObjectType {
	this := RestoreCountByObjectType{}
	return &this
}

// GetObjectCount returns the ObjectCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreCountByObjectType) GetObjectCount() int32 {
	if o == nil || o.ObjectCount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.ObjectCount.Get()
}

// GetObjectCountOk returns a tuple with the ObjectCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreCountByObjectType) GetObjectCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ObjectCount.Get(), o.ObjectCount.IsSet()
}

// HasObjectCount returns a boolean if a field has been set.
func (o *RestoreCountByObjectType) HasObjectCount() bool {
	if o != nil && o.ObjectCount.IsSet() {
		return true
	}

	return false
}

// SetObjectCount gets a reference to the given NullableInt32 and assigns it to the ObjectCount field.
func (o *RestoreCountByObjectType) SetObjectCount(v int32) {
	o.ObjectCount.Set(&v)
}
// SetObjectCountNil sets the value for ObjectCount to be an explicit nil
func (o *RestoreCountByObjectType) SetObjectCountNil() {
	o.ObjectCount.Set(nil)
}

// UnsetObjectCount ensures that no value is present for ObjectCount, not even an explicit nil
func (o *RestoreCountByObjectType) UnsetObjectCount() {
	o.ObjectCount.Unset()
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreCountByObjectType) GetObjectType() string {
	if o == nil || o.ObjectType.Get() == nil {
		var ret string
		return ret
	}
	return *o.ObjectType.Get()
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreCountByObjectType) GetObjectTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ObjectType.Get(), o.ObjectType.IsSet()
}

// HasObjectType returns a boolean if a field has been set.
func (o *RestoreCountByObjectType) HasObjectType() bool {
	if o != nil && o.ObjectType.IsSet() {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given NullableString and assigns it to the ObjectType field.
func (o *RestoreCountByObjectType) SetObjectType(v string) {
	o.ObjectType.Set(&v)
}
// SetObjectTypeNil sets the value for ObjectType to be an explicit nil
func (o *RestoreCountByObjectType) SetObjectTypeNil() {
	o.ObjectType.Set(nil)
}

// UnsetObjectType ensures that no value is present for ObjectType, not even an explicit nil
func (o *RestoreCountByObjectType) UnsetObjectType() {
	o.ObjectType.Unset()
}

func (o RestoreCountByObjectType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ObjectCount.IsSet() {
		toSerialize["objectCount"] = o.ObjectCount.Get()
	}
	if o.ObjectType.IsSet() {
		toSerialize["objectType"] = o.ObjectType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRestoreCountByObjectType struct {
	value *RestoreCountByObjectType
	isSet bool
}

func (v NullableRestoreCountByObjectType) Get() *RestoreCountByObjectType {
	return v.value
}

func (v *NullableRestoreCountByObjectType) Set(val *RestoreCountByObjectType) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreCountByObjectType) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreCountByObjectType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreCountByObjectType(val *RestoreCountByObjectType) *NullableRestoreCountByObjectType {
	return &NullableRestoreCountByObjectType{value: val, isSet: true}
}

func (v NullableRestoreCountByObjectType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreCountByObjectType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


