/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// PostgresNodeInfo Specifies the Node Id, IP and port information to access the postgres database.
type PostgresNodeInfo struct {
	// Specifies the default password to access the postgres database.
	DefaultPassword NullableString `json:"defaultPassword,omitempty"`
	// Specifies the default username to access the postgres database.
	DefaultUsername NullableString `json:"defaultUsername,omitempty"`
	// Specifies the id of the node where postgres database is running.
	NodeId NullableInt64 `json:"nodeId,omitempty"`
	// Specifies the ip of the node where postgres database is running.
	NodeIp NullableString `json:"nodeIp,omitempty"`
	// Specifies the information where postgres database is running.
	Port NullableInt32 `json:"port,omitempty"`
}

// NewPostgresNodeInfo instantiates a new PostgresNodeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostgresNodeInfo() *PostgresNodeInfo {
	this := PostgresNodeInfo{}
	return &this
}

// NewPostgresNodeInfoWithDefaults instantiates a new PostgresNodeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostgresNodeInfoWithDefaults() *PostgresNodeInfo {
	this := PostgresNodeInfo{}
	return &this
}

// GetDefaultPassword returns the DefaultPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PostgresNodeInfo) GetDefaultPassword() string {
	if o == nil || o.DefaultPassword.Get() == nil {
		var ret string
		return ret
	}
	return *o.DefaultPassword.Get()
}

// GetDefaultPasswordOk returns a tuple with the DefaultPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PostgresNodeInfo) GetDefaultPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DefaultPassword.Get(), o.DefaultPassword.IsSet()
}

// HasDefaultPassword returns a boolean if a field has been set.
func (o *PostgresNodeInfo) HasDefaultPassword() bool {
	if o != nil && o.DefaultPassword.IsSet() {
		return true
	}

	return false
}

// SetDefaultPassword gets a reference to the given NullableString and assigns it to the DefaultPassword field.
func (o *PostgresNodeInfo) SetDefaultPassword(v string) {
	o.DefaultPassword.Set(&v)
}
// SetDefaultPasswordNil sets the value for DefaultPassword to be an explicit nil
func (o *PostgresNodeInfo) SetDefaultPasswordNil() {
	o.DefaultPassword.Set(nil)
}

// UnsetDefaultPassword ensures that no value is present for DefaultPassword, not even an explicit nil
func (o *PostgresNodeInfo) UnsetDefaultPassword() {
	o.DefaultPassword.Unset()
}

// GetDefaultUsername returns the DefaultUsername field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PostgresNodeInfo) GetDefaultUsername() string {
	if o == nil || o.DefaultUsername.Get() == nil {
		var ret string
		return ret
	}
	return *o.DefaultUsername.Get()
}

// GetDefaultUsernameOk returns a tuple with the DefaultUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PostgresNodeInfo) GetDefaultUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DefaultUsername.Get(), o.DefaultUsername.IsSet()
}

// HasDefaultUsername returns a boolean if a field has been set.
func (o *PostgresNodeInfo) HasDefaultUsername() bool {
	if o != nil && o.DefaultUsername.IsSet() {
		return true
	}

	return false
}

// SetDefaultUsername gets a reference to the given NullableString and assigns it to the DefaultUsername field.
func (o *PostgresNodeInfo) SetDefaultUsername(v string) {
	o.DefaultUsername.Set(&v)
}
// SetDefaultUsernameNil sets the value for DefaultUsername to be an explicit nil
func (o *PostgresNodeInfo) SetDefaultUsernameNil() {
	o.DefaultUsername.Set(nil)
}

// UnsetDefaultUsername ensures that no value is present for DefaultUsername, not even an explicit nil
func (o *PostgresNodeInfo) UnsetDefaultUsername() {
	o.DefaultUsername.Unset()
}

// GetNodeId returns the NodeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PostgresNodeInfo) GetNodeId() int64 {
	if o == nil || o.NodeId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NodeId.Get()
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PostgresNodeInfo) GetNodeIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NodeId.Get(), o.NodeId.IsSet()
}

// HasNodeId returns a boolean if a field has been set.
func (o *PostgresNodeInfo) HasNodeId() bool {
	if o != nil && o.NodeId.IsSet() {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given NullableInt64 and assigns it to the NodeId field.
func (o *PostgresNodeInfo) SetNodeId(v int64) {
	o.NodeId.Set(&v)
}
// SetNodeIdNil sets the value for NodeId to be an explicit nil
func (o *PostgresNodeInfo) SetNodeIdNil() {
	o.NodeId.Set(nil)
}

// UnsetNodeId ensures that no value is present for NodeId, not even an explicit nil
func (o *PostgresNodeInfo) UnsetNodeId() {
	o.NodeId.Unset()
}

// GetNodeIp returns the NodeIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PostgresNodeInfo) GetNodeIp() string {
	if o == nil || o.NodeIp.Get() == nil {
		var ret string
		return ret
	}
	return *o.NodeIp.Get()
}

// GetNodeIpOk returns a tuple with the NodeIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PostgresNodeInfo) GetNodeIpOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NodeIp.Get(), o.NodeIp.IsSet()
}

// HasNodeIp returns a boolean if a field has been set.
func (o *PostgresNodeInfo) HasNodeIp() bool {
	if o != nil && o.NodeIp.IsSet() {
		return true
	}

	return false
}

// SetNodeIp gets a reference to the given NullableString and assigns it to the NodeIp field.
func (o *PostgresNodeInfo) SetNodeIp(v string) {
	o.NodeIp.Set(&v)
}
// SetNodeIpNil sets the value for NodeIp to be an explicit nil
func (o *PostgresNodeInfo) SetNodeIpNil() {
	o.NodeIp.Set(nil)
}

// UnsetNodeIp ensures that no value is present for NodeIp, not even an explicit nil
func (o *PostgresNodeInfo) UnsetNodeIp() {
	o.NodeIp.Unset()
}

// GetPort returns the Port field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PostgresNodeInfo) GetPort() int32 {
	if o == nil || o.Port.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Port.Get()
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PostgresNodeInfo) GetPortOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Port.Get(), o.Port.IsSet()
}

// HasPort returns a boolean if a field has been set.
func (o *PostgresNodeInfo) HasPort() bool {
	if o != nil && o.Port.IsSet() {
		return true
	}

	return false
}

// SetPort gets a reference to the given NullableInt32 and assigns it to the Port field.
func (o *PostgresNodeInfo) SetPort(v int32) {
	o.Port.Set(&v)
}
// SetPortNil sets the value for Port to be an explicit nil
func (o *PostgresNodeInfo) SetPortNil() {
	o.Port.Set(nil)
}

// UnsetPort ensures that no value is present for Port, not even an explicit nil
func (o *PostgresNodeInfo) UnsetPort() {
	o.Port.Unset()
}

func (o PostgresNodeInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DefaultPassword.IsSet() {
		toSerialize["defaultPassword"] = o.DefaultPassword.Get()
	}
	if o.DefaultUsername.IsSet() {
		toSerialize["defaultUsername"] = o.DefaultUsername.Get()
	}
	if o.NodeId.IsSet() {
		toSerialize["nodeId"] = o.NodeId.Get()
	}
	if o.NodeIp.IsSet() {
		toSerialize["nodeIp"] = o.NodeIp.Get()
	}
	if o.Port.IsSet() {
		toSerialize["port"] = o.Port.Get()
	}
	return json.Marshal(toSerialize)
}

type NullablePostgresNodeInfo struct {
	value *PostgresNodeInfo
	isSet bool
}

func (v NullablePostgresNodeInfo) Get() *PostgresNodeInfo {
	return v.value
}

func (v *NullablePostgresNodeInfo) Set(val *PostgresNodeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePostgresNodeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePostgresNodeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostgresNodeInfo(val *PostgresNodeInfo) *NullablePostgresNodeInfo {
	return &NullablePostgresNodeInfo{value: val, isSet: true}
}

func (v NullablePostgresNodeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostgresNodeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


