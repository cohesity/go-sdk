/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// VirtualDiskMappingResponse Specifies information about virtual disks where a user can specify mappings of source disk and destination disk to overwrite.
type VirtualDiskMappingResponse struct {
	DiskToOverwrite *VirtualDiskIdInformation `json:"diskToOverwrite,omitempty"`
	SourceDisk *VirtualDiskIdInformation `json:"sourceDisk,omitempty"`
	TargetLocation *ProtectionSource `json:"targetLocation,omitempty"`
}

// NewVirtualDiskMappingResponse instantiates a new VirtualDiskMappingResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualDiskMappingResponse() *VirtualDiskMappingResponse {
	this := VirtualDiskMappingResponse{}
	return &this
}

// NewVirtualDiskMappingResponseWithDefaults instantiates a new VirtualDiskMappingResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualDiskMappingResponseWithDefaults() *VirtualDiskMappingResponse {
	this := VirtualDiskMappingResponse{}
	return &this
}

// GetDiskToOverwrite returns the DiskToOverwrite field value if set, zero value otherwise.
func (o *VirtualDiskMappingResponse) GetDiskToOverwrite() VirtualDiskIdInformation {
	if o == nil || o.DiskToOverwrite == nil {
		var ret VirtualDiskIdInformation
		return ret
	}
	return *o.DiskToOverwrite
}

// GetDiskToOverwriteOk returns a tuple with the DiskToOverwrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDiskMappingResponse) GetDiskToOverwriteOk() (*VirtualDiskIdInformation, bool) {
	if o == nil || o.DiskToOverwrite == nil {
		return nil, false
	}
	return o.DiskToOverwrite, true
}

// HasDiskToOverwrite returns a boolean if a field has been set.
func (o *VirtualDiskMappingResponse) HasDiskToOverwrite() bool {
	if o != nil && o.DiskToOverwrite != nil {
		return true
	}

	return false
}

// SetDiskToOverwrite gets a reference to the given VirtualDiskIdInformation and assigns it to the DiskToOverwrite field.
func (o *VirtualDiskMappingResponse) SetDiskToOverwrite(v VirtualDiskIdInformation) {
	o.DiskToOverwrite = &v
}

// GetSourceDisk returns the SourceDisk field value if set, zero value otherwise.
func (o *VirtualDiskMappingResponse) GetSourceDisk() VirtualDiskIdInformation {
	if o == nil || o.SourceDisk == nil {
		var ret VirtualDiskIdInformation
		return ret
	}
	return *o.SourceDisk
}

// GetSourceDiskOk returns a tuple with the SourceDisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDiskMappingResponse) GetSourceDiskOk() (*VirtualDiskIdInformation, bool) {
	if o == nil || o.SourceDisk == nil {
		return nil, false
	}
	return o.SourceDisk, true
}

// HasSourceDisk returns a boolean if a field has been set.
func (o *VirtualDiskMappingResponse) HasSourceDisk() bool {
	if o != nil && o.SourceDisk != nil {
		return true
	}

	return false
}

// SetSourceDisk gets a reference to the given VirtualDiskIdInformation and assigns it to the SourceDisk field.
func (o *VirtualDiskMappingResponse) SetSourceDisk(v VirtualDiskIdInformation) {
	o.SourceDisk = &v
}

// GetTargetLocation returns the TargetLocation field value if set, zero value otherwise.
func (o *VirtualDiskMappingResponse) GetTargetLocation() ProtectionSource {
	if o == nil || o.TargetLocation == nil {
		var ret ProtectionSource
		return ret
	}
	return *o.TargetLocation
}

// GetTargetLocationOk returns a tuple with the TargetLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDiskMappingResponse) GetTargetLocationOk() (*ProtectionSource, bool) {
	if o == nil || o.TargetLocation == nil {
		return nil, false
	}
	return o.TargetLocation, true
}

// HasTargetLocation returns a boolean if a field has been set.
func (o *VirtualDiskMappingResponse) HasTargetLocation() bool {
	if o != nil && o.TargetLocation != nil {
		return true
	}

	return false
}

// SetTargetLocation gets a reference to the given ProtectionSource and assigns it to the TargetLocation field.
func (o *VirtualDiskMappingResponse) SetTargetLocation(v ProtectionSource) {
	o.TargetLocation = &v
}

func (o VirtualDiskMappingResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DiskToOverwrite != nil {
		toSerialize["diskToOverwrite"] = o.DiskToOverwrite
	}
	if o.SourceDisk != nil {
		toSerialize["sourceDisk"] = o.SourceDisk
	}
	if o.TargetLocation != nil {
		toSerialize["targetLocation"] = o.TargetLocation
	}
	return json.Marshal(toSerialize)
}

type NullableVirtualDiskMappingResponse struct {
	value *VirtualDiskMappingResponse
	isSet bool
}

func (v NullableVirtualDiskMappingResponse) Get() *VirtualDiskMappingResponse {
	return v.value
}

func (v *NullableVirtualDiskMappingResponse) Set(val *VirtualDiskMappingResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualDiskMappingResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualDiskMappingResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualDiskMappingResponse(val *VirtualDiskMappingResponse) *NullableVirtualDiskMappingResponse {
	return &NullableVirtualDiskMappingResponse{value: val, isSet: true}
}

func (v NullableVirtualDiskMappingResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualDiskMappingResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


