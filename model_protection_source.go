/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ProtectionSource Specifies a generic structure that represents a node in the Protection Source tree. Node details will depend on the environment of the Protection Source.
type ProtectionSource struct {
	// Specifies details about an Acropolis Protection Source when the environment is set to 'kAcropolis'.
	AcropolisProtectionSource NullableAcropolisProtectionSource `json:"acropolisProtectionSource,omitempty"`
	// Specifies details about an AD Protection Source when the environment is set to 'kAD'.
	AdProtectionSource NullableAdProtectionSource `json:"adProtectionSource,omitempty"`
	// Specifies details about an AWS Protection Source when the environment is set to 'kAWS'.
	AwsProtectionSource NullableAwsProtectionSource `json:"awsProtectionSource,omitempty"`
	// Specifies details about an Azure Protection Source when the environment is set to 'kAzure'.
	AzureProtectionSource NullableAzureProtectionSource `json:"azureProtectionSource,omitempty"`
	// Specifies details about a Cassandra Protection Source when the environment is set to 'kCassandra'.
	CassandraProtectionSource NullableCassandraProtectionSource `json:"cassandraProtectionSource,omitempty"`
	// Specifies details about a Couchbase Protection Source when the environment is set to 'kCouchbase'.
	CouchbaseProtectionSource NullableCouchbaseProtectionSource `json:"couchbaseProtectionSource,omitempty"`
	// Specifies details about a Elastifile Protection Source when the environment is set to 'kElastifile'.
	ElastifileProtectionSource NullableElastifileProtectionSource `json:"elastifileProtectionSource,omitempty"`
	// Specifies the environment (such as 'kVMware' or 'kSQL') where the Protection Source exists. Depending on the environment, one of the following Protection Sources are initialized.  NOTE: kPuppeteer refers to Cohesity's Remote Adapter. Supported environment types such as 'kView', 'kSQL', 'kVMware', etc. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter. 'kVMware' indicates the VMware Protection Source environment. 'kHyperV' indicates the HyperV Protection Source environment. 'kSQL' indicates the SQL Protection Source environment. 'kView' indicates the View Protection Source environment. 'kPuppeteer' indicates the Cohesity's Remote Adapter. 'kPhysical' indicates the physical Protection Source environment. 'kPure' indicates the Pure Storage Protection Source environment. 'Nimble' indicates the Nimble Storage Protection Source environment. 'kAzure' indicates the Microsoft's Azure Protection Source environment. 'kNetapp' indicates the Netapp Protection Source environment. 'kAgent' indicates the Agent Protection Source environment. 'kGenericNas' indicates the Generic Network Attached Storage Protection Source environment. 'kAcropolis' indicates the Acropolis Protection Source environment. 'kPhsicalFiles' indicates the Physical Files Protection Source environment. 'kIsilon' indicates the Dell EMC's Isilon Protection Source environment. 'kGPFS' indicates IBM's GPFS Protection Source environment. 'kKVM' indicates the KVM Protection Source environment. 'kAWS' indicates the AWS Protection Source environment. 'kExchange' indicates the Exchange Protection Source environment. 'kHyperVVSS' indicates the HyperV VSS Protection Source environment. 'kOracle' indicates the Oracle Protection Source environment. 'kGCP' indicates the Google Cloud Platform Protection Source environment. 'kFlashBlade' indicates the Flash Blade Protection Source environment. 'kAWSNative' indicates the AWS Native Protection Source environment. 'kO365' indicates the Office 365 Protection Source environment. 'kO365Outlook' indicates Office 365 outlook Protection Source environment. 'kHyperFlex' indicates the Hyper Flex Protection Source environment. 'kGCPNative' indicates the GCP Native Protection Source environment. 'kAzureNative' indicates the Azure Native Protection Source environment. 'kKubernetes' indicates a Kubernetes Protection Source environment. 'kElastifile' indicates Elastifile Protection Source environment. 'kAD' indicates Active Directory Protection Source environment. 'kRDSSnapshotManager' indicates AWS RDS Protection Source environment. 'kCassandra' indicates Cassandra Protection Source environment. 'kMongoDB' indicates MongoDB Protection Source environment. 'kCouchbase' indicates Couchbase Protection Source environment. 'kHdfs' indicates Hdfs Protection Source environment. 'kHive' indicates Hive Protection Source environment. 'kHBase' indicates HBase Protection Source environment.
	Environment NullableString `json:"environment,omitempty"`
	// Specifies details about an Exchange Protection Source when the environment is set to 'kExchange'.
	ExchangeProtectionSource NullableExchangeProtectionSource `json:"exchangeProtectionSource,omitempty"`
	// Specifies details about a Pure Storage FlashBlade Protection Source when the environment is set to 'kFlashBlade'.
	FlashBladeProtectionSource NullableFlashBladeProtectionSource `json:"flashBladeProtectionSource,omitempty"`
	// Specifies details about an GCP Protection Source when the environment is set to 'kGCP'.
	GcpProtectionSource NullableGcpProtectionSource `json:"gcpProtectionSource,omitempty"`
	// Specifies details about an GPFS Protection Source when the environment is set to 'kGPFS'.
	GpfsProtectionSource NullableGpfsProtectionSource `json:"gpfsProtectionSource,omitempty"`
	// Specifies details about a HBase Protection Source when the environment is set to 'kHBase'.
	HbaseProtectionSource NullableHBaseProtectionSource `json:"hbaseProtectionSource,omitempty"`
	// Specifies details about a Hdfs Protection Source when the environment is set to 'kHdfs'.
	HdfsProtectionSource NullableHdfsProtectionSource `json:"hdfsProtectionSource,omitempty"`
	// Specifies details about a Hive Protection Source when the environment is set to 'kHive'.
	HiveProtectionSource NullableHiveProtectionSource `json:"hiveProtectionSource,omitempty"`
	// Specifies details about a HyperFlex Storage Snapshot source when the environment is set to 'kHyperFlex'
	HyperFlexProtectionSource NullableHyperFlexProtectionSource `json:"hyperFlexProtectionSource,omitempty"`
	// Specifies details about a HyperV Protection Source when the environment is set to 'kHyperV'.
	HypervProtectionSource NullableHypervProtectionSource `json:"hypervProtectionSource,omitempty"`
	// Specifies an id of the Protection Source.
	Id NullableInt64 `json:"id,omitempty"`
	// Specifies details about an Isilon OneFs Protection Source when the environment is set to 'kIsilon'.
	IsilonProtectionSource NullableIsilonProtectionSource `json:"isilonProtectionSource,omitempty"`
	// Specifies details about a Kubernetes Protection Source when the environment is set to 'kKubernetes'.
	KubernetesProtectionSource NullableKubernetesProtectionSource `json:"kubernetesProtectionSource,omitempty"`
	// Specifies details about a KVM Protection Source when the environment is set to 'kKVM'.
	KvmProtectionSource NullableKvmProtectionSource `json:"kvmProtectionSource,omitempty"`
	// Specifies details about a MongoDB Protection Source when the environment is set to 'kMongoDB'.
	MongodbProtectionSource NullableMongoDBProtectionSource `json:"mongodbProtectionSource,omitempty"`
	// Specifies a name of the Protection Source.
	Name NullableString `json:"name,omitempty"`
	// Specifies details about a Generic NAS Protection Source when the environment is set to 'kGenericNas'.
	NasProtectionSource NullableNasProtectionSource `json:"nasProtectionSource,omitempty"`
	// Specifies details about a NetApp Protection Source when the environment is set to 'kNetapp'.
	NetappProtectionSource NullableNetappProtectionSource `json:"netappProtectionSource,omitempty"`
	// Specifies details about a SAN Protection Source when the environment is set to 'kNimble'.
	NimbleProtectionSource NullableNimbleProtectionSource `json:"nimbleProtectionSource,omitempty"`
	// Specifies details about an Office 365 Protection Source when the environment is set to 'kO365'.
	Office365ProtectionSource NullableOffice365ProtectionSource `json:"office365ProtectionSource,omitempty"`
	// Specifies details about an Oracle Protection Source when the environment is set to 'kOracle'.
	OracleProtectionSource NullableOracleProtectionSource `json:"oracleProtectionSource,omitempty"`
	// Specifies an id of the parent of the Protection Source.
	ParentId NullableInt64 `json:"parentId,omitempty"`
	// Specifies details about a Physical Protection Source when the environment is set to 'kPhysical'.
	PhysicalProtectionSource NullablePhysicalProtectionSource `json:"physicalProtectionSource,omitempty"`
	// Specifies details about a Pure Protection Source when the environment is set to 'kPure'.
	PureProtectionSource NullablePureProtectionSource `json:"pureProtectionSource,omitempty"`
	// Specifies details about a SQL Protection Source when the environment is set to 'kSQL'.
	SqlProtectionSource NullableSqlProtectionSource `json:"sqlProtectionSource,omitempty"`
	// Specifies details about a View Protection Source when the environment is set to 'kView'.
	ViewProtectionSource NullableViewProtectionSource `json:"viewProtectionSource,omitempty"`
	// Specifies details about a VMware Protection Source when the environment is set to 'kVMware'.
	VmWareProtectionSource NullableVMwareProtectionSource `json:"vmWareProtectionSource,omitempty"`
}

// NewProtectionSource instantiates a new ProtectionSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtectionSource() *ProtectionSource {
	this := ProtectionSource{}
	return &this
}

// NewProtectionSourceWithDefaults instantiates a new ProtectionSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtectionSourceWithDefaults() *ProtectionSource {
	this := ProtectionSource{}
	return &this
}

// GetAcropolisProtectionSource returns the AcropolisProtectionSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSource) GetAcropolisProtectionSource() AcropolisProtectionSource {
	if o == nil || o.AcropolisProtectionSource.Get() == nil {
		var ret AcropolisProtectionSource
		return ret
	}
	return *o.AcropolisProtectionSource.Get()
}

// GetAcropolisProtectionSourceOk returns a tuple with the AcropolisProtectionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSource) GetAcropolisProtectionSourceOk() (*AcropolisProtectionSource, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AcropolisProtectionSource.Get(), o.AcropolisProtectionSource.IsSet()
}

// HasAcropolisProtectionSource returns a boolean if a field has been set.
func (o *ProtectionSource) HasAcropolisProtectionSource() bool {
	if o != nil && o.AcropolisProtectionSource.IsSet() {
		return true
	}

	return false
}

// SetAcropolisProtectionSource gets a reference to the given NullableAcropolisProtectionSource and assigns it to the AcropolisProtectionSource field.
func (o *ProtectionSource) SetAcropolisProtectionSource(v AcropolisProtectionSource) {
	o.AcropolisProtectionSource.Set(&v)
}
// SetAcropolisProtectionSourceNil sets the value for AcropolisProtectionSource to be an explicit nil
func (o *ProtectionSource) SetAcropolisProtectionSourceNil() {
	o.AcropolisProtectionSource.Set(nil)
}

// UnsetAcropolisProtectionSource ensures that no value is present for AcropolisProtectionSource, not even an explicit nil
func (o *ProtectionSource) UnsetAcropolisProtectionSource() {
	o.AcropolisProtectionSource.Unset()
}

// GetAdProtectionSource returns the AdProtectionSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSource) GetAdProtectionSource() AdProtectionSource {
	if o == nil || o.AdProtectionSource.Get() == nil {
		var ret AdProtectionSource
		return ret
	}
	return *o.AdProtectionSource.Get()
}

// GetAdProtectionSourceOk returns a tuple with the AdProtectionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSource) GetAdProtectionSourceOk() (*AdProtectionSource, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AdProtectionSource.Get(), o.AdProtectionSource.IsSet()
}

// HasAdProtectionSource returns a boolean if a field has been set.
func (o *ProtectionSource) HasAdProtectionSource() bool {
	if o != nil && o.AdProtectionSource.IsSet() {
		return true
	}

	return false
}

// SetAdProtectionSource gets a reference to the given NullableAdProtectionSource and assigns it to the AdProtectionSource field.
func (o *ProtectionSource) SetAdProtectionSource(v AdProtectionSource) {
	o.AdProtectionSource.Set(&v)
}
// SetAdProtectionSourceNil sets the value for AdProtectionSource to be an explicit nil
func (o *ProtectionSource) SetAdProtectionSourceNil() {
	o.AdProtectionSource.Set(nil)
}

// UnsetAdProtectionSource ensures that no value is present for AdProtectionSource, not even an explicit nil
func (o *ProtectionSource) UnsetAdProtectionSource() {
	o.AdProtectionSource.Unset()
}

// GetAwsProtectionSource returns the AwsProtectionSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSource) GetAwsProtectionSource() AwsProtectionSource {
	if o == nil || o.AwsProtectionSource.Get() == nil {
		var ret AwsProtectionSource
		return ret
	}
	return *o.AwsProtectionSource.Get()
}

// GetAwsProtectionSourceOk returns a tuple with the AwsProtectionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSource) GetAwsProtectionSourceOk() (*AwsProtectionSource, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AwsProtectionSource.Get(), o.AwsProtectionSource.IsSet()
}

// HasAwsProtectionSource returns a boolean if a field has been set.
func (o *ProtectionSource) HasAwsProtectionSource() bool {
	if o != nil && o.AwsProtectionSource.IsSet() {
		return true
	}

	return false
}

// SetAwsProtectionSource gets a reference to the given NullableAwsProtectionSource and assigns it to the AwsProtectionSource field.
func (o *ProtectionSource) SetAwsProtectionSource(v AwsProtectionSource) {
	o.AwsProtectionSource.Set(&v)
}
// SetAwsProtectionSourceNil sets the value for AwsProtectionSource to be an explicit nil
func (o *ProtectionSource) SetAwsProtectionSourceNil() {
	o.AwsProtectionSource.Set(nil)
}

// UnsetAwsProtectionSource ensures that no value is present for AwsProtectionSource, not even an explicit nil
func (o *ProtectionSource) UnsetAwsProtectionSource() {
	o.AwsProtectionSource.Unset()
}

// GetAzureProtectionSource returns the AzureProtectionSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSource) GetAzureProtectionSource() AzureProtectionSource {
	if o == nil || o.AzureProtectionSource.Get() == nil {
		var ret AzureProtectionSource
		return ret
	}
	return *o.AzureProtectionSource.Get()
}

// GetAzureProtectionSourceOk returns a tuple with the AzureProtectionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSource) GetAzureProtectionSourceOk() (*AzureProtectionSource, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AzureProtectionSource.Get(), o.AzureProtectionSource.IsSet()
}

// HasAzureProtectionSource returns a boolean if a field has been set.
func (o *ProtectionSource) HasAzureProtectionSource() bool {
	if o != nil && o.AzureProtectionSource.IsSet() {
		return true
	}

	return false
}

// SetAzureProtectionSource gets a reference to the given NullableAzureProtectionSource and assigns it to the AzureProtectionSource field.
func (o *ProtectionSource) SetAzureProtectionSource(v AzureProtectionSource) {
	o.AzureProtectionSource.Set(&v)
}
// SetAzureProtectionSourceNil sets the value for AzureProtectionSource to be an explicit nil
func (o *ProtectionSource) SetAzureProtectionSourceNil() {
	o.AzureProtectionSource.Set(nil)
}

// UnsetAzureProtectionSource ensures that no value is present for AzureProtectionSource, not even an explicit nil
func (o *ProtectionSource) UnsetAzureProtectionSource() {
	o.AzureProtectionSource.Unset()
}

// GetCassandraProtectionSource returns the CassandraProtectionSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSource) GetCassandraProtectionSource() CassandraProtectionSource {
	if o == nil || o.CassandraProtectionSource.Get() == nil {
		var ret CassandraProtectionSource
		return ret
	}
	return *o.CassandraProtectionSource.Get()
}

// GetCassandraProtectionSourceOk returns a tuple with the CassandraProtectionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSource) GetCassandraProtectionSourceOk() (*CassandraProtectionSource, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CassandraProtectionSource.Get(), o.CassandraProtectionSource.IsSet()
}

// HasCassandraProtectionSource returns a boolean if a field has been set.
func (o *ProtectionSource) HasCassandraProtectionSource() bool {
	if o != nil && o.CassandraProtectionSource.IsSet() {
		return true
	}

	return false
}

// SetCassandraProtectionSource gets a reference to the given NullableCassandraProtectionSource and assigns it to the CassandraProtectionSource field.
func (o *ProtectionSource) SetCassandraProtectionSource(v CassandraProtectionSource) {
	o.CassandraProtectionSource.Set(&v)
}
// SetCassandraProtectionSourceNil sets the value for CassandraProtectionSource to be an explicit nil
func (o *ProtectionSource) SetCassandraProtectionSourceNil() {
	o.CassandraProtectionSource.Set(nil)
}

// UnsetCassandraProtectionSource ensures that no value is present for CassandraProtectionSource, not even an explicit nil
func (o *ProtectionSource) UnsetCassandraProtectionSource() {
	o.CassandraProtectionSource.Unset()
}

// GetCouchbaseProtectionSource returns the CouchbaseProtectionSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSource) GetCouchbaseProtectionSource() CouchbaseProtectionSource {
	if o == nil || o.CouchbaseProtectionSource.Get() == nil {
		var ret CouchbaseProtectionSource
		return ret
	}
	return *o.CouchbaseProtectionSource.Get()
}

// GetCouchbaseProtectionSourceOk returns a tuple with the CouchbaseProtectionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSource) GetCouchbaseProtectionSourceOk() (*CouchbaseProtectionSource, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CouchbaseProtectionSource.Get(), o.CouchbaseProtectionSource.IsSet()
}

// HasCouchbaseProtectionSource returns a boolean if a field has been set.
func (o *ProtectionSource) HasCouchbaseProtectionSource() bool {
	if o != nil && o.CouchbaseProtectionSource.IsSet() {
		return true
	}

	return false
}

// SetCouchbaseProtectionSource gets a reference to the given NullableCouchbaseProtectionSource and assigns it to the CouchbaseProtectionSource field.
func (o *ProtectionSource) SetCouchbaseProtectionSource(v CouchbaseProtectionSource) {
	o.CouchbaseProtectionSource.Set(&v)
}
// SetCouchbaseProtectionSourceNil sets the value for CouchbaseProtectionSource to be an explicit nil
func (o *ProtectionSource) SetCouchbaseProtectionSourceNil() {
	o.CouchbaseProtectionSource.Set(nil)
}

// UnsetCouchbaseProtectionSource ensures that no value is present for CouchbaseProtectionSource, not even an explicit nil
func (o *ProtectionSource) UnsetCouchbaseProtectionSource() {
	o.CouchbaseProtectionSource.Unset()
}

// GetElastifileProtectionSource returns the ElastifileProtectionSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSource) GetElastifileProtectionSource() ElastifileProtectionSource {
	if o == nil || o.ElastifileProtectionSource.Get() == nil {
		var ret ElastifileProtectionSource
		return ret
	}
	return *o.ElastifileProtectionSource.Get()
}

// GetElastifileProtectionSourceOk returns a tuple with the ElastifileProtectionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSource) GetElastifileProtectionSourceOk() (*ElastifileProtectionSource, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ElastifileProtectionSource.Get(), o.ElastifileProtectionSource.IsSet()
}

// HasElastifileProtectionSource returns a boolean if a field has been set.
func (o *ProtectionSource) HasElastifileProtectionSource() bool {
	if o != nil && o.ElastifileProtectionSource.IsSet() {
		return true
	}

	return false
}

// SetElastifileProtectionSource gets a reference to the given NullableElastifileProtectionSource and assigns it to the ElastifileProtectionSource field.
func (o *ProtectionSource) SetElastifileProtectionSource(v ElastifileProtectionSource) {
	o.ElastifileProtectionSource.Set(&v)
}
// SetElastifileProtectionSourceNil sets the value for ElastifileProtectionSource to be an explicit nil
func (o *ProtectionSource) SetElastifileProtectionSourceNil() {
	o.ElastifileProtectionSource.Set(nil)
}

// UnsetElastifileProtectionSource ensures that no value is present for ElastifileProtectionSource, not even an explicit nil
func (o *ProtectionSource) UnsetElastifileProtectionSource() {
	o.ElastifileProtectionSource.Unset()
}

// GetEnvironment returns the Environment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSource) GetEnvironment() string {
	if o == nil || o.Environment.Get() == nil {
		var ret string
		return ret
	}
	return *o.Environment.Get()
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSource) GetEnvironmentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Environment.Get(), o.Environment.IsSet()
}

// HasEnvironment returns a boolean if a field has been set.
func (o *ProtectionSource) HasEnvironment() bool {
	if o != nil && o.Environment.IsSet() {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given NullableString and assigns it to the Environment field.
func (o *ProtectionSource) SetEnvironment(v string) {
	o.Environment.Set(&v)
}
// SetEnvironmentNil sets the value for Environment to be an explicit nil
func (o *ProtectionSource) SetEnvironmentNil() {
	o.Environment.Set(nil)
}

// UnsetEnvironment ensures that no value is present for Environment, not even an explicit nil
func (o *ProtectionSource) UnsetEnvironment() {
	o.Environment.Unset()
}

// GetExchangeProtectionSource returns the ExchangeProtectionSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSource) GetExchangeProtectionSource() ExchangeProtectionSource {
	if o == nil || o.ExchangeProtectionSource.Get() == nil {
		var ret ExchangeProtectionSource
		return ret
	}
	return *o.ExchangeProtectionSource.Get()
}

// GetExchangeProtectionSourceOk returns a tuple with the ExchangeProtectionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSource) GetExchangeProtectionSourceOk() (*ExchangeProtectionSource, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExchangeProtectionSource.Get(), o.ExchangeProtectionSource.IsSet()
}

// HasExchangeProtectionSource returns a boolean if a field has been set.
func (o *ProtectionSource) HasExchangeProtectionSource() bool {
	if o != nil && o.ExchangeProtectionSource.IsSet() {
		return true
	}

	return false
}

// SetExchangeProtectionSource gets a reference to the given NullableExchangeProtectionSource and assigns it to the ExchangeProtectionSource field.
func (o *ProtectionSource) SetExchangeProtectionSource(v ExchangeProtectionSource) {
	o.ExchangeProtectionSource.Set(&v)
}
// SetExchangeProtectionSourceNil sets the value for ExchangeProtectionSource to be an explicit nil
func (o *ProtectionSource) SetExchangeProtectionSourceNil() {
	o.ExchangeProtectionSource.Set(nil)
}

// UnsetExchangeProtectionSource ensures that no value is present for ExchangeProtectionSource, not even an explicit nil
func (o *ProtectionSource) UnsetExchangeProtectionSource() {
	o.ExchangeProtectionSource.Unset()
}

// GetFlashBladeProtectionSource returns the FlashBladeProtectionSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSource) GetFlashBladeProtectionSource() FlashBladeProtectionSource {
	if o == nil || o.FlashBladeProtectionSource.Get() == nil {
		var ret FlashBladeProtectionSource
		return ret
	}
	return *o.FlashBladeProtectionSource.Get()
}

// GetFlashBladeProtectionSourceOk returns a tuple with the FlashBladeProtectionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSource) GetFlashBladeProtectionSourceOk() (*FlashBladeProtectionSource, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FlashBladeProtectionSource.Get(), o.FlashBladeProtectionSource.IsSet()
}

// HasFlashBladeProtectionSource returns a boolean if a field has been set.
func (o *ProtectionSource) HasFlashBladeProtectionSource() bool {
	if o != nil && o.FlashBladeProtectionSource.IsSet() {
		return true
	}

	return false
}

// SetFlashBladeProtectionSource gets a reference to the given NullableFlashBladeProtectionSource and assigns it to the FlashBladeProtectionSource field.
func (o *ProtectionSource) SetFlashBladeProtectionSource(v FlashBladeProtectionSource) {
	o.FlashBladeProtectionSource.Set(&v)
}
// SetFlashBladeProtectionSourceNil sets the value for FlashBladeProtectionSource to be an explicit nil
func (o *ProtectionSource) SetFlashBladeProtectionSourceNil() {
	o.FlashBladeProtectionSource.Set(nil)
}

// UnsetFlashBladeProtectionSource ensures that no value is present for FlashBladeProtectionSource, not even an explicit nil
func (o *ProtectionSource) UnsetFlashBladeProtectionSource() {
	o.FlashBladeProtectionSource.Unset()
}

// GetGcpProtectionSource returns the GcpProtectionSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSource) GetGcpProtectionSource() GcpProtectionSource {
	if o == nil || o.GcpProtectionSource.Get() == nil {
		var ret GcpProtectionSource
		return ret
	}
	return *o.GcpProtectionSource.Get()
}

// GetGcpProtectionSourceOk returns a tuple with the GcpProtectionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSource) GetGcpProtectionSourceOk() (*GcpProtectionSource, bool) {
	if o == nil  {
		return nil, false
	}
	return o.GcpProtectionSource.Get(), o.GcpProtectionSource.IsSet()
}

// HasGcpProtectionSource returns a boolean if a field has been set.
func (o *ProtectionSource) HasGcpProtectionSource() bool {
	if o != nil && o.GcpProtectionSource.IsSet() {
		return true
	}

	return false
}

// SetGcpProtectionSource gets a reference to the given NullableGcpProtectionSource and assigns it to the GcpProtectionSource field.
func (o *ProtectionSource) SetGcpProtectionSource(v GcpProtectionSource) {
	o.GcpProtectionSource.Set(&v)
}
// SetGcpProtectionSourceNil sets the value for GcpProtectionSource to be an explicit nil
func (o *ProtectionSource) SetGcpProtectionSourceNil() {
	o.GcpProtectionSource.Set(nil)
}

// UnsetGcpProtectionSource ensures that no value is present for GcpProtectionSource, not even an explicit nil
func (o *ProtectionSource) UnsetGcpProtectionSource() {
	o.GcpProtectionSource.Unset()
}

// GetGpfsProtectionSource returns the GpfsProtectionSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSource) GetGpfsProtectionSource() GpfsProtectionSource {
	if o == nil || o.GpfsProtectionSource.Get() == nil {
		var ret GpfsProtectionSource
		return ret
	}
	return *o.GpfsProtectionSource.Get()
}

// GetGpfsProtectionSourceOk returns a tuple with the GpfsProtectionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSource) GetGpfsProtectionSourceOk() (*GpfsProtectionSource, bool) {
	if o == nil  {
		return nil, false
	}
	return o.GpfsProtectionSource.Get(), o.GpfsProtectionSource.IsSet()
}

// HasGpfsProtectionSource returns a boolean if a field has been set.
func (o *ProtectionSource) HasGpfsProtectionSource() bool {
	if o != nil && o.GpfsProtectionSource.IsSet() {
		return true
	}

	return false
}

// SetGpfsProtectionSource gets a reference to the given NullableGpfsProtectionSource and assigns it to the GpfsProtectionSource field.
func (o *ProtectionSource) SetGpfsProtectionSource(v GpfsProtectionSource) {
	o.GpfsProtectionSource.Set(&v)
}
// SetGpfsProtectionSourceNil sets the value for GpfsProtectionSource to be an explicit nil
func (o *ProtectionSource) SetGpfsProtectionSourceNil() {
	o.GpfsProtectionSource.Set(nil)
}

// UnsetGpfsProtectionSource ensures that no value is present for GpfsProtectionSource, not even an explicit nil
func (o *ProtectionSource) UnsetGpfsProtectionSource() {
	o.GpfsProtectionSource.Unset()
}

// GetHbaseProtectionSource returns the HbaseProtectionSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSource) GetHbaseProtectionSource() HBaseProtectionSource {
	if o == nil || o.HbaseProtectionSource.Get() == nil {
		var ret HBaseProtectionSource
		return ret
	}
	return *o.HbaseProtectionSource.Get()
}

// GetHbaseProtectionSourceOk returns a tuple with the HbaseProtectionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSource) GetHbaseProtectionSourceOk() (*HBaseProtectionSource, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HbaseProtectionSource.Get(), o.HbaseProtectionSource.IsSet()
}

// HasHbaseProtectionSource returns a boolean if a field has been set.
func (o *ProtectionSource) HasHbaseProtectionSource() bool {
	if o != nil && o.HbaseProtectionSource.IsSet() {
		return true
	}

	return false
}

// SetHbaseProtectionSource gets a reference to the given NullableHBaseProtectionSource and assigns it to the HbaseProtectionSource field.
func (o *ProtectionSource) SetHbaseProtectionSource(v HBaseProtectionSource) {
	o.HbaseProtectionSource.Set(&v)
}
// SetHbaseProtectionSourceNil sets the value for HbaseProtectionSource to be an explicit nil
func (o *ProtectionSource) SetHbaseProtectionSourceNil() {
	o.HbaseProtectionSource.Set(nil)
}

// UnsetHbaseProtectionSource ensures that no value is present for HbaseProtectionSource, not even an explicit nil
func (o *ProtectionSource) UnsetHbaseProtectionSource() {
	o.HbaseProtectionSource.Unset()
}

// GetHdfsProtectionSource returns the HdfsProtectionSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSource) GetHdfsProtectionSource() HdfsProtectionSource {
	if o == nil || o.HdfsProtectionSource.Get() == nil {
		var ret HdfsProtectionSource
		return ret
	}
	return *o.HdfsProtectionSource.Get()
}

// GetHdfsProtectionSourceOk returns a tuple with the HdfsProtectionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSource) GetHdfsProtectionSourceOk() (*HdfsProtectionSource, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HdfsProtectionSource.Get(), o.HdfsProtectionSource.IsSet()
}

// HasHdfsProtectionSource returns a boolean if a field has been set.
func (o *ProtectionSource) HasHdfsProtectionSource() bool {
	if o != nil && o.HdfsProtectionSource.IsSet() {
		return true
	}

	return false
}

// SetHdfsProtectionSource gets a reference to the given NullableHdfsProtectionSource and assigns it to the HdfsProtectionSource field.
func (o *ProtectionSource) SetHdfsProtectionSource(v HdfsProtectionSource) {
	o.HdfsProtectionSource.Set(&v)
}
// SetHdfsProtectionSourceNil sets the value for HdfsProtectionSource to be an explicit nil
func (o *ProtectionSource) SetHdfsProtectionSourceNil() {
	o.HdfsProtectionSource.Set(nil)
}

// UnsetHdfsProtectionSource ensures that no value is present for HdfsProtectionSource, not even an explicit nil
func (o *ProtectionSource) UnsetHdfsProtectionSource() {
	o.HdfsProtectionSource.Unset()
}

// GetHiveProtectionSource returns the HiveProtectionSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSource) GetHiveProtectionSource() HiveProtectionSource {
	if o == nil || o.HiveProtectionSource.Get() == nil {
		var ret HiveProtectionSource
		return ret
	}
	return *o.HiveProtectionSource.Get()
}

// GetHiveProtectionSourceOk returns a tuple with the HiveProtectionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSource) GetHiveProtectionSourceOk() (*HiveProtectionSource, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HiveProtectionSource.Get(), o.HiveProtectionSource.IsSet()
}

// HasHiveProtectionSource returns a boolean if a field has been set.
func (o *ProtectionSource) HasHiveProtectionSource() bool {
	if o != nil && o.HiveProtectionSource.IsSet() {
		return true
	}

	return false
}

// SetHiveProtectionSource gets a reference to the given NullableHiveProtectionSource and assigns it to the HiveProtectionSource field.
func (o *ProtectionSource) SetHiveProtectionSource(v HiveProtectionSource) {
	o.HiveProtectionSource.Set(&v)
}
// SetHiveProtectionSourceNil sets the value for HiveProtectionSource to be an explicit nil
func (o *ProtectionSource) SetHiveProtectionSourceNil() {
	o.HiveProtectionSource.Set(nil)
}

// UnsetHiveProtectionSource ensures that no value is present for HiveProtectionSource, not even an explicit nil
func (o *ProtectionSource) UnsetHiveProtectionSource() {
	o.HiveProtectionSource.Unset()
}

// GetHyperFlexProtectionSource returns the HyperFlexProtectionSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSource) GetHyperFlexProtectionSource() HyperFlexProtectionSource {
	if o == nil || o.HyperFlexProtectionSource.Get() == nil {
		var ret HyperFlexProtectionSource
		return ret
	}
	return *o.HyperFlexProtectionSource.Get()
}

// GetHyperFlexProtectionSourceOk returns a tuple with the HyperFlexProtectionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSource) GetHyperFlexProtectionSourceOk() (*HyperFlexProtectionSource, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HyperFlexProtectionSource.Get(), o.HyperFlexProtectionSource.IsSet()
}

// HasHyperFlexProtectionSource returns a boolean if a field has been set.
func (o *ProtectionSource) HasHyperFlexProtectionSource() bool {
	if o != nil && o.HyperFlexProtectionSource.IsSet() {
		return true
	}

	return false
}

// SetHyperFlexProtectionSource gets a reference to the given NullableHyperFlexProtectionSource and assigns it to the HyperFlexProtectionSource field.
func (o *ProtectionSource) SetHyperFlexProtectionSource(v HyperFlexProtectionSource) {
	o.HyperFlexProtectionSource.Set(&v)
}
// SetHyperFlexProtectionSourceNil sets the value for HyperFlexProtectionSource to be an explicit nil
func (o *ProtectionSource) SetHyperFlexProtectionSourceNil() {
	o.HyperFlexProtectionSource.Set(nil)
}

// UnsetHyperFlexProtectionSource ensures that no value is present for HyperFlexProtectionSource, not even an explicit nil
func (o *ProtectionSource) UnsetHyperFlexProtectionSource() {
	o.HyperFlexProtectionSource.Unset()
}

// GetHypervProtectionSource returns the HypervProtectionSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSource) GetHypervProtectionSource() HypervProtectionSource {
	if o == nil || o.HypervProtectionSource.Get() == nil {
		var ret HypervProtectionSource
		return ret
	}
	return *o.HypervProtectionSource.Get()
}

// GetHypervProtectionSourceOk returns a tuple with the HypervProtectionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSource) GetHypervProtectionSourceOk() (*HypervProtectionSource, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HypervProtectionSource.Get(), o.HypervProtectionSource.IsSet()
}

// HasHypervProtectionSource returns a boolean if a field has been set.
func (o *ProtectionSource) HasHypervProtectionSource() bool {
	if o != nil && o.HypervProtectionSource.IsSet() {
		return true
	}

	return false
}

// SetHypervProtectionSource gets a reference to the given NullableHypervProtectionSource and assigns it to the HypervProtectionSource field.
func (o *ProtectionSource) SetHypervProtectionSource(v HypervProtectionSource) {
	o.HypervProtectionSource.Set(&v)
}
// SetHypervProtectionSourceNil sets the value for HypervProtectionSource to be an explicit nil
func (o *ProtectionSource) SetHypervProtectionSourceNil() {
	o.HypervProtectionSource.Set(nil)
}

// UnsetHypervProtectionSource ensures that no value is present for HypervProtectionSource, not even an explicit nil
func (o *ProtectionSource) UnsetHypervProtectionSource() {
	o.HypervProtectionSource.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSource) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSource) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *ProtectionSource) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *ProtectionSource) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *ProtectionSource) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *ProtectionSource) UnsetId() {
	o.Id.Unset()
}

// GetIsilonProtectionSource returns the IsilonProtectionSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSource) GetIsilonProtectionSource() IsilonProtectionSource {
	if o == nil || o.IsilonProtectionSource.Get() == nil {
		var ret IsilonProtectionSource
		return ret
	}
	return *o.IsilonProtectionSource.Get()
}

// GetIsilonProtectionSourceOk returns a tuple with the IsilonProtectionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSource) GetIsilonProtectionSourceOk() (*IsilonProtectionSource, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsilonProtectionSource.Get(), o.IsilonProtectionSource.IsSet()
}

// HasIsilonProtectionSource returns a boolean if a field has been set.
func (o *ProtectionSource) HasIsilonProtectionSource() bool {
	if o != nil && o.IsilonProtectionSource.IsSet() {
		return true
	}

	return false
}

// SetIsilonProtectionSource gets a reference to the given NullableIsilonProtectionSource and assigns it to the IsilonProtectionSource field.
func (o *ProtectionSource) SetIsilonProtectionSource(v IsilonProtectionSource) {
	o.IsilonProtectionSource.Set(&v)
}
// SetIsilonProtectionSourceNil sets the value for IsilonProtectionSource to be an explicit nil
func (o *ProtectionSource) SetIsilonProtectionSourceNil() {
	o.IsilonProtectionSource.Set(nil)
}

// UnsetIsilonProtectionSource ensures that no value is present for IsilonProtectionSource, not even an explicit nil
func (o *ProtectionSource) UnsetIsilonProtectionSource() {
	o.IsilonProtectionSource.Unset()
}

// GetKubernetesProtectionSource returns the KubernetesProtectionSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSource) GetKubernetesProtectionSource() KubernetesProtectionSource {
	if o == nil || o.KubernetesProtectionSource.Get() == nil {
		var ret KubernetesProtectionSource
		return ret
	}
	return *o.KubernetesProtectionSource.Get()
}

// GetKubernetesProtectionSourceOk returns a tuple with the KubernetesProtectionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSource) GetKubernetesProtectionSourceOk() (*KubernetesProtectionSource, bool) {
	if o == nil  {
		return nil, false
	}
	return o.KubernetesProtectionSource.Get(), o.KubernetesProtectionSource.IsSet()
}

// HasKubernetesProtectionSource returns a boolean if a field has been set.
func (o *ProtectionSource) HasKubernetesProtectionSource() bool {
	if o != nil && o.KubernetesProtectionSource.IsSet() {
		return true
	}

	return false
}

// SetKubernetesProtectionSource gets a reference to the given NullableKubernetesProtectionSource and assigns it to the KubernetesProtectionSource field.
func (o *ProtectionSource) SetKubernetesProtectionSource(v KubernetesProtectionSource) {
	o.KubernetesProtectionSource.Set(&v)
}
// SetKubernetesProtectionSourceNil sets the value for KubernetesProtectionSource to be an explicit nil
func (o *ProtectionSource) SetKubernetesProtectionSourceNil() {
	o.KubernetesProtectionSource.Set(nil)
}

// UnsetKubernetesProtectionSource ensures that no value is present for KubernetesProtectionSource, not even an explicit nil
func (o *ProtectionSource) UnsetKubernetesProtectionSource() {
	o.KubernetesProtectionSource.Unset()
}

// GetKvmProtectionSource returns the KvmProtectionSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSource) GetKvmProtectionSource() KvmProtectionSource {
	if o == nil || o.KvmProtectionSource.Get() == nil {
		var ret KvmProtectionSource
		return ret
	}
	return *o.KvmProtectionSource.Get()
}

// GetKvmProtectionSourceOk returns a tuple with the KvmProtectionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSource) GetKvmProtectionSourceOk() (*KvmProtectionSource, bool) {
	if o == nil  {
		return nil, false
	}
	return o.KvmProtectionSource.Get(), o.KvmProtectionSource.IsSet()
}

// HasKvmProtectionSource returns a boolean if a field has been set.
func (o *ProtectionSource) HasKvmProtectionSource() bool {
	if o != nil && o.KvmProtectionSource.IsSet() {
		return true
	}

	return false
}

// SetKvmProtectionSource gets a reference to the given NullableKvmProtectionSource and assigns it to the KvmProtectionSource field.
func (o *ProtectionSource) SetKvmProtectionSource(v KvmProtectionSource) {
	o.KvmProtectionSource.Set(&v)
}
// SetKvmProtectionSourceNil sets the value for KvmProtectionSource to be an explicit nil
func (o *ProtectionSource) SetKvmProtectionSourceNil() {
	o.KvmProtectionSource.Set(nil)
}

// UnsetKvmProtectionSource ensures that no value is present for KvmProtectionSource, not even an explicit nil
func (o *ProtectionSource) UnsetKvmProtectionSource() {
	o.KvmProtectionSource.Unset()
}

// GetMongodbProtectionSource returns the MongodbProtectionSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSource) GetMongodbProtectionSource() MongoDBProtectionSource {
	if o == nil || o.MongodbProtectionSource.Get() == nil {
		var ret MongoDBProtectionSource
		return ret
	}
	return *o.MongodbProtectionSource.Get()
}

// GetMongodbProtectionSourceOk returns a tuple with the MongodbProtectionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSource) GetMongodbProtectionSourceOk() (*MongoDBProtectionSource, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MongodbProtectionSource.Get(), o.MongodbProtectionSource.IsSet()
}

// HasMongodbProtectionSource returns a boolean if a field has been set.
func (o *ProtectionSource) HasMongodbProtectionSource() bool {
	if o != nil && o.MongodbProtectionSource.IsSet() {
		return true
	}

	return false
}

// SetMongodbProtectionSource gets a reference to the given NullableMongoDBProtectionSource and assigns it to the MongodbProtectionSource field.
func (o *ProtectionSource) SetMongodbProtectionSource(v MongoDBProtectionSource) {
	o.MongodbProtectionSource.Set(&v)
}
// SetMongodbProtectionSourceNil sets the value for MongodbProtectionSource to be an explicit nil
func (o *ProtectionSource) SetMongodbProtectionSourceNil() {
	o.MongodbProtectionSource.Set(nil)
}

// UnsetMongodbProtectionSource ensures that no value is present for MongodbProtectionSource, not even an explicit nil
func (o *ProtectionSource) UnsetMongodbProtectionSource() {
	o.MongodbProtectionSource.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSource) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSource) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ProtectionSource) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ProtectionSource) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *ProtectionSource) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ProtectionSource) UnsetName() {
	o.Name.Unset()
}

// GetNasProtectionSource returns the NasProtectionSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSource) GetNasProtectionSource() NasProtectionSource {
	if o == nil || o.NasProtectionSource.Get() == nil {
		var ret NasProtectionSource
		return ret
	}
	return *o.NasProtectionSource.Get()
}

// GetNasProtectionSourceOk returns a tuple with the NasProtectionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSource) GetNasProtectionSourceOk() (*NasProtectionSource, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NasProtectionSource.Get(), o.NasProtectionSource.IsSet()
}

// HasNasProtectionSource returns a boolean if a field has been set.
func (o *ProtectionSource) HasNasProtectionSource() bool {
	if o != nil && o.NasProtectionSource.IsSet() {
		return true
	}

	return false
}

// SetNasProtectionSource gets a reference to the given NullableNasProtectionSource and assigns it to the NasProtectionSource field.
func (o *ProtectionSource) SetNasProtectionSource(v NasProtectionSource) {
	o.NasProtectionSource.Set(&v)
}
// SetNasProtectionSourceNil sets the value for NasProtectionSource to be an explicit nil
func (o *ProtectionSource) SetNasProtectionSourceNil() {
	o.NasProtectionSource.Set(nil)
}

// UnsetNasProtectionSource ensures that no value is present for NasProtectionSource, not even an explicit nil
func (o *ProtectionSource) UnsetNasProtectionSource() {
	o.NasProtectionSource.Unset()
}

// GetNetappProtectionSource returns the NetappProtectionSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSource) GetNetappProtectionSource() NetappProtectionSource {
	if o == nil || o.NetappProtectionSource.Get() == nil {
		var ret NetappProtectionSource
		return ret
	}
	return *o.NetappProtectionSource.Get()
}

// GetNetappProtectionSourceOk returns a tuple with the NetappProtectionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSource) GetNetappProtectionSourceOk() (*NetappProtectionSource, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NetappProtectionSource.Get(), o.NetappProtectionSource.IsSet()
}

// HasNetappProtectionSource returns a boolean if a field has been set.
func (o *ProtectionSource) HasNetappProtectionSource() bool {
	if o != nil && o.NetappProtectionSource.IsSet() {
		return true
	}

	return false
}

// SetNetappProtectionSource gets a reference to the given NullableNetappProtectionSource and assigns it to the NetappProtectionSource field.
func (o *ProtectionSource) SetNetappProtectionSource(v NetappProtectionSource) {
	o.NetappProtectionSource.Set(&v)
}
// SetNetappProtectionSourceNil sets the value for NetappProtectionSource to be an explicit nil
func (o *ProtectionSource) SetNetappProtectionSourceNil() {
	o.NetappProtectionSource.Set(nil)
}

// UnsetNetappProtectionSource ensures that no value is present for NetappProtectionSource, not even an explicit nil
func (o *ProtectionSource) UnsetNetappProtectionSource() {
	o.NetappProtectionSource.Unset()
}

// GetNimbleProtectionSource returns the NimbleProtectionSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSource) GetNimbleProtectionSource() NimbleProtectionSource {
	if o == nil || o.NimbleProtectionSource.Get() == nil {
		var ret NimbleProtectionSource
		return ret
	}
	return *o.NimbleProtectionSource.Get()
}

// GetNimbleProtectionSourceOk returns a tuple with the NimbleProtectionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSource) GetNimbleProtectionSourceOk() (*NimbleProtectionSource, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NimbleProtectionSource.Get(), o.NimbleProtectionSource.IsSet()
}

// HasNimbleProtectionSource returns a boolean if a field has been set.
func (o *ProtectionSource) HasNimbleProtectionSource() bool {
	if o != nil && o.NimbleProtectionSource.IsSet() {
		return true
	}

	return false
}

// SetNimbleProtectionSource gets a reference to the given NullableNimbleProtectionSource and assigns it to the NimbleProtectionSource field.
func (o *ProtectionSource) SetNimbleProtectionSource(v NimbleProtectionSource) {
	o.NimbleProtectionSource.Set(&v)
}
// SetNimbleProtectionSourceNil sets the value for NimbleProtectionSource to be an explicit nil
func (o *ProtectionSource) SetNimbleProtectionSourceNil() {
	o.NimbleProtectionSource.Set(nil)
}

// UnsetNimbleProtectionSource ensures that no value is present for NimbleProtectionSource, not even an explicit nil
func (o *ProtectionSource) UnsetNimbleProtectionSource() {
	o.NimbleProtectionSource.Unset()
}

// GetOffice365ProtectionSource returns the Office365ProtectionSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSource) GetOffice365ProtectionSource() Office365ProtectionSource {
	if o == nil || o.Office365ProtectionSource.Get() == nil {
		var ret Office365ProtectionSource
		return ret
	}
	return *o.Office365ProtectionSource.Get()
}

// GetOffice365ProtectionSourceOk returns a tuple with the Office365ProtectionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSource) GetOffice365ProtectionSourceOk() (*Office365ProtectionSource, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Office365ProtectionSource.Get(), o.Office365ProtectionSource.IsSet()
}

// HasOffice365ProtectionSource returns a boolean if a field has been set.
func (o *ProtectionSource) HasOffice365ProtectionSource() bool {
	if o != nil && o.Office365ProtectionSource.IsSet() {
		return true
	}

	return false
}

// SetOffice365ProtectionSource gets a reference to the given NullableOffice365ProtectionSource and assigns it to the Office365ProtectionSource field.
func (o *ProtectionSource) SetOffice365ProtectionSource(v Office365ProtectionSource) {
	o.Office365ProtectionSource.Set(&v)
}
// SetOffice365ProtectionSourceNil sets the value for Office365ProtectionSource to be an explicit nil
func (o *ProtectionSource) SetOffice365ProtectionSourceNil() {
	o.Office365ProtectionSource.Set(nil)
}

// UnsetOffice365ProtectionSource ensures that no value is present for Office365ProtectionSource, not even an explicit nil
func (o *ProtectionSource) UnsetOffice365ProtectionSource() {
	o.Office365ProtectionSource.Unset()
}

// GetOracleProtectionSource returns the OracleProtectionSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSource) GetOracleProtectionSource() OracleProtectionSource {
	if o == nil || o.OracleProtectionSource.Get() == nil {
		var ret OracleProtectionSource
		return ret
	}
	return *o.OracleProtectionSource.Get()
}

// GetOracleProtectionSourceOk returns a tuple with the OracleProtectionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSource) GetOracleProtectionSourceOk() (*OracleProtectionSource, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OracleProtectionSource.Get(), o.OracleProtectionSource.IsSet()
}

// HasOracleProtectionSource returns a boolean if a field has been set.
func (o *ProtectionSource) HasOracleProtectionSource() bool {
	if o != nil && o.OracleProtectionSource.IsSet() {
		return true
	}

	return false
}

// SetOracleProtectionSource gets a reference to the given NullableOracleProtectionSource and assigns it to the OracleProtectionSource field.
func (o *ProtectionSource) SetOracleProtectionSource(v OracleProtectionSource) {
	o.OracleProtectionSource.Set(&v)
}
// SetOracleProtectionSourceNil sets the value for OracleProtectionSource to be an explicit nil
func (o *ProtectionSource) SetOracleProtectionSourceNil() {
	o.OracleProtectionSource.Set(nil)
}

// UnsetOracleProtectionSource ensures that no value is present for OracleProtectionSource, not even an explicit nil
func (o *ProtectionSource) UnsetOracleProtectionSource() {
	o.OracleProtectionSource.Unset()
}

// GetParentId returns the ParentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSource) GetParentId() int64 {
	if o == nil || o.ParentId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ParentId.Get()
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSource) GetParentIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ParentId.Get(), o.ParentId.IsSet()
}

// HasParentId returns a boolean if a field has been set.
func (o *ProtectionSource) HasParentId() bool {
	if o != nil && o.ParentId.IsSet() {
		return true
	}

	return false
}

// SetParentId gets a reference to the given NullableInt64 and assigns it to the ParentId field.
func (o *ProtectionSource) SetParentId(v int64) {
	o.ParentId.Set(&v)
}
// SetParentIdNil sets the value for ParentId to be an explicit nil
func (o *ProtectionSource) SetParentIdNil() {
	o.ParentId.Set(nil)
}

// UnsetParentId ensures that no value is present for ParentId, not even an explicit nil
func (o *ProtectionSource) UnsetParentId() {
	o.ParentId.Unset()
}

// GetPhysicalProtectionSource returns the PhysicalProtectionSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSource) GetPhysicalProtectionSource() PhysicalProtectionSource {
	if o == nil || o.PhysicalProtectionSource.Get() == nil {
		var ret PhysicalProtectionSource
		return ret
	}
	return *o.PhysicalProtectionSource.Get()
}

// GetPhysicalProtectionSourceOk returns a tuple with the PhysicalProtectionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSource) GetPhysicalProtectionSourceOk() (*PhysicalProtectionSource, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PhysicalProtectionSource.Get(), o.PhysicalProtectionSource.IsSet()
}

// HasPhysicalProtectionSource returns a boolean if a field has been set.
func (o *ProtectionSource) HasPhysicalProtectionSource() bool {
	if o != nil && o.PhysicalProtectionSource.IsSet() {
		return true
	}

	return false
}

// SetPhysicalProtectionSource gets a reference to the given NullablePhysicalProtectionSource and assigns it to the PhysicalProtectionSource field.
func (o *ProtectionSource) SetPhysicalProtectionSource(v PhysicalProtectionSource) {
	o.PhysicalProtectionSource.Set(&v)
}
// SetPhysicalProtectionSourceNil sets the value for PhysicalProtectionSource to be an explicit nil
func (o *ProtectionSource) SetPhysicalProtectionSourceNil() {
	o.PhysicalProtectionSource.Set(nil)
}

// UnsetPhysicalProtectionSource ensures that no value is present for PhysicalProtectionSource, not even an explicit nil
func (o *ProtectionSource) UnsetPhysicalProtectionSource() {
	o.PhysicalProtectionSource.Unset()
}

// GetPureProtectionSource returns the PureProtectionSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSource) GetPureProtectionSource() PureProtectionSource {
	if o == nil || o.PureProtectionSource.Get() == nil {
		var ret PureProtectionSource
		return ret
	}
	return *o.PureProtectionSource.Get()
}

// GetPureProtectionSourceOk returns a tuple with the PureProtectionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSource) GetPureProtectionSourceOk() (*PureProtectionSource, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PureProtectionSource.Get(), o.PureProtectionSource.IsSet()
}

// HasPureProtectionSource returns a boolean if a field has been set.
func (o *ProtectionSource) HasPureProtectionSource() bool {
	if o != nil && o.PureProtectionSource.IsSet() {
		return true
	}

	return false
}

// SetPureProtectionSource gets a reference to the given NullablePureProtectionSource and assigns it to the PureProtectionSource field.
func (o *ProtectionSource) SetPureProtectionSource(v PureProtectionSource) {
	o.PureProtectionSource.Set(&v)
}
// SetPureProtectionSourceNil sets the value for PureProtectionSource to be an explicit nil
func (o *ProtectionSource) SetPureProtectionSourceNil() {
	o.PureProtectionSource.Set(nil)
}

// UnsetPureProtectionSource ensures that no value is present for PureProtectionSource, not even an explicit nil
func (o *ProtectionSource) UnsetPureProtectionSource() {
	o.PureProtectionSource.Unset()
}

// GetSqlProtectionSource returns the SqlProtectionSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSource) GetSqlProtectionSource() SqlProtectionSource {
	if o == nil || o.SqlProtectionSource.Get() == nil {
		var ret SqlProtectionSource
		return ret
	}
	return *o.SqlProtectionSource.Get()
}

// GetSqlProtectionSourceOk returns a tuple with the SqlProtectionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSource) GetSqlProtectionSourceOk() (*SqlProtectionSource, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SqlProtectionSource.Get(), o.SqlProtectionSource.IsSet()
}

// HasSqlProtectionSource returns a boolean if a field has been set.
func (o *ProtectionSource) HasSqlProtectionSource() bool {
	if o != nil && o.SqlProtectionSource.IsSet() {
		return true
	}

	return false
}

// SetSqlProtectionSource gets a reference to the given NullableSqlProtectionSource and assigns it to the SqlProtectionSource field.
func (o *ProtectionSource) SetSqlProtectionSource(v SqlProtectionSource) {
	o.SqlProtectionSource.Set(&v)
}
// SetSqlProtectionSourceNil sets the value for SqlProtectionSource to be an explicit nil
func (o *ProtectionSource) SetSqlProtectionSourceNil() {
	o.SqlProtectionSource.Set(nil)
}

// UnsetSqlProtectionSource ensures that no value is present for SqlProtectionSource, not even an explicit nil
func (o *ProtectionSource) UnsetSqlProtectionSource() {
	o.SqlProtectionSource.Unset()
}

// GetViewProtectionSource returns the ViewProtectionSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSource) GetViewProtectionSource() ViewProtectionSource {
	if o == nil || o.ViewProtectionSource.Get() == nil {
		var ret ViewProtectionSource
		return ret
	}
	return *o.ViewProtectionSource.Get()
}

// GetViewProtectionSourceOk returns a tuple with the ViewProtectionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSource) GetViewProtectionSourceOk() (*ViewProtectionSource, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewProtectionSource.Get(), o.ViewProtectionSource.IsSet()
}

// HasViewProtectionSource returns a boolean if a field has been set.
func (o *ProtectionSource) HasViewProtectionSource() bool {
	if o != nil && o.ViewProtectionSource.IsSet() {
		return true
	}

	return false
}

// SetViewProtectionSource gets a reference to the given NullableViewProtectionSource and assigns it to the ViewProtectionSource field.
func (o *ProtectionSource) SetViewProtectionSource(v ViewProtectionSource) {
	o.ViewProtectionSource.Set(&v)
}
// SetViewProtectionSourceNil sets the value for ViewProtectionSource to be an explicit nil
func (o *ProtectionSource) SetViewProtectionSourceNil() {
	o.ViewProtectionSource.Set(nil)
}

// UnsetViewProtectionSource ensures that no value is present for ViewProtectionSource, not even an explicit nil
func (o *ProtectionSource) UnsetViewProtectionSource() {
	o.ViewProtectionSource.Unset()
}

// GetVmWareProtectionSource returns the VmWareProtectionSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSource) GetVmWareProtectionSource() VMwareProtectionSource {
	if o == nil || o.VmWareProtectionSource.Get() == nil {
		var ret VMwareProtectionSource
		return ret
	}
	return *o.VmWareProtectionSource.Get()
}

// GetVmWareProtectionSourceOk returns a tuple with the VmWareProtectionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSource) GetVmWareProtectionSourceOk() (*VMwareProtectionSource, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VmWareProtectionSource.Get(), o.VmWareProtectionSource.IsSet()
}

// HasVmWareProtectionSource returns a boolean if a field has been set.
func (o *ProtectionSource) HasVmWareProtectionSource() bool {
	if o != nil && o.VmWareProtectionSource.IsSet() {
		return true
	}

	return false
}

// SetVmWareProtectionSource gets a reference to the given NullableVMwareProtectionSource and assigns it to the VmWareProtectionSource field.
func (o *ProtectionSource) SetVmWareProtectionSource(v VMwareProtectionSource) {
	o.VmWareProtectionSource.Set(&v)
}
// SetVmWareProtectionSourceNil sets the value for VmWareProtectionSource to be an explicit nil
func (o *ProtectionSource) SetVmWareProtectionSourceNil() {
	o.VmWareProtectionSource.Set(nil)
}

// UnsetVmWareProtectionSource ensures that no value is present for VmWareProtectionSource, not even an explicit nil
func (o *ProtectionSource) UnsetVmWareProtectionSource() {
	o.VmWareProtectionSource.Unset()
}

func (o ProtectionSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AcropolisProtectionSource.IsSet() {
		toSerialize["acropolisProtectionSource"] = o.AcropolisProtectionSource.Get()
	}
	if o.AdProtectionSource.IsSet() {
		toSerialize["adProtectionSource"] = o.AdProtectionSource.Get()
	}
	if o.AwsProtectionSource.IsSet() {
		toSerialize["awsProtectionSource"] = o.AwsProtectionSource.Get()
	}
	if o.AzureProtectionSource.IsSet() {
		toSerialize["azureProtectionSource"] = o.AzureProtectionSource.Get()
	}
	if o.CassandraProtectionSource.IsSet() {
		toSerialize["cassandraProtectionSource"] = o.CassandraProtectionSource.Get()
	}
	if o.CouchbaseProtectionSource.IsSet() {
		toSerialize["couchbaseProtectionSource"] = o.CouchbaseProtectionSource.Get()
	}
	if o.ElastifileProtectionSource.IsSet() {
		toSerialize["elastifileProtectionSource"] = o.ElastifileProtectionSource.Get()
	}
	if o.Environment.IsSet() {
		toSerialize["environment"] = o.Environment.Get()
	}
	if o.ExchangeProtectionSource.IsSet() {
		toSerialize["exchangeProtectionSource"] = o.ExchangeProtectionSource.Get()
	}
	if o.FlashBladeProtectionSource.IsSet() {
		toSerialize["flashBladeProtectionSource"] = o.FlashBladeProtectionSource.Get()
	}
	if o.GcpProtectionSource.IsSet() {
		toSerialize["gcpProtectionSource"] = o.GcpProtectionSource.Get()
	}
	if o.GpfsProtectionSource.IsSet() {
		toSerialize["gpfsProtectionSource"] = o.GpfsProtectionSource.Get()
	}
	if o.HbaseProtectionSource.IsSet() {
		toSerialize["hbaseProtectionSource"] = o.HbaseProtectionSource.Get()
	}
	if o.HdfsProtectionSource.IsSet() {
		toSerialize["hdfsProtectionSource"] = o.HdfsProtectionSource.Get()
	}
	if o.HiveProtectionSource.IsSet() {
		toSerialize["hiveProtectionSource"] = o.HiveProtectionSource.Get()
	}
	if o.HyperFlexProtectionSource.IsSet() {
		toSerialize["hyperFlexProtectionSource"] = o.HyperFlexProtectionSource.Get()
	}
	if o.HypervProtectionSource.IsSet() {
		toSerialize["hypervProtectionSource"] = o.HypervProtectionSource.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.IsilonProtectionSource.IsSet() {
		toSerialize["isilonProtectionSource"] = o.IsilonProtectionSource.Get()
	}
	if o.KubernetesProtectionSource.IsSet() {
		toSerialize["kubernetesProtectionSource"] = o.KubernetesProtectionSource.Get()
	}
	if o.KvmProtectionSource.IsSet() {
		toSerialize["kvmProtectionSource"] = o.KvmProtectionSource.Get()
	}
	if o.MongodbProtectionSource.IsSet() {
		toSerialize["mongodbProtectionSource"] = o.MongodbProtectionSource.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.NasProtectionSource.IsSet() {
		toSerialize["nasProtectionSource"] = o.NasProtectionSource.Get()
	}
	if o.NetappProtectionSource.IsSet() {
		toSerialize["netappProtectionSource"] = o.NetappProtectionSource.Get()
	}
	if o.NimbleProtectionSource.IsSet() {
		toSerialize["nimbleProtectionSource"] = o.NimbleProtectionSource.Get()
	}
	if o.Office365ProtectionSource.IsSet() {
		toSerialize["office365ProtectionSource"] = o.Office365ProtectionSource.Get()
	}
	if o.OracleProtectionSource.IsSet() {
		toSerialize["oracleProtectionSource"] = o.OracleProtectionSource.Get()
	}
	if o.ParentId.IsSet() {
		toSerialize["parentId"] = o.ParentId.Get()
	}
	if o.PhysicalProtectionSource.IsSet() {
		toSerialize["physicalProtectionSource"] = o.PhysicalProtectionSource.Get()
	}
	if o.PureProtectionSource.IsSet() {
		toSerialize["pureProtectionSource"] = o.PureProtectionSource.Get()
	}
	if o.SqlProtectionSource.IsSet() {
		toSerialize["sqlProtectionSource"] = o.SqlProtectionSource.Get()
	}
	if o.ViewProtectionSource.IsSet() {
		toSerialize["viewProtectionSource"] = o.ViewProtectionSource.Get()
	}
	if o.VmWareProtectionSource.IsSet() {
		toSerialize["vmWareProtectionSource"] = o.VmWareProtectionSource.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableProtectionSource struct {
	value *ProtectionSource
	isSet bool
}

func (v NullableProtectionSource) Get() *ProtectionSource {
	return v.value
}

func (v *NullableProtectionSource) Set(val *ProtectionSource) {
	v.value = val
	v.isSet = true
}

func (v NullableProtectionSource) IsSet() bool {
	return v.isSet
}

func (v *NullableProtectionSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtectionSource(val *ProtectionSource) *NullableProtectionSource {
	return &NullableProtectionSource{value: val, isSet: true}
}

func (v NullableProtectionSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtectionSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


