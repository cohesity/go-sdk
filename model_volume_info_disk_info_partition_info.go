/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// VolumeInfoDiskInfoPartitionInfo Offset/Length here is relative to the logical range starting at 0, formed by mapping the physical ranges of the disk into a linear device.
type VolumeInfoDiskInfoPartitionInfo struct {
	// Length of partition in bytes.
	Length NullableInt64 `json:"length,omitempty"`
	// Partition number.
	PartitionNumber NullableInt64 `json:"partitionNumber,omitempty"`
	// Partition type uuid. If disk is unpartitioned, this field will not be set. If disk is MBR partitioned, this field will be set to partition type. Example: 83 (from below fdisk output) [This value is in hex] bash$ fdisk -l foobar.vmdk Device        Boot Start   End    Sectors  Size Id Type foobar.vmdk1       2048  1050623  1048576  512M 83 Linux If disk is GPT partitioned, this field will be set to partition type GUID. Example: fc63daf-8483-4772-8e793d69d8477de4 (Linux filesystem data)
	PartitionTypeUuid NullableString `json:"partitionTypeUuid,omitempty"`
	// Partition uuid. If disk is unpartitioned, this field will not be set. If disk is MBR partitioned, this field will not be set. If disk is GPT partitioned, this field will be set to partition GUID.
	PartitionUuid NullableString `json:"partitionUuid,omitempty"`
	// Start offset of partition in bytes.
	StartOffset NullableInt64 `json:"startOffset,omitempty"`
}

// NewVolumeInfoDiskInfoPartitionInfo instantiates a new VolumeInfoDiskInfoPartitionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeInfoDiskInfoPartitionInfo() *VolumeInfoDiskInfoPartitionInfo {
	this := VolumeInfoDiskInfoPartitionInfo{}
	return &this
}

// NewVolumeInfoDiskInfoPartitionInfoWithDefaults instantiates a new VolumeInfoDiskInfoPartitionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeInfoDiskInfoPartitionInfoWithDefaults() *VolumeInfoDiskInfoPartitionInfo {
	this := VolumeInfoDiskInfoPartitionInfo{}
	return &this
}

// GetLength returns the Length field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfoDiskInfoPartitionInfo) GetLength() int64 {
	if o == nil || o.Length.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Length.Get()
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfoDiskInfoPartitionInfo) GetLengthOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Length.Get(), o.Length.IsSet()
}

// HasLength returns a boolean if a field has been set.
func (o *VolumeInfoDiskInfoPartitionInfo) HasLength() bool {
	if o != nil && o.Length.IsSet() {
		return true
	}

	return false
}

// SetLength gets a reference to the given NullableInt64 and assigns it to the Length field.
func (o *VolumeInfoDiskInfoPartitionInfo) SetLength(v int64) {
	o.Length.Set(&v)
}
// SetLengthNil sets the value for Length to be an explicit nil
func (o *VolumeInfoDiskInfoPartitionInfo) SetLengthNil() {
	o.Length.Set(nil)
}

// UnsetLength ensures that no value is present for Length, not even an explicit nil
func (o *VolumeInfoDiskInfoPartitionInfo) UnsetLength() {
	o.Length.Unset()
}

// GetPartitionNumber returns the PartitionNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfoDiskInfoPartitionInfo) GetPartitionNumber() int64 {
	if o == nil || o.PartitionNumber.Get() == nil {
		var ret int64
		return ret
	}
	return *o.PartitionNumber.Get()
}

// GetPartitionNumberOk returns a tuple with the PartitionNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfoDiskInfoPartitionInfo) GetPartitionNumberOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PartitionNumber.Get(), o.PartitionNumber.IsSet()
}

// HasPartitionNumber returns a boolean if a field has been set.
func (o *VolumeInfoDiskInfoPartitionInfo) HasPartitionNumber() bool {
	if o != nil && o.PartitionNumber.IsSet() {
		return true
	}

	return false
}

// SetPartitionNumber gets a reference to the given NullableInt64 and assigns it to the PartitionNumber field.
func (o *VolumeInfoDiskInfoPartitionInfo) SetPartitionNumber(v int64) {
	o.PartitionNumber.Set(&v)
}
// SetPartitionNumberNil sets the value for PartitionNumber to be an explicit nil
func (o *VolumeInfoDiskInfoPartitionInfo) SetPartitionNumberNil() {
	o.PartitionNumber.Set(nil)
}

// UnsetPartitionNumber ensures that no value is present for PartitionNumber, not even an explicit nil
func (o *VolumeInfoDiskInfoPartitionInfo) UnsetPartitionNumber() {
	o.PartitionNumber.Unset()
}

// GetPartitionTypeUuid returns the PartitionTypeUuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfoDiskInfoPartitionInfo) GetPartitionTypeUuid() string {
	if o == nil || o.PartitionTypeUuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.PartitionTypeUuid.Get()
}

// GetPartitionTypeUuidOk returns a tuple with the PartitionTypeUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfoDiskInfoPartitionInfo) GetPartitionTypeUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PartitionTypeUuid.Get(), o.PartitionTypeUuid.IsSet()
}

// HasPartitionTypeUuid returns a boolean if a field has been set.
func (o *VolumeInfoDiskInfoPartitionInfo) HasPartitionTypeUuid() bool {
	if o != nil && o.PartitionTypeUuid.IsSet() {
		return true
	}

	return false
}

// SetPartitionTypeUuid gets a reference to the given NullableString and assigns it to the PartitionTypeUuid field.
func (o *VolumeInfoDiskInfoPartitionInfo) SetPartitionTypeUuid(v string) {
	o.PartitionTypeUuid.Set(&v)
}
// SetPartitionTypeUuidNil sets the value for PartitionTypeUuid to be an explicit nil
func (o *VolumeInfoDiskInfoPartitionInfo) SetPartitionTypeUuidNil() {
	o.PartitionTypeUuid.Set(nil)
}

// UnsetPartitionTypeUuid ensures that no value is present for PartitionTypeUuid, not even an explicit nil
func (o *VolumeInfoDiskInfoPartitionInfo) UnsetPartitionTypeUuid() {
	o.PartitionTypeUuid.Unset()
}

// GetPartitionUuid returns the PartitionUuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfoDiskInfoPartitionInfo) GetPartitionUuid() string {
	if o == nil || o.PartitionUuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.PartitionUuid.Get()
}

// GetPartitionUuidOk returns a tuple with the PartitionUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfoDiskInfoPartitionInfo) GetPartitionUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PartitionUuid.Get(), o.PartitionUuid.IsSet()
}

// HasPartitionUuid returns a boolean if a field has been set.
func (o *VolumeInfoDiskInfoPartitionInfo) HasPartitionUuid() bool {
	if o != nil && o.PartitionUuid.IsSet() {
		return true
	}

	return false
}

// SetPartitionUuid gets a reference to the given NullableString and assigns it to the PartitionUuid field.
func (o *VolumeInfoDiskInfoPartitionInfo) SetPartitionUuid(v string) {
	o.PartitionUuid.Set(&v)
}
// SetPartitionUuidNil sets the value for PartitionUuid to be an explicit nil
func (o *VolumeInfoDiskInfoPartitionInfo) SetPartitionUuidNil() {
	o.PartitionUuid.Set(nil)
}

// UnsetPartitionUuid ensures that no value is present for PartitionUuid, not even an explicit nil
func (o *VolumeInfoDiskInfoPartitionInfo) UnsetPartitionUuid() {
	o.PartitionUuid.Unset()
}

// GetStartOffset returns the StartOffset field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfoDiskInfoPartitionInfo) GetStartOffset() int64 {
	if o == nil || o.StartOffset.Get() == nil {
		var ret int64
		return ret
	}
	return *o.StartOffset.Get()
}

// GetStartOffsetOk returns a tuple with the StartOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfoDiskInfoPartitionInfo) GetStartOffsetOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartOffset.Get(), o.StartOffset.IsSet()
}

// HasStartOffset returns a boolean if a field has been set.
func (o *VolumeInfoDiskInfoPartitionInfo) HasStartOffset() bool {
	if o != nil && o.StartOffset.IsSet() {
		return true
	}

	return false
}

// SetStartOffset gets a reference to the given NullableInt64 and assigns it to the StartOffset field.
func (o *VolumeInfoDiskInfoPartitionInfo) SetStartOffset(v int64) {
	o.StartOffset.Set(&v)
}
// SetStartOffsetNil sets the value for StartOffset to be an explicit nil
func (o *VolumeInfoDiskInfoPartitionInfo) SetStartOffsetNil() {
	o.StartOffset.Set(nil)
}

// UnsetStartOffset ensures that no value is present for StartOffset, not even an explicit nil
func (o *VolumeInfoDiskInfoPartitionInfo) UnsetStartOffset() {
	o.StartOffset.Unset()
}

func (o VolumeInfoDiskInfoPartitionInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Length.IsSet() {
		toSerialize["length"] = o.Length.Get()
	}
	if o.PartitionNumber.IsSet() {
		toSerialize["partitionNumber"] = o.PartitionNumber.Get()
	}
	if o.PartitionTypeUuid.IsSet() {
		toSerialize["partitionTypeUuid"] = o.PartitionTypeUuid.Get()
	}
	if o.PartitionUuid.IsSet() {
		toSerialize["partitionUuid"] = o.PartitionUuid.Get()
	}
	if o.StartOffset.IsSet() {
		toSerialize["startOffset"] = o.StartOffset.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableVolumeInfoDiskInfoPartitionInfo struct {
	value *VolumeInfoDiskInfoPartitionInfo
	isSet bool
}

func (v NullableVolumeInfoDiskInfoPartitionInfo) Get() *VolumeInfoDiskInfoPartitionInfo {
	return v.value
}

func (v *NullableVolumeInfoDiskInfoPartitionInfo) Set(val *VolumeInfoDiskInfoPartitionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeInfoDiskInfoPartitionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeInfoDiskInfoPartitionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeInfoDiskInfoPartitionInfo(val *VolumeInfoDiskInfoPartitionInfo) *NullableVolumeInfoDiskInfoPartitionInfo {
	return &NullableVolumeInfoDiskInfoPartitionInfo{value: val, isSet: true}
}

func (v NullableVolumeInfoDiskInfoPartitionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeInfoDiskInfoPartitionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


