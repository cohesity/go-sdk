/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// BackupSourceStats Specifies statistics about a Backup task in a Protection Job Run. Specifies statistics for one backup task. One backup task is used to backup on Protection Source. This structure is also used to aggregate stats of a Backup tasks in a Protection Job Run.
type BackupSourceStats struct {
	// Specifies the time the task was unqueued from the queue to start running. This field can be used to determine the following times: initial-wait-time = admittedTimeUsecs - startTimeUsecs run-time = endTimeUsecs - admittedTimeUsecs If the task ends up waiting in other queues, then actual run-time will be smaller than the run-time computed this way. This field is only populated for Backup tasks currently.
	AdmittedTimeUsecs NullableInt64 `json:"admittedTimeUsecs,omitempty"`
	// Specifies the end time of the Protection Run. The end time is specified as a Unix epoch Timestamp (in microseconds).
	EndTimeUsecs NullableInt64 `json:"endTimeUsecs,omitempty"`
	// Specifies the start time of the Protection Run. The start time is specified as a Unix epoch Timestamp (in microseconds). This time is when the task is queued to an internal queue where tasks are waiting to run.
	StartTimeUsecs NullableInt64 `json:"startTimeUsecs,omitempty"`
	// Specifies the actual execution time for the protection run to complete the backup task and the copy tasks. This time will not include the time waited in various internal queues. This field is only populated for Backup tasks currently.
	TimeTakenUsecs NullableInt64 `json:"timeTakenUsecs,omitempty"`
	// Specifies the total amount of data read from the source (so far).
	TotalBytesReadFromSource NullableInt64 `json:"totalBytesReadFromSource,omitempty"`
	// Specifies the total amount of data expected to be read from the source.
	TotalBytesToReadFromSource NullableInt64 `json:"totalBytesToReadFromSource,omitempty"`
	// Specifies the size of the source object (such as a VM) protected by this task on the primary storage after the snapshot is taken. The logical size of the data on the source if the data is fully hydrated or expanded and not reduced by change-block tracking, compression and deduplication.
	TotalLogicalBackupSizeBytes NullableInt64 `json:"totalLogicalBackupSizeBytes,omitempty"`
	// Specifies the total amount of physical space used on the Cohesity Cluster to store the protected object after being reduced by change-block tracking, compression and deduplication. For example, if the logical backup size is 1GB, but only 1MB was used on the Cohesity Cluster to store it, this field be equal to 1MB.
	TotalPhysicalBackupSizeBytes NullableInt64 `json:"totalPhysicalBackupSizeBytes,omitempty"`
	// Specifies the size of the source object (such as a VM) protected by this task on the primary storage before the snapshot is taken. The logical size of the data on the source if the data is fully hydrated or expanded and not reduced by change-block tracking, compression and deduplication.
	TotalSourceSizeBytes NullableInt64 `json:"totalSourceSizeBytes,omitempty"`
}

// NewBackupSourceStats instantiates a new BackupSourceStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupSourceStats() *BackupSourceStats {
	this := BackupSourceStats{}
	return &this
}

// NewBackupSourceStatsWithDefaults instantiates a new BackupSourceStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupSourceStatsWithDefaults() *BackupSourceStats {
	this := BackupSourceStats{}
	return &this
}

// GetAdmittedTimeUsecs returns the AdmittedTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupSourceStats) GetAdmittedTimeUsecs() int64 {
	if o == nil || o.AdmittedTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.AdmittedTimeUsecs.Get()
}

// GetAdmittedTimeUsecsOk returns a tuple with the AdmittedTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupSourceStats) GetAdmittedTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AdmittedTimeUsecs.Get(), o.AdmittedTimeUsecs.IsSet()
}

// HasAdmittedTimeUsecs returns a boolean if a field has been set.
func (o *BackupSourceStats) HasAdmittedTimeUsecs() bool {
	if o != nil && o.AdmittedTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetAdmittedTimeUsecs gets a reference to the given NullableInt64 and assigns it to the AdmittedTimeUsecs field.
func (o *BackupSourceStats) SetAdmittedTimeUsecs(v int64) {
	o.AdmittedTimeUsecs.Set(&v)
}
// SetAdmittedTimeUsecsNil sets the value for AdmittedTimeUsecs to be an explicit nil
func (o *BackupSourceStats) SetAdmittedTimeUsecsNil() {
	o.AdmittedTimeUsecs.Set(nil)
}

// UnsetAdmittedTimeUsecs ensures that no value is present for AdmittedTimeUsecs, not even an explicit nil
func (o *BackupSourceStats) UnsetAdmittedTimeUsecs() {
	o.AdmittedTimeUsecs.Unset()
}

// GetEndTimeUsecs returns the EndTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupSourceStats) GetEndTimeUsecs() int64 {
	if o == nil || o.EndTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.EndTimeUsecs.Get()
}

// GetEndTimeUsecsOk returns a tuple with the EndTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupSourceStats) GetEndTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EndTimeUsecs.Get(), o.EndTimeUsecs.IsSet()
}

// HasEndTimeUsecs returns a boolean if a field has been set.
func (o *BackupSourceStats) HasEndTimeUsecs() bool {
	if o != nil && o.EndTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetEndTimeUsecs gets a reference to the given NullableInt64 and assigns it to the EndTimeUsecs field.
func (o *BackupSourceStats) SetEndTimeUsecs(v int64) {
	o.EndTimeUsecs.Set(&v)
}
// SetEndTimeUsecsNil sets the value for EndTimeUsecs to be an explicit nil
func (o *BackupSourceStats) SetEndTimeUsecsNil() {
	o.EndTimeUsecs.Set(nil)
}

// UnsetEndTimeUsecs ensures that no value is present for EndTimeUsecs, not even an explicit nil
func (o *BackupSourceStats) UnsetEndTimeUsecs() {
	o.EndTimeUsecs.Unset()
}

// GetStartTimeUsecs returns the StartTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupSourceStats) GetStartTimeUsecs() int64 {
	if o == nil || o.StartTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.StartTimeUsecs.Get()
}

// GetStartTimeUsecsOk returns a tuple with the StartTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupSourceStats) GetStartTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartTimeUsecs.Get(), o.StartTimeUsecs.IsSet()
}

// HasStartTimeUsecs returns a boolean if a field has been set.
func (o *BackupSourceStats) HasStartTimeUsecs() bool {
	if o != nil && o.StartTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetStartTimeUsecs gets a reference to the given NullableInt64 and assigns it to the StartTimeUsecs field.
func (o *BackupSourceStats) SetStartTimeUsecs(v int64) {
	o.StartTimeUsecs.Set(&v)
}
// SetStartTimeUsecsNil sets the value for StartTimeUsecs to be an explicit nil
func (o *BackupSourceStats) SetStartTimeUsecsNil() {
	o.StartTimeUsecs.Set(nil)
}

// UnsetStartTimeUsecs ensures that no value is present for StartTimeUsecs, not even an explicit nil
func (o *BackupSourceStats) UnsetStartTimeUsecs() {
	o.StartTimeUsecs.Unset()
}

// GetTimeTakenUsecs returns the TimeTakenUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupSourceStats) GetTimeTakenUsecs() int64 {
	if o == nil || o.TimeTakenUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TimeTakenUsecs.Get()
}

// GetTimeTakenUsecsOk returns a tuple with the TimeTakenUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupSourceStats) GetTimeTakenUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TimeTakenUsecs.Get(), o.TimeTakenUsecs.IsSet()
}

// HasTimeTakenUsecs returns a boolean if a field has been set.
func (o *BackupSourceStats) HasTimeTakenUsecs() bool {
	if o != nil && o.TimeTakenUsecs.IsSet() {
		return true
	}

	return false
}

// SetTimeTakenUsecs gets a reference to the given NullableInt64 and assigns it to the TimeTakenUsecs field.
func (o *BackupSourceStats) SetTimeTakenUsecs(v int64) {
	o.TimeTakenUsecs.Set(&v)
}
// SetTimeTakenUsecsNil sets the value for TimeTakenUsecs to be an explicit nil
func (o *BackupSourceStats) SetTimeTakenUsecsNil() {
	o.TimeTakenUsecs.Set(nil)
}

// UnsetTimeTakenUsecs ensures that no value is present for TimeTakenUsecs, not even an explicit nil
func (o *BackupSourceStats) UnsetTimeTakenUsecs() {
	o.TimeTakenUsecs.Unset()
}

// GetTotalBytesReadFromSource returns the TotalBytesReadFromSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupSourceStats) GetTotalBytesReadFromSource() int64 {
	if o == nil || o.TotalBytesReadFromSource.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TotalBytesReadFromSource.Get()
}

// GetTotalBytesReadFromSourceOk returns a tuple with the TotalBytesReadFromSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupSourceStats) GetTotalBytesReadFromSourceOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TotalBytesReadFromSource.Get(), o.TotalBytesReadFromSource.IsSet()
}

// HasTotalBytesReadFromSource returns a boolean if a field has been set.
func (o *BackupSourceStats) HasTotalBytesReadFromSource() bool {
	if o != nil && o.TotalBytesReadFromSource.IsSet() {
		return true
	}

	return false
}

// SetTotalBytesReadFromSource gets a reference to the given NullableInt64 and assigns it to the TotalBytesReadFromSource field.
func (o *BackupSourceStats) SetTotalBytesReadFromSource(v int64) {
	o.TotalBytesReadFromSource.Set(&v)
}
// SetTotalBytesReadFromSourceNil sets the value for TotalBytesReadFromSource to be an explicit nil
func (o *BackupSourceStats) SetTotalBytesReadFromSourceNil() {
	o.TotalBytesReadFromSource.Set(nil)
}

// UnsetTotalBytesReadFromSource ensures that no value is present for TotalBytesReadFromSource, not even an explicit nil
func (o *BackupSourceStats) UnsetTotalBytesReadFromSource() {
	o.TotalBytesReadFromSource.Unset()
}

// GetTotalBytesToReadFromSource returns the TotalBytesToReadFromSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupSourceStats) GetTotalBytesToReadFromSource() int64 {
	if o == nil || o.TotalBytesToReadFromSource.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TotalBytesToReadFromSource.Get()
}

// GetTotalBytesToReadFromSourceOk returns a tuple with the TotalBytesToReadFromSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupSourceStats) GetTotalBytesToReadFromSourceOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TotalBytesToReadFromSource.Get(), o.TotalBytesToReadFromSource.IsSet()
}

// HasTotalBytesToReadFromSource returns a boolean if a field has been set.
func (o *BackupSourceStats) HasTotalBytesToReadFromSource() bool {
	if o != nil && o.TotalBytesToReadFromSource.IsSet() {
		return true
	}

	return false
}

// SetTotalBytesToReadFromSource gets a reference to the given NullableInt64 and assigns it to the TotalBytesToReadFromSource field.
func (o *BackupSourceStats) SetTotalBytesToReadFromSource(v int64) {
	o.TotalBytesToReadFromSource.Set(&v)
}
// SetTotalBytesToReadFromSourceNil sets the value for TotalBytesToReadFromSource to be an explicit nil
func (o *BackupSourceStats) SetTotalBytesToReadFromSourceNil() {
	o.TotalBytesToReadFromSource.Set(nil)
}

// UnsetTotalBytesToReadFromSource ensures that no value is present for TotalBytesToReadFromSource, not even an explicit nil
func (o *BackupSourceStats) UnsetTotalBytesToReadFromSource() {
	o.TotalBytesToReadFromSource.Unset()
}

// GetTotalLogicalBackupSizeBytes returns the TotalLogicalBackupSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupSourceStats) GetTotalLogicalBackupSizeBytes() int64 {
	if o == nil || o.TotalLogicalBackupSizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TotalLogicalBackupSizeBytes.Get()
}

// GetTotalLogicalBackupSizeBytesOk returns a tuple with the TotalLogicalBackupSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupSourceStats) GetTotalLogicalBackupSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TotalLogicalBackupSizeBytes.Get(), o.TotalLogicalBackupSizeBytes.IsSet()
}

// HasTotalLogicalBackupSizeBytes returns a boolean if a field has been set.
func (o *BackupSourceStats) HasTotalLogicalBackupSizeBytes() bool {
	if o != nil && o.TotalLogicalBackupSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetTotalLogicalBackupSizeBytes gets a reference to the given NullableInt64 and assigns it to the TotalLogicalBackupSizeBytes field.
func (o *BackupSourceStats) SetTotalLogicalBackupSizeBytes(v int64) {
	o.TotalLogicalBackupSizeBytes.Set(&v)
}
// SetTotalLogicalBackupSizeBytesNil sets the value for TotalLogicalBackupSizeBytes to be an explicit nil
func (o *BackupSourceStats) SetTotalLogicalBackupSizeBytesNil() {
	o.TotalLogicalBackupSizeBytes.Set(nil)
}

// UnsetTotalLogicalBackupSizeBytes ensures that no value is present for TotalLogicalBackupSizeBytes, not even an explicit nil
func (o *BackupSourceStats) UnsetTotalLogicalBackupSizeBytes() {
	o.TotalLogicalBackupSizeBytes.Unset()
}

// GetTotalPhysicalBackupSizeBytes returns the TotalPhysicalBackupSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupSourceStats) GetTotalPhysicalBackupSizeBytes() int64 {
	if o == nil || o.TotalPhysicalBackupSizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TotalPhysicalBackupSizeBytes.Get()
}

// GetTotalPhysicalBackupSizeBytesOk returns a tuple with the TotalPhysicalBackupSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupSourceStats) GetTotalPhysicalBackupSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TotalPhysicalBackupSizeBytes.Get(), o.TotalPhysicalBackupSizeBytes.IsSet()
}

// HasTotalPhysicalBackupSizeBytes returns a boolean if a field has been set.
func (o *BackupSourceStats) HasTotalPhysicalBackupSizeBytes() bool {
	if o != nil && o.TotalPhysicalBackupSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetTotalPhysicalBackupSizeBytes gets a reference to the given NullableInt64 and assigns it to the TotalPhysicalBackupSizeBytes field.
func (o *BackupSourceStats) SetTotalPhysicalBackupSizeBytes(v int64) {
	o.TotalPhysicalBackupSizeBytes.Set(&v)
}
// SetTotalPhysicalBackupSizeBytesNil sets the value for TotalPhysicalBackupSizeBytes to be an explicit nil
func (o *BackupSourceStats) SetTotalPhysicalBackupSizeBytesNil() {
	o.TotalPhysicalBackupSizeBytes.Set(nil)
}

// UnsetTotalPhysicalBackupSizeBytes ensures that no value is present for TotalPhysicalBackupSizeBytes, not even an explicit nil
func (o *BackupSourceStats) UnsetTotalPhysicalBackupSizeBytes() {
	o.TotalPhysicalBackupSizeBytes.Unset()
}

// GetTotalSourceSizeBytes returns the TotalSourceSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupSourceStats) GetTotalSourceSizeBytes() int64 {
	if o == nil || o.TotalSourceSizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TotalSourceSizeBytes.Get()
}

// GetTotalSourceSizeBytesOk returns a tuple with the TotalSourceSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupSourceStats) GetTotalSourceSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TotalSourceSizeBytes.Get(), o.TotalSourceSizeBytes.IsSet()
}

// HasTotalSourceSizeBytes returns a boolean if a field has been set.
func (o *BackupSourceStats) HasTotalSourceSizeBytes() bool {
	if o != nil && o.TotalSourceSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetTotalSourceSizeBytes gets a reference to the given NullableInt64 and assigns it to the TotalSourceSizeBytes field.
func (o *BackupSourceStats) SetTotalSourceSizeBytes(v int64) {
	o.TotalSourceSizeBytes.Set(&v)
}
// SetTotalSourceSizeBytesNil sets the value for TotalSourceSizeBytes to be an explicit nil
func (o *BackupSourceStats) SetTotalSourceSizeBytesNil() {
	o.TotalSourceSizeBytes.Set(nil)
}

// UnsetTotalSourceSizeBytes ensures that no value is present for TotalSourceSizeBytes, not even an explicit nil
func (o *BackupSourceStats) UnsetTotalSourceSizeBytes() {
	o.TotalSourceSizeBytes.Unset()
}

func (o BackupSourceStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AdmittedTimeUsecs.IsSet() {
		toSerialize["admittedTimeUsecs"] = o.AdmittedTimeUsecs.Get()
	}
	if o.EndTimeUsecs.IsSet() {
		toSerialize["endTimeUsecs"] = o.EndTimeUsecs.Get()
	}
	if o.StartTimeUsecs.IsSet() {
		toSerialize["startTimeUsecs"] = o.StartTimeUsecs.Get()
	}
	if o.TimeTakenUsecs.IsSet() {
		toSerialize["timeTakenUsecs"] = o.TimeTakenUsecs.Get()
	}
	if o.TotalBytesReadFromSource.IsSet() {
		toSerialize["totalBytesReadFromSource"] = o.TotalBytesReadFromSource.Get()
	}
	if o.TotalBytesToReadFromSource.IsSet() {
		toSerialize["totalBytesToReadFromSource"] = o.TotalBytesToReadFromSource.Get()
	}
	if o.TotalLogicalBackupSizeBytes.IsSet() {
		toSerialize["totalLogicalBackupSizeBytes"] = o.TotalLogicalBackupSizeBytes.Get()
	}
	if o.TotalPhysicalBackupSizeBytes.IsSet() {
		toSerialize["totalPhysicalBackupSizeBytes"] = o.TotalPhysicalBackupSizeBytes.Get()
	}
	if o.TotalSourceSizeBytes.IsSet() {
		toSerialize["totalSourceSizeBytes"] = o.TotalSourceSizeBytes.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableBackupSourceStats struct {
	value *BackupSourceStats
	isSet bool
}

func (v NullableBackupSourceStats) Get() *BackupSourceStats {
	return v.value
}

func (v *NullableBackupSourceStats) Set(val *BackupSourceStats) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupSourceStats) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupSourceStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupSourceStats(val *BackupSourceStats) *NullableBackupSourceStats {
	return &NullableBackupSourceStats{value: val, isSet: true}
}

func (v NullableBackupSourceStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupSourceStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


