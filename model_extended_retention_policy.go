/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ExtendedRetentionPolicy Specifies additional retention policies to apply to backup snapshots.
type ExtendedRetentionPolicy struct {
	// Specified the Id for a snapshot copy policy. This is generated when the policy is created.
	Id NullableString `json:"Id,omitempty"`
	// The backup run type to which this extended retention applies to. If this is not set, the extended retention will be applicable to all non-log backup types. Currently, the only value that can be set here is kFull. 'kRegular' indicates a incremental (CBT) backup. Incremental backups utilizing CBT (if supported) are captured of the target protection objects. The first run of a kRegular schedule captures all the blocks. 'kFull' indicates a full (no CBT) backup. A complete backup (all blocks) of the target protection objects are always captured and Change Block Tracking (CBT) is not utilized. 'kLog' indicates a Database Log backup. Capture the database transaction logs to allow rolling back to a specific point in time. 'kSystem' indicates a system backup. System backups are used to do bare metal recovery of the system to a specific point in time.
	BackupRunType NullableString `json:"backupRunType,omitempty"`
	DatalockConfig *DataLockConfig `json:"datalockConfig,omitempty"`
	// Specifies the number of days to retain copied Snapshots on the target.
	DaysToKeep NullableInt64 `json:"daysToKeep,omitempty"`
	// Specifies a factor to multiply the periodicity by, to determine the copy schedule. For example if set to 2 and the periodicity is hourly, then Snapshots from the first eligible Job Run for every 2 hour period is copied.
	Multiplier NullableInt32 `json:"multiplier,omitempty"`
	// Specifies the frequency that Snapshots should be copied to the specified target. Used in combination with multiplier. 'kEvery' means that the Snapshot copy occurs after the number of Job Runs equals the number specified in the multiplier. 'kHour' means that the Snapshot copy occurs hourly at the frequency set in the multiplier, for example if multiplier is 2, the copy occurs every 2 hours. 'kDay' means that the Snapshot copy occurs daily at the frequency set in the multiplier. 'kWeek' means that the Snapshot copy occurs weekly at the frequency set in the multiplier. 'kMonth' means that the Snapshot copy occurs monthly at the frequency set in the multiplier. 'kYear' means that the Snapshot copy occurs yearly at the frequency set in the multiplier.
	Periodicity NullableString `json:"periodicity,omitempty"`
}

// NewExtendedRetentionPolicy instantiates a new ExtendedRetentionPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtendedRetentionPolicy() *ExtendedRetentionPolicy {
	this := ExtendedRetentionPolicy{}
	return &this
}

// NewExtendedRetentionPolicyWithDefaults instantiates a new ExtendedRetentionPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtendedRetentionPolicyWithDefaults() *ExtendedRetentionPolicy {
	this := ExtendedRetentionPolicy{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedRetentionPolicy) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedRetentionPolicy) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *ExtendedRetentionPolicy) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *ExtendedRetentionPolicy) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *ExtendedRetentionPolicy) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *ExtendedRetentionPolicy) UnsetId() {
	o.Id.Unset()
}

// GetBackupRunType returns the BackupRunType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedRetentionPolicy) GetBackupRunType() string {
	if o == nil || o.BackupRunType.Get() == nil {
		var ret string
		return ret
	}
	return *o.BackupRunType.Get()
}

// GetBackupRunTypeOk returns a tuple with the BackupRunType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedRetentionPolicy) GetBackupRunTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BackupRunType.Get(), o.BackupRunType.IsSet()
}

// HasBackupRunType returns a boolean if a field has been set.
func (o *ExtendedRetentionPolicy) HasBackupRunType() bool {
	if o != nil && o.BackupRunType.IsSet() {
		return true
	}

	return false
}

// SetBackupRunType gets a reference to the given NullableString and assigns it to the BackupRunType field.
func (o *ExtendedRetentionPolicy) SetBackupRunType(v string) {
	o.BackupRunType.Set(&v)
}
// SetBackupRunTypeNil sets the value for BackupRunType to be an explicit nil
func (o *ExtendedRetentionPolicy) SetBackupRunTypeNil() {
	o.BackupRunType.Set(nil)
}

// UnsetBackupRunType ensures that no value is present for BackupRunType, not even an explicit nil
func (o *ExtendedRetentionPolicy) UnsetBackupRunType() {
	o.BackupRunType.Unset()
}

// GetDatalockConfig returns the DatalockConfig field value if set, zero value otherwise.
func (o *ExtendedRetentionPolicy) GetDatalockConfig() DataLockConfig {
	if o == nil || o.DatalockConfig == nil {
		var ret DataLockConfig
		return ret
	}
	return *o.DatalockConfig
}

// GetDatalockConfigOk returns a tuple with the DatalockConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedRetentionPolicy) GetDatalockConfigOk() (*DataLockConfig, bool) {
	if o == nil || o.DatalockConfig == nil {
		return nil, false
	}
	return o.DatalockConfig, true
}

// HasDatalockConfig returns a boolean if a field has been set.
func (o *ExtendedRetentionPolicy) HasDatalockConfig() bool {
	if o != nil && o.DatalockConfig != nil {
		return true
	}

	return false
}

// SetDatalockConfig gets a reference to the given DataLockConfig and assigns it to the DatalockConfig field.
func (o *ExtendedRetentionPolicy) SetDatalockConfig(v DataLockConfig) {
	o.DatalockConfig = &v
}

// GetDaysToKeep returns the DaysToKeep field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedRetentionPolicy) GetDaysToKeep() int64 {
	if o == nil || o.DaysToKeep.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DaysToKeep.Get()
}

// GetDaysToKeepOk returns a tuple with the DaysToKeep field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedRetentionPolicy) GetDaysToKeepOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DaysToKeep.Get(), o.DaysToKeep.IsSet()
}

// HasDaysToKeep returns a boolean if a field has been set.
func (o *ExtendedRetentionPolicy) HasDaysToKeep() bool {
	if o != nil && o.DaysToKeep.IsSet() {
		return true
	}

	return false
}

// SetDaysToKeep gets a reference to the given NullableInt64 and assigns it to the DaysToKeep field.
func (o *ExtendedRetentionPolicy) SetDaysToKeep(v int64) {
	o.DaysToKeep.Set(&v)
}
// SetDaysToKeepNil sets the value for DaysToKeep to be an explicit nil
func (o *ExtendedRetentionPolicy) SetDaysToKeepNil() {
	o.DaysToKeep.Set(nil)
}

// UnsetDaysToKeep ensures that no value is present for DaysToKeep, not even an explicit nil
func (o *ExtendedRetentionPolicy) UnsetDaysToKeep() {
	o.DaysToKeep.Unset()
}

// GetMultiplier returns the Multiplier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedRetentionPolicy) GetMultiplier() int32 {
	if o == nil || o.Multiplier.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Multiplier.Get()
}

// GetMultiplierOk returns a tuple with the Multiplier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedRetentionPolicy) GetMultiplierOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Multiplier.Get(), o.Multiplier.IsSet()
}

// HasMultiplier returns a boolean if a field has been set.
func (o *ExtendedRetentionPolicy) HasMultiplier() bool {
	if o != nil && o.Multiplier.IsSet() {
		return true
	}

	return false
}

// SetMultiplier gets a reference to the given NullableInt32 and assigns it to the Multiplier field.
func (o *ExtendedRetentionPolicy) SetMultiplier(v int32) {
	o.Multiplier.Set(&v)
}
// SetMultiplierNil sets the value for Multiplier to be an explicit nil
func (o *ExtendedRetentionPolicy) SetMultiplierNil() {
	o.Multiplier.Set(nil)
}

// UnsetMultiplier ensures that no value is present for Multiplier, not even an explicit nil
func (o *ExtendedRetentionPolicy) UnsetMultiplier() {
	o.Multiplier.Unset()
}

// GetPeriodicity returns the Periodicity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedRetentionPolicy) GetPeriodicity() string {
	if o == nil || o.Periodicity.Get() == nil {
		var ret string
		return ret
	}
	return *o.Periodicity.Get()
}

// GetPeriodicityOk returns a tuple with the Periodicity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedRetentionPolicy) GetPeriodicityOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Periodicity.Get(), o.Periodicity.IsSet()
}

// HasPeriodicity returns a boolean if a field has been set.
func (o *ExtendedRetentionPolicy) HasPeriodicity() bool {
	if o != nil && o.Periodicity.IsSet() {
		return true
	}

	return false
}

// SetPeriodicity gets a reference to the given NullableString and assigns it to the Periodicity field.
func (o *ExtendedRetentionPolicy) SetPeriodicity(v string) {
	o.Periodicity.Set(&v)
}
// SetPeriodicityNil sets the value for Periodicity to be an explicit nil
func (o *ExtendedRetentionPolicy) SetPeriodicityNil() {
	o.Periodicity.Set(nil)
}

// UnsetPeriodicity ensures that no value is present for Periodicity, not even an explicit nil
func (o *ExtendedRetentionPolicy) UnsetPeriodicity() {
	o.Periodicity.Unset()
}

func (o ExtendedRetentionPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["Id"] = o.Id.Get()
	}
	if o.BackupRunType.IsSet() {
		toSerialize["backupRunType"] = o.BackupRunType.Get()
	}
	if o.DatalockConfig != nil {
		toSerialize["datalockConfig"] = o.DatalockConfig
	}
	if o.DaysToKeep.IsSet() {
		toSerialize["daysToKeep"] = o.DaysToKeep.Get()
	}
	if o.Multiplier.IsSet() {
		toSerialize["multiplier"] = o.Multiplier.Get()
	}
	if o.Periodicity.IsSet() {
		toSerialize["periodicity"] = o.Periodicity.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableExtendedRetentionPolicy struct {
	value *ExtendedRetentionPolicy
	isSet bool
}

func (v NullableExtendedRetentionPolicy) Get() *ExtendedRetentionPolicy {
	return v.value
}

func (v *NullableExtendedRetentionPolicy) Set(val *ExtendedRetentionPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableExtendedRetentionPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableExtendedRetentionPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtendedRetentionPolicy(val *ExtendedRetentionPolicy) *NullableExtendedRetentionPolicy {
	return &NullableExtendedRetentionPolicy{value: val, isSet: true}
}

func (v NullableExtendedRetentionPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtendedRetentionPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


