/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// SchedulingPolicy Specifies settings that define a backup schedule for a Protection Job.
type SchedulingPolicy struct {
	// Specifies the time interval between two Job Runs of a continuous backup schedule and any blackout periods when new Job Runs should NOT be started. Set if periodicity is kContinuous.
	ContinuousSchedule NullableContinuousSchedule `json:"continuousSchedule,omitempty"`
	// Specifies a daily or weekly backup schedule. Set if periodicity is kDaily.
	DailySchedule NullableDailySchedule `json:"dailySchedule,omitempty"`
	// Specifies a monthly backup schedule. Set if periodicity is kMonthly.
	MonthlySchedule NullableMonthlySchedule `json:"monthlySchedule,omitempty"`
	// Specifies how often to start new Job Runs of a Protection Job. 'kDaily' means new Job Runs start daily. 'kMonthly' means new Job Runs start monthly. 'kContinuous' means new Job Runs repetitively start at the beginning of the specified time interval (in hours or minutes). 'kContinuousRPO' means this is an RPO schedule.
	Periodicity NullableString `json:"periodicity,omitempty"`
	// Specifies an RPO backup schedule. Set if periodicity is kContinuousRPO.
	RpoSchedule NullableRpoSchedule `json:"rpoSchedule,omitempty"`
}

// NewSchedulingPolicy instantiates a new SchedulingPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchedulingPolicy() *SchedulingPolicy {
	this := SchedulingPolicy{}
	return &this
}

// NewSchedulingPolicyWithDefaults instantiates a new SchedulingPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchedulingPolicyWithDefaults() *SchedulingPolicy {
	this := SchedulingPolicy{}
	return &this
}

// GetContinuousSchedule returns the ContinuousSchedule field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SchedulingPolicy) GetContinuousSchedule() ContinuousSchedule {
	if o == nil || o.ContinuousSchedule.Get() == nil {
		var ret ContinuousSchedule
		return ret
	}
	return *o.ContinuousSchedule.Get()
}

// GetContinuousScheduleOk returns a tuple with the ContinuousSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SchedulingPolicy) GetContinuousScheduleOk() (*ContinuousSchedule, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ContinuousSchedule.Get(), o.ContinuousSchedule.IsSet()
}

// HasContinuousSchedule returns a boolean if a field has been set.
func (o *SchedulingPolicy) HasContinuousSchedule() bool {
	if o != nil && o.ContinuousSchedule.IsSet() {
		return true
	}

	return false
}

// SetContinuousSchedule gets a reference to the given NullableContinuousSchedule and assigns it to the ContinuousSchedule field.
func (o *SchedulingPolicy) SetContinuousSchedule(v ContinuousSchedule) {
	o.ContinuousSchedule.Set(&v)
}
// SetContinuousScheduleNil sets the value for ContinuousSchedule to be an explicit nil
func (o *SchedulingPolicy) SetContinuousScheduleNil() {
	o.ContinuousSchedule.Set(nil)
}

// UnsetContinuousSchedule ensures that no value is present for ContinuousSchedule, not even an explicit nil
func (o *SchedulingPolicy) UnsetContinuousSchedule() {
	o.ContinuousSchedule.Unset()
}

// GetDailySchedule returns the DailySchedule field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SchedulingPolicy) GetDailySchedule() DailySchedule {
	if o == nil || o.DailySchedule.Get() == nil {
		var ret DailySchedule
		return ret
	}
	return *o.DailySchedule.Get()
}

// GetDailyScheduleOk returns a tuple with the DailySchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SchedulingPolicy) GetDailyScheduleOk() (*DailySchedule, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DailySchedule.Get(), o.DailySchedule.IsSet()
}

// HasDailySchedule returns a boolean if a field has been set.
func (o *SchedulingPolicy) HasDailySchedule() bool {
	if o != nil && o.DailySchedule.IsSet() {
		return true
	}

	return false
}

// SetDailySchedule gets a reference to the given NullableDailySchedule and assigns it to the DailySchedule field.
func (o *SchedulingPolicy) SetDailySchedule(v DailySchedule) {
	o.DailySchedule.Set(&v)
}
// SetDailyScheduleNil sets the value for DailySchedule to be an explicit nil
func (o *SchedulingPolicy) SetDailyScheduleNil() {
	o.DailySchedule.Set(nil)
}

// UnsetDailySchedule ensures that no value is present for DailySchedule, not even an explicit nil
func (o *SchedulingPolicy) UnsetDailySchedule() {
	o.DailySchedule.Unset()
}

// GetMonthlySchedule returns the MonthlySchedule field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SchedulingPolicy) GetMonthlySchedule() MonthlySchedule {
	if o == nil || o.MonthlySchedule.Get() == nil {
		var ret MonthlySchedule
		return ret
	}
	return *o.MonthlySchedule.Get()
}

// GetMonthlyScheduleOk returns a tuple with the MonthlySchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SchedulingPolicy) GetMonthlyScheduleOk() (*MonthlySchedule, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MonthlySchedule.Get(), o.MonthlySchedule.IsSet()
}

// HasMonthlySchedule returns a boolean if a field has been set.
func (o *SchedulingPolicy) HasMonthlySchedule() bool {
	if o != nil && o.MonthlySchedule.IsSet() {
		return true
	}

	return false
}

// SetMonthlySchedule gets a reference to the given NullableMonthlySchedule and assigns it to the MonthlySchedule field.
func (o *SchedulingPolicy) SetMonthlySchedule(v MonthlySchedule) {
	o.MonthlySchedule.Set(&v)
}
// SetMonthlyScheduleNil sets the value for MonthlySchedule to be an explicit nil
func (o *SchedulingPolicy) SetMonthlyScheduleNil() {
	o.MonthlySchedule.Set(nil)
}

// UnsetMonthlySchedule ensures that no value is present for MonthlySchedule, not even an explicit nil
func (o *SchedulingPolicy) UnsetMonthlySchedule() {
	o.MonthlySchedule.Unset()
}

// GetPeriodicity returns the Periodicity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SchedulingPolicy) GetPeriodicity() string {
	if o == nil || o.Periodicity.Get() == nil {
		var ret string
		return ret
	}
	return *o.Periodicity.Get()
}

// GetPeriodicityOk returns a tuple with the Periodicity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SchedulingPolicy) GetPeriodicityOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Periodicity.Get(), o.Periodicity.IsSet()
}

// HasPeriodicity returns a boolean if a field has been set.
func (o *SchedulingPolicy) HasPeriodicity() bool {
	if o != nil && o.Periodicity.IsSet() {
		return true
	}

	return false
}

// SetPeriodicity gets a reference to the given NullableString and assigns it to the Periodicity field.
func (o *SchedulingPolicy) SetPeriodicity(v string) {
	o.Periodicity.Set(&v)
}
// SetPeriodicityNil sets the value for Periodicity to be an explicit nil
func (o *SchedulingPolicy) SetPeriodicityNil() {
	o.Periodicity.Set(nil)
}

// UnsetPeriodicity ensures that no value is present for Periodicity, not even an explicit nil
func (o *SchedulingPolicy) UnsetPeriodicity() {
	o.Periodicity.Unset()
}

// GetRpoSchedule returns the RpoSchedule field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SchedulingPolicy) GetRpoSchedule() RpoSchedule {
	if o == nil || o.RpoSchedule.Get() == nil {
		var ret RpoSchedule
		return ret
	}
	return *o.RpoSchedule.Get()
}

// GetRpoScheduleOk returns a tuple with the RpoSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SchedulingPolicy) GetRpoScheduleOk() (*RpoSchedule, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RpoSchedule.Get(), o.RpoSchedule.IsSet()
}

// HasRpoSchedule returns a boolean if a field has been set.
func (o *SchedulingPolicy) HasRpoSchedule() bool {
	if o != nil && o.RpoSchedule.IsSet() {
		return true
	}

	return false
}

// SetRpoSchedule gets a reference to the given NullableRpoSchedule and assigns it to the RpoSchedule field.
func (o *SchedulingPolicy) SetRpoSchedule(v RpoSchedule) {
	o.RpoSchedule.Set(&v)
}
// SetRpoScheduleNil sets the value for RpoSchedule to be an explicit nil
func (o *SchedulingPolicy) SetRpoScheduleNil() {
	o.RpoSchedule.Set(nil)
}

// UnsetRpoSchedule ensures that no value is present for RpoSchedule, not even an explicit nil
func (o *SchedulingPolicy) UnsetRpoSchedule() {
	o.RpoSchedule.Unset()
}

func (o SchedulingPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ContinuousSchedule.IsSet() {
		toSerialize["continuousSchedule"] = o.ContinuousSchedule.Get()
	}
	if o.DailySchedule.IsSet() {
		toSerialize["dailySchedule"] = o.DailySchedule.Get()
	}
	if o.MonthlySchedule.IsSet() {
		toSerialize["monthlySchedule"] = o.MonthlySchedule.Get()
	}
	if o.Periodicity.IsSet() {
		toSerialize["periodicity"] = o.Periodicity.Get()
	}
	if o.RpoSchedule.IsSet() {
		toSerialize["rpoSchedule"] = o.RpoSchedule.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSchedulingPolicy struct {
	value *SchedulingPolicy
	isSet bool
}

func (v NullableSchedulingPolicy) Get() *SchedulingPolicy {
	return v.value
}

func (v *NullableSchedulingPolicy) Set(val *SchedulingPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableSchedulingPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableSchedulingPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchedulingPolicy(val *SchedulingPolicy) *NullableSchedulingPolicy {
	return &NullableSchedulingPolicy{value: val, isSet: true}
}

func (v NullableSchedulingPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchedulingPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


