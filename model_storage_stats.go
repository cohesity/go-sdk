/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// StorageStats Specifies the storage statistics of the cluster.
type StorageStats struct {
	// Specifies the logical size of protected objects in bytes.
	DataProtectionLogicalUsageBytes NullableInt64 `json:"dataProtectionLogicalUsageBytes,omitempty"`
	// Specifies the physical size of protected objects in bytes.
	DataProtectionPhysicalUsageBytes NullableInt64 `json:"dataProtectionPhysicalUsageBytes,omitempty"`
	// Specifies the logical size consumed by file services in bytes.
	FileServicesLogicalUsageBytes NullableInt64 `json:"fileServicesLogicalUsageBytes,omitempty"`
	// Specifies the physical size consumed by file services in bytes.
	FileServicesPhysicalUsageBytes NullableInt64 `json:"fileServicesPhysicalUsageBytes,omitempty"`
	// Specifies the local storage currently available on the cluster in bytes.
	LocalAvailableBytes NullableInt64 `json:"localAvailableBytes,omitempty"`
	// Specifies the local storage currently in use on the cluster in bytes.
	LocalUsageBytes NullableInt64 `json:"localUsageBytes,omitempty"`
	// Specifies the total capacity of the cluster in bytes.
	TotalCapacityBytes NullableInt64 `json:"totalCapacityBytes,omitempty"`
}

// NewStorageStats instantiates a new StorageStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageStats() *StorageStats {
	this := StorageStats{}
	return &this
}

// NewStorageStatsWithDefaults instantiates a new StorageStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageStatsWithDefaults() *StorageStats {
	this := StorageStats{}
	return &this
}

// GetDataProtectionLogicalUsageBytes returns the DataProtectionLogicalUsageBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageStats) GetDataProtectionLogicalUsageBytes() int64 {
	if o == nil || o.DataProtectionLogicalUsageBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DataProtectionLogicalUsageBytes.Get()
}

// GetDataProtectionLogicalUsageBytesOk returns a tuple with the DataProtectionLogicalUsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageStats) GetDataProtectionLogicalUsageBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DataProtectionLogicalUsageBytes.Get(), o.DataProtectionLogicalUsageBytes.IsSet()
}

// HasDataProtectionLogicalUsageBytes returns a boolean if a field has been set.
func (o *StorageStats) HasDataProtectionLogicalUsageBytes() bool {
	if o != nil && o.DataProtectionLogicalUsageBytes.IsSet() {
		return true
	}

	return false
}

// SetDataProtectionLogicalUsageBytes gets a reference to the given NullableInt64 and assigns it to the DataProtectionLogicalUsageBytes field.
func (o *StorageStats) SetDataProtectionLogicalUsageBytes(v int64) {
	o.DataProtectionLogicalUsageBytes.Set(&v)
}
// SetDataProtectionLogicalUsageBytesNil sets the value for DataProtectionLogicalUsageBytes to be an explicit nil
func (o *StorageStats) SetDataProtectionLogicalUsageBytesNil() {
	o.DataProtectionLogicalUsageBytes.Set(nil)
}

// UnsetDataProtectionLogicalUsageBytes ensures that no value is present for DataProtectionLogicalUsageBytes, not even an explicit nil
func (o *StorageStats) UnsetDataProtectionLogicalUsageBytes() {
	o.DataProtectionLogicalUsageBytes.Unset()
}

// GetDataProtectionPhysicalUsageBytes returns the DataProtectionPhysicalUsageBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageStats) GetDataProtectionPhysicalUsageBytes() int64 {
	if o == nil || o.DataProtectionPhysicalUsageBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DataProtectionPhysicalUsageBytes.Get()
}

// GetDataProtectionPhysicalUsageBytesOk returns a tuple with the DataProtectionPhysicalUsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageStats) GetDataProtectionPhysicalUsageBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DataProtectionPhysicalUsageBytes.Get(), o.DataProtectionPhysicalUsageBytes.IsSet()
}

// HasDataProtectionPhysicalUsageBytes returns a boolean if a field has been set.
func (o *StorageStats) HasDataProtectionPhysicalUsageBytes() bool {
	if o != nil && o.DataProtectionPhysicalUsageBytes.IsSet() {
		return true
	}

	return false
}

// SetDataProtectionPhysicalUsageBytes gets a reference to the given NullableInt64 and assigns it to the DataProtectionPhysicalUsageBytes field.
func (o *StorageStats) SetDataProtectionPhysicalUsageBytes(v int64) {
	o.DataProtectionPhysicalUsageBytes.Set(&v)
}
// SetDataProtectionPhysicalUsageBytesNil sets the value for DataProtectionPhysicalUsageBytes to be an explicit nil
func (o *StorageStats) SetDataProtectionPhysicalUsageBytesNil() {
	o.DataProtectionPhysicalUsageBytes.Set(nil)
}

// UnsetDataProtectionPhysicalUsageBytes ensures that no value is present for DataProtectionPhysicalUsageBytes, not even an explicit nil
func (o *StorageStats) UnsetDataProtectionPhysicalUsageBytes() {
	o.DataProtectionPhysicalUsageBytes.Unset()
}

// GetFileServicesLogicalUsageBytes returns the FileServicesLogicalUsageBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageStats) GetFileServicesLogicalUsageBytes() int64 {
	if o == nil || o.FileServicesLogicalUsageBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.FileServicesLogicalUsageBytes.Get()
}

// GetFileServicesLogicalUsageBytesOk returns a tuple with the FileServicesLogicalUsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageStats) GetFileServicesLogicalUsageBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FileServicesLogicalUsageBytes.Get(), o.FileServicesLogicalUsageBytes.IsSet()
}

// HasFileServicesLogicalUsageBytes returns a boolean if a field has been set.
func (o *StorageStats) HasFileServicesLogicalUsageBytes() bool {
	if o != nil && o.FileServicesLogicalUsageBytes.IsSet() {
		return true
	}

	return false
}

// SetFileServicesLogicalUsageBytes gets a reference to the given NullableInt64 and assigns it to the FileServicesLogicalUsageBytes field.
func (o *StorageStats) SetFileServicesLogicalUsageBytes(v int64) {
	o.FileServicesLogicalUsageBytes.Set(&v)
}
// SetFileServicesLogicalUsageBytesNil sets the value for FileServicesLogicalUsageBytes to be an explicit nil
func (o *StorageStats) SetFileServicesLogicalUsageBytesNil() {
	o.FileServicesLogicalUsageBytes.Set(nil)
}

// UnsetFileServicesLogicalUsageBytes ensures that no value is present for FileServicesLogicalUsageBytes, not even an explicit nil
func (o *StorageStats) UnsetFileServicesLogicalUsageBytes() {
	o.FileServicesLogicalUsageBytes.Unset()
}

// GetFileServicesPhysicalUsageBytes returns the FileServicesPhysicalUsageBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageStats) GetFileServicesPhysicalUsageBytes() int64 {
	if o == nil || o.FileServicesPhysicalUsageBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.FileServicesPhysicalUsageBytes.Get()
}

// GetFileServicesPhysicalUsageBytesOk returns a tuple with the FileServicesPhysicalUsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageStats) GetFileServicesPhysicalUsageBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FileServicesPhysicalUsageBytes.Get(), o.FileServicesPhysicalUsageBytes.IsSet()
}

// HasFileServicesPhysicalUsageBytes returns a boolean if a field has been set.
func (o *StorageStats) HasFileServicesPhysicalUsageBytes() bool {
	if o != nil && o.FileServicesPhysicalUsageBytes.IsSet() {
		return true
	}

	return false
}

// SetFileServicesPhysicalUsageBytes gets a reference to the given NullableInt64 and assigns it to the FileServicesPhysicalUsageBytes field.
func (o *StorageStats) SetFileServicesPhysicalUsageBytes(v int64) {
	o.FileServicesPhysicalUsageBytes.Set(&v)
}
// SetFileServicesPhysicalUsageBytesNil sets the value for FileServicesPhysicalUsageBytes to be an explicit nil
func (o *StorageStats) SetFileServicesPhysicalUsageBytesNil() {
	o.FileServicesPhysicalUsageBytes.Set(nil)
}

// UnsetFileServicesPhysicalUsageBytes ensures that no value is present for FileServicesPhysicalUsageBytes, not even an explicit nil
func (o *StorageStats) UnsetFileServicesPhysicalUsageBytes() {
	o.FileServicesPhysicalUsageBytes.Unset()
}

// GetLocalAvailableBytes returns the LocalAvailableBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageStats) GetLocalAvailableBytes() int64 {
	if o == nil || o.LocalAvailableBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LocalAvailableBytes.Get()
}

// GetLocalAvailableBytesOk returns a tuple with the LocalAvailableBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageStats) GetLocalAvailableBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LocalAvailableBytes.Get(), o.LocalAvailableBytes.IsSet()
}

// HasLocalAvailableBytes returns a boolean if a field has been set.
func (o *StorageStats) HasLocalAvailableBytes() bool {
	if o != nil && o.LocalAvailableBytes.IsSet() {
		return true
	}

	return false
}

// SetLocalAvailableBytes gets a reference to the given NullableInt64 and assigns it to the LocalAvailableBytes field.
func (o *StorageStats) SetLocalAvailableBytes(v int64) {
	o.LocalAvailableBytes.Set(&v)
}
// SetLocalAvailableBytesNil sets the value for LocalAvailableBytes to be an explicit nil
func (o *StorageStats) SetLocalAvailableBytesNil() {
	o.LocalAvailableBytes.Set(nil)
}

// UnsetLocalAvailableBytes ensures that no value is present for LocalAvailableBytes, not even an explicit nil
func (o *StorageStats) UnsetLocalAvailableBytes() {
	o.LocalAvailableBytes.Unset()
}

// GetLocalUsageBytes returns the LocalUsageBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageStats) GetLocalUsageBytes() int64 {
	if o == nil || o.LocalUsageBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LocalUsageBytes.Get()
}

// GetLocalUsageBytesOk returns a tuple with the LocalUsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageStats) GetLocalUsageBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LocalUsageBytes.Get(), o.LocalUsageBytes.IsSet()
}

// HasLocalUsageBytes returns a boolean if a field has been set.
func (o *StorageStats) HasLocalUsageBytes() bool {
	if o != nil && o.LocalUsageBytes.IsSet() {
		return true
	}

	return false
}

// SetLocalUsageBytes gets a reference to the given NullableInt64 and assigns it to the LocalUsageBytes field.
func (o *StorageStats) SetLocalUsageBytes(v int64) {
	o.LocalUsageBytes.Set(&v)
}
// SetLocalUsageBytesNil sets the value for LocalUsageBytes to be an explicit nil
func (o *StorageStats) SetLocalUsageBytesNil() {
	o.LocalUsageBytes.Set(nil)
}

// UnsetLocalUsageBytes ensures that no value is present for LocalUsageBytes, not even an explicit nil
func (o *StorageStats) UnsetLocalUsageBytes() {
	o.LocalUsageBytes.Unset()
}

// GetTotalCapacityBytes returns the TotalCapacityBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageStats) GetTotalCapacityBytes() int64 {
	if o == nil || o.TotalCapacityBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TotalCapacityBytes.Get()
}

// GetTotalCapacityBytesOk returns a tuple with the TotalCapacityBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageStats) GetTotalCapacityBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TotalCapacityBytes.Get(), o.TotalCapacityBytes.IsSet()
}

// HasTotalCapacityBytes returns a boolean if a field has been set.
func (o *StorageStats) HasTotalCapacityBytes() bool {
	if o != nil && o.TotalCapacityBytes.IsSet() {
		return true
	}

	return false
}

// SetTotalCapacityBytes gets a reference to the given NullableInt64 and assigns it to the TotalCapacityBytes field.
func (o *StorageStats) SetTotalCapacityBytes(v int64) {
	o.TotalCapacityBytes.Set(&v)
}
// SetTotalCapacityBytesNil sets the value for TotalCapacityBytes to be an explicit nil
func (o *StorageStats) SetTotalCapacityBytesNil() {
	o.TotalCapacityBytes.Set(nil)
}

// UnsetTotalCapacityBytes ensures that no value is present for TotalCapacityBytes, not even an explicit nil
func (o *StorageStats) UnsetTotalCapacityBytes() {
	o.TotalCapacityBytes.Unset()
}

func (o StorageStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DataProtectionLogicalUsageBytes.IsSet() {
		toSerialize["dataProtectionLogicalUsageBytes"] = o.DataProtectionLogicalUsageBytes.Get()
	}
	if o.DataProtectionPhysicalUsageBytes.IsSet() {
		toSerialize["dataProtectionPhysicalUsageBytes"] = o.DataProtectionPhysicalUsageBytes.Get()
	}
	if o.FileServicesLogicalUsageBytes.IsSet() {
		toSerialize["fileServicesLogicalUsageBytes"] = o.FileServicesLogicalUsageBytes.Get()
	}
	if o.FileServicesPhysicalUsageBytes.IsSet() {
		toSerialize["fileServicesPhysicalUsageBytes"] = o.FileServicesPhysicalUsageBytes.Get()
	}
	if o.LocalAvailableBytes.IsSet() {
		toSerialize["localAvailableBytes"] = o.LocalAvailableBytes.Get()
	}
	if o.LocalUsageBytes.IsSet() {
		toSerialize["localUsageBytes"] = o.LocalUsageBytes.Get()
	}
	if o.TotalCapacityBytes.IsSet() {
		toSerialize["totalCapacityBytes"] = o.TotalCapacityBytes.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableStorageStats struct {
	value *StorageStats
	isSet bool
}

func (v NullableStorageStats) Get() *StorageStats {
	return v.value
}

func (v *NullableStorageStats) Set(val *StorageStats) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageStats) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageStats(val *StorageStats) *NullableStorageStats {
	return &NullableStorageStats{value: val, isSet: true}
}

func (v NullableStorageStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


