/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// AdObjectRestoreParameters AdObjectRestoreParameters are the parameters to restore AD objects from recycle bin or from a mounted AD snapshot database.
type AdObjectRestoreParameters struct {
	// Specifies the option for AD 'user' type of objects to change password when they next logon.
	ChangePasswordOnNextLogon NullableBool `json:"changePasswordOnNextLogon,omitempty"`
	// Specifies the option to leave the restored object in disabled state for AD 'account' type of objects that support disabled state so that admin can do manual inspection before enabling the account. This property has no effect when restoring object from recycle bin. 'User' and 'Computer' are AD account types having enable/disable option.
	LeaveStateDisabled NullableBool `json:"leaveStateDisabled,omitempty"`
	// Specifies the array of AD object guids to restore either from recycle bin or from AD snapshot. The guid should not exist in production AD. If it exits, then kDuplicate error is output in status.
	ObjectGuids []string `json:"objectGuids,omitempty"`
	// Specifies the Distinguished name(DN) of the target Organization Unit (OU) to restore non-OU object. This can be empty, in which case objects are restored to their original OU. The 'credential' specified must have privileges to add objects to this OU. Example: 'OU=SJC,OU=EngOU,DC=contoso,DC=com'. This parameter is ignored for OU objects.
	OrganizationUnitPath NullableString `json:"organizationUnitPath,omitempty"`
	// Specifies the password for restoring user type objects (user, inetOrgPerson or organizationalPerson LDAP classes) that is returned in search result with 'kRestorePasswordRequired' flag, an initial password is required. The password is UTF8 string encoded in base64 format. Password cannot be empty and must satisfy production AD password complexity. If 'kFromDestRecycleBinIfFound' is true and the user is restored from production AD recycle bin, password will not be changed and the restored user retains their original password. For non-user type objects, this password value is ignored.
	Password NullableString `json:"password,omitempty"`
}

// NewAdObjectRestoreParameters instantiates a new AdObjectRestoreParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdObjectRestoreParameters() *AdObjectRestoreParameters {
	this := AdObjectRestoreParameters{}
	return &this
}

// NewAdObjectRestoreParametersWithDefaults instantiates a new AdObjectRestoreParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdObjectRestoreParametersWithDefaults() *AdObjectRestoreParameters {
	this := AdObjectRestoreParameters{}
	return &this
}

// GetChangePasswordOnNextLogon returns the ChangePasswordOnNextLogon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdObjectRestoreParameters) GetChangePasswordOnNextLogon() bool {
	if o == nil || o.ChangePasswordOnNextLogon.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ChangePasswordOnNextLogon.Get()
}

// GetChangePasswordOnNextLogonOk returns a tuple with the ChangePasswordOnNextLogon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdObjectRestoreParameters) GetChangePasswordOnNextLogonOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ChangePasswordOnNextLogon.Get(), o.ChangePasswordOnNextLogon.IsSet()
}

// HasChangePasswordOnNextLogon returns a boolean if a field has been set.
func (o *AdObjectRestoreParameters) HasChangePasswordOnNextLogon() bool {
	if o != nil && o.ChangePasswordOnNextLogon.IsSet() {
		return true
	}

	return false
}

// SetChangePasswordOnNextLogon gets a reference to the given NullableBool and assigns it to the ChangePasswordOnNextLogon field.
func (o *AdObjectRestoreParameters) SetChangePasswordOnNextLogon(v bool) {
	o.ChangePasswordOnNextLogon.Set(&v)
}
// SetChangePasswordOnNextLogonNil sets the value for ChangePasswordOnNextLogon to be an explicit nil
func (o *AdObjectRestoreParameters) SetChangePasswordOnNextLogonNil() {
	o.ChangePasswordOnNextLogon.Set(nil)
}

// UnsetChangePasswordOnNextLogon ensures that no value is present for ChangePasswordOnNextLogon, not even an explicit nil
func (o *AdObjectRestoreParameters) UnsetChangePasswordOnNextLogon() {
	o.ChangePasswordOnNextLogon.Unset()
}

// GetLeaveStateDisabled returns the LeaveStateDisabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdObjectRestoreParameters) GetLeaveStateDisabled() bool {
	if o == nil || o.LeaveStateDisabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.LeaveStateDisabled.Get()
}

// GetLeaveStateDisabledOk returns a tuple with the LeaveStateDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdObjectRestoreParameters) GetLeaveStateDisabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LeaveStateDisabled.Get(), o.LeaveStateDisabled.IsSet()
}

// HasLeaveStateDisabled returns a boolean if a field has been set.
func (o *AdObjectRestoreParameters) HasLeaveStateDisabled() bool {
	if o != nil && o.LeaveStateDisabled.IsSet() {
		return true
	}

	return false
}

// SetLeaveStateDisabled gets a reference to the given NullableBool and assigns it to the LeaveStateDisabled field.
func (o *AdObjectRestoreParameters) SetLeaveStateDisabled(v bool) {
	o.LeaveStateDisabled.Set(&v)
}
// SetLeaveStateDisabledNil sets the value for LeaveStateDisabled to be an explicit nil
func (o *AdObjectRestoreParameters) SetLeaveStateDisabledNil() {
	o.LeaveStateDisabled.Set(nil)
}

// UnsetLeaveStateDisabled ensures that no value is present for LeaveStateDisabled, not even an explicit nil
func (o *AdObjectRestoreParameters) UnsetLeaveStateDisabled() {
	o.LeaveStateDisabled.Unset()
}

// GetObjectGuids returns the ObjectGuids field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdObjectRestoreParameters) GetObjectGuids() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.ObjectGuids
}

// GetObjectGuidsOk returns a tuple with the ObjectGuids field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdObjectRestoreParameters) GetObjectGuidsOk() (*[]string, bool) {
	if o == nil || o.ObjectGuids == nil {
		return nil, false
	}
	return &o.ObjectGuids, true
}

// HasObjectGuids returns a boolean if a field has been set.
func (o *AdObjectRestoreParameters) HasObjectGuids() bool {
	if o != nil && o.ObjectGuids != nil {
		return true
	}

	return false
}

// SetObjectGuids gets a reference to the given []string and assigns it to the ObjectGuids field.
func (o *AdObjectRestoreParameters) SetObjectGuids(v []string) {
	o.ObjectGuids = v
}

// GetOrganizationUnitPath returns the OrganizationUnitPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdObjectRestoreParameters) GetOrganizationUnitPath() string {
	if o == nil || o.OrganizationUnitPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.OrganizationUnitPath.Get()
}

// GetOrganizationUnitPathOk returns a tuple with the OrganizationUnitPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdObjectRestoreParameters) GetOrganizationUnitPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OrganizationUnitPath.Get(), o.OrganizationUnitPath.IsSet()
}

// HasOrganizationUnitPath returns a boolean if a field has been set.
func (o *AdObjectRestoreParameters) HasOrganizationUnitPath() bool {
	if o != nil && o.OrganizationUnitPath.IsSet() {
		return true
	}

	return false
}

// SetOrganizationUnitPath gets a reference to the given NullableString and assigns it to the OrganizationUnitPath field.
func (o *AdObjectRestoreParameters) SetOrganizationUnitPath(v string) {
	o.OrganizationUnitPath.Set(&v)
}
// SetOrganizationUnitPathNil sets the value for OrganizationUnitPath to be an explicit nil
func (o *AdObjectRestoreParameters) SetOrganizationUnitPathNil() {
	o.OrganizationUnitPath.Set(nil)
}

// UnsetOrganizationUnitPath ensures that no value is present for OrganizationUnitPath, not even an explicit nil
func (o *AdObjectRestoreParameters) UnsetOrganizationUnitPath() {
	o.OrganizationUnitPath.Unset()
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdObjectRestoreParameters) GetPassword() string {
	if o == nil || o.Password.Get() == nil {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdObjectRestoreParameters) GetPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *AdObjectRestoreParameters) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *AdObjectRestoreParameters) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *AdObjectRestoreParameters) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *AdObjectRestoreParameters) UnsetPassword() {
	o.Password.Unset()
}

func (o AdObjectRestoreParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ChangePasswordOnNextLogon.IsSet() {
		toSerialize["changePasswordOnNextLogon"] = o.ChangePasswordOnNextLogon.Get()
	}
	if o.LeaveStateDisabled.IsSet() {
		toSerialize["leaveStateDisabled"] = o.LeaveStateDisabled.Get()
	}
	if o.ObjectGuids != nil {
		toSerialize["objectGuids"] = o.ObjectGuids
	}
	if o.OrganizationUnitPath.IsSet() {
		toSerialize["organizationUnitPath"] = o.OrganizationUnitPath.Get()
	}
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAdObjectRestoreParameters struct {
	value *AdObjectRestoreParameters
	isSet bool
}

func (v NullableAdObjectRestoreParameters) Get() *AdObjectRestoreParameters {
	return v.value
}

func (v *NullableAdObjectRestoreParameters) Set(val *AdObjectRestoreParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableAdObjectRestoreParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableAdObjectRestoreParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdObjectRestoreParameters(val *AdObjectRestoreParameters) *NullableAdObjectRestoreParameters {
	return &NullableAdObjectRestoreParameters{value: val, isSet: true}
}

func (v NullableAdObjectRestoreParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdObjectRestoreParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


