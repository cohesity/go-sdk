/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// AwsKmsUpdateParams struct for AwsKmsUpdateParams
type AwsKmsUpdateParams struct {
	// Access key id needed to access the cloud account. When update cluster config, should encrypte accessKeyId with cluster ID.
	AccessKeyId NullableString `json:"accessKeyId,omitempty"`
	// Specify the ca certificate path.
	CaCertificatePath NullableString `json:"caCertificatePath,omitempty"`
	// Secret access key needed to access the cloud account. This is encrypted with the cluster id.
	SecretAccessKey NullableString `json:"secretAccessKey,omitempty"`
	// Specify whether to verify SSL when connect with AWS KMS. Default is true.
	VerifySSL NullableBool `json:"verifySSL,omitempty"`
}

// NewAwsKmsUpdateParams instantiates a new AwsKmsUpdateParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsKmsUpdateParams() *AwsKmsUpdateParams {
	this := AwsKmsUpdateParams{}
	return &this
}

// NewAwsKmsUpdateParamsWithDefaults instantiates a new AwsKmsUpdateParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsKmsUpdateParamsWithDefaults() *AwsKmsUpdateParams {
	this := AwsKmsUpdateParams{}
	return &this
}

// GetAccessKeyId returns the AccessKeyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsKmsUpdateParams) GetAccessKeyId() string {
	if o == nil || o.AccessKeyId.Get() == nil {
		var ret string
		return ret
	}
	return *o.AccessKeyId.Get()
}

// GetAccessKeyIdOk returns a tuple with the AccessKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsKmsUpdateParams) GetAccessKeyIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AccessKeyId.Get(), o.AccessKeyId.IsSet()
}

// HasAccessKeyId returns a boolean if a field has been set.
func (o *AwsKmsUpdateParams) HasAccessKeyId() bool {
	if o != nil && o.AccessKeyId.IsSet() {
		return true
	}

	return false
}

// SetAccessKeyId gets a reference to the given NullableString and assigns it to the AccessKeyId field.
func (o *AwsKmsUpdateParams) SetAccessKeyId(v string) {
	o.AccessKeyId.Set(&v)
}
// SetAccessKeyIdNil sets the value for AccessKeyId to be an explicit nil
func (o *AwsKmsUpdateParams) SetAccessKeyIdNil() {
	o.AccessKeyId.Set(nil)
}

// UnsetAccessKeyId ensures that no value is present for AccessKeyId, not even an explicit nil
func (o *AwsKmsUpdateParams) UnsetAccessKeyId() {
	o.AccessKeyId.Unset()
}

// GetCaCertificatePath returns the CaCertificatePath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsKmsUpdateParams) GetCaCertificatePath() string {
	if o == nil || o.CaCertificatePath.Get() == nil {
		var ret string
		return ret
	}
	return *o.CaCertificatePath.Get()
}

// GetCaCertificatePathOk returns a tuple with the CaCertificatePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsKmsUpdateParams) GetCaCertificatePathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CaCertificatePath.Get(), o.CaCertificatePath.IsSet()
}

// HasCaCertificatePath returns a boolean if a field has been set.
func (o *AwsKmsUpdateParams) HasCaCertificatePath() bool {
	if o != nil && o.CaCertificatePath.IsSet() {
		return true
	}

	return false
}

// SetCaCertificatePath gets a reference to the given NullableString and assigns it to the CaCertificatePath field.
func (o *AwsKmsUpdateParams) SetCaCertificatePath(v string) {
	o.CaCertificatePath.Set(&v)
}
// SetCaCertificatePathNil sets the value for CaCertificatePath to be an explicit nil
func (o *AwsKmsUpdateParams) SetCaCertificatePathNil() {
	o.CaCertificatePath.Set(nil)
}

// UnsetCaCertificatePath ensures that no value is present for CaCertificatePath, not even an explicit nil
func (o *AwsKmsUpdateParams) UnsetCaCertificatePath() {
	o.CaCertificatePath.Unset()
}

// GetSecretAccessKey returns the SecretAccessKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsKmsUpdateParams) GetSecretAccessKey() string {
	if o == nil || o.SecretAccessKey.Get() == nil {
		var ret string
		return ret
	}
	return *o.SecretAccessKey.Get()
}

// GetSecretAccessKeyOk returns a tuple with the SecretAccessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsKmsUpdateParams) GetSecretAccessKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SecretAccessKey.Get(), o.SecretAccessKey.IsSet()
}

// HasSecretAccessKey returns a boolean if a field has been set.
func (o *AwsKmsUpdateParams) HasSecretAccessKey() bool {
	if o != nil && o.SecretAccessKey.IsSet() {
		return true
	}

	return false
}

// SetSecretAccessKey gets a reference to the given NullableString and assigns it to the SecretAccessKey field.
func (o *AwsKmsUpdateParams) SetSecretAccessKey(v string) {
	o.SecretAccessKey.Set(&v)
}
// SetSecretAccessKeyNil sets the value for SecretAccessKey to be an explicit nil
func (o *AwsKmsUpdateParams) SetSecretAccessKeyNil() {
	o.SecretAccessKey.Set(nil)
}

// UnsetSecretAccessKey ensures that no value is present for SecretAccessKey, not even an explicit nil
func (o *AwsKmsUpdateParams) UnsetSecretAccessKey() {
	o.SecretAccessKey.Unset()
}

// GetVerifySSL returns the VerifySSL field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsKmsUpdateParams) GetVerifySSL() bool {
	if o == nil || o.VerifySSL.Get() == nil {
		var ret bool
		return ret
	}
	return *o.VerifySSL.Get()
}

// GetVerifySSLOk returns a tuple with the VerifySSL field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsKmsUpdateParams) GetVerifySSLOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VerifySSL.Get(), o.VerifySSL.IsSet()
}

// HasVerifySSL returns a boolean if a field has been set.
func (o *AwsKmsUpdateParams) HasVerifySSL() bool {
	if o != nil && o.VerifySSL.IsSet() {
		return true
	}

	return false
}

// SetVerifySSL gets a reference to the given NullableBool and assigns it to the VerifySSL field.
func (o *AwsKmsUpdateParams) SetVerifySSL(v bool) {
	o.VerifySSL.Set(&v)
}
// SetVerifySSLNil sets the value for VerifySSL to be an explicit nil
func (o *AwsKmsUpdateParams) SetVerifySSLNil() {
	o.VerifySSL.Set(nil)
}

// UnsetVerifySSL ensures that no value is present for VerifySSL, not even an explicit nil
func (o *AwsKmsUpdateParams) UnsetVerifySSL() {
	o.VerifySSL.Unset()
}

func (o AwsKmsUpdateParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessKeyId.IsSet() {
		toSerialize["accessKeyId"] = o.AccessKeyId.Get()
	}
	if o.CaCertificatePath.IsSet() {
		toSerialize["caCertificatePath"] = o.CaCertificatePath.Get()
	}
	if o.SecretAccessKey.IsSet() {
		toSerialize["secretAccessKey"] = o.SecretAccessKey.Get()
	}
	if o.VerifySSL.IsSet() {
		toSerialize["verifySSL"] = o.VerifySSL.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAwsKmsUpdateParams struct {
	value *AwsKmsUpdateParams
	isSet bool
}

func (v NullableAwsKmsUpdateParams) Get() *AwsKmsUpdateParams {
	return v.value
}

func (v *NullableAwsKmsUpdateParams) Set(val *AwsKmsUpdateParams) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsKmsUpdateParams) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsKmsUpdateParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsKmsUpdateParams(val *AwsKmsUpdateParams) *NullableAwsKmsUpdateParams {
	return &NullableAwsKmsUpdateParams{value: val, isSet: true}
}

func (v NullableAwsKmsUpdateParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsKmsUpdateParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


