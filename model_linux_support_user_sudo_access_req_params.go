/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// LinuxSupportUserSudoAccessReqParams struct for LinuxSupportUserSudoAccessReqParams
type LinuxSupportUserSudoAccessReqParams struct {
	// If the enable flag is set to true, the sudo access will be enabled. If the enable flag is set to false, the sudo access will be disabled.
	SudoAccessEnable NullableBool `json:"sudoAccessEnable,omitempty"`
}

// NewLinuxSupportUserSudoAccessReqParams instantiates a new LinuxSupportUserSudoAccessReqParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinuxSupportUserSudoAccessReqParams() *LinuxSupportUserSudoAccessReqParams {
	this := LinuxSupportUserSudoAccessReqParams{}
	return &this
}

// NewLinuxSupportUserSudoAccessReqParamsWithDefaults instantiates a new LinuxSupportUserSudoAccessReqParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinuxSupportUserSudoAccessReqParamsWithDefaults() *LinuxSupportUserSudoAccessReqParams {
	this := LinuxSupportUserSudoAccessReqParams{}
	return &this
}

// GetSudoAccessEnable returns the SudoAccessEnable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LinuxSupportUserSudoAccessReqParams) GetSudoAccessEnable() bool {
	if o == nil || o.SudoAccessEnable.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SudoAccessEnable.Get()
}

// GetSudoAccessEnableOk returns a tuple with the SudoAccessEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LinuxSupportUserSudoAccessReqParams) GetSudoAccessEnableOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SudoAccessEnable.Get(), o.SudoAccessEnable.IsSet()
}

// HasSudoAccessEnable returns a boolean if a field has been set.
func (o *LinuxSupportUserSudoAccessReqParams) HasSudoAccessEnable() bool {
	if o != nil && o.SudoAccessEnable.IsSet() {
		return true
	}

	return false
}

// SetSudoAccessEnable gets a reference to the given NullableBool and assigns it to the SudoAccessEnable field.
func (o *LinuxSupportUserSudoAccessReqParams) SetSudoAccessEnable(v bool) {
	o.SudoAccessEnable.Set(&v)
}
// SetSudoAccessEnableNil sets the value for SudoAccessEnable to be an explicit nil
func (o *LinuxSupportUserSudoAccessReqParams) SetSudoAccessEnableNil() {
	o.SudoAccessEnable.Set(nil)
}

// UnsetSudoAccessEnable ensures that no value is present for SudoAccessEnable, not even an explicit nil
func (o *LinuxSupportUserSudoAccessReqParams) UnsetSudoAccessEnable() {
	o.SudoAccessEnable.Unset()
}

func (o LinuxSupportUserSudoAccessReqParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SudoAccessEnable.IsSet() {
		toSerialize["sudoAccessEnable"] = o.SudoAccessEnable.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableLinuxSupportUserSudoAccessReqParams struct {
	value *LinuxSupportUserSudoAccessReqParams
	isSet bool
}

func (v NullableLinuxSupportUserSudoAccessReqParams) Get() *LinuxSupportUserSudoAccessReqParams {
	return v.value
}

func (v *NullableLinuxSupportUserSudoAccessReqParams) Set(val *LinuxSupportUserSudoAccessReqParams) {
	v.value = val
	v.isSet = true
}

func (v NullableLinuxSupportUserSudoAccessReqParams) IsSet() bool {
	return v.isSet
}

func (v *NullableLinuxSupportUserSudoAccessReqParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinuxSupportUserSudoAccessReqParams(val *LinuxSupportUserSudoAccessReqParams) *NullableLinuxSupportUserSudoAccessReqParams {
	return &NullableLinuxSupportUserSudoAccessReqParams{value: val, isSet: true}
}

func (v NullableLinuxSupportUserSudoAccessReqParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinuxSupportUserSudoAccessReqParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


