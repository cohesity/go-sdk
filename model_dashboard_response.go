/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// DashboardResponse struct for DashboardResponse
type DashboardResponse struct {
	Dashboard *Dashboard `json:"dashboard,omitempty"`
	// Specifies a list of dashboards of all the clusters in the SPOG setup if the query parameter allClusters is set to true. Otherwise this field is not populated. When populated the dashboard field is also populated with aggregated dashboard values.
	Dashboards []Dashboard `json:"dashboards,omitempty"`
}

// NewDashboardResponse instantiates a new DashboardResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboardResponse() *DashboardResponse {
	this := DashboardResponse{}
	return &this
}

// NewDashboardResponseWithDefaults instantiates a new DashboardResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardResponseWithDefaults() *DashboardResponse {
	this := DashboardResponse{}
	return &this
}

// GetDashboard returns the Dashboard field value if set, zero value otherwise.
func (o *DashboardResponse) GetDashboard() Dashboard {
	if o == nil || o.Dashboard == nil {
		var ret Dashboard
		return ret
	}
	return *o.Dashboard
}

// GetDashboardOk returns a tuple with the Dashboard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardResponse) GetDashboardOk() (*Dashboard, bool) {
	if o == nil || o.Dashboard == nil {
		return nil, false
	}
	return o.Dashboard, true
}

// HasDashboard returns a boolean if a field has been set.
func (o *DashboardResponse) HasDashboard() bool {
	if o != nil && o.Dashboard != nil {
		return true
	}

	return false
}

// SetDashboard gets a reference to the given Dashboard and assigns it to the Dashboard field.
func (o *DashboardResponse) SetDashboard(v Dashboard) {
	o.Dashboard = &v
}

// GetDashboards returns the Dashboards field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DashboardResponse) GetDashboards() []Dashboard {
	if o == nil  {
		var ret []Dashboard
		return ret
	}
	return o.Dashboards
}

// GetDashboardsOk returns a tuple with the Dashboards field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DashboardResponse) GetDashboardsOk() (*[]Dashboard, bool) {
	if o == nil || o.Dashboards == nil {
		return nil, false
	}
	return &o.Dashboards, true
}

// HasDashboards returns a boolean if a field has been set.
func (o *DashboardResponse) HasDashboards() bool {
	if o != nil && o.Dashboards != nil {
		return true
	}

	return false
}

// SetDashboards gets a reference to the given []Dashboard and assigns it to the Dashboards field.
func (o *DashboardResponse) SetDashboards(v []Dashboard) {
	o.Dashboards = v
}

func (o DashboardResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Dashboard != nil {
		toSerialize["dashboard"] = o.Dashboard
	}
	if o.Dashboards != nil {
		toSerialize["dashboards"] = o.Dashboards
	}
	return json.Marshal(toSerialize)
}

type NullableDashboardResponse struct {
	value *DashboardResponse
	isSet bool
}

func (v NullableDashboardResponse) Get() *DashboardResponse {
	return v.value
}

func (v *NullableDashboardResponse) Set(val *DashboardResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardResponse(val *DashboardResponse) *NullableDashboardResponse {
	return &NullableDashboardResponse{value: val, isSet: true}
}

func (v NullableDashboardResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


