/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ObjectInformation struct for ObjectInformation
type ObjectInformation struct {
	// Species the list of user who have access to this object.
	AccessibleUsers []string `json:"accessibleUsers,omitempty"`
	// Specifies the audit log information.
	AuditLogs []ClusterAuditLog `json:"auditLogs,omitempty"`
	// Specifies the copy task information.
	CopyTaskInfo []GdprCopyTask `json:"copyTaskInfo,omitempty"`
	// Specifies the protection status of the object.
	IsProtected NullableBool `json:"isProtected,omitempty"`
	// Specifies the location of the parent source.
	Location NullableString `json:"location,omitempty"`
	// Specifies the data locations for the protected objects.
	ProtectionInfo []ProtectionInfo `json:"protectionInfo,omitempty"`
	// Specifies the id of the root node.
	RootNodeId NullableInt64 `json:"rootNodeId,omitempty"`
	// Specifies the id of the Protection Source.
	SourceId NullableInt64 `json:"sourceId,omitempty"`
	// Specifies the name of the object.
	SourceName NullableString `json:"sourceName,omitempty"`
}

// NewObjectInformation instantiates a new ObjectInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectInformation() *ObjectInformation {
	this := ObjectInformation{}
	return &this
}

// NewObjectInformationWithDefaults instantiates a new ObjectInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectInformationWithDefaults() *ObjectInformation {
	this := ObjectInformation{}
	return &this
}

// GetAccessibleUsers returns the AccessibleUsers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectInformation) GetAccessibleUsers() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.AccessibleUsers
}

// GetAccessibleUsersOk returns a tuple with the AccessibleUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectInformation) GetAccessibleUsersOk() (*[]string, bool) {
	if o == nil || o.AccessibleUsers == nil {
		return nil, false
	}
	return &o.AccessibleUsers, true
}

// HasAccessibleUsers returns a boolean if a field has been set.
func (o *ObjectInformation) HasAccessibleUsers() bool {
	if o != nil && o.AccessibleUsers != nil {
		return true
	}

	return false
}

// SetAccessibleUsers gets a reference to the given []string and assigns it to the AccessibleUsers field.
func (o *ObjectInformation) SetAccessibleUsers(v []string) {
	o.AccessibleUsers = v
}

// GetAuditLogs returns the AuditLogs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectInformation) GetAuditLogs() []ClusterAuditLog {
	if o == nil  {
		var ret []ClusterAuditLog
		return ret
	}
	return o.AuditLogs
}

// GetAuditLogsOk returns a tuple with the AuditLogs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectInformation) GetAuditLogsOk() (*[]ClusterAuditLog, bool) {
	if o == nil || o.AuditLogs == nil {
		return nil, false
	}
	return &o.AuditLogs, true
}

// HasAuditLogs returns a boolean if a field has been set.
func (o *ObjectInformation) HasAuditLogs() bool {
	if o != nil && o.AuditLogs != nil {
		return true
	}

	return false
}

// SetAuditLogs gets a reference to the given []ClusterAuditLog and assigns it to the AuditLogs field.
func (o *ObjectInformation) SetAuditLogs(v []ClusterAuditLog) {
	o.AuditLogs = v
}

// GetCopyTaskInfo returns the CopyTaskInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectInformation) GetCopyTaskInfo() []GdprCopyTask {
	if o == nil  {
		var ret []GdprCopyTask
		return ret
	}
	return o.CopyTaskInfo
}

// GetCopyTaskInfoOk returns a tuple with the CopyTaskInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectInformation) GetCopyTaskInfoOk() (*[]GdprCopyTask, bool) {
	if o == nil || o.CopyTaskInfo == nil {
		return nil, false
	}
	return &o.CopyTaskInfo, true
}

// HasCopyTaskInfo returns a boolean if a field has been set.
func (o *ObjectInformation) HasCopyTaskInfo() bool {
	if o != nil && o.CopyTaskInfo != nil {
		return true
	}

	return false
}

// SetCopyTaskInfo gets a reference to the given []GdprCopyTask and assigns it to the CopyTaskInfo field.
func (o *ObjectInformation) SetCopyTaskInfo(v []GdprCopyTask) {
	o.CopyTaskInfo = v
}

// GetIsProtected returns the IsProtected field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectInformation) GetIsProtected() bool {
	if o == nil || o.IsProtected.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsProtected.Get()
}

// GetIsProtectedOk returns a tuple with the IsProtected field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectInformation) GetIsProtectedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsProtected.Get(), o.IsProtected.IsSet()
}

// HasIsProtected returns a boolean if a field has been set.
func (o *ObjectInformation) HasIsProtected() bool {
	if o != nil && o.IsProtected.IsSet() {
		return true
	}

	return false
}

// SetIsProtected gets a reference to the given NullableBool and assigns it to the IsProtected field.
func (o *ObjectInformation) SetIsProtected(v bool) {
	o.IsProtected.Set(&v)
}
// SetIsProtectedNil sets the value for IsProtected to be an explicit nil
func (o *ObjectInformation) SetIsProtectedNil() {
	o.IsProtected.Set(nil)
}

// UnsetIsProtected ensures that no value is present for IsProtected, not even an explicit nil
func (o *ObjectInformation) UnsetIsProtected() {
	o.IsProtected.Unset()
}

// GetLocation returns the Location field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectInformation) GetLocation() string {
	if o == nil || o.Location.Get() == nil {
		var ret string
		return ret
	}
	return *o.Location.Get()
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectInformation) GetLocationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Location.Get(), o.Location.IsSet()
}

// HasLocation returns a boolean if a field has been set.
func (o *ObjectInformation) HasLocation() bool {
	if o != nil && o.Location.IsSet() {
		return true
	}

	return false
}

// SetLocation gets a reference to the given NullableString and assigns it to the Location field.
func (o *ObjectInformation) SetLocation(v string) {
	o.Location.Set(&v)
}
// SetLocationNil sets the value for Location to be an explicit nil
func (o *ObjectInformation) SetLocationNil() {
	o.Location.Set(nil)
}

// UnsetLocation ensures that no value is present for Location, not even an explicit nil
func (o *ObjectInformation) UnsetLocation() {
	o.Location.Unset()
}

// GetProtectionInfo returns the ProtectionInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectInformation) GetProtectionInfo() []ProtectionInfo {
	if o == nil  {
		var ret []ProtectionInfo
		return ret
	}
	return o.ProtectionInfo
}

// GetProtectionInfoOk returns a tuple with the ProtectionInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectInformation) GetProtectionInfoOk() (*[]ProtectionInfo, bool) {
	if o == nil || o.ProtectionInfo == nil {
		return nil, false
	}
	return &o.ProtectionInfo, true
}

// HasProtectionInfo returns a boolean if a field has been set.
func (o *ObjectInformation) HasProtectionInfo() bool {
	if o != nil && o.ProtectionInfo != nil {
		return true
	}

	return false
}

// SetProtectionInfo gets a reference to the given []ProtectionInfo and assigns it to the ProtectionInfo field.
func (o *ObjectInformation) SetProtectionInfo(v []ProtectionInfo) {
	o.ProtectionInfo = v
}

// GetRootNodeId returns the RootNodeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectInformation) GetRootNodeId() int64 {
	if o == nil || o.RootNodeId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RootNodeId.Get()
}

// GetRootNodeIdOk returns a tuple with the RootNodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectInformation) GetRootNodeIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RootNodeId.Get(), o.RootNodeId.IsSet()
}

// HasRootNodeId returns a boolean if a field has been set.
func (o *ObjectInformation) HasRootNodeId() bool {
	if o != nil && o.RootNodeId.IsSet() {
		return true
	}

	return false
}

// SetRootNodeId gets a reference to the given NullableInt64 and assigns it to the RootNodeId field.
func (o *ObjectInformation) SetRootNodeId(v int64) {
	o.RootNodeId.Set(&v)
}
// SetRootNodeIdNil sets the value for RootNodeId to be an explicit nil
func (o *ObjectInformation) SetRootNodeIdNil() {
	o.RootNodeId.Set(nil)
}

// UnsetRootNodeId ensures that no value is present for RootNodeId, not even an explicit nil
func (o *ObjectInformation) UnsetRootNodeId() {
	o.RootNodeId.Unset()
}

// GetSourceId returns the SourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectInformation) GetSourceId() int64 {
	if o == nil || o.SourceId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SourceId.Get()
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectInformation) GetSourceIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceId.Get(), o.SourceId.IsSet()
}

// HasSourceId returns a boolean if a field has been set.
func (o *ObjectInformation) HasSourceId() bool {
	if o != nil && o.SourceId.IsSet() {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given NullableInt64 and assigns it to the SourceId field.
func (o *ObjectInformation) SetSourceId(v int64) {
	o.SourceId.Set(&v)
}
// SetSourceIdNil sets the value for SourceId to be an explicit nil
func (o *ObjectInformation) SetSourceIdNil() {
	o.SourceId.Set(nil)
}

// UnsetSourceId ensures that no value is present for SourceId, not even an explicit nil
func (o *ObjectInformation) UnsetSourceId() {
	o.SourceId.Unset()
}

// GetSourceName returns the SourceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectInformation) GetSourceName() string {
	if o == nil || o.SourceName.Get() == nil {
		var ret string
		return ret
	}
	return *o.SourceName.Get()
}

// GetSourceNameOk returns a tuple with the SourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectInformation) GetSourceNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceName.Get(), o.SourceName.IsSet()
}

// HasSourceName returns a boolean if a field has been set.
func (o *ObjectInformation) HasSourceName() bool {
	if o != nil && o.SourceName.IsSet() {
		return true
	}

	return false
}

// SetSourceName gets a reference to the given NullableString and assigns it to the SourceName field.
func (o *ObjectInformation) SetSourceName(v string) {
	o.SourceName.Set(&v)
}
// SetSourceNameNil sets the value for SourceName to be an explicit nil
func (o *ObjectInformation) SetSourceNameNil() {
	o.SourceName.Set(nil)
}

// UnsetSourceName ensures that no value is present for SourceName, not even an explicit nil
func (o *ObjectInformation) UnsetSourceName() {
	o.SourceName.Unset()
}

func (o ObjectInformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessibleUsers != nil {
		toSerialize["accessibleUsers"] = o.AccessibleUsers
	}
	if o.AuditLogs != nil {
		toSerialize["auditLogs"] = o.AuditLogs
	}
	if o.CopyTaskInfo != nil {
		toSerialize["copyTaskInfo"] = o.CopyTaskInfo
	}
	if o.IsProtected.IsSet() {
		toSerialize["isProtected"] = o.IsProtected.Get()
	}
	if o.Location.IsSet() {
		toSerialize["location"] = o.Location.Get()
	}
	if o.ProtectionInfo != nil {
		toSerialize["protectionInfo"] = o.ProtectionInfo
	}
	if o.RootNodeId.IsSet() {
		toSerialize["rootNodeId"] = o.RootNodeId.Get()
	}
	if o.SourceId.IsSet() {
		toSerialize["sourceId"] = o.SourceId.Get()
	}
	if o.SourceName.IsSet() {
		toSerialize["sourceName"] = o.SourceName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableObjectInformation struct {
	value *ObjectInformation
	isSet bool
}

func (v NullableObjectInformation) Get() *ObjectInformation {
	return v.value
}

func (v *NullableObjectInformation) Set(val *ObjectInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectInformation(val *ObjectInformation) *NullableObjectInformation {
	return &NullableObjectInformation{value: val, isSet: true}
}

func (v NullableObjectInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


