/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// UserParameters Specifies the settings used to create/add a new user or modify an existing user.
type UserParameters struct {
	// Array of Additional Groups.  Specifies the names of additional groups this User may belong to.
	AdditionalGroupNames []string `json:"additionalGroupNames,omitempty"`
	// Specifies the list of clusters this user has access to. If this is not specified, access will be granted to all clusters.
	ClusterIdentifiers []ClusterIdentifier `json:"clusterIdentifiers,omitempty"`
	// Specifies a description about the user.
	Description NullableString `json:"description,omitempty"`
	// Specifies the fully qualified domain name (FQDN) of an Active Directory or LOCAL for the default LOCAL domain on the Cohesity Cluster. A user is uniquely identified by combination of the username and the domain.
	Domain NullableString `json:"domain,omitempty"`
	// Specifies the epoch time in milliseconds when the user becomes effective. Until that time, the user cannot log in.
	EffectiveTimeMsecs NullableInt64 `json:"effectiveTimeMsecs,omitempty"`
	// Specifies the email address of the user.
	EmailAddress NullableString `json:"emailAddress,omitempty"`
	// Specifies the epoch time in milliseconds when the user becomes expired. After that, the user cannot log in.
	ExpiredTimeMsecs NullableInt64 `json:"expiredTimeMsecs,omitempty"`
	// Specifies the password of this user.
	Password NullableString `json:"password,omitempty"`
	// Specifies the name of the primary group of this User.
	PrimaryGroupName NullableString `json:"primaryGroupName,omitempty"`
	// Array of Privileges.  Specifies the Cohesity privileges from the roles. This will be populated based on the union of all privileges in roles. Type for unique privilege Id values. All below enum values specify a value for all uniquely defined privileges in Cohesity.
	PrivilegeIds []string `json:"privilegeIds,omitempty"`
	// Whether the user is a restricted user. A restricted user can only view the objects he has permissions to.
	Restricted NullableBool `json:"restricted,omitempty"`
	// Array of Roles.  Specifies the Cohesity roles to associate with the user such as such as 'Admin', 'Ops' or 'View'. The Cohesity roles determine privileges on the Cohesity Cluster for this user.
	Roles []string `json:"roles,omitempty"`
	// Specifies the login name of the user.
	Username NullableString `json:"username,omitempty"`
}

// NewUserParameters instantiates a new UserParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserParameters() *UserParameters {
	this := UserParameters{}
	return &this
}

// NewUserParametersWithDefaults instantiates a new UserParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserParametersWithDefaults() *UserParameters {
	this := UserParameters{}
	return &this
}

// GetAdditionalGroupNames returns the AdditionalGroupNames field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserParameters) GetAdditionalGroupNames() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.AdditionalGroupNames
}

// GetAdditionalGroupNamesOk returns a tuple with the AdditionalGroupNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserParameters) GetAdditionalGroupNamesOk() (*[]string, bool) {
	if o == nil || o.AdditionalGroupNames == nil {
		return nil, false
	}
	return &o.AdditionalGroupNames, true
}

// HasAdditionalGroupNames returns a boolean if a field has been set.
func (o *UserParameters) HasAdditionalGroupNames() bool {
	if o != nil && o.AdditionalGroupNames != nil {
		return true
	}

	return false
}

// SetAdditionalGroupNames gets a reference to the given []string and assigns it to the AdditionalGroupNames field.
func (o *UserParameters) SetAdditionalGroupNames(v []string) {
	o.AdditionalGroupNames = v
}

// GetClusterIdentifiers returns the ClusterIdentifiers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserParameters) GetClusterIdentifiers() []ClusterIdentifier {
	if o == nil  {
		var ret []ClusterIdentifier
		return ret
	}
	return o.ClusterIdentifiers
}

// GetClusterIdentifiersOk returns a tuple with the ClusterIdentifiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserParameters) GetClusterIdentifiersOk() (*[]ClusterIdentifier, bool) {
	if o == nil || o.ClusterIdentifiers == nil {
		return nil, false
	}
	return &o.ClusterIdentifiers, true
}

// HasClusterIdentifiers returns a boolean if a field has been set.
func (o *UserParameters) HasClusterIdentifiers() bool {
	if o != nil && o.ClusterIdentifiers != nil {
		return true
	}

	return false
}

// SetClusterIdentifiers gets a reference to the given []ClusterIdentifier and assigns it to the ClusterIdentifiers field.
func (o *UserParameters) SetClusterIdentifiers(v []ClusterIdentifier) {
	o.ClusterIdentifiers = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserParameters) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserParameters) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *UserParameters) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *UserParameters) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *UserParameters) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *UserParameters) UnsetDescription() {
	o.Description.Unset()
}

// GetDomain returns the Domain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserParameters) GetDomain() string {
	if o == nil || o.Domain.Get() == nil {
		var ret string
		return ret
	}
	return *o.Domain.Get()
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserParameters) GetDomainOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Domain.Get(), o.Domain.IsSet()
}

// HasDomain returns a boolean if a field has been set.
func (o *UserParameters) HasDomain() bool {
	if o != nil && o.Domain.IsSet() {
		return true
	}

	return false
}

// SetDomain gets a reference to the given NullableString and assigns it to the Domain field.
func (o *UserParameters) SetDomain(v string) {
	o.Domain.Set(&v)
}
// SetDomainNil sets the value for Domain to be an explicit nil
func (o *UserParameters) SetDomainNil() {
	o.Domain.Set(nil)
}

// UnsetDomain ensures that no value is present for Domain, not even an explicit nil
func (o *UserParameters) UnsetDomain() {
	o.Domain.Unset()
}

// GetEffectiveTimeMsecs returns the EffectiveTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserParameters) GetEffectiveTimeMsecs() int64 {
	if o == nil || o.EffectiveTimeMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.EffectiveTimeMsecs.Get()
}

// GetEffectiveTimeMsecsOk returns a tuple with the EffectiveTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserParameters) GetEffectiveTimeMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EffectiveTimeMsecs.Get(), o.EffectiveTimeMsecs.IsSet()
}

// HasEffectiveTimeMsecs returns a boolean if a field has been set.
func (o *UserParameters) HasEffectiveTimeMsecs() bool {
	if o != nil && o.EffectiveTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetEffectiveTimeMsecs gets a reference to the given NullableInt64 and assigns it to the EffectiveTimeMsecs field.
func (o *UserParameters) SetEffectiveTimeMsecs(v int64) {
	o.EffectiveTimeMsecs.Set(&v)
}
// SetEffectiveTimeMsecsNil sets the value for EffectiveTimeMsecs to be an explicit nil
func (o *UserParameters) SetEffectiveTimeMsecsNil() {
	o.EffectiveTimeMsecs.Set(nil)
}

// UnsetEffectiveTimeMsecs ensures that no value is present for EffectiveTimeMsecs, not even an explicit nil
func (o *UserParameters) UnsetEffectiveTimeMsecs() {
	o.EffectiveTimeMsecs.Unset()
}

// GetEmailAddress returns the EmailAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserParameters) GetEmailAddress() string {
	if o == nil || o.EmailAddress.Get() == nil {
		var ret string
		return ret
	}
	return *o.EmailAddress.Get()
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserParameters) GetEmailAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EmailAddress.Get(), o.EmailAddress.IsSet()
}

// HasEmailAddress returns a boolean if a field has been set.
func (o *UserParameters) HasEmailAddress() bool {
	if o != nil && o.EmailAddress.IsSet() {
		return true
	}

	return false
}

// SetEmailAddress gets a reference to the given NullableString and assigns it to the EmailAddress field.
func (o *UserParameters) SetEmailAddress(v string) {
	o.EmailAddress.Set(&v)
}
// SetEmailAddressNil sets the value for EmailAddress to be an explicit nil
func (o *UserParameters) SetEmailAddressNil() {
	o.EmailAddress.Set(nil)
}

// UnsetEmailAddress ensures that no value is present for EmailAddress, not even an explicit nil
func (o *UserParameters) UnsetEmailAddress() {
	o.EmailAddress.Unset()
}

// GetExpiredTimeMsecs returns the ExpiredTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserParameters) GetExpiredTimeMsecs() int64 {
	if o == nil || o.ExpiredTimeMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ExpiredTimeMsecs.Get()
}

// GetExpiredTimeMsecsOk returns a tuple with the ExpiredTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserParameters) GetExpiredTimeMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExpiredTimeMsecs.Get(), o.ExpiredTimeMsecs.IsSet()
}

// HasExpiredTimeMsecs returns a boolean if a field has been set.
func (o *UserParameters) HasExpiredTimeMsecs() bool {
	if o != nil && o.ExpiredTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetExpiredTimeMsecs gets a reference to the given NullableInt64 and assigns it to the ExpiredTimeMsecs field.
func (o *UserParameters) SetExpiredTimeMsecs(v int64) {
	o.ExpiredTimeMsecs.Set(&v)
}
// SetExpiredTimeMsecsNil sets the value for ExpiredTimeMsecs to be an explicit nil
func (o *UserParameters) SetExpiredTimeMsecsNil() {
	o.ExpiredTimeMsecs.Set(nil)
}

// UnsetExpiredTimeMsecs ensures that no value is present for ExpiredTimeMsecs, not even an explicit nil
func (o *UserParameters) UnsetExpiredTimeMsecs() {
	o.ExpiredTimeMsecs.Unset()
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserParameters) GetPassword() string {
	if o == nil || o.Password.Get() == nil {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserParameters) GetPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *UserParameters) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *UserParameters) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *UserParameters) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *UserParameters) UnsetPassword() {
	o.Password.Unset()
}

// GetPrimaryGroupName returns the PrimaryGroupName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserParameters) GetPrimaryGroupName() string {
	if o == nil || o.PrimaryGroupName.Get() == nil {
		var ret string
		return ret
	}
	return *o.PrimaryGroupName.Get()
}

// GetPrimaryGroupNameOk returns a tuple with the PrimaryGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserParameters) GetPrimaryGroupNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PrimaryGroupName.Get(), o.PrimaryGroupName.IsSet()
}

// HasPrimaryGroupName returns a boolean if a field has been set.
func (o *UserParameters) HasPrimaryGroupName() bool {
	if o != nil && o.PrimaryGroupName.IsSet() {
		return true
	}

	return false
}

// SetPrimaryGroupName gets a reference to the given NullableString and assigns it to the PrimaryGroupName field.
func (o *UserParameters) SetPrimaryGroupName(v string) {
	o.PrimaryGroupName.Set(&v)
}
// SetPrimaryGroupNameNil sets the value for PrimaryGroupName to be an explicit nil
func (o *UserParameters) SetPrimaryGroupNameNil() {
	o.PrimaryGroupName.Set(nil)
}

// UnsetPrimaryGroupName ensures that no value is present for PrimaryGroupName, not even an explicit nil
func (o *UserParameters) UnsetPrimaryGroupName() {
	o.PrimaryGroupName.Unset()
}

// GetPrivilegeIds returns the PrivilegeIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserParameters) GetPrivilegeIds() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.PrivilegeIds
}

// GetPrivilegeIdsOk returns a tuple with the PrivilegeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserParameters) GetPrivilegeIdsOk() (*[]string, bool) {
	if o == nil || o.PrivilegeIds == nil {
		return nil, false
	}
	return &o.PrivilegeIds, true
}

// HasPrivilegeIds returns a boolean if a field has been set.
func (o *UserParameters) HasPrivilegeIds() bool {
	if o != nil && o.PrivilegeIds != nil {
		return true
	}

	return false
}

// SetPrivilegeIds gets a reference to the given []string and assigns it to the PrivilegeIds field.
func (o *UserParameters) SetPrivilegeIds(v []string) {
	o.PrivilegeIds = v
}

// GetRestricted returns the Restricted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserParameters) GetRestricted() bool {
	if o == nil || o.Restricted.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Restricted.Get()
}

// GetRestrictedOk returns a tuple with the Restricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserParameters) GetRestrictedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Restricted.Get(), o.Restricted.IsSet()
}

// HasRestricted returns a boolean if a field has been set.
func (o *UserParameters) HasRestricted() bool {
	if o != nil && o.Restricted.IsSet() {
		return true
	}

	return false
}

// SetRestricted gets a reference to the given NullableBool and assigns it to the Restricted field.
func (o *UserParameters) SetRestricted(v bool) {
	o.Restricted.Set(&v)
}
// SetRestrictedNil sets the value for Restricted to be an explicit nil
func (o *UserParameters) SetRestrictedNil() {
	o.Restricted.Set(nil)
}

// UnsetRestricted ensures that no value is present for Restricted, not even an explicit nil
func (o *UserParameters) UnsetRestricted() {
	o.Restricted.Unset()
}

// GetRoles returns the Roles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserParameters) GetRoles() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserParameters) GetRolesOk() (*[]string, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return &o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *UserParameters) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *UserParameters) SetRoles(v []string) {
	o.Roles = v
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserParameters) GetUsername() string {
	if o == nil || o.Username.Get() == nil {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserParameters) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *UserParameters) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *UserParameters) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *UserParameters) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *UserParameters) UnsetUsername() {
	o.Username.Unset()
}

func (o UserParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AdditionalGroupNames != nil {
		toSerialize["additionalGroupNames"] = o.AdditionalGroupNames
	}
	if o.ClusterIdentifiers != nil {
		toSerialize["clusterIdentifiers"] = o.ClusterIdentifiers
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Domain.IsSet() {
		toSerialize["domain"] = o.Domain.Get()
	}
	if o.EffectiveTimeMsecs.IsSet() {
		toSerialize["effectiveTimeMsecs"] = o.EffectiveTimeMsecs.Get()
	}
	if o.EmailAddress.IsSet() {
		toSerialize["emailAddress"] = o.EmailAddress.Get()
	}
	if o.ExpiredTimeMsecs.IsSet() {
		toSerialize["expiredTimeMsecs"] = o.ExpiredTimeMsecs.Get()
	}
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	if o.PrimaryGroupName.IsSet() {
		toSerialize["primaryGroupName"] = o.PrimaryGroupName.Get()
	}
	if o.PrivilegeIds != nil {
		toSerialize["privilegeIds"] = o.PrivilegeIds
	}
	if o.Restricted.IsSet() {
		toSerialize["restricted"] = o.Restricted.Get()
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUserParameters struct {
	value *UserParameters
	isSet bool
}

func (v NullableUserParameters) Get() *UserParameters {
	return v.value
}

func (v *NullableUserParameters) Set(val *UserParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableUserParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableUserParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserParameters(val *UserParameters) *NullableUserParameters {
	return &NullableUserParameters{value: val, isSet: true}
}

func (v NullableUserParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


