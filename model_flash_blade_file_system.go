/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// FlashBladeFileSystem Specifies information about a Flash Blade File System in a Storage Array.
type FlashBladeFileSystem struct {
	// Specifies whether the .snapshot directory exists on the file system. Backup is enabled only if the directory exists.
	BackupEnabled NullableBool `json:"backupEnabled,omitempty"`
	// Specifies the time when the filesystem was created in Unix epoch time in milliseconds.
	CreatedTimeMsecs NullableInt64 `json:"createdTimeMsecs,omitempty"`
	// Specifies the total capacity in bytes of the file system.
	LogicalCapacityBytes NullableInt64 `json:"logicalCapacityBytes,omitempty"`
	// Specifies the size of logical data currently represented on the file system in bytes.
	LogicalUsedBytes NullableInt64 `json:"logicalUsedBytes,omitempty"`
	NfsInfo *FlashBladeNfsInfo `json:"nfsInfo,omitempty"`
	// Specifies the size of physical data currently consumed by the file system. This includes the space used for the snapshots.
	PhysicalUsedBytes NullableInt64 `json:"physicalUsedBytes,omitempty"`
	// List of Protocols.  Specifies the list of protocols enabled on the file system. 'kNfs' indicates NFS exports are supported on Pure FlashBlade File System. 'kCifs2' indicates CIFS/SMB Shares are supported on Pure FlashBlade File System. 'kHttp' indicates object protocol over HTTP and HTTPS are supported.
	Protocols []string `json:"protocols,omitempty"`
	// Specifies the size of physical data consumed by the file system itself not including the size of the snapshots.
	UniqueUsedBytes NullableInt64 `json:"uniqueUsedBytes,omitempty"`
}

// NewFlashBladeFileSystem instantiates a new FlashBladeFileSystem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlashBladeFileSystem() *FlashBladeFileSystem {
	this := FlashBladeFileSystem{}
	return &this
}

// NewFlashBladeFileSystemWithDefaults instantiates a new FlashBladeFileSystem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlashBladeFileSystemWithDefaults() *FlashBladeFileSystem {
	this := FlashBladeFileSystem{}
	return &this
}

// GetBackupEnabled returns the BackupEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FlashBladeFileSystem) GetBackupEnabled() bool {
	if o == nil || o.BackupEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.BackupEnabled.Get()
}

// GetBackupEnabledOk returns a tuple with the BackupEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FlashBladeFileSystem) GetBackupEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BackupEnabled.Get(), o.BackupEnabled.IsSet()
}

// HasBackupEnabled returns a boolean if a field has been set.
func (o *FlashBladeFileSystem) HasBackupEnabled() bool {
	if o != nil && o.BackupEnabled.IsSet() {
		return true
	}

	return false
}

// SetBackupEnabled gets a reference to the given NullableBool and assigns it to the BackupEnabled field.
func (o *FlashBladeFileSystem) SetBackupEnabled(v bool) {
	o.BackupEnabled.Set(&v)
}
// SetBackupEnabledNil sets the value for BackupEnabled to be an explicit nil
func (o *FlashBladeFileSystem) SetBackupEnabledNil() {
	o.BackupEnabled.Set(nil)
}

// UnsetBackupEnabled ensures that no value is present for BackupEnabled, not even an explicit nil
func (o *FlashBladeFileSystem) UnsetBackupEnabled() {
	o.BackupEnabled.Unset()
}

// GetCreatedTimeMsecs returns the CreatedTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FlashBladeFileSystem) GetCreatedTimeMsecs() int64 {
	if o == nil || o.CreatedTimeMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.CreatedTimeMsecs.Get()
}

// GetCreatedTimeMsecsOk returns a tuple with the CreatedTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FlashBladeFileSystem) GetCreatedTimeMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CreatedTimeMsecs.Get(), o.CreatedTimeMsecs.IsSet()
}

// HasCreatedTimeMsecs returns a boolean if a field has been set.
func (o *FlashBladeFileSystem) HasCreatedTimeMsecs() bool {
	if o != nil && o.CreatedTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetCreatedTimeMsecs gets a reference to the given NullableInt64 and assigns it to the CreatedTimeMsecs field.
func (o *FlashBladeFileSystem) SetCreatedTimeMsecs(v int64) {
	o.CreatedTimeMsecs.Set(&v)
}
// SetCreatedTimeMsecsNil sets the value for CreatedTimeMsecs to be an explicit nil
func (o *FlashBladeFileSystem) SetCreatedTimeMsecsNil() {
	o.CreatedTimeMsecs.Set(nil)
}

// UnsetCreatedTimeMsecs ensures that no value is present for CreatedTimeMsecs, not even an explicit nil
func (o *FlashBladeFileSystem) UnsetCreatedTimeMsecs() {
	o.CreatedTimeMsecs.Unset()
}

// GetLogicalCapacityBytes returns the LogicalCapacityBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FlashBladeFileSystem) GetLogicalCapacityBytes() int64 {
	if o == nil || o.LogicalCapacityBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LogicalCapacityBytes.Get()
}

// GetLogicalCapacityBytesOk returns a tuple with the LogicalCapacityBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FlashBladeFileSystem) GetLogicalCapacityBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogicalCapacityBytes.Get(), o.LogicalCapacityBytes.IsSet()
}

// HasLogicalCapacityBytes returns a boolean if a field has been set.
func (o *FlashBladeFileSystem) HasLogicalCapacityBytes() bool {
	if o != nil && o.LogicalCapacityBytes.IsSet() {
		return true
	}

	return false
}

// SetLogicalCapacityBytes gets a reference to the given NullableInt64 and assigns it to the LogicalCapacityBytes field.
func (o *FlashBladeFileSystem) SetLogicalCapacityBytes(v int64) {
	o.LogicalCapacityBytes.Set(&v)
}
// SetLogicalCapacityBytesNil sets the value for LogicalCapacityBytes to be an explicit nil
func (o *FlashBladeFileSystem) SetLogicalCapacityBytesNil() {
	o.LogicalCapacityBytes.Set(nil)
}

// UnsetLogicalCapacityBytes ensures that no value is present for LogicalCapacityBytes, not even an explicit nil
func (o *FlashBladeFileSystem) UnsetLogicalCapacityBytes() {
	o.LogicalCapacityBytes.Unset()
}

// GetLogicalUsedBytes returns the LogicalUsedBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FlashBladeFileSystem) GetLogicalUsedBytes() int64 {
	if o == nil || o.LogicalUsedBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LogicalUsedBytes.Get()
}

// GetLogicalUsedBytesOk returns a tuple with the LogicalUsedBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FlashBladeFileSystem) GetLogicalUsedBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogicalUsedBytes.Get(), o.LogicalUsedBytes.IsSet()
}

// HasLogicalUsedBytes returns a boolean if a field has been set.
func (o *FlashBladeFileSystem) HasLogicalUsedBytes() bool {
	if o != nil && o.LogicalUsedBytes.IsSet() {
		return true
	}

	return false
}

// SetLogicalUsedBytes gets a reference to the given NullableInt64 and assigns it to the LogicalUsedBytes field.
func (o *FlashBladeFileSystem) SetLogicalUsedBytes(v int64) {
	o.LogicalUsedBytes.Set(&v)
}
// SetLogicalUsedBytesNil sets the value for LogicalUsedBytes to be an explicit nil
func (o *FlashBladeFileSystem) SetLogicalUsedBytesNil() {
	o.LogicalUsedBytes.Set(nil)
}

// UnsetLogicalUsedBytes ensures that no value is present for LogicalUsedBytes, not even an explicit nil
func (o *FlashBladeFileSystem) UnsetLogicalUsedBytes() {
	o.LogicalUsedBytes.Unset()
}

// GetNfsInfo returns the NfsInfo field value if set, zero value otherwise.
func (o *FlashBladeFileSystem) GetNfsInfo() FlashBladeNfsInfo {
	if o == nil || o.NfsInfo == nil {
		var ret FlashBladeNfsInfo
		return ret
	}
	return *o.NfsInfo
}

// GetNfsInfoOk returns a tuple with the NfsInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlashBladeFileSystem) GetNfsInfoOk() (*FlashBladeNfsInfo, bool) {
	if o == nil || o.NfsInfo == nil {
		return nil, false
	}
	return o.NfsInfo, true
}

// HasNfsInfo returns a boolean if a field has been set.
func (o *FlashBladeFileSystem) HasNfsInfo() bool {
	if o != nil && o.NfsInfo != nil {
		return true
	}

	return false
}

// SetNfsInfo gets a reference to the given FlashBladeNfsInfo and assigns it to the NfsInfo field.
func (o *FlashBladeFileSystem) SetNfsInfo(v FlashBladeNfsInfo) {
	o.NfsInfo = &v
}

// GetPhysicalUsedBytes returns the PhysicalUsedBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FlashBladeFileSystem) GetPhysicalUsedBytes() int64 {
	if o == nil || o.PhysicalUsedBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.PhysicalUsedBytes.Get()
}

// GetPhysicalUsedBytesOk returns a tuple with the PhysicalUsedBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FlashBladeFileSystem) GetPhysicalUsedBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PhysicalUsedBytes.Get(), o.PhysicalUsedBytes.IsSet()
}

// HasPhysicalUsedBytes returns a boolean if a field has been set.
func (o *FlashBladeFileSystem) HasPhysicalUsedBytes() bool {
	if o != nil && o.PhysicalUsedBytes.IsSet() {
		return true
	}

	return false
}

// SetPhysicalUsedBytes gets a reference to the given NullableInt64 and assigns it to the PhysicalUsedBytes field.
func (o *FlashBladeFileSystem) SetPhysicalUsedBytes(v int64) {
	o.PhysicalUsedBytes.Set(&v)
}
// SetPhysicalUsedBytesNil sets the value for PhysicalUsedBytes to be an explicit nil
func (o *FlashBladeFileSystem) SetPhysicalUsedBytesNil() {
	o.PhysicalUsedBytes.Set(nil)
}

// UnsetPhysicalUsedBytes ensures that no value is present for PhysicalUsedBytes, not even an explicit nil
func (o *FlashBladeFileSystem) UnsetPhysicalUsedBytes() {
	o.PhysicalUsedBytes.Unset()
}

// GetProtocols returns the Protocols field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FlashBladeFileSystem) GetProtocols() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Protocols
}

// GetProtocolsOk returns a tuple with the Protocols field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FlashBladeFileSystem) GetProtocolsOk() (*[]string, bool) {
	if o == nil || o.Protocols == nil {
		return nil, false
	}
	return &o.Protocols, true
}

// HasProtocols returns a boolean if a field has been set.
func (o *FlashBladeFileSystem) HasProtocols() bool {
	if o != nil && o.Protocols != nil {
		return true
	}

	return false
}

// SetProtocols gets a reference to the given []string and assigns it to the Protocols field.
func (o *FlashBladeFileSystem) SetProtocols(v []string) {
	o.Protocols = v
}

// GetUniqueUsedBytes returns the UniqueUsedBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FlashBladeFileSystem) GetUniqueUsedBytes() int64 {
	if o == nil || o.UniqueUsedBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.UniqueUsedBytes.Get()
}

// GetUniqueUsedBytesOk returns a tuple with the UniqueUsedBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FlashBladeFileSystem) GetUniqueUsedBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UniqueUsedBytes.Get(), o.UniqueUsedBytes.IsSet()
}

// HasUniqueUsedBytes returns a boolean if a field has been set.
func (o *FlashBladeFileSystem) HasUniqueUsedBytes() bool {
	if o != nil && o.UniqueUsedBytes.IsSet() {
		return true
	}

	return false
}

// SetUniqueUsedBytes gets a reference to the given NullableInt64 and assigns it to the UniqueUsedBytes field.
func (o *FlashBladeFileSystem) SetUniqueUsedBytes(v int64) {
	o.UniqueUsedBytes.Set(&v)
}
// SetUniqueUsedBytesNil sets the value for UniqueUsedBytes to be an explicit nil
func (o *FlashBladeFileSystem) SetUniqueUsedBytesNil() {
	o.UniqueUsedBytes.Set(nil)
}

// UnsetUniqueUsedBytes ensures that no value is present for UniqueUsedBytes, not even an explicit nil
func (o *FlashBladeFileSystem) UnsetUniqueUsedBytes() {
	o.UniqueUsedBytes.Unset()
}

func (o FlashBladeFileSystem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BackupEnabled.IsSet() {
		toSerialize["backupEnabled"] = o.BackupEnabled.Get()
	}
	if o.CreatedTimeMsecs.IsSet() {
		toSerialize["createdTimeMsecs"] = o.CreatedTimeMsecs.Get()
	}
	if o.LogicalCapacityBytes.IsSet() {
		toSerialize["logicalCapacityBytes"] = o.LogicalCapacityBytes.Get()
	}
	if o.LogicalUsedBytes.IsSet() {
		toSerialize["logicalUsedBytes"] = o.LogicalUsedBytes.Get()
	}
	if o.NfsInfo != nil {
		toSerialize["nfsInfo"] = o.NfsInfo
	}
	if o.PhysicalUsedBytes.IsSet() {
		toSerialize["physicalUsedBytes"] = o.PhysicalUsedBytes.Get()
	}
	if o.Protocols != nil {
		toSerialize["protocols"] = o.Protocols
	}
	if o.UniqueUsedBytes.IsSet() {
		toSerialize["uniqueUsedBytes"] = o.UniqueUsedBytes.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableFlashBladeFileSystem struct {
	value *FlashBladeFileSystem
	isSet bool
}

func (v NullableFlashBladeFileSystem) Get() *FlashBladeFileSystem {
	return v.value
}

func (v *NullableFlashBladeFileSystem) Set(val *FlashBladeFileSystem) {
	v.value = val
	v.isSet = true
}

func (v NullableFlashBladeFileSystem) IsSet() bool {
	return v.isSet
}

func (v *NullableFlashBladeFileSystem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlashBladeFileSystem(val *FlashBladeFileSystem) *NullableFlashBladeFileSystem {
	return &NullableFlashBladeFileSystem{value: val, isSet: true}
}

func (v NullableFlashBladeFileSystem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlashBladeFileSystem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


