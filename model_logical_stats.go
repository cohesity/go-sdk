/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// LogicalStats Provides logical statistics for logical entities such as Clusters and Domains (View Boxes). The logical size is the size of the data when it is fully hydrated or expanded. The actual physical data stored on the Cohesity Cluster is reduced by change-block tracking, compression and deduplication.
type LogicalStats struct {
	// Provides the combined data residing on protected objects. The size of data before reduction by deduplication and compression.
	TotalLogicalUsageBytes NullableInt64 `json:"totalLogicalUsageBytes,omitempty"`
}

// NewLogicalStats instantiates a new LogicalStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogicalStats() *LogicalStats {
	this := LogicalStats{}
	return &this
}

// NewLogicalStatsWithDefaults instantiates a new LogicalStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogicalStatsWithDefaults() *LogicalStats {
	this := LogicalStats{}
	return &this
}

// GetTotalLogicalUsageBytes returns the TotalLogicalUsageBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LogicalStats) GetTotalLogicalUsageBytes() int64 {
	if o == nil || o.TotalLogicalUsageBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TotalLogicalUsageBytes.Get()
}

// GetTotalLogicalUsageBytesOk returns a tuple with the TotalLogicalUsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LogicalStats) GetTotalLogicalUsageBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TotalLogicalUsageBytes.Get(), o.TotalLogicalUsageBytes.IsSet()
}

// HasTotalLogicalUsageBytes returns a boolean if a field has been set.
func (o *LogicalStats) HasTotalLogicalUsageBytes() bool {
	if o != nil && o.TotalLogicalUsageBytes.IsSet() {
		return true
	}

	return false
}

// SetTotalLogicalUsageBytes gets a reference to the given NullableInt64 and assigns it to the TotalLogicalUsageBytes field.
func (o *LogicalStats) SetTotalLogicalUsageBytes(v int64) {
	o.TotalLogicalUsageBytes.Set(&v)
}
// SetTotalLogicalUsageBytesNil sets the value for TotalLogicalUsageBytes to be an explicit nil
func (o *LogicalStats) SetTotalLogicalUsageBytesNil() {
	o.TotalLogicalUsageBytes.Set(nil)
}

// UnsetTotalLogicalUsageBytes ensures that no value is present for TotalLogicalUsageBytes, not even an explicit nil
func (o *LogicalStats) UnsetTotalLogicalUsageBytes() {
	o.TotalLogicalUsageBytes.Unset()
}

func (o LogicalStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TotalLogicalUsageBytes.IsSet() {
		toSerialize["totalLogicalUsageBytes"] = o.TotalLogicalUsageBytes.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableLogicalStats struct {
	value *LogicalStats
	isSet bool
}

func (v NullableLogicalStats) Get() *LogicalStats {
	return v.value
}

func (v *NullableLogicalStats) Set(val *LogicalStats) {
	v.value = val
	v.isSet = true
}

func (v NullableLogicalStats) IsSet() bool {
	return v.isSet
}

func (v *NullableLogicalStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogicalStats(val *LogicalStats) *NullableLogicalStats {
	return &NullableLogicalStats{value: val, isSet: true}
}

func (v NullableLogicalStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogicalStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


