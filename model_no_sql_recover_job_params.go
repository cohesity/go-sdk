/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// NoSqlRecoverJobParams struct for NoSqlRecoverJobParams
type NoSqlRecoverJobParams struct {
	// Net bandwidth bytes per second
	BandwidthBytesPerSecond NullableInt64 `json:"bandwidthBytesPerSecond,omitempty"`
	CassandraRecoverJobParams *CassandraRecoverJobParams `json:"cassandraRecoverJobParams,omitempty"`
	// Max number of mappers
	Concurrency NullableInt32 `json:"concurrency,omitempty"`
	CouchbaseRecoverJobParams *CouchbaseRecoverJobParams `json:"couchbaseRecoverJobParams,omitempty"`
	HbaseRecoverJobParams *HBaseRecoverJobParams `json:"hbaseRecoverJobParams,omitempty"`
	HdfsRecoverJobParams *HdfsRecoverJobParams `json:"hdfsRecoverJobParams,omitempty"`
	HiveRecoverJobParams *HiveRecoverJobParams `json:"hiveRecoverJobParams,omitempty"`
	MongodbRecoverJobParams *MongoDBRecoverJobParams `json:"mongodbRecoverJobParams,omitempty"`
	// Whether to overwrite or keep the object if the object being recovered already exists in the destination.
	Overwrite NullableBool `json:"overwrite,omitempty"`
}

// NewNoSqlRecoverJobParams instantiates a new NoSqlRecoverJobParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNoSqlRecoverJobParams() *NoSqlRecoverJobParams {
	this := NoSqlRecoverJobParams{}
	return &this
}

// NewNoSqlRecoverJobParamsWithDefaults instantiates a new NoSqlRecoverJobParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNoSqlRecoverJobParamsWithDefaults() *NoSqlRecoverJobParams {
	this := NoSqlRecoverJobParams{}
	return &this
}

// GetBandwidthBytesPerSecond returns the BandwidthBytesPerSecond field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NoSqlRecoverJobParams) GetBandwidthBytesPerSecond() int64 {
	if o == nil || o.BandwidthBytesPerSecond.Get() == nil {
		var ret int64
		return ret
	}
	return *o.BandwidthBytesPerSecond.Get()
}

// GetBandwidthBytesPerSecondOk returns a tuple with the BandwidthBytesPerSecond field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NoSqlRecoverJobParams) GetBandwidthBytesPerSecondOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BandwidthBytesPerSecond.Get(), o.BandwidthBytesPerSecond.IsSet()
}

// HasBandwidthBytesPerSecond returns a boolean if a field has been set.
func (o *NoSqlRecoverJobParams) HasBandwidthBytesPerSecond() bool {
	if o != nil && o.BandwidthBytesPerSecond.IsSet() {
		return true
	}

	return false
}

// SetBandwidthBytesPerSecond gets a reference to the given NullableInt64 and assigns it to the BandwidthBytesPerSecond field.
func (o *NoSqlRecoverJobParams) SetBandwidthBytesPerSecond(v int64) {
	o.BandwidthBytesPerSecond.Set(&v)
}
// SetBandwidthBytesPerSecondNil sets the value for BandwidthBytesPerSecond to be an explicit nil
func (o *NoSqlRecoverJobParams) SetBandwidthBytesPerSecondNil() {
	o.BandwidthBytesPerSecond.Set(nil)
}

// UnsetBandwidthBytesPerSecond ensures that no value is present for BandwidthBytesPerSecond, not even an explicit nil
func (o *NoSqlRecoverJobParams) UnsetBandwidthBytesPerSecond() {
	o.BandwidthBytesPerSecond.Unset()
}

// GetCassandraRecoverJobParams returns the CassandraRecoverJobParams field value if set, zero value otherwise.
func (o *NoSqlRecoverJobParams) GetCassandraRecoverJobParams() CassandraRecoverJobParams {
	if o == nil || o.CassandraRecoverJobParams == nil {
		var ret CassandraRecoverJobParams
		return ret
	}
	return *o.CassandraRecoverJobParams
}

// GetCassandraRecoverJobParamsOk returns a tuple with the CassandraRecoverJobParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoSqlRecoverJobParams) GetCassandraRecoverJobParamsOk() (*CassandraRecoverJobParams, bool) {
	if o == nil || o.CassandraRecoverJobParams == nil {
		return nil, false
	}
	return o.CassandraRecoverJobParams, true
}

// HasCassandraRecoverJobParams returns a boolean if a field has been set.
func (o *NoSqlRecoverJobParams) HasCassandraRecoverJobParams() bool {
	if o != nil && o.CassandraRecoverJobParams != nil {
		return true
	}

	return false
}

// SetCassandraRecoverJobParams gets a reference to the given CassandraRecoverJobParams and assigns it to the CassandraRecoverJobParams field.
func (o *NoSqlRecoverJobParams) SetCassandraRecoverJobParams(v CassandraRecoverJobParams) {
	o.CassandraRecoverJobParams = &v
}

// GetConcurrency returns the Concurrency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NoSqlRecoverJobParams) GetConcurrency() int32 {
	if o == nil || o.Concurrency.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Concurrency.Get()
}

// GetConcurrencyOk returns a tuple with the Concurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NoSqlRecoverJobParams) GetConcurrencyOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Concurrency.Get(), o.Concurrency.IsSet()
}

// HasConcurrency returns a boolean if a field has been set.
func (o *NoSqlRecoverJobParams) HasConcurrency() bool {
	if o != nil && o.Concurrency.IsSet() {
		return true
	}

	return false
}

// SetConcurrency gets a reference to the given NullableInt32 and assigns it to the Concurrency field.
func (o *NoSqlRecoverJobParams) SetConcurrency(v int32) {
	o.Concurrency.Set(&v)
}
// SetConcurrencyNil sets the value for Concurrency to be an explicit nil
func (o *NoSqlRecoverJobParams) SetConcurrencyNil() {
	o.Concurrency.Set(nil)
}

// UnsetConcurrency ensures that no value is present for Concurrency, not even an explicit nil
func (o *NoSqlRecoverJobParams) UnsetConcurrency() {
	o.Concurrency.Unset()
}

// GetCouchbaseRecoverJobParams returns the CouchbaseRecoverJobParams field value if set, zero value otherwise.
func (o *NoSqlRecoverJobParams) GetCouchbaseRecoverJobParams() CouchbaseRecoverJobParams {
	if o == nil || o.CouchbaseRecoverJobParams == nil {
		var ret CouchbaseRecoverJobParams
		return ret
	}
	return *o.CouchbaseRecoverJobParams
}

// GetCouchbaseRecoverJobParamsOk returns a tuple with the CouchbaseRecoverJobParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoSqlRecoverJobParams) GetCouchbaseRecoverJobParamsOk() (*CouchbaseRecoverJobParams, bool) {
	if o == nil || o.CouchbaseRecoverJobParams == nil {
		return nil, false
	}
	return o.CouchbaseRecoverJobParams, true
}

// HasCouchbaseRecoverJobParams returns a boolean if a field has been set.
func (o *NoSqlRecoverJobParams) HasCouchbaseRecoverJobParams() bool {
	if o != nil && o.CouchbaseRecoverJobParams != nil {
		return true
	}

	return false
}

// SetCouchbaseRecoverJobParams gets a reference to the given CouchbaseRecoverJobParams and assigns it to the CouchbaseRecoverJobParams field.
func (o *NoSqlRecoverJobParams) SetCouchbaseRecoverJobParams(v CouchbaseRecoverJobParams) {
	o.CouchbaseRecoverJobParams = &v
}

// GetHbaseRecoverJobParams returns the HbaseRecoverJobParams field value if set, zero value otherwise.
func (o *NoSqlRecoverJobParams) GetHbaseRecoverJobParams() HBaseRecoverJobParams {
	if o == nil || o.HbaseRecoverJobParams == nil {
		var ret HBaseRecoverJobParams
		return ret
	}
	return *o.HbaseRecoverJobParams
}

// GetHbaseRecoverJobParamsOk returns a tuple with the HbaseRecoverJobParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoSqlRecoverJobParams) GetHbaseRecoverJobParamsOk() (*HBaseRecoverJobParams, bool) {
	if o == nil || o.HbaseRecoverJobParams == nil {
		return nil, false
	}
	return o.HbaseRecoverJobParams, true
}

// HasHbaseRecoverJobParams returns a boolean if a field has been set.
func (o *NoSqlRecoverJobParams) HasHbaseRecoverJobParams() bool {
	if o != nil && o.HbaseRecoverJobParams != nil {
		return true
	}

	return false
}

// SetHbaseRecoverJobParams gets a reference to the given HBaseRecoverJobParams and assigns it to the HbaseRecoverJobParams field.
func (o *NoSqlRecoverJobParams) SetHbaseRecoverJobParams(v HBaseRecoverJobParams) {
	o.HbaseRecoverJobParams = &v
}

// GetHdfsRecoverJobParams returns the HdfsRecoverJobParams field value if set, zero value otherwise.
func (o *NoSqlRecoverJobParams) GetHdfsRecoverJobParams() HdfsRecoverJobParams {
	if o == nil || o.HdfsRecoverJobParams == nil {
		var ret HdfsRecoverJobParams
		return ret
	}
	return *o.HdfsRecoverJobParams
}

// GetHdfsRecoverJobParamsOk returns a tuple with the HdfsRecoverJobParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoSqlRecoverJobParams) GetHdfsRecoverJobParamsOk() (*HdfsRecoverJobParams, bool) {
	if o == nil || o.HdfsRecoverJobParams == nil {
		return nil, false
	}
	return o.HdfsRecoverJobParams, true
}

// HasHdfsRecoverJobParams returns a boolean if a field has been set.
func (o *NoSqlRecoverJobParams) HasHdfsRecoverJobParams() bool {
	if o != nil && o.HdfsRecoverJobParams != nil {
		return true
	}

	return false
}

// SetHdfsRecoverJobParams gets a reference to the given HdfsRecoverJobParams and assigns it to the HdfsRecoverJobParams field.
func (o *NoSqlRecoverJobParams) SetHdfsRecoverJobParams(v HdfsRecoverJobParams) {
	o.HdfsRecoverJobParams = &v
}

// GetHiveRecoverJobParams returns the HiveRecoverJobParams field value if set, zero value otherwise.
func (o *NoSqlRecoverJobParams) GetHiveRecoverJobParams() HiveRecoverJobParams {
	if o == nil || o.HiveRecoverJobParams == nil {
		var ret HiveRecoverJobParams
		return ret
	}
	return *o.HiveRecoverJobParams
}

// GetHiveRecoverJobParamsOk returns a tuple with the HiveRecoverJobParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoSqlRecoverJobParams) GetHiveRecoverJobParamsOk() (*HiveRecoverJobParams, bool) {
	if o == nil || o.HiveRecoverJobParams == nil {
		return nil, false
	}
	return o.HiveRecoverJobParams, true
}

// HasHiveRecoverJobParams returns a boolean if a field has been set.
func (o *NoSqlRecoverJobParams) HasHiveRecoverJobParams() bool {
	if o != nil && o.HiveRecoverJobParams != nil {
		return true
	}

	return false
}

// SetHiveRecoverJobParams gets a reference to the given HiveRecoverJobParams and assigns it to the HiveRecoverJobParams field.
func (o *NoSqlRecoverJobParams) SetHiveRecoverJobParams(v HiveRecoverJobParams) {
	o.HiveRecoverJobParams = &v
}

// GetMongodbRecoverJobParams returns the MongodbRecoverJobParams field value if set, zero value otherwise.
func (o *NoSqlRecoverJobParams) GetMongodbRecoverJobParams() MongoDBRecoverJobParams {
	if o == nil || o.MongodbRecoverJobParams == nil {
		var ret MongoDBRecoverJobParams
		return ret
	}
	return *o.MongodbRecoverJobParams
}

// GetMongodbRecoverJobParamsOk returns a tuple with the MongodbRecoverJobParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoSqlRecoverJobParams) GetMongodbRecoverJobParamsOk() (*MongoDBRecoverJobParams, bool) {
	if o == nil || o.MongodbRecoverJobParams == nil {
		return nil, false
	}
	return o.MongodbRecoverJobParams, true
}

// HasMongodbRecoverJobParams returns a boolean if a field has been set.
func (o *NoSqlRecoverJobParams) HasMongodbRecoverJobParams() bool {
	if o != nil && o.MongodbRecoverJobParams != nil {
		return true
	}

	return false
}

// SetMongodbRecoverJobParams gets a reference to the given MongoDBRecoverJobParams and assigns it to the MongodbRecoverJobParams field.
func (o *NoSqlRecoverJobParams) SetMongodbRecoverJobParams(v MongoDBRecoverJobParams) {
	o.MongodbRecoverJobParams = &v
}

// GetOverwrite returns the Overwrite field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NoSqlRecoverJobParams) GetOverwrite() bool {
	if o == nil || o.Overwrite.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Overwrite.Get()
}

// GetOverwriteOk returns a tuple with the Overwrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NoSqlRecoverJobParams) GetOverwriteOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Overwrite.Get(), o.Overwrite.IsSet()
}

// HasOverwrite returns a boolean if a field has been set.
func (o *NoSqlRecoverJobParams) HasOverwrite() bool {
	if o != nil && o.Overwrite.IsSet() {
		return true
	}

	return false
}

// SetOverwrite gets a reference to the given NullableBool and assigns it to the Overwrite field.
func (o *NoSqlRecoverJobParams) SetOverwrite(v bool) {
	o.Overwrite.Set(&v)
}
// SetOverwriteNil sets the value for Overwrite to be an explicit nil
func (o *NoSqlRecoverJobParams) SetOverwriteNil() {
	o.Overwrite.Set(nil)
}

// UnsetOverwrite ensures that no value is present for Overwrite, not even an explicit nil
func (o *NoSqlRecoverJobParams) UnsetOverwrite() {
	o.Overwrite.Unset()
}

func (o NoSqlRecoverJobParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BandwidthBytesPerSecond.IsSet() {
		toSerialize["bandwidthBytesPerSecond"] = o.BandwidthBytesPerSecond.Get()
	}
	if o.CassandraRecoverJobParams != nil {
		toSerialize["cassandraRecoverJobParams"] = o.CassandraRecoverJobParams
	}
	if o.Concurrency.IsSet() {
		toSerialize["concurrency"] = o.Concurrency.Get()
	}
	if o.CouchbaseRecoverJobParams != nil {
		toSerialize["couchbaseRecoverJobParams"] = o.CouchbaseRecoverJobParams
	}
	if o.HbaseRecoverJobParams != nil {
		toSerialize["hbaseRecoverJobParams"] = o.HbaseRecoverJobParams
	}
	if o.HdfsRecoverJobParams != nil {
		toSerialize["hdfsRecoverJobParams"] = o.HdfsRecoverJobParams
	}
	if o.HiveRecoverJobParams != nil {
		toSerialize["hiveRecoverJobParams"] = o.HiveRecoverJobParams
	}
	if o.MongodbRecoverJobParams != nil {
		toSerialize["mongodbRecoverJobParams"] = o.MongodbRecoverJobParams
	}
	if o.Overwrite.IsSet() {
		toSerialize["overwrite"] = o.Overwrite.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableNoSqlRecoverJobParams struct {
	value *NoSqlRecoverJobParams
	isSet bool
}

func (v NullableNoSqlRecoverJobParams) Get() *NoSqlRecoverJobParams {
	return v.value
}

func (v *NullableNoSqlRecoverJobParams) Set(val *NoSqlRecoverJobParams) {
	v.value = val
	v.isSet = true
}

func (v NullableNoSqlRecoverJobParams) IsSet() bool {
	return v.isSet
}

func (v *NullableNoSqlRecoverJobParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNoSqlRecoverJobParams(val *NoSqlRecoverJobParams) *NullableNoSqlRecoverJobParams {
	return &NullableNoSqlRecoverJobParams{value: val, isSet: true}
}

func (v NullableNoSqlRecoverJobParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNoSqlRecoverJobParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


