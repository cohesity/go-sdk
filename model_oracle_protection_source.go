/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// OracleProtectionSource Specifies an Object representing one Oracle database.
type OracleProtectionSource struct {
	// Specifies whether the database is running in ARCHIVELOG mode. It enables the redo of log files into archived redo log files.
	ArchiveLogEnabled NullableBool `json:"archiveLogEnabled,omitempty"`
	// Specifies whether the Block Change Tracking is enabled. BCT improves the performance of incremental backups by recording changed blocks into the block change tracking file. RMAN then uses this file to identify changed blocks to be backed up.
	BctEnabled NullableBool `json:"bctEnabled,omitempty"`
	ContainerDatabaseInfo *OracleContainerDatabaseInfo `json:"containerDatabaseInfo,omitempty"`
	DataGuardInfo *OracleDataGuardInfo `json:"dataGuardInfo,omitempty"`
	// Specifies the unique name of the Oracle entity.
	DatabaseUniqueName NullableString `json:"databaseUniqueName,omitempty"`
	// Specifies the type of the database in Oracle Protection Source. 'kRACDatabase' indicates the database is a RAC DB. 'kSingleInstance' indicates that the database is single instance.
	DbType NullableString `json:"dbType,omitempty"`
	// Specifies the Oracle DB Domain.
	Domain NullableString `json:"domain,omitempty"`
	// Specifies Flash/Fast Recovery area size for the current DB entity.
	FraSize NullableInt64 `json:"fraSize,omitempty"`
	// Specifies the list of hosts for the current DB entity.
	Hosts []OracleHost `json:"hosts,omitempty"`
	// Specifies the instance name of the Oracle entity.
	Name NullableString `json:"name,omitempty"`
	// Specifies the entity id of the owner entity (such as a VM). This is only set if type is kDatabase.
	OwnerId NullableInt64 `json:"ownerId,omitempty"`
	// Specifies System Global Area size for the current DB entity. A system global area (SGA) is a group of shared memory structures that contain data and control information for one Oracle database.
	SgaTargetSize NullableString `json:"sgaTargetSize,omitempty"`
	// Specifies Shared Pool Size for the current DB entity.
	SharedPoolSize NullableString `json:"sharedPoolSize,omitempty"`
	// Specifies database size.
	Size NullableInt64 `json:"size,omitempty"`
	// Specifies the number of TDE encrypted tablespaces found in the database.
	TdeEncryptedTsCount NullableInt64 `json:"tdeEncryptedTsCount,omitempty"`
	// Specifies number of temporary files for the current DB entity.
	TempFilesCount NullableInt64 `json:"tempFilesCount,omitempty"`
	// Specifies the type of the managed Object in Oracle Protection Source. 'kRACRootContainer' indicates the entity is a root container to an Oracle Real Application clusters(Oracle RAC). 'kRootContainer' indicates the entity is a root container to an Oracle standalone server. 'kHost' indicates the entity is an Oracle host. 'kDatabase' indicates the entity is an Oracle Database. 'kTableSpace' indicates the entity is an Oracle table space. 'kTable' indicates the entity is an Oracle table.
	Type NullableString `json:"type,omitempty"`
	// Specifies the UUID for the Oracle entity.
	Uuid NullableString `json:"uuid,omitempty"`
	// Specifies the Oracle database instance version.
	Version NullableString `json:"version,omitempty"`
}

// NewOracleProtectionSource instantiates a new OracleProtectionSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleProtectionSource() *OracleProtectionSource {
	this := OracleProtectionSource{}
	return &this
}

// NewOracleProtectionSourceWithDefaults instantiates a new OracleProtectionSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleProtectionSourceWithDefaults() *OracleProtectionSource {
	this := OracleProtectionSource{}
	return &this
}

// GetArchiveLogEnabled returns the ArchiveLogEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleProtectionSource) GetArchiveLogEnabled() bool {
	if o == nil || o.ArchiveLogEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ArchiveLogEnabled.Get()
}

// GetArchiveLogEnabledOk returns a tuple with the ArchiveLogEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleProtectionSource) GetArchiveLogEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ArchiveLogEnabled.Get(), o.ArchiveLogEnabled.IsSet()
}

// HasArchiveLogEnabled returns a boolean if a field has been set.
func (o *OracleProtectionSource) HasArchiveLogEnabled() bool {
	if o != nil && o.ArchiveLogEnabled.IsSet() {
		return true
	}

	return false
}

// SetArchiveLogEnabled gets a reference to the given NullableBool and assigns it to the ArchiveLogEnabled field.
func (o *OracleProtectionSource) SetArchiveLogEnabled(v bool) {
	o.ArchiveLogEnabled.Set(&v)
}
// SetArchiveLogEnabledNil sets the value for ArchiveLogEnabled to be an explicit nil
func (o *OracleProtectionSource) SetArchiveLogEnabledNil() {
	o.ArchiveLogEnabled.Set(nil)
}

// UnsetArchiveLogEnabled ensures that no value is present for ArchiveLogEnabled, not even an explicit nil
func (o *OracleProtectionSource) UnsetArchiveLogEnabled() {
	o.ArchiveLogEnabled.Unset()
}

// GetBctEnabled returns the BctEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleProtectionSource) GetBctEnabled() bool {
	if o == nil || o.BctEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.BctEnabled.Get()
}

// GetBctEnabledOk returns a tuple with the BctEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleProtectionSource) GetBctEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BctEnabled.Get(), o.BctEnabled.IsSet()
}

// HasBctEnabled returns a boolean if a field has been set.
func (o *OracleProtectionSource) HasBctEnabled() bool {
	if o != nil && o.BctEnabled.IsSet() {
		return true
	}

	return false
}

// SetBctEnabled gets a reference to the given NullableBool and assigns it to the BctEnabled field.
func (o *OracleProtectionSource) SetBctEnabled(v bool) {
	o.BctEnabled.Set(&v)
}
// SetBctEnabledNil sets the value for BctEnabled to be an explicit nil
func (o *OracleProtectionSource) SetBctEnabledNil() {
	o.BctEnabled.Set(nil)
}

// UnsetBctEnabled ensures that no value is present for BctEnabled, not even an explicit nil
func (o *OracleProtectionSource) UnsetBctEnabled() {
	o.BctEnabled.Unset()
}

// GetContainerDatabaseInfo returns the ContainerDatabaseInfo field value if set, zero value otherwise.
func (o *OracleProtectionSource) GetContainerDatabaseInfo() OracleContainerDatabaseInfo {
	if o == nil || o.ContainerDatabaseInfo == nil {
		var ret OracleContainerDatabaseInfo
		return ret
	}
	return *o.ContainerDatabaseInfo
}

// GetContainerDatabaseInfoOk returns a tuple with the ContainerDatabaseInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleProtectionSource) GetContainerDatabaseInfoOk() (*OracleContainerDatabaseInfo, bool) {
	if o == nil || o.ContainerDatabaseInfo == nil {
		return nil, false
	}
	return o.ContainerDatabaseInfo, true
}

// HasContainerDatabaseInfo returns a boolean if a field has been set.
func (o *OracleProtectionSource) HasContainerDatabaseInfo() bool {
	if o != nil && o.ContainerDatabaseInfo != nil {
		return true
	}

	return false
}

// SetContainerDatabaseInfo gets a reference to the given OracleContainerDatabaseInfo and assigns it to the ContainerDatabaseInfo field.
func (o *OracleProtectionSource) SetContainerDatabaseInfo(v OracleContainerDatabaseInfo) {
	o.ContainerDatabaseInfo = &v
}

// GetDataGuardInfo returns the DataGuardInfo field value if set, zero value otherwise.
func (o *OracleProtectionSource) GetDataGuardInfo() OracleDataGuardInfo {
	if o == nil || o.DataGuardInfo == nil {
		var ret OracleDataGuardInfo
		return ret
	}
	return *o.DataGuardInfo
}

// GetDataGuardInfoOk returns a tuple with the DataGuardInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleProtectionSource) GetDataGuardInfoOk() (*OracleDataGuardInfo, bool) {
	if o == nil || o.DataGuardInfo == nil {
		return nil, false
	}
	return o.DataGuardInfo, true
}

// HasDataGuardInfo returns a boolean if a field has been set.
func (o *OracleProtectionSource) HasDataGuardInfo() bool {
	if o != nil && o.DataGuardInfo != nil {
		return true
	}

	return false
}

// SetDataGuardInfo gets a reference to the given OracleDataGuardInfo and assigns it to the DataGuardInfo field.
func (o *OracleProtectionSource) SetDataGuardInfo(v OracleDataGuardInfo) {
	o.DataGuardInfo = &v
}

// GetDatabaseUniqueName returns the DatabaseUniqueName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleProtectionSource) GetDatabaseUniqueName() string {
	if o == nil || o.DatabaseUniqueName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DatabaseUniqueName.Get()
}

// GetDatabaseUniqueNameOk returns a tuple with the DatabaseUniqueName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleProtectionSource) GetDatabaseUniqueNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DatabaseUniqueName.Get(), o.DatabaseUniqueName.IsSet()
}

// HasDatabaseUniqueName returns a boolean if a field has been set.
func (o *OracleProtectionSource) HasDatabaseUniqueName() bool {
	if o != nil && o.DatabaseUniqueName.IsSet() {
		return true
	}

	return false
}

// SetDatabaseUniqueName gets a reference to the given NullableString and assigns it to the DatabaseUniqueName field.
func (o *OracleProtectionSource) SetDatabaseUniqueName(v string) {
	o.DatabaseUniqueName.Set(&v)
}
// SetDatabaseUniqueNameNil sets the value for DatabaseUniqueName to be an explicit nil
func (o *OracleProtectionSource) SetDatabaseUniqueNameNil() {
	o.DatabaseUniqueName.Set(nil)
}

// UnsetDatabaseUniqueName ensures that no value is present for DatabaseUniqueName, not even an explicit nil
func (o *OracleProtectionSource) UnsetDatabaseUniqueName() {
	o.DatabaseUniqueName.Unset()
}

// GetDbType returns the DbType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleProtectionSource) GetDbType() string {
	if o == nil || o.DbType.Get() == nil {
		var ret string
		return ret
	}
	return *o.DbType.Get()
}

// GetDbTypeOk returns a tuple with the DbType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleProtectionSource) GetDbTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DbType.Get(), o.DbType.IsSet()
}

// HasDbType returns a boolean if a field has been set.
func (o *OracleProtectionSource) HasDbType() bool {
	if o != nil && o.DbType.IsSet() {
		return true
	}

	return false
}

// SetDbType gets a reference to the given NullableString and assigns it to the DbType field.
func (o *OracleProtectionSource) SetDbType(v string) {
	o.DbType.Set(&v)
}
// SetDbTypeNil sets the value for DbType to be an explicit nil
func (o *OracleProtectionSource) SetDbTypeNil() {
	o.DbType.Set(nil)
}

// UnsetDbType ensures that no value is present for DbType, not even an explicit nil
func (o *OracleProtectionSource) UnsetDbType() {
	o.DbType.Unset()
}

// GetDomain returns the Domain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleProtectionSource) GetDomain() string {
	if o == nil || o.Domain.Get() == nil {
		var ret string
		return ret
	}
	return *o.Domain.Get()
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleProtectionSource) GetDomainOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Domain.Get(), o.Domain.IsSet()
}

// HasDomain returns a boolean if a field has been set.
func (o *OracleProtectionSource) HasDomain() bool {
	if o != nil && o.Domain.IsSet() {
		return true
	}

	return false
}

// SetDomain gets a reference to the given NullableString and assigns it to the Domain field.
func (o *OracleProtectionSource) SetDomain(v string) {
	o.Domain.Set(&v)
}
// SetDomainNil sets the value for Domain to be an explicit nil
func (o *OracleProtectionSource) SetDomainNil() {
	o.Domain.Set(nil)
}

// UnsetDomain ensures that no value is present for Domain, not even an explicit nil
func (o *OracleProtectionSource) UnsetDomain() {
	o.Domain.Unset()
}

// GetFraSize returns the FraSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleProtectionSource) GetFraSize() int64 {
	if o == nil || o.FraSize.Get() == nil {
		var ret int64
		return ret
	}
	return *o.FraSize.Get()
}

// GetFraSizeOk returns a tuple with the FraSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleProtectionSource) GetFraSizeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FraSize.Get(), o.FraSize.IsSet()
}

// HasFraSize returns a boolean if a field has been set.
func (o *OracleProtectionSource) HasFraSize() bool {
	if o != nil && o.FraSize.IsSet() {
		return true
	}

	return false
}

// SetFraSize gets a reference to the given NullableInt64 and assigns it to the FraSize field.
func (o *OracleProtectionSource) SetFraSize(v int64) {
	o.FraSize.Set(&v)
}
// SetFraSizeNil sets the value for FraSize to be an explicit nil
func (o *OracleProtectionSource) SetFraSizeNil() {
	o.FraSize.Set(nil)
}

// UnsetFraSize ensures that no value is present for FraSize, not even an explicit nil
func (o *OracleProtectionSource) UnsetFraSize() {
	o.FraSize.Unset()
}

// GetHosts returns the Hosts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleProtectionSource) GetHosts() []OracleHost {
	if o == nil  {
		var ret []OracleHost
		return ret
	}
	return o.Hosts
}

// GetHostsOk returns a tuple with the Hosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleProtectionSource) GetHostsOk() (*[]OracleHost, bool) {
	if o == nil || o.Hosts == nil {
		return nil, false
	}
	return &o.Hosts, true
}

// HasHosts returns a boolean if a field has been set.
func (o *OracleProtectionSource) HasHosts() bool {
	if o != nil && o.Hosts != nil {
		return true
	}

	return false
}

// SetHosts gets a reference to the given []OracleHost and assigns it to the Hosts field.
func (o *OracleProtectionSource) SetHosts(v []OracleHost) {
	o.Hosts = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleProtectionSource) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleProtectionSource) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *OracleProtectionSource) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *OracleProtectionSource) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *OracleProtectionSource) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *OracleProtectionSource) UnsetName() {
	o.Name.Unset()
}

// GetOwnerId returns the OwnerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleProtectionSource) GetOwnerId() int64 {
	if o == nil || o.OwnerId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.OwnerId.Get()
}

// GetOwnerIdOk returns a tuple with the OwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleProtectionSource) GetOwnerIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OwnerId.Get(), o.OwnerId.IsSet()
}

// HasOwnerId returns a boolean if a field has been set.
func (o *OracleProtectionSource) HasOwnerId() bool {
	if o != nil && o.OwnerId.IsSet() {
		return true
	}

	return false
}

// SetOwnerId gets a reference to the given NullableInt64 and assigns it to the OwnerId field.
func (o *OracleProtectionSource) SetOwnerId(v int64) {
	o.OwnerId.Set(&v)
}
// SetOwnerIdNil sets the value for OwnerId to be an explicit nil
func (o *OracleProtectionSource) SetOwnerIdNil() {
	o.OwnerId.Set(nil)
}

// UnsetOwnerId ensures that no value is present for OwnerId, not even an explicit nil
func (o *OracleProtectionSource) UnsetOwnerId() {
	o.OwnerId.Unset()
}

// GetSgaTargetSize returns the SgaTargetSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleProtectionSource) GetSgaTargetSize() string {
	if o == nil || o.SgaTargetSize.Get() == nil {
		var ret string
		return ret
	}
	return *o.SgaTargetSize.Get()
}

// GetSgaTargetSizeOk returns a tuple with the SgaTargetSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleProtectionSource) GetSgaTargetSizeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SgaTargetSize.Get(), o.SgaTargetSize.IsSet()
}

// HasSgaTargetSize returns a boolean if a field has been set.
func (o *OracleProtectionSource) HasSgaTargetSize() bool {
	if o != nil && o.SgaTargetSize.IsSet() {
		return true
	}

	return false
}

// SetSgaTargetSize gets a reference to the given NullableString and assigns it to the SgaTargetSize field.
func (o *OracleProtectionSource) SetSgaTargetSize(v string) {
	o.SgaTargetSize.Set(&v)
}
// SetSgaTargetSizeNil sets the value for SgaTargetSize to be an explicit nil
func (o *OracleProtectionSource) SetSgaTargetSizeNil() {
	o.SgaTargetSize.Set(nil)
}

// UnsetSgaTargetSize ensures that no value is present for SgaTargetSize, not even an explicit nil
func (o *OracleProtectionSource) UnsetSgaTargetSize() {
	o.SgaTargetSize.Unset()
}

// GetSharedPoolSize returns the SharedPoolSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleProtectionSource) GetSharedPoolSize() string {
	if o == nil || o.SharedPoolSize.Get() == nil {
		var ret string
		return ret
	}
	return *o.SharedPoolSize.Get()
}

// GetSharedPoolSizeOk returns a tuple with the SharedPoolSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleProtectionSource) GetSharedPoolSizeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SharedPoolSize.Get(), o.SharedPoolSize.IsSet()
}

// HasSharedPoolSize returns a boolean if a field has been set.
func (o *OracleProtectionSource) HasSharedPoolSize() bool {
	if o != nil && o.SharedPoolSize.IsSet() {
		return true
	}

	return false
}

// SetSharedPoolSize gets a reference to the given NullableString and assigns it to the SharedPoolSize field.
func (o *OracleProtectionSource) SetSharedPoolSize(v string) {
	o.SharedPoolSize.Set(&v)
}
// SetSharedPoolSizeNil sets the value for SharedPoolSize to be an explicit nil
func (o *OracleProtectionSource) SetSharedPoolSizeNil() {
	o.SharedPoolSize.Set(nil)
}

// UnsetSharedPoolSize ensures that no value is present for SharedPoolSize, not even an explicit nil
func (o *OracleProtectionSource) UnsetSharedPoolSize() {
	o.SharedPoolSize.Unset()
}

// GetSize returns the Size field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleProtectionSource) GetSize() int64 {
	if o == nil || o.Size.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Size.Get()
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleProtectionSource) GetSizeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Size.Get(), o.Size.IsSet()
}

// HasSize returns a boolean if a field has been set.
func (o *OracleProtectionSource) HasSize() bool {
	if o != nil && o.Size.IsSet() {
		return true
	}

	return false
}

// SetSize gets a reference to the given NullableInt64 and assigns it to the Size field.
func (o *OracleProtectionSource) SetSize(v int64) {
	o.Size.Set(&v)
}
// SetSizeNil sets the value for Size to be an explicit nil
func (o *OracleProtectionSource) SetSizeNil() {
	o.Size.Set(nil)
}

// UnsetSize ensures that no value is present for Size, not even an explicit nil
func (o *OracleProtectionSource) UnsetSize() {
	o.Size.Unset()
}

// GetTdeEncryptedTsCount returns the TdeEncryptedTsCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleProtectionSource) GetTdeEncryptedTsCount() int64 {
	if o == nil || o.TdeEncryptedTsCount.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TdeEncryptedTsCount.Get()
}

// GetTdeEncryptedTsCountOk returns a tuple with the TdeEncryptedTsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleProtectionSource) GetTdeEncryptedTsCountOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TdeEncryptedTsCount.Get(), o.TdeEncryptedTsCount.IsSet()
}

// HasTdeEncryptedTsCount returns a boolean if a field has been set.
func (o *OracleProtectionSource) HasTdeEncryptedTsCount() bool {
	if o != nil && o.TdeEncryptedTsCount.IsSet() {
		return true
	}

	return false
}

// SetTdeEncryptedTsCount gets a reference to the given NullableInt64 and assigns it to the TdeEncryptedTsCount field.
func (o *OracleProtectionSource) SetTdeEncryptedTsCount(v int64) {
	o.TdeEncryptedTsCount.Set(&v)
}
// SetTdeEncryptedTsCountNil sets the value for TdeEncryptedTsCount to be an explicit nil
func (o *OracleProtectionSource) SetTdeEncryptedTsCountNil() {
	o.TdeEncryptedTsCount.Set(nil)
}

// UnsetTdeEncryptedTsCount ensures that no value is present for TdeEncryptedTsCount, not even an explicit nil
func (o *OracleProtectionSource) UnsetTdeEncryptedTsCount() {
	o.TdeEncryptedTsCount.Unset()
}

// GetTempFilesCount returns the TempFilesCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleProtectionSource) GetTempFilesCount() int64 {
	if o == nil || o.TempFilesCount.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TempFilesCount.Get()
}

// GetTempFilesCountOk returns a tuple with the TempFilesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleProtectionSource) GetTempFilesCountOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TempFilesCount.Get(), o.TempFilesCount.IsSet()
}

// HasTempFilesCount returns a boolean if a field has been set.
func (o *OracleProtectionSource) HasTempFilesCount() bool {
	if o != nil && o.TempFilesCount.IsSet() {
		return true
	}

	return false
}

// SetTempFilesCount gets a reference to the given NullableInt64 and assigns it to the TempFilesCount field.
func (o *OracleProtectionSource) SetTempFilesCount(v int64) {
	o.TempFilesCount.Set(&v)
}
// SetTempFilesCountNil sets the value for TempFilesCount to be an explicit nil
func (o *OracleProtectionSource) SetTempFilesCountNil() {
	o.TempFilesCount.Set(nil)
}

// UnsetTempFilesCount ensures that no value is present for TempFilesCount, not even an explicit nil
func (o *OracleProtectionSource) UnsetTempFilesCount() {
	o.TempFilesCount.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleProtectionSource) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleProtectionSource) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *OracleProtectionSource) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *OracleProtectionSource) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *OracleProtectionSource) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *OracleProtectionSource) UnsetType() {
	o.Type.Unset()
}

// GetUuid returns the Uuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleProtectionSource) GetUuid() string {
	if o == nil || o.Uuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.Uuid.Get()
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleProtectionSource) GetUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Uuid.Get(), o.Uuid.IsSet()
}

// HasUuid returns a boolean if a field has been set.
func (o *OracleProtectionSource) HasUuid() bool {
	if o != nil && o.Uuid.IsSet() {
		return true
	}

	return false
}

// SetUuid gets a reference to the given NullableString and assigns it to the Uuid field.
func (o *OracleProtectionSource) SetUuid(v string) {
	o.Uuid.Set(&v)
}
// SetUuidNil sets the value for Uuid to be an explicit nil
func (o *OracleProtectionSource) SetUuidNil() {
	o.Uuid.Set(nil)
}

// UnsetUuid ensures that no value is present for Uuid, not even an explicit nil
func (o *OracleProtectionSource) UnsetUuid() {
	o.Uuid.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleProtectionSource) GetVersion() string {
	if o == nil || o.Version.Get() == nil {
		var ret string
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleProtectionSource) GetVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *OracleProtectionSource) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableString and assigns it to the Version field.
func (o *OracleProtectionSource) SetVersion(v string) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *OracleProtectionSource) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *OracleProtectionSource) UnsetVersion() {
	o.Version.Unset()
}

func (o OracleProtectionSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ArchiveLogEnabled.IsSet() {
		toSerialize["archiveLogEnabled"] = o.ArchiveLogEnabled.Get()
	}
	if o.BctEnabled.IsSet() {
		toSerialize["bctEnabled"] = o.BctEnabled.Get()
	}
	if o.ContainerDatabaseInfo != nil {
		toSerialize["containerDatabaseInfo"] = o.ContainerDatabaseInfo
	}
	if o.DataGuardInfo != nil {
		toSerialize["dataGuardInfo"] = o.DataGuardInfo
	}
	if o.DatabaseUniqueName.IsSet() {
		toSerialize["databaseUniqueName"] = o.DatabaseUniqueName.Get()
	}
	if o.DbType.IsSet() {
		toSerialize["dbType"] = o.DbType.Get()
	}
	if o.Domain.IsSet() {
		toSerialize["domain"] = o.Domain.Get()
	}
	if o.FraSize.IsSet() {
		toSerialize["fraSize"] = o.FraSize.Get()
	}
	if o.Hosts != nil {
		toSerialize["hosts"] = o.Hosts
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.OwnerId.IsSet() {
		toSerialize["ownerId"] = o.OwnerId.Get()
	}
	if o.SgaTargetSize.IsSet() {
		toSerialize["sgaTargetSize"] = o.SgaTargetSize.Get()
	}
	if o.SharedPoolSize.IsSet() {
		toSerialize["sharedPoolSize"] = o.SharedPoolSize.Get()
	}
	if o.Size.IsSet() {
		toSerialize["size"] = o.Size.Get()
	}
	if o.TdeEncryptedTsCount.IsSet() {
		toSerialize["tdeEncryptedTsCount"] = o.TdeEncryptedTsCount.Get()
	}
	if o.TempFilesCount.IsSet() {
		toSerialize["tempFilesCount"] = o.TempFilesCount.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Uuid.IsSet() {
		toSerialize["uuid"] = o.Uuid.Get()
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableOracleProtectionSource struct {
	value *OracleProtectionSource
	isSet bool
}

func (v NullableOracleProtectionSource) Get() *OracleProtectionSource {
	return v.value
}

func (v *NullableOracleProtectionSource) Set(val *OracleProtectionSource) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleProtectionSource) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleProtectionSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleProtectionSource(val *OracleProtectionSource) *NullableOracleProtectionSource {
	return &NullableOracleProtectionSource{value: val, isSet: true}
}

func (v NullableOracleProtectionSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleProtectionSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


