/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// UpdateAppInstanceStateParameters Specifies update app instance state parameters.
type UpdateAppInstanceStateParameters struct {
	// Specifies the desired app instance state type. Specifies operational status of an app instance. kInitializing - The app instance has been launched or resumed, but is not fully running yet. kRunning - The app instance is running. Check health_status for the actual health. kPausing - The app instance is being paused. kPaused - The app instance has been paused. kTerminating - The app instance is being terminated. kTerminated -  The app instance has been terminated. kFailed - The app instance has failed due to an unrecoverable error.
	State NullableString `json:"state,omitempty"`
}

// NewUpdateAppInstanceStateParameters instantiates a new UpdateAppInstanceStateParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateAppInstanceStateParameters() *UpdateAppInstanceStateParameters {
	this := UpdateAppInstanceStateParameters{}
	return &this
}

// NewUpdateAppInstanceStateParametersWithDefaults instantiates a new UpdateAppInstanceStateParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateAppInstanceStateParametersWithDefaults() *UpdateAppInstanceStateParameters {
	this := UpdateAppInstanceStateParameters{}
	return &this
}

// GetState returns the State field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateAppInstanceStateParameters) GetState() string {
	if o == nil || o.State.Get() == nil {
		var ret string
		return ret
	}
	return *o.State.Get()
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateAppInstanceStateParameters) GetStateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.State.Get(), o.State.IsSet()
}

// HasState returns a boolean if a field has been set.
func (o *UpdateAppInstanceStateParameters) HasState() bool {
	if o != nil && o.State.IsSet() {
		return true
	}

	return false
}

// SetState gets a reference to the given NullableString and assigns it to the State field.
func (o *UpdateAppInstanceStateParameters) SetState(v string) {
	o.State.Set(&v)
}
// SetStateNil sets the value for State to be an explicit nil
func (o *UpdateAppInstanceStateParameters) SetStateNil() {
	o.State.Set(nil)
}

// UnsetState ensures that no value is present for State, not even an explicit nil
func (o *UpdateAppInstanceStateParameters) UnsetState() {
	o.State.Unset()
}

func (o UpdateAppInstanceStateParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.State.IsSet() {
		toSerialize["state"] = o.State.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateAppInstanceStateParameters struct {
	value *UpdateAppInstanceStateParameters
	isSet bool
}

func (v NullableUpdateAppInstanceStateParameters) Get() *UpdateAppInstanceStateParameters {
	return v.value
}

func (v *NullableUpdateAppInstanceStateParameters) Set(val *UpdateAppInstanceStateParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAppInstanceStateParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAppInstanceStateParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAppInstanceStateParameters(val *UpdateAppInstanceStateParameters) *NullableUpdateAppInstanceStateParameters {
	return &NullableUpdateAppInstanceStateParameters{value: val, isSet: true}
}

func (v NullableUpdateAppInstanceStateParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAppInstanceStateParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


