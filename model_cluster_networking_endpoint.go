/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ClusterNetworkingEndpoint Specifies information about end point.
type ClusterNetworkingEndpoint struct {
	// The Fully Qualified Domain Name.
	Fqdn NullableString `json:"fqdn,omitempty"`
	// The IPv4 address.
	Ipv4Addr NullableString `json:"ipv4Addr,omitempty"`
	// The IPv6 address.
	Ipv6Addr NullableString `json:"ipv6Addr,omitempty"`
}

// NewClusterNetworkingEndpoint instantiates a new ClusterNetworkingEndpoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterNetworkingEndpoint() *ClusterNetworkingEndpoint {
	this := ClusterNetworkingEndpoint{}
	return &this
}

// NewClusterNetworkingEndpointWithDefaults instantiates a new ClusterNetworkingEndpoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterNetworkingEndpointWithDefaults() *ClusterNetworkingEndpoint {
	this := ClusterNetworkingEndpoint{}
	return &this
}

// GetFqdn returns the Fqdn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterNetworkingEndpoint) GetFqdn() string {
	if o == nil || o.Fqdn.Get() == nil {
		var ret string
		return ret
	}
	return *o.Fqdn.Get()
}

// GetFqdnOk returns a tuple with the Fqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterNetworkingEndpoint) GetFqdnOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Fqdn.Get(), o.Fqdn.IsSet()
}

// HasFqdn returns a boolean if a field has been set.
func (o *ClusterNetworkingEndpoint) HasFqdn() bool {
	if o != nil && o.Fqdn.IsSet() {
		return true
	}

	return false
}

// SetFqdn gets a reference to the given NullableString and assigns it to the Fqdn field.
func (o *ClusterNetworkingEndpoint) SetFqdn(v string) {
	o.Fqdn.Set(&v)
}
// SetFqdnNil sets the value for Fqdn to be an explicit nil
func (o *ClusterNetworkingEndpoint) SetFqdnNil() {
	o.Fqdn.Set(nil)
}

// UnsetFqdn ensures that no value is present for Fqdn, not even an explicit nil
func (o *ClusterNetworkingEndpoint) UnsetFqdn() {
	o.Fqdn.Unset()
}

// GetIpv4Addr returns the Ipv4Addr field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterNetworkingEndpoint) GetIpv4Addr() string {
	if o == nil || o.Ipv4Addr.Get() == nil {
		var ret string
		return ret
	}
	return *o.Ipv4Addr.Get()
}

// GetIpv4AddrOk returns a tuple with the Ipv4Addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterNetworkingEndpoint) GetIpv4AddrOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Ipv4Addr.Get(), o.Ipv4Addr.IsSet()
}

// HasIpv4Addr returns a boolean if a field has been set.
func (o *ClusterNetworkingEndpoint) HasIpv4Addr() bool {
	if o != nil && o.Ipv4Addr.IsSet() {
		return true
	}

	return false
}

// SetIpv4Addr gets a reference to the given NullableString and assigns it to the Ipv4Addr field.
func (o *ClusterNetworkingEndpoint) SetIpv4Addr(v string) {
	o.Ipv4Addr.Set(&v)
}
// SetIpv4AddrNil sets the value for Ipv4Addr to be an explicit nil
func (o *ClusterNetworkingEndpoint) SetIpv4AddrNil() {
	o.Ipv4Addr.Set(nil)
}

// UnsetIpv4Addr ensures that no value is present for Ipv4Addr, not even an explicit nil
func (o *ClusterNetworkingEndpoint) UnsetIpv4Addr() {
	o.Ipv4Addr.Unset()
}

// GetIpv6Addr returns the Ipv6Addr field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterNetworkingEndpoint) GetIpv6Addr() string {
	if o == nil || o.Ipv6Addr.Get() == nil {
		var ret string
		return ret
	}
	return *o.Ipv6Addr.Get()
}

// GetIpv6AddrOk returns a tuple with the Ipv6Addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterNetworkingEndpoint) GetIpv6AddrOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Ipv6Addr.Get(), o.Ipv6Addr.IsSet()
}

// HasIpv6Addr returns a boolean if a field has been set.
func (o *ClusterNetworkingEndpoint) HasIpv6Addr() bool {
	if o != nil && o.Ipv6Addr.IsSet() {
		return true
	}

	return false
}

// SetIpv6Addr gets a reference to the given NullableString and assigns it to the Ipv6Addr field.
func (o *ClusterNetworkingEndpoint) SetIpv6Addr(v string) {
	o.Ipv6Addr.Set(&v)
}
// SetIpv6AddrNil sets the value for Ipv6Addr to be an explicit nil
func (o *ClusterNetworkingEndpoint) SetIpv6AddrNil() {
	o.Ipv6Addr.Set(nil)
}

// UnsetIpv6Addr ensures that no value is present for Ipv6Addr, not even an explicit nil
func (o *ClusterNetworkingEndpoint) UnsetIpv6Addr() {
	o.Ipv6Addr.Unset()
}

func (o ClusterNetworkingEndpoint) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Fqdn.IsSet() {
		toSerialize["fqdn"] = o.Fqdn.Get()
	}
	if o.Ipv4Addr.IsSet() {
		toSerialize["ipv4Addr"] = o.Ipv4Addr.Get()
	}
	if o.Ipv6Addr.IsSet() {
		toSerialize["ipv6Addr"] = o.Ipv6Addr.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableClusterNetworkingEndpoint struct {
	value *ClusterNetworkingEndpoint
	isSet bool
}

func (v NullableClusterNetworkingEndpoint) Get() *ClusterNetworkingEndpoint {
	return v.value
}

func (v *NullableClusterNetworkingEndpoint) Set(val *ClusterNetworkingEndpoint) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterNetworkingEndpoint) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterNetworkingEndpoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterNetworkingEndpoint(val *ClusterNetworkingEndpoint) *NullableClusterNetworkingEndpoint {
	return &NullableClusterNetworkingEndpoint{value: val, isSet: true}
}

func (v NullableClusterNetworkingEndpoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterNetworkingEndpoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


