/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// TaskAttribute This contains a string name, a value, and a type for the value.
type TaskAttribute struct {
	// Specifies the name of this Task Attribute.
	Name NullableString `json:"name,omitempty"`
	// Specifies the value of this Task Attribute.
	Value NullableString `json:"value,omitempty"`
	// Specifies the type of the value contained here. All values are returned as pointers to strings, but they can be casted to the type indicated here. 'kInt64' indicates that the value stored in the Task Attribute is a 64-bit integer. 'kDouble' indicates that the value stored in the Task Attribute is a 64 bit floating point number. 'kString' indicates that the value stored in the Task Attribute is a string. 'kBytes' indicates that the value stored in the Task Attribute is an array of bytes.
	ValueType NullableString `json:"valueType,omitempty"`
}

// NewTaskAttribute instantiates a new TaskAttribute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskAttribute() *TaskAttribute {
	this := TaskAttribute{}
	return &this
}

// NewTaskAttributeWithDefaults instantiates a new TaskAttribute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskAttributeWithDefaults() *TaskAttribute {
	this := TaskAttribute{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskAttribute) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskAttribute) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *TaskAttribute) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *TaskAttribute) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *TaskAttribute) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *TaskAttribute) UnsetName() {
	o.Name.Unset()
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskAttribute) GetValue() string {
	if o == nil || o.Value.Get() == nil {
		var ret string
		return ret
	}
	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskAttribute) GetValueOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// HasValue returns a boolean if a field has been set.
func (o *TaskAttribute) HasValue() bool {
	if o != nil && o.Value.IsSet() {
		return true
	}

	return false
}

// SetValue gets a reference to the given NullableString and assigns it to the Value field.
func (o *TaskAttribute) SetValue(v string) {
	o.Value.Set(&v)
}
// SetValueNil sets the value for Value to be an explicit nil
func (o *TaskAttribute) SetValueNil() {
	o.Value.Set(nil)
}

// UnsetValue ensures that no value is present for Value, not even an explicit nil
func (o *TaskAttribute) UnsetValue() {
	o.Value.Unset()
}

// GetValueType returns the ValueType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskAttribute) GetValueType() string {
	if o == nil || o.ValueType.Get() == nil {
		var ret string
		return ret
	}
	return *o.ValueType.Get()
}

// GetValueTypeOk returns a tuple with the ValueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskAttribute) GetValueTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ValueType.Get(), o.ValueType.IsSet()
}

// HasValueType returns a boolean if a field has been set.
func (o *TaskAttribute) HasValueType() bool {
	if o != nil && o.ValueType.IsSet() {
		return true
	}

	return false
}

// SetValueType gets a reference to the given NullableString and assigns it to the ValueType field.
func (o *TaskAttribute) SetValueType(v string) {
	o.ValueType.Set(&v)
}
// SetValueTypeNil sets the value for ValueType to be an explicit nil
func (o *TaskAttribute) SetValueTypeNil() {
	o.ValueType.Set(nil)
}

// UnsetValueType ensures that no value is present for ValueType, not even an explicit nil
func (o *TaskAttribute) UnsetValueType() {
	o.ValueType.Unset()
}

func (o TaskAttribute) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Value.IsSet() {
		toSerialize["value"] = o.Value.Get()
	}
	if o.ValueType.IsSet() {
		toSerialize["valueType"] = o.ValueType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableTaskAttribute struct {
	value *TaskAttribute
	isSet bool
}

func (v NullableTaskAttribute) Get() *TaskAttribute {
	return v.value
}

func (v *NullableTaskAttribute) Set(val *TaskAttribute) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskAttribute) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskAttribute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskAttribute(val *TaskAttribute) *NullableTaskAttribute {
	return &NullableTaskAttribute{value: val, isSet: true}
}

func (v NullableTaskAttribute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskAttribute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


