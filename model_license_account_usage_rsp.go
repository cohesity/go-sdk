/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// LicenseAccountUsageRsp Structure to hold account usage response
type LicenseAccountUsageRsp struct {
	// Holds information about consumption usage of overused features
	FeatureOverusage []Overusage `json:"featureOverusage,omitempty"`
	// Free Setup Mode
	FreeSetupMode NullableBool `json:"freeSetupMode,omitempty"`
	// Check if trial license.
	IsTrial NullableBool `json:"isTrial,omitempty"`
	// Holds monthly avg usage values of feature
	Last12MonthsAvgEntitlement map[string][]MonthlyEntitlement `json:"last12MonthsAvgEntitlement,omitempty"`
	// Holds monthly avg usage values of feature
	Last12MonthsAvgUsage map[string][]MonthlyUsage `json:"last12MonthsAvgUsage,omitempty"`
	// Holds daily entitled capacity values of feature
	Last30DaysEntitlement map[string][]DailyEntitlement `json:"last30DaysEntitlement,omitempty"`
	// Holds daily usage values of feature
	Last30DaysUsage map[string][]DailyUsage `json:"last30DaysUsage,omitempty"`
	// Last time, this report was updated.
	LastUpdateTime NullableInt64 `json:"lastUpdateTime,omitempty"`
	// LicenseFeatureUsages holds information about each feature from license orders.
	LicensedUsage []LicensedUsage `json:"licensedUsage,omitempty"`
	// Trial expiration period.
	TrialExpiration NullableInt64 `json:"trialExpiration,omitempty"`
	// Creating a map of cluster id and feature usage to make it consistent display usage UI for the helios server license page UI.
	Usage map[string][]FeatureUsage `json:"usage,omitempty"`
}

// NewLicenseAccountUsageRsp instantiates a new LicenseAccountUsageRsp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseAccountUsageRsp() *LicenseAccountUsageRsp {
	this := LicenseAccountUsageRsp{}
	return &this
}

// NewLicenseAccountUsageRspWithDefaults instantiates a new LicenseAccountUsageRsp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseAccountUsageRspWithDefaults() *LicenseAccountUsageRsp {
	this := LicenseAccountUsageRsp{}
	return &this
}

// GetFeatureOverusage returns the FeatureOverusage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicenseAccountUsageRsp) GetFeatureOverusage() []Overusage {
	if o == nil  {
		var ret []Overusage
		return ret
	}
	return o.FeatureOverusage
}

// GetFeatureOverusageOk returns a tuple with the FeatureOverusage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicenseAccountUsageRsp) GetFeatureOverusageOk() (*[]Overusage, bool) {
	if o == nil || o.FeatureOverusage == nil {
		return nil, false
	}
	return &o.FeatureOverusage, true
}

// HasFeatureOverusage returns a boolean if a field has been set.
func (o *LicenseAccountUsageRsp) HasFeatureOverusage() bool {
	if o != nil && o.FeatureOverusage != nil {
		return true
	}

	return false
}

// SetFeatureOverusage gets a reference to the given []Overusage and assigns it to the FeatureOverusage field.
func (o *LicenseAccountUsageRsp) SetFeatureOverusage(v []Overusage) {
	o.FeatureOverusage = v
}

// GetFreeSetupMode returns the FreeSetupMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicenseAccountUsageRsp) GetFreeSetupMode() bool {
	if o == nil || o.FreeSetupMode.Get() == nil {
		var ret bool
		return ret
	}
	return *o.FreeSetupMode.Get()
}

// GetFreeSetupModeOk returns a tuple with the FreeSetupMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicenseAccountUsageRsp) GetFreeSetupModeOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FreeSetupMode.Get(), o.FreeSetupMode.IsSet()
}

// HasFreeSetupMode returns a boolean if a field has been set.
func (o *LicenseAccountUsageRsp) HasFreeSetupMode() bool {
	if o != nil && o.FreeSetupMode.IsSet() {
		return true
	}

	return false
}

// SetFreeSetupMode gets a reference to the given NullableBool and assigns it to the FreeSetupMode field.
func (o *LicenseAccountUsageRsp) SetFreeSetupMode(v bool) {
	o.FreeSetupMode.Set(&v)
}
// SetFreeSetupModeNil sets the value for FreeSetupMode to be an explicit nil
func (o *LicenseAccountUsageRsp) SetFreeSetupModeNil() {
	o.FreeSetupMode.Set(nil)
}

// UnsetFreeSetupMode ensures that no value is present for FreeSetupMode, not even an explicit nil
func (o *LicenseAccountUsageRsp) UnsetFreeSetupMode() {
	o.FreeSetupMode.Unset()
}

// GetIsTrial returns the IsTrial field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicenseAccountUsageRsp) GetIsTrial() bool {
	if o == nil || o.IsTrial.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsTrial.Get()
}

// GetIsTrialOk returns a tuple with the IsTrial field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicenseAccountUsageRsp) GetIsTrialOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsTrial.Get(), o.IsTrial.IsSet()
}

// HasIsTrial returns a boolean if a field has been set.
func (o *LicenseAccountUsageRsp) HasIsTrial() bool {
	if o != nil && o.IsTrial.IsSet() {
		return true
	}

	return false
}

// SetIsTrial gets a reference to the given NullableBool and assigns it to the IsTrial field.
func (o *LicenseAccountUsageRsp) SetIsTrial(v bool) {
	o.IsTrial.Set(&v)
}
// SetIsTrialNil sets the value for IsTrial to be an explicit nil
func (o *LicenseAccountUsageRsp) SetIsTrialNil() {
	o.IsTrial.Set(nil)
}

// UnsetIsTrial ensures that no value is present for IsTrial, not even an explicit nil
func (o *LicenseAccountUsageRsp) UnsetIsTrial() {
	o.IsTrial.Unset()
}

// GetLast12MonthsAvgEntitlement returns the Last12MonthsAvgEntitlement field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicenseAccountUsageRsp) GetLast12MonthsAvgEntitlement() map[string][]MonthlyEntitlement {
	if o == nil  {
		var ret map[string][]MonthlyEntitlement
		return ret
	}
	return o.Last12MonthsAvgEntitlement
}

// GetLast12MonthsAvgEntitlementOk returns a tuple with the Last12MonthsAvgEntitlement field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicenseAccountUsageRsp) GetLast12MonthsAvgEntitlementOk() (*map[string][]MonthlyEntitlement, bool) {
	if o == nil || o.Last12MonthsAvgEntitlement == nil {
		return nil, false
	}
	return &o.Last12MonthsAvgEntitlement, true
}

// HasLast12MonthsAvgEntitlement returns a boolean if a field has been set.
func (o *LicenseAccountUsageRsp) HasLast12MonthsAvgEntitlement() bool {
	if o != nil && o.Last12MonthsAvgEntitlement != nil {
		return true
	}

	return false
}

// SetLast12MonthsAvgEntitlement gets a reference to the given map[string][]MonthlyEntitlement and assigns it to the Last12MonthsAvgEntitlement field.
func (o *LicenseAccountUsageRsp) SetLast12MonthsAvgEntitlement(v map[string][]MonthlyEntitlement) {
	o.Last12MonthsAvgEntitlement = v
}

// GetLast12MonthsAvgUsage returns the Last12MonthsAvgUsage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicenseAccountUsageRsp) GetLast12MonthsAvgUsage() map[string][]MonthlyUsage {
	if o == nil  {
		var ret map[string][]MonthlyUsage
		return ret
	}
	return o.Last12MonthsAvgUsage
}

// GetLast12MonthsAvgUsageOk returns a tuple with the Last12MonthsAvgUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicenseAccountUsageRsp) GetLast12MonthsAvgUsageOk() (*map[string][]MonthlyUsage, bool) {
	if o == nil || o.Last12MonthsAvgUsage == nil {
		return nil, false
	}
	return &o.Last12MonthsAvgUsage, true
}

// HasLast12MonthsAvgUsage returns a boolean if a field has been set.
func (o *LicenseAccountUsageRsp) HasLast12MonthsAvgUsage() bool {
	if o != nil && o.Last12MonthsAvgUsage != nil {
		return true
	}

	return false
}

// SetLast12MonthsAvgUsage gets a reference to the given map[string][]MonthlyUsage and assigns it to the Last12MonthsAvgUsage field.
func (o *LicenseAccountUsageRsp) SetLast12MonthsAvgUsage(v map[string][]MonthlyUsage) {
	o.Last12MonthsAvgUsage = v
}

// GetLast30DaysEntitlement returns the Last30DaysEntitlement field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicenseAccountUsageRsp) GetLast30DaysEntitlement() map[string][]DailyEntitlement {
	if o == nil  {
		var ret map[string][]DailyEntitlement
		return ret
	}
	return o.Last30DaysEntitlement
}

// GetLast30DaysEntitlementOk returns a tuple with the Last30DaysEntitlement field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicenseAccountUsageRsp) GetLast30DaysEntitlementOk() (*map[string][]DailyEntitlement, bool) {
	if o == nil || o.Last30DaysEntitlement == nil {
		return nil, false
	}
	return &o.Last30DaysEntitlement, true
}

// HasLast30DaysEntitlement returns a boolean if a field has been set.
func (o *LicenseAccountUsageRsp) HasLast30DaysEntitlement() bool {
	if o != nil && o.Last30DaysEntitlement != nil {
		return true
	}

	return false
}

// SetLast30DaysEntitlement gets a reference to the given map[string][]DailyEntitlement and assigns it to the Last30DaysEntitlement field.
func (o *LicenseAccountUsageRsp) SetLast30DaysEntitlement(v map[string][]DailyEntitlement) {
	o.Last30DaysEntitlement = v
}

// GetLast30DaysUsage returns the Last30DaysUsage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicenseAccountUsageRsp) GetLast30DaysUsage() map[string][]DailyUsage {
	if o == nil  {
		var ret map[string][]DailyUsage
		return ret
	}
	return o.Last30DaysUsage
}

// GetLast30DaysUsageOk returns a tuple with the Last30DaysUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicenseAccountUsageRsp) GetLast30DaysUsageOk() (*map[string][]DailyUsage, bool) {
	if o == nil || o.Last30DaysUsage == nil {
		return nil, false
	}
	return &o.Last30DaysUsage, true
}

// HasLast30DaysUsage returns a boolean if a field has been set.
func (o *LicenseAccountUsageRsp) HasLast30DaysUsage() bool {
	if o != nil && o.Last30DaysUsage != nil {
		return true
	}

	return false
}

// SetLast30DaysUsage gets a reference to the given map[string][]DailyUsage and assigns it to the Last30DaysUsage field.
func (o *LicenseAccountUsageRsp) SetLast30DaysUsage(v map[string][]DailyUsage) {
	o.Last30DaysUsage = v
}

// GetLastUpdateTime returns the LastUpdateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicenseAccountUsageRsp) GetLastUpdateTime() int64 {
	if o == nil || o.LastUpdateTime.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LastUpdateTime.Get()
}

// GetLastUpdateTimeOk returns a tuple with the LastUpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicenseAccountUsageRsp) GetLastUpdateTimeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastUpdateTime.Get(), o.LastUpdateTime.IsSet()
}

// HasLastUpdateTime returns a boolean if a field has been set.
func (o *LicenseAccountUsageRsp) HasLastUpdateTime() bool {
	if o != nil && o.LastUpdateTime.IsSet() {
		return true
	}

	return false
}

// SetLastUpdateTime gets a reference to the given NullableInt64 and assigns it to the LastUpdateTime field.
func (o *LicenseAccountUsageRsp) SetLastUpdateTime(v int64) {
	o.LastUpdateTime.Set(&v)
}
// SetLastUpdateTimeNil sets the value for LastUpdateTime to be an explicit nil
func (o *LicenseAccountUsageRsp) SetLastUpdateTimeNil() {
	o.LastUpdateTime.Set(nil)
}

// UnsetLastUpdateTime ensures that no value is present for LastUpdateTime, not even an explicit nil
func (o *LicenseAccountUsageRsp) UnsetLastUpdateTime() {
	o.LastUpdateTime.Unset()
}

// GetLicensedUsage returns the LicensedUsage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicenseAccountUsageRsp) GetLicensedUsage() []LicensedUsage {
	if o == nil  {
		var ret []LicensedUsage
		return ret
	}
	return o.LicensedUsage
}

// GetLicensedUsageOk returns a tuple with the LicensedUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicenseAccountUsageRsp) GetLicensedUsageOk() (*[]LicensedUsage, bool) {
	if o == nil || o.LicensedUsage == nil {
		return nil, false
	}
	return &o.LicensedUsage, true
}

// HasLicensedUsage returns a boolean if a field has been set.
func (o *LicenseAccountUsageRsp) HasLicensedUsage() bool {
	if o != nil && o.LicensedUsage != nil {
		return true
	}

	return false
}

// SetLicensedUsage gets a reference to the given []LicensedUsage and assigns it to the LicensedUsage field.
func (o *LicenseAccountUsageRsp) SetLicensedUsage(v []LicensedUsage) {
	o.LicensedUsage = v
}

// GetTrialExpiration returns the TrialExpiration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicenseAccountUsageRsp) GetTrialExpiration() int64 {
	if o == nil || o.TrialExpiration.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TrialExpiration.Get()
}

// GetTrialExpirationOk returns a tuple with the TrialExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicenseAccountUsageRsp) GetTrialExpirationOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TrialExpiration.Get(), o.TrialExpiration.IsSet()
}

// HasTrialExpiration returns a boolean if a field has been set.
func (o *LicenseAccountUsageRsp) HasTrialExpiration() bool {
	if o != nil && o.TrialExpiration.IsSet() {
		return true
	}

	return false
}

// SetTrialExpiration gets a reference to the given NullableInt64 and assigns it to the TrialExpiration field.
func (o *LicenseAccountUsageRsp) SetTrialExpiration(v int64) {
	o.TrialExpiration.Set(&v)
}
// SetTrialExpirationNil sets the value for TrialExpiration to be an explicit nil
func (o *LicenseAccountUsageRsp) SetTrialExpirationNil() {
	o.TrialExpiration.Set(nil)
}

// UnsetTrialExpiration ensures that no value is present for TrialExpiration, not even an explicit nil
func (o *LicenseAccountUsageRsp) UnsetTrialExpiration() {
	o.TrialExpiration.Unset()
}

// GetUsage returns the Usage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LicenseAccountUsageRsp) GetUsage() map[string][]FeatureUsage {
	if o == nil  {
		var ret map[string][]FeatureUsage
		return ret
	}
	return o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LicenseAccountUsageRsp) GetUsageOk() (*map[string][]FeatureUsage, bool) {
	if o == nil || o.Usage == nil {
		return nil, false
	}
	return &o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *LicenseAccountUsageRsp) HasUsage() bool {
	if o != nil && o.Usage != nil {
		return true
	}

	return false
}

// SetUsage gets a reference to the given map[string][]FeatureUsage and assigns it to the Usage field.
func (o *LicenseAccountUsageRsp) SetUsage(v map[string][]FeatureUsage) {
	o.Usage = v
}

func (o LicenseAccountUsageRsp) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FeatureOverusage != nil {
		toSerialize["featureOverusage"] = o.FeatureOverusage
	}
	if o.FreeSetupMode.IsSet() {
		toSerialize["freeSetupMode"] = o.FreeSetupMode.Get()
	}
	if o.IsTrial.IsSet() {
		toSerialize["isTrial"] = o.IsTrial.Get()
	}
	if o.Last12MonthsAvgEntitlement != nil {
		toSerialize["last12MonthsAvgEntitlement"] = o.Last12MonthsAvgEntitlement
	}
	if o.Last12MonthsAvgUsage != nil {
		toSerialize["last12MonthsAvgUsage"] = o.Last12MonthsAvgUsage
	}
	if o.Last30DaysEntitlement != nil {
		toSerialize["last30DaysEntitlement"] = o.Last30DaysEntitlement
	}
	if o.Last30DaysUsage != nil {
		toSerialize["last30DaysUsage"] = o.Last30DaysUsage
	}
	if o.LastUpdateTime.IsSet() {
		toSerialize["lastUpdateTime"] = o.LastUpdateTime.Get()
	}
	if o.LicensedUsage != nil {
		toSerialize["licensedUsage"] = o.LicensedUsage
	}
	if o.TrialExpiration.IsSet() {
		toSerialize["trialExpiration"] = o.TrialExpiration.Get()
	}
	if o.Usage != nil {
		toSerialize["usage"] = o.Usage
	}
	return json.Marshal(toSerialize)
}

type NullableLicenseAccountUsageRsp struct {
	value *LicenseAccountUsageRsp
	isSet bool
}

func (v NullableLicenseAccountUsageRsp) Get() *LicenseAccountUsageRsp {
	return v.value
}

func (v *NullableLicenseAccountUsageRsp) Set(val *LicenseAccountUsageRsp) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseAccountUsageRsp) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseAccountUsageRsp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseAccountUsageRsp(val *LicenseAccountUsageRsp) *NullableLicenseAccountUsageRsp {
	return &NullableLicenseAccountUsageRsp{value: val, isSet: true}
}

func (v NullableLicenseAccountUsageRsp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseAccountUsageRsp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


