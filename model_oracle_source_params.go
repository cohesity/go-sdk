/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// OracleSourceParams Message to capture additional backup/restore params for a Oracle source.
type OracleSourceParams struct {
	// A vector of unique Oracle databases. Each vector entry represents the backup/restore parameters for one unique Oracle database. Uniqueness is determined by the database unique name.
	AdditionalOracleDbParamsVec []AdditionalOracleDBParams `json:"additionalOracleDbParamsVec,omitempty"`
	// This parameter indicates whether or not to persist mountpoints. Default is set to true, which was the behavior before this option.
	PersistMountpoints NullableBool `json:"persistMountpoints,omitempty"`
}

// NewOracleSourceParams instantiates a new OracleSourceParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleSourceParams() *OracleSourceParams {
	this := OracleSourceParams{}
	return &this
}

// NewOracleSourceParamsWithDefaults instantiates a new OracleSourceParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleSourceParamsWithDefaults() *OracleSourceParams {
	this := OracleSourceParams{}
	return &this
}

// GetAdditionalOracleDbParamsVec returns the AdditionalOracleDbParamsVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleSourceParams) GetAdditionalOracleDbParamsVec() []AdditionalOracleDBParams {
	if o == nil  {
		var ret []AdditionalOracleDBParams
		return ret
	}
	return o.AdditionalOracleDbParamsVec
}

// GetAdditionalOracleDbParamsVecOk returns a tuple with the AdditionalOracleDbParamsVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleSourceParams) GetAdditionalOracleDbParamsVecOk() (*[]AdditionalOracleDBParams, bool) {
	if o == nil || o.AdditionalOracleDbParamsVec == nil {
		return nil, false
	}
	return &o.AdditionalOracleDbParamsVec, true
}

// HasAdditionalOracleDbParamsVec returns a boolean if a field has been set.
func (o *OracleSourceParams) HasAdditionalOracleDbParamsVec() bool {
	if o != nil && o.AdditionalOracleDbParamsVec != nil {
		return true
	}

	return false
}

// SetAdditionalOracleDbParamsVec gets a reference to the given []AdditionalOracleDBParams and assigns it to the AdditionalOracleDbParamsVec field.
func (o *OracleSourceParams) SetAdditionalOracleDbParamsVec(v []AdditionalOracleDBParams) {
	o.AdditionalOracleDbParamsVec = v
}

// GetPersistMountpoints returns the PersistMountpoints field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleSourceParams) GetPersistMountpoints() bool {
	if o == nil || o.PersistMountpoints.Get() == nil {
		var ret bool
		return ret
	}
	return *o.PersistMountpoints.Get()
}

// GetPersistMountpointsOk returns a tuple with the PersistMountpoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleSourceParams) GetPersistMountpointsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PersistMountpoints.Get(), o.PersistMountpoints.IsSet()
}

// HasPersistMountpoints returns a boolean if a field has been set.
func (o *OracleSourceParams) HasPersistMountpoints() bool {
	if o != nil && o.PersistMountpoints.IsSet() {
		return true
	}

	return false
}

// SetPersistMountpoints gets a reference to the given NullableBool and assigns it to the PersistMountpoints field.
func (o *OracleSourceParams) SetPersistMountpoints(v bool) {
	o.PersistMountpoints.Set(&v)
}
// SetPersistMountpointsNil sets the value for PersistMountpoints to be an explicit nil
func (o *OracleSourceParams) SetPersistMountpointsNil() {
	o.PersistMountpoints.Set(nil)
}

// UnsetPersistMountpoints ensures that no value is present for PersistMountpoints, not even an explicit nil
func (o *OracleSourceParams) UnsetPersistMountpoints() {
	o.PersistMountpoints.Unset()
}

func (o OracleSourceParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AdditionalOracleDbParamsVec != nil {
		toSerialize["additionalOracleDbParamsVec"] = o.AdditionalOracleDbParamsVec
	}
	if o.PersistMountpoints.IsSet() {
		toSerialize["persistMountpoints"] = o.PersistMountpoints.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableOracleSourceParams struct {
	value *OracleSourceParams
	isSet bool
}

func (v NullableOracleSourceParams) Get() *OracleSourceParams {
	return v.value
}

func (v *NullableOracleSourceParams) Set(val *OracleSourceParams) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleSourceParams) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleSourceParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleSourceParams(val *OracleSourceParams) *NullableOracleSourceParams {
	return &NullableOracleSourceParams{value: val, isSet: true}
}

func (v NullableOracleSourceParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleSourceParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


