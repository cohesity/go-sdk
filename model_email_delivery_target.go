/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// EmailDeliveryTarget EmailDeliveryTarget Specifies the email address and the locale setting for it.
type EmailDeliveryTarget struct {
	EmailAddress NullableString `json:"emailAddress,omitempty"`
	// Specifies the language in which the emails sent to the above defined mail address should be in.
	Locale NullableString `json:"locale,omitempty"`
	// Specifies the recipient type on how the emails are to received.
	RecipientType NullableInt32 `json:"recipientType,omitempty"`
}

// NewEmailDeliveryTarget instantiates a new EmailDeliveryTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailDeliveryTarget() *EmailDeliveryTarget {
	this := EmailDeliveryTarget{}
	return &this
}

// NewEmailDeliveryTargetWithDefaults instantiates a new EmailDeliveryTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailDeliveryTargetWithDefaults() *EmailDeliveryTarget {
	this := EmailDeliveryTarget{}
	return &this
}

// GetEmailAddress returns the EmailAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailDeliveryTarget) GetEmailAddress() string {
	if o == nil || o.EmailAddress.Get() == nil {
		var ret string
		return ret
	}
	return *o.EmailAddress.Get()
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailDeliveryTarget) GetEmailAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EmailAddress.Get(), o.EmailAddress.IsSet()
}

// HasEmailAddress returns a boolean if a field has been set.
func (o *EmailDeliveryTarget) HasEmailAddress() bool {
	if o != nil && o.EmailAddress.IsSet() {
		return true
	}

	return false
}

// SetEmailAddress gets a reference to the given NullableString and assigns it to the EmailAddress field.
func (o *EmailDeliveryTarget) SetEmailAddress(v string) {
	o.EmailAddress.Set(&v)
}
// SetEmailAddressNil sets the value for EmailAddress to be an explicit nil
func (o *EmailDeliveryTarget) SetEmailAddressNil() {
	o.EmailAddress.Set(nil)
}

// UnsetEmailAddress ensures that no value is present for EmailAddress, not even an explicit nil
func (o *EmailDeliveryTarget) UnsetEmailAddress() {
	o.EmailAddress.Unset()
}

// GetLocale returns the Locale field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailDeliveryTarget) GetLocale() string {
	if o == nil || o.Locale.Get() == nil {
		var ret string
		return ret
	}
	return *o.Locale.Get()
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailDeliveryTarget) GetLocaleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Locale.Get(), o.Locale.IsSet()
}

// HasLocale returns a boolean if a field has been set.
func (o *EmailDeliveryTarget) HasLocale() bool {
	if o != nil && o.Locale.IsSet() {
		return true
	}

	return false
}

// SetLocale gets a reference to the given NullableString and assigns it to the Locale field.
func (o *EmailDeliveryTarget) SetLocale(v string) {
	o.Locale.Set(&v)
}
// SetLocaleNil sets the value for Locale to be an explicit nil
func (o *EmailDeliveryTarget) SetLocaleNil() {
	o.Locale.Set(nil)
}

// UnsetLocale ensures that no value is present for Locale, not even an explicit nil
func (o *EmailDeliveryTarget) UnsetLocale() {
	o.Locale.Unset()
}

// GetRecipientType returns the RecipientType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailDeliveryTarget) GetRecipientType() int32 {
	if o == nil || o.RecipientType.Get() == nil {
		var ret int32
		return ret
	}
	return *o.RecipientType.Get()
}

// GetRecipientTypeOk returns a tuple with the RecipientType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailDeliveryTarget) GetRecipientTypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RecipientType.Get(), o.RecipientType.IsSet()
}

// HasRecipientType returns a boolean if a field has been set.
func (o *EmailDeliveryTarget) HasRecipientType() bool {
	if o != nil && o.RecipientType.IsSet() {
		return true
	}

	return false
}

// SetRecipientType gets a reference to the given NullableInt32 and assigns it to the RecipientType field.
func (o *EmailDeliveryTarget) SetRecipientType(v int32) {
	o.RecipientType.Set(&v)
}
// SetRecipientTypeNil sets the value for RecipientType to be an explicit nil
func (o *EmailDeliveryTarget) SetRecipientTypeNil() {
	o.RecipientType.Set(nil)
}

// UnsetRecipientType ensures that no value is present for RecipientType, not even an explicit nil
func (o *EmailDeliveryTarget) UnsetRecipientType() {
	o.RecipientType.Unset()
}

func (o EmailDeliveryTarget) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EmailAddress.IsSet() {
		toSerialize["emailAddress"] = o.EmailAddress.Get()
	}
	if o.Locale.IsSet() {
		toSerialize["locale"] = o.Locale.Get()
	}
	if o.RecipientType.IsSet() {
		toSerialize["recipientType"] = o.RecipientType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableEmailDeliveryTarget struct {
	value *EmailDeliveryTarget
	isSet bool
}

func (v NullableEmailDeliveryTarget) Get() *EmailDeliveryTarget {
	return v.value
}

func (v *NullableEmailDeliveryTarget) Set(val *EmailDeliveryTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailDeliveryTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailDeliveryTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailDeliveryTarget(val *EmailDeliveryTarget) *NullableEmailDeliveryTarget {
	return &NullableEmailDeliveryTarget{value: val, isSet: true}
}

func (v NullableEmailDeliveryTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailDeliveryTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


