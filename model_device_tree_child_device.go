/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// DeviceTreeChildDevice struct for DeviceTreeChildDevice
type DeviceTreeChildDevice struct {
	Device *DeviceTree `json:"device,omitempty"`
	// This specifies how the parent device is using this child device.
	DeviceType NullableInt32 `json:"deviceType,omitempty"`
	PartitionSlice *DeviceTreePartitionSlice `json:"partitionSlice,omitempty"`
}

// NewDeviceTreeChildDevice instantiates a new DeviceTreeChildDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceTreeChildDevice() *DeviceTreeChildDevice {
	this := DeviceTreeChildDevice{}
	return &this
}

// NewDeviceTreeChildDeviceWithDefaults instantiates a new DeviceTreeChildDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceTreeChildDeviceWithDefaults() *DeviceTreeChildDevice {
	this := DeviceTreeChildDevice{}
	return &this
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *DeviceTreeChildDevice) GetDevice() DeviceTree {
	if o == nil || o.Device == nil {
		var ret DeviceTree
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceTreeChildDevice) GetDeviceOk() (*DeviceTree, bool) {
	if o == nil || o.Device == nil {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *DeviceTreeChildDevice) HasDevice() bool {
	if o != nil && o.Device != nil {
		return true
	}

	return false
}

// SetDevice gets a reference to the given DeviceTree and assigns it to the Device field.
func (o *DeviceTreeChildDevice) SetDevice(v DeviceTree) {
	o.Device = &v
}

// GetDeviceType returns the DeviceType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceTreeChildDevice) GetDeviceType() int32 {
	if o == nil || o.DeviceType.Get() == nil {
		var ret int32
		return ret
	}
	return *o.DeviceType.Get()
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceTreeChildDevice) GetDeviceTypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DeviceType.Get(), o.DeviceType.IsSet()
}

// HasDeviceType returns a boolean if a field has been set.
func (o *DeviceTreeChildDevice) HasDeviceType() bool {
	if o != nil && o.DeviceType.IsSet() {
		return true
	}

	return false
}

// SetDeviceType gets a reference to the given NullableInt32 and assigns it to the DeviceType field.
func (o *DeviceTreeChildDevice) SetDeviceType(v int32) {
	o.DeviceType.Set(&v)
}
// SetDeviceTypeNil sets the value for DeviceType to be an explicit nil
func (o *DeviceTreeChildDevice) SetDeviceTypeNil() {
	o.DeviceType.Set(nil)
}

// UnsetDeviceType ensures that no value is present for DeviceType, not even an explicit nil
func (o *DeviceTreeChildDevice) UnsetDeviceType() {
	o.DeviceType.Unset()
}

// GetPartitionSlice returns the PartitionSlice field value if set, zero value otherwise.
func (o *DeviceTreeChildDevice) GetPartitionSlice() DeviceTreePartitionSlice {
	if o == nil || o.PartitionSlice == nil {
		var ret DeviceTreePartitionSlice
		return ret
	}
	return *o.PartitionSlice
}

// GetPartitionSliceOk returns a tuple with the PartitionSlice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceTreeChildDevice) GetPartitionSliceOk() (*DeviceTreePartitionSlice, bool) {
	if o == nil || o.PartitionSlice == nil {
		return nil, false
	}
	return o.PartitionSlice, true
}

// HasPartitionSlice returns a boolean if a field has been set.
func (o *DeviceTreeChildDevice) HasPartitionSlice() bool {
	if o != nil && o.PartitionSlice != nil {
		return true
	}

	return false
}

// SetPartitionSlice gets a reference to the given DeviceTreePartitionSlice and assigns it to the PartitionSlice field.
func (o *DeviceTreeChildDevice) SetPartitionSlice(v DeviceTreePartitionSlice) {
	o.PartitionSlice = &v
}

func (o DeviceTreeChildDevice) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Device != nil {
		toSerialize["device"] = o.Device
	}
	if o.DeviceType.IsSet() {
		toSerialize["deviceType"] = o.DeviceType.Get()
	}
	if o.PartitionSlice != nil {
		toSerialize["partitionSlice"] = o.PartitionSlice
	}
	return json.Marshal(toSerialize)
}

type NullableDeviceTreeChildDevice struct {
	value *DeviceTreeChildDevice
	isSet bool
}

func (v NullableDeviceTreeChildDevice) Get() *DeviceTreeChildDevice {
	return v.value
}

func (v *NullableDeviceTreeChildDevice) Set(val *DeviceTreeChildDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceTreeChildDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceTreeChildDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceTreeChildDevice(val *DeviceTreeChildDevice) *NullableDeviceTreeChildDevice {
	return &NullableDeviceTreeChildDevice{value: val, isSet: true}
}

func (v NullableDeviceTreeChildDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceTreeChildDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


