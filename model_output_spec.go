/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// OutputSpec struct for OutputSpec
type OutputSpec struct {
	// Number of reduce shards.
	NumReduceShards NullableInt32 `json:"numReduceShards,omitempty"`
	// Name of output directory.
	OutputDir NullableString `json:"outputDir,omitempty"`
	// Partition id where output will go.
	PartitionId NullableInt64 `json:"partitionId,omitempty"`
	// Prefix of the reduce output files. File names will be: ${reduce_output_prefix}-00000-of-00100 if num_reduce_shards=100 This name can contain some path components. e.g. \"awb_results/run1\" is a valid value. output_dir is deprecated.
	ReduceOutputPrefix NullableString `json:"reduceOutputPrefix,omitempty"`
	// Viewbox id where the output will go.
	ViewBoxId NullableInt64 `json:"viewBoxId,omitempty"`
	// Name of the view where output will go. This will be filled up by yoda.
	ViewName NullableString `json:"viewName,omitempty"`
}

// NewOutputSpec instantiates a new OutputSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOutputSpec() *OutputSpec {
	this := OutputSpec{}
	return &this
}

// NewOutputSpecWithDefaults instantiates a new OutputSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOutputSpecWithDefaults() *OutputSpec {
	this := OutputSpec{}
	return &this
}

// GetNumReduceShards returns the NumReduceShards field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OutputSpec) GetNumReduceShards() int32 {
	if o == nil || o.NumReduceShards.Get() == nil {
		var ret int32
		return ret
	}
	return *o.NumReduceShards.Get()
}

// GetNumReduceShardsOk returns a tuple with the NumReduceShards field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OutputSpec) GetNumReduceShardsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumReduceShards.Get(), o.NumReduceShards.IsSet()
}

// HasNumReduceShards returns a boolean if a field has been set.
func (o *OutputSpec) HasNumReduceShards() bool {
	if o != nil && o.NumReduceShards.IsSet() {
		return true
	}

	return false
}

// SetNumReduceShards gets a reference to the given NullableInt32 and assigns it to the NumReduceShards field.
func (o *OutputSpec) SetNumReduceShards(v int32) {
	o.NumReduceShards.Set(&v)
}
// SetNumReduceShardsNil sets the value for NumReduceShards to be an explicit nil
func (o *OutputSpec) SetNumReduceShardsNil() {
	o.NumReduceShards.Set(nil)
}

// UnsetNumReduceShards ensures that no value is present for NumReduceShards, not even an explicit nil
func (o *OutputSpec) UnsetNumReduceShards() {
	o.NumReduceShards.Unset()
}

// GetOutputDir returns the OutputDir field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OutputSpec) GetOutputDir() string {
	if o == nil || o.OutputDir.Get() == nil {
		var ret string
		return ret
	}
	return *o.OutputDir.Get()
}

// GetOutputDirOk returns a tuple with the OutputDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OutputSpec) GetOutputDirOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OutputDir.Get(), o.OutputDir.IsSet()
}

// HasOutputDir returns a boolean if a field has been set.
func (o *OutputSpec) HasOutputDir() bool {
	if o != nil && o.OutputDir.IsSet() {
		return true
	}

	return false
}

// SetOutputDir gets a reference to the given NullableString and assigns it to the OutputDir field.
func (o *OutputSpec) SetOutputDir(v string) {
	o.OutputDir.Set(&v)
}
// SetOutputDirNil sets the value for OutputDir to be an explicit nil
func (o *OutputSpec) SetOutputDirNil() {
	o.OutputDir.Set(nil)
}

// UnsetOutputDir ensures that no value is present for OutputDir, not even an explicit nil
func (o *OutputSpec) UnsetOutputDir() {
	o.OutputDir.Unset()
}

// GetPartitionId returns the PartitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OutputSpec) GetPartitionId() int64 {
	if o == nil || o.PartitionId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.PartitionId.Get()
}

// GetPartitionIdOk returns a tuple with the PartitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OutputSpec) GetPartitionIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PartitionId.Get(), o.PartitionId.IsSet()
}

// HasPartitionId returns a boolean if a field has been set.
func (o *OutputSpec) HasPartitionId() bool {
	if o != nil && o.PartitionId.IsSet() {
		return true
	}

	return false
}

// SetPartitionId gets a reference to the given NullableInt64 and assigns it to the PartitionId field.
func (o *OutputSpec) SetPartitionId(v int64) {
	o.PartitionId.Set(&v)
}
// SetPartitionIdNil sets the value for PartitionId to be an explicit nil
func (o *OutputSpec) SetPartitionIdNil() {
	o.PartitionId.Set(nil)
}

// UnsetPartitionId ensures that no value is present for PartitionId, not even an explicit nil
func (o *OutputSpec) UnsetPartitionId() {
	o.PartitionId.Unset()
}

// GetReduceOutputPrefix returns the ReduceOutputPrefix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OutputSpec) GetReduceOutputPrefix() string {
	if o == nil || o.ReduceOutputPrefix.Get() == nil {
		var ret string
		return ret
	}
	return *o.ReduceOutputPrefix.Get()
}

// GetReduceOutputPrefixOk returns a tuple with the ReduceOutputPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OutputSpec) GetReduceOutputPrefixOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ReduceOutputPrefix.Get(), o.ReduceOutputPrefix.IsSet()
}

// HasReduceOutputPrefix returns a boolean if a field has been set.
func (o *OutputSpec) HasReduceOutputPrefix() bool {
	if o != nil && o.ReduceOutputPrefix.IsSet() {
		return true
	}

	return false
}

// SetReduceOutputPrefix gets a reference to the given NullableString and assigns it to the ReduceOutputPrefix field.
func (o *OutputSpec) SetReduceOutputPrefix(v string) {
	o.ReduceOutputPrefix.Set(&v)
}
// SetReduceOutputPrefixNil sets the value for ReduceOutputPrefix to be an explicit nil
func (o *OutputSpec) SetReduceOutputPrefixNil() {
	o.ReduceOutputPrefix.Set(nil)
}

// UnsetReduceOutputPrefix ensures that no value is present for ReduceOutputPrefix, not even an explicit nil
func (o *OutputSpec) UnsetReduceOutputPrefix() {
	o.ReduceOutputPrefix.Unset()
}

// GetViewBoxId returns the ViewBoxId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OutputSpec) GetViewBoxId() int64 {
	if o == nil || o.ViewBoxId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ViewBoxId.Get()
}

// GetViewBoxIdOk returns a tuple with the ViewBoxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OutputSpec) GetViewBoxIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewBoxId.Get(), o.ViewBoxId.IsSet()
}

// HasViewBoxId returns a boolean if a field has been set.
func (o *OutputSpec) HasViewBoxId() bool {
	if o != nil && o.ViewBoxId.IsSet() {
		return true
	}

	return false
}

// SetViewBoxId gets a reference to the given NullableInt64 and assigns it to the ViewBoxId field.
func (o *OutputSpec) SetViewBoxId(v int64) {
	o.ViewBoxId.Set(&v)
}
// SetViewBoxIdNil sets the value for ViewBoxId to be an explicit nil
func (o *OutputSpec) SetViewBoxIdNil() {
	o.ViewBoxId.Set(nil)
}

// UnsetViewBoxId ensures that no value is present for ViewBoxId, not even an explicit nil
func (o *OutputSpec) UnsetViewBoxId() {
	o.ViewBoxId.Unset()
}

// GetViewName returns the ViewName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OutputSpec) GetViewName() string {
	if o == nil || o.ViewName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ViewName.Get()
}

// GetViewNameOk returns a tuple with the ViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OutputSpec) GetViewNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewName.Get(), o.ViewName.IsSet()
}

// HasViewName returns a boolean if a field has been set.
func (o *OutputSpec) HasViewName() bool {
	if o != nil && o.ViewName.IsSet() {
		return true
	}

	return false
}

// SetViewName gets a reference to the given NullableString and assigns it to the ViewName field.
func (o *OutputSpec) SetViewName(v string) {
	o.ViewName.Set(&v)
}
// SetViewNameNil sets the value for ViewName to be an explicit nil
func (o *OutputSpec) SetViewNameNil() {
	o.ViewName.Set(nil)
}

// UnsetViewName ensures that no value is present for ViewName, not even an explicit nil
func (o *OutputSpec) UnsetViewName() {
	o.ViewName.Unset()
}

func (o OutputSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NumReduceShards.IsSet() {
		toSerialize["numReduceShards"] = o.NumReduceShards.Get()
	}
	if o.OutputDir.IsSet() {
		toSerialize["outputDir"] = o.OutputDir.Get()
	}
	if o.PartitionId.IsSet() {
		toSerialize["partitionId"] = o.PartitionId.Get()
	}
	if o.ReduceOutputPrefix.IsSet() {
		toSerialize["reduceOutputPrefix"] = o.ReduceOutputPrefix.Get()
	}
	if o.ViewBoxId.IsSet() {
		toSerialize["viewBoxId"] = o.ViewBoxId.Get()
	}
	if o.ViewName.IsSet() {
		toSerialize["viewName"] = o.ViewName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableOutputSpec struct {
	value *OutputSpec
	isSet bool
}

func (v NullableOutputSpec) Get() *OutputSpec {
	return v.value
}

func (v *NullableOutputSpec) Set(val *OutputSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableOutputSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableOutputSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutputSpec(val *OutputSpec) *NullableOutputSpec {
	return &NullableOutputSpec{value: val, isSet: true}
}

func (v NullableOutputSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutputSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


