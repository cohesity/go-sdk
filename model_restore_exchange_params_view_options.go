/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// RestoreExchangeParamsViewOptions struct for RestoreExchangeParamsViewOptions
type RestoreExchangeParamsViewOptions struct {
	// The path to access the SMB share.
	MountPoint NullableString `json:"mountPoint,omitempty"`
	// View to which the files of an Exchange database have to be cloned.
	ViewName NullableString `json:"viewName,omitempty"`
	// If set to true then when restore view is cloned then white-list all IPs not just the agent IP.
	WhitelistRestoreViewForAll NullableBool `json:"whitelistRestoreViewForAll,omitempty"`
}

// NewRestoreExchangeParamsViewOptions instantiates a new RestoreExchangeParamsViewOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreExchangeParamsViewOptions() *RestoreExchangeParamsViewOptions {
	this := RestoreExchangeParamsViewOptions{}
	return &this
}

// NewRestoreExchangeParamsViewOptionsWithDefaults instantiates a new RestoreExchangeParamsViewOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreExchangeParamsViewOptionsWithDefaults() *RestoreExchangeParamsViewOptions {
	this := RestoreExchangeParamsViewOptions{}
	return &this
}

// GetMountPoint returns the MountPoint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreExchangeParamsViewOptions) GetMountPoint() string {
	if o == nil || o.MountPoint.Get() == nil {
		var ret string
		return ret
	}
	return *o.MountPoint.Get()
}

// GetMountPointOk returns a tuple with the MountPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreExchangeParamsViewOptions) GetMountPointOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MountPoint.Get(), o.MountPoint.IsSet()
}

// HasMountPoint returns a boolean if a field has been set.
func (o *RestoreExchangeParamsViewOptions) HasMountPoint() bool {
	if o != nil && o.MountPoint.IsSet() {
		return true
	}

	return false
}

// SetMountPoint gets a reference to the given NullableString and assigns it to the MountPoint field.
func (o *RestoreExchangeParamsViewOptions) SetMountPoint(v string) {
	o.MountPoint.Set(&v)
}
// SetMountPointNil sets the value for MountPoint to be an explicit nil
func (o *RestoreExchangeParamsViewOptions) SetMountPointNil() {
	o.MountPoint.Set(nil)
}

// UnsetMountPoint ensures that no value is present for MountPoint, not even an explicit nil
func (o *RestoreExchangeParamsViewOptions) UnsetMountPoint() {
	o.MountPoint.Unset()
}

// GetViewName returns the ViewName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreExchangeParamsViewOptions) GetViewName() string {
	if o == nil || o.ViewName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ViewName.Get()
}

// GetViewNameOk returns a tuple with the ViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreExchangeParamsViewOptions) GetViewNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewName.Get(), o.ViewName.IsSet()
}

// HasViewName returns a boolean if a field has been set.
func (o *RestoreExchangeParamsViewOptions) HasViewName() bool {
	if o != nil && o.ViewName.IsSet() {
		return true
	}

	return false
}

// SetViewName gets a reference to the given NullableString and assigns it to the ViewName field.
func (o *RestoreExchangeParamsViewOptions) SetViewName(v string) {
	o.ViewName.Set(&v)
}
// SetViewNameNil sets the value for ViewName to be an explicit nil
func (o *RestoreExchangeParamsViewOptions) SetViewNameNil() {
	o.ViewName.Set(nil)
}

// UnsetViewName ensures that no value is present for ViewName, not even an explicit nil
func (o *RestoreExchangeParamsViewOptions) UnsetViewName() {
	o.ViewName.Unset()
}

// GetWhitelistRestoreViewForAll returns the WhitelistRestoreViewForAll field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreExchangeParamsViewOptions) GetWhitelistRestoreViewForAll() bool {
	if o == nil || o.WhitelistRestoreViewForAll.Get() == nil {
		var ret bool
		return ret
	}
	return *o.WhitelistRestoreViewForAll.Get()
}

// GetWhitelistRestoreViewForAllOk returns a tuple with the WhitelistRestoreViewForAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreExchangeParamsViewOptions) GetWhitelistRestoreViewForAllOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.WhitelistRestoreViewForAll.Get(), o.WhitelistRestoreViewForAll.IsSet()
}

// HasWhitelistRestoreViewForAll returns a boolean if a field has been set.
func (o *RestoreExchangeParamsViewOptions) HasWhitelistRestoreViewForAll() bool {
	if o != nil && o.WhitelistRestoreViewForAll.IsSet() {
		return true
	}

	return false
}

// SetWhitelistRestoreViewForAll gets a reference to the given NullableBool and assigns it to the WhitelistRestoreViewForAll field.
func (o *RestoreExchangeParamsViewOptions) SetWhitelistRestoreViewForAll(v bool) {
	o.WhitelistRestoreViewForAll.Set(&v)
}
// SetWhitelistRestoreViewForAllNil sets the value for WhitelistRestoreViewForAll to be an explicit nil
func (o *RestoreExchangeParamsViewOptions) SetWhitelistRestoreViewForAllNil() {
	o.WhitelistRestoreViewForAll.Set(nil)
}

// UnsetWhitelistRestoreViewForAll ensures that no value is present for WhitelistRestoreViewForAll, not even an explicit nil
func (o *RestoreExchangeParamsViewOptions) UnsetWhitelistRestoreViewForAll() {
	o.WhitelistRestoreViewForAll.Unset()
}

func (o RestoreExchangeParamsViewOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MountPoint.IsSet() {
		toSerialize["mountPoint"] = o.MountPoint.Get()
	}
	if o.ViewName.IsSet() {
		toSerialize["viewName"] = o.ViewName.Get()
	}
	if o.WhitelistRestoreViewForAll.IsSet() {
		toSerialize["whitelistRestoreViewForAll"] = o.WhitelistRestoreViewForAll.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRestoreExchangeParamsViewOptions struct {
	value *RestoreExchangeParamsViewOptions
	isSet bool
}

func (v NullableRestoreExchangeParamsViewOptions) Get() *RestoreExchangeParamsViewOptions {
	return v.value
}

func (v *NullableRestoreExchangeParamsViewOptions) Set(val *RestoreExchangeParamsViewOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreExchangeParamsViewOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreExchangeParamsViewOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreExchangeParamsViewOptions(val *RestoreExchangeParamsViewOptions) *NullableRestoreExchangeParamsViewOptions {
	return &NullableRestoreExchangeParamsViewOptions{value: val, isSet: true}
}

func (v NullableRestoreExchangeParamsViewOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreExchangeParamsViewOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


