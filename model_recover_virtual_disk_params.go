/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// RecoverVirtualDiskParams struct for RecoverVirtualDiskParams
type RecoverVirtualDiskParams struct {
	// Whether to power-off the VM before recovering virtual disks.
	PowerOffVmBeforeRecovery NullableBool `json:"powerOffVmBeforeRecovery,omitempty"`
	// Whether to power-on the VM after recovering virtual disks.
	PowerOnVmAfterRecovery NullableBool `json:"powerOnVmAfterRecovery,omitempty"`
	TargetEntity *EntityProto `json:"targetEntity,omitempty"`
	VirtualDiskMappings []RecoverVirtualDiskParamsVirtualDiskMapping `json:"virtualDiskMappings,omitempty"`
}

// NewRecoverVirtualDiskParams instantiates a new RecoverVirtualDiskParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverVirtualDiskParams() *RecoverVirtualDiskParams {
	this := RecoverVirtualDiskParams{}
	return &this
}

// NewRecoverVirtualDiskParamsWithDefaults instantiates a new RecoverVirtualDiskParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverVirtualDiskParamsWithDefaults() *RecoverVirtualDiskParams {
	this := RecoverVirtualDiskParams{}
	return &this
}

// GetPowerOffVmBeforeRecovery returns the PowerOffVmBeforeRecovery field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVirtualDiskParams) GetPowerOffVmBeforeRecovery() bool {
	if o == nil || o.PowerOffVmBeforeRecovery.Get() == nil {
		var ret bool
		return ret
	}
	return *o.PowerOffVmBeforeRecovery.Get()
}

// GetPowerOffVmBeforeRecoveryOk returns a tuple with the PowerOffVmBeforeRecovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVirtualDiskParams) GetPowerOffVmBeforeRecoveryOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PowerOffVmBeforeRecovery.Get(), o.PowerOffVmBeforeRecovery.IsSet()
}

// HasPowerOffVmBeforeRecovery returns a boolean if a field has been set.
func (o *RecoverVirtualDiskParams) HasPowerOffVmBeforeRecovery() bool {
	if o != nil && o.PowerOffVmBeforeRecovery.IsSet() {
		return true
	}

	return false
}

// SetPowerOffVmBeforeRecovery gets a reference to the given NullableBool and assigns it to the PowerOffVmBeforeRecovery field.
func (o *RecoverVirtualDiskParams) SetPowerOffVmBeforeRecovery(v bool) {
	o.PowerOffVmBeforeRecovery.Set(&v)
}
// SetPowerOffVmBeforeRecoveryNil sets the value for PowerOffVmBeforeRecovery to be an explicit nil
func (o *RecoverVirtualDiskParams) SetPowerOffVmBeforeRecoveryNil() {
	o.PowerOffVmBeforeRecovery.Set(nil)
}

// UnsetPowerOffVmBeforeRecovery ensures that no value is present for PowerOffVmBeforeRecovery, not even an explicit nil
func (o *RecoverVirtualDiskParams) UnsetPowerOffVmBeforeRecovery() {
	o.PowerOffVmBeforeRecovery.Unset()
}

// GetPowerOnVmAfterRecovery returns the PowerOnVmAfterRecovery field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVirtualDiskParams) GetPowerOnVmAfterRecovery() bool {
	if o == nil || o.PowerOnVmAfterRecovery.Get() == nil {
		var ret bool
		return ret
	}
	return *o.PowerOnVmAfterRecovery.Get()
}

// GetPowerOnVmAfterRecoveryOk returns a tuple with the PowerOnVmAfterRecovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVirtualDiskParams) GetPowerOnVmAfterRecoveryOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PowerOnVmAfterRecovery.Get(), o.PowerOnVmAfterRecovery.IsSet()
}

// HasPowerOnVmAfterRecovery returns a boolean if a field has been set.
func (o *RecoverVirtualDiskParams) HasPowerOnVmAfterRecovery() bool {
	if o != nil && o.PowerOnVmAfterRecovery.IsSet() {
		return true
	}

	return false
}

// SetPowerOnVmAfterRecovery gets a reference to the given NullableBool and assigns it to the PowerOnVmAfterRecovery field.
func (o *RecoverVirtualDiskParams) SetPowerOnVmAfterRecovery(v bool) {
	o.PowerOnVmAfterRecovery.Set(&v)
}
// SetPowerOnVmAfterRecoveryNil sets the value for PowerOnVmAfterRecovery to be an explicit nil
func (o *RecoverVirtualDiskParams) SetPowerOnVmAfterRecoveryNil() {
	o.PowerOnVmAfterRecovery.Set(nil)
}

// UnsetPowerOnVmAfterRecovery ensures that no value is present for PowerOnVmAfterRecovery, not even an explicit nil
func (o *RecoverVirtualDiskParams) UnsetPowerOnVmAfterRecovery() {
	o.PowerOnVmAfterRecovery.Unset()
}

// GetTargetEntity returns the TargetEntity field value if set, zero value otherwise.
func (o *RecoverVirtualDiskParams) GetTargetEntity() EntityProto {
	if o == nil || o.TargetEntity == nil {
		var ret EntityProto
		return ret
	}
	return *o.TargetEntity
}

// GetTargetEntityOk returns a tuple with the TargetEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecoverVirtualDiskParams) GetTargetEntityOk() (*EntityProto, bool) {
	if o == nil || o.TargetEntity == nil {
		return nil, false
	}
	return o.TargetEntity, true
}

// HasTargetEntity returns a boolean if a field has been set.
func (o *RecoverVirtualDiskParams) HasTargetEntity() bool {
	if o != nil && o.TargetEntity != nil {
		return true
	}

	return false
}

// SetTargetEntity gets a reference to the given EntityProto and assigns it to the TargetEntity field.
func (o *RecoverVirtualDiskParams) SetTargetEntity(v EntityProto) {
	o.TargetEntity = &v
}

// GetVirtualDiskMappings returns the VirtualDiskMappings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVirtualDiskParams) GetVirtualDiskMappings() []RecoverVirtualDiskParamsVirtualDiskMapping {
	if o == nil  {
		var ret []RecoverVirtualDiskParamsVirtualDiskMapping
		return ret
	}
	return o.VirtualDiskMappings
}

// GetVirtualDiskMappingsOk returns a tuple with the VirtualDiskMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVirtualDiskParams) GetVirtualDiskMappingsOk() (*[]RecoverVirtualDiskParamsVirtualDiskMapping, bool) {
	if o == nil || o.VirtualDiskMappings == nil {
		return nil, false
	}
	return &o.VirtualDiskMappings, true
}

// HasVirtualDiskMappings returns a boolean if a field has been set.
func (o *RecoverVirtualDiskParams) HasVirtualDiskMappings() bool {
	if o != nil && o.VirtualDiskMappings != nil {
		return true
	}

	return false
}

// SetVirtualDiskMappings gets a reference to the given []RecoverVirtualDiskParamsVirtualDiskMapping and assigns it to the VirtualDiskMappings field.
func (o *RecoverVirtualDiskParams) SetVirtualDiskMappings(v []RecoverVirtualDiskParamsVirtualDiskMapping) {
	o.VirtualDiskMappings = v
}

func (o RecoverVirtualDiskParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PowerOffVmBeforeRecovery.IsSet() {
		toSerialize["powerOffVmBeforeRecovery"] = o.PowerOffVmBeforeRecovery.Get()
	}
	if o.PowerOnVmAfterRecovery.IsSet() {
		toSerialize["powerOnVmAfterRecovery"] = o.PowerOnVmAfterRecovery.Get()
	}
	if o.TargetEntity != nil {
		toSerialize["targetEntity"] = o.TargetEntity
	}
	if o.VirtualDiskMappings != nil {
		toSerialize["virtualDiskMappings"] = o.VirtualDiskMappings
	}
	return json.Marshal(toSerialize)
}

type NullableRecoverVirtualDiskParams struct {
	value *RecoverVirtualDiskParams
	isSet bool
}

func (v NullableRecoverVirtualDiskParams) Get() *RecoverVirtualDiskParams {
	return v.value
}

func (v *NullableRecoverVirtualDiskParams) Set(val *RecoverVirtualDiskParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverVirtualDiskParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverVirtualDiskParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverVirtualDiskParams(val *RecoverVirtualDiskParams) *NullableRecoverVirtualDiskParams {
	return &NullableRecoverVirtualDiskParams{value: val, isSet: true}
}

func (v NullableRecoverVirtualDiskParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverVirtualDiskParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


