/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// CopySnapshotTaskStatus Specifies the status of the copy task that copies the snapshot of a Protection Source object to a target.
type CopySnapshotTaskStatus struct {
	// Specifies if an error occurred (if any) while running this task. This field is populated when the status is equal to 'kFailure'.
	Error NullableString `json:"error,omitempty"`
	Source *ProtectionSource `json:"source,omitempty"`
	Stats *CopyRunStats `json:"stats,omitempty"`
	// Specifies the status of the source object being protected. 'kAccepted' indicates the task is queued to run but not yet running. 'kRunning' indicates the task is running. 'kCanceling' indicates a request to cancel the task has occurred but the task is not yet canceled. 'kCanceled' indicates the task has been canceled. 'kSuccess' indicates the task was successful. 'kFailure' indicates the task failed. 'kWarning' indicates the task has finished with warning. 'kOnHold' indicates the task is kept onHold. 'kMissed' indicates the task is missed.
	Status NullableString `json:"status,omitempty"`
	// Specifies the end time of the copy task. The end time is specified as a Unix epoch Timestamp (in microseconds).
	TaskEndTimeUsecs NullableInt64 `json:"taskEndTimeUsecs,omitempty"`
	// Specifies the start time of the copy task. The start time is specified as a Unix epoch Timestamp (in microseconds). Copy run task is started after completing backup tasks. It may spawn sub-tasks to copy or replicate individual snapshots.
	TaskStartTimeUsecs NullableInt64 `json:"taskStartTimeUsecs,omitempty"`
}

// NewCopySnapshotTaskStatus instantiates a new CopySnapshotTaskStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCopySnapshotTaskStatus() *CopySnapshotTaskStatus {
	this := CopySnapshotTaskStatus{}
	return &this
}

// NewCopySnapshotTaskStatusWithDefaults instantiates a new CopySnapshotTaskStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCopySnapshotTaskStatusWithDefaults() *CopySnapshotTaskStatus {
	this := CopySnapshotTaskStatus{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CopySnapshotTaskStatus) GetError() string {
	if o == nil || o.Error.Get() == nil {
		var ret string
		return ret
	}
	return *o.Error.Get()
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CopySnapshotTaskStatus) GetErrorOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Error.Get(), o.Error.IsSet()
}

// HasError returns a boolean if a field has been set.
func (o *CopySnapshotTaskStatus) HasError() bool {
	if o != nil && o.Error.IsSet() {
		return true
	}

	return false
}

// SetError gets a reference to the given NullableString and assigns it to the Error field.
func (o *CopySnapshotTaskStatus) SetError(v string) {
	o.Error.Set(&v)
}
// SetErrorNil sets the value for Error to be an explicit nil
func (o *CopySnapshotTaskStatus) SetErrorNil() {
	o.Error.Set(nil)
}

// UnsetError ensures that no value is present for Error, not even an explicit nil
func (o *CopySnapshotTaskStatus) UnsetError() {
	o.Error.Unset()
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *CopySnapshotTaskStatus) GetSource() ProtectionSource {
	if o == nil || o.Source == nil {
		var ret ProtectionSource
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopySnapshotTaskStatus) GetSourceOk() (*ProtectionSource, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *CopySnapshotTaskStatus) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given ProtectionSource and assigns it to the Source field.
func (o *CopySnapshotTaskStatus) SetSource(v ProtectionSource) {
	o.Source = &v
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *CopySnapshotTaskStatus) GetStats() CopyRunStats {
	if o == nil || o.Stats == nil {
		var ret CopyRunStats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopySnapshotTaskStatus) GetStatsOk() (*CopyRunStats, bool) {
	if o == nil || o.Stats == nil {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *CopySnapshotTaskStatus) HasStats() bool {
	if o != nil && o.Stats != nil {
		return true
	}

	return false
}

// SetStats gets a reference to the given CopyRunStats and assigns it to the Stats field.
func (o *CopySnapshotTaskStatus) SetStats(v CopyRunStats) {
	o.Stats = &v
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CopySnapshotTaskStatus) GetStatus() string {
	if o == nil || o.Status.Get() == nil {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CopySnapshotTaskStatus) GetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *CopySnapshotTaskStatus) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *CopySnapshotTaskStatus) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *CopySnapshotTaskStatus) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *CopySnapshotTaskStatus) UnsetStatus() {
	o.Status.Unset()
}

// GetTaskEndTimeUsecs returns the TaskEndTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CopySnapshotTaskStatus) GetTaskEndTimeUsecs() int64 {
	if o == nil || o.TaskEndTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TaskEndTimeUsecs.Get()
}

// GetTaskEndTimeUsecsOk returns a tuple with the TaskEndTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CopySnapshotTaskStatus) GetTaskEndTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TaskEndTimeUsecs.Get(), o.TaskEndTimeUsecs.IsSet()
}

// HasTaskEndTimeUsecs returns a boolean if a field has been set.
func (o *CopySnapshotTaskStatus) HasTaskEndTimeUsecs() bool {
	if o != nil && o.TaskEndTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetTaskEndTimeUsecs gets a reference to the given NullableInt64 and assigns it to the TaskEndTimeUsecs field.
func (o *CopySnapshotTaskStatus) SetTaskEndTimeUsecs(v int64) {
	o.TaskEndTimeUsecs.Set(&v)
}
// SetTaskEndTimeUsecsNil sets the value for TaskEndTimeUsecs to be an explicit nil
func (o *CopySnapshotTaskStatus) SetTaskEndTimeUsecsNil() {
	o.TaskEndTimeUsecs.Set(nil)
}

// UnsetTaskEndTimeUsecs ensures that no value is present for TaskEndTimeUsecs, not even an explicit nil
func (o *CopySnapshotTaskStatus) UnsetTaskEndTimeUsecs() {
	o.TaskEndTimeUsecs.Unset()
}

// GetTaskStartTimeUsecs returns the TaskStartTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CopySnapshotTaskStatus) GetTaskStartTimeUsecs() int64 {
	if o == nil || o.TaskStartTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TaskStartTimeUsecs.Get()
}

// GetTaskStartTimeUsecsOk returns a tuple with the TaskStartTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CopySnapshotTaskStatus) GetTaskStartTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TaskStartTimeUsecs.Get(), o.TaskStartTimeUsecs.IsSet()
}

// HasTaskStartTimeUsecs returns a boolean if a field has been set.
func (o *CopySnapshotTaskStatus) HasTaskStartTimeUsecs() bool {
	if o != nil && o.TaskStartTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetTaskStartTimeUsecs gets a reference to the given NullableInt64 and assigns it to the TaskStartTimeUsecs field.
func (o *CopySnapshotTaskStatus) SetTaskStartTimeUsecs(v int64) {
	o.TaskStartTimeUsecs.Set(&v)
}
// SetTaskStartTimeUsecsNil sets the value for TaskStartTimeUsecs to be an explicit nil
func (o *CopySnapshotTaskStatus) SetTaskStartTimeUsecsNil() {
	o.TaskStartTimeUsecs.Set(nil)
}

// UnsetTaskStartTimeUsecs ensures that no value is present for TaskStartTimeUsecs, not even an explicit nil
func (o *CopySnapshotTaskStatus) UnsetTaskStartTimeUsecs() {
	o.TaskStartTimeUsecs.Unset()
}

func (o CopySnapshotTaskStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Error.IsSet() {
		toSerialize["error"] = o.Error.Get()
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if o.Stats != nil {
		toSerialize["stats"] = o.Stats
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.TaskEndTimeUsecs.IsSet() {
		toSerialize["taskEndTimeUsecs"] = o.TaskEndTimeUsecs.Get()
	}
	if o.TaskStartTimeUsecs.IsSet() {
		toSerialize["taskStartTimeUsecs"] = o.TaskStartTimeUsecs.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCopySnapshotTaskStatus struct {
	value *CopySnapshotTaskStatus
	isSet bool
}

func (v NullableCopySnapshotTaskStatus) Get() *CopySnapshotTaskStatus {
	return v.value
}

func (v *NullableCopySnapshotTaskStatus) Set(val *CopySnapshotTaskStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCopySnapshotTaskStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCopySnapshotTaskStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCopySnapshotTaskStatus(val *CopySnapshotTaskStatus) *NullableCopySnapshotTaskStatus {
	return &NullableCopySnapshotTaskStatus{value: val, isSet: true}
}

func (v NullableCopySnapshotTaskStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCopySnapshotTaskStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


