/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ADAttributeRestoreParam struct for ADAttributeRestoreParam
type ADAttributeRestoreParam struct {
	// Array of LDAP property names to excluded from 'property_vec'. Excluded property name cannot contain wildcard character '*'.  Property names are case insensitive.
	ExcludedPropertyVec []string `json:"excludedPropertyVec,omitempty"`
	// Array of source and destination object guid pairs to restore attributes. Pair source guid refers to guid in AD snapshot in source_server endpoint. Destination guid refers to guid in production AD. If destination guid is empty, then source guid in AD snapshot should exist in production AD.
	GuidpairVec []ADGuidPair `json:"guidpairVec,omitempty"`
	// Attribute restore option flags of type ADAttributeOptionFlags.
	OptionFlags NullableInt32 `json:"optionFlags,omitempty"`
	// Array of LDAP property(attribute) names. The name can be standard or custom property defined in AD schema partition. The property can contain wildcard character '*'. If this array is empty, then '*' is assigned, means restore all properties except default system excluded properties. Wildcards will be expanded. If 'memberOf' property is included, group membership of the objects specified in 'guid_vec' will be restored. Property that does not exist for an object is ignored and no error info is returned for that property. Property names are case insensitive. Caller may check the ADAttributeFlags.kSystem obtained during object compare to exclude system properties.
	PropertyVec []string `json:"propertyVec,omitempty"`
	// When restoring a GPO, need to know the absolute path for SYSVOL folder.
	SrcSysvolFolder NullableString `json:"srcSysvolFolder,omitempty"`
}

// NewADAttributeRestoreParam instantiates a new ADAttributeRestoreParam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewADAttributeRestoreParam() *ADAttributeRestoreParam {
	this := ADAttributeRestoreParam{}
	return &this
}

// NewADAttributeRestoreParamWithDefaults instantiates a new ADAttributeRestoreParam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewADAttributeRestoreParamWithDefaults() *ADAttributeRestoreParam {
	this := ADAttributeRestoreParam{}
	return &this
}

// GetExcludedPropertyVec returns the ExcludedPropertyVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ADAttributeRestoreParam) GetExcludedPropertyVec() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.ExcludedPropertyVec
}

// GetExcludedPropertyVecOk returns a tuple with the ExcludedPropertyVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ADAttributeRestoreParam) GetExcludedPropertyVecOk() (*[]string, bool) {
	if o == nil || o.ExcludedPropertyVec == nil {
		return nil, false
	}
	return &o.ExcludedPropertyVec, true
}

// HasExcludedPropertyVec returns a boolean if a field has been set.
func (o *ADAttributeRestoreParam) HasExcludedPropertyVec() bool {
	if o != nil && o.ExcludedPropertyVec != nil {
		return true
	}

	return false
}

// SetExcludedPropertyVec gets a reference to the given []string and assigns it to the ExcludedPropertyVec field.
func (o *ADAttributeRestoreParam) SetExcludedPropertyVec(v []string) {
	o.ExcludedPropertyVec = v
}

// GetGuidpairVec returns the GuidpairVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ADAttributeRestoreParam) GetGuidpairVec() []ADGuidPair {
	if o == nil  {
		var ret []ADGuidPair
		return ret
	}
	return o.GuidpairVec
}

// GetGuidpairVecOk returns a tuple with the GuidpairVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ADAttributeRestoreParam) GetGuidpairVecOk() (*[]ADGuidPair, bool) {
	if o == nil || o.GuidpairVec == nil {
		return nil, false
	}
	return &o.GuidpairVec, true
}

// HasGuidpairVec returns a boolean if a field has been set.
func (o *ADAttributeRestoreParam) HasGuidpairVec() bool {
	if o != nil && o.GuidpairVec != nil {
		return true
	}

	return false
}

// SetGuidpairVec gets a reference to the given []ADGuidPair and assigns it to the GuidpairVec field.
func (o *ADAttributeRestoreParam) SetGuidpairVec(v []ADGuidPair) {
	o.GuidpairVec = v
}

// GetOptionFlags returns the OptionFlags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ADAttributeRestoreParam) GetOptionFlags() int32 {
	if o == nil || o.OptionFlags.Get() == nil {
		var ret int32
		return ret
	}
	return *o.OptionFlags.Get()
}

// GetOptionFlagsOk returns a tuple with the OptionFlags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ADAttributeRestoreParam) GetOptionFlagsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OptionFlags.Get(), o.OptionFlags.IsSet()
}

// HasOptionFlags returns a boolean if a field has been set.
func (o *ADAttributeRestoreParam) HasOptionFlags() bool {
	if o != nil && o.OptionFlags.IsSet() {
		return true
	}

	return false
}

// SetOptionFlags gets a reference to the given NullableInt32 and assigns it to the OptionFlags field.
func (o *ADAttributeRestoreParam) SetOptionFlags(v int32) {
	o.OptionFlags.Set(&v)
}
// SetOptionFlagsNil sets the value for OptionFlags to be an explicit nil
func (o *ADAttributeRestoreParam) SetOptionFlagsNil() {
	o.OptionFlags.Set(nil)
}

// UnsetOptionFlags ensures that no value is present for OptionFlags, not even an explicit nil
func (o *ADAttributeRestoreParam) UnsetOptionFlags() {
	o.OptionFlags.Unset()
}

// GetPropertyVec returns the PropertyVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ADAttributeRestoreParam) GetPropertyVec() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.PropertyVec
}

// GetPropertyVecOk returns a tuple with the PropertyVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ADAttributeRestoreParam) GetPropertyVecOk() (*[]string, bool) {
	if o == nil || o.PropertyVec == nil {
		return nil, false
	}
	return &o.PropertyVec, true
}

// HasPropertyVec returns a boolean if a field has been set.
func (o *ADAttributeRestoreParam) HasPropertyVec() bool {
	if o != nil && o.PropertyVec != nil {
		return true
	}

	return false
}

// SetPropertyVec gets a reference to the given []string and assigns it to the PropertyVec field.
func (o *ADAttributeRestoreParam) SetPropertyVec(v []string) {
	o.PropertyVec = v
}

// GetSrcSysvolFolder returns the SrcSysvolFolder field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ADAttributeRestoreParam) GetSrcSysvolFolder() string {
	if o == nil || o.SrcSysvolFolder.Get() == nil {
		var ret string
		return ret
	}
	return *o.SrcSysvolFolder.Get()
}

// GetSrcSysvolFolderOk returns a tuple with the SrcSysvolFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ADAttributeRestoreParam) GetSrcSysvolFolderOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SrcSysvolFolder.Get(), o.SrcSysvolFolder.IsSet()
}

// HasSrcSysvolFolder returns a boolean if a field has been set.
func (o *ADAttributeRestoreParam) HasSrcSysvolFolder() bool {
	if o != nil && o.SrcSysvolFolder.IsSet() {
		return true
	}

	return false
}

// SetSrcSysvolFolder gets a reference to the given NullableString and assigns it to the SrcSysvolFolder field.
func (o *ADAttributeRestoreParam) SetSrcSysvolFolder(v string) {
	o.SrcSysvolFolder.Set(&v)
}
// SetSrcSysvolFolderNil sets the value for SrcSysvolFolder to be an explicit nil
func (o *ADAttributeRestoreParam) SetSrcSysvolFolderNil() {
	o.SrcSysvolFolder.Set(nil)
}

// UnsetSrcSysvolFolder ensures that no value is present for SrcSysvolFolder, not even an explicit nil
func (o *ADAttributeRestoreParam) UnsetSrcSysvolFolder() {
	o.SrcSysvolFolder.Unset()
}

func (o ADAttributeRestoreParam) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExcludedPropertyVec != nil {
		toSerialize["excludedPropertyVec"] = o.ExcludedPropertyVec
	}
	if o.GuidpairVec != nil {
		toSerialize["guidpairVec"] = o.GuidpairVec
	}
	if o.OptionFlags.IsSet() {
		toSerialize["optionFlags"] = o.OptionFlags.Get()
	}
	if o.PropertyVec != nil {
		toSerialize["propertyVec"] = o.PropertyVec
	}
	if o.SrcSysvolFolder.IsSet() {
		toSerialize["srcSysvolFolder"] = o.SrcSysvolFolder.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableADAttributeRestoreParam struct {
	value *ADAttributeRestoreParam
	isSet bool
}

func (v NullableADAttributeRestoreParam) Get() *ADAttributeRestoreParam {
	return v.value
}

func (v *NullableADAttributeRestoreParam) Set(val *ADAttributeRestoreParam) {
	v.value = val
	v.isSet = true
}

func (v NullableADAttributeRestoreParam) IsSet() bool {
	return v.isSet
}

func (v *NullableADAttributeRestoreParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableADAttributeRestoreParam(val *ADAttributeRestoreParam) *NullableADAttributeRestoreParam {
	return &NullableADAttributeRestoreParam{value: val, isSet: true}
}

func (v NullableADAttributeRestoreParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableADAttributeRestoreParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


