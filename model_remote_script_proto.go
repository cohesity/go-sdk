/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// RemoteScriptProto Message to encapsulate the information of script that can be executed either before or after the backup is taken.
type RemoteScriptProto struct {
	RemoteHostParams *RemoteHostConnectorParams `json:"remoteHostParams,omitempty"`
	Script *ScriptPathAndParams `json:"script,omitempty"`
	Status *ScriptExecutionStatus `json:"status,omitempty"`
}

// NewRemoteScriptProto instantiates a new RemoteScriptProto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteScriptProto() *RemoteScriptProto {
	this := RemoteScriptProto{}
	return &this
}

// NewRemoteScriptProtoWithDefaults instantiates a new RemoteScriptProto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteScriptProtoWithDefaults() *RemoteScriptProto {
	this := RemoteScriptProto{}
	return &this
}

// GetRemoteHostParams returns the RemoteHostParams field value if set, zero value otherwise.
func (o *RemoteScriptProto) GetRemoteHostParams() RemoteHostConnectorParams {
	if o == nil || o.RemoteHostParams == nil {
		var ret RemoteHostConnectorParams
		return ret
	}
	return *o.RemoteHostParams
}

// GetRemoteHostParamsOk returns a tuple with the RemoteHostParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteScriptProto) GetRemoteHostParamsOk() (*RemoteHostConnectorParams, bool) {
	if o == nil || o.RemoteHostParams == nil {
		return nil, false
	}
	return o.RemoteHostParams, true
}

// HasRemoteHostParams returns a boolean if a field has been set.
func (o *RemoteScriptProto) HasRemoteHostParams() bool {
	if o != nil && o.RemoteHostParams != nil {
		return true
	}

	return false
}

// SetRemoteHostParams gets a reference to the given RemoteHostConnectorParams and assigns it to the RemoteHostParams field.
func (o *RemoteScriptProto) SetRemoteHostParams(v RemoteHostConnectorParams) {
	o.RemoteHostParams = &v
}

// GetScript returns the Script field value if set, zero value otherwise.
func (o *RemoteScriptProto) GetScript() ScriptPathAndParams {
	if o == nil || o.Script == nil {
		var ret ScriptPathAndParams
		return ret
	}
	return *o.Script
}

// GetScriptOk returns a tuple with the Script field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteScriptProto) GetScriptOk() (*ScriptPathAndParams, bool) {
	if o == nil || o.Script == nil {
		return nil, false
	}
	return o.Script, true
}

// HasScript returns a boolean if a field has been set.
func (o *RemoteScriptProto) HasScript() bool {
	if o != nil && o.Script != nil {
		return true
	}

	return false
}

// SetScript gets a reference to the given ScriptPathAndParams and assigns it to the Script field.
func (o *RemoteScriptProto) SetScript(v ScriptPathAndParams) {
	o.Script = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RemoteScriptProto) GetStatus() ScriptExecutionStatus {
	if o == nil || o.Status == nil {
		var ret ScriptExecutionStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteScriptProto) GetStatusOk() (*ScriptExecutionStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RemoteScriptProto) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ScriptExecutionStatus and assigns it to the Status field.
func (o *RemoteScriptProto) SetStatus(v ScriptExecutionStatus) {
	o.Status = &v
}

func (o RemoteScriptProto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RemoteHostParams != nil {
		toSerialize["remoteHostParams"] = o.RemoteHostParams
	}
	if o.Script != nil {
		toSerialize["script"] = o.Script
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableRemoteScriptProto struct {
	value *RemoteScriptProto
	isSet bool
}

func (v NullableRemoteScriptProto) Get() *RemoteScriptProto {
	return v.value
}

func (v *NullableRemoteScriptProto) Set(val *RemoteScriptProto) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteScriptProto) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteScriptProto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteScriptProto(val *RemoteScriptProto) *NullableRemoteScriptProto {
	return &NullableRemoteScriptProto{value: val, isSet: true}
}

func (v NullableRemoteScriptProto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteScriptProto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


