/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// RestoreTaskWrapper struct for RestoreTaskWrapper
type RestoreTaskWrapper struct {
	RestoreTask *RestoreWrapperProto `json:"restoreTask,omitempty"`
}

// NewRestoreTaskWrapper instantiates a new RestoreTaskWrapper object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreTaskWrapper() *RestoreTaskWrapper {
	this := RestoreTaskWrapper{}
	return &this
}

// NewRestoreTaskWrapperWithDefaults instantiates a new RestoreTaskWrapper object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreTaskWrapperWithDefaults() *RestoreTaskWrapper {
	this := RestoreTaskWrapper{}
	return &this
}

// GetRestoreTask returns the RestoreTask field value if set, zero value otherwise.
func (o *RestoreTaskWrapper) GetRestoreTask() RestoreWrapperProto {
	if o == nil || o.RestoreTask == nil {
		var ret RestoreWrapperProto
		return ret
	}
	return *o.RestoreTask
}

// GetRestoreTaskOk returns a tuple with the RestoreTask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreTaskWrapper) GetRestoreTaskOk() (*RestoreWrapperProto, bool) {
	if o == nil || o.RestoreTask == nil {
		return nil, false
	}
	return o.RestoreTask, true
}

// HasRestoreTask returns a boolean if a field has been set.
func (o *RestoreTaskWrapper) HasRestoreTask() bool {
	if o != nil && o.RestoreTask != nil {
		return true
	}

	return false
}

// SetRestoreTask gets a reference to the given RestoreWrapperProto and assigns it to the RestoreTask field.
func (o *RestoreTaskWrapper) SetRestoreTask(v RestoreWrapperProto) {
	o.RestoreTask = &v
}

func (o RestoreTaskWrapper) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RestoreTask != nil {
		toSerialize["restoreTask"] = o.RestoreTask
	}
	return json.Marshal(toSerialize)
}

type NullableRestoreTaskWrapper struct {
	value *RestoreTaskWrapper
	isSet bool
}

func (v NullableRestoreTaskWrapper) Get() *RestoreTaskWrapper {
	return v.value
}

func (v *NullableRestoreTaskWrapper) Set(val *RestoreTaskWrapper) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreTaskWrapper) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreTaskWrapper) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreTaskWrapper(val *RestoreTaskWrapper) *NullableRestoreTaskWrapper {
	return &NullableRestoreTaskWrapper{value: val, isSet: true}
}

func (v NullableRestoreTaskWrapper) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreTaskWrapper) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


