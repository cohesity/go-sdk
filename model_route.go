/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// Route Specifies the settings of a Static Route.
type Route struct {
	// Specifies a description of the Static Route.
	Description NullableString `json:"description,omitempty"`
	// Destination network.  Specifies the destination network of the Static Route. overrideDescription: true
	DestNetwork NullableString `json:"destNetwork,omitempty"`
	// Specifies the network interfaces name to use for communicating with the destination network.
	IfName NullableString `json:"ifName,omitempty"`
	// Specifies the network interfaces group or interface group with vlan id to use for communicating with the destination network.
	IfaceGroupName NullableString `json:"ifaceGroupName,omitempty"`
	// Specifies the next hop to the destination network.
	NextHop NullableString `json:"nextHop,omitempty"`
}

// NewRoute instantiates a new Route object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoute() *Route {
	this := Route{}
	return &this
}

// NewRouteWithDefaults instantiates a new Route object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteWithDefaults() *Route {
	this := Route{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Route) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Route) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *Route) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *Route) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *Route) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *Route) UnsetDescription() {
	o.Description.Unset()
}

// GetDestNetwork returns the DestNetwork field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Route) GetDestNetwork() string {
	if o == nil || o.DestNetwork.Get() == nil {
		var ret string
		return ret
	}
	return *o.DestNetwork.Get()
}

// GetDestNetworkOk returns a tuple with the DestNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Route) GetDestNetworkOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DestNetwork.Get(), o.DestNetwork.IsSet()
}

// HasDestNetwork returns a boolean if a field has been set.
func (o *Route) HasDestNetwork() bool {
	if o != nil && o.DestNetwork.IsSet() {
		return true
	}

	return false
}

// SetDestNetwork gets a reference to the given NullableString and assigns it to the DestNetwork field.
func (o *Route) SetDestNetwork(v string) {
	o.DestNetwork.Set(&v)
}
// SetDestNetworkNil sets the value for DestNetwork to be an explicit nil
func (o *Route) SetDestNetworkNil() {
	o.DestNetwork.Set(nil)
}

// UnsetDestNetwork ensures that no value is present for DestNetwork, not even an explicit nil
func (o *Route) UnsetDestNetwork() {
	o.DestNetwork.Unset()
}

// GetIfName returns the IfName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Route) GetIfName() string {
	if o == nil || o.IfName.Get() == nil {
		var ret string
		return ret
	}
	return *o.IfName.Get()
}

// GetIfNameOk returns a tuple with the IfName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Route) GetIfNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IfName.Get(), o.IfName.IsSet()
}

// HasIfName returns a boolean if a field has been set.
func (o *Route) HasIfName() bool {
	if o != nil && o.IfName.IsSet() {
		return true
	}

	return false
}

// SetIfName gets a reference to the given NullableString and assigns it to the IfName field.
func (o *Route) SetIfName(v string) {
	o.IfName.Set(&v)
}
// SetIfNameNil sets the value for IfName to be an explicit nil
func (o *Route) SetIfNameNil() {
	o.IfName.Set(nil)
}

// UnsetIfName ensures that no value is present for IfName, not even an explicit nil
func (o *Route) UnsetIfName() {
	o.IfName.Unset()
}

// GetIfaceGroupName returns the IfaceGroupName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Route) GetIfaceGroupName() string {
	if o == nil || o.IfaceGroupName.Get() == nil {
		var ret string
		return ret
	}
	return *o.IfaceGroupName.Get()
}

// GetIfaceGroupNameOk returns a tuple with the IfaceGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Route) GetIfaceGroupNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IfaceGroupName.Get(), o.IfaceGroupName.IsSet()
}

// HasIfaceGroupName returns a boolean if a field has been set.
func (o *Route) HasIfaceGroupName() bool {
	if o != nil && o.IfaceGroupName.IsSet() {
		return true
	}

	return false
}

// SetIfaceGroupName gets a reference to the given NullableString and assigns it to the IfaceGroupName field.
func (o *Route) SetIfaceGroupName(v string) {
	o.IfaceGroupName.Set(&v)
}
// SetIfaceGroupNameNil sets the value for IfaceGroupName to be an explicit nil
func (o *Route) SetIfaceGroupNameNil() {
	o.IfaceGroupName.Set(nil)
}

// UnsetIfaceGroupName ensures that no value is present for IfaceGroupName, not even an explicit nil
func (o *Route) UnsetIfaceGroupName() {
	o.IfaceGroupName.Unset()
}

// GetNextHop returns the NextHop field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Route) GetNextHop() string {
	if o == nil || o.NextHop.Get() == nil {
		var ret string
		return ret
	}
	return *o.NextHop.Get()
}

// GetNextHopOk returns a tuple with the NextHop field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Route) GetNextHopOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NextHop.Get(), o.NextHop.IsSet()
}

// HasNextHop returns a boolean if a field has been set.
func (o *Route) HasNextHop() bool {
	if o != nil && o.NextHop.IsSet() {
		return true
	}

	return false
}

// SetNextHop gets a reference to the given NullableString and assigns it to the NextHop field.
func (o *Route) SetNextHop(v string) {
	o.NextHop.Set(&v)
}
// SetNextHopNil sets the value for NextHop to be an explicit nil
func (o *Route) SetNextHopNil() {
	o.NextHop.Set(nil)
}

// UnsetNextHop ensures that no value is present for NextHop, not even an explicit nil
func (o *Route) UnsetNextHop() {
	o.NextHop.Unset()
}

func (o Route) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.DestNetwork.IsSet() {
		toSerialize["destNetwork"] = o.DestNetwork.Get()
	}
	if o.IfName.IsSet() {
		toSerialize["ifName"] = o.IfName.Get()
	}
	if o.IfaceGroupName.IsSet() {
		toSerialize["ifaceGroupName"] = o.IfaceGroupName.Get()
	}
	if o.NextHop.IsSet() {
		toSerialize["nextHop"] = o.NextHop.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRoute struct {
	value *Route
	isSet bool
}

func (v NullableRoute) Get() *Route {
	return v.value
}

func (v *NullableRoute) Set(val *Route) {
	v.value = val
	v.isSet = true
}

func (v NullableRoute) IsSet() bool {
	return v.isSet
}

func (v *NullableRoute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoute(val *Route) *NullableRoute {
	return &NullableRoute{value: val, isSet: true}
}

func (v NullableRoute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


