/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// InterfaceGroup Specifies the settings of an interface group.
type InterfaceGroup struct {
	// Interface group Id.  Specifies the id of the interface group.
	Id NullableInt32 `json:"id,omitempty"`
	// Specifies the product model and interface lists.
	ModelInterfaceLists []ProductModelInterfaceTuple `json:"modelInterfaceLists,omitempty"`
	// Specifies the name of the interface group.
	Name NullableString `json:"name,omitempty"`
	NetworkParams *NetworkParams `json:"networkParams,omitempty"`
}

// NewInterfaceGroup instantiates a new InterfaceGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterfaceGroup() *InterfaceGroup {
	this := InterfaceGroup{}
	return &this
}

// NewInterfaceGroupWithDefaults instantiates a new InterfaceGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterfaceGroupWithDefaults() *InterfaceGroup {
	this := InterfaceGroup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InterfaceGroup) GetId() int32 {
	if o == nil || o.Id.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InterfaceGroup) GetIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *InterfaceGroup) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt32 and assigns it to the Id field.
func (o *InterfaceGroup) SetId(v int32) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *InterfaceGroup) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *InterfaceGroup) UnsetId() {
	o.Id.Unset()
}

// GetModelInterfaceLists returns the ModelInterfaceLists field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InterfaceGroup) GetModelInterfaceLists() []ProductModelInterfaceTuple {
	if o == nil  {
		var ret []ProductModelInterfaceTuple
		return ret
	}
	return o.ModelInterfaceLists
}

// GetModelInterfaceListsOk returns a tuple with the ModelInterfaceLists field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InterfaceGroup) GetModelInterfaceListsOk() (*[]ProductModelInterfaceTuple, bool) {
	if o == nil || o.ModelInterfaceLists == nil {
		return nil, false
	}
	return &o.ModelInterfaceLists, true
}

// HasModelInterfaceLists returns a boolean if a field has been set.
func (o *InterfaceGroup) HasModelInterfaceLists() bool {
	if o != nil && o.ModelInterfaceLists != nil {
		return true
	}

	return false
}

// SetModelInterfaceLists gets a reference to the given []ProductModelInterfaceTuple and assigns it to the ModelInterfaceLists field.
func (o *InterfaceGroup) SetModelInterfaceLists(v []ProductModelInterfaceTuple) {
	o.ModelInterfaceLists = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InterfaceGroup) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InterfaceGroup) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *InterfaceGroup) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *InterfaceGroup) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *InterfaceGroup) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *InterfaceGroup) UnsetName() {
	o.Name.Unset()
}

// GetNetworkParams returns the NetworkParams field value if set, zero value otherwise.
func (o *InterfaceGroup) GetNetworkParams() NetworkParams {
	if o == nil || o.NetworkParams == nil {
		var ret NetworkParams
		return ret
	}
	return *o.NetworkParams
}

// GetNetworkParamsOk returns a tuple with the NetworkParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceGroup) GetNetworkParamsOk() (*NetworkParams, bool) {
	if o == nil || o.NetworkParams == nil {
		return nil, false
	}
	return o.NetworkParams, true
}

// HasNetworkParams returns a boolean if a field has been set.
func (o *InterfaceGroup) HasNetworkParams() bool {
	if o != nil && o.NetworkParams != nil {
		return true
	}

	return false
}

// SetNetworkParams gets a reference to the given NetworkParams and assigns it to the NetworkParams field.
func (o *InterfaceGroup) SetNetworkParams(v NetworkParams) {
	o.NetworkParams = &v
}

func (o InterfaceGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.ModelInterfaceLists != nil {
		toSerialize["modelInterfaceLists"] = o.ModelInterfaceLists
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.NetworkParams != nil {
		toSerialize["networkParams"] = o.NetworkParams
	}
	return json.Marshal(toSerialize)
}

type NullableInterfaceGroup struct {
	value *InterfaceGroup
	isSet bool
}

func (v NullableInterfaceGroup) Get() *InterfaceGroup {
	return v.value
}

func (v *NullableInterfaceGroup) Set(val *InterfaceGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceGroup(val *InterfaceGroup) *NullableInterfaceGroup {
	return &NullableInterfaceGroup{value: val, isSet: true}
}

func (v NullableInterfaceGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


