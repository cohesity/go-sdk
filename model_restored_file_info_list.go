/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// RestoredFileInfoList struct for RestoredFileInfoList
type RestoredFileInfoList struct {
	// Specifies whether the path points to directory.
	IsDirectory NullableBool `json:"isDirectory,omitempty"`
}

// NewRestoredFileInfoList instantiates a new RestoredFileInfoList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoredFileInfoList() *RestoredFileInfoList {
	this := RestoredFileInfoList{}
	return &this
}

// NewRestoredFileInfoListWithDefaults instantiates a new RestoredFileInfoList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoredFileInfoListWithDefaults() *RestoredFileInfoList {
	this := RestoredFileInfoList{}
	return &this
}

// GetIsDirectory returns the IsDirectory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoredFileInfoList) GetIsDirectory() bool {
	if o == nil || o.IsDirectory.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsDirectory.Get()
}

// GetIsDirectoryOk returns a tuple with the IsDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoredFileInfoList) GetIsDirectoryOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsDirectory.Get(), o.IsDirectory.IsSet()
}

// HasIsDirectory returns a boolean if a field has been set.
func (o *RestoredFileInfoList) HasIsDirectory() bool {
	if o != nil && o.IsDirectory.IsSet() {
		return true
	}

	return false
}

// SetIsDirectory gets a reference to the given NullableBool and assigns it to the IsDirectory field.
func (o *RestoredFileInfoList) SetIsDirectory(v bool) {
	o.IsDirectory.Set(&v)
}
// SetIsDirectoryNil sets the value for IsDirectory to be an explicit nil
func (o *RestoredFileInfoList) SetIsDirectoryNil() {
	o.IsDirectory.Set(nil)
}

// UnsetIsDirectory ensures that no value is present for IsDirectory, not even an explicit nil
func (o *RestoredFileInfoList) UnsetIsDirectory() {
	o.IsDirectory.Unset()
}

func (o RestoredFileInfoList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsDirectory.IsSet() {
		toSerialize["isDirectory"] = o.IsDirectory.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRestoredFileInfoList struct {
	value *RestoredFileInfoList
	isSet bool
}

func (v NullableRestoredFileInfoList) Get() *RestoredFileInfoList {
	return v.value
}

func (v *NullableRestoredFileInfoList) Set(val *RestoredFileInfoList) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoredFileInfoList) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoredFileInfoList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoredFileInfoList(val *RestoredFileInfoList) *NullableRestoredFileInfoList {
	return &NullableRestoredFileInfoList{value: val, isSet: true}
}

func (v NullableRestoredFileInfoList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoredFileInfoList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


