/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// StorageSnapshotProviderParams struct for StorageSnapshotProviderParams
type StorageSnapshotProviderParams struct {
	ConnectorParams *ConnectorParams `json:"connectorParams,omitempty"`
	Entity *EntityProto `json:"entity,omitempty"`
}

// NewStorageSnapshotProviderParams instantiates a new StorageSnapshotProviderParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageSnapshotProviderParams() *StorageSnapshotProviderParams {
	this := StorageSnapshotProviderParams{}
	return &this
}

// NewStorageSnapshotProviderParamsWithDefaults instantiates a new StorageSnapshotProviderParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageSnapshotProviderParamsWithDefaults() *StorageSnapshotProviderParams {
	this := StorageSnapshotProviderParams{}
	return &this
}

// GetConnectorParams returns the ConnectorParams field value if set, zero value otherwise.
func (o *StorageSnapshotProviderParams) GetConnectorParams() ConnectorParams {
	if o == nil || o.ConnectorParams == nil {
		var ret ConnectorParams
		return ret
	}
	return *o.ConnectorParams
}

// GetConnectorParamsOk returns a tuple with the ConnectorParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSnapshotProviderParams) GetConnectorParamsOk() (*ConnectorParams, bool) {
	if o == nil || o.ConnectorParams == nil {
		return nil, false
	}
	return o.ConnectorParams, true
}

// HasConnectorParams returns a boolean if a field has been set.
func (o *StorageSnapshotProviderParams) HasConnectorParams() bool {
	if o != nil && o.ConnectorParams != nil {
		return true
	}

	return false
}

// SetConnectorParams gets a reference to the given ConnectorParams and assigns it to the ConnectorParams field.
func (o *StorageSnapshotProviderParams) SetConnectorParams(v ConnectorParams) {
	o.ConnectorParams = &v
}

// GetEntity returns the Entity field value if set, zero value otherwise.
func (o *StorageSnapshotProviderParams) GetEntity() EntityProto {
	if o == nil || o.Entity == nil {
		var ret EntityProto
		return ret
	}
	return *o.Entity
}

// GetEntityOk returns a tuple with the Entity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageSnapshotProviderParams) GetEntityOk() (*EntityProto, bool) {
	if o == nil || o.Entity == nil {
		return nil, false
	}
	return o.Entity, true
}

// HasEntity returns a boolean if a field has been set.
func (o *StorageSnapshotProviderParams) HasEntity() bool {
	if o != nil && o.Entity != nil {
		return true
	}

	return false
}

// SetEntity gets a reference to the given EntityProto and assigns it to the Entity field.
func (o *StorageSnapshotProviderParams) SetEntity(v EntityProto) {
	o.Entity = &v
}

func (o StorageSnapshotProviderParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ConnectorParams != nil {
		toSerialize["connectorParams"] = o.ConnectorParams
	}
	if o.Entity != nil {
		toSerialize["entity"] = o.Entity
	}
	return json.Marshal(toSerialize)
}

type NullableStorageSnapshotProviderParams struct {
	value *StorageSnapshotProviderParams
	isSet bool
}

func (v NullableStorageSnapshotProviderParams) Get() *StorageSnapshotProviderParams {
	return v.value
}

func (v *NullableStorageSnapshotProviderParams) Set(val *StorageSnapshotProviderParams) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageSnapshotProviderParams) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageSnapshotProviderParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageSnapshotProviderParams(val *StorageSnapshotProviderParams) *NullableStorageSnapshotProviderParams {
	return &NullableStorageSnapshotProviderParams{value: val, isSet: true}
}

func (v NullableStorageSnapshotProviderParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageSnapshotProviderParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


