/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// DataLockConstraints Specifies the datalock retention type and expiry time when datalock expires
type DataLockConstraints struct {
	// Specifies expiry time to keep Snapshots under datalock in a protection group.
	ExpiryTimeUsecs NullableInt64 `json:"expiryTimeUsecs,omitempty"`
	// Specifies WORM retention type for the snapshots. When a WORM retention type is specified, the snapshots of the Protection Jobs using this policy will be kept until the maximum of the snapshot retention time. During that time, the snapshots cannot be deleted. 'kNone' implies there is no WORM retention set. 'kCompliance' implies WORM retention is set for compliance reason. 'kAdministrative' implies WORM retention is set for administrative purposes.
	WormRetentionType NullableString `json:"wormRetentionType,omitempty"`
}

// NewDataLockConstraints instantiates a new DataLockConstraints object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataLockConstraints() *DataLockConstraints {
	this := DataLockConstraints{}
	return &this
}

// NewDataLockConstraintsWithDefaults instantiates a new DataLockConstraints object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataLockConstraintsWithDefaults() *DataLockConstraints {
	this := DataLockConstraints{}
	return &this
}

// GetExpiryTimeUsecs returns the ExpiryTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataLockConstraints) GetExpiryTimeUsecs() int64 {
	if o == nil || o.ExpiryTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ExpiryTimeUsecs.Get()
}

// GetExpiryTimeUsecsOk returns a tuple with the ExpiryTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataLockConstraints) GetExpiryTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExpiryTimeUsecs.Get(), o.ExpiryTimeUsecs.IsSet()
}

// HasExpiryTimeUsecs returns a boolean if a field has been set.
func (o *DataLockConstraints) HasExpiryTimeUsecs() bool {
	if o != nil && o.ExpiryTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetExpiryTimeUsecs gets a reference to the given NullableInt64 and assigns it to the ExpiryTimeUsecs field.
func (o *DataLockConstraints) SetExpiryTimeUsecs(v int64) {
	o.ExpiryTimeUsecs.Set(&v)
}
// SetExpiryTimeUsecsNil sets the value for ExpiryTimeUsecs to be an explicit nil
func (o *DataLockConstraints) SetExpiryTimeUsecsNil() {
	o.ExpiryTimeUsecs.Set(nil)
}

// UnsetExpiryTimeUsecs ensures that no value is present for ExpiryTimeUsecs, not even an explicit nil
func (o *DataLockConstraints) UnsetExpiryTimeUsecs() {
	o.ExpiryTimeUsecs.Unset()
}

// GetWormRetentionType returns the WormRetentionType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataLockConstraints) GetWormRetentionType() string {
	if o == nil || o.WormRetentionType.Get() == nil {
		var ret string
		return ret
	}
	return *o.WormRetentionType.Get()
}

// GetWormRetentionTypeOk returns a tuple with the WormRetentionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataLockConstraints) GetWormRetentionTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.WormRetentionType.Get(), o.WormRetentionType.IsSet()
}

// HasWormRetentionType returns a boolean if a field has been set.
func (o *DataLockConstraints) HasWormRetentionType() bool {
	if o != nil && o.WormRetentionType.IsSet() {
		return true
	}

	return false
}

// SetWormRetentionType gets a reference to the given NullableString and assigns it to the WormRetentionType field.
func (o *DataLockConstraints) SetWormRetentionType(v string) {
	o.WormRetentionType.Set(&v)
}
// SetWormRetentionTypeNil sets the value for WormRetentionType to be an explicit nil
func (o *DataLockConstraints) SetWormRetentionTypeNil() {
	o.WormRetentionType.Set(nil)
}

// UnsetWormRetentionType ensures that no value is present for WormRetentionType, not even an explicit nil
func (o *DataLockConstraints) UnsetWormRetentionType() {
	o.WormRetentionType.Unset()
}

func (o DataLockConstraints) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExpiryTimeUsecs.IsSet() {
		toSerialize["expiryTimeUsecs"] = o.ExpiryTimeUsecs.Get()
	}
	if o.WormRetentionType.IsSet() {
		toSerialize["wormRetentionType"] = o.WormRetentionType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDataLockConstraints struct {
	value *DataLockConstraints
	isSet bool
}

func (v NullableDataLockConstraints) Get() *DataLockConstraints {
	return v.value
}

func (v *NullableDataLockConstraints) Set(val *DataLockConstraints) {
	v.value = val
	v.isSet = true
}

func (v NullableDataLockConstraints) IsSet() bool {
	return v.isSet
}

func (v *NullableDataLockConstraints) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataLockConstraints(val *DataLockConstraints) *NullableDataLockConstraints {
	return &NullableDataLockConstraints{value: val, isSet: true}
}

func (v NullableDataLockConstraints) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataLockConstraints) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


