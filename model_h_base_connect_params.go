/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// HBaseConnectParams Specifies an Object containing information about a registered HBase source.
type HBaseConnectParams struct {
	// The entity id of the HDFS source for this HBase
	HdfsEntityId NullableInt64 `json:"hdfsEntityId,omitempty"`
	// Specifies the kerberos principal.
	KerberosPrincipal NullableString `json:"kerberosPrincipal,omitempty"`
	// Specifies the HBase data root directory.
	RootDataDirectory NullableString `json:"rootDataDirectory,omitempty"`
	// Specifies the HBase zookeeper quorum.
	ZookeeperQuorum []string `json:"zookeeperQuorum,omitempty"`
}

// NewHBaseConnectParams instantiates a new HBaseConnectParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHBaseConnectParams() *HBaseConnectParams {
	this := HBaseConnectParams{}
	return &this
}

// NewHBaseConnectParamsWithDefaults instantiates a new HBaseConnectParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHBaseConnectParamsWithDefaults() *HBaseConnectParams {
	this := HBaseConnectParams{}
	return &this
}

// GetHdfsEntityId returns the HdfsEntityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HBaseConnectParams) GetHdfsEntityId() int64 {
	if o == nil || o.HdfsEntityId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.HdfsEntityId.Get()
}

// GetHdfsEntityIdOk returns a tuple with the HdfsEntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HBaseConnectParams) GetHdfsEntityIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HdfsEntityId.Get(), o.HdfsEntityId.IsSet()
}

// HasHdfsEntityId returns a boolean if a field has been set.
func (o *HBaseConnectParams) HasHdfsEntityId() bool {
	if o != nil && o.HdfsEntityId.IsSet() {
		return true
	}

	return false
}

// SetHdfsEntityId gets a reference to the given NullableInt64 and assigns it to the HdfsEntityId field.
func (o *HBaseConnectParams) SetHdfsEntityId(v int64) {
	o.HdfsEntityId.Set(&v)
}
// SetHdfsEntityIdNil sets the value for HdfsEntityId to be an explicit nil
func (o *HBaseConnectParams) SetHdfsEntityIdNil() {
	o.HdfsEntityId.Set(nil)
}

// UnsetHdfsEntityId ensures that no value is present for HdfsEntityId, not even an explicit nil
func (o *HBaseConnectParams) UnsetHdfsEntityId() {
	o.HdfsEntityId.Unset()
}

// GetKerberosPrincipal returns the KerberosPrincipal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HBaseConnectParams) GetKerberosPrincipal() string {
	if o == nil || o.KerberosPrincipal.Get() == nil {
		var ret string
		return ret
	}
	return *o.KerberosPrincipal.Get()
}

// GetKerberosPrincipalOk returns a tuple with the KerberosPrincipal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HBaseConnectParams) GetKerberosPrincipalOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.KerberosPrincipal.Get(), o.KerberosPrincipal.IsSet()
}

// HasKerberosPrincipal returns a boolean if a field has been set.
func (o *HBaseConnectParams) HasKerberosPrincipal() bool {
	if o != nil && o.KerberosPrincipal.IsSet() {
		return true
	}

	return false
}

// SetKerberosPrincipal gets a reference to the given NullableString and assigns it to the KerberosPrincipal field.
func (o *HBaseConnectParams) SetKerberosPrincipal(v string) {
	o.KerberosPrincipal.Set(&v)
}
// SetKerberosPrincipalNil sets the value for KerberosPrincipal to be an explicit nil
func (o *HBaseConnectParams) SetKerberosPrincipalNil() {
	o.KerberosPrincipal.Set(nil)
}

// UnsetKerberosPrincipal ensures that no value is present for KerberosPrincipal, not even an explicit nil
func (o *HBaseConnectParams) UnsetKerberosPrincipal() {
	o.KerberosPrincipal.Unset()
}

// GetRootDataDirectory returns the RootDataDirectory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HBaseConnectParams) GetRootDataDirectory() string {
	if o == nil || o.RootDataDirectory.Get() == nil {
		var ret string
		return ret
	}
	return *o.RootDataDirectory.Get()
}

// GetRootDataDirectoryOk returns a tuple with the RootDataDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HBaseConnectParams) GetRootDataDirectoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RootDataDirectory.Get(), o.RootDataDirectory.IsSet()
}

// HasRootDataDirectory returns a boolean if a field has been set.
func (o *HBaseConnectParams) HasRootDataDirectory() bool {
	if o != nil && o.RootDataDirectory.IsSet() {
		return true
	}

	return false
}

// SetRootDataDirectory gets a reference to the given NullableString and assigns it to the RootDataDirectory field.
func (o *HBaseConnectParams) SetRootDataDirectory(v string) {
	o.RootDataDirectory.Set(&v)
}
// SetRootDataDirectoryNil sets the value for RootDataDirectory to be an explicit nil
func (o *HBaseConnectParams) SetRootDataDirectoryNil() {
	o.RootDataDirectory.Set(nil)
}

// UnsetRootDataDirectory ensures that no value is present for RootDataDirectory, not even an explicit nil
func (o *HBaseConnectParams) UnsetRootDataDirectory() {
	o.RootDataDirectory.Unset()
}

// GetZookeeperQuorum returns the ZookeeperQuorum field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HBaseConnectParams) GetZookeeperQuorum() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.ZookeeperQuorum
}

// GetZookeeperQuorumOk returns a tuple with the ZookeeperQuorum field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HBaseConnectParams) GetZookeeperQuorumOk() (*[]string, bool) {
	if o == nil || o.ZookeeperQuorum == nil {
		return nil, false
	}
	return &o.ZookeeperQuorum, true
}

// HasZookeeperQuorum returns a boolean if a field has been set.
func (o *HBaseConnectParams) HasZookeeperQuorum() bool {
	if o != nil && o.ZookeeperQuorum != nil {
		return true
	}

	return false
}

// SetZookeeperQuorum gets a reference to the given []string and assigns it to the ZookeeperQuorum field.
func (o *HBaseConnectParams) SetZookeeperQuorum(v []string) {
	o.ZookeeperQuorum = v
}

func (o HBaseConnectParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.HdfsEntityId.IsSet() {
		toSerialize["hdfsEntityId"] = o.HdfsEntityId.Get()
	}
	if o.KerberosPrincipal.IsSet() {
		toSerialize["kerberosPrincipal"] = o.KerberosPrincipal.Get()
	}
	if o.RootDataDirectory.IsSet() {
		toSerialize["rootDataDirectory"] = o.RootDataDirectory.Get()
	}
	if o.ZookeeperQuorum != nil {
		toSerialize["zookeeperQuorum"] = o.ZookeeperQuorum
	}
	return json.Marshal(toSerialize)
}

type NullableHBaseConnectParams struct {
	value *HBaseConnectParams
	isSet bool
}

func (v NullableHBaseConnectParams) Get() *HBaseConnectParams {
	return v.value
}

func (v *NullableHBaseConnectParams) Set(val *HBaseConnectParams) {
	v.value = val
	v.isSet = true
}

func (v NullableHBaseConnectParams) IsSet() bool {
	return v.isSet
}

func (v *NullableHBaseConnectParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHBaseConnectParams(val *HBaseConnectParams) *NullableHBaseConnectParams {
	return &NullableHBaseConnectParams{value: val, isSet: true}
}

func (v NullableHBaseConnectParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHBaseConnectParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


