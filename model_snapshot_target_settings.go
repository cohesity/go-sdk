/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// SnapshotTargetSettings Specifies settings about a target where a copied Snapshot is stored. A target can be a Remote Cluster or an Archival External Target such as AWS or Tape.
type SnapshotTargetSettings struct {
	ArchivalTarget *ArchivalExternalTarget `json:"archivalTarget,omitempty"`
	CloudReplicationTarget *CloudDeployTargetDetails `json:"cloudReplicationTarget,omitempty"`
	ReplicationTarget *ReplicationTargetSettings `json:"replicationTarget,omitempty"`
	// Specifies the type of a Snapshot target such as 'kLocal', 'kRemote' or 'kArchival'. 'kLocal' means the Snapshot is stored on a local Cohesity Cluster. 'kRemote' means the Snapshot is stored on a Remote Cohesity Cluster. (It was copied to the Remote Cohesity Cluster using replication.) 'kArchival' means the Snapshot is stored on a Archival External Target (such as Tape or AWS). 'kCloudDeploy' means the Snapshot is stored on a Cloud platform.
	Type NullableString `json:"type,omitempty"`
}

// NewSnapshotTargetSettings instantiates a new SnapshotTargetSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotTargetSettings() *SnapshotTargetSettings {
	this := SnapshotTargetSettings{}
	return &this
}

// NewSnapshotTargetSettingsWithDefaults instantiates a new SnapshotTargetSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotTargetSettingsWithDefaults() *SnapshotTargetSettings {
	this := SnapshotTargetSettings{}
	return &this
}

// GetArchivalTarget returns the ArchivalTarget field value if set, zero value otherwise.
func (o *SnapshotTargetSettings) GetArchivalTarget() ArchivalExternalTarget {
	if o == nil || o.ArchivalTarget == nil {
		var ret ArchivalExternalTarget
		return ret
	}
	return *o.ArchivalTarget
}

// GetArchivalTargetOk returns a tuple with the ArchivalTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotTargetSettings) GetArchivalTargetOk() (*ArchivalExternalTarget, bool) {
	if o == nil || o.ArchivalTarget == nil {
		return nil, false
	}
	return o.ArchivalTarget, true
}

// HasArchivalTarget returns a boolean if a field has been set.
func (o *SnapshotTargetSettings) HasArchivalTarget() bool {
	if o != nil && o.ArchivalTarget != nil {
		return true
	}

	return false
}

// SetArchivalTarget gets a reference to the given ArchivalExternalTarget and assigns it to the ArchivalTarget field.
func (o *SnapshotTargetSettings) SetArchivalTarget(v ArchivalExternalTarget) {
	o.ArchivalTarget = &v
}

// GetCloudReplicationTarget returns the CloudReplicationTarget field value if set, zero value otherwise.
func (o *SnapshotTargetSettings) GetCloudReplicationTarget() CloudDeployTargetDetails {
	if o == nil || o.CloudReplicationTarget == nil {
		var ret CloudDeployTargetDetails
		return ret
	}
	return *o.CloudReplicationTarget
}

// GetCloudReplicationTargetOk returns a tuple with the CloudReplicationTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotTargetSettings) GetCloudReplicationTargetOk() (*CloudDeployTargetDetails, bool) {
	if o == nil || o.CloudReplicationTarget == nil {
		return nil, false
	}
	return o.CloudReplicationTarget, true
}

// HasCloudReplicationTarget returns a boolean if a field has been set.
func (o *SnapshotTargetSettings) HasCloudReplicationTarget() bool {
	if o != nil && o.CloudReplicationTarget != nil {
		return true
	}

	return false
}

// SetCloudReplicationTarget gets a reference to the given CloudDeployTargetDetails and assigns it to the CloudReplicationTarget field.
func (o *SnapshotTargetSettings) SetCloudReplicationTarget(v CloudDeployTargetDetails) {
	o.CloudReplicationTarget = &v
}

// GetReplicationTarget returns the ReplicationTarget field value if set, zero value otherwise.
func (o *SnapshotTargetSettings) GetReplicationTarget() ReplicationTargetSettings {
	if o == nil || o.ReplicationTarget == nil {
		var ret ReplicationTargetSettings
		return ret
	}
	return *o.ReplicationTarget
}

// GetReplicationTargetOk returns a tuple with the ReplicationTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotTargetSettings) GetReplicationTargetOk() (*ReplicationTargetSettings, bool) {
	if o == nil || o.ReplicationTarget == nil {
		return nil, false
	}
	return o.ReplicationTarget, true
}

// HasReplicationTarget returns a boolean if a field has been set.
func (o *SnapshotTargetSettings) HasReplicationTarget() bool {
	if o != nil && o.ReplicationTarget != nil {
		return true
	}

	return false
}

// SetReplicationTarget gets a reference to the given ReplicationTargetSettings and assigns it to the ReplicationTarget field.
func (o *SnapshotTargetSettings) SetReplicationTarget(v ReplicationTargetSettings) {
	o.ReplicationTarget = &v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotTargetSettings) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotTargetSettings) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *SnapshotTargetSettings) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *SnapshotTargetSettings) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *SnapshotTargetSettings) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *SnapshotTargetSettings) UnsetType() {
	o.Type.Unset()
}

func (o SnapshotTargetSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ArchivalTarget != nil {
		toSerialize["archivalTarget"] = o.ArchivalTarget
	}
	if o.CloudReplicationTarget != nil {
		toSerialize["cloudReplicationTarget"] = o.CloudReplicationTarget
	}
	if o.ReplicationTarget != nil {
		toSerialize["replicationTarget"] = o.ReplicationTarget
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSnapshotTargetSettings struct {
	value *SnapshotTargetSettings
	isSet bool
}

func (v NullableSnapshotTargetSettings) Get() *SnapshotTargetSettings {
	return v.value
}

func (v *NullableSnapshotTargetSettings) Set(val *SnapshotTargetSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotTargetSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotTargetSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotTargetSettings(val *SnapshotTargetSettings) *NullableSnapshotTargetSettings {
	return &NullableSnapshotTargetSettings{value: val, isSet: true}
}

func (v NullableSnapshotTargetSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotTargetSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


