/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// DSESolrInfo struct for DSESolrInfo
type DSESolrInfo struct {
	// Solr node IP Addresses.
	SolrNodeVec []string `json:"solrNodeVec,omitempty"`
	// Solr node Port.
	SolrPort NullableInt32 `json:"solrPort,omitempty"`
}

// NewDSESolrInfo instantiates a new DSESolrInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDSESolrInfo() *DSESolrInfo {
	this := DSESolrInfo{}
	return &this
}

// NewDSESolrInfoWithDefaults instantiates a new DSESolrInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDSESolrInfoWithDefaults() *DSESolrInfo {
	this := DSESolrInfo{}
	return &this
}

// GetSolrNodeVec returns the SolrNodeVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DSESolrInfo) GetSolrNodeVec() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.SolrNodeVec
}

// GetSolrNodeVecOk returns a tuple with the SolrNodeVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DSESolrInfo) GetSolrNodeVecOk() (*[]string, bool) {
	if o == nil || o.SolrNodeVec == nil {
		return nil, false
	}
	return &o.SolrNodeVec, true
}

// HasSolrNodeVec returns a boolean if a field has been set.
func (o *DSESolrInfo) HasSolrNodeVec() bool {
	if o != nil && o.SolrNodeVec != nil {
		return true
	}

	return false
}

// SetSolrNodeVec gets a reference to the given []string and assigns it to the SolrNodeVec field.
func (o *DSESolrInfo) SetSolrNodeVec(v []string) {
	o.SolrNodeVec = v
}

// GetSolrPort returns the SolrPort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DSESolrInfo) GetSolrPort() int32 {
	if o == nil || o.SolrPort.Get() == nil {
		var ret int32
		return ret
	}
	return *o.SolrPort.Get()
}

// GetSolrPortOk returns a tuple with the SolrPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DSESolrInfo) GetSolrPortOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SolrPort.Get(), o.SolrPort.IsSet()
}

// HasSolrPort returns a boolean if a field has been set.
func (o *DSESolrInfo) HasSolrPort() bool {
	if o != nil && o.SolrPort.IsSet() {
		return true
	}

	return false
}

// SetSolrPort gets a reference to the given NullableInt32 and assigns it to the SolrPort field.
func (o *DSESolrInfo) SetSolrPort(v int32) {
	o.SolrPort.Set(&v)
}
// SetSolrPortNil sets the value for SolrPort to be an explicit nil
func (o *DSESolrInfo) SetSolrPortNil() {
	o.SolrPort.Set(nil)
}

// UnsetSolrPort ensures that no value is present for SolrPort, not even an explicit nil
func (o *DSESolrInfo) UnsetSolrPort() {
	o.SolrPort.Unset()
}

func (o DSESolrInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SolrNodeVec != nil {
		toSerialize["solrNodeVec"] = o.SolrNodeVec
	}
	if o.SolrPort.IsSet() {
		toSerialize["solrPort"] = o.SolrPort.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDSESolrInfo struct {
	value *DSESolrInfo
	isSet bool
}

func (v NullableDSESolrInfo) Get() *DSESolrInfo {
	return v.value
}

func (v *NullableDSESolrInfo) Set(val *DSESolrInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDSESolrInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDSESolrInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDSESolrInfo(val *DSESolrInfo) *NullableDSESolrInfo {
	return &NullableDSESolrInfo{value: val, isSet: true}
}

func (v NullableDSESolrInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDSESolrInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


