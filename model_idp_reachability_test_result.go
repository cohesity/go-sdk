/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// IdpReachabilityTestResult Specifies the result of the reachability test done for an IdP.
type IdpReachabilityTestResult struct {
	// Specifies the flag for Idp reachability.
	Reachable NullableBool `json:"reachable,omitempty"`
}

// NewIdpReachabilityTestResult instantiates a new IdpReachabilityTestResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdpReachabilityTestResult() *IdpReachabilityTestResult {
	this := IdpReachabilityTestResult{}
	return &this
}

// NewIdpReachabilityTestResultWithDefaults instantiates a new IdpReachabilityTestResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdpReachabilityTestResultWithDefaults() *IdpReachabilityTestResult {
	this := IdpReachabilityTestResult{}
	return &this
}

// GetReachable returns the Reachable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdpReachabilityTestResult) GetReachable() bool {
	if o == nil || o.Reachable.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Reachable.Get()
}

// GetReachableOk returns a tuple with the Reachable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdpReachabilityTestResult) GetReachableOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Reachable.Get(), o.Reachable.IsSet()
}

// HasReachable returns a boolean if a field has been set.
func (o *IdpReachabilityTestResult) HasReachable() bool {
	if o != nil && o.Reachable.IsSet() {
		return true
	}

	return false
}

// SetReachable gets a reference to the given NullableBool and assigns it to the Reachable field.
func (o *IdpReachabilityTestResult) SetReachable(v bool) {
	o.Reachable.Set(&v)
}
// SetReachableNil sets the value for Reachable to be an explicit nil
func (o *IdpReachabilityTestResult) SetReachableNil() {
	o.Reachable.Set(nil)
}

// UnsetReachable ensures that no value is present for Reachable, not even an explicit nil
func (o *IdpReachabilityTestResult) UnsetReachable() {
	o.Reachable.Unset()
}

func (o IdpReachabilityTestResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Reachable.IsSet() {
		toSerialize["reachable"] = o.Reachable.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableIdpReachabilityTestResult struct {
	value *IdpReachabilityTestResult
	isSet bool
}

func (v NullableIdpReachabilityTestResult) Get() *IdpReachabilityTestResult {
	return v.value
}

func (v *NullableIdpReachabilityTestResult) Set(val *IdpReachabilityTestResult) {
	v.value = val
	v.isSet = true
}

func (v NullableIdpReachabilityTestResult) IsSet() bool {
	return v.isSet
}

func (v *NullableIdpReachabilityTestResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdpReachabilityTestResult(val *IdpReachabilityTestResult) *NullableIdpReachabilityTestResult {
	return &NullableIdpReachabilityTestResult{value: val, isSet: true}
}

func (v NullableIdpReachabilityTestResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdpReachabilityTestResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


