/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// NasProtectionSource Specifies a Protection Source in a Generic NAS environment.
type NasProtectionSource struct {
	// Specifies a description about the Protection Source.
	Description NullableString `json:"description,omitempty"`
	// Specifies the mount path of this NAS. For example, for a NFS mount point, this should be in the format of IP or hostname:/foo/bar.
	MountPath NullableString `json:"mountPath,omitempty"`
	// Specifies the name of the NetApp Object.
	Name NullableString `json:"name,omitempty"`
	// Specifies the protocol used by the NAS server. Specifies the protocol used by a NAS server. 'kNfs3' indicates NFS v3 protocol. 'kCifs1' indicates CIFS v1.0 protocol.
	Protocol NullableString `json:"protocol,omitempty"`
	// Specifies whether to skip validation of the given mount point.
	SkipValidation NullableBool `json:"skipValidation,omitempty"`
	// Specifies the type of a Protection Source Object in a generic NAS Source such as 'kGroup', or 'kHost'. Specifies the kind of NAS mount. 'kGroup' indicates top level node that holds individual NAS hosts. 'kHost' indicates a single NAS path that can be mounted. 'kDfsGroup' indicates a DFS group containing top level directories mapped to different servers. 'kDfsTopDir' indicates a top level directory inside a DFS group, discovered when registering a DFS group.
	Type NullableString `json:"type,omitempty"`
}

// NewNasProtectionSource instantiates a new NasProtectionSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNasProtectionSource() *NasProtectionSource {
	this := NasProtectionSource{}
	return &this
}

// NewNasProtectionSourceWithDefaults instantiates a new NasProtectionSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNasProtectionSourceWithDefaults() *NasProtectionSource {
	this := NasProtectionSource{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasProtectionSource) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasProtectionSource) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *NasProtectionSource) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *NasProtectionSource) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *NasProtectionSource) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *NasProtectionSource) UnsetDescription() {
	o.Description.Unset()
}

// GetMountPath returns the MountPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasProtectionSource) GetMountPath() string {
	if o == nil || o.MountPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.MountPath.Get()
}

// GetMountPathOk returns a tuple with the MountPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasProtectionSource) GetMountPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MountPath.Get(), o.MountPath.IsSet()
}

// HasMountPath returns a boolean if a field has been set.
func (o *NasProtectionSource) HasMountPath() bool {
	if o != nil && o.MountPath.IsSet() {
		return true
	}

	return false
}

// SetMountPath gets a reference to the given NullableString and assigns it to the MountPath field.
func (o *NasProtectionSource) SetMountPath(v string) {
	o.MountPath.Set(&v)
}
// SetMountPathNil sets the value for MountPath to be an explicit nil
func (o *NasProtectionSource) SetMountPathNil() {
	o.MountPath.Set(nil)
}

// UnsetMountPath ensures that no value is present for MountPath, not even an explicit nil
func (o *NasProtectionSource) UnsetMountPath() {
	o.MountPath.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasProtectionSource) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasProtectionSource) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *NasProtectionSource) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *NasProtectionSource) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *NasProtectionSource) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *NasProtectionSource) UnsetName() {
	o.Name.Unset()
}

// GetProtocol returns the Protocol field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasProtectionSource) GetProtocol() string {
	if o == nil || o.Protocol.Get() == nil {
		var ret string
		return ret
	}
	return *o.Protocol.Get()
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasProtectionSource) GetProtocolOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Protocol.Get(), o.Protocol.IsSet()
}

// HasProtocol returns a boolean if a field has been set.
func (o *NasProtectionSource) HasProtocol() bool {
	if o != nil && o.Protocol.IsSet() {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given NullableString and assigns it to the Protocol field.
func (o *NasProtectionSource) SetProtocol(v string) {
	o.Protocol.Set(&v)
}
// SetProtocolNil sets the value for Protocol to be an explicit nil
func (o *NasProtectionSource) SetProtocolNil() {
	o.Protocol.Set(nil)
}

// UnsetProtocol ensures that no value is present for Protocol, not even an explicit nil
func (o *NasProtectionSource) UnsetProtocol() {
	o.Protocol.Unset()
}

// GetSkipValidation returns the SkipValidation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasProtectionSource) GetSkipValidation() bool {
	if o == nil || o.SkipValidation.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SkipValidation.Get()
}

// GetSkipValidationOk returns a tuple with the SkipValidation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasProtectionSource) GetSkipValidationOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SkipValidation.Get(), o.SkipValidation.IsSet()
}

// HasSkipValidation returns a boolean if a field has been set.
func (o *NasProtectionSource) HasSkipValidation() bool {
	if o != nil && o.SkipValidation.IsSet() {
		return true
	}

	return false
}

// SetSkipValidation gets a reference to the given NullableBool and assigns it to the SkipValidation field.
func (o *NasProtectionSource) SetSkipValidation(v bool) {
	o.SkipValidation.Set(&v)
}
// SetSkipValidationNil sets the value for SkipValidation to be an explicit nil
func (o *NasProtectionSource) SetSkipValidationNil() {
	o.SkipValidation.Set(nil)
}

// UnsetSkipValidation ensures that no value is present for SkipValidation, not even an explicit nil
func (o *NasProtectionSource) UnsetSkipValidation() {
	o.SkipValidation.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasProtectionSource) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasProtectionSource) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *NasProtectionSource) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *NasProtectionSource) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *NasProtectionSource) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *NasProtectionSource) UnsetType() {
	o.Type.Unset()
}

func (o NasProtectionSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.MountPath.IsSet() {
		toSerialize["mountPath"] = o.MountPath.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Protocol.IsSet() {
		toSerialize["protocol"] = o.Protocol.Get()
	}
	if o.SkipValidation.IsSet() {
		toSerialize["skipValidation"] = o.SkipValidation.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableNasProtectionSource struct {
	value *NasProtectionSource
	isSet bool
}

func (v NullableNasProtectionSource) Get() *NasProtectionSource {
	return v.value
}

func (v *NullableNasProtectionSource) Set(val *NasProtectionSource) {
	v.value = val
	v.isSet = true
}

func (v NullableNasProtectionSource) IsSet() bool {
	return v.isSet
}

func (v *NullableNasProtectionSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNasProtectionSource(val *NasProtectionSource) *NullableNasProtectionSource {
	return &NullableNasProtectionSource{value: val, isSet: true}
}

func (v NullableNasProtectionSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNasProtectionSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


