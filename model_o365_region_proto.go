/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// O365RegionProto O365Region proto will store the information about the region from where o365 connector apis calls are made.
type O365RegionProto struct {
	// The country where the o365 connector apis were called from.
	Country NullableInt32 `json:"country,omitempty"`
}

// NewO365RegionProto instantiates a new O365RegionProto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewO365RegionProto() *O365RegionProto {
	this := O365RegionProto{}
	return &this
}

// NewO365RegionProtoWithDefaults instantiates a new O365RegionProto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewO365RegionProtoWithDefaults() *O365RegionProto {
	this := O365RegionProto{}
	return &this
}

// GetCountry returns the Country field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *O365RegionProto) GetCountry() int32 {
	if o == nil || o.Country.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Country.Get()
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *O365RegionProto) GetCountryOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Country.Get(), o.Country.IsSet()
}

// HasCountry returns a boolean if a field has been set.
func (o *O365RegionProto) HasCountry() bool {
	if o != nil && o.Country.IsSet() {
		return true
	}

	return false
}

// SetCountry gets a reference to the given NullableInt32 and assigns it to the Country field.
func (o *O365RegionProto) SetCountry(v int32) {
	o.Country.Set(&v)
}
// SetCountryNil sets the value for Country to be an explicit nil
func (o *O365RegionProto) SetCountryNil() {
	o.Country.Set(nil)
}

// UnsetCountry ensures that no value is present for Country, not even an explicit nil
func (o *O365RegionProto) UnsetCountry() {
	o.Country.Unset()
}

func (o O365RegionProto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Country.IsSet() {
		toSerialize["country"] = o.Country.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableO365RegionProto struct {
	value *O365RegionProto
	isSet bool
}

func (v NullableO365RegionProto) Get() *O365RegionProto {
	return v.value
}

func (v *NullableO365RegionProto) Set(val *O365RegionProto) {
	v.value = val
	v.isSet = true
}

func (v NullableO365RegionProto) IsSet() bool {
	return v.isSet
}

func (v *NullableO365RegionProto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableO365RegionProto(val *O365RegionProto) *NullableO365RegionProto {
	return &NullableO365RegionProto{value: val, isSet: true}
}

func (v NullableO365RegionProto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableO365RegionProto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


