/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// RecoverCouchbaseSnapshotParamsAllOf struct for RecoverCouchbaseSnapshotParamsAllOf
type RecoverCouchbaseSnapshotParamsAllOf struct {
	// Specifies details of objects to be recovered.
	Objects []RecoverCouchbaseNoSqlObjectParams `json:"objects,omitempty"`
}

// NewRecoverCouchbaseSnapshotParamsAllOf instantiates a new RecoverCouchbaseSnapshotParamsAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverCouchbaseSnapshotParamsAllOf() *RecoverCouchbaseSnapshotParamsAllOf {
	this := RecoverCouchbaseSnapshotParamsAllOf{}
	return &this
}

// NewRecoverCouchbaseSnapshotParamsAllOfWithDefaults instantiates a new RecoverCouchbaseSnapshotParamsAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverCouchbaseSnapshotParamsAllOfWithDefaults() *RecoverCouchbaseSnapshotParamsAllOf {
	this := RecoverCouchbaseSnapshotParamsAllOf{}
	return &this
}

// GetObjects returns the Objects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverCouchbaseSnapshotParamsAllOf) GetObjects() []RecoverCouchbaseNoSqlObjectParams {
	if o == nil  {
		var ret []RecoverCouchbaseNoSqlObjectParams
		return ret
	}
	return o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverCouchbaseSnapshotParamsAllOf) GetObjectsOk() (*[]RecoverCouchbaseNoSqlObjectParams, bool) {
	if o == nil || o.Objects == nil {
		return nil, false
	}
	return &o.Objects, true
}

// HasObjects returns a boolean if a field has been set.
func (o *RecoverCouchbaseSnapshotParamsAllOf) HasObjects() bool {
	if o != nil && o.Objects != nil {
		return true
	}

	return false
}

// SetObjects gets a reference to the given []RecoverCouchbaseNoSqlObjectParams and assigns it to the Objects field.
func (o *RecoverCouchbaseSnapshotParamsAllOf) SetObjects(v []RecoverCouchbaseNoSqlObjectParams) {
	o.Objects = v
}

func (o RecoverCouchbaseSnapshotParamsAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Objects != nil {
		toSerialize["objects"] = o.Objects
	}
	return json.Marshal(toSerialize)
}

type NullableRecoverCouchbaseSnapshotParamsAllOf struct {
	value *RecoverCouchbaseSnapshotParamsAllOf
	isSet bool
}

func (v NullableRecoverCouchbaseSnapshotParamsAllOf) Get() *RecoverCouchbaseSnapshotParamsAllOf {
	return v.value
}

func (v *NullableRecoverCouchbaseSnapshotParamsAllOf) Set(val *RecoverCouchbaseSnapshotParamsAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverCouchbaseSnapshotParamsAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverCouchbaseSnapshotParamsAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverCouchbaseSnapshotParamsAllOf(val *RecoverCouchbaseSnapshotParamsAllOf) *NullableRecoverCouchbaseSnapshotParamsAllOf {
	return &NullableRecoverCouchbaseSnapshotParamsAllOf{value: val, isSet: true}
}

func (v NullableRecoverCouchbaseSnapshotParamsAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverCouchbaseSnapshotParamsAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o RecoverCouchbaseSnapshotParamsAllOf) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}