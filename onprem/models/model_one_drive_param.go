/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// OneDriveParam Specifies parameters to recover a OneDrive.
type OneDriveParam struct {
	// Specifies the OneDrive id.
	Id NullableString `json:"id,omitempty"`
	// Specifies the OneDrive name.
	Name NullableString `json:"name,omitempty"`
	// Specifies whether to recover the whole OneDrive. This is set to false when excluding recovering specific drive items.
	RecoverEntireDrive NullableBool `json:"recoverEntireDrive,omitempty"`
	// Specifies a list of OneDrive items to recover.
	RecoverItems []OneDriveItem `json:"recoverItems,omitempty"`
}

// NewOneDriveParam instantiates a new OneDriveParam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOneDriveParam() *OneDriveParam {
	this := OneDriveParam{}
	return &this
}

// NewOneDriveParamWithDefaults instantiates a new OneDriveParam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOneDriveParamWithDefaults() *OneDriveParam {
	this := OneDriveParam{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OneDriveParam) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OneDriveParam) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *OneDriveParam) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *OneDriveParam) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *OneDriveParam) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *OneDriveParam) UnsetId() {
	o.Id.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OneDriveParam) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OneDriveParam) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *OneDriveParam) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *OneDriveParam) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *OneDriveParam) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *OneDriveParam) UnsetName() {
	o.Name.Unset()
}

// GetRecoverEntireDrive returns the RecoverEntireDrive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OneDriveParam) GetRecoverEntireDrive() bool {
	if o == nil || o.RecoverEntireDrive.Get() == nil {
		var ret bool
		return ret
	}
	return *o.RecoverEntireDrive.Get()
}

// GetRecoverEntireDriveOk returns a tuple with the RecoverEntireDrive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OneDriveParam) GetRecoverEntireDriveOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RecoverEntireDrive.Get(), o.RecoverEntireDrive.IsSet()
}

// HasRecoverEntireDrive returns a boolean if a field has been set.
func (o *OneDriveParam) HasRecoverEntireDrive() bool {
	if o != nil && o.RecoverEntireDrive.IsSet() {
		return true
	}

	return false
}

// SetRecoverEntireDrive gets a reference to the given NullableBool and assigns it to the RecoverEntireDrive field.
func (o *OneDriveParam) SetRecoverEntireDrive(v bool) {
	o.RecoverEntireDrive.Set(&v)
}
// SetRecoverEntireDriveNil sets the value for RecoverEntireDrive to be an explicit nil
func (o *OneDriveParam) SetRecoverEntireDriveNil() {
	o.RecoverEntireDrive.Set(nil)
}

// UnsetRecoverEntireDrive ensures that no value is present for RecoverEntireDrive, not even an explicit nil
func (o *OneDriveParam) UnsetRecoverEntireDrive() {
	o.RecoverEntireDrive.Unset()
}

// GetRecoverItems returns the RecoverItems field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OneDriveParam) GetRecoverItems() []OneDriveItem {
	if o == nil  {
		var ret []OneDriveItem
		return ret
	}
	return o.RecoverItems
}

// GetRecoverItemsOk returns a tuple with the RecoverItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OneDriveParam) GetRecoverItemsOk() (*[]OneDriveItem, bool) {
	if o == nil || o.RecoverItems == nil {
		return nil, false
	}
	return &o.RecoverItems, true
}

// HasRecoverItems returns a boolean if a field has been set.
func (o *OneDriveParam) HasRecoverItems() bool {
	if o != nil && o.RecoverItems != nil {
		return true
	}

	return false
}

// SetRecoverItems gets a reference to the given []OneDriveItem and assigns it to the RecoverItems field.
func (o *OneDriveParam) SetRecoverItems(v []OneDriveItem) {
	o.RecoverItems = v
}

func (o OneDriveParam) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.RecoverEntireDrive.IsSet() {
		toSerialize["recoverEntireDrive"] = o.RecoverEntireDrive.Get()
	}
	if o.RecoverItems != nil {
		toSerialize["recoverItems"] = o.RecoverItems
	}
	return json.Marshal(toSerialize)
}

type NullableOneDriveParam struct {
	value *OneDriveParam
	isSet bool
}

func (v NullableOneDriveParam) Get() *OneDriveParam {
	return v.value
}

func (v *NullableOneDriveParam) Set(val *OneDriveParam) {
	v.value = val
	v.isSet = true
}

func (v NullableOneDriveParam) IsSet() bool {
	return v.isSet
}

func (v *NullableOneDriveParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOneDriveParam(val *OneDriveParam) *NullableOneDriveParam {
	return &NullableOneDriveParam{value: val, isSet: true}
}

func (v NullableOneDriveParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOneDriveParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o OneDriveParam) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}