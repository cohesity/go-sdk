/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// CreateUserParams Specifies the parameters to create a User.
type CreateUserParams struct {
	// Specifies the username.
	Username NullableString `json:"username"`
	// Specifies the domain of the User.
	Domain NullableString `json:"domain"`
	// Specifies the password of the User.
	Password NullableString `json:"password"`
	// Specifies the description of the User.
	Description NullableString `json:"description,omitempty"`
	// Specifies the email address of the User.
	Email NullableString `json:"email,omitempty"`
	// Specifies the Roles of the User.
	Roles []string `json:"roles,omitempty"`
	// Specifies the primary group of the User. Primary group is used for file access.
	PrimaryGroup NullableString `json:"primaryGroup,omitempty"`
	// Specifies other groups of the User.
	OtherGroups []string `json:"otherGroups,omitempty"`
	// Specifies whether the User is restricted.
	Restricted NullableBool `json:"restricted,omitempty"`
	// Specifies the epoch time in milliseconds when the user is effective.
	EffectiveTimeMsecs NullableInt64 `json:"effectiveTimeMsecs,omitempty"`
	// Specifies the epoch time in milliseconds when the user is expired.
	ExpiredTimeMsecs NullableInt64 `json:"expiredTimeMsecs,omitempty"`
	// Specifies whether the User is locked.
	Locked NullableBool `json:"locked,omitempty"`
}

// NewCreateUserParams instantiates a new CreateUserParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateUserParams(username NullableString, domain NullableString, password NullableString) *CreateUserParams {
	this := CreateUserParams{}
	this.Username = username
	this.Domain = domain
	this.Password = password
	return &this
}

// NewCreateUserParamsWithDefaults instantiates a new CreateUserParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateUserParamsWithDefaults() *CreateUserParams {
	this := CreateUserParams{}
	return &this
}

// GetUsername returns the Username field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CreateUserParams) GetUsername() string {
	if o == nil || o.Username.Get() == nil {
		var ret string
		return ret
	}

	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUserParams) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// SetUsername sets field value
func (o *CreateUserParams) SetUsername(v string) {
	o.Username.Set(&v)
}

// GetDomain returns the Domain field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CreateUserParams) GetDomain() string {
	if o == nil || o.Domain.Get() == nil {
		var ret string
		return ret
	}

	return *o.Domain.Get()
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUserParams) GetDomainOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Domain.Get(), o.Domain.IsSet()
}

// SetDomain sets field value
func (o *CreateUserParams) SetDomain(v string) {
	o.Domain.Set(&v)
}

// GetPassword returns the Password field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CreateUserParams) GetPassword() string {
	if o == nil || o.Password.Get() == nil {
		var ret string
		return ret
	}

	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUserParams) GetPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// SetPassword sets field value
func (o *CreateUserParams) SetPassword(v string) {
	o.Password.Set(&v)
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUserParams) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUserParams) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateUserParams) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *CreateUserParams) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *CreateUserParams) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *CreateUserParams) UnsetDescription() {
	o.Description.Unset()
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUserParams) GetEmail() string {
	if o == nil || o.Email.Get() == nil {
		var ret string
		return ret
	}
	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUserParams) GetEmailOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// HasEmail returns a boolean if a field has been set.
func (o *CreateUserParams) HasEmail() bool {
	if o != nil && o.Email.IsSet() {
		return true
	}

	return false
}

// SetEmail gets a reference to the given NullableString and assigns it to the Email field.
func (o *CreateUserParams) SetEmail(v string) {
	o.Email.Set(&v)
}
// SetEmailNil sets the value for Email to be an explicit nil
func (o *CreateUserParams) SetEmailNil() {
	o.Email.Set(nil)
}

// UnsetEmail ensures that no value is present for Email, not even an explicit nil
func (o *CreateUserParams) UnsetEmail() {
	o.Email.Unset()
}

// GetRoles returns the Roles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUserParams) GetRoles() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUserParams) GetRolesOk() (*[]string, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return &o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *CreateUserParams) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *CreateUserParams) SetRoles(v []string) {
	o.Roles = v
}

// GetPrimaryGroup returns the PrimaryGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUserParams) GetPrimaryGroup() string {
	if o == nil || o.PrimaryGroup.Get() == nil {
		var ret string
		return ret
	}
	return *o.PrimaryGroup.Get()
}

// GetPrimaryGroupOk returns a tuple with the PrimaryGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUserParams) GetPrimaryGroupOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PrimaryGroup.Get(), o.PrimaryGroup.IsSet()
}

// HasPrimaryGroup returns a boolean if a field has been set.
func (o *CreateUserParams) HasPrimaryGroup() bool {
	if o != nil && o.PrimaryGroup.IsSet() {
		return true
	}

	return false
}

// SetPrimaryGroup gets a reference to the given NullableString and assigns it to the PrimaryGroup field.
func (o *CreateUserParams) SetPrimaryGroup(v string) {
	o.PrimaryGroup.Set(&v)
}
// SetPrimaryGroupNil sets the value for PrimaryGroup to be an explicit nil
func (o *CreateUserParams) SetPrimaryGroupNil() {
	o.PrimaryGroup.Set(nil)
}

// UnsetPrimaryGroup ensures that no value is present for PrimaryGroup, not even an explicit nil
func (o *CreateUserParams) UnsetPrimaryGroup() {
	o.PrimaryGroup.Unset()
}

// GetOtherGroups returns the OtherGroups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUserParams) GetOtherGroups() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.OtherGroups
}

// GetOtherGroupsOk returns a tuple with the OtherGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUserParams) GetOtherGroupsOk() (*[]string, bool) {
	if o == nil || o.OtherGroups == nil {
		return nil, false
	}
	return &o.OtherGroups, true
}

// HasOtherGroups returns a boolean if a field has been set.
func (o *CreateUserParams) HasOtherGroups() bool {
	if o != nil && o.OtherGroups != nil {
		return true
	}

	return false
}

// SetOtherGroups gets a reference to the given []string and assigns it to the OtherGroups field.
func (o *CreateUserParams) SetOtherGroups(v []string) {
	o.OtherGroups = v
}

// GetRestricted returns the Restricted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUserParams) GetRestricted() bool {
	if o == nil || o.Restricted.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Restricted.Get()
}

// GetRestrictedOk returns a tuple with the Restricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUserParams) GetRestrictedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Restricted.Get(), o.Restricted.IsSet()
}

// HasRestricted returns a boolean if a field has been set.
func (o *CreateUserParams) HasRestricted() bool {
	if o != nil && o.Restricted.IsSet() {
		return true
	}

	return false
}

// SetRestricted gets a reference to the given NullableBool and assigns it to the Restricted field.
func (o *CreateUserParams) SetRestricted(v bool) {
	o.Restricted.Set(&v)
}
// SetRestrictedNil sets the value for Restricted to be an explicit nil
func (o *CreateUserParams) SetRestrictedNil() {
	o.Restricted.Set(nil)
}

// UnsetRestricted ensures that no value is present for Restricted, not even an explicit nil
func (o *CreateUserParams) UnsetRestricted() {
	o.Restricted.Unset()
}

// GetEffectiveTimeMsecs returns the EffectiveTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUserParams) GetEffectiveTimeMsecs() int64 {
	if o == nil || o.EffectiveTimeMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.EffectiveTimeMsecs.Get()
}

// GetEffectiveTimeMsecsOk returns a tuple with the EffectiveTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUserParams) GetEffectiveTimeMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EffectiveTimeMsecs.Get(), o.EffectiveTimeMsecs.IsSet()
}

// HasEffectiveTimeMsecs returns a boolean if a field has been set.
func (o *CreateUserParams) HasEffectiveTimeMsecs() bool {
	if o != nil && o.EffectiveTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetEffectiveTimeMsecs gets a reference to the given NullableInt64 and assigns it to the EffectiveTimeMsecs field.
func (o *CreateUserParams) SetEffectiveTimeMsecs(v int64) {
	o.EffectiveTimeMsecs.Set(&v)
}
// SetEffectiveTimeMsecsNil sets the value for EffectiveTimeMsecs to be an explicit nil
func (o *CreateUserParams) SetEffectiveTimeMsecsNil() {
	o.EffectiveTimeMsecs.Set(nil)
}

// UnsetEffectiveTimeMsecs ensures that no value is present for EffectiveTimeMsecs, not even an explicit nil
func (o *CreateUserParams) UnsetEffectiveTimeMsecs() {
	o.EffectiveTimeMsecs.Unset()
}

// GetExpiredTimeMsecs returns the ExpiredTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUserParams) GetExpiredTimeMsecs() int64 {
	if o == nil || o.ExpiredTimeMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ExpiredTimeMsecs.Get()
}

// GetExpiredTimeMsecsOk returns a tuple with the ExpiredTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUserParams) GetExpiredTimeMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExpiredTimeMsecs.Get(), o.ExpiredTimeMsecs.IsSet()
}

// HasExpiredTimeMsecs returns a boolean if a field has been set.
func (o *CreateUserParams) HasExpiredTimeMsecs() bool {
	if o != nil && o.ExpiredTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetExpiredTimeMsecs gets a reference to the given NullableInt64 and assigns it to the ExpiredTimeMsecs field.
func (o *CreateUserParams) SetExpiredTimeMsecs(v int64) {
	o.ExpiredTimeMsecs.Set(&v)
}
// SetExpiredTimeMsecsNil sets the value for ExpiredTimeMsecs to be an explicit nil
func (o *CreateUserParams) SetExpiredTimeMsecsNil() {
	o.ExpiredTimeMsecs.Set(nil)
}

// UnsetExpiredTimeMsecs ensures that no value is present for ExpiredTimeMsecs, not even an explicit nil
func (o *CreateUserParams) UnsetExpiredTimeMsecs() {
	o.ExpiredTimeMsecs.Unset()
}

// GetLocked returns the Locked field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUserParams) GetLocked() bool {
	if o == nil || o.Locked.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Locked.Get()
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUserParams) GetLockedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Locked.Get(), o.Locked.IsSet()
}

// HasLocked returns a boolean if a field has been set.
func (o *CreateUserParams) HasLocked() bool {
	if o != nil && o.Locked.IsSet() {
		return true
	}

	return false
}

// SetLocked gets a reference to the given NullableBool and assigns it to the Locked field.
func (o *CreateUserParams) SetLocked(v bool) {
	o.Locked.Set(&v)
}
// SetLockedNil sets the value for Locked to be an explicit nil
func (o *CreateUserParams) SetLockedNil() {
	o.Locked.Set(nil)
}

// UnsetLocked ensures that no value is present for Locked, not even an explicit nil
func (o *CreateUserParams) UnsetLocked() {
	o.Locked.Unset()
}

func (o CreateUserParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["username"] = o.Username.Get()
	}
	if true {
		toSerialize["domain"] = o.Domain.Get()
	}
	if true {
		toSerialize["password"] = o.Password.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Email.IsSet() {
		toSerialize["email"] = o.Email.Get()
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	if o.PrimaryGroup.IsSet() {
		toSerialize["primaryGroup"] = o.PrimaryGroup.Get()
	}
	if o.OtherGroups != nil {
		toSerialize["otherGroups"] = o.OtherGroups
	}
	if o.Restricted.IsSet() {
		toSerialize["restricted"] = o.Restricted.Get()
	}
	if o.EffectiveTimeMsecs.IsSet() {
		toSerialize["effectiveTimeMsecs"] = o.EffectiveTimeMsecs.Get()
	}
	if o.ExpiredTimeMsecs.IsSet() {
		toSerialize["expiredTimeMsecs"] = o.ExpiredTimeMsecs.Get()
	}
	if o.Locked.IsSet() {
		toSerialize["locked"] = o.Locked.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCreateUserParams struct {
	value *CreateUserParams
	isSet bool
}

func (v NullableCreateUserParams) Get() *CreateUserParams {
	return v.value
}

func (v *NullableCreateUserParams) Set(val *CreateUserParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUserParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUserParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUserParams(val *CreateUserParams) *NullableCreateUserParams {
	return &NullableCreateUserParams{value: val, isSet: true}
}

func (v NullableCreateUserParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUserParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o CreateUserParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}