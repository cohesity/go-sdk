/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// PrimaryBackupTarget Specifies the primary backup target settings for regular backups. If the backup target field is not specified then backup will be taken locally on the Cohesity cluster.
type PrimaryBackupTarget struct {
	// Specifies the primary backup location where backups will be stored. If not specified, then default is assumed as local backup on Cohesity cluster.
	TargetType NullableString `json:"targetType,omitempty"`
	ArchivalTargetSettings *PrimaryArchivalTarget `json:"archivalTargetSettings,omitempty"`
}

// NewPrimaryBackupTarget instantiates a new PrimaryBackupTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrimaryBackupTarget() *PrimaryBackupTarget {
	this := PrimaryBackupTarget{}
	return &this
}

// NewPrimaryBackupTargetWithDefaults instantiates a new PrimaryBackupTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrimaryBackupTargetWithDefaults() *PrimaryBackupTarget {
	this := PrimaryBackupTarget{}
	return &this
}

// GetTargetType returns the TargetType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PrimaryBackupTarget) GetTargetType() string {
	if o == nil || o.TargetType.Get() == nil {
		var ret string
		return ret
	}
	return *o.TargetType.Get()
}

// GetTargetTypeOk returns a tuple with the TargetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PrimaryBackupTarget) GetTargetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetType.Get(), o.TargetType.IsSet()
}

// HasTargetType returns a boolean if a field has been set.
func (o *PrimaryBackupTarget) HasTargetType() bool {
	if o != nil && o.TargetType.IsSet() {
		return true
	}

	return false
}

// SetTargetType gets a reference to the given NullableString and assigns it to the TargetType field.
func (o *PrimaryBackupTarget) SetTargetType(v string) {
	o.TargetType.Set(&v)
}
// SetTargetTypeNil sets the value for TargetType to be an explicit nil
func (o *PrimaryBackupTarget) SetTargetTypeNil() {
	o.TargetType.Set(nil)
}

// UnsetTargetType ensures that no value is present for TargetType, not even an explicit nil
func (o *PrimaryBackupTarget) UnsetTargetType() {
	o.TargetType.Unset()
}

// GetArchivalTargetSettings returns the ArchivalTargetSettings field value if set, zero value otherwise.
func (o *PrimaryBackupTarget) GetArchivalTargetSettings() PrimaryArchivalTarget {
	if o == nil || o.ArchivalTargetSettings == nil {
		var ret PrimaryArchivalTarget
		return ret
	}
	return *o.ArchivalTargetSettings
}

// GetArchivalTargetSettingsOk returns a tuple with the ArchivalTargetSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrimaryBackupTarget) GetArchivalTargetSettingsOk() (*PrimaryArchivalTarget, bool) {
	if o == nil || o.ArchivalTargetSettings == nil {
		return nil, false
	}
	return o.ArchivalTargetSettings, true
}

// HasArchivalTargetSettings returns a boolean if a field has been set.
func (o *PrimaryBackupTarget) HasArchivalTargetSettings() bool {
	if o != nil && o.ArchivalTargetSettings != nil {
		return true
	}

	return false
}

// SetArchivalTargetSettings gets a reference to the given PrimaryArchivalTarget and assigns it to the ArchivalTargetSettings field.
func (o *PrimaryBackupTarget) SetArchivalTargetSettings(v PrimaryArchivalTarget) {
	o.ArchivalTargetSettings = &v
}

func (o PrimaryBackupTarget) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TargetType.IsSet() {
		toSerialize["targetType"] = o.TargetType.Get()
	}
	if o.ArchivalTargetSettings != nil {
		toSerialize["archivalTargetSettings"] = o.ArchivalTargetSettings
	}
	return json.Marshal(toSerialize)
}

type NullablePrimaryBackupTarget struct {
	value *PrimaryBackupTarget
	isSet bool
}

func (v NullablePrimaryBackupTarget) Get() *PrimaryBackupTarget {
	return v.value
}

func (v *NullablePrimaryBackupTarget) Set(val *PrimaryBackupTarget) {
	v.value = val
	v.isSet = true
}

func (v NullablePrimaryBackupTarget) IsSet() bool {
	return v.isSet
}

func (v *NullablePrimaryBackupTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrimaryBackupTarget(val *PrimaryBackupTarget) *NullablePrimaryBackupTarget {
	return &NullablePrimaryBackupTarget{value: val, isSet: true}
}

func (v NullablePrimaryBackupTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrimaryBackupTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o PrimaryBackupTarget) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}