/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// RecoverVmwareVmNewNetworkConfig Specifies the new network config parameters to be applied to VMware VMs.
type RecoverVmwareVmNewNetworkConfig struct {
	// Specifies the network port group (i.e, either a standard switch port group or a distributed port group) that will attached to the recovered Object. This parameter is mandatory if detach network is specified as false.
	NetworkPortGroup NullableRecoveryObjectIdentifier `json:"networkPortGroup,omitempty"`
	// Specifies whether the attached network should be left in disabled state. Default is false
	DisableNetwork NullableBool `json:"disableNetwork,omitempty"`
	// If this is true and we are attaching to a new network entity, then the VM's MAC address will be preserved on the new network. Default value is false.
	PreserveMacAddress NullableBool `json:"preserveMacAddress,omitempty"`
}

// NewRecoverVmwareVmNewNetworkConfig instantiates a new RecoverVmwareVmNewNetworkConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverVmwareVmNewNetworkConfig() *RecoverVmwareVmNewNetworkConfig {
	this := RecoverVmwareVmNewNetworkConfig{}
	return &this
}

// NewRecoverVmwareVmNewNetworkConfigWithDefaults instantiates a new RecoverVmwareVmNewNetworkConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverVmwareVmNewNetworkConfigWithDefaults() *RecoverVmwareVmNewNetworkConfig {
	this := RecoverVmwareVmNewNetworkConfig{}
	return &this
}

// GetNetworkPortGroup returns the NetworkPortGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareVmNewNetworkConfig) GetNetworkPortGroup() RecoveryObjectIdentifier {
	if o == nil || o.NetworkPortGroup.Get() == nil {
		var ret RecoveryObjectIdentifier
		return ret
	}
	return *o.NetworkPortGroup.Get()
}

// GetNetworkPortGroupOk returns a tuple with the NetworkPortGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareVmNewNetworkConfig) GetNetworkPortGroupOk() (*RecoveryObjectIdentifier, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NetworkPortGroup.Get(), o.NetworkPortGroup.IsSet()
}

// HasNetworkPortGroup returns a boolean if a field has been set.
func (o *RecoverVmwareVmNewNetworkConfig) HasNetworkPortGroup() bool {
	if o != nil && o.NetworkPortGroup.IsSet() {
		return true
	}

	return false
}

// SetNetworkPortGroup gets a reference to the given NullableRecoveryObjectIdentifier and assigns it to the NetworkPortGroup field.
func (o *RecoverVmwareVmNewNetworkConfig) SetNetworkPortGroup(v RecoveryObjectIdentifier) {
	o.NetworkPortGroup.Set(&v)
}
// SetNetworkPortGroupNil sets the value for NetworkPortGroup to be an explicit nil
func (o *RecoverVmwareVmNewNetworkConfig) SetNetworkPortGroupNil() {
	o.NetworkPortGroup.Set(nil)
}

// UnsetNetworkPortGroup ensures that no value is present for NetworkPortGroup, not even an explicit nil
func (o *RecoverVmwareVmNewNetworkConfig) UnsetNetworkPortGroup() {
	o.NetworkPortGroup.Unset()
}

// GetDisableNetwork returns the DisableNetwork field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareVmNewNetworkConfig) GetDisableNetwork() bool {
	if o == nil || o.DisableNetwork.Get() == nil {
		var ret bool
		return ret
	}
	return *o.DisableNetwork.Get()
}

// GetDisableNetworkOk returns a tuple with the DisableNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareVmNewNetworkConfig) GetDisableNetworkOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisableNetwork.Get(), o.DisableNetwork.IsSet()
}

// HasDisableNetwork returns a boolean if a field has been set.
func (o *RecoverVmwareVmNewNetworkConfig) HasDisableNetwork() bool {
	if o != nil && o.DisableNetwork.IsSet() {
		return true
	}

	return false
}

// SetDisableNetwork gets a reference to the given NullableBool and assigns it to the DisableNetwork field.
func (o *RecoverVmwareVmNewNetworkConfig) SetDisableNetwork(v bool) {
	o.DisableNetwork.Set(&v)
}
// SetDisableNetworkNil sets the value for DisableNetwork to be an explicit nil
func (o *RecoverVmwareVmNewNetworkConfig) SetDisableNetworkNil() {
	o.DisableNetwork.Set(nil)
}

// UnsetDisableNetwork ensures that no value is present for DisableNetwork, not even an explicit nil
func (o *RecoverVmwareVmNewNetworkConfig) UnsetDisableNetwork() {
	o.DisableNetwork.Unset()
}

// GetPreserveMacAddress returns the PreserveMacAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareVmNewNetworkConfig) GetPreserveMacAddress() bool {
	if o == nil || o.PreserveMacAddress.Get() == nil {
		var ret bool
		return ret
	}
	return *o.PreserveMacAddress.Get()
}

// GetPreserveMacAddressOk returns a tuple with the PreserveMacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareVmNewNetworkConfig) GetPreserveMacAddressOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PreserveMacAddress.Get(), o.PreserveMacAddress.IsSet()
}

// HasPreserveMacAddress returns a boolean if a field has been set.
func (o *RecoverVmwareVmNewNetworkConfig) HasPreserveMacAddress() bool {
	if o != nil && o.PreserveMacAddress.IsSet() {
		return true
	}

	return false
}

// SetPreserveMacAddress gets a reference to the given NullableBool and assigns it to the PreserveMacAddress field.
func (o *RecoverVmwareVmNewNetworkConfig) SetPreserveMacAddress(v bool) {
	o.PreserveMacAddress.Set(&v)
}
// SetPreserveMacAddressNil sets the value for PreserveMacAddress to be an explicit nil
func (o *RecoverVmwareVmNewNetworkConfig) SetPreserveMacAddressNil() {
	o.PreserveMacAddress.Set(nil)
}

// UnsetPreserveMacAddress ensures that no value is present for PreserveMacAddress, not even an explicit nil
func (o *RecoverVmwareVmNewNetworkConfig) UnsetPreserveMacAddress() {
	o.PreserveMacAddress.Unset()
}

func (o RecoverVmwareVmNewNetworkConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NetworkPortGroup.IsSet() {
		toSerialize["networkPortGroup"] = o.NetworkPortGroup.Get()
	}
	if o.DisableNetwork.IsSet() {
		toSerialize["disableNetwork"] = o.DisableNetwork.Get()
	}
	if o.PreserveMacAddress.IsSet() {
		toSerialize["preserveMacAddress"] = o.PreserveMacAddress.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRecoverVmwareVmNewNetworkConfig struct {
	value *RecoverVmwareVmNewNetworkConfig
	isSet bool
}

func (v NullableRecoverVmwareVmNewNetworkConfig) Get() *RecoverVmwareVmNewNetworkConfig {
	return v.value
}

func (v *NullableRecoverVmwareVmNewNetworkConfig) Set(val *RecoverVmwareVmNewNetworkConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverVmwareVmNewNetworkConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverVmwareVmNewNetworkConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverVmwareVmNewNetworkConfig(val *RecoverVmwareVmNewNetworkConfig) *NullableRecoverVmwareVmNewNetworkConfig {
	return &NullableRecoverVmwareVmNewNetworkConfig{value: val, isSet: true}
}

func (v NullableRecoverVmwareVmNewNetworkConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverVmwareVmNewNetworkConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o RecoverVmwareVmNewNetworkConfig) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}