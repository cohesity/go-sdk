/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// ActiveDirectoryAdminParams Specifies the params of a user with administrative privilege of an Active Directory.
type ActiveDirectoryAdminParams struct {
	// Specifies the user name.
	Username NullableString `json:"username"`
	// Specifies the password of the user.
	Password NullableString `json:"password"`
}

// NewActiveDirectoryAdminParams instantiates a new ActiveDirectoryAdminParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveDirectoryAdminParams(username NullableString, password NullableString) *ActiveDirectoryAdminParams {
	this := ActiveDirectoryAdminParams{}
	this.Username = username
	this.Password = password
	return &this
}

// NewActiveDirectoryAdminParamsWithDefaults instantiates a new ActiveDirectoryAdminParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveDirectoryAdminParamsWithDefaults() *ActiveDirectoryAdminParams {
	this := ActiveDirectoryAdminParams{}
	return &this
}

// GetUsername returns the Username field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ActiveDirectoryAdminParams) GetUsername() string {
	if o == nil || o.Username.Get() == nil {
		var ret string
		return ret
	}

	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveDirectoryAdminParams) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// SetUsername sets field value
func (o *ActiveDirectoryAdminParams) SetUsername(v string) {
	o.Username.Set(&v)
}

// GetPassword returns the Password field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ActiveDirectoryAdminParams) GetPassword() string {
	if o == nil || o.Password.Get() == nil {
		var ret string
		return ret
	}

	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveDirectoryAdminParams) GetPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// SetPassword sets field value
func (o *ActiveDirectoryAdminParams) SetPassword(v string) {
	o.Password.Set(&v)
}

func (o ActiveDirectoryAdminParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["username"] = o.Username.Get()
	}
	if true {
		toSerialize["password"] = o.Password.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableActiveDirectoryAdminParams struct {
	value *ActiveDirectoryAdminParams
	isSet bool
}

func (v NullableActiveDirectoryAdminParams) Get() *ActiveDirectoryAdminParams {
	return v.value
}

func (v *NullableActiveDirectoryAdminParams) Set(val *ActiveDirectoryAdminParams) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveDirectoryAdminParams) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveDirectoryAdminParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveDirectoryAdminParams(val *ActiveDirectoryAdminParams) *NullableActiveDirectoryAdminParams {
	return &NullableActiveDirectoryAdminParams{value: val, isSet: true}
}

func (v NullableActiveDirectoryAdminParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveDirectoryAdminParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o ActiveDirectoryAdminParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}