/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// RegisterSwiftParams Specifies the parameters to register a Swift service on Keystone server.
type RegisterSwiftParams struct {
	// Specifies the tenant Id who's Swift service will be registered.
	TenantId NullableString `json:"tenantId"`
	KeystoneCredentials *KeystoneCredentials `json:"keystoneCredentials,omitempty"`
}

// NewRegisterSwiftParams instantiates a new RegisterSwiftParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterSwiftParams(tenantId NullableString) *RegisterSwiftParams {
	this := RegisterSwiftParams{}
	this.TenantId = tenantId
	return &this
}

// NewRegisterSwiftParamsWithDefaults instantiates a new RegisterSwiftParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterSwiftParamsWithDefaults() *RegisterSwiftParams {
	this := RegisterSwiftParams{}
	return &this
}

// GetTenantId returns the TenantId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *RegisterSwiftParams) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}

	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterSwiftParams) GetTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// SetTenantId sets field value
func (o *RegisterSwiftParams) SetTenantId(v string) {
	o.TenantId.Set(&v)
}

// GetKeystoneCredentials returns the KeystoneCredentials field value if set, zero value otherwise.
func (o *RegisterSwiftParams) GetKeystoneCredentials() KeystoneCredentials {
	if o == nil || o.KeystoneCredentials == nil {
		var ret KeystoneCredentials
		return ret
	}
	return *o.KeystoneCredentials
}

// GetKeystoneCredentialsOk returns a tuple with the KeystoneCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterSwiftParams) GetKeystoneCredentialsOk() (*KeystoneCredentials, bool) {
	if o == nil || o.KeystoneCredentials == nil {
		return nil, false
	}
	return o.KeystoneCredentials, true
}

// HasKeystoneCredentials returns a boolean if a field has been set.
func (o *RegisterSwiftParams) HasKeystoneCredentials() bool {
	if o != nil && o.KeystoneCredentials != nil {
		return true
	}

	return false
}

// SetKeystoneCredentials gets a reference to the given KeystoneCredentials and assigns it to the KeystoneCredentials field.
func (o *RegisterSwiftParams) SetKeystoneCredentials(v KeystoneCredentials) {
	o.KeystoneCredentials = &v
}

func (o RegisterSwiftParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.KeystoneCredentials != nil {
		toSerialize["keystoneCredentials"] = o.KeystoneCredentials
	}
	return json.Marshal(toSerialize)
}

type NullableRegisterSwiftParams struct {
	value *RegisterSwiftParams
	isSet bool
}

func (v NullableRegisterSwiftParams) Get() *RegisterSwiftParams {
	return v.value
}

func (v *NullableRegisterSwiftParams) Set(val *RegisterSwiftParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterSwiftParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterSwiftParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterSwiftParams(val *RegisterSwiftParams) *NullableRegisterSwiftParams {
	return &NullableRegisterSwiftParams{value: val, isSet: true}
}

func (v NullableRegisterSwiftParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterSwiftParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o RegisterSwiftParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}