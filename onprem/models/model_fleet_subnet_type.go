/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// FleetSubnetType Fleet Subnet Type
type FleetSubnetType struct {
	// Specifies the fleet type of the subnet.
	FleetSubnetType *string `json:"fleetSubnetType,omitempty"`
}

// NewFleetSubnetType instantiates a new FleetSubnetType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFleetSubnetType() *FleetSubnetType {
	this := FleetSubnetType{}
	return &this
}

// NewFleetSubnetTypeWithDefaults instantiates a new FleetSubnetType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFleetSubnetTypeWithDefaults() *FleetSubnetType {
	this := FleetSubnetType{}
	return &this
}

// GetFleetSubnetType returns the FleetSubnetType field value if set, zero value otherwise.
func (o *FleetSubnetType) GetFleetSubnetType() string {
	if o == nil || o.FleetSubnetType == nil {
		var ret string
		return ret
	}
	return *o.FleetSubnetType
}

// GetFleetSubnetTypeOk returns a tuple with the FleetSubnetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FleetSubnetType) GetFleetSubnetTypeOk() (*string, bool) {
	if o == nil || o.FleetSubnetType == nil {
		return nil, false
	}
	return o.FleetSubnetType, true
}

// HasFleetSubnetType returns a boolean if a field has been set.
func (o *FleetSubnetType) HasFleetSubnetType() bool {
	if o != nil && o.FleetSubnetType != nil {
		return true
	}

	return false
}

// SetFleetSubnetType gets a reference to the given string and assigns it to the FleetSubnetType field.
func (o *FleetSubnetType) SetFleetSubnetType(v string) {
	o.FleetSubnetType = &v
}

func (o FleetSubnetType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FleetSubnetType != nil {
		toSerialize["fleetSubnetType"] = o.FleetSubnetType
	}
	return json.Marshal(toSerialize)
}

type NullableFleetSubnetType struct {
	value *FleetSubnetType
	isSet bool
}

func (v NullableFleetSubnetType) Get() *FleetSubnetType {
	return v.value
}

func (v *NullableFleetSubnetType) Set(val *FleetSubnetType) {
	v.value = val
	v.isSet = true
}

func (v NullableFleetSubnetType) IsSet() bool {
	return v.isSet
}

func (v *NullableFleetSubnetType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFleetSubnetType(val *FleetSubnetType) *NullableFleetSubnetType {
	return &NullableFleetSubnetType{value: val, isSet: true}
}

func (v NullableFleetSubnetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFleetSubnetType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o FleetSubnetType) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}