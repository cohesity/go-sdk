/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// VmwareAdditionalParams Additional params for VMware protection source.
type VmwareAdditionalParams struct {
	VcdParams *VcdAdditionalParams `json:"vcdParams,omitempty"`
}

// NewVmwareAdditionalParams instantiates a new VmwareAdditionalParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmwareAdditionalParams() *VmwareAdditionalParams {
	this := VmwareAdditionalParams{}
	return &this
}

// NewVmwareAdditionalParamsWithDefaults instantiates a new VmwareAdditionalParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmwareAdditionalParamsWithDefaults() *VmwareAdditionalParams {
	this := VmwareAdditionalParams{}
	return &this
}

// GetVcdParams returns the VcdParams field value if set, zero value otherwise.
func (o *VmwareAdditionalParams) GetVcdParams() VcdAdditionalParams {
	if o == nil || o.VcdParams == nil {
		var ret VcdAdditionalParams
		return ret
	}
	return *o.VcdParams
}

// GetVcdParamsOk returns a tuple with the VcdParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmwareAdditionalParams) GetVcdParamsOk() (*VcdAdditionalParams, bool) {
	if o == nil || o.VcdParams == nil {
		return nil, false
	}
	return o.VcdParams, true
}

// HasVcdParams returns a boolean if a field has been set.
func (o *VmwareAdditionalParams) HasVcdParams() bool {
	if o != nil && o.VcdParams != nil {
		return true
	}

	return false
}

// SetVcdParams gets a reference to the given VcdAdditionalParams and assigns it to the VcdParams field.
func (o *VmwareAdditionalParams) SetVcdParams(v VcdAdditionalParams) {
	o.VcdParams = &v
}

func (o VmwareAdditionalParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.VcdParams != nil {
		toSerialize["vcdParams"] = o.VcdParams
	}
	return json.Marshal(toSerialize)
}

type NullableVmwareAdditionalParams struct {
	value *VmwareAdditionalParams
	isSet bool
}

func (v NullableVmwareAdditionalParams) Get() *VmwareAdditionalParams {
	return v.value
}

func (v *NullableVmwareAdditionalParams) Set(val *VmwareAdditionalParams) {
	v.value = val
	v.isSet = true
}

func (v NullableVmwareAdditionalParams) IsSet() bool {
	return v.isSet
}

func (v *NullableVmwareAdditionalParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmwareAdditionalParams(val *VmwareAdditionalParams) *NullableVmwareAdditionalParams {
	return &NullableVmwareAdditionalParams{value: val, isSet: true}
}

func (v NullableVmwareAdditionalParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmwareAdditionalParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o VmwareAdditionalParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}