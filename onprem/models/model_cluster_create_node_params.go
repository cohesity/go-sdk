/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// ClusterCreateNodeParams Node params required for cluster creation
type ClusterCreateNodeParams struct {
	// Specifies the node id of the node.
	NodeId NullableInt64 `json:"nodeId"`
	// Specifies the node ip address which is either in ipv4/ipv6 format.
	NodeIp NullableString `json:"nodeIp"`
}

// NewClusterCreateNodeParams instantiates a new ClusterCreateNodeParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterCreateNodeParams(nodeId NullableInt64, nodeIp NullableString) *ClusterCreateNodeParams {
	this := ClusterCreateNodeParams{}
	this.NodeId = nodeId
	this.NodeIp = nodeIp
	return &this
}

// NewClusterCreateNodeParamsWithDefaults instantiates a new ClusterCreateNodeParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterCreateNodeParamsWithDefaults() *ClusterCreateNodeParams {
	this := ClusterCreateNodeParams{}
	return &this
}

// GetNodeId returns the NodeId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *ClusterCreateNodeParams) GetNodeId() int64 {
	if o == nil || o.NodeId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.NodeId.Get()
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterCreateNodeParams) GetNodeIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NodeId.Get(), o.NodeId.IsSet()
}

// SetNodeId sets field value
func (o *ClusterCreateNodeParams) SetNodeId(v int64) {
	o.NodeId.Set(&v)
}

// GetNodeIp returns the NodeIp field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ClusterCreateNodeParams) GetNodeIp() string {
	if o == nil || o.NodeIp.Get() == nil {
		var ret string
		return ret
	}

	return *o.NodeIp.Get()
}

// GetNodeIpOk returns a tuple with the NodeIp field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterCreateNodeParams) GetNodeIpOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NodeIp.Get(), o.NodeIp.IsSet()
}

// SetNodeIp sets field value
func (o *ClusterCreateNodeParams) SetNodeIp(v string) {
	o.NodeIp.Set(&v)
}

func (o ClusterCreateNodeParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["nodeId"] = o.NodeId.Get()
	}
	if true {
		toSerialize["nodeIp"] = o.NodeIp.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableClusterCreateNodeParams struct {
	value *ClusterCreateNodeParams
	isSet bool
}

func (v NullableClusterCreateNodeParams) Get() *ClusterCreateNodeParams {
	return v.value
}

func (v *NullableClusterCreateNodeParams) Set(val *ClusterCreateNodeParams) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterCreateNodeParams) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterCreateNodeParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterCreateNodeParams(val *ClusterCreateNodeParams) *NullableClusterCreateNodeParams {
	return &NullableClusterCreateNodeParams{value: val, isSet: true}
}

func (v NullableClusterCreateNodeParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterCreateNodeParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o ClusterCreateNodeParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}