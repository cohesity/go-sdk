/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// MountVmwareVolumeParams Specifies the parameters to mount VMware Volumes.
type MountVmwareVolumeParams struct {
	// Specifies the environment of the recovery target. The corresponding params below must be filled out.
	TargetEnvironment string `json:"targetEnvironment"`
	// Specifies the params for recovering to a VMware target..
	VmwareTargetParams NullableVmwareTargetParamsForMountVolume `json:"vmwareTargetParams,omitempty"`
}

// NewMountVmwareVolumeParams instantiates a new MountVmwareVolumeParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMountVmwareVolumeParams(targetEnvironment string) *MountVmwareVolumeParams {
	this := MountVmwareVolumeParams{}
	this.TargetEnvironment = targetEnvironment
	return &this
}

// NewMountVmwareVolumeParamsWithDefaults instantiates a new MountVmwareVolumeParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMountVmwareVolumeParamsWithDefaults() *MountVmwareVolumeParams {
	this := MountVmwareVolumeParams{}
	return &this
}

// GetTargetEnvironment returns the TargetEnvironment field value
func (o *MountVmwareVolumeParams) GetTargetEnvironment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetEnvironment
}

// GetTargetEnvironmentOk returns a tuple with the TargetEnvironment field value
// and a boolean to check if the value has been set.
func (o *MountVmwareVolumeParams) GetTargetEnvironmentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TargetEnvironment, true
}

// SetTargetEnvironment sets field value
func (o *MountVmwareVolumeParams) SetTargetEnvironment(v string) {
	o.TargetEnvironment = v
}

// GetVmwareTargetParams returns the VmwareTargetParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MountVmwareVolumeParams) GetVmwareTargetParams() VmwareTargetParamsForMountVolume {
	if o == nil || o.VmwareTargetParams.Get() == nil {
		var ret VmwareTargetParamsForMountVolume
		return ret
	}
	return *o.VmwareTargetParams.Get()
}

// GetVmwareTargetParamsOk returns a tuple with the VmwareTargetParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MountVmwareVolumeParams) GetVmwareTargetParamsOk() (*VmwareTargetParamsForMountVolume, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VmwareTargetParams.Get(), o.VmwareTargetParams.IsSet()
}

// HasVmwareTargetParams returns a boolean if a field has been set.
func (o *MountVmwareVolumeParams) HasVmwareTargetParams() bool {
	if o != nil && o.VmwareTargetParams.IsSet() {
		return true
	}

	return false
}

// SetVmwareTargetParams gets a reference to the given NullableVmwareTargetParamsForMountVolume and assigns it to the VmwareTargetParams field.
func (o *MountVmwareVolumeParams) SetVmwareTargetParams(v VmwareTargetParamsForMountVolume) {
	o.VmwareTargetParams.Set(&v)
}
// SetVmwareTargetParamsNil sets the value for VmwareTargetParams to be an explicit nil
func (o *MountVmwareVolumeParams) SetVmwareTargetParamsNil() {
	o.VmwareTargetParams.Set(nil)
}

// UnsetVmwareTargetParams ensures that no value is present for VmwareTargetParams, not even an explicit nil
func (o *MountVmwareVolumeParams) UnsetVmwareTargetParams() {
	o.VmwareTargetParams.Unset()
}

func (o MountVmwareVolumeParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["targetEnvironment"] = o.TargetEnvironment
	}
	if o.VmwareTargetParams.IsSet() {
		toSerialize["vmwareTargetParams"] = o.VmwareTargetParams.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMountVmwareVolumeParams struct {
	value *MountVmwareVolumeParams
	isSet bool
}

func (v NullableMountVmwareVolumeParams) Get() *MountVmwareVolumeParams {
	return v.value
}

func (v *NullableMountVmwareVolumeParams) Set(val *MountVmwareVolumeParams) {
	v.value = val
	v.isSet = true
}

func (v NullableMountVmwareVolumeParams) IsSet() bool {
	return v.isSet
}

func (v *NullableMountVmwareVolumeParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMountVmwareVolumeParams(val *MountVmwareVolumeParams) *NullableMountVmwareVolumeParams {
	return &NullableMountVmwareVolumeParams{value: val, isSet: true}
}

func (v NullableMountVmwareVolumeParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMountVmwareVolumeParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o MountVmwareVolumeParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}