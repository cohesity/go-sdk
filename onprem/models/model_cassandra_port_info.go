/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// CassandraPortInfo Contains info about specific cassandra ports.
type CassandraPortInfo struct {
	// Port for the CQL native transport.
	NativeTransportPort NullableInt32 `json:"nativeTransportPort,omitempty"`
	// Remote Procedure Call (RPC) port for general mechanism for client-server applications.
	RpcPort NullableInt32 `json:"rpcPort,omitempty"`
	// TCP port for data. Internally used by Cassandra bulk loader.
	StoragePort NullableInt32 `json:"storagePort,omitempty"`
	// SSL port for encrypted communication. Internally used by the Cassandra bulk loader.
	SslStoragePort NullableInt32 `json:"sslStoragePort,omitempty"`
	// Cassandra management port.
	JmxPort NullableInt32 `json:"jmxPort,omitempty"`
}

// NewCassandraPortInfo instantiates a new CassandraPortInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCassandraPortInfo() *CassandraPortInfo {
	this := CassandraPortInfo{}
	return &this
}

// NewCassandraPortInfoWithDefaults instantiates a new CassandraPortInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCassandraPortInfoWithDefaults() *CassandraPortInfo {
	this := CassandraPortInfo{}
	return &this
}

// GetNativeTransportPort returns the NativeTransportPort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraPortInfo) GetNativeTransportPort() int32 {
	if o == nil || o.NativeTransportPort.Get() == nil {
		var ret int32
		return ret
	}
	return *o.NativeTransportPort.Get()
}

// GetNativeTransportPortOk returns a tuple with the NativeTransportPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraPortInfo) GetNativeTransportPortOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NativeTransportPort.Get(), o.NativeTransportPort.IsSet()
}

// HasNativeTransportPort returns a boolean if a field has been set.
func (o *CassandraPortInfo) HasNativeTransportPort() bool {
	if o != nil && o.NativeTransportPort.IsSet() {
		return true
	}

	return false
}

// SetNativeTransportPort gets a reference to the given NullableInt32 and assigns it to the NativeTransportPort field.
func (o *CassandraPortInfo) SetNativeTransportPort(v int32) {
	o.NativeTransportPort.Set(&v)
}
// SetNativeTransportPortNil sets the value for NativeTransportPort to be an explicit nil
func (o *CassandraPortInfo) SetNativeTransportPortNil() {
	o.NativeTransportPort.Set(nil)
}

// UnsetNativeTransportPort ensures that no value is present for NativeTransportPort, not even an explicit nil
func (o *CassandraPortInfo) UnsetNativeTransportPort() {
	o.NativeTransportPort.Unset()
}

// GetRpcPort returns the RpcPort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraPortInfo) GetRpcPort() int32 {
	if o == nil || o.RpcPort.Get() == nil {
		var ret int32
		return ret
	}
	return *o.RpcPort.Get()
}

// GetRpcPortOk returns a tuple with the RpcPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraPortInfo) GetRpcPortOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RpcPort.Get(), o.RpcPort.IsSet()
}

// HasRpcPort returns a boolean if a field has been set.
func (o *CassandraPortInfo) HasRpcPort() bool {
	if o != nil && o.RpcPort.IsSet() {
		return true
	}

	return false
}

// SetRpcPort gets a reference to the given NullableInt32 and assigns it to the RpcPort field.
func (o *CassandraPortInfo) SetRpcPort(v int32) {
	o.RpcPort.Set(&v)
}
// SetRpcPortNil sets the value for RpcPort to be an explicit nil
func (o *CassandraPortInfo) SetRpcPortNil() {
	o.RpcPort.Set(nil)
}

// UnsetRpcPort ensures that no value is present for RpcPort, not even an explicit nil
func (o *CassandraPortInfo) UnsetRpcPort() {
	o.RpcPort.Unset()
}

// GetStoragePort returns the StoragePort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraPortInfo) GetStoragePort() int32 {
	if o == nil || o.StoragePort.Get() == nil {
		var ret int32
		return ret
	}
	return *o.StoragePort.Get()
}

// GetStoragePortOk returns a tuple with the StoragePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraPortInfo) GetStoragePortOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StoragePort.Get(), o.StoragePort.IsSet()
}

// HasStoragePort returns a boolean if a field has been set.
func (o *CassandraPortInfo) HasStoragePort() bool {
	if o != nil && o.StoragePort.IsSet() {
		return true
	}

	return false
}

// SetStoragePort gets a reference to the given NullableInt32 and assigns it to the StoragePort field.
func (o *CassandraPortInfo) SetStoragePort(v int32) {
	o.StoragePort.Set(&v)
}
// SetStoragePortNil sets the value for StoragePort to be an explicit nil
func (o *CassandraPortInfo) SetStoragePortNil() {
	o.StoragePort.Set(nil)
}

// UnsetStoragePort ensures that no value is present for StoragePort, not even an explicit nil
func (o *CassandraPortInfo) UnsetStoragePort() {
	o.StoragePort.Unset()
}

// GetSslStoragePort returns the SslStoragePort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraPortInfo) GetSslStoragePort() int32 {
	if o == nil || o.SslStoragePort.Get() == nil {
		var ret int32
		return ret
	}
	return *o.SslStoragePort.Get()
}

// GetSslStoragePortOk returns a tuple with the SslStoragePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraPortInfo) GetSslStoragePortOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SslStoragePort.Get(), o.SslStoragePort.IsSet()
}

// HasSslStoragePort returns a boolean if a field has been set.
func (o *CassandraPortInfo) HasSslStoragePort() bool {
	if o != nil && o.SslStoragePort.IsSet() {
		return true
	}

	return false
}

// SetSslStoragePort gets a reference to the given NullableInt32 and assigns it to the SslStoragePort field.
func (o *CassandraPortInfo) SetSslStoragePort(v int32) {
	o.SslStoragePort.Set(&v)
}
// SetSslStoragePortNil sets the value for SslStoragePort to be an explicit nil
func (o *CassandraPortInfo) SetSslStoragePortNil() {
	o.SslStoragePort.Set(nil)
}

// UnsetSslStoragePort ensures that no value is present for SslStoragePort, not even an explicit nil
func (o *CassandraPortInfo) UnsetSslStoragePort() {
	o.SslStoragePort.Unset()
}

// GetJmxPort returns the JmxPort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraPortInfo) GetJmxPort() int32 {
	if o == nil || o.JmxPort.Get() == nil {
		var ret int32
		return ret
	}
	return *o.JmxPort.Get()
}

// GetJmxPortOk returns a tuple with the JmxPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraPortInfo) GetJmxPortOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.JmxPort.Get(), o.JmxPort.IsSet()
}

// HasJmxPort returns a boolean if a field has been set.
func (o *CassandraPortInfo) HasJmxPort() bool {
	if o != nil && o.JmxPort.IsSet() {
		return true
	}

	return false
}

// SetJmxPort gets a reference to the given NullableInt32 and assigns it to the JmxPort field.
func (o *CassandraPortInfo) SetJmxPort(v int32) {
	o.JmxPort.Set(&v)
}
// SetJmxPortNil sets the value for JmxPort to be an explicit nil
func (o *CassandraPortInfo) SetJmxPortNil() {
	o.JmxPort.Set(nil)
}

// UnsetJmxPort ensures that no value is present for JmxPort, not even an explicit nil
func (o *CassandraPortInfo) UnsetJmxPort() {
	o.JmxPort.Unset()
}

func (o CassandraPortInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NativeTransportPort.IsSet() {
		toSerialize["nativeTransportPort"] = o.NativeTransportPort.Get()
	}
	if o.RpcPort.IsSet() {
		toSerialize["rpcPort"] = o.RpcPort.Get()
	}
	if o.StoragePort.IsSet() {
		toSerialize["storagePort"] = o.StoragePort.Get()
	}
	if o.SslStoragePort.IsSet() {
		toSerialize["sslStoragePort"] = o.SslStoragePort.Get()
	}
	if o.JmxPort.IsSet() {
		toSerialize["jmxPort"] = o.JmxPort.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCassandraPortInfo struct {
	value *CassandraPortInfo
	isSet bool
}

func (v NullableCassandraPortInfo) Get() *CassandraPortInfo {
	return v.value
}

func (v *NullableCassandraPortInfo) Set(val *CassandraPortInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCassandraPortInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCassandraPortInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCassandraPortInfo(val *CassandraPortInfo) *NullableCassandraPortInfo {
	return &NullableCassandraPortInfo{value: val, isSet: true}
}

func (v NullableCassandraPortInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCassandraPortInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o CassandraPortInfo) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}