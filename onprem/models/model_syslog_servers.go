/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// SyslogServers Specifies the list of syslog servers.
type SyslogServers struct {
	// Specifies the list of syslog servers.
	SyslogServers []SyslogServer `json:"syslogServers,omitempty"`
}

// NewSyslogServers instantiates a new SyslogServers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyslogServers() *SyslogServers {
	this := SyslogServers{}
	return &this
}

// NewSyslogServersWithDefaults instantiates a new SyslogServers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyslogServersWithDefaults() *SyslogServers {
	this := SyslogServers{}
	return &this
}

// GetSyslogServers returns the SyslogServers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SyslogServers) GetSyslogServers() []SyslogServer {
	if o == nil  {
		var ret []SyslogServer
		return ret
	}
	return o.SyslogServers
}

// GetSyslogServersOk returns a tuple with the SyslogServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SyslogServers) GetSyslogServersOk() (*[]SyslogServer, bool) {
	if o == nil || o.SyslogServers == nil {
		return nil, false
	}
	return &o.SyslogServers, true
}

// HasSyslogServers returns a boolean if a field has been set.
func (o *SyslogServers) HasSyslogServers() bool {
	if o != nil && o.SyslogServers != nil {
		return true
	}

	return false
}

// SetSyslogServers gets a reference to the given []SyslogServer and assigns it to the SyslogServers field.
func (o *SyslogServers) SetSyslogServers(v []SyslogServer) {
	o.SyslogServers = v
}

func (o SyslogServers) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SyslogServers != nil {
		toSerialize["syslogServers"] = o.SyslogServers
	}
	return json.Marshal(toSerialize)
}

type NullableSyslogServers struct {
	value *SyslogServers
	isSet bool
}

func (v NullableSyslogServers) Get() *SyslogServers {
	return v.value
}

func (v *NullableSyslogServers) Set(val *SyslogServers) {
	v.value = val
	v.isSet = true
}

func (v NullableSyslogServers) IsSet() bool {
	return v.isSet
}

func (v *NullableSyslogServers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyslogServers(val *SyslogServers) *NullableSyslogServers {
	return &NullableSyslogServers{value: val, isSet: true}
}

func (v NullableSyslogServers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyslogServers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o SyslogServers) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}