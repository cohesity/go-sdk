/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// InitFailoverRequest Specifies the failover request parameters to initiate a failover.
type InitFailoverRequest struct {
	SourceCluster *FailoverSourceCluster `json:"sourceCluster,omitempty"`
	ReplicationCluster *FailoverReplicaCluster `json:"replicationCluster,omitempty"`
}

// NewInitFailoverRequest instantiates a new InitFailoverRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInitFailoverRequest() *InitFailoverRequest {
	this := InitFailoverRequest{}
	return &this
}

// NewInitFailoverRequestWithDefaults instantiates a new InitFailoverRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInitFailoverRequestWithDefaults() *InitFailoverRequest {
	this := InitFailoverRequest{}
	return &this
}

// GetSourceCluster returns the SourceCluster field value if set, zero value otherwise.
func (o *InitFailoverRequest) GetSourceCluster() FailoverSourceCluster {
	if o == nil || o.SourceCluster == nil {
		var ret FailoverSourceCluster
		return ret
	}
	return *o.SourceCluster
}

// GetSourceClusterOk returns a tuple with the SourceCluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitFailoverRequest) GetSourceClusterOk() (*FailoverSourceCluster, bool) {
	if o == nil || o.SourceCluster == nil {
		return nil, false
	}
	return o.SourceCluster, true
}

// HasSourceCluster returns a boolean if a field has been set.
func (o *InitFailoverRequest) HasSourceCluster() bool {
	if o != nil && o.SourceCluster != nil {
		return true
	}

	return false
}

// SetSourceCluster gets a reference to the given FailoverSourceCluster and assigns it to the SourceCluster field.
func (o *InitFailoverRequest) SetSourceCluster(v FailoverSourceCluster) {
	o.SourceCluster = &v
}

// GetReplicationCluster returns the ReplicationCluster field value if set, zero value otherwise.
func (o *InitFailoverRequest) GetReplicationCluster() FailoverReplicaCluster {
	if o == nil || o.ReplicationCluster == nil {
		var ret FailoverReplicaCluster
		return ret
	}
	return *o.ReplicationCluster
}

// GetReplicationClusterOk returns a tuple with the ReplicationCluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitFailoverRequest) GetReplicationClusterOk() (*FailoverReplicaCluster, bool) {
	if o == nil || o.ReplicationCluster == nil {
		return nil, false
	}
	return o.ReplicationCluster, true
}

// HasReplicationCluster returns a boolean if a field has been set.
func (o *InitFailoverRequest) HasReplicationCluster() bool {
	if o != nil && o.ReplicationCluster != nil {
		return true
	}

	return false
}

// SetReplicationCluster gets a reference to the given FailoverReplicaCluster and assigns it to the ReplicationCluster field.
func (o *InitFailoverRequest) SetReplicationCluster(v FailoverReplicaCluster) {
	o.ReplicationCluster = &v
}

func (o InitFailoverRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SourceCluster != nil {
		toSerialize["sourceCluster"] = o.SourceCluster
	}
	if o.ReplicationCluster != nil {
		toSerialize["replicationCluster"] = o.ReplicationCluster
	}
	return json.Marshal(toSerialize)
}

type NullableInitFailoverRequest struct {
	value *InitFailoverRequest
	isSet bool
}

func (v NullableInitFailoverRequest) Get() *InitFailoverRequest {
	return v.value
}

func (v *NullableInitFailoverRequest) Set(val *InitFailoverRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableInitFailoverRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableInitFailoverRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInitFailoverRequest(val *InitFailoverRequest) *NullableInitFailoverRequest {
	return &NullableInitFailoverRequest{value: val, isSet: true}
}

func (v NullableInitFailoverRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInitFailoverRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o InitFailoverRequest) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}