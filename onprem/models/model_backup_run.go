/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// BackupRun Specifies information about backup run for an object.
type BackupRun struct {
	SnapshotInfo *SnapshotInfo `json:"snapshotInfo,omitempty"`
	// Failed backup attempts for an object.
	FailedAttempts *[]BackupAttempt `json:"failedAttempts,omitempty"`
}

// NewBackupRun instantiates a new BackupRun object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupRun() *BackupRun {
	this := BackupRun{}
	return &this
}

// NewBackupRunWithDefaults instantiates a new BackupRun object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupRunWithDefaults() *BackupRun {
	this := BackupRun{}
	return &this
}

// GetSnapshotInfo returns the SnapshotInfo field value if set, zero value otherwise.
func (o *BackupRun) GetSnapshotInfo() SnapshotInfo {
	if o == nil || o.SnapshotInfo == nil {
		var ret SnapshotInfo
		return ret
	}
	return *o.SnapshotInfo
}

// GetSnapshotInfoOk returns a tuple with the SnapshotInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupRun) GetSnapshotInfoOk() (*SnapshotInfo, bool) {
	if o == nil || o.SnapshotInfo == nil {
		return nil, false
	}
	return o.SnapshotInfo, true
}

// HasSnapshotInfo returns a boolean if a field has been set.
func (o *BackupRun) HasSnapshotInfo() bool {
	if o != nil && o.SnapshotInfo != nil {
		return true
	}

	return false
}

// SetSnapshotInfo gets a reference to the given SnapshotInfo and assigns it to the SnapshotInfo field.
func (o *BackupRun) SetSnapshotInfo(v SnapshotInfo) {
	o.SnapshotInfo = &v
}

// GetFailedAttempts returns the FailedAttempts field value if set, zero value otherwise.
func (o *BackupRun) GetFailedAttempts() []BackupAttempt {
	if o == nil || o.FailedAttempts == nil {
		var ret []BackupAttempt
		return ret
	}
	return *o.FailedAttempts
}

// GetFailedAttemptsOk returns a tuple with the FailedAttempts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupRun) GetFailedAttemptsOk() (*[]BackupAttempt, bool) {
	if o == nil || o.FailedAttempts == nil {
		return nil, false
	}
	return o.FailedAttempts, true
}

// HasFailedAttempts returns a boolean if a field has been set.
func (o *BackupRun) HasFailedAttempts() bool {
	if o != nil && o.FailedAttempts != nil {
		return true
	}

	return false
}

// SetFailedAttempts gets a reference to the given []BackupAttempt and assigns it to the FailedAttempts field.
func (o *BackupRun) SetFailedAttempts(v []BackupAttempt) {
	o.FailedAttempts = &v
}

func (o BackupRun) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SnapshotInfo != nil {
		toSerialize["snapshotInfo"] = o.SnapshotInfo
	}
	if o.FailedAttempts != nil {
		toSerialize["failedAttempts"] = o.FailedAttempts
	}
	return json.Marshal(toSerialize)
}

type NullableBackupRun struct {
	value *BackupRun
	isSet bool
}

func (v NullableBackupRun) Get() *BackupRun {
	return v.value
}

func (v *NullableBackupRun) Set(val *BackupRun) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupRun) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupRun) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupRun(val *BackupRun) *NullableBackupRun {
	return &NullableBackupRun{value: val, isSet: true}
}

func (v NullableBackupRun) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupRun) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o BackupRun) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}