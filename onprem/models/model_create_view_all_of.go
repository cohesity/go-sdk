/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// CreateViewAllOf struct for CreateViewAllOf
type CreateViewAllOf struct {
	// Specifies the id of the Storage Domain (View Box) where the View will be created.
	StorageDomainId NullableInt64 `json:"storageDomainId,omitempty"`
	// Specifies whether to support case insensitive file/folder names. This parameter can only be set during create and cannot be changed.
	CaseInsensitiveNamesEnabled NullableBool `json:"caseInsensitiveNamesEnabled,omitempty"`
	// Specifies the Object Services key mapping config of the view. This parameter can only be set during create and cannot be changed. Configuration of Object Services key mapping. Specifies the type of Object Services key mapping config.
	ObjectServicesMappingConfig NullableString `json:"objectServicesMappingConfig,omitempty"`
	// Specifies the protection config of the View.
	ViewProtectionConfig *ViewProtectionConfig `json:"viewProtectionConfig,omitempty"`
}

// NewCreateViewAllOf instantiates a new CreateViewAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateViewAllOf() *CreateViewAllOf {
	this := CreateViewAllOf{}
	return &this
}

// NewCreateViewAllOfWithDefaults instantiates a new CreateViewAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateViewAllOfWithDefaults() *CreateViewAllOf {
	this := CreateViewAllOf{}
	return &this
}

// GetStorageDomainId returns the StorageDomainId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateViewAllOf) GetStorageDomainId() int64 {
	if o == nil || o.StorageDomainId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.StorageDomainId.Get()
}

// GetStorageDomainIdOk returns a tuple with the StorageDomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateViewAllOf) GetStorageDomainIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageDomainId.Get(), o.StorageDomainId.IsSet()
}

// HasStorageDomainId returns a boolean if a field has been set.
func (o *CreateViewAllOf) HasStorageDomainId() bool {
	if o != nil && o.StorageDomainId.IsSet() {
		return true
	}

	return false
}

// SetStorageDomainId gets a reference to the given NullableInt64 and assigns it to the StorageDomainId field.
func (o *CreateViewAllOf) SetStorageDomainId(v int64) {
	o.StorageDomainId.Set(&v)
}
// SetStorageDomainIdNil sets the value for StorageDomainId to be an explicit nil
func (o *CreateViewAllOf) SetStorageDomainIdNil() {
	o.StorageDomainId.Set(nil)
}

// UnsetStorageDomainId ensures that no value is present for StorageDomainId, not even an explicit nil
func (o *CreateViewAllOf) UnsetStorageDomainId() {
	o.StorageDomainId.Unset()
}

// GetCaseInsensitiveNamesEnabled returns the CaseInsensitiveNamesEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateViewAllOf) GetCaseInsensitiveNamesEnabled() bool {
	if o == nil || o.CaseInsensitiveNamesEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.CaseInsensitiveNamesEnabled.Get()
}

// GetCaseInsensitiveNamesEnabledOk returns a tuple with the CaseInsensitiveNamesEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateViewAllOf) GetCaseInsensitiveNamesEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CaseInsensitiveNamesEnabled.Get(), o.CaseInsensitiveNamesEnabled.IsSet()
}

// HasCaseInsensitiveNamesEnabled returns a boolean if a field has been set.
func (o *CreateViewAllOf) HasCaseInsensitiveNamesEnabled() bool {
	if o != nil && o.CaseInsensitiveNamesEnabled.IsSet() {
		return true
	}

	return false
}

// SetCaseInsensitiveNamesEnabled gets a reference to the given NullableBool and assigns it to the CaseInsensitiveNamesEnabled field.
func (o *CreateViewAllOf) SetCaseInsensitiveNamesEnabled(v bool) {
	o.CaseInsensitiveNamesEnabled.Set(&v)
}
// SetCaseInsensitiveNamesEnabledNil sets the value for CaseInsensitiveNamesEnabled to be an explicit nil
func (o *CreateViewAllOf) SetCaseInsensitiveNamesEnabledNil() {
	o.CaseInsensitiveNamesEnabled.Set(nil)
}

// UnsetCaseInsensitiveNamesEnabled ensures that no value is present for CaseInsensitiveNamesEnabled, not even an explicit nil
func (o *CreateViewAllOf) UnsetCaseInsensitiveNamesEnabled() {
	o.CaseInsensitiveNamesEnabled.Unset()
}

// GetObjectServicesMappingConfig returns the ObjectServicesMappingConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateViewAllOf) GetObjectServicesMappingConfig() string {
	if o == nil || o.ObjectServicesMappingConfig.Get() == nil {
		var ret string
		return ret
	}
	return *o.ObjectServicesMappingConfig.Get()
}

// GetObjectServicesMappingConfigOk returns a tuple with the ObjectServicesMappingConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateViewAllOf) GetObjectServicesMappingConfigOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ObjectServicesMappingConfig.Get(), o.ObjectServicesMappingConfig.IsSet()
}

// HasObjectServicesMappingConfig returns a boolean if a field has been set.
func (o *CreateViewAllOf) HasObjectServicesMappingConfig() bool {
	if o != nil && o.ObjectServicesMappingConfig.IsSet() {
		return true
	}

	return false
}

// SetObjectServicesMappingConfig gets a reference to the given NullableString and assigns it to the ObjectServicesMappingConfig field.
func (o *CreateViewAllOf) SetObjectServicesMappingConfig(v string) {
	o.ObjectServicesMappingConfig.Set(&v)
}
// SetObjectServicesMappingConfigNil sets the value for ObjectServicesMappingConfig to be an explicit nil
func (o *CreateViewAllOf) SetObjectServicesMappingConfigNil() {
	o.ObjectServicesMappingConfig.Set(nil)
}

// UnsetObjectServicesMappingConfig ensures that no value is present for ObjectServicesMappingConfig, not even an explicit nil
func (o *CreateViewAllOf) UnsetObjectServicesMappingConfig() {
	o.ObjectServicesMappingConfig.Unset()
}

// GetViewProtectionConfig returns the ViewProtectionConfig field value if set, zero value otherwise.
func (o *CreateViewAllOf) GetViewProtectionConfig() ViewProtectionConfig {
	if o == nil || o.ViewProtectionConfig == nil {
		var ret ViewProtectionConfig
		return ret
	}
	return *o.ViewProtectionConfig
}

// GetViewProtectionConfigOk returns a tuple with the ViewProtectionConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateViewAllOf) GetViewProtectionConfigOk() (*ViewProtectionConfig, bool) {
	if o == nil || o.ViewProtectionConfig == nil {
		return nil, false
	}
	return o.ViewProtectionConfig, true
}

// HasViewProtectionConfig returns a boolean if a field has been set.
func (o *CreateViewAllOf) HasViewProtectionConfig() bool {
	if o != nil && o.ViewProtectionConfig != nil {
		return true
	}

	return false
}

// SetViewProtectionConfig gets a reference to the given ViewProtectionConfig and assigns it to the ViewProtectionConfig field.
func (o *CreateViewAllOf) SetViewProtectionConfig(v ViewProtectionConfig) {
	o.ViewProtectionConfig = &v
}

func (o CreateViewAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.StorageDomainId.IsSet() {
		toSerialize["storageDomainId"] = o.StorageDomainId.Get()
	}
	if o.CaseInsensitiveNamesEnabled.IsSet() {
		toSerialize["caseInsensitiveNamesEnabled"] = o.CaseInsensitiveNamesEnabled.Get()
	}
	if o.ObjectServicesMappingConfig.IsSet() {
		toSerialize["objectServicesMappingConfig"] = o.ObjectServicesMappingConfig.Get()
	}
	if o.ViewProtectionConfig != nil {
		toSerialize["viewProtectionConfig"] = o.ViewProtectionConfig
	}
	return json.Marshal(toSerialize)
}

type NullableCreateViewAllOf struct {
	value *CreateViewAllOf
	isSet bool
}

func (v NullableCreateViewAllOf) Get() *CreateViewAllOf {
	return v.value
}

func (v *NullableCreateViewAllOf) Set(val *CreateViewAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateViewAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateViewAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateViewAllOf(val *CreateViewAllOf) *NullableCreateViewAllOf {
	return &NullableCreateViewAllOf{value: val, isSet: true}
}

func (v NullableCreateViewAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateViewAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o CreateViewAllOf) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}