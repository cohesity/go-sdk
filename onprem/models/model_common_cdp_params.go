/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// CommonCdpParams Specifies the params for Continuous Data Protection.
type CommonCdpParams struct {
	// Specifies whether synchronous replication is enabled for CDP Protection Group when replication target is specified in attached policy.
	EnableCdpSyncReplication NullableBool `json:"enableCdpSyncReplication,omitempty"`
}

// NewCommonCdpParams instantiates a new CommonCdpParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonCdpParams() *CommonCdpParams {
	this := CommonCdpParams{}
	return &this
}

// NewCommonCdpParamsWithDefaults instantiates a new CommonCdpParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonCdpParamsWithDefaults() *CommonCdpParams {
	this := CommonCdpParams{}
	return &this
}

// GetEnableCdpSyncReplication returns the EnableCdpSyncReplication field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonCdpParams) GetEnableCdpSyncReplication() bool {
	if o == nil || o.EnableCdpSyncReplication.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableCdpSyncReplication.Get()
}

// GetEnableCdpSyncReplicationOk returns a tuple with the EnableCdpSyncReplication field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonCdpParams) GetEnableCdpSyncReplicationOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableCdpSyncReplication.Get(), o.EnableCdpSyncReplication.IsSet()
}

// HasEnableCdpSyncReplication returns a boolean if a field has been set.
func (o *CommonCdpParams) HasEnableCdpSyncReplication() bool {
	if o != nil && o.EnableCdpSyncReplication.IsSet() {
		return true
	}

	return false
}

// SetEnableCdpSyncReplication gets a reference to the given NullableBool and assigns it to the EnableCdpSyncReplication field.
func (o *CommonCdpParams) SetEnableCdpSyncReplication(v bool) {
	o.EnableCdpSyncReplication.Set(&v)
}
// SetEnableCdpSyncReplicationNil sets the value for EnableCdpSyncReplication to be an explicit nil
func (o *CommonCdpParams) SetEnableCdpSyncReplicationNil() {
	o.EnableCdpSyncReplication.Set(nil)
}

// UnsetEnableCdpSyncReplication ensures that no value is present for EnableCdpSyncReplication, not even an explicit nil
func (o *CommonCdpParams) UnsetEnableCdpSyncReplication() {
	o.EnableCdpSyncReplication.Unset()
}

func (o CommonCdpParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EnableCdpSyncReplication.IsSet() {
		toSerialize["enableCdpSyncReplication"] = o.EnableCdpSyncReplication.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCommonCdpParams struct {
	value *CommonCdpParams
	isSet bool
}

func (v NullableCommonCdpParams) Get() *CommonCdpParams {
	return v.value
}

func (v *NullableCommonCdpParams) Set(val *CommonCdpParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonCdpParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonCdpParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonCdpParams(val *CommonCdpParams) *NullableCommonCdpParams {
	return &NullableCommonCdpParams{value: val, isSet: true}
}

func (v NullableCommonCdpParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonCdpParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o CommonCdpParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}