/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// ArchivalTargetTierInfoAllOf struct for ArchivalTargetTierInfoAllOf
type ArchivalTargetTierInfoAllOf struct {
	// Specifies the type of the current tier where the snapshot resides. This will be specified if the run is a CAD run.
	CurrentTierType NullableString `json:"currentTierType,omitempty"`
}

// NewArchivalTargetTierInfoAllOf instantiates a new ArchivalTargetTierInfoAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArchivalTargetTierInfoAllOf() *ArchivalTargetTierInfoAllOf {
	this := ArchivalTargetTierInfoAllOf{}
	return &this
}

// NewArchivalTargetTierInfoAllOfWithDefaults instantiates a new ArchivalTargetTierInfoAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArchivalTargetTierInfoAllOfWithDefaults() *ArchivalTargetTierInfoAllOf {
	this := ArchivalTargetTierInfoAllOf{}
	return &this
}

// GetCurrentTierType returns the CurrentTierType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalTargetTierInfoAllOf) GetCurrentTierType() string {
	if o == nil || o.CurrentTierType.Get() == nil {
		var ret string
		return ret
	}
	return *o.CurrentTierType.Get()
}

// GetCurrentTierTypeOk returns a tuple with the CurrentTierType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalTargetTierInfoAllOf) GetCurrentTierTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CurrentTierType.Get(), o.CurrentTierType.IsSet()
}

// HasCurrentTierType returns a boolean if a field has been set.
func (o *ArchivalTargetTierInfoAllOf) HasCurrentTierType() bool {
	if o != nil && o.CurrentTierType.IsSet() {
		return true
	}

	return false
}

// SetCurrentTierType gets a reference to the given NullableString and assigns it to the CurrentTierType field.
func (o *ArchivalTargetTierInfoAllOf) SetCurrentTierType(v string) {
	o.CurrentTierType.Set(&v)
}
// SetCurrentTierTypeNil sets the value for CurrentTierType to be an explicit nil
func (o *ArchivalTargetTierInfoAllOf) SetCurrentTierTypeNil() {
	o.CurrentTierType.Set(nil)
}

// UnsetCurrentTierType ensures that no value is present for CurrentTierType, not even an explicit nil
func (o *ArchivalTargetTierInfoAllOf) UnsetCurrentTierType() {
	o.CurrentTierType.Unset()
}

func (o ArchivalTargetTierInfoAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CurrentTierType.IsSet() {
		toSerialize["currentTierType"] = o.CurrentTierType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableArchivalTargetTierInfoAllOf struct {
	value *ArchivalTargetTierInfoAllOf
	isSet bool
}

func (v NullableArchivalTargetTierInfoAllOf) Get() *ArchivalTargetTierInfoAllOf {
	return v.value
}

func (v *NullableArchivalTargetTierInfoAllOf) Set(val *ArchivalTargetTierInfoAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableArchivalTargetTierInfoAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableArchivalTargetTierInfoAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArchivalTargetTierInfoAllOf(val *ArchivalTargetTierInfoAllOf) *NullableArchivalTargetTierInfoAllOf {
	return &NullableArchivalTargetTierInfoAllOf{value: val, isSet: true}
}

func (v NullableArchivalTargetTierInfoAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArchivalTargetTierInfoAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o ArchivalTargetTierInfoAllOf) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}