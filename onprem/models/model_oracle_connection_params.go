/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// OracleConnectionParams Specifies the parameters to connect to a Oracle node/cluster using given IP or hostname FQDN.
type OracleConnectionParams struct {
	// Specifies the unique identifier to locate the Oracle node or cluster. The host identifier can be IP address or FQDN.
	Hostname NullableString `json:"hostname"`
}

// NewOracleConnectionParams instantiates a new OracleConnectionParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleConnectionParams(hostname NullableString) *OracleConnectionParams {
	this := OracleConnectionParams{}
	this.Hostname = hostname
	return &this
}

// NewOracleConnectionParamsWithDefaults instantiates a new OracleConnectionParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleConnectionParamsWithDefaults() *OracleConnectionParams {
	this := OracleConnectionParams{}
	return &this
}

// GetHostname returns the Hostname field value
// If the value is explicit nil, the zero value for string will be returned
func (o *OracleConnectionParams) GetHostname() string {
	if o == nil || o.Hostname.Get() == nil {
		var ret string
		return ret
	}

	return *o.Hostname.Get()
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleConnectionParams) GetHostnameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Hostname.Get(), o.Hostname.IsSet()
}

// SetHostname sets field value
func (o *OracleConnectionParams) SetHostname(v string) {
	o.Hostname.Set(&v)
}

func (o OracleConnectionParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["hostname"] = o.Hostname.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableOracleConnectionParams struct {
	value *OracleConnectionParams
	isSet bool
}

func (v NullableOracleConnectionParams) Get() *OracleConnectionParams {
	return v.value
}

func (v *NullableOracleConnectionParams) Set(val *OracleConnectionParams) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleConnectionParams) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleConnectionParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleConnectionParams(val *OracleConnectionParams) *NullableOracleConnectionParams {
	return &NullableOracleConnectionParams{value: val, isSet: true}
}

func (v NullableOracleConnectionParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleConnectionParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o OracleConnectionParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}