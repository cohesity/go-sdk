/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// NetappProtectionGroupParams Specifies the parameters which are specific to Netapp related Protection Groups.
type NetappProtectionGroupParams struct {
	// Specifies the objects to be included in the Protection Group.
	Objects []NetappProtectionGroupObjectParams `json:"objects"`
	// Specifies the objects to be excluded in the Protection Group.
	ExcludeObjectIds []int64 `json:"excludeObjectIds,omitempty"`
	// Specifies whether or not to store the snapshots in this run directly in an Archive Target instead of on the Cluster. If this is set to true, the associated policy must have exactly one Archive Target associated with it and the policy must be set up to archive after every run. Also, a Storage Domain cannot be specified. Default behavior is 'false'.
	DirectCloudArchive NullableBool `json:"directCloudArchive,omitempty"`
	// Specifies whether or not to enable native format for direct archive job. This field is set to true if native format should be used for archiving.
	NativeFormat NullableBool `json:"nativeFormat,omitempty"`
	SnapshotLabel *SnapshotLabel `json:"snapshotLabel,omitempty"`
	SnapMirrorConfig *SnapMirrorConfig `json:"snapMirrorConfig,omitempty"`
	// Specifies that snapshot label is not set for Data-Protect Netapp Volumes backup. If field is set to true, existing oldest snapshot is used for backup and subsequent incremental will be selected in ascending order of snapshot create time on the source. If snapshot label is set, this field is set to false.
	BackupExistingSnapshot NullableBool `json:"backupExistingSnapshot,omitempty"`
	IndexingPolicy *IndexingPolicy `json:"indexingPolicy,omitempty"`
	// Specifies the preferred protocol to use if this device supports multiple protocols.
	Protocol NullableString `json:"protocol,omitempty"`
	// Specifies the preference of NFS version to be backed up if a volume supports multiple versions of NFS.
	NfsVersionPreference NullableString `json:"nfsVersionPreference,omitempty"`
	// Specifies whether or not the Protection Group should continue regardless of whether or not an error was encountered during protection group run.
	ContinueOnError NullableBool `json:"continueOnError,omitempty"`
	// Specifies whether the protection group should use encryption while backup or not.
	EncryptionEnabled NullableBool `json:"encryptionEnabled,omitempty"`
	FileLockConfig *FileLevelDataLockConfig `json:"fileLockConfig,omitempty"`
	FileFilters *FileFilteringPolicy `json:"fileFilters,omitempty"`
	// Specifies the id of the parent of the objects.
	SourceId NullableInt64 `json:"sourceId,omitempty"`
	// Specifies the name of the parent of the objects.
	SourceName NullableString `json:"sourceName,omitempty"`
	PrePostScript *HostBasedBackupScriptParams `json:"prePostScript,omitempty"`
	ContinuousSnapshots *ContinuousSnapshotParams `json:"continuousSnapshots,omitempty"`
	FilterIpConfig *FilterIpConfig `json:"filterIpConfig,omitempty"`
	ThrottlingConfig *NasThrottlingConfig `json:"throttlingConfig,omitempty"`
}

// NewNetappProtectionGroupParams instantiates a new NetappProtectionGroupParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetappProtectionGroupParams(objects []NetappProtectionGroupObjectParams) *NetappProtectionGroupParams {
	this := NetappProtectionGroupParams{}
	this.Objects = objects
	return &this
}

// NewNetappProtectionGroupParamsWithDefaults instantiates a new NetappProtectionGroupParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetappProtectionGroupParamsWithDefaults() *NetappProtectionGroupParams {
	this := NetappProtectionGroupParams{}
	return &this
}

// GetObjects returns the Objects field value
func (o *NetappProtectionGroupParams) GetObjects() []NetappProtectionGroupObjectParams {
	if o == nil {
		var ret []NetappProtectionGroupObjectParams
		return ret
	}

	return o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value
// and a boolean to check if the value has been set.
func (o *NetappProtectionGroupParams) GetObjectsOk() (*[]NetappProtectionGroupObjectParams, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Objects, true
}

// SetObjects sets field value
func (o *NetappProtectionGroupParams) SetObjects(v []NetappProtectionGroupObjectParams) {
	o.Objects = v
}

// GetExcludeObjectIds returns the ExcludeObjectIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetappProtectionGroupParams) GetExcludeObjectIds() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.ExcludeObjectIds
}

// GetExcludeObjectIdsOk returns a tuple with the ExcludeObjectIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappProtectionGroupParams) GetExcludeObjectIdsOk() (*[]int64, bool) {
	if o == nil || o.ExcludeObjectIds == nil {
		return nil, false
	}
	return &o.ExcludeObjectIds, true
}

// HasExcludeObjectIds returns a boolean if a field has been set.
func (o *NetappProtectionGroupParams) HasExcludeObjectIds() bool {
	if o != nil && o.ExcludeObjectIds != nil {
		return true
	}

	return false
}

// SetExcludeObjectIds gets a reference to the given []int64 and assigns it to the ExcludeObjectIds field.
func (o *NetappProtectionGroupParams) SetExcludeObjectIds(v []int64) {
	o.ExcludeObjectIds = v
}

// GetDirectCloudArchive returns the DirectCloudArchive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetappProtectionGroupParams) GetDirectCloudArchive() bool {
	if o == nil || o.DirectCloudArchive.Get() == nil {
		var ret bool
		return ret
	}
	return *o.DirectCloudArchive.Get()
}

// GetDirectCloudArchiveOk returns a tuple with the DirectCloudArchive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappProtectionGroupParams) GetDirectCloudArchiveOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DirectCloudArchive.Get(), o.DirectCloudArchive.IsSet()
}

// HasDirectCloudArchive returns a boolean if a field has been set.
func (o *NetappProtectionGroupParams) HasDirectCloudArchive() bool {
	if o != nil && o.DirectCloudArchive.IsSet() {
		return true
	}

	return false
}

// SetDirectCloudArchive gets a reference to the given NullableBool and assigns it to the DirectCloudArchive field.
func (o *NetappProtectionGroupParams) SetDirectCloudArchive(v bool) {
	o.DirectCloudArchive.Set(&v)
}
// SetDirectCloudArchiveNil sets the value for DirectCloudArchive to be an explicit nil
func (o *NetappProtectionGroupParams) SetDirectCloudArchiveNil() {
	o.DirectCloudArchive.Set(nil)
}

// UnsetDirectCloudArchive ensures that no value is present for DirectCloudArchive, not even an explicit nil
func (o *NetappProtectionGroupParams) UnsetDirectCloudArchive() {
	o.DirectCloudArchive.Unset()
}

// GetNativeFormat returns the NativeFormat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetappProtectionGroupParams) GetNativeFormat() bool {
	if o == nil || o.NativeFormat.Get() == nil {
		var ret bool
		return ret
	}
	return *o.NativeFormat.Get()
}

// GetNativeFormatOk returns a tuple with the NativeFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappProtectionGroupParams) GetNativeFormatOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NativeFormat.Get(), o.NativeFormat.IsSet()
}

// HasNativeFormat returns a boolean if a field has been set.
func (o *NetappProtectionGroupParams) HasNativeFormat() bool {
	if o != nil && o.NativeFormat.IsSet() {
		return true
	}

	return false
}

// SetNativeFormat gets a reference to the given NullableBool and assigns it to the NativeFormat field.
func (o *NetappProtectionGroupParams) SetNativeFormat(v bool) {
	o.NativeFormat.Set(&v)
}
// SetNativeFormatNil sets the value for NativeFormat to be an explicit nil
func (o *NetappProtectionGroupParams) SetNativeFormatNil() {
	o.NativeFormat.Set(nil)
}

// UnsetNativeFormat ensures that no value is present for NativeFormat, not even an explicit nil
func (o *NetappProtectionGroupParams) UnsetNativeFormat() {
	o.NativeFormat.Unset()
}

// GetSnapshotLabel returns the SnapshotLabel field value if set, zero value otherwise.
func (o *NetappProtectionGroupParams) GetSnapshotLabel() SnapshotLabel {
	if o == nil || o.SnapshotLabel == nil {
		var ret SnapshotLabel
		return ret
	}
	return *o.SnapshotLabel
}

// GetSnapshotLabelOk returns a tuple with the SnapshotLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetappProtectionGroupParams) GetSnapshotLabelOk() (*SnapshotLabel, bool) {
	if o == nil || o.SnapshotLabel == nil {
		return nil, false
	}
	return o.SnapshotLabel, true
}

// HasSnapshotLabel returns a boolean if a field has been set.
func (o *NetappProtectionGroupParams) HasSnapshotLabel() bool {
	if o != nil && o.SnapshotLabel != nil {
		return true
	}

	return false
}

// SetSnapshotLabel gets a reference to the given SnapshotLabel and assigns it to the SnapshotLabel field.
func (o *NetappProtectionGroupParams) SetSnapshotLabel(v SnapshotLabel) {
	o.SnapshotLabel = &v
}

// GetSnapMirrorConfig returns the SnapMirrorConfig field value if set, zero value otherwise.
func (o *NetappProtectionGroupParams) GetSnapMirrorConfig() SnapMirrorConfig {
	if o == nil || o.SnapMirrorConfig == nil {
		var ret SnapMirrorConfig
		return ret
	}
	return *o.SnapMirrorConfig
}

// GetSnapMirrorConfigOk returns a tuple with the SnapMirrorConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetappProtectionGroupParams) GetSnapMirrorConfigOk() (*SnapMirrorConfig, bool) {
	if o == nil || o.SnapMirrorConfig == nil {
		return nil, false
	}
	return o.SnapMirrorConfig, true
}

// HasSnapMirrorConfig returns a boolean if a field has been set.
func (o *NetappProtectionGroupParams) HasSnapMirrorConfig() bool {
	if o != nil && o.SnapMirrorConfig != nil {
		return true
	}

	return false
}

// SetSnapMirrorConfig gets a reference to the given SnapMirrorConfig and assigns it to the SnapMirrorConfig field.
func (o *NetappProtectionGroupParams) SetSnapMirrorConfig(v SnapMirrorConfig) {
	o.SnapMirrorConfig = &v
}

// GetBackupExistingSnapshot returns the BackupExistingSnapshot field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetappProtectionGroupParams) GetBackupExistingSnapshot() bool {
	if o == nil || o.BackupExistingSnapshot.Get() == nil {
		var ret bool
		return ret
	}
	return *o.BackupExistingSnapshot.Get()
}

// GetBackupExistingSnapshotOk returns a tuple with the BackupExistingSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappProtectionGroupParams) GetBackupExistingSnapshotOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BackupExistingSnapshot.Get(), o.BackupExistingSnapshot.IsSet()
}

// HasBackupExistingSnapshot returns a boolean if a field has been set.
func (o *NetappProtectionGroupParams) HasBackupExistingSnapshot() bool {
	if o != nil && o.BackupExistingSnapshot.IsSet() {
		return true
	}

	return false
}

// SetBackupExistingSnapshot gets a reference to the given NullableBool and assigns it to the BackupExistingSnapshot field.
func (o *NetappProtectionGroupParams) SetBackupExistingSnapshot(v bool) {
	o.BackupExistingSnapshot.Set(&v)
}
// SetBackupExistingSnapshotNil sets the value for BackupExistingSnapshot to be an explicit nil
func (o *NetappProtectionGroupParams) SetBackupExistingSnapshotNil() {
	o.BackupExistingSnapshot.Set(nil)
}

// UnsetBackupExistingSnapshot ensures that no value is present for BackupExistingSnapshot, not even an explicit nil
func (o *NetappProtectionGroupParams) UnsetBackupExistingSnapshot() {
	o.BackupExistingSnapshot.Unset()
}

// GetIndexingPolicy returns the IndexingPolicy field value if set, zero value otherwise.
func (o *NetappProtectionGroupParams) GetIndexingPolicy() IndexingPolicy {
	if o == nil || o.IndexingPolicy == nil {
		var ret IndexingPolicy
		return ret
	}
	return *o.IndexingPolicy
}

// GetIndexingPolicyOk returns a tuple with the IndexingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetappProtectionGroupParams) GetIndexingPolicyOk() (*IndexingPolicy, bool) {
	if o == nil || o.IndexingPolicy == nil {
		return nil, false
	}
	return o.IndexingPolicy, true
}

// HasIndexingPolicy returns a boolean if a field has been set.
func (o *NetappProtectionGroupParams) HasIndexingPolicy() bool {
	if o != nil && o.IndexingPolicy != nil {
		return true
	}

	return false
}

// SetIndexingPolicy gets a reference to the given IndexingPolicy and assigns it to the IndexingPolicy field.
func (o *NetappProtectionGroupParams) SetIndexingPolicy(v IndexingPolicy) {
	o.IndexingPolicy = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetappProtectionGroupParams) GetProtocol() string {
	if o == nil || o.Protocol.Get() == nil {
		var ret string
		return ret
	}
	return *o.Protocol.Get()
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappProtectionGroupParams) GetProtocolOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Protocol.Get(), o.Protocol.IsSet()
}

// HasProtocol returns a boolean if a field has been set.
func (o *NetappProtectionGroupParams) HasProtocol() bool {
	if o != nil && o.Protocol.IsSet() {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given NullableString and assigns it to the Protocol field.
func (o *NetappProtectionGroupParams) SetProtocol(v string) {
	o.Protocol.Set(&v)
}
// SetProtocolNil sets the value for Protocol to be an explicit nil
func (o *NetappProtectionGroupParams) SetProtocolNil() {
	o.Protocol.Set(nil)
}

// UnsetProtocol ensures that no value is present for Protocol, not even an explicit nil
func (o *NetappProtectionGroupParams) UnsetProtocol() {
	o.Protocol.Unset()
}

// GetNfsVersionPreference returns the NfsVersionPreference field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetappProtectionGroupParams) GetNfsVersionPreference() string {
	if o == nil || o.NfsVersionPreference.Get() == nil {
		var ret string
		return ret
	}
	return *o.NfsVersionPreference.Get()
}

// GetNfsVersionPreferenceOk returns a tuple with the NfsVersionPreference field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappProtectionGroupParams) GetNfsVersionPreferenceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NfsVersionPreference.Get(), o.NfsVersionPreference.IsSet()
}

// HasNfsVersionPreference returns a boolean if a field has been set.
func (o *NetappProtectionGroupParams) HasNfsVersionPreference() bool {
	if o != nil && o.NfsVersionPreference.IsSet() {
		return true
	}

	return false
}

// SetNfsVersionPreference gets a reference to the given NullableString and assigns it to the NfsVersionPreference field.
func (o *NetappProtectionGroupParams) SetNfsVersionPreference(v string) {
	o.NfsVersionPreference.Set(&v)
}
// SetNfsVersionPreferenceNil sets the value for NfsVersionPreference to be an explicit nil
func (o *NetappProtectionGroupParams) SetNfsVersionPreferenceNil() {
	o.NfsVersionPreference.Set(nil)
}

// UnsetNfsVersionPreference ensures that no value is present for NfsVersionPreference, not even an explicit nil
func (o *NetappProtectionGroupParams) UnsetNfsVersionPreference() {
	o.NfsVersionPreference.Unset()
}

// GetContinueOnError returns the ContinueOnError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetappProtectionGroupParams) GetContinueOnError() bool {
	if o == nil || o.ContinueOnError.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ContinueOnError.Get()
}

// GetContinueOnErrorOk returns a tuple with the ContinueOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappProtectionGroupParams) GetContinueOnErrorOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ContinueOnError.Get(), o.ContinueOnError.IsSet()
}

// HasContinueOnError returns a boolean if a field has been set.
func (o *NetappProtectionGroupParams) HasContinueOnError() bool {
	if o != nil && o.ContinueOnError.IsSet() {
		return true
	}

	return false
}

// SetContinueOnError gets a reference to the given NullableBool and assigns it to the ContinueOnError field.
func (o *NetappProtectionGroupParams) SetContinueOnError(v bool) {
	o.ContinueOnError.Set(&v)
}
// SetContinueOnErrorNil sets the value for ContinueOnError to be an explicit nil
func (o *NetappProtectionGroupParams) SetContinueOnErrorNil() {
	o.ContinueOnError.Set(nil)
}

// UnsetContinueOnError ensures that no value is present for ContinueOnError, not even an explicit nil
func (o *NetappProtectionGroupParams) UnsetContinueOnError() {
	o.ContinueOnError.Unset()
}

// GetEncryptionEnabled returns the EncryptionEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetappProtectionGroupParams) GetEncryptionEnabled() bool {
	if o == nil || o.EncryptionEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EncryptionEnabled.Get()
}

// GetEncryptionEnabledOk returns a tuple with the EncryptionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappProtectionGroupParams) GetEncryptionEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EncryptionEnabled.Get(), o.EncryptionEnabled.IsSet()
}

// HasEncryptionEnabled returns a boolean if a field has been set.
func (o *NetappProtectionGroupParams) HasEncryptionEnabled() bool {
	if o != nil && o.EncryptionEnabled.IsSet() {
		return true
	}

	return false
}

// SetEncryptionEnabled gets a reference to the given NullableBool and assigns it to the EncryptionEnabled field.
func (o *NetappProtectionGroupParams) SetEncryptionEnabled(v bool) {
	o.EncryptionEnabled.Set(&v)
}
// SetEncryptionEnabledNil sets the value for EncryptionEnabled to be an explicit nil
func (o *NetappProtectionGroupParams) SetEncryptionEnabledNil() {
	o.EncryptionEnabled.Set(nil)
}

// UnsetEncryptionEnabled ensures that no value is present for EncryptionEnabled, not even an explicit nil
func (o *NetappProtectionGroupParams) UnsetEncryptionEnabled() {
	o.EncryptionEnabled.Unset()
}

// GetFileLockConfig returns the FileLockConfig field value if set, zero value otherwise.
func (o *NetappProtectionGroupParams) GetFileLockConfig() FileLevelDataLockConfig {
	if o == nil || o.FileLockConfig == nil {
		var ret FileLevelDataLockConfig
		return ret
	}
	return *o.FileLockConfig
}

// GetFileLockConfigOk returns a tuple with the FileLockConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetappProtectionGroupParams) GetFileLockConfigOk() (*FileLevelDataLockConfig, bool) {
	if o == nil || o.FileLockConfig == nil {
		return nil, false
	}
	return o.FileLockConfig, true
}

// HasFileLockConfig returns a boolean if a field has been set.
func (o *NetappProtectionGroupParams) HasFileLockConfig() bool {
	if o != nil && o.FileLockConfig != nil {
		return true
	}

	return false
}

// SetFileLockConfig gets a reference to the given FileLevelDataLockConfig and assigns it to the FileLockConfig field.
func (o *NetappProtectionGroupParams) SetFileLockConfig(v FileLevelDataLockConfig) {
	o.FileLockConfig = &v
}

// GetFileFilters returns the FileFilters field value if set, zero value otherwise.
func (o *NetappProtectionGroupParams) GetFileFilters() FileFilteringPolicy {
	if o == nil || o.FileFilters == nil {
		var ret FileFilteringPolicy
		return ret
	}
	return *o.FileFilters
}

// GetFileFiltersOk returns a tuple with the FileFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetappProtectionGroupParams) GetFileFiltersOk() (*FileFilteringPolicy, bool) {
	if o == nil || o.FileFilters == nil {
		return nil, false
	}
	return o.FileFilters, true
}

// HasFileFilters returns a boolean if a field has been set.
func (o *NetappProtectionGroupParams) HasFileFilters() bool {
	if o != nil && o.FileFilters != nil {
		return true
	}

	return false
}

// SetFileFilters gets a reference to the given FileFilteringPolicy and assigns it to the FileFilters field.
func (o *NetappProtectionGroupParams) SetFileFilters(v FileFilteringPolicy) {
	o.FileFilters = &v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetappProtectionGroupParams) GetSourceId() int64 {
	if o == nil || o.SourceId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SourceId.Get()
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappProtectionGroupParams) GetSourceIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceId.Get(), o.SourceId.IsSet()
}

// HasSourceId returns a boolean if a field has been set.
func (o *NetappProtectionGroupParams) HasSourceId() bool {
	if o != nil && o.SourceId.IsSet() {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given NullableInt64 and assigns it to the SourceId field.
func (o *NetappProtectionGroupParams) SetSourceId(v int64) {
	o.SourceId.Set(&v)
}
// SetSourceIdNil sets the value for SourceId to be an explicit nil
func (o *NetappProtectionGroupParams) SetSourceIdNil() {
	o.SourceId.Set(nil)
}

// UnsetSourceId ensures that no value is present for SourceId, not even an explicit nil
func (o *NetappProtectionGroupParams) UnsetSourceId() {
	o.SourceId.Unset()
}

// GetSourceName returns the SourceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetappProtectionGroupParams) GetSourceName() string {
	if o == nil || o.SourceName.Get() == nil {
		var ret string
		return ret
	}
	return *o.SourceName.Get()
}

// GetSourceNameOk returns a tuple with the SourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappProtectionGroupParams) GetSourceNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceName.Get(), o.SourceName.IsSet()
}

// HasSourceName returns a boolean if a field has been set.
func (o *NetappProtectionGroupParams) HasSourceName() bool {
	if o != nil && o.SourceName.IsSet() {
		return true
	}

	return false
}

// SetSourceName gets a reference to the given NullableString and assigns it to the SourceName field.
func (o *NetappProtectionGroupParams) SetSourceName(v string) {
	o.SourceName.Set(&v)
}
// SetSourceNameNil sets the value for SourceName to be an explicit nil
func (o *NetappProtectionGroupParams) SetSourceNameNil() {
	o.SourceName.Set(nil)
}

// UnsetSourceName ensures that no value is present for SourceName, not even an explicit nil
func (o *NetappProtectionGroupParams) UnsetSourceName() {
	o.SourceName.Unset()
}

// GetPrePostScript returns the PrePostScript field value if set, zero value otherwise.
func (o *NetappProtectionGroupParams) GetPrePostScript() HostBasedBackupScriptParams {
	if o == nil || o.PrePostScript == nil {
		var ret HostBasedBackupScriptParams
		return ret
	}
	return *o.PrePostScript
}

// GetPrePostScriptOk returns a tuple with the PrePostScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetappProtectionGroupParams) GetPrePostScriptOk() (*HostBasedBackupScriptParams, bool) {
	if o == nil || o.PrePostScript == nil {
		return nil, false
	}
	return o.PrePostScript, true
}

// HasPrePostScript returns a boolean if a field has been set.
func (o *NetappProtectionGroupParams) HasPrePostScript() bool {
	if o != nil && o.PrePostScript != nil {
		return true
	}

	return false
}

// SetPrePostScript gets a reference to the given HostBasedBackupScriptParams and assigns it to the PrePostScript field.
func (o *NetappProtectionGroupParams) SetPrePostScript(v HostBasedBackupScriptParams) {
	o.PrePostScript = &v
}

// GetContinuousSnapshots returns the ContinuousSnapshots field value if set, zero value otherwise.
func (o *NetappProtectionGroupParams) GetContinuousSnapshots() ContinuousSnapshotParams {
	if o == nil || o.ContinuousSnapshots == nil {
		var ret ContinuousSnapshotParams
		return ret
	}
	return *o.ContinuousSnapshots
}

// GetContinuousSnapshotsOk returns a tuple with the ContinuousSnapshots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetappProtectionGroupParams) GetContinuousSnapshotsOk() (*ContinuousSnapshotParams, bool) {
	if o == nil || o.ContinuousSnapshots == nil {
		return nil, false
	}
	return o.ContinuousSnapshots, true
}

// HasContinuousSnapshots returns a boolean if a field has been set.
func (o *NetappProtectionGroupParams) HasContinuousSnapshots() bool {
	if o != nil && o.ContinuousSnapshots != nil {
		return true
	}

	return false
}

// SetContinuousSnapshots gets a reference to the given ContinuousSnapshotParams and assigns it to the ContinuousSnapshots field.
func (o *NetappProtectionGroupParams) SetContinuousSnapshots(v ContinuousSnapshotParams) {
	o.ContinuousSnapshots = &v
}

// GetFilterIpConfig returns the FilterIpConfig field value if set, zero value otherwise.
func (o *NetappProtectionGroupParams) GetFilterIpConfig() FilterIpConfig {
	if o == nil || o.FilterIpConfig == nil {
		var ret FilterIpConfig
		return ret
	}
	return *o.FilterIpConfig
}

// GetFilterIpConfigOk returns a tuple with the FilterIpConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetappProtectionGroupParams) GetFilterIpConfigOk() (*FilterIpConfig, bool) {
	if o == nil || o.FilterIpConfig == nil {
		return nil, false
	}
	return o.FilterIpConfig, true
}

// HasFilterIpConfig returns a boolean if a field has been set.
func (o *NetappProtectionGroupParams) HasFilterIpConfig() bool {
	if o != nil && o.FilterIpConfig != nil {
		return true
	}

	return false
}

// SetFilterIpConfig gets a reference to the given FilterIpConfig and assigns it to the FilterIpConfig field.
func (o *NetappProtectionGroupParams) SetFilterIpConfig(v FilterIpConfig) {
	o.FilterIpConfig = &v
}

// GetThrottlingConfig returns the ThrottlingConfig field value if set, zero value otherwise.
func (o *NetappProtectionGroupParams) GetThrottlingConfig() NasThrottlingConfig {
	if o == nil || o.ThrottlingConfig == nil {
		var ret NasThrottlingConfig
		return ret
	}
	return *o.ThrottlingConfig
}

// GetThrottlingConfigOk returns a tuple with the ThrottlingConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetappProtectionGroupParams) GetThrottlingConfigOk() (*NasThrottlingConfig, bool) {
	if o == nil || o.ThrottlingConfig == nil {
		return nil, false
	}
	return o.ThrottlingConfig, true
}

// HasThrottlingConfig returns a boolean if a field has been set.
func (o *NetappProtectionGroupParams) HasThrottlingConfig() bool {
	if o != nil && o.ThrottlingConfig != nil {
		return true
	}

	return false
}

// SetThrottlingConfig gets a reference to the given NasThrottlingConfig and assigns it to the ThrottlingConfig field.
func (o *NetappProtectionGroupParams) SetThrottlingConfig(v NasThrottlingConfig) {
	o.ThrottlingConfig = &v
}

func (o NetappProtectionGroupParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["objects"] = o.Objects
	}
	if o.ExcludeObjectIds != nil {
		toSerialize["excludeObjectIds"] = o.ExcludeObjectIds
	}
	if o.DirectCloudArchive.IsSet() {
		toSerialize["directCloudArchive"] = o.DirectCloudArchive.Get()
	}
	if o.NativeFormat.IsSet() {
		toSerialize["nativeFormat"] = o.NativeFormat.Get()
	}
	if o.SnapshotLabel != nil {
		toSerialize["snapshotLabel"] = o.SnapshotLabel
	}
	if o.SnapMirrorConfig != nil {
		toSerialize["snapMirrorConfig"] = o.SnapMirrorConfig
	}
	if o.BackupExistingSnapshot.IsSet() {
		toSerialize["backupExistingSnapshot"] = o.BackupExistingSnapshot.Get()
	}
	if o.IndexingPolicy != nil {
		toSerialize["indexingPolicy"] = o.IndexingPolicy
	}
	if o.Protocol.IsSet() {
		toSerialize["protocol"] = o.Protocol.Get()
	}
	if o.NfsVersionPreference.IsSet() {
		toSerialize["nfsVersionPreference"] = o.NfsVersionPreference.Get()
	}
	if o.ContinueOnError.IsSet() {
		toSerialize["continueOnError"] = o.ContinueOnError.Get()
	}
	if o.EncryptionEnabled.IsSet() {
		toSerialize["encryptionEnabled"] = o.EncryptionEnabled.Get()
	}
	if o.FileLockConfig != nil {
		toSerialize["fileLockConfig"] = o.FileLockConfig
	}
	if o.FileFilters != nil {
		toSerialize["fileFilters"] = o.FileFilters
	}
	if o.SourceId.IsSet() {
		toSerialize["sourceId"] = o.SourceId.Get()
	}
	if o.SourceName.IsSet() {
		toSerialize["sourceName"] = o.SourceName.Get()
	}
	if o.PrePostScript != nil {
		toSerialize["prePostScript"] = o.PrePostScript
	}
	if o.ContinuousSnapshots != nil {
		toSerialize["continuousSnapshots"] = o.ContinuousSnapshots
	}
	if o.FilterIpConfig != nil {
		toSerialize["filterIpConfig"] = o.FilterIpConfig
	}
	if o.ThrottlingConfig != nil {
		toSerialize["throttlingConfig"] = o.ThrottlingConfig
	}
	return json.Marshal(toSerialize)
}

type NullableNetappProtectionGroupParams struct {
	value *NetappProtectionGroupParams
	isSet bool
}

func (v NullableNetappProtectionGroupParams) Get() *NetappProtectionGroupParams {
	return v.value
}

func (v *NullableNetappProtectionGroupParams) Set(val *NetappProtectionGroupParams) {
	v.value = val
	v.isSet = true
}

func (v NullableNetappProtectionGroupParams) IsSet() bool {
	return v.isSet
}

func (v *NullableNetappProtectionGroupParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetappProtectionGroupParams(val *NetappProtectionGroupParams) *NullableNetappProtectionGroupParams {
	return &NullableNetappProtectionGroupParams{value: val, isSet: true}
}

func (v NullableNetappProtectionGroupParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetappProtectionGroupParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o NetappProtectionGroupParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}