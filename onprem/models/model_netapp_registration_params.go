/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// NetappRegistrationParams Specifies parameters to register an Netapp Source.
type NetappRegistrationParams struct {
	// Specifies the Netapp source type. Can be either kCluster or kVServer (SVM).
	SourceType NullableString `json:"sourceType"`
	// Specifies the Hostname or IP Address Endpoint for the Netapp Source.
	Endpoint NullableString `json:"endpoint"`
	Credentials Credentials `json:"credentials"`
	// Specifies whether or not to back up SMB Volumes.
	BackUpSMBVolumes NullableBool `json:"backUpSMBVolumes,omitempty"`
	SmbCredentials *SmbMountCredentials `json:"smbCredentials,omitempty"`
	FilterIpConfig *FilterIpConfig `json:"filterIpConfig,omitempty"`
	ThrottlingConfig *NasThrottlingConfig `json:"throttlingConfig,omitempty"`
}

// NewNetappRegistrationParams instantiates a new NetappRegistrationParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetappRegistrationParams(sourceType NullableString, endpoint NullableString, credentials Credentials) *NetappRegistrationParams {
	this := NetappRegistrationParams{}
	this.SourceType = sourceType
	this.Endpoint = endpoint
	this.Credentials = credentials
	return &this
}

// NewNetappRegistrationParamsWithDefaults instantiates a new NetappRegistrationParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetappRegistrationParamsWithDefaults() *NetappRegistrationParams {
	this := NetappRegistrationParams{}
	return &this
}

// GetSourceType returns the SourceType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *NetappRegistrationParams) GetSourceType() string {
	if o == nil || o.SourceType.Get() == nil {
		var ret string
		return ret
	}

	return *o.SourceType.Get()
}

// GetSourceTypeOk returns a tuple with the SourceType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappRegistrationParams) GetSourceTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceType.Get(), o.SourceType.IsSet()
}

// SetSourceType sets field value
func (o *NetappRegistrationParams) SetSourceType(v string) {
	o.SourceType.Set(&v)
}

// GetEndpoint returns the Endpoint field value
// If the value is explicit nil, the zero value for string will be returned
func (o *NetappRegistrationParams) GetEndpoint() string {
	if o == nil || o.Endpoint.Get() == nil {
		var ret string
		return ret
	}

	return *o.Endpoint.Get()
}

// GetEndpointOk returns a tuple with the Endpoint field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappRegistrationParams) GetEndpointOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Endpoint.Get(), o.Endpoint.IsSet()
}

// SetEndpoint sets field value
func (o *NetappRegistrationParams) SetEndpoint(v string) {
	o.Endpoint.Set(&v)
}

// GetCredentials returns the Credentials field value
func (o *NetappRegistrationParams) GetCredentials() Credentials {
	if o == nil {
		var ret Credentials
		return ret
	}

	return o.Credentials
}

// GetCredentialsOk returns a tuple with the Credentials field value
// and a boolean to check if the value has been set.
func (o *NetappRegistrationParams) GetCredentialsOk() (*Credentials, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Credentials, true
}

// SetCredentials sets field value
func (o *NetappRegistrationParams) SetCredentials(v Credentials) {
	o.Credentials = v
}

// GetBackUpSMBVolumes returns the BackUpSMBVolumes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetappRegistrationParams) GetBackUpSMBVolumes() bool {
	if o == nil || o.BackUpSMBVolumes.Get() == nil {
		var ret bool
		return ret
	}
	return *o.BackUpSMBVolumes.Get()
}

// GetBackUpSMBVolumesOk returns a tuple with the BackUpSMBVolumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappRegistrationParams) GetBackUpSMBVolumesOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BackUpSMBVolumes.Get(), o.BackUpSMBVolumes.IsSet()
}

// HasBackUpSMBVolumes returns a boolean if a field has been set.
func (o *NetappRegistrationParams) HasBackUpSMBVolumes() bool {
	if o != nil && o.BackUpSMBVolumes.IsSet() {
		return true
	}

	return false
}

// SetBackUpSMBVolumes gets a reference to the given NullableBool and assigns it to the BackUpSMBVolumes field.
func (o *NetappRegistrationParams) SetBackUpSMBVolumes(v bool) {
	o.BackUpSMBVolumes.Set(&v)
}
// SetBackUpSMBVolumesNil sets the value for BackUpSMBVolumes to be an explicit nil
func (o *NetappRegistrationParams) SetBackUpSMBVolumesNil() {
	o.BackUpSMBVolumes.Set(nil)
}

// UnsetBackUpSMBVolumes ensures that no value is present for BackUpSMBVolumes, not even an explicit nil
func (o *NetappRegistrationParams) UnsetBackUpSMBVolumes() {
	o.BackUpSMBVolumes.Unset()
}

// GetSmbCredentials returns the SmbCredentials field value if set, zero value otherwise.
func (o *NetappRegistrationParams) GetSmbCredentials() SmbMountCredentials {
	if o == nil || o.SmbCredentials == nil {
		var ret SmbMountCredentials
		return ret
	}
	return *o.SmbCredentials
}

// GetSmbCredentialsOk returns a tuple with the SmbCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetappRegistrationParams) GetSmbCredentialsOk() (*SmbMountCredentials, bool) {
	if o == nil || o.SmbCredentials == nil {
		return nil, false
	}
	return o.SmbCredentials, true
}

// HasSmbCredentials returns a boolean if a field has been set.
func (o *NetappRegistrationParams) HasSmbCredentials() bool {
	if o != nil && o.SmbCredentials != nil {
		return true
	}

	return false
}

// SetSmbCredentials gets a reference to the given SmbMountCredentials and assigns it to the SmbCredentials field.
func (o *NetappRegistrationParams) SetSmbCredentials(v SmbMountCredentials) {
	o.SmbCredentials = &v
}

// GetFilterIpConfig returns the FilterIpConfig field value if set, zero value otherwise.
func (o *NetappRegistrationParams) GetFilterIpConfig() FilterIpConfig {
	if o == nil || o.FilterIpConfig == nil {
		var ret FilterIpConfig
		return ret
	}
	return *o.FilterIpConfig
}

// GetFilterIpConfigOk returns a tuple with the FilterIpConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetappRegistrationParams) GetFilterIpConfigOk() (*FilterIpConfig, bool) {
	if o == nil || o.FilterIpConfig == nil {
		return nil, false
	}
	return o.FilterIpConfig, true
}

// HasFilterIpConfig returns a boolean if a field has been set.
func (o *NetappRegistrationParams) HasFilterIpConfig() bool {
	if o != nil && o.FilterIpConfig != nil {
		return true
	}

	return false
}

// SetFilterIpConfig gets a reference to the given FilterIpConfig and assigns it to the FilterIpConfig field.
func (o *NetappRegistrationParams) SetFilterIpConfig(v FilterIpConfig) {
	o.FilterIpConfig = &v
}

// GetThrottlingConfig returns the ThrottlingConfig field value if set, zero value otherwise.
func (o *NetappRegistrationParams) GetThrottlingConfig() NasThrottlingConfig {
	if o == nil || o.ThrottlingConfig == nil {
		var ret NasThrottlingConfig
		return ret
	}
	return *o.ThrottlingConfig
}

// GetThrottlingConfigOk returns a tuple with the ThrottlingConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetappRegistrationParams) GetThrottlingConfigOk() (*NasThrottlingConfig, bool) {
	if o == nil || o.ThrottlingConfig == nil {
		return nil, false
	}
	return o.ThrottlingConfig, true
}

// HasThrottlingConfig returns a boolean if a field has been set.
func (o *NetappRegistrationParams) HasThrottlingConfig() bool {
	if o != nil && o.ThrottlingConfig != nil {
		return true
	}

	return false
}

// SetThrottlingConfig gets a reference to the given NasThrottlingConfig and assigns it to the ThrottlingConfig field.
func (o *NetappRegistrationParams) SetThrottlingConfig(v NasThrottlingConfig) {
	o.ThrottlingConfig = &v
}

func (o NetappRegistrationParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["sourceType"] = o.SourceType.Get()
	}
	if true {
		toSerialize["endpoint"] = o.Endpoint.Get()
	}
	if true {
		toSerialize["credentials"] = o.Credentials
	}
	if o.BackUpSMBVolumes.IsSet() {
		toSerialize["backUpSMBVolumes"] = o.BackUpSMBVolumes.Get()
	}
	if o.SmbCredentials != nil {
		toSerialize["smbCredentials"] = o.SmbCredentials
	}
	if o.FilterIpConfig != nil {
		toSerialize["filterIpConfig"] = o.FilterIpConfig
	}
	if o.ThrottlingConfig != nil {
		toSerialize["throttlingConfig"] = o.ThrottlingConfig
	}
	return json.Marshal(toSerialize)
}

type NullableNetappRegistrationParams struct {
	value *NetappRegistrationParams
	isSet bool
}

func (v NullableNetappRegistrationParams) Get() *NetappRegistrationParams {
	return v.value
}

func (v *NullableNetappRegistrationParams) Set(val *NetappRegistrationParams) {
	v.value = val
	v.isSet = true
}

func (v NullableNetappRegistrationParams) IsSet() bool {
	return v.isSet
}

func (v *NullableNetappRegistrationParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetappRegistrationParams(val *NetappRegistrationParams) *NullableNetappRegistrationParams {
	return &NullableNetappRegistrationParams{value: val, isSet: true}
}

func (v NullableNetappRegistrationParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetappRegistrationParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o NetappRegistrationParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}