/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// MultiStageRestoreOptions Specifies the parameters related to multi stage Sql restore.
type MultiStageRestoreOptions struct {
	// Set this to true if you are creating a multi-stage Sql restore task needed for features such as Hot-Standby.
	EnableMultiStageRestore NullableBool `json:"enableMultiStageRestore,omitempty"`
	// Set this to true if you want to enable auto sync for multi stage restore.
	EnableAutoSync NullableBool `json:"enableAutoSync,omitempty"`
}

// NewMultiStageRestoreOptions instantiates a new MultiStageRestoreOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultiStageRestoreOptions() *MultiStageRestoreOptions {
	this := MultiStageRestoreOptions{}
	return &this
}

// NewMultiStageRestoreOptionsWithDefaults instantiates a new MultiStageRestoreOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultiStageRestoreOptionsWithDefaults() *MultiStageRestoreOptions {
	this := MultiStageRestoreOptions{}
	return &this
}

// GetEnableMultiStageRestore returns the EnableMultiStageRestore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MultiStageRestoreOptions) GetEnableMultiStageRestore() bool {
	if o == nil || o.EnableMultiStageRestore.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableMultiStageRestore.Get()
}

// GetEnableMultiStageRestoreOk returns a tuple with the EnableMultiStageRestore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MultiStageRestoreOptions) GetEnableMultiStageRestoreOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableMultiStageRestore.Get(), o.EnableMultiStageRestore.IsSet()
}

// HasEnableMultiStageRestore returns a boolean if a field has been set.
func (o *MultiStageRestoreOptions) HasEnableMultiStageRestore() bool {
	if o != nil && o.EnableMultiStageRestore.IsSet() {
		return true
	}

	return false
}

// SetEnableMultiStageRestore gets a reference to the given NullableBool and assigns it to the EnableMultiStageRestore field.
func (o *MultiStageRestoreOptions) SetEnableMultiStageRestore(v bool) {
	o.EnableMultiStageRestore.Set(&v)
}
// SetEnableMultiStageRestoreNil sets the value for EnableMultiStageRestore to be an explicit nil
func (o *MultiStageRestoreOptions) SetEnableMultiStageRestoreNil() {
	o.EnableMultiStageRestore.Set(nil)
}

// UnsetEnableMultiStageRestore ensures that no value is present for EnableMultiStageRestore, not even an explicit nil
func (o *MultiStageRestoreOptions) UnsetEnableMultiStageRestore() {
	o.EnableMultiStageRestore.Unset()
}

// GetEnableAutoSync returns the EnableAutoSync field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MultiStageRestoreOptions) GetEnableAutoSync() bool {
	if o == nil || o.EnableAutoSync.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableAutoSync.Get()
}

// GetEnableAutoSyncOk returns a tuple with the EnableAutoSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MultiStageRestoreOptions) GetEnableAutoSyncOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableAutoSync.Get(), o.EnableAutoSync.IsSet()
}

// HasEnableAutoSync returns a boolean if a field has been set.
func (o *MultiStageRestoreOptions) HasEnableAutoSync() bool {
	if o != nil && o.EnableAutoSync.IsSet() {
		return true
	}

	return false
}

// SetEnableAutoSync gets a reference to the given NullableBool and assigns it to the EnableAutoSync field.
func (o *MultiStageRestoreOptions) SetEnableAutoSync(v bool) {
	o.EnableAutoSync.Set(&v)
}
// SetEnableAutoSyncNil sets the value for EnableAutoSync to be an explicit nil
func (o *MultiStageRestoreOptions) SetEnableAutoSyncNil() {
	o.EnableAutoSync.Set(nil)
}

// UnsetEnableAutoSync ensures that no value is present for EnableAutoSync, not even an explicit nil
func (o *MultiStageRestoreOptions) UnsetEnableAutoSync() {
	o.EnableAutoSync.Unset()
}

func (o MultiStageRestoreOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EnableMultiStageRestore.IsSet() {
		toSerialize["enableMultiStageRestore"] = o.EnableMultiStageRestore.Get()
	}
	if o.EnableAutoSync.IsSet() {
		toSerialize["enableAutoSync"] = o.EnableAutoSync.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMultiStageRestoreOptions struct {
	value *MultiStageRestoreOptions
	isSet bool
}

func (v NullableMultiStageRestoreOptions) Get() *MultiStageRestoreOptions {
	return v.value
}

func (v *NullableMultiStageRestoreOptions) Set(val *MultiStageRestoreOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiStageRestoreOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiStageRestoreOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiStageRestoreOptions(val *MultiStageRestoreOptions) *NullableMultiStageRestoreOptions {
	return &NullableMultiStageRestoreOptions{value: val, isSet: true}
}

func (v NullableMultiStageRestoreOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiStageRestoreOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o MultiStageRestoreOptions) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}