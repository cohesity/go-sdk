/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// RecoverKubernetesNamespaceParams Specifies the parameters to recover Kubernetes Namespaces.
type RecoverKubernetesNamespaceParams struct {
	// Specifies the environment of the recovery target. The corresponding params below must be filled out.
	TargetEnvironment string `json:"targetEnvironment"`
	// Specifies the params for recovering to a Kubernetes host.
	KubernetesTargetParams NullableKubernetesTargetParamsForRecoverKubernetesNamespace `json:"kubernetesTargetParams,omitempty"`
}

// NewRecoverKubernetesNamespaceParams instantiates a new RecoverKubernetesNamespaceParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverKubernetesNamespaceParams(targetEnvironment string) *RecoverKubernetesNamespaceParams {
	this := RecoverKubernetesNamespaceParams{}
	this.TargetEnvironment = targetEnvironment
	return &this
}

// NewRecoverKubernetesNamespaceParamsWithDefaults instantiates a new RecoverKubernetesNamespaceParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverKubernetesNamespaceParamsWithDefaults() *RecoverKubernetesNamespaceParams {
	this := RecoverKubernetesNamespaceParams{}
	return &this
}

// GetTargetEnvironment returns the TargetEnvironment field value
func (o *RecoverKubernetesNamespaceParams) GetTargetEnvironment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetEnvironment
}

// GetTargetEnvironmentOk returns a tuple with the TargetEnvironment field value
// and a boolean to check if the value has been set.
func (o *RecoverKubernetesNamespaceParams) GetTargetEnvironmentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TargetEnvironment, true
}

// SetTargetEnvironment sets field value
func (o *RecoverKubernetesNamespaceParams) SetTargetEnvironment(v string) {
	o.TargetEnvironment = v
}

// GetKubernetesTargetParams returns the KubernetesTargetParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverKubernetesNamespaceParams) GetKubernetesTargetParams() KubernetesTargetParamsForRecoverKubernetesNamespace {
	if o == nil || o.KubernetesTargetParams.Get() == nil {
		var ret KubernetesTargetParamsForRecoverKubernetesNamespace
		return ret
	}
	return *o.KubernetesTargetParams.Get()
}

// GetKubernetesTargetParamsOk returns a tuple with the KubernetesTargetParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverKubernetesNamespaceParams) GetKubernetesTargetParamsOk() (*KubernetesTargetParamsForRecoverKubernetesNamespace, bool) {
	if o == nil  {
		return nil, false
	}
	return o.KubernetesTargetParams.Get(), o.KubernetesTargetParams.IsSet()
}

// HasKubernetesTargetParams returns a boolean if a field has been set.
func (o *RecoverKubernetesNamespaceParams) HasKubernetesTargetParams() bool {
	if o != nil && o.KubernetesTargetParams.IsSet() {
		return true
	}

	return false
}

// SetKubernetesTargetParams gets a reference to the given NullableKubernetesTargetParamsForRecoverKubernetesNamespace and assigns it to the KubernetesTargetParams field.
func (o *RecoverKubernetesNamespaceParams) SetKubernetesTargetParams(v KubernetesTargetParamsForRecoverKubernetesNamespace) {
	o.KubernetesTargetParams.Set(&v)
}
// SetKubernetesTargetParamsNil sets the value for KubernetesTargetParams to be an explicit nil
func (o *RecoverKubernetesNamespaceParams) SetKubernetesTargetParamsNil() {
	o.KubernetesTargetParams.Set(nil)
}

// UnsetKubernetesTargetParams ensures that no value is present for KubernetesTargetParams, not even an explicit nil
func (o *RecoverKubernetesNamespaceParams) UnsetKubernetesTargetParams() {
	o.KubernetesTargetParams.Unset()
}

func (o RecoverKubernetesNamespaceParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["targetEnvironment"] = o.TargetEnvironment
	}
	if o.KubernetesTargetParams.IsSet() {
		toSerialize["kubernetesTargetParams"] = o.KubernetesTargetParams.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRecoverKubernetesNamespaceParams struct {
	value *RecoverKubernetesNamespaceParams
	isSet bool
}

func (v NullableRecoverKubernetesNamespaceParams) Get() *RecoverKubernetesNamespaceParams {
	return v.value
}

func (v *NullableRecoverKubernetesNamespaceParams) Set(val *RecoverKubernetesNamespaceParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverKubernetesNamespaceParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverKubernetesNamespaceParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverKubernetesNamespaceParams(val *RecoverKubernetesNamespaceParams) *NullableRecoverKubernetesNamespaceParams {
	return &NullableRecoverKubernetesNamespaceParams{value: val, isSet: true}
}

func (v NullableRecoverKubernetesNamespaceParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverKubernetesNamespaceParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o RecoverKubernetesNamespaceParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}