/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// VmwareStandbyObject Specifies the VMware specific standby object details.
type VmwareStandbyObject struct {
	// Specifies the entity id of the corresponding backup object for which this standby is configured.
	EntityId NullableInt64 `json:"entityId,omitempty"`
	// Specifies the protection group id to which this standby object belongs.
	ProtectionGroupId NullableString `json:"protectionGroupId,omitempty"`
	// Specifies the current status of the standby object protected using continuous data protection policy.
	CdpStandbyStatus NullableString `json:"CdpStandbyStatus,omitempty"`
	// Specifies the guest ID(OS) of the standby VM for the corresponding backup object.
	GuestId NullableString `json:"guestId,omitempty"`
	StandbyMOref *MOref `json:"standbyMOref,omitempty"`
	// Specifies the time till which the standby object has been hydrated for the corresponding backup object.
	StandbyTime NullableInt64 `json:"standbyTime,omitempty"`
}

// NewVmwareStandbyObject instantiates a new VmwareStandbyObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmwareStandbyObject() *VmwareStandbyObject {
	this := VmwareStandbyObject{}
	return &this
}

// NewVmwareStandbyObjectWithDefaults instantiates a new VmwareStandbyObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmwareStandbyObjectWithDefaults() *VmwareStandbyObject {
	this := VmwareStandbyObject{}
	return &this
}

// GetEntityId returns the EntityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareStandbyObject) GetEntityId() int64 {
	if o == nil || o.EntityId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.EntityId.Get()
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareStandbyObject) GetEntityIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EntityId.Get(), o.EntityId.IsSet()
}

// HasEntityId returns a boolean if a field has been set.
func (o *VmwareStandbyObject) HasEntityId() bool {
	if o != nil && o.EntityId.IsSet() {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given NullableInt64 and assigns it to the EntityId field.
func (o *VmwareStandbyObject) SetEntityId(v int64) {
	o.EntityId.Set(&v)
}
// SetEntityIdNil sets the value for EntityId to be an explicit nil
func (o *VmwareStandbyObject) SetEntityIdNil() {
	o.EntityId.Set(nil)
}

// UnsetEntityId ensures that no value is present for EntityId, not even an explicit nil
func (o *VmwareStandbyObject) UnsetEntityId() {
	o.EntityId.Unset()
}

// GetProtectionGroupId returns the ProtectionGroupId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareStandbyObject) GetProtectionGroupId() string {
	if o == nil || o.ProtectionGroupId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProtectionGroupId.Get()
}

// GetProtectionGroupIdOk returns a tuple with the ProtectionGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareStandbyObject) GetProtectionGroupIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProtectionGroupId.Get(), o.ProtectionGroupId.IsSet()
}

// HasProtectionGroupId returns a boolean if a field has been set.
func (o *VmwareStandbyObject) HasProtectionGroupId() bool {
	if o != nil && o.ProtectionGroupId.IsSet() {
		return true
	}

	return false
}

// SetProtectionGroupId gets a reference to the given NullableString and assigns it to the ProtectionGroupId field.
func (o *VmwareStandbyObject) SetProtectionGroupId(v string) {
	o.ProtectionGroupId.Set(&v)
}
// SetProtectionGroupIdNil sets the value for ProtectionGroupId to be an explicit nil
func (o *VmwareStandbyObject) SetProtectionGroupIdNil() {
	o.ProtectionGroupId.Set(nil)
}

// UnsetProtectionGroupId ensures that no value is present for ProtectionGroupId, not even an explicit nil
func (o *VmwareStandbyObject) UnsetProtectionGroupId() {
	o.ProtectionGroupId.Unset()
}

// GetCdpStandbyStatus returns the CdpStandbyStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareStandbyObject) GetCdpStandbyStatus() string {
	if o == nil || o.CdpStandbyStatus.Get() == nil {
		var ret string
		return ret
	}
	return *o.CdpStandbyStatus.Get()
}

// GetCdpStandbyStatusOk returns a tuple with the CdpStandbyStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareStandbyObject) GetCdpStandbyStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CdpStandbyStatus.Get(), o.CdpStandbyStatus.IsSet()
}

// HasCdpStandbyStatus returns a boolean if a field has been set.
func (o *VmwareStandbyObject) HasCdpStandbyStatus() bool {
	if o != nil && o.CdpStandbyStatus.IsSet() {
		return true
	}

	return false
}

// SetCdpStandbyStatus gets a reference to the given NullableString and assigns it to the CdpStandbyStatus field.
func (o *VmwareStandbyObject) SetCdpStandbyStatus(v string) {
	o.CdpStandbyStatus.Set(&v)
}
// SetCdpStandbyStatusNil sets the value for CdpStandbyStatus to be an explicit nil
func (o *VmwareStandbyObject) SetCdpStandbyStatusNil() {
	o.CdpStandbyStatus.Set(nil)
}

// UnsetCdpStandbyStatus ensures that no value is present for CdpStandbyStatus, not even an explicit nil
func (o *VmwareStandbyObject) UnsetCdpStandbyStatus() {
	o.CdpStandbyStatus.Unset()
}

// GetGuestId returns the GuestId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareStandbyObject) GetGuestId() string {
	if o == nil || o.GuestId.Get() == nil {
		var ret string
		return ret
	}
	return *o.GuestId.Get()
}

// GetGuestIdOk returns a tuple with the GuestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareStandbyObject) GetGuestIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.GuestId.Get(), o.GuestId.IsSet()
}

// HasGuestId returns a boolean if a field has been set.
func (o *VmwareStandbyObject) HasGuestId() bool {
	if o != nil && o.GuestId.IsSet() {
		return true
	}

	return false
}

// SetGuestId gets a reference to the given NullableString and assigns it to the GuestId field.
func (o *VmwareStandbyObject) SetGuestId(v string) {
	o.GuestId.Set(&v)
}
// SetGuestIdNil sets the value for GuestId to be an explicit nil
func (o *VmwareStandbyObject) SetGuestIdNil() {
	o.GuestId.Set(nil)
}

// UnsetGuestId ensures that no value is present for GuestId, not even an explicit nil
func (o *VmwareStandbyObject) UnsetGuestId() {
	o.GuestId.Unset()
}

// GetStandbyMOref returns the StandbyMOref field value if set, zero value otherwise.
func (o *VmwareStandbyObject) GetStandbyMOref() MOref {
	if o == nil || o.StandbyMOref == nil {
		var ret MOref
		return ret
	}
	return *o.StandbyMOref
}

// GetStandbyMOrefOk returns a tuple with the StandbyMOref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmwareStandbyObject) GetStandbyMOrefOk() (*MOref, bool) {
	if o == nil || o.StandbyMOref == nil {
		return nil, false
	}
	return o.StandbyMOref, true
}

// HasStandbyMOref returns a boolean if a field has been set.
func (o *VmwareStandbyObject) HasStandbyMOref() bool {
	if o != nil && o.StandbyMOref != nil {
		return true
	}

	return false
}

// SetStandbyMOref gets a reference to the given MOref and assigns it to the StandbyMOref field.
func (o *VmwareStandbyObject) SetStandbyMOref(v MOref) {
	o.StandbyMOref = &v
}

// GetStandbyTime returns the StandbyTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareStandbyObject) GetStandbyTime() int64 {
	if o == nil || o.StandbyTime.Get() == nil {
		var ret int64
		return ret
	}
	return *o.StandbyTime.Get()
}

// GetStandbyTimeOk returns a tuple with the StandbyTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareStandbyObject) GetStandbyTimeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StandbyTime.Get(), o.StandbyTime.IsSet()
}

// HasStandbyTime returns a boolean if a field has been set.
func (o *VmwareStandbyObject) HasStandbyTime() bool {
	if o != nil && o.StandbyTime.IsSet() {
		return true
	}

	return false
}

// SetStandbyTime gets a reference to the given NullableInt64 and assigns it to the StandbyTime field.
func (o *VmwareStandbyObject) SetStandbyTime(v int64) {
	o.StandbyTime.Set(&v)
}
// SetStandbyTimeNil sets the value for StandbyTime to be an explicit nil
func (o *VmwareStandbyObject) SetStandbyTimeNil() {
	o.StandbyTime.Set(nil)
}

// UnsetStandbyTime ensures that no value is present for StandbyTime, not even an explicit nil
func (o *VmwareStandbyObject) UnsetStandbyTime() {
	o.StandbyTime.Unset()
}

func (o VmwareStandbyObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EntityId.IsSet() {
		toSerialize["entityId"] = o.EntityId.Get()
	}
	if o.ProtectionGroupId.IsSet() {
		toSerialize["protectionGroupId"] = o.ProtectionGroupId.Get()
	}
	if o.CdpStandbyStatus.IsSet() {
		toSerialize["CdpStandbyStatus"] = o.CdpStandbyStatus.Get()
	}
	if o.GuestId.IsSet() {
		toSerialize["guestId"] = o.GuestId.Get()
	}
	if o.StandbyMOref != nil {
		toSerialize["standbyMOref"] = o.StandbyMOref
	}
	if o.StandbyTime.IsSet() {
		toSerialize["standbyTime"] = o.StandbyTime.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableVmwareStandbyObject struct {
	value *VmwareStandbyObject
	isSet bool
}

func (v NullableVmwareStandbyObject) Get() *VmwareStandbyObject {
	return v.value
}

func (v *NullableVmwareStandbyObject) Set(val *VmwareStandbyObject) {
	v.value = val
	v.isSet = true
}

func (v NullableVmwareStandbyObject) IsSet() bool {
	return v.isSet
}

func (v *NullableVmwareStandbyObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmwareStandbyObject(val *VmwareStandbyObject) *NullableVmwareStandbyObject {
	return &NullableVmwareStandbyObject{value: val, isSet: true}
}

func (v NullableVmwareStandbyObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmwareStandbyObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o VmwareStandbyObject) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}