/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// DiskInfo Specifies information about a disk.
type DiskInfo struct {
	// Specifies the disk controller type.
	ControllerType NullableString `json:"controllerType,omitempty"`
	// Specifies the disk file name. This is the VMDK name and not the flat file name.
	UnitNumber NullableInt64 `json:"unitNumber"`
	// Specifies the Id of the controller bus that controls the disk.
	BusNumber NullableInt64 `json:"busNumber"`
}

// NewDiskInfo instantiates a new DiskInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiskInfo(unitNumber NullableInt64, busNumber NullableInt64) *DiskInfo {
	this := DiskInfo{}
	this.UnitNumber = unitNumber
	this.BusNumber = busNumber
	return &this
}

// NewDiskInfoWithDefaults instantiates a new DiskInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskInfoWithDefaults() *DiskInfo {
	this := DiskInfo{}
	return &this
}

// GetControllerType returns the ControllerType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DiskInfo) GetControllerType() string {
	if o == nil || o.ControllerType.Get() == nil {
		var ret string
		return ret
	}
	return *o.ControllerType.Get()
}

// GetControllerTypeOk returns a tuple with the ControllerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiskInfo) GetControllerTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ControllerType.Get(), o.ControllerType.IsSet()
}

// HasControllerType returns a boolean if a field has been set.
func (o *DiskInfo) HasControllerType() bool {
	if o != nil && o.ControllerType.IsSet() {
		return true
	}

	return false
}

// SetControllerType gets a reference to the given NullableString and assigns it to the ControllerType field.
func (o *DiskInfo) SetControllerType(v string) {
	o.ControllerType.Set(&v)
}
// SetControllerTypeNil sets the value for ControllerType to be an explicit nil
func (o *DiskInfo) SetControllerTypeNil() {
	o.ControllerType.Set(nil)
}

// UnsetControllerType ensures that no value is present for ControllerType, not even an explicit nil
func (o *DiskInfo) UnsetControllerType() {
	o.ControllerType.Unset()
}

// GetUnitNumber returns the UnitNumber field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *DiskInfo) GetUnitNumber() int64 {
	if o == nil || o.UnitNumber.Get() == nil {
		var ret int64
		return ret
	}

	return *o.UnitNumber.Get()
}

// GetUnitNumberOk returns a tuple with the UnitNumber field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiskInfo) GetUnitNumberOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UnitNumber.Get(), o.UnitNumber.IsSet()
}

// SetUnitNumber sets field value
func (o *DiskInfo) SetUnitNumber(v int64) {
	o.UnitNumber.Set(&v)
}

// GetBusNumber returns the BusNumber field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *DiskInfo) GetBusNumber() int64 {
	if o == nil || o.BusNumber.Get() == nil {
		var ret int64
		return ret
	}

	return *o.BusNumber.Get()
}

// GetBusNumberOk returns a tuple with the BusNumber field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiskInfo) GetBusNumberOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BusNumber.Get(), o.BusNumber.IsSet()
}

// SetBusNumber sets field value
func (o *DiskInfo) SetBusNumber(v int64) {
	o.BusNumber.Set(&v)
}

func (o DiskInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ControllerType.IsSet() {
		toSerialize["controllerType"] = o.ControllerType.Get()
	}
	if true {
		toSerialize["unitNumber"] = o.UnitNumber.Get()
	}
	if true {
		toSerialize["busNumber"] = o.BusNumber.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDiskInfo struct {
	value *DiskInfo
	isSet bool
}

func (v NullableDiskInfo) Get() *DiskInfo {
	return v.value
}

func (v *NullableDiskInfo) Set(val *DiskInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskInfo(val *DiskInfo) *NullableDiskInfo {
	return &NullableDiskInfo{value: val, isSet: true}
}

func (v NullableDiskInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o DiskInfo) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}