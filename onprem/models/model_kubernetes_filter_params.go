/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// KubernetesFilterParams Specifies the parameters to in/exclude objects (e.g.: volumes). An object satisfying any of these criteria will be included by this filter.
type KubernetesFilterParams struct {
	// Array of objects that are to be included.
	Objects []int64 `json:"objects,omitempty"`
	// Array of Arrays of Label Ids that Specify Objects (e.g.: Persistent Volumes and Persistent Volume Claims) to Include or Exclude. Optionally specify a list of items to include in filter by listing Source Ids of Labels in this two dimensional array. Using this two dimensional array of Labels, the Cluster generates a list of items to include in the filter, which are derived from intersections of the inner arrays and union of the outer array, as shown by the following example. For example a Namespace is selected to be protected but you want to exclude all the 'Employees:Former' items in the 'Location:East' and 'Location:West' but keep all the items for 'Employees:Former' in the South which are also stored in this Namespace, by specifying the following source id array: [ [1000, 2221], [1000, 3031] ], where 1000 is the 'Employee:Former' Label id, 2221 is the 'Location:East' Label id and 3031 is the 'West' Label id. The first inner array [1000, 2221] produces a list of items that are both labeled with 'Employees:Former' and 'Location:East' (an intersection). The second inner array [1000, 3031] produces a list of items that are both labeled with 'Employees:Former' and 'Location:West' (an intersection). The outer array combines the items from the two inner arrays. The list of resulting items, when combined with isExclude=true, are then excluded from being protected this Job.
	LabelIds [][]int64 `json:"labelIds,omitempty"`
}

// NewKubernetesFilterParams instantiates a new KubernetesFilterParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubernetesFilterParams() *KubernetesFilterParams {
	this := KubernetesFilterParams{}
	return &this
}

// NewKubernetesFilterParamsWithDefaults instantiates a new KubernetesFilterParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubernetesFilterParamsWithDefaults() *KubernetesFilterParams {
	this := KubernetesFilterParams{}
	return &this
}

// GetObjects returns the Objects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesFilterParams) GetObjects() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesFilterParams) GetObjectsOk() (*[]int64, bool) {
	if o == nil || o.Objects == nil {
		return nil, false
	}
	return &o.Objects, true
}

// HasObjects returns a boolean if a field has been set.
func (o *KubernetesFilterParams) HasObjects() bool {
	if o != nil && o.Objects != nil {
		return true
	}

	return false
}

// SetObjects gets a reference to the given []int64 and assigns it to the Objects field.
func (o *KubernetesFilterParams) SetObjects(v []int64) {
	o.Objects = v
}

// GetLabelIds returns the LabelIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesFilterParams) GetLabelIds() [][]int64 {
	if o == nil  {
		var ret [][]int64
		return ret
	}
	return o.LabelIds
}

// GetLabelIdsOk returns a tuple with the LabelIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesFilterParams) GetLabelIdsOk() (*[][]int64, bool) {
	if o == nil || o.LabelIds == nil {
		return nil, false
	}
	return &o.LabelIds, true
}

// HasLabelIds returns a boolean if a field has been set.
func (o *KubernetesFilterParams) HasLabelIds() bool {
	if o != nil && o.LabelIds != nil {
		return true
	}

	return false
}

// SetLabelIds gets a reference to the given [][]int64 and assigns it to the LabelIds field.
func (o *KubernetesFilterParams) SetLabelIds(v [][]int64) {
	o.LabelIds = v
}

func (o KubernetesFilterParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Objects != nil {
		toSerialize["objects"] = o.Objects
	}
	if o.LabelIds != nil {
		toSerialize["labelIds"] = o.LabelIds
	}
	return json.Marshal(toSerialize)
}

type NullableKubernetesFilterParams struct {
	value *KubernetesFilterParams
	isSet bool
}

func (v NullableKubernetesFilterParams) Get() *KubernetesFilterParams {
	return v.value
}

func (v *NullableKubernetesFilterParams) Set(val *KubernetesFilterParams) {
	v.value = val
	v.isSet = true
}

func (v NullableKubernetesFilterParams) IsSet() bool {
	return v.isSet
}

func (v *NullableKubernetesFilterParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubernetesFilterParams(val *KubernetesFilterParams) *NullableKubernetesFilterParams {
	return &NullableKubernetesFilterParams{value: val, isSet: true}
}

func (v NullableKubernetesFilterParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubernetesFilterParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o KubernetesFilterParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}