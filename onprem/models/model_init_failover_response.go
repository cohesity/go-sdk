/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// InitFailoverResponse Specifies the response after succesfully initiating the failover request.
type InitFailoverResponse struct {
	// Specifies the list of corrosponding source objects mapped with replica objects provided at the time of initiating failover request.
	ReplicaToSourceObjects []SourceReplicaObject `json:"replicaToSourceObjects,omitempty"`
	SourceClusterInfo *FailoverSourceCluster `json:"sourceClusterInfo,omitempty"`
}

// NewInitFailoverResponse instantiates a new InitFailoverResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInitFailoverResponse() *InitFailoverResponse {
	this := InitFailoverResponse{}
	return &this
}

// NewInitFailoverResponseWithDefaults instantiates a new InitFailoverResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInitFailoverResponseWithDefaults() *InitFailoverResponse {
	this := InitFailoverResponse{}
	return &this
}

// GetReplicaToSourceObjects returns the ReplicaToSourceObjects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InitFailoverResponse) GetReplicaToSourceObjects() []SourceReplicaObject {
	if o == nil  {
		var ret []SourceReplicaObject
		return ret
	}
	return o.ReplicaToSourceObjects
}

// GetReplicaToSourceObjectsOk returns a tuple with the ReplicaToSourceObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InitFailoverResponse) GetReplicaToSourceObjectsOk() (*[]SourceReplicaObject, bool) {
	if o == nil || o.ReplicaToSourceObjects == nil {
		return nil, false
	}
	return &o.ReplicaToSourceObjects, true
}

// HasReplicaToSourceObjects returns a boolean if a field has been set.
func (o *InitFailoverResponse) HasReplicaToSourceObjects() bool {
	if o != nil && o.ReplicaToSourceObjects != nil {
		return true
	}

	return false
}

// SetReplicaToSourceObjects gets a reference to the given []SourceReplicaObject and assigns it to the ReplicaToSourceObjects field.
func (o *InitFailoverResponse) SetReplicaToSourceObjects(v []SourceReplicaObject) {
	o.ReplicaToSourceObjects = v
}

// GetSourceClusterInfo returns the SourceClusterInfo field value if set, zero value otherwise.
func (o *InitFailoverResponse) GetSourceClusterInfo() FailoverSourceCluster {
	if o == nil || o.SourceClusterInfo == nil {
		var ret FailoverSourceCluster
		return ret
	}
	return *o.SourceClusterInfo
}

// GetSourceClusterInfoOk returns a tuple with the SourceClusterInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitFailoverResponse) GetSourceClusterInfoOk() (*FailoverSourceCluster, bool) {
	if o == nil || o.SourceClusterInfo == nil {
		return nil, false
	}
	return o.SourceClusterInfo, true
}

// HasSourceClusterInfo returns a boolean if a field has been set.
func (o *InitFailoverResponse) HasSourceClusterInfo() bool {
	if o != nil && o.SourceClusterInfo != nil {
		return true
	}

	return false
}

// SetSourceClusterInfo gets a reference to the given FailoverSourceCluster and assigns it to the SourceClusterInfo field.
func (o *InitFailoverResponse) SetSourceClusterInfo(v FailoverSourceCluster) {
	o.SourceClusterInfo = &v
}

func (o InitFailoverResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ReplicaToSourceObjects != nil {
		toSerialize["replicaToSourceObjects"] = o.ReplicaToSourceObjects
	}
	if o.SourceClusterInfo != nil {
		toSerialize["sourceClusterInfo"] = o.SourceClusterInfo
	}
	return json.Marshal(toSerialize)
}

type NullableInitFailoverResponse struct {
	value *InitFailoverResponse
	isSet bool
}

func (v NullableInitFailoverResponse) Get() *InitFailoverResponse {
	return v.value
}

func (v *NullableInitFailoverResponse) Set(val *InitFailoverResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableInitFailoverResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableInitFailoverResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInitFailoverResponse(val *InitFailoverResponse) *NullableInitFailoverResponse {
	return &NullableInitFailoverResponse{value: val, isSet: true}
}

func (v NullableInitFailoverResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInitFailoverResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o InitFailoverResponse) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}