/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// AlertStatus Alert Status type.
type AlertStatus struct {
	// Specifies Alert Status type.
	AlertStatus *string `json:"alertStatus,omitempty"`
}

// NewAlertStatus instantiates a new AlertStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertStatus() *AlertStatus {
	this := AlertStatus{}
	return &this
}

// NewAlertStatusWithDefaults instantiates a new AlertStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertStatusWithDefaults() *AlertStatus {
	this := AlertStatus{}
	return &this
}

// GetAlertStatus returns the AlertStatus field value if set, zero value otherwise.
func (o *AlertStatus) GetAlertStatus() string {
	if o == nil || o.AlertStatus == nil {
		var ret string
		return ret
	}
	return *o.AlertStatus
}

// GetAlertStatusOk returns a tuple with the AlertStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertStatus) GetAlertStatusOk() (*string, bool) {
	if o == nil || o.AlertStatus == nil {
		return nil, false
	}
	return o.AlertStatus, true
}

// HasAlertStatus returns a boolean if a field has been set.
func (o *AlertStatus) HasAlertStatus() bool {
	if o != nil && o.AlertStatus != nil {
		return true
	}

	return false
}

// SetAlertStatus gets a reference to the given string and assigns it to the AlertStatus field.
func (o *AlertStatus) SetAlertStatus(v string) {
	o.AlertStatus = &v
}

func (o AlertStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AlertStatus != nil {
		toSerialize["alertStatus"] = o.AlertStatus
	}
	return json.Marshal(toSerialize)
}

type NullableAlertStatus struct {
	value *AlertStatus
	isSet bool
}

func (v NullableAlertStatus) Get() *AlertStatus {
	return v.value
}

func (v *NullableAlertStatus) Set(val *AlertStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertStatus(val *AlertStatus) *NullableAlertStatus {
	return &NullableAlertStatus{value: val, isSet: true}
}

func (v NullableAlertStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o AlertStatus) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}