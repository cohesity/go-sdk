/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// RecoverHdfsParamsAllOf struct for RecoverHdfsParamsAllOf
type RecoverHdfsParamsAllOf struct {
	// Specifies the local snapshot ids of the Objects to be recovered.
	Snapshots []RecoverHdfsSnapshotParams `json:"snapshots"`
	// Specifies the target directory where files and folders are to be recovered. If not set, this will be taken as '/'
	TargetDirectory NullableString `json:"targetDirectory,omitempty"`
}

// NewRecoverHdfsParamsAllOf instantiates a new RecoverHdfsParamsAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverHdfsParamsAllOf(snapshots []RecoverHdfsSnapshotParams) *RecoverHdfsParamsAllOf {
	this := RecoverHdfsParamsAllOf{}
	this.Snapshots = snapshots
	return &this
}

// NewRecoverHdfsParamsAllOfWithDefaults instantiates a new RecoverHdfsParamsAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverHdfsParamsAllOfWithDefaults() *RecoverHdfsParamsAllOf {
	this := RecoverHdfsParamsAllOf{}
	return &this
}

// GetSnapshots returns the Snapshots field value
// If the value is explicit nil, the zero value for []RecoverHdfsSnapshotParams will be returned
func (o *RecoverHdfsParamsAllOf) GetSnapshots() []RecoverHdfsSnapshotParams {
	if o == nil {
		var ret []RecoverHdfsSnapshotParams
		return ret
	}

	return o.Snapshots
}

// GetSnapshotsOk returns a tuple with the Snapshots field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverHdfsParamsAllOf) GetSnapshotsOk() (*[]RecoverHdfsSnapshotParams, bool) {
	if o == nil || o.Snapshots == nil {
		return nil, false
	}
	return &o.Snapshots, true
}

// SetSnapshots sets field value
func (o *RecoverHdfsParamsAllOf) SetSnapshots(v []RecoverHdfsSnapshotParams) {
	o.Snapshots = v
}

// GetTargetDirectory returns the TargetDirectory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverHdfsParamsAllOf) GetTargetDirectory() string {
	if o == nil || o.TargetDirectory.Get() == nil {
		var ret string
		return ret
	}
	return *o.TargetDirectory.Get()
}

// GetTargetDirectoryOk returns a tuple with the TargetDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverHdfsParamsAllOf) GetTargetDirectoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetDirectory.Get(), o.TargetDirectory.IsSet()
}

// HasTargetDirectory returns a boolean if a field has been set.
func (o *RecoverHdfsParamsAllOf) HasTargetDirectory() bool {
	if o != nil && o.TargetDirectory.IsSet() {
		return true
	}

	return false
}

// SetTargetDirectory gets a reference to the given NullableString and assigns it to the TargetDirectory field.
func (o *RecoverHdfsParamsAllOf) SetTargetDirectory(v string) {
	o.TargetDirectory.Set(&v)
}
// SetTargetDirectoryNil sets the value for TargetDirectory to be an explicit nil
func (o *RecoverHdfsParamsAllOf) SetTargetDirectoryNil() {
	o.TargetDirectory.Set(nil)
}

// UnsetTargetDirectory ensures that no value is present for TargetDirectory, not even an explicit nil
func (o *RecoverHdfsParamsAllOf) UnsetTargetDirectory() {
	o.TargetDirectory.Unset()
}

func (o RecoverHdfsParamsAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Snapshots != nil {
		toSerialize["snapshots"] = o.Snapshots
	}
	if o.TargetDirectory.IsSet() {
		toSerialize["targetDirectory"] = o.TargetDirectory.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRecoverHdfsParamsAllOf struct {
	value *RecoverHdfsParamsAllOf
	isSet bool
}

func (v NullableRecoverHdfsParamsAllOf) Get() *RecoverHdfsParamsAllOf {
	return v.value
}

func (v *NullableRecoverHdfsParamsAllOf) Set(val *RecoverHdfsParamsAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverHdfsParamsAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverHdfsParamsAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverHdfsParamsAllOf(val *RecoverHdfsParamsAllOf) *NullableRecoverHdfsParamsAllOf {
	return &NullableRecoverHdfsParamsAllOf{value: val, isSet: true}
}

func (v NullableRecoverHdfsParamsAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverHdfsParamsAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o RecoverHdfsParamsAllOf) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}