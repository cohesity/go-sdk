/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// MachineAccount Specifies a machine account.
type MachineAccount struct {
	// Specifies the machine account name.
	Name NullableString `json:"name"`
	// Specifies the DNS host name of the machine account.
	DnsHostName NullableString `json:"dnsHostName,omitempty"`
	// Specifies a list of encryption types apply to the machine account.
	Encryption []string `json:"encryption,omitempty"`
}

// NewMachineAccount instantiates a new MachineAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMachineAccount(name NullableString) *MachineAccount {
	this := MachineAccount{}
	this.Name = name
	return &this
}

// NewMachineAccountWithDefaults instantiates a new MachineAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMachineAccountWithDefaults() *MachineAccount {
	this := MachineAccount{}
	return &this
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *MachineAccount) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MachineAccount) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *MachineAccount) SetName(v string) {
	o.Name.Set(&v)
}

// GetDnsHostName returns the DnsHostName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MachineAccount) GetDnsHostName() string {
	if o == nil || o.DnsHostName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DnsHostName.Get()
}

// GetDnsHostNameOk returns a tuple with the DnsHostName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MachineAccount) GetDnsHostNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DnsHostName.Get(), o.DnsHostName.IsSet()
}

// HasDnsHostName returns a boolean if a field has been set.
func (o *MachineAccount) HasDnsHostName() bool {
	if o != nil && o.DnsHostName.IsSet() {
		return true
	}

	return false
}

// SetDnsHostName gets a reference to the given NullableString and assigns it to the DnsHostName field.
func (o *MachineAccount) SetDnsHostName(v string) {
	o.DnsHostName.Set(&v)
}
// SetDnsHostNameNil sets the value for DnsHostName to be an explicit nil
func (o *MachineAccount) SetDnsHostNameNil() {
	o.DnsHostName.Set(nil)
}

// UnsetDnsHostName ensures that no value is present for DnsHostName, not even an explicit nil
func (o *MachineAccount) UnsetDnsHostName() {
	o.DnsHostName.Unset()
}

// GetEncryption returns the Encryption field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MachineAccount) GetEncryption() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Encryption
}

// GetEncryptionOk returns a tuple with the Encryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MachineAccount) GetEncryptionOk() (*[]string, bool) {
	if o == nil || o.Encryption == nil {
		return nil, false
	}
	return &o.Encryption, true
}

// HasEncryption returns a boolean if a field has been set.
func (o *MachineAccount) HasEncryption() bool {
	if o != nil && o.Encryption != nil {
		return true
	}

	return false
}

// SetEncryption gets a reference to the given []string and assigns it to the Encryption field.
func (o *MachineAccount) SetEncryption(v []string) {
	o.Encryption = v
}

func (o MachineAccount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name.Get()
	}
	if o.DnsHostName.IsSet() {
		toSerialize["dnsHostName"] = o.DnsHostName.Get()
	}
	if o.Encryption != nil {
		toSerialize["encryption"] = o.Encryption
	}
	return json.Marshal(toSerialize)
}

type NullableMachineAccount struct {
	value *MachineAccount
	isSet bool
}

func (v NullableMachineAccount) Get() *MachineAccount {
	return v.value
}

func (v *NullableMachineAccount) Set(val *MachineAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableMachineAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableMachineAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMachineAccount(val *MachineAccount) *NullableMachineAccount {
	return &NullableMachineAccount{value: val, isSet: true}
}

func (v NullableMachineAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMachineAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o MachineAccount) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}