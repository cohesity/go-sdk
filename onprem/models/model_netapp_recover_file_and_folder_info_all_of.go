/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// NetappRecoverFileAndFolderInfoAllOf struct for NetappRecoverFileAndFolderInfoAllOf
type NetappRecoverFileAndFolderInfoAllOf struct {
	// Specifies the source inode number of the file being recovered.
	InodeId NullableInt64 `json:"inodeId,omitempty"`
}

// NewNetappRecoverFileAndFolderInfoAllOf instantiates a new NetappRecoverFileAndFolderInfoAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetappRecoverFileAndFolderInfoAllOf() *NetappRecoverFileAndFolderInfoAllOf {
	this := NetappRecoverFileAndFolderInfoAllOf{}
	return &this
}

// NewNetappRecoverFileAndFolderInfoAllOfWithDefaults instantiates a new NetappRecoverFileAndFolderInfoAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetappRecoverFileAndFolderInfoAllOfWithDefaults() *NetappRecoverFileAndFolderInfoAllOf {
	this := NetappRecoverFileAndFolderInfoAllOf{}
	return &this
}

// GetInodeId returns the InodeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetappRecoverFileAndFolderInfoAllOf) GetInodeId() int64 {
	if o == nil || o.InodeId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.InodeId.Get()
}

// GetInodeIdOk returns a tuple with the InodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappRecoverFileAndFolderInfoAllOf) GetInodeIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InodeId.Get(), o.InodeId.IsSet()
}

// HasInodeId returns a boolean if a field has been set.
func (o *NetappRecoverFileAndFolderInfoAllOf) HasInodeId() bool {
	if o != nil && o.InodeId.IsSet() {
		return true
	}

	return false
}

// SetInodeId gets a reference to the given NullableInt64 and assigns it to the InodeId field.
func (o *NetappRecoverFileAndFolderInfoAllOf) SetInodeId(v int64) {
	o.InodeId.Set(&v)
}
// SetInodeIdNil sets the value for InodeId to be an explicit nil
func (o *NetappRecoverFileAndFolderInfoAllOf) SetInodeIdNil() {
	o.InodeId.Set(nil)
}

// UnsetInodeId ensures that no value is present for InodeId, not even an explicit nil
func (o *NetappRecoverFileAndFolderInfoAllOf) UnsetInodeId() {
	o.InodeId.Unset()
}

func (o NetappRecoverFileAndFolderInfoAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.InodeId.IsSet() {
		toSerialize["inodeId"] = o.InodeId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableNetappRecoverFileAndFolderInfoAllOf struct {
	value *NetappRecoverFileAndFolderInfoAllOf
	isSet bool
}

func (v NullableNetappRecoverFileAndFolderInfoAllOf) Get() *NetappRecoverFileAndFolderInfoAllOf {
	return v.value
}

func (v *NullableNetappRecoverFileAndFolderInfoAllOf) Set(val *NetappRecoverFileAndFolderInfoAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableNetappRecoverFileAndFolderInfoAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableNetappRecoverFileAndFolderInfoAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetappRecoverFileAndFolderInfoAllOf(val *NetappRecoverFileAndFolderInfoAllOf) *NullableNetappRecoverFileAndFolderInfoAllOf {
	return &NullableNetappRecoverFileAndFolderInfoAllOf{value: val, isSet: true}
}

func (v NullableNetappRecoverFileAndFolderInfoAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetappRecoverFileAndFolderInfoAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o NetappRecoverFileAndFolderInfoAllOf) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}