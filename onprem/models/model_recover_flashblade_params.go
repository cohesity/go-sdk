/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// RecoverFlashbladeParams Specifies the recovery options specific to Flashblade environment.
type RecoverFlashbladeParams struct {
	// Specifies the list of recover Object parameters.
	Objects []CommonRecoverObjectSnapshotParams `json:"objects"`
	// Specifies the type of recover action to be performed.
	RecoveryAction string `json:"recoveryAction"`
	// Specifies the parameters to recover Nas Volumes.
	RecoverNasVolumeParams NullableRecoverFlashbladeNasVolumeParams `json:"recoverNasVolumeParams,omitempty"`
	// Specifies the parameters to recover files.
	RecoverFileAndFolderParams NullableRecoverFlashbladeFilesParams `json:"recoverFileAndFolderParams,omitempty"`
	// Specifies the parameters to download files and folders.
	DownloadFileAndFolderParams NullableCommonDownloadFileAndFolderParams `json:"downloadFileAndFolderParams,omitempty"`
}

// NewRecoverFlashbladeParams instantiates a new RecoverFlashbladeParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverFlashbladeParams(objects []CommonRecoverObjectSnapshotParams, recoveryAction string) *RecoverFlashbladeParams {
	this := RecoverFlashbladeParams{}
	this.Objects = objects
	this.RecoveryAction = recoveryAction
	return &this
}

// NewRecoverFlashbladeParamsWithDefaults instantiates a new RecoverFlashbladeParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverFlashbladeParamsWithDefaults() *RecoverFlashbladeParams {
	this := RecoverFlashbladeParams{}
	return &this
}

// GetObjects returns the Objects field value
// If the value is explicit nil, the zero value for []CommonRecoverObjectSnapshotParams will be returned
func (o *RecoverFlashbladeParams) GetObjects() []CommonRecoverObjectSnapshotParams {
	if o == nil {
		var ret []CommonRecoverObjectSnapshotParams
		return ret
	}

	return o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverFlashbladeParams) GetObjectsOk() (*[]CommonRecoverObjectSnapshotParams, bool) {
	if o == nil || o.Objects == nil {
		return nil, false
	}
	return &o.Objects, true
}

// SetObjects sets field value
func (o *RecoverFlashbladeParams) SetObjects(v []CommonRecoverObjectSnapshotParams) {
	o.Objects = v
}

// GetRecoveryAction returns the RecoveryAction field value
func (o *RecoverFlashbladeParams) GetRecoveryAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecoveryAction
}

// GetRecoveryActionOk returns a tuple with the RecoveryAction field value
// and a boolean to check if the value has been set.
func (o *RecoverFlashbladeParams) GetRecoveryActionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RecoveryAction, true
}

// SetRecoveryAction sets field value
func (o *RecoverFlashbladeParams) SetRecoveryAction(v string) {
	o.RecoveryAction = v
}

// GetRecoverNasVolumeParams returns the RecoverNasVolumeParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverFlashbladeParams) GetRecoverNasVolumeParams() RecoverFlashbladeNasVolumeParams {
	if o == nil || o.RecoverNasVolumeParams.Get() == nil {
		var ret RecoverFlashbladeNasVolumeParams
		return ret
	}
	return *o.RecoverNasVolumeParams.Get()
}

// GetRecoverNasVolumeParamsOk returns a tuple with the RecoverNasVolumeParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverFlashbladeParams) GetRecoverNasVolumeParamsOk() (*RecoverFlashbladeNasVolumeParams, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RecoverNasVolumeParams.Get(), o.RecoverNasVolumeParams.IsSet()
}

// HasRecoverNasVolumeParams returns a boolean if a field has been set.
func (o *RecoverFlashbladeParams) HasRecoverNasVolumeParams() bool {
	if o != nil && o.RecoverNasVolumeParams.IsSet() {
		return true
	}

	return false
}

// SetRecoverNasVolumeParams gets a reference to the given NullableRecoverFlashbladeNasVolumeParams and assigns it to the RecoverNasVolumeParams field.
func (o *RecoverFlashbladeParams) SetRecoverNasVolumeParams(v RecoverFlashbladeNasVolumeParams) {
	o.RecoverNasVolumeParams.Set(&v)
}
// SetRecoverNasVolumeParamsNil sets the value for RecoverNasVolumeParams to be an explicit nil
func (o *RecoverFlashbladeParams) SetRecoverNasVolumeParamsNil() {
	o.RecoverNasVolumeParams.Set(nil)
}

// UnsetRecoverNasVolumeParams ensures that no value is present for RecoverNasVolumeParams, not even an explicit nil
func (o *RecoverFlashbladeParams) UnsetRecoverNasVolumeParams() {
	o.RecoverNasVolumeParams.Unset()
}

// GetRecoverFileAndFolderParams returns the RecoverFileAndFolderParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverFlashbladeParams) GetRecoverFileAndFolderParams() RecoverFlashbladeFilesParams {
	if o == nil || o.RecoverFileAndFolderParams.Get() == nil {
		var ret RecoverFlashbladeFilesParams
		return ret
	}
	return *o.RecoverFileAndFolderParams.Get()
}

// GetRecoverFileAndFolderParamsOk returns a tuple with the RecoverFileAndFolderParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverFlashbladeParams) GetRecoverFileAndFolderParamsOk() (*RecoverFlashbladeFilesParams, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RecoverFileAndFolderParams.Get(), o.RecoverFileAndFolderParams.IsSet()
}

// HasRecoverFileAndFolderParams returns a boolean if a field has been set.
func (o *RecoverFlashbladeParams) HasRecoverFileAndFolderParams() bool {
	if o != nil && o.RecoverFileAndFolderParams.IsSet() {
		return true
	}

	return false
}

// SetRecoverFileAndFolderParams gets a reference to the given NullableRecoverFlashbladeFilesParams and assigns it to the RecoverFileAndFolderParams field.
func (o *RecoverFlashbladeParams) SetRecoverFileAndFolderParams(v RecoverFlashbladeFilesParams) {
	o.RecoverFileAndFolderParams.Set(&v)
}
// SetRecoverFileAndFolderParamsNil sets the value for RecoverFileAndFolderParams to be an explicit nil
func (o *RecoverFlashbladeParams) SetRecoverFileAndFolderParamsNil() {
	o.RecoverFileAndFolderParams.Set(nil)
}

// UnsetRecoverFileAndFolderParams ensures that no value is present for RecoverFileAndFolderParams, not even an explicit nil
func (o *RecoverFlashbladeParams) UnsetRecoverFileAndFolderParams() {
	o.RecoverFileAndFolderParams.Unset()
}

// GetDownloadFileAndFolderParams returns the DownloadFileAndFolderParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverFlashbladeParams) GetDownloadFileAndFolderParams() CommonDownloadFileAndFolderParams {
	if o == nil || o.DownloadFileAndFolderParams.Get() == nil {
		var ret CommonDownloadFileAndFolderParams
		return ret
	}
	return *o.DownloadFileAndFolderParams.Get()
}

// GetDownloadFileAndFolderParamsOk returns a tuple with the DownloadFileAndFolderParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverFlashbladeParams) GetDownloadFileAndFolderParamsOk() (*CommonDownloadFileAndFolderParams, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DownloadFileAndFolderParams.Get(), o.DownloadFileAndFolderParams.IsSet()
}

// HasDownloadFileAndFolderParams returns a boolean if a field has been set.
func (o *RecoverFlashbladeParams) HasDownloadFileAndFolderParams() bool {
	if o != nil && o.DownloadFileAndFolderParams.IsSet() {
		return true
	}

	return false
}

// SetDownloadFileAndFolderParams gets a reference to the given NullableCommonDownloadFileAndFolderParams and assigns it to the DownloadFileAndFolderParams field.
func (o *RecoverFlashbladeParams) SetDownloadFileAndFolderParams(v CommonDownloadFileAndFolderParams) {
	o.DownloadFileAndFolderParams.Set(&v)
}
// SetDownloadFileAndFolderParamsNil sets the value for DownloadFileAndFolderParams to be an explicit nil
func (o *RecoverFlashbladeParams) SetDownloadFileAndFolderParamsNil() {
	o.DownloadFileAndFolderParams.Set(nil)
}

// UnsetDownloadFileAndFolderParams ensures that no value is present for DownloadFileAndFolderParams, not even an explicit nil
func (o *RecoverFlashbladeParams) UnsetDownloadFileAndFolderParams() {
	o.DownloadFileAndFolderParams.Unset()
}

func (o RecoverFlashbladeParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Objects != nil {
		toSerialize["objects"] = o.Objects
	}
	if true {
		toSerialize["recoveryAction"] = o.RecoveryAction
	}
	if o.RecoverNasVolumeParams.IsSet() {
		toSerialize["recoverNasVolumeParams"] = o.RecoverNasVolumeParams.Get()
	}
	if o.RecoverFileAndFolderParams.IsSet() {
		toSerialize["recoverFileAndFolderParams"] = o.RecoverFileAndFolderParams.Get()
	}
	if o.DownloadFileAndFolderParams.IsSet() {
		toSerialize["downloadFileAndFolderParams"] = o.DownloadFileAndFolderParams.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRecoverFlashbladeParams struct {
	value *RecoverFlashbladeParams
	isSet bool
}

func (v NullableRecoverFlashbladeParams) Get() *RecoverFlashbladeParams {
	return v.value
}

func (v *NullableRecoverFlashbladeParams) Set(val *RecoverFlashbladeParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverFlashbladeParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverFlashbladeParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverFlashbladeParams(val *RecoverFlashbladeParams) *NullableRecoverFlashbladeParams {
	return &NullableRecoverFlashbladeParams{value: val, isSet: true}
}

func (v NullableRecoverFlashbladeParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverFlashbladeParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o RecoverFlashbladeParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}