/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// OraclePdbObjectInfo Specifies information PDB object to restore.
type OraclePdbObjectInfo struct {
	// Specifies pluggable database id.
	DbId NullableString `json:"dbId"`
	// Specifies name of the DB.
	DbName NullableString `json:"dbName"`
}

// NewOraclePdbObjectInfo instantiates a new OraclePdbObjectInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOraclePdbObjectInfo(dbId NullableString, dbName NullableString) *OraclePdbObjectInfo {
	this := OraclePdbObjectInfo{}
	this.DbId = dbId
	this.DbName = dbName
	return &this
}

// NewOraclePdbObjectInfoWithDefaults instantiates a new OraclePdbObjectInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOraclePdbObjectInfoWithDefaults() *OraclePdbObjectInfo {
	this := OraclePdbObjectInfo{}
	return &this
}

// GetDbId returns the DbId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *OraclePdbObjectInfo) GetDbId() string {
	if o == nil || o.DbId.Get() == nil {
		var ret string
		return ret
	}

	return *o.DbId.Get()
}

// GetDbIdOk returns a tuple with the DbId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OraclePdbObjectInfo) GetDbIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DbId.Get(), o.DbId.IsSet()
}

// SetDbId sets field value
func (o *OraclePdbObjectInfo) SetDbId(v string) {
	o.DbId.Set(&v)
}

// GetDbName returns the DbName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *OraclePdbObjectInfo) GetDbName() string {
	if o == nil || o.DbName.Get() == nil {
		var ret string
		return ret
	}

	return *o.DbName.Get()
}

// GetDbNameOk returns a tuple with the DbName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OraclePdbObjectInfo) GetDbNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DbName.Get(), o.DbName.IsSet()
}

// SetDbName sets field value
func (o *OraclePdbObjectInfo) SetDbName(v string) {
	o.DbName.Set(&v)
}

func (o OraclePdbObjectInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["dbId"] = o.DbId.Get()
	}
	if true {
		toSerialize["dbName"] = o.DbName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableOraclePdbObjectInfo struct {
	value *OraclePdbObjectInfo
	isSet bool
}

func (v NullableOraclePdbObjectInfo) Get() *OraclePdbObjectInfo {
	return v.value
}

func (v *NullableOraclePdbObjectInfo) Set(val *OraclePdbObjectInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableOraclePdbObjectInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableOraclePdbObjectInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOraclePdbObjectInfo(val *OraclePdbObjectInfo) *NullableOraclePdbObjectInfo {
	return &NullableOraclePdbObjectInfo{value: val, isSet: true}
}

func (v NullableOraclePdbObjectInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOraclePdbObjectInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o OraclePdbObjectInfo) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}