/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// IcapUriConnectionStatus Specifies the ICAP Uri connection status.
type IcapUriConnectionStatus struct {
	// Specifies the ICAP Uri.
	IcapUri NullableString `json:"icapUri,omitempty"`
	// Specifies the connection status.
	ConnectionStatus NullableString `json:"connectionStatus,omitempty"`
}

// NewIcapUriConnectionStatus instantiates a new IcapUriConnectionStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIcapUriConnectionStatus() *IcapUriConnectionStatus {
	this := IcapUriConnectionStatus{}
	return &this
}

// NewIcapUriConnectionStatusWithDefaults instantiates a new IcapUriConnectionStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIcapUriConnectionStatusWithDefaults() *IcapUriConnectionStatus {
	this := IcapUriConnectionStatus{}
	return &this
}

// GetIcapUri returns the IcapUri field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IcapUriConnectionStatus) GetIcapUri() string {
	if o == nil || o.IcapUri.Get() == nil {
		var ret string
		return ret
	}
	return *o.IcapUri.Get()
}

// GetIcapUriOk returns a tuple with the IcapUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IcapUriConnectionStatus) GetIcapUriOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IcapUri.Get(), o.IcapUri.IsSet()
}

// HasIcapUri returns a boolean if a field has been set.
func (o *IcapUriConnectionStatus) HasIcapUri() bool {
	if o != nil && o.IcapUri.IsSet() {
		return true
	}

	return false
}

// SetIcapUri gets a reference to the given NullableString and assigns it to the IcapUri field.
func (o *IcapUriConnectionStatus) SetIcapUri(v string) {
	o.IcapUri.Set(&v)
}
// SetIcapUriNil sets the value for IcapUri to be an explicit nil
func (o *IcapUriConnectionStatus) SetIcapUriNil() {
	o.IcapUri.Set(nil)
}

// UnsetIcapUri ensures that no value is present for IcapUri, not even an explicit nil
func (o *IcapUriConnectionStatus) UnsetIcapUri() {
	o.IcapUri.Unset()
}

// GetConnectionStatus returns the ConnectionStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IcapUriConnectionStatus) GetConnectionStatus() string {
	if o == nil || o.ConnectionStatus.Get() == nil {
		var ret string
		return ret
	}
	return *o.ConnectionStatus.Get()
}

// GetConnectionStatusOk returns a tuple with the ConnectionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IcapUriConnectionStatus) GetConnectionStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ConnectionStatus.Get(), o.ConnectionStatus.IsSet()
}

// HasConnectionStatus returns a boolean if a field has been set.
func (o *IcapUriConnectionStatus) HasConnectionStatus() bool {
	if o != nil && o.ConnectionStatus.IsSet() {
		return true
	}

	return false
}

// SetConnectionStatus gets a reference to the given NullableString and assigns it to the ConnectionStatus field.
func (o *IcapUriConnectionStatus) SetConnectionStatus(v string) {
	o.ConnectionStatus.Set(&v)
}
// SetConnectionStatusNil sets the value for ConnectionStatus to be an explicit nil
func (o *IcapUriConnectionStatus) SetConnectionStatusNil() {
	o.ConnectionStatus.Set(nil)
}

// UnsetConnectionStatus ensures that no value is present for ConnectionStatus, not even an explicit nil
func (o *IcapUriConnectionStatus) UnsetConnectionStatus() {
	o.ConnectionStatus.Unset()
}

func (o IcapUriConnectionStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IcapUri.IsSet() {
		toSerialize["icapUri"] = o.IcapUri.Get()
	}
	if o.ConnectionStatus.IsSet() {
		toSerialize["connectionStatus"] = o.ConnectionStatus.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableIcapUriConnectionStatus struct {
	value *IcapUriConnectionStatus
	isSet bool
}

func (v NullableIcapUriConnectionStatus) Get() *IcapUriConnectionStatus {
	return v.value
}

func (v *NullableIcapUriConnectionStatus) Set(val *IcapUriConnectionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableIcapUriConnectionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableIcapUriConnectionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIcapUriConnectionStatus(val *IcapUriConnectionStatus) *NullableIcapUriConnectionStatus {
	return &NullableIcapUriConnectionStatus{value: val, isSet: true}
}

func (v NullableIcapUriConnectionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIcapUriConnectionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o IcapUriConnectionStatus) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}