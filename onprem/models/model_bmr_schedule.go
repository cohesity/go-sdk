/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// BmrSchedule Specifies settings that defines how frequent bmr backup will be performed for a Protection Group.
type BmrSchedule struct {
	// Specifies how often to start new runs of a Protection Group. <br>'Weeks' specifies that new Protection Group runs start weekly on certain days specified using 'dayOfWeek' field. <br>'Months' specifies that new Protection Group runs start monthly on certain day of specific week.
	Unit NullableString `json:"unit"`
	DaySchedule *DaySchedule `json:"daySchedule,omitempty"`
	WeekSchedule *WeekSchedule `json:"weekSchedule,omitempty"`
	MonthSchedule *MonthSchedule `json:"monthSchedule,omitempty"`
}

// NewBmrSchedule instantiates a new BmrSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBmrSchedule(unit NullableString) *BmrSchedule {
	this := BmrSchedule{}
	this.Unit = unit
	return &this
}

// NewBmrScheduleWithDefaults instantiates a new BmrSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBmrScheduleWithDefaults() *BmrSchedule {
	this := BmrSchedule{}
	return &this
}

// GetUnit returns the Unit field value
// If the value is explicit nil, the zero value for string will be returned
func (o *BmrSchedule) GetUnit() string {
	if o == nil || o.Unit.Get() == nil {
		var ret string
		return ret
	}

	return *o.Unit.Get()
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BmrSchedule) GetUnitOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Unit.Get(), o.Unit.IsSet()
}

// SetUnit sets field value
func (o *BmrSchedule) SetUnit(v string) {
	o.Unit.Set(&v)
}

// GetDaySchedule returns the DaySchedule field value if set, zero value otherwise.
func (o *BmrSchedule) GetDaySchedule() DaySchedule {
	if o == nil || o.DaySchedule == nil {
		var ret DaySchedule
		return ret
	}
	return *o.DaySchedule
}

// GetDayScheduleOk returns a tuple with the DaySchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BmrSchedule) GetDayScheduleOk() (*DaySchedule, bool) {
	if o == nil || o.DaySchedule == nil {
		return nil, false
	}
	return o.DaySchedule, true
}

// HasDaySchedule returns a boolean if a field has been set.
func (o *BmrSchedule) HasDaySchedule() bool {
	if o != nil && o.DaySchedule != nil {
		return true
	}

	return false
}

// SetDaySchedule gets a reference to the given DaySchedule and assigns it to the DaySchedule field.
func (o *BmrSchedule) SetDaySchedule(v DaySchedule) {
	o.DaySchedule = &v
}

// GetWeekSchedule returns the WeekSchedule field value if set, zero value otherwise.
func (o *BmrSchedule) GetWeekSchedule() WeekSchedule {
	if o == nil || o.WeekSchedule == nil {
		var ret WeekSchedule
		return ret
	}
	return *o.WeekSchedule
}

// GetWeekScheduleOk returns a tuple with the WeekSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BmrSchedule) GetWeekScheduleOk() (*WeekSchedule, bool) {
	if o == nil || o.WeekSchedule == nil {
		return nil, false
	}
	return o.WeekSchedule, true
}

// HasWeekSchedule returns a boolean if a field has been set.
func (o *BmrSchedule) HasWeekSchedule() bool {
	if o != nil && o.WeekSchedule != nil {
		return true
	}

	return false
}

// SetWeekSchedule gets a reference to the given WeekSchedule and assigns it to the WeekSchedule field.
func (o *BmrSchedule) SetWeekSchedule(v WeekSchedule) {
	o.WeekSchedule = &v
}

// GetMonthSchedule returns the MonthSchedule field value if set, zero value otherwise.
func (o *BmrSchedule) GetMonthSchedule() MonthSchedule {
	if o == nil || o.MonthSchedule == nil {
		var ret MonthSchedule
		return ret
	}
	return *o.MonthSchedule
}

// GetMonthScheduleOk returns a tuple with the MonthSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BmrSchedule) GetMonthScheduleOk() (*MonthSchedule, bool) {
	if o == nil || o.MonthSchedule == nil {
		return nil, false
	}
	return o.MonthSchedule, true
}

// HasMonthSchedule returns a boolean if a field has been set.
func (o *BmrSchedule) HasMonthSchedule() bool {
	if o != nil && o.MonthSchedule != nil {
		return true
	}

	return false
}

// SetMonthSchedule gets a reference to the given MonthSchedule and assigns it to the MonthSchedule field.
func (o *BmrSchedule) SetMonthSchedule(v MonthSchedule) {
	o.MonthSchedule = &v
}

func (o BmrSchedule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["unit"] = o.Unit.Get()
	}
	if o.DaySchedule != nil {
		toSerialize["daySchedule"] = o.DaySchedule
	}
	if o.WeekSchedule != nil {
		toSerialize["weekSchedule"] = o.WeekSchedule
	}
	if o.MonthSchedule != nil {
		toSerialize["monthSchedule"] = o.MonthSchedule
	}
	return json.Marshal(toSerialize)
}

type NullableBmrSchedule struct {
	value *BmrSchedule
	isSet bool
}

func (v NullableBmrSchedule) Get() *BmrSchedule {
	return v.value
}

func (v *NullableBmrSchedule) Set(val *BmrSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableBmrSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableBmrSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBmrSchedule(val *BmrSchedule) *NullableBmrSchedule {
	return &NullableBmrSchedule{value: val, isSet: true}
}

func (v NullableBmrSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBmrSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o BmrSchedule) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}