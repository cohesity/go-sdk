/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// AuditLogs Sepcifies the audit logs.
type AuditLogs struct {
	// Specifies a list of audit logs.
	AuditLogs []AuditLog `json:"auditLogs,omitempty"`
	// Specifies the total number of audit logs that match the filter and search criteria. Use this value to determine how many additional requests are required to get the full result.
	Count NullableInt64 `json:"count,omitempty"`
}

// NewAuditLogs instantiates a new AuditLogs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditLogs() *AuditLogs {
	this := AuditLogs{}
	return &this
}

// NewAuditLogsWithDefaults instantiates a new AuditLogs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditLogsWithDefaults() *AuditLogs {
	this := AuditLogs{}
	return &this
}

// GetAuditLogs returns the AuditLogs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuditLogs) GetAuditLogs() []AuditLog {
	if o == nil  {
		var ret []AuditLog
		return ret
	}
	return o.AuditLogs
}

// GetAuditLogsOk returns a tuple with the AuditLogs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuditLogs) GetAuditLogsOk() (*[]AuditLog, bool) {
	if o == nil || o.AuditLogs == nil {
		return nil, false
	}
	return &o.AuditLogs, true
}

// HasAuditLogs returns a boolean if a field has been set.
func (o *AuditLogs) HasAuditLogs() bool {
	if o != nil && o.AuditLogs != nil {
		return true
	}

	return false
}

// SetAuditLogs gets a reference to the given []AuditLog and assigns it to the AuditLogs field.
func (o *AuditLogs) SetAuditLogs(v []AuditLog) {
	o.AuditLogs = v
}

// GetCount returns the Count field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuditLogs) GetCount() int64 {
	if o == nil || o.Count.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Count.Get()
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuditLogs) GetCountOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Count.Get(), o.Count.IsSet()
}

// HasCount returns a boolean if a field has been set.
func (o *AuditLogs) HasCount() bool {
	if o != nil && o.Count.IsSet() {
		return true
	}

	return false
}

// SetCount gets a reference to the given NullableInt64 and assigns it to the Count field.
func (o *AuditLogs) SetCount(v int64) {
	o.Count.Set(&v)
}
// SetCountNil sets the value for Count to be an explicit nil
func (o *AuditLogs) SetCountNil() {
	o.Count.Set(nil)
}

// UnsetCount ensures that no value is present for Count, not even an explicit nil
func (o *AuditLogs) UnsetCount() {
	o.Count.Unset()
}

func (o AuditLogs) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AuditLogs != nil {
		toSerialize["auditLogs"] = o.AuditLogs
	}
	if o.Count.IsSet() {
		toSerialize["count"] = o.Count.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAuditLogs struct {
	value *AuditLogs
	isSet bool
}

func (v NullableAuditLogs) Get() *AuditLogs {
	return v.value
}

func (v *NullableAuditLogs) Set(val *AuditLogs) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditLogs) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditLogs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditLogs(val *AuditLogs) *NullableAuditLogs {
	return &NullableAuditLogs{value: val, isSet: true}
}

func (v NullableAuditLogs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditLogs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o AuditLogs) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}