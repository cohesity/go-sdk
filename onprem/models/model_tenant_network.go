/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// TenantNetwork Networking information about a Tenant on a Cluster.
type TenantNetwork struct {
	// Whether connector (hybrid extender) is enabled.
	ConnectorEnabled NullableBool `json:"connectorEnabled"`
	// The hostname for Cohesity cluster as seen by tenants and as is routable from the tenant's network. Tenant's VLAN's hostname, if available can be used instead but it is mandatory to provide this value if there's no VLAN hostname to use. Also, when set, this field would take precedence over VLAN hostname.
	ClusterHostname NullableString `json:"clusterHostname,omitempty"`
	// Set of IPs as seen from the tenant's network for the Cohesity cluster. Only one from 'clusterHostname' and 'clusterIps' is needed.
	ClusterIps []string `json:"clusterIps,omitempty"`
}

// NewTenantNetwork instantiates a new TenantNetwork object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantNetwork(connectorEnabled NullableBool) *TenantNetwork {
	this := TenantNetwork{}
	this.ConnectorEnabled = connectorEnabled
	return &this
}

// NewTenantNetworkWithDefaults instantiates a new TenantNetwork object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantNetworkWithDefaults() *TenantNetwork {
	this := TenantNetwork{}
	return &this
}

// GetConnectorEnabled returns the ConnectorEnabled field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *TenantNetwork) GetConnectorEnabled() bool {
	if o == nil || o.ConnectorEnabled.Get() == nil {
		var ret bool
		return ret
	}

	return *o.ConnectorEnabled.Get()
}

// GetConnectorEnabledOk returns a tuple with the ConnectorEnabled field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantNetwork) GetConnectorEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ConnectorEnabled.Get(), o.ConnectorEnabled.IsSet()
}

// SetConnectorEnabled sets field value
func (o *TenantNetwork) SetConnectorEnabled(v bool) {
	o.ConnectorEnabled.Set(&v)
}

// GetClusterHostname returns the ClusterHostname field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantNetwork) GetClusterHostname() string {
	if o == nil || o.ClusterHostname.Get() == nil {
		var ret string
		return ret
	}
	return *o.ClusterHostname.Get()
}

// GetClusterHostnameOk returns a tuple with the ClusterHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantNetwork) GetClusterHostnameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterHostname.Get(), o.ClusterHostname.IsSet()
}

// HasClusterHostname returns a boolean if a field has been set.
func (o *TenantNetwork) HasClusterHostname() bool {
	if o != nil && o.ClusterHostname.IsSet() {
		return true
	}

	return false
}

// SetClusterHostname gets a reference to the given NullableString and assigns it to the ClusterHostname field.
func (o *TenantNetwork) SetClusterHostname(v string) {
	o.ClusterHostname.Set(&v)
}
// SetClusterHostnameNil sets the value for ClusterHostname to be an explicit nil
func (o *TenantNetwork) SetClusterHostnameNil() {
	o.ClusterHostname.Set(nil)
}

// UnsetClusterHostname ensures that no value is present for ClusterHostname, not even an explicit nil
func (o *TenantNetwork) UnsetClusterHostname() {
	o.ClusterHostname.Unset()
}

// GetClusterIps returns the ClusterIps field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantNetwork) GetClusterIps() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.ClusterIps
}

// GetClusterIpsOk returns a tuple with the ClusterIps field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantNetwork) GetClusterIpsOk() (*[]string, bool) {
	if o == nil || o.ClusterIps == nil {
		return nil, false
	}
	return &o.ClusterIps, true
}

// HasClusterIps returns a boolean if a field has been set.
func (o *TenantNetwork) HasClusterIps() bool {
	if o != nil && o.ClusterIps != nil {
		return true
	}

	return false
}

// SetClusterIps gets a reference to the given []string and assigns it to the ClusterIps field.
func (o *TenantNetwork) SetClusterIps(v []string) {
	o.ClusterIps = v
}

func (o TenantNetwork) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["connectorEnabled"] = o.ConnectorEnabled.Get()
	}
	if o.ClusterHostname.IsSet() {
		toSerialize["clusterHostname"] = o.ClusterHostname.Get()
	}
	if o.ClusterIps != nil {
		toSerialize["clusterIps"] = o.ClusterIps
	}
	return json.Marshal(toSerialize)
}

type NullableTenantNetwork struct {
	value *TenantNetwork
	isSet bool
}

func (v NullableTenantNetwork) Get() *TenantNetwork {
	return v.value
}

func (v *NullableTenantNetwork) Set(val *TenantNetwork) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantNetwork) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantNetwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantNetwork(val *TenantNetwork) *NullableTenantNetwork {
	return &NullableTenantNetwork{value: val, isSet: true}
}

func (v NullableTenantNetwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantNetwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o TenantNetwork) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}