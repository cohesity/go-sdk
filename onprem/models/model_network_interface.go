/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// NetworkInterface Specifies the parameters of a network interface.
type NetworkInterface struct {
	// Specifies the name of the network interface.
	Name NullableString `json:"name,omitempty"`
	// Specifies the type of the network interface.
	Type NullableString `json:"type,omitempty"`
	// Specifies the static IP of the network interface.
	StaticIP NullableString `json:"staticIP,omitempty"`
	// Specifies the virtual IP of the network interface.
	VirtualIP NullableString `json:"virtualIP,omitempty"`
	// Specifies the gateway of the network interface.
	Gateway NullableString `json:"gateway,omitempty"`
	// Specifies the MTU of the network interface.
	Mtu NullableInt32 `json:"mtu,omitempty"`
	// Specifies the subnet of the network interface.
	Subnet NullableString `json:"subnet,omitempty"`
	// Specifies whether or not the interface is up.
	IsUp NullableBool `json:"isUp,omitempty"`
	// Specifies the group to which this interface belongs.
	Group NullableString `json:"group,omitempty"`
	// Specifies the interface role.
	Role NullableString `json:"role,omitempty"`
	// Specifies whether or not this interface is the default route.
	DefaultRoute NullableBool `json:"defaultRoute,omitempty"`
	// Specifies the names of the bond slaves for this interface.
	BondSlaveNames []string `json:"bondSlaveNames,omitempty"`
	// Specifies the slots of the bond slaves for this interface.
	BondSlaveSlots []string `json:"bondSlaveSlots,omitempty"`
	// Specifies the bonding mode of this interface.
	BondingMode NullableString `json:"bondingMode,omitempty"`
	// Specifies the MAC address of this interface.
	MacAddress NullableString `json:"macAddress,omitempty"`
	// Specifies whether or not this interface is connected.
	IsConnected NullableBool `json:"isConnected,omitempty"`
	// Specifies the speed of this interface.
	Speed NullableString `json:"speed,omitempty"`
}

// NewNetworkInterface instantiates a new NetworkInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkInterface() *NetworkInterface {
	this := NetworkInterface{}
	return &this
}

// NewNetworkInterfaceWithDefaults instantiates a new NetworkInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkInterfaceWithDefaults() *NetworkInterface {
	this := NetworkInterface{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkInterface) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkInterface) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *NetworkInterface) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *NetworkInterface) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *NetworkInterface) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *NetworkInterface) UnsetName() {
	o.Name.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkInterface) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkInterface) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *NetworkInterface) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *NetworkInterface) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *NetworkInterface) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *NetworkInterface) UnsetType() {
	o.Type.Unset()
}

// GetStaticIP returns the StaticIP field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkInterface) GetStaticIP() string {
	if o == nil || o.StaticIP.Get() == nil {
		var ret string
		return ret
	}
	return *o.StaticIP.Get()
}

// GetStaticIPOk returns a tuple with the StaticIP field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkInterface) GetStaticIPOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StaticIP.Get(), o.StaticIP.IsSet()
}

// HasStaticIP returns a boolean if a field has been set.
func (o *NetworkInterface) HasStaticIP() bool {
	if o != nil && o.StaticIP.IsSet() {
		return true
	}

	return false
}

// SetStaticIP gets a reference to the given NullableString and assigns it to the StaticIP field.
func (o *NetworkInterface) SetStaticIP(v string) {
	o.StaticIP.Set(&v)
}
// SetStaticIPNil sets the value for StaticIP to be an explicit nil
func (o *NetworkInterface) SetStaticIPNil() {
	o.StaticIP.Set(nil)
}

// UnsetStaticIP ensures that no value is present for StaticIP, not even an explicit nil
func (o *NetworkInterface) UnsetStaticIP() {
	o.StaticIP.Unset()
}

// GetVirtualIP returns the VirtualIP field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkInterface) GetVirtualIP() string {
	if o == nil || o.VirtualIP.Get() == nil {
		var ret string
		return ret
	}
	return *o.VirtualIP.Get()
}

// GetVirtualIPOk returns a tuple with the VirtualIP field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkInterface) GetVirtualIPOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VirtualIP.Get(), o.VirtualIP.IsSet()
}

// HasVirtualIP returns a boolean if a field has been set.
func (o *NetworkInterface) HasVirtualIP() bool {
	if o != nil && o.VirtualIP.IsSet() {
		return true
	}

	return false
}

// SetVirtualIP gets a reference to the given NullableString and assigns it to the VirtualIP field.
func (o *NetworkInterface) SetVirtualIP(v string) {
	o.VirtualIP.Set(&v)
}
// SetVirtualIPNil sets the value for VirtualIP to be an explicit nil
func (o *NetworkInterface) SetVirtualIPNil() {
	o.VirtualIP.Set(nil)
}

// UnsetVirtualIP ensures that no value is present for VirtualIP, not even an explicit nil
func (o *NetworkInterface) UnsetVirtualIP() {
	o.VirtualIP.Unset()
}

// GetGateway returns the Gateway field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkInterface) GetGateway() string {
	if o == nil || o.Gateway.Get() == nil {
		var ret string
		return ret
	}
	return *o.Gateway.Get()
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkInterface) GetGatewayOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Gateway.Get(), o.Gateway.IsSet()
}

// HasGateway returns a boolean if a field has been set.
func (o *NetworkInterface) HasGateway() bool {
	if o != nil && o.Gateway.IsSet() {
		return true
	}

	return false
}

// SetGateway gets a reference to the given NullableString and assigns it to the Gateway field.
func (o *NetworkInterface) SetGateway(v string) {
	o.Gateway.Set(&v)
}
// SetGatewayNil sets the value for Gateway to be an explicit nil
func (o *NetworkInterface) SetGatewayNil() {
	o.Gateway.Set(nil)
}

// UnsetGateway ensures that no value is present for Gateway, not even an explicit nil
func (o *NetworkInterface) UnsetGateway() {
	o.Gateway.Unset()
}

// GetMtu returns the Mtu field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkInterface) GetMtu() int32 {
	if o == nil || o.Mtu.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Mtu.Get()
}

// GetMtuOk returns a tuple with the Mtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkInterface) GetMtuOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Mtu.Get(), o.Mtu.IsSet()
}

// HasMtu returns a boolean if a field has been set.
func (o *NetworkInterface) HasMtu() bool {
	if o != nil && o.Mtu.IsSet() {
		return true
	}

	return false
}

// SetMtu gets a reference to the given NullableInt32 and assigns it to the Mtu field.
func (o *NetworkInterface) SetMtu(v int32) {
	o.Mtu.Set(&v)
}
// SetMtuNil sets the value for Mtu to be an explicit nil
func (o *NetworkInterface) SetMtuNil() {
	o.Mtu.Set(nil)
}

// UnsetMtu ensures that no value is present for Mtu, not even an explicit nil
func (o *NetworkInterface) UnsetMtu() {
	o.Mtu.Unset()
}

// GetSubnet returns the Subnet field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkInterface) GetSubnet() string {
	if o == nil || o.Subnet.Get() == nil {
		var ret string
		return ret
	}
	return *o.Subnet.Get()
}

// GetSubnetOk returns a tuple with the Subnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkInterface) GetSubnetOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Subnet.Get(), o.Subnet.IsSet()
}

// HasSubnet returns a boolean if a field has been set.
func (o *NetworkInterface) HasSubnet() bool {
	if o != nil && o.Subnet.IsSet() {
		return true
	}

	return false
}

// SetSubnet gets a reference to the given NullableString and assigns it to the Subnet field.
func (o *NetworkInterface) SetSubnet(v string) {
	o.Subnet.Set(&v)
}
// SetSubnetNil sets the value for Subnet to be an explicit nil
func (o *NetworkInterface) SetSubnetNil() {
	o.Subnet.Set(nil)
}

// UnsetSubnet ensures that no value is present for Subnet, not even an explicit nil
func (o *NetworkInterface) UnsetSubnet() {
	o.Subnet.Unset()
}

// GetIsUp returns the IsUp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkInterface) GetIsUp() bool {
	if o == nil || o.IsUp.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsUp.Get()
}

// GetIsUpOk returns a tuple with the IsUp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkInterface) GetIsUpOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsUp.Get(), o.IsUp.IsSet()
}

// HasIsUp returns a boolean if a field has been set.
func (o *NetworkInterface) HasIsUp() bool {
	if o != nil && o.IsUp.IsSet() {
		return true
	}

	return false
}

// SetIsUp gets a reference to the given NullableBool and assigns it to the IsUp field.
func (o *NetworkInterface) SetIsUp(v bool) {
	o.IsUp.Set(&v)
}
// SetIsUpNil sets the value for IsUp to be an explicit nil
func (o *NetworkInterface) SetIsUpNil() {
	o.IsUp.Set(nil)
}

// UnsetIsUp ensures that no value is present for IsUp, not even an explicit nil
func (o *NetworkInterface) UnsetIsUp() {
	o.IsUp.Unset()
}

// GetGroup returns the Group field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkInterface) GetGroup() string {
	if o == nil || o.Group.Get() == nil {
		var ret string
		return ret
	}
	return *o.Group.Get()
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkInterface) GetGroupOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Group.Get(), o.Group.IsSet()
}

// HasGroup returns a boolean if a field has been set.
func (o *NetworkInterface) HasGroup() bool {
	if o != nil && o.Group.IsSet() {
		return true
	}

	return false
}

// SetGroup gets a reference to the given NullableString and assigns it to the Group field.
func (o *NetworkInterface) SetGroup(v string) {
	o.Group.Set(&v)
}
// SetGroupNil sets the value for Group to be an explicit nil
func (o *NetworkInterface) SetGroupNil() {
	o.Group.Set(nil)
}

// UnsetGroup ensures that no value is present for Group, not even an explicit nil
func (o *NetworkInterface) UnsetGroup() {
	o.Group.Unset()
}

// GetRole returns the Role field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkInterface) GetRole() string {
	if o == nil || o.Role.Get() == nil {
		var ret string
		return ret
	}
	return *o.Role.Get()
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkInterface) GetRoleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Role.Get(), o.Role.IsSet()
}

// HasRole returns a boolean if a field has been set.
func (o *NetworkInterface) HasRole() bool {
	if o != nil && o.Role.IsSet() {
		return true
	}

	return false
}

// SetRole gets a reference to the given NullableString and assigns it to the Role field.
func (o *NetworkInterface) SetRole(v string) {
	o.Role.Set(&v)
}
// SetRoleNil sets the value for Role to be an explicit nil
func (o *NetworkInterface) SetRoleNil() {
	o.Role.Set(nil)
}

// UnsetRole ensures that no value is present for Role, not even an explicit nil
func (o *NetworkInterface) UnsetRole() {
	o.Role.Unset()
}

// GetDefaultRoute returns the DefaultRoute field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkInterface) GetDefaultRoute() bool {
	if o == nil || o.DefaultRoute.Get() == nil {
		var ret bool
		return ret
	}
	return *o.DefaultRoute.Get()
}

// GetDefaultRouteOk returns a tuple with the DefaultRoute field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkInterface) GetDefaultRouteOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DefaultRoute.Get(), o.DefaultRoute.IsSet()
}

// HasDefaultRoute returns a boolean if a field has been set.
func (o *NetworkInterface) HasDefaultRoute() bool {
	if o != nil && o.DefaultRoute.IsSet() {
		return true
	}

	return false
}

// SetDefaultRoute gets a reference to the given NullableBool and assigns it to the DefaultRoute field.
func (o *NetworkInterface) SetDefaultRoute(v bool) {
	o.DefaultRoute.Set(&v)
}
// SetDefaultRouteNil sets the value for DefaultRoute to be an explicit nil
func (o *NetworkInterface) SetDefaultRouteNil() {
	o.DefaultRoute.Set(nil)
}

// UnsetDefaultRoute ensures that no value is present for DefaultRoute, not even an explicit nil
func (o *NetworkInterface) UnsetDefaultRoute() {
	o.DefaultRoute.Unset()
}

// GetBondSlaveNames returns the BondSlaveNames field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkInterface) GetBondSlaveNames() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.BondSlaveNames
}

// GetBondSlaveNamesOk returns a tuple with the BondSlaveNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkInterface) GetBondSlaveNamesOk() (*[]string, bool) {
	if o == nil || o.BondSlaveNames == nil {
		return nil, false
	}
	return &o.BondSlaveNames, true
}

// HasBondSlaveNames returns a boolean if a field has been set.
func (o *NetworkInterface) HasBondSlaveNames() bool {
	if o != nil && o.BondSlaveNames != nil {
		return true
	}

	return false
}

// SetBondSlaveNames gets a reference to the given []string and assigns it to the BondSlaveNames field.
func (o *NetworkInterface) SetBondSlaveNames(v []string) {
	o.BondSlaveNames = v
}

// GetBondSlaveSlots returns the BondSlaveSlots field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkInterface) GetBondSlaveSlots() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.BondSlaveSlots
}

// GetBondSlaveSlotsOk returns a tuple with the BondSlaveSlots field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkInterface) GetBondSlaveSlotsOk() (*[]string, bool) {
	if o == nil || o.BondSlaveSlots == nil {
		return nil, false
	}
	return &o.BondSlaveSlots, true
}

// HasBondSlaveSlots returns a boolean if a field has been set.
func (o *NetworkInterface) HasBondSlaveSlots() bool {
	if o != nil && o.BondSlaveSlots != nil {
		return true
	}

	return false
}

// SetBondSlaveSlots gets a reference to the given []string and assigns it to the BondSlaveSlots field.
func (o *NetworkInterface) SetBondSlaveSlots(v []string) {
	o.BondSlaveSlots = v
}

// GetBondingMode returns the BondingMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkInterface) GetBondingMode() string {
	if o == nil || o.BondingMode.Get() == nil {
		var ret string
		return ret
	}
	return *o.BondingMode.Get()
}

// GetBondingModeOk returns a tuple with the BondingMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkInterface) GetBondingModeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BondingMode.Get(), o.BondingMode.IsSet()
}

// HasBondingMode returns a boolean if a field has been set.
func (o *NetworkInterface) HasBondingMode() bool {
	if o != nil && o.BondingMode.IsSet() {
		return true
	}

	return false
}

// SetBondingMode gets a reference to the given NullableString and assigns it to the BondingMode field.
func (o *NetworkInterface) SetBondingMode(v string) {
	o.BondingMode.Set(&v)
}
// SetBondingModeNil sets the value for BondingMode to be an explicit nil
func (o *NetworkInterface) SetBondingModeNil() {
	o.BondingMode.Set(nil)
}

// UnsetBondingMode ensures that no value is present for BondingMode, not even an explicit nil
func (o *NetworkInterface) UnsetBondingMode() {
	o.BondingMode.Unset()
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkInterface) GetMacAddress() string {
	if o == nil || o.MacAddress.Get() == nil {
		var ret string
		return ret
	}
	return *o.MacAddress.Get()
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkInterface) GetMacAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MacAddress.Get(), o.MacAddress.IsSet()
}

// HasMacAddress returns a boolean if a field has been set.
func (o *NetworkInterface) HasMacAddress() bool {
	if o != nil && o.MacAddress.IsSet() {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given NullableString and assigns it to the MacAddress field.
func (o *NetworkInterface) SetMacAddress(v string) {
	o.MacAddress.Set(&v)
}
// SetMacAddressNil sets the value for MacAddress to be an explicit nil
func (o *NetworkInterface) SetMacAddressNil() {
	o.MacAddress.Set(nil)
}

// UnsetMacAddress ensures that no value is present for MacAddress, not even an explicit nil
func (o *NetworkInterface) UnsetMacAddress() {
	o.MacAddress.Unset()
}

// GetIsConnected returns the IsConnected field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkInterface) GetIsConnected() bool {
	if o == nil || o.IsConnected.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsConnected.Get()
}

// GetIsConnectedOk returns a tuple with the IsConnected field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkInterface) GetIsConnectedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsConnected.Get(), o.IsConnected.IsSet()
}

// HasIsConnected returns a boolean if a field has been set.
func (o *NetworkInterface) HasIsConnected() bool {
	if o != nil && o.IsConnected.IsSet() {
		return true
	}

	return false
}

// SetIsConnected gets a reference to the given NullableBool and assigns it to the IsConnected field.
func (o *NetworkInterface) SetIsConnected(v bool) {
	o.IsConnected.Set(&v)
}
// SetIsConnectedNil sets the value for IsConnected to be an explicit nil
func (o *NetworkInterface) SetIsConnectedNil() {
	o.IsConnected.Set(nil)
}

// UnsetIsConnected ensures that no value is present for IsConnected, not even an explicit nil
func (o *NetworkInterface) UnsetIsConnected() {
	o.IsConnected.Unset()
}

// GetSpeed returns the Speed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetworkInterface) GetSpeed() string {
	if o == nil || o.Speed.Get() == nil {
		var ret string
		return ret
	}
	return *o.Speed.Get()
}

// GetSpeedOk returns a tuple with the Speed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetworkInterface) GetSpeedOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Speed.Get(), o.Speed.IsSet()
}

// HasSpeed returns a boolean if a field has been set.
func (o *NetworkInterface) HasSpeed() bool {
	if o != nil && o.Speed.IsSet() {
		return true
	}

	return false
}

// SetSpeed gets a reference to the given NullableString and assigns it to the Speed field.
func (o *NetworkInterface) SetSpeed(v string) {
	o.Speed.Set(&v)
}
// SetSpeedNil sets the value for Speed to be an explicit nil
func (o *NetworkInterface) SetSpeedNil() {
	o.Speed.Set(nil)
}

// UnsetSpeed ensures that no value is present for Speed, not even an explicit nil
func (o *NetworkInterface) UnsetSpeed() {
	o.Speed.Unset()
}

func (o NetworkInterface) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.StaticIP.IsSet() {
		toSerialize["staticIP"] = o.StaticIP.Get()
	}
	if o.VirtualIP.IsSet() {
		toSerialize["virtualIP"] = o.VirtualIP.Get()
	}
	if o.Gateway.IsSet() {
		toSerialize["gateway"] = o.Gateway.Get()
	}
	if o.Mtu.IsSet() {
		toSerialize["mtu"] = o.Mtu.Get()
	}
	if o.Subnet.IsSet() {
		toSerialize["subnet"] = o.Subnet.Get()
	}
	if o.IsUp.IsSet() {
		toSerialize["isUp"] = o.IsUp.Get()
	}
	if o.Group.IsSet() {
		toSerialize["group"] = o.Group.Get()
	}
	if o.Role.IsSet() {
		toSerialize["role"] = o.Role.Get()
	}
	if o.DefaultRoute.IsSet() {
		toSerialize["defaultRoute"] = o.DefaultRoute.Get()
	}
	if o.BondSlaveNames != nil {
		toSerialize["bondSlaveNames"] = o.BondSlaveNames
	}
	if o.BondSlaveSlots != nil {
		toSerialize["bondSlaveSlots"] = o.BondSlaveSlots
	}
	if o.BondingMode.IsSet() {
		toSerialize["bondingMode"] = o.BondingMode.Get()
	}
	if o.MacAddress.IsSet() {
		toSerialize["macAddress"] = o.MacAddress.Get()
	}
	if o.IsConnected.IsSet() {
		toSerialize["isConnected"] = o.IsConnected.Get()
	}
	if o.Speed.IsSet() {
		toSerialize["speed"] = o.Speed.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkInterface struct {
	value *NetworkInterface
	isSet bool
}

func (v NullableNetworkInterface) Get() *NetworkInterface {
	return v.value
}

func (v *NullableNetworkInterface) Set(val *NetworkInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkInterface(val *NetworkInterface) *NullableNetworkInterface {
	return &NullableNetworkInterface{value: val, isSet: true}
}

func (v NullableNetworkInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o NetworkInterface) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}