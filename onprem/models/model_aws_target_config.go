/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// AWSTargetConfig Specifies the configuration for adding AWS as repilcation target
type AWSTargetConfig struct {
	// Specifies the source id of the AWS protection source registered on Cohesity cluster.
	SourceId NullableInt64 `json:"sourceId"`
	// Specifies the name of the AWS Replication target.
	Name NullableString `json:"name,omitempty"`
	// Specifies id of the AWS region in which to replicate the Snapshot to. Applicable if replication target is AWS target.
	Region NullableInt64 `json:"region"`
	// Specifies name of the AWS region in which to replicate the Snapshot to. Applicable if replication target is AWS target.
	RegionName NullableString `json:"regionName,omitempty"`
}

// NewAWSTargetConfig instantiates a new AWSTargetConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAWSTargetConfig(sourceId NullableInt64, region NullableInt64) *AWSTargetConfig {
	this := AWSTargetConfig{}
	this.SourceId = sourceId
	this.Region = region
	return &this
}

// NewAWSTargetConfigWithDefaults instantiates a new AWSTargetConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAWSTargetConfigWithDefaults() *AWSTargetConfig {
	this := AWSTargetConfig{}
	return &this
}

// GetSourceId returns the SourceId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *AWSTargetConfig) GetSourceId() int64 {
	if o == nil || o.SourceId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.SourceId.Get()
}

// GetSourceIdOk returns a tuple with the SourceId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AWSTargetConfig) GetSourceIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceId.Get(), o.SourceId.IsSet()
}

// SetSourceId sets field value
func (o *AWSTargetConfig) SetSourceId(v int64) {
	o.SourceId.Set(&v)
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AWSTargetConfig) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AWSTargetConfig) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *AWSTargetConfig) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *AWSTargetConfig) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *AWSTargetConfig) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *AWSTargetConfig) UnsetName() {
	o.Name.Unset()
}

// GetRegion returns the Region field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *AWSTargetConfig) GetRegion() int64 {
	if o == nil || o.Region.Get() == nil {
		var ret int64
		return ret
	}

	return *o.Region.Get()
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AWSTargetConfig) GetRegionOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Region.Get(), o.Region.IsSet()
}

// SetRegion sets field value
func (o *AWSTargetConfig) SetRegion(v int64) {
	o.Region.Set(&v)
}

// GetRegionName returns the RegionName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AWSTargetConfig) GetRegionName() string {
	if o == nil || o.RegionName.Get() == nil {
		var ret string
		return ret
	}
	return *o.RegionName.Get()
}

// GetRegionNameOk returns a tuple with the RegionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AWSTargetConfig) GetRegionNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RegionName.Get(), o.RegionName.IsSet()
}

// HasRegionName returns a boolean if a field has been set.
func (o *AWSTargetConfig) HasRegionName() bool {
	if o != nil && o.RegionName.IsSet() {
		return true
	}

	return false
}

// SetRegionName gets a reference to the given NullableString and assigns it to the RegionName field.
func (o *AWSTargetConfig) SetRegionName(v string) {
	o.RegionName.Set(&v)
}
// SetRegionNameNil sets the value for RegionName to be an explicit nil
func (o *AWSTargetConfig) SetRegionNameNil() {
	o.RegionName.Set(nil)
}

// UnsetRegionName ensures that no value is present for RegionName, not even an explicit nil
func (o *AWSTargetConfig) UnsetRegionName() {
	o.RegionName.Unset()
}

func (o AWSTargetConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["sourceId"] = o.SourceId.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if true {
		toSerialize["region"] = o.Region.Get()
	}
	if o.RegionName.IsSet() {
		toSerialize["regionName"] = o.RegionName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAWSTargetConfig struct {
	value *AWSTargetConfig
	isSet bool
}

func (v NullableAWSTargetConfig) Get() *AWSTargetConfig {
	return v.value
}

func (v *NullableAWSTargetConfig) Set(val *AWSTargetConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAWSTargetConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAWSTargetConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAWSTargetConfig(val *AWSTargetConfig) *NullableAWSTargetConfig {
	return &NullableAWSTargetConfig{value: val, isSet: true}
}

func (v NullableAWSTargetConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAWSTargetConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o AWSTargetConfig) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}