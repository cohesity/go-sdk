/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// TrustedCa Specifies the basic info about CA Root Certificate.
type TrustedCa struct {
	// Unique id for the certificate.
	Id NullableString `json:"id,omitempty"`
	// Unique name for the certificate.
	Name NullableString `json:"name,omitempty"`
	// Specifies the issuer.
	IssuedBy NullableString `json:"issuedBy,omitempty"`
	// Specifies whom it was issued to.
	IssuedTo NullableString `json:"issuedTo,omitempty"`
	// Specifies the timestamp epoch in microseconds when this certificate will start being valid.
	IssuedTimeUsecs NullableInt64 `json:"issuedTimeUsecs,omitempty"`
	// Specifies the timestamp epoch in microseconds when this certificate will no longer be valid.
	ExpirationTimeUsecs NullableInt64 `json:"expirationTimeUsecs,omitempty"`
	// description of the certificate.
	Description NullableString `json:"description,omitempty"`
	// Specifies the timestamp epoch in microseconds when this certificate was registered on the cluster.
	RegistrationTimeUsecs NullableInt64 `json:"registrationTimeUsecs,omitempty"`
	// Specifies the timestamp epoch in microseconds when this certificate was last validated.
	LastValidatedTimeUsecs NullableInt64 `json:"lastValidatedTimeUsecs,omitempty"`
	// Validation Status of the certificate.
	Status NullableString `json:"status,omitempty"`
}

// NewTrustedCa instantiates a new TrustedCa object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrustedCa() *TrustedCa {
	this := TrustedCa{}
	return &this
}

// NewTrustedCaWithDefaults instantiates a new TrustedCa object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrustedCaWithDefaults() *TrustedCa {
	this := TrustedCa{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustedCa) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustedCa) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *TrustedCa) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *TrustedCa) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *TrustedCa) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *TrustedCa) UnsetId() {
	o.Id.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustedCa) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustedCa) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *TrustedCa) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *TrustedCa) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *TrustedCa) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *TrustedCa) UnsetName() {
	o.Name.Unset()
}

// GetIssuedBy returns the IssuedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustedCa) GetIssuedBy() string {
	if o == nil || o.IssuedBy.Get() == nil {
		var ret string
		return ret
	}
	return *o.IssuedBy.Get()
}

// GetIssuedByOk returns a tuple with the IssuedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustedCa) GetIssuedByOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IssuedBy.Get(), o.IssuedBy.IsSet()
}

// HasIssuedBy returns a boolean if a field has been set.
func (o *TrustedCa) HasIssuedBy() bool {
	if o != nil && o.IssuedBy.IsSet() {
		return true
	}

	return false
}

// SetIssuedBy gets a reference to the given NullableString and assigns it to the IssuedBy field.
func (o *TrustedCa) SetIssuedBy(v string) {
	o.IssuedBy.Set(&v)
}
// SetIssuedByNil sets the value for IssuedBy to be an explicit nil
func (o *TrustedCa) SetIssuedByNil() {
	o.IssuedBy.Set(nil)
}

// UnsetIssuedBy ensures that no value is present for IssuedBy, not even an explicit nil
func (o *TrustedCa) UnsetIssuedBy() {
	o.IssuedBy.Unset()
}

// GetIssuedTo returns the IssuedTo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustedCa) GetIssuedTo() string {
	if o == nil || o.IssuedTo.Get() == nil {
		var ret string
		return ret
	}
	return *o.IssuedTo.Get()
}

// GetIssuedToOk returns a tuple with the IssuedTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustedCa) GetIssuedToOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IssuedTo.Get(), o.IssuedTo.IsSet()
}

// HasIssuedTo returns a boolean if a field has been set.
func (o *TrustedCa) HasIssuedTo() bool {
	if o != nil && o.IssuedTo.IsSet() {
		return true
	}

	return false
}

// SetIssuedTo gets a reference to the given NullableString and assigns it to the IssuedTo field.
func (o *TrustedCa) SetIssuedTo(v string) {
	o.IssuedTo.Set(&v)
}
// SetIssuedToNil sets the value for IssuedTo to be an explicit nil
func (o *TrustedCa) SetIssuedToNil() {
	o.IssuedTo.Set(nil)
}

// UnsetIssuedTo ensures that no value is present for IssuedTo, not even an explicit nil
func (o *TrustedCa) UnsetIssuedTo() {
	o.IssuedTo.Unset()
}

// GetIssuedTimeUsecs returns the IssuedTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustedCa) GetIssuedTimeUsecs() int64 {
	if o == nil || o.IssuedTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.IssuedTimeUsecs.Get()
}

// GetIssuedTimeUsecsOk returns a tuple with the IssuedTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustedCa) GetIssuedTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IssuedTimeUsecs.Get(), o.IssuedTimeUsecs.IsSet()
}

// HasIssuedTimeUsecs returns a boolean if a field has been set.
func (o *TrustedCa) HasIssuedTimeUsecs() bool {
	if o != nil && o.IssuedTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetIssuedTimeUsecs gets a reference to the given NullableInt64 and assigns it to the IssuedTimeUsecs field.
func (o *TrustedCa) SetIssuedTimeUsecs(v int64) {
	o.IssuedTimeUsecs.Set(&v)
}
// SetIssuedTimeUsecsNil sets the value for IssuedTimeUsecs to be an explicit nil
func (o *TrustedCa) SetIssuedTimeUsecsNil() {
	o.IssuedTimeUsecs.Set(nil)
}

// UnsetIssuedTimeUsecs ensures that no value is present for IssuedTimeUsecs, not even an explicit nil
func (o *TrustedCa) UnsetIssuedTimeUsecs() {
	o.IssuedTimeUsecs.Unset()
}

// GetExpirationTimeUsecs returns the ExpirationTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustedCa) GetExpirationTimeUsecs() int64 {
	if o == nil || o.ExpirationTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ExpirationTimeUsecs.Get()
}

// GetExpirationTimeUsecsOk returns a tuple with the ExpirationTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustedCa) GetExpirationTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExpirationTimeUsecs.Get(), o.ExpirationTimeUsecs.IsSet()
}

// HasExpirationTimeUsecs returns a boolean if a field has been set.
func (o *TrustedCa) HasExpirationTimeUsecs() bool {
	if o != nil && o.ExpirationTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetExpirationTimeUsecs gets a reference to the given NullableInt64 and assigns it to the ExpirationTimeUsecs field.
func (o *TrustedCa) SetExpirationTimeUsecs(v int64) {
	o.ExpirationTimeUsecs.Set(&v)
}
// SetExpirationTimeUsecsNil sets the value for ExpirationTimeUsecs to be an explicit nil
func (o *TrustedCa) SetExpirationTimeUsecsNil() {
	o.ExpirationTimeUsecs.Set(nil)
}

// UnsetExpirationTimeUsecs ensures that no value is present for ExpirationTimeUsecs, not even an explicit nil
func (o *TrustedCa) UnsetExpirationTimeUsecs() {
	o.ExpirationTimeUsecs.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustedCa) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustedCa) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *TrustedCa) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *TrustedCa) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *TrustedCa) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *TrustedCa) UnsetDescription() {
	o.Description.Unset()
}

// GetRegistrationTimeUsecs returns the RegistrationTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustedCa) GetRegistrationTimeUsecs() int64 {
	if o == nil || o.RegistrationTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RegistrationTimeUsecs.Get()
}

// GetRegistrationTimeUsecsOk returns a tuple with the RegistrationTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustedCa) GetRegistrationTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RegistrationTimeUsecs.Get(), o.RegistrationTimeUsecs.IsSet()
}

// HasRegistrationTimeUsecs returns a boolean if a field has been set.
func (o *TrustedCa) HasRegistrationTimeUsecs() bool {
	if o != nil && o.RegistrationTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetRegistrationTimeUsecs gets a reference to the given NullableInt64 and assigns it to the RegistrationTimeUsecs field.
func (o *TrustedCa) SetRegistrationTimeUsecs(v int64) {
	o.RegistrationTimeUsecs.Set(&v)
}
// SetRegistrationTimeUsecsNil sets the value for RegistrationTimeUsecs to be an explicit nil
func (o *TrustedCa) SetRegistrationTimeUsecsNil() {
	o.RegistrationTimeUsecs.Set(nil)
}

// UnsetRegistrationTimeUsecs ensures that no value is present for RegistrationTimeUsecs, not even an explicit nil
func (o *TrustedCa) UnsetRegistrationTimeUsecs() {
	o.RegistrationTimeUsecs.Unset()
}

// GetLastValidatedTimeUsecs returns the LastValidatedTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustedCa) GetLastValidatedTimeUsecs() int64 {
	if o == nil || o.LastValidatedTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LastValidatedTimeUsecs.Get()
}

// GetLastValidatedTimeUsecsOk returns a tuple with the LastValidatedTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustedCa) GetLastValidatedTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastValidatedTimeUsecs.Get(), o.LastValidatedTimeUsecs.IsSet()
}

// HasLastValidatedTimeUsecs returns a boolean if a field has been set.
func (o *TrustedCa) HasLastValidatedTimeUsecs() bool {
	if o != nil && o.LastValidatedTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetLastValidatedTimeUsecs gets a reference to the given NullableInt64 and assigns it to the LastValidatedTimeUsecs field.
func (o *TrustedCa) SetLastValidatedTimeUsecs(v int64) {
	o.LastValidatedTimeUsecs.Set(&v)
}
// SetLastValidatedTimeUsecsNil sets the value for LastValidatedTimeUsecs to be an explicit nil
func (o *TrustedCa) SetLastValidatedTimeUsecsNil() {
	o.LastValidatedTimeUsecs.Set(nil)
}

// UnsetLastValidatedTimeUsecs ensures that no value is present for LastValidatedTimeUsecs, not even an explicit nil
func (o *TrustedCa) UnsetLastValidatedTimeUsecs() {
	o.LastValidatedTimeUsecs.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustedCa) GetStatus() string {
	if o == nil || o.Status.Get() == nil {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustedCa) GetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *TrustedCa) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *TrustedCa) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *TrustedCa) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *TrustedCa) UnsetStatus() {
	o.Status.Unset()
}

func (o TrustedCa) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.IssuedBy.IsSet() {
		toSerialize["issuedBy"] = o.IssuedBy.Get()
	}
	if o.IssuedTo.IsSet() {
		toSerialize["issuedTo"] = o.IssuedTo.Get()
	}
	if o.IssuedTimeUsecs.IsSet() {
		toSerialize["issuedTimeUsecs"] = o.IssuedTimeUsecs.Get()
	}
	if o.ExpirationTimeUsecs.IsSet() {
		toSerialize["expirationTimeUsecs"] = o.ExpirationTimeUsecs.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.RegistrationTimeUsecs.IsSet() {
		toSerialize["registrationTimeUsecs"] = o.RegistrationTimeUsecs.Get()
	}
	if o.LastValidatedTimeUsecs.IsSet() {
		toSerialize["lastValidatedTimeUsecs"] = o.LastValidatedTimeUsecs.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableTrustedCa struct {
	value *TrustedCa
	isSet bool
}

func (v NullableTrustedCa) Get() *TrustedCa {
	return v.value
}

func (v *NullableTrustedCa) Set(val *TrustedCa) {
	v.value = val
	v.isSet = true
}

func (v NullableTrustedCa) IsSet() bool {
	return v.isSet
}

func (v *NullableTrustedCa) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrustedCa(val *TrustedCa) *NullableTrustedCa {
	return &NullableTrustedCa{value: val, isSet: true}
}

func (v NullableTrustedCa) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrustedCa) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o TrustedCa) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}