/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// AWSTiers Specifies aws tiers.
type AWSTiers struct {
	// Specifies the tiers that are used to move the archived backup from current tier to next tier. The order of the tiers determines which tier will be used next for moving the archived backup. The first tier input should always be default tier where backup will be acrhived. Each tier specifies how much time after the backup will be moved to next tier from the current tier.
	Tiers []AWSTier `json:"tiers"`
}

// NewAWSTiers instantiates a new AWSTiers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAWSTiers(tiers []AWSTier) *AWSTiers {
	this := AWSTiers{}
	this.Tiers = tiers
	return &this
}

// NewAWSTiersWithDefaults instantiates a new AWSTiers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAWSTiersWithDefaults() *AWSTiers {
	this := AWSTiers{}
	return &this
}

// GetTiers returns the Tiers field value
// If the value is explicit nil, the zero value for []AWSTier will be returned
func (o *AWSTiers) GetTiers() []AWSTier {
	if o == nil {
		var ret []AWSTier
		return ret
	}

	return o.Tiers
}

// GetTiersOk returns a tuple with the Tiers field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AWSTiers) GetTiersOk() (*[]AWSTier, bool) {
	if o == nil || o.Tiers == nil {
		return nil, false
	}
	return &o.Tiers, true
}

// SetTiers sets field value
func (o *AWSTiers) SetTiers(v []AWSTier) {
	o.Tiers = v
}

func (o AWSTiers) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Tiers != nil {
		toSerialize["tiers"] = o.Tiers
	}
	return json.Marshal(toSerialize)
}

type NullableAWSTiers struct {
	value *AWSTiers
	isSet bool
}

func (v NullableAWSTiers) Get() *AWSTiers {
	return v.value
}

func (v *NullableAWSTiers) Set(val *AWSTiers) {
	v.value = val
	v.isSet = true
}

func (v NullableAWSTiers) IsSet() bool {
	return v.isSet
}

func (v *NullableAWSTiers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAWSTiers(val *AWSTiers) *NullableAWSTiers {
	return &NullableAWSTiers{value: val, isSet: true}
}

func (v NullableAWSTiers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAWSTiers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o AWSTiers) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}