/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// ExchangeRecoverDatabaseParams Specifies the parameters to recover an Exchange database. database.
type ExchangeRecoverDatabaseParams struct {
	// Specifies the source id of Exchange database which has to be recovered.
	DatabaseSource NullableRecoveryObjectIdentifier `json:"databaseSource"`
	// Specifies the parameter whether the recovery should be performed to a new or an existing Source Target.
	RecoverToNewSource bool `json:"recoverToNewSource"`
	// Specifies the recovery target configuration if recovery has to be done to a different location which is different from original source.
	RecoveryTargetConfig NullableExchangeDatabaseRecoveryTargetConfig `json:"recoveryTargetConfig,omitempty"`
	// Specifies the type of exchange restore.
	RestoreType NullableString `json:"restoreType"`
	ViewOptions *ViewOptions `json:"viewOptions,omitempty"`
}

// NewExchangeRecoverDatabaseParams instantiates a new ExchangeRecoverDatabaseParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExchangeRecoverDatabaseParams(databaseSource NullableRecoveryObjectIdentifier, recoverToNewSource bool, restoreType NullableString) *ExchangeRecoverDatabaseParams {
	this := ExchangeRecoverDatabaseParams{}
	this.DatabaseSource = databaseSource
	this.RecoverToNewSource = recoverToNewSource
	this.RestoreType = restoreType
	return &this
}

// NewExchangeRecoverDatabaseParamsWithDefaults instantiates a new ExchangeRecoverDatabaseParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExchangeRecoverDatabaseParamsWithDefaults() *ExchangeRecoverDatabaseParams {
	this := ExchangeRecoverDatabaseParams{}
	return &this
}

// GetDatabaseSource returns the DatabaseSource field value
// If the value is explicit nil, the zero value for RecoveryObjectIdentifier will be returned
func (o *ExchangeRecoverDatabaseParams) GetDatabaseSource() RecoveryObjectIdentifier {
	if o == nil || o.DatabaseSource.Get() == nil {
		var ret RecoveryObjectIdentifier
		return ret
	}

	return *o.DatabaseSource.Get()
}

// GetDatabaseSourceOk returns a tuple with the DatabaseSource field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeRecoverDatabaseParams) GetDatabaseSourceOk() (*RecoveryObjectIdentifier, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DatabaseSource.Get(), o.DatabaseSource.IsSet()
}

// SetDatabaseSource sets field value
func (o *ExchangeRecoverDatabaseParams) SetDatabaseSource(v RecoveryObjectIdentifier) {
	o.DatabaseSource.Set(&v)
}

// GetRecoverToNewSource returns the RecoverToNewSource field value
func (o *ExchangeRecoverDatabaseParams) GetRecoverToNewSource() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RecoverToNewSource
}

// GetRecoverToNewSourceOk returns a tuple with the RecoverToNewSource field value
// and a boolean to check if the value has been set.
func (o *ExchangeRecoverDatabaseParams) GetRecoverToNewSourceOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RecoverToNewSource, true
}

// SetRecoverToNewSource sets field value
func (o *ExchangeRecoverDatabaseParams) SetRecoverToNewSource(v bool) {
	o.RecoverToNewSource = v
}

// GetRecoveryTargetConfig returns the RecoveryTargetConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeRecoverDatabaseParams) GetRecoveryTargetConfig() ExchangeDatabaseRecoveryTargetConfig {
	if o == nil || o.RecoveryTargetConfig.Get() == nil {
		var ret ExchangeDatabaseRecoveryTargetConfig
		return ret
	}
	return *o.RecoveryTargetConfig.Get()
}

// GetRecoveryTargetConfigOk returns a tuple with the RecoveryTargetConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeRecoverDatabaseParams) GetRecoveryTargetConfigOk() (*ExchangeDatabaseRecoveryTargetConfig, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RecoveryTargetConfig.Get(), o.RecoveryTargetConfig.IsSet()
}

// HasRecoveryTargetConfig returns a boolean if a field has been set.
func (o *ExchangeRecoverDatabaseParams) HasRecoveryTargetConfig() bool {
	if o != nil && o.RecoveryTargetConfig.IsSet() {
		return true
	}

	return false
}

// SetRecoveryTargetConfig gets a reference to the given NullableExchangeDatabaseRecoveryTargetConfig and assigns it to the RecoveryTargetConfig field.
func (o *ExchangeRecoverDatabaseParams) SetRecoveryTargetConfig(v ExchangeDatabaseRecoveryTargetConfig) {
	o.RecoveryTargetConfig.Set(&v)
}
// SetRecoveryTargetConfigNil sets the value for RecoveryTargetConfig to be an explicit nil
func (o *ExchangeRecoverDatabaseParams) SetRecoveryTargetConfigNil() {
	o.RecoveryTargetConfig.Set(nil)
}

// UnsetRecoveryTargetConfig ensures that no value is present for RecoveryTargetConfig, not even an explicit nil
func (o *ExchangeRecoverDatabaseParams) UnsetRecoveryTargetConfig() {
	o.RecoveryTargetConfig.Unset()
}

// GetRestoreType returns the RestoreType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ExchangeRecoverDatabaseParams) GetRestoreType() string {
	if o == nil || o.RestoreType.Get() == nil {
		var ret string
		return ret
	}

	return *o.RestoreType.Get()
}

// GetRestoreTypeOk returns a tuple with the RestoreType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeRecoverDatabaseParams) GetRestoreTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RestoreType.Get(), o.RestoreType.IsSet()
}

// SetRestoreType sets field value
func (o *ExchangeRecoverDatabaseParams) SetRestoreType(v string) {
	o.RestoreType.Set(&v)
}

// GetViewOptions returns the ViewOptions field value if set, zero value otherwise.
func (o *ExchangeRecoverDatabaseParams) GetViewOptions() ViewOptions {
	if o == nil || o.ViewOptions == nil {
		var ret ViewOptions
		return ret
	}
	return *o.ViewOptions
}

// GetViewOptionsOk returns a tuple with the ViewOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeRecoverDatabaseParams) GetViewOptionsOk() (*ViewOptions, bool) {
	if o == nil || o.ViewOptions == nil {
		return nil, false
	}
	return o.ViewOptions, true
}

// HasViewOptions returns a boolean if a field has been set.
func (o *ExchangeRecoverDatabaseParams) HasViewOptions() bool {
	if o != nil && o.ViewOptions != nil {
		return true
	}

	return false
}

// SetViewOptions gets a reference to the given ViewOptions and assigns it to the ViewOptions field.
func (o *ExchangeRecoverDatabaseParams) SetViewOptions(v ViewOptions) {
	o.ViewOptions = &v
}

func (o ExchangeRecoverDatabaseParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["databaseSource"] = o.DatabaseSource.Get()
	}
	if true {
		toSerialize["recoverToNewSource"] = o.RecoverToNewSource
	}
	if o.RecoveryTargetConfig.IsSet() {
		toSerialize["recoveryTargetConfig"] = o.RecoveryTargetConfig.Get()
	}
	if true {
		toSerialize["restoreType"] = o.RestoreType.Get()
	}
	if o.ViewOptions != nil {
		toSerialize["viewOptions"] = o.ViewOptions
	}
	return json.Marshal(toSerialize)
}

type NullableExchangeRecoverDatabaseParams struct {
	value *ExchangeRecoverDatabaseParams
	isSet bool
}

func (v NullableExchangeRecoverDatabaseParams) Get() *ExchangeRecoverDatabaseParams {
	return v.value
}

func (v *NullableExchangeRecoverDatabaseParams) Set(val *ExchangeRecoverDatabaseParams) {
	v.value = val
	v.isSet = true
}

func (v NullableExchangeRecoverDatabaseParams) IsSet() bool {
	return v.isSet
}

func (v *NullableExchangeRecoverDatabaseParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchangeRecoverDatabaseParams(val *ExchangeRecoverDatabaseParams) *NullableExchangeRecoverDatabaseParams {
	return &NullableExchangeRecoverDatabaseParams{value: val, isSet: true}
}

func (v NullableExchangeRecoverDatabaseParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchangeRecoverDatabaseParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o ExchangeRecoverDatabaseParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}