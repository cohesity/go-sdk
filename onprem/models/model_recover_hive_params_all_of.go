/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// RecoverHiveParamsAllOf struct for RecoverHiveParamsAllOf
type RecoverHiveParamsAllOf struct {
	// Specifies the local snapshot ids of the Objects to be recovered.
	Snapshots []RecoverHiveSnapshotParams `json:"snapshots"`
	// A suffix that is to be applied to all recovered objects.
	Suffix NullableString `json:"suffix,omitempty"`
}

// NewRecoverHiveParamsAllOf instantiates a new RecoverHiveParamsAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverHiveParamsAllOf(snapshots []RecoverHiveSnapshotParams) *RecoverHiveParamsAllOf {
	this := RecoverHiveParamsAllOf{}
	this.Snapshots = snapshots
	return &this
}

// NewRecoverHiveParamsAllOfWithDefaults instantiates a new RecoverHiveParamsAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverHiveParamsAllOfWithDefaults() *RecoverHiveParamsAllOf {
	this := RecoverHiveParamsAllOf{}
	return &this
}

// GetSnapshots returns the Snapshots field value
// If the value is explicit nil, the zero value for []RecoverHiveSnapshotParams will be returned
func (o *RecoverHiveParamsAllOf) GetSnapshots() []RecoverHiveSnapshotParams {
	if o == nil {
		var ret []RecoverHiveSnapshotParams
		return ret
	}

	return o.Snapshots
}

// GetSnapshotsOk returns a tuple with the Snapshots field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverHiveParamsAllOf) GetSnapshotsOk() (*[]RecoverHiveSnapshotParams, bool) {
	if o == nil || o.Snapshots == nil {
		return nil, false
	}
	return &o.Snapshots, true
}

// SetSnapshots sets field value
func (o *RecoverHiveParamsAllOf) SetSnapshots(v []RecoverHiveSnapshotParams) {
	o.Snapshots = v
}

// GetSuffix returns the Suffix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverHiveParamsAllOf) GetSuffix() string {
	if o == nil || o.Suffix.Get() == nil {
		var ret string
		return ret
	}
	return *o.Suffix.Get()
}

// GetSuffixOk returns a tuple with the Suffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverHiveParamsAllOf) GetSuffixOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Suffix.Get(), o.Suffix.IsSet()
}

// HasSuffix returns a boolean if a field has been set.
func (o *RecoverHiveParamsAllOf) HasSuffix() bool {
	if o != nil && o.Suffix.IsSet() {
		return true
	}

	return false
}

// SetSuffix gets a reference to the given NullableString and assigns it to the Suffix field.
func (o *RecoverHiveParamsAllOf) SetSuffix(v string) {
	o.Suffix.Set(&v)
}
// SetSuffixNil sets the value for Suffix to be an explicit nil
func (o *RecoverHiveParamsAllOf) SetSuffixNil() {
	o.Suffix.Set(nil)
}

// UnsetSuffix ensures that no value is present for Suffix, not even an explicit nil
func (o *RecoverHiveParamsAllOf) UnsetSuffix() {
	o.Suffix.Unset()
}

func (o RecoverHiveParamsAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Snapshots != nil {
		toSerialize["snapshots"] = o.Snapshots
	}
	if o.Suffix.IsSet() {
		toSerialize["suffix"] = o.Suffix.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRecoverHiveParamsAllOf struct {
	value *RecoverHiveParamsAllOf
	isSet bool
}

func (v NullableRecoverHiveParamsAllOf) Get() *RecoverHiveParamsAllOf {
	return v.value
}

func (v *NullableRecoverHiveParamsAllOf) Set(val *RecoverHiveParamsAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverHiveParamsAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverHiveParamsAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverHiveParamsAllOf(val *RecoverHiveParamsAllOf) *NullableRecoverHiveParamsAllOf {
	return &NullableRecoverHiveParamsAllOf{value: val, isSet: true}
}

func (v NullableRecoverHiveParamsAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverHiveParamsAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o RecoverHiveParamsAllOf) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}