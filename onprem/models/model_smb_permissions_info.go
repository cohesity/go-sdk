/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// SmbPermissionsInfo Specifies information about SMB permissions.
type SmbPermissionsInfo struct {
	// Specifies the security identifier (SID) of the owner of the SMB share.
	OwnerSid NullableString `json:"ownerSid,omitempty"`
	// Array of SMB Permissions. Specifies a list of SMB permissions.
	Permissions []SmbPermission `json:"permissions,omitempty"`
}

// NewSmbPermissionsInfo instantiates a new SmbPermissionsInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmbPermissionsInfo() *SmbPermissionsInfo {
	this := SmbPermissionsInfo{}
	return &this
}

// NewSmbPermissionsInfoWithDefaults instantiates a new SmbPermissionsInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmbPermissionsInfoWithDefaults() *SmbPermissionsInfo {
	this := SmbPermissionsInfo{}
	return &this
}

// GetOwnerSid returns the OwnerSid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmbPermissionsInfo) GetOwnerSid() string {
	if o == nil || o.OwnerSid.Get() == nil {
		var ret string
		return ret
	}
	return *o.OwnerSid.Get()
}

// GetOwnerSidOk returns a tuple with the OwnerSid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmbPermissionsInfo) GetOwnerSidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OwnerSid.Get(), o.OwnerSid.IsSet()
}

// HasOwnerSid returns a boolean if a field has been set.
func (o *SmbPermissionsInfo) HasOwnerSid() bool {
	if o != nil && o.OwnerSid.IsSet() {
		return true
	}

	return false
}

// SetOwnerSid gets a reference to the given NullableString and assigns it to the OwnerSid field.
func (o *SmbPermissionsInfo) SetOwnerSid(v string) {
	o.OwnerSid.Set(&v)
}
// SetOwnerSidNil sets the value for OwnerSid to be an explicit nil
func (o *SmbPermissionsInfo) SetOwnerSidNil() {
	o.OwnerSid.Set(nil)
}

// UnsetOwnerSid ensures that no value is present for OwnerSid, not even an explicit nil
func (o *SmbPermissionsInfo) UnsetOwnerSid() {
	o.OwnerSid.Unset()
}

// GetPermissions returns the Permissions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmbPermissionsInfo) GetPermissions() []SmbPermission {
	if o == nil  {
		var ret []SmbPermission
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmbPermissionsInfo) GetPermissionsOk() (*[]SmbPermission, bool) {
	if o == nil || o.Permissions == nil {
		return nil, false
	}
	return &o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *SmbPermissionsInfo) HasPermissions() bool {
	if o != nil && o.Permissions != nil {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []SmbPermission and assigns it to the Permissions field.
func (o *SmbPermissionsInfo) SetPermissions(v []SmbPermission) {
	o.Permissions = v
}

func (o SmbPermissionsInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OwnerSid.IsSet() {
		toSerialize["ownerSid"] = o.OwnerSid.Get()
	}
	if o.Permissions != nil {
		toSerialize["permissions"] = o.Permissions
	}
	return json.Marshal(toSerialize)
}

type NullableSmbPermissionsInfo struct {
	value *SmbPermissionsInfo
	isSet bool
}

func (v NullableSmbPermissionsInfo) Get() *SmbPermissionsInfo {
	return v.value
}

func (v *NullableSmbPermissionsInfo) Set(val *SmbPermissionsInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSmbPermissionsInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSmbPermissionsInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmbPermissionsInfo(val *SmbPermissionsInfo) *NullableSmbPermissionsInfo {
	return &NullableSmbPermissionsInfo{value: val, isSet: true}
}

func (v NullableSmbPermissionsInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmbPermissionsInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o SmbPermissionsInfo) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}