/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// NetappObjectProtectionParams Specifies the parameters which are specific to Netapp object protection.
type NetappObjectProtectionParams struct {
	// Specifies the protocol of the NAS device being backed up.
	Protocol NullableString `json:"protocol,omitempty"`
	// Specifies the objects to be excluded in the Protection.
	ExcludeObjectIds []int64 `json:"excludeObjectIds,omitempty"`
	SnapshotLabel *SnapshotLabel `json:"snapshotLabel,omitempty"`
	// Specifies that snapshot label is not set for Data-Protect Netapp Volumes backup. If field is set to true, existing oldest snapshot is used for backup and subsequent incremental will be selected in ascending order of snapshot create time on the source. If snapshot label is set, this field is set to false.
	BackupExistingSnapshot NullableBool `json:"backupExistingSnapshot,omitempty"`
	ContinuousSnapshots *ContinuousSnapshotParams `json:"continuousSnapshots,omitempty"`
}

// NewNetappObjectProtectionParams instantiates a new NetappObjectProtectionParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetappObjectProtectionParams() *NetappObjectProtectionParams {
	this := NetappObjectProtectionParams{}
	return &this
}

// NewNetappObjectProtectionParamsWithDefaults instantiates a new NetappObjectProtectionParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetappObjectProtectionParamsWithDefaults() *NetappObjectProtectionParams {
	this := NetappObjectProtectionParams{}
	return &this
}

// GetProtocol returns the Protocol field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetappObjectProtectionParams) GetProtocol() string {
	if o == nil || o.Protocol.Get() == nil {
		var ret string
		return ret
	}
	return *o.Protocol.Get()
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappObjectProtectionParams) GetProtocolOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Protocol.Get(), o.Protocol.IsSet()
}

// HasProtocol returns a boolean if a field has been set.
func (o *NetappObjectProtectionParams) HasProtocol() bool {
	if o != nil && o.Protocol.IsSet() {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given NullableString and assigns it to the Protocol field.
func (o *NetappObjectProtectionParams) SetProtocol(v string) {
	o.Protocol.Set(&v)
}
// SetProtocolNil sets the value for Protocol to be an explicit nil
func (o *NetappObjectProtectionParams) SetProtocolNil() {
	o.Protocol.Set(nil)
}

// UnsetProtocol ensures that no value is present for Protocol, not even an explicit nil
func (o *NetappObjectProtectionParams) UnsetProtocol() {
	o.Protocol.Unset()
}

// GetExcludeObjectIds returns the ExcludeObjectIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetappObjectProtectionParams) GetExcludeObjectIds() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.ExcludeObjectIds
}

// GetExcludeObjectIdsOk returns a tuple with the ExcludeObjectIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappObjectProtectionParams) GetExcludeObjectIdsOk() (*[]int64, bool) {
	if o == nil || o.ExcludeObjectIds == nil {
		return nil, false
	}
	return &o.ExcludeObjectIds, true
}

// HasExcludeObjectIds returns a boolean if a field has been set.
func (o *NetappObjectProtectionParams) HasExcludeObjectIds() bool {
	if o != nil && o.ExcludeObjectIds != nil {
		return true
	}

	return false
}

// SetExcludeObjectIds gets a reference to the given []int64 and assigns it to the ExcludeObjectIds field.
func (o *NetappObjectProtectionParams) SetExcludeObjectIds(v []int64) {
	o.ExcludeObjectIds = v
}

// GetSnapshotLabel returns the SnapshotLabel field value if set, zero value otherwise.
func (o *NetappObjectProtectionParams) GetSnapshotLabel() SnapshotLabel {
	if o == nil || o.SnapshotLabel == nil {
		var ret SnapshotLabel
		return ret
	}
	return *o.SnapshotLabel
}

// GetSnapshotLabelOk returns a tuple with the SnapshotLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetappObjectProtectionParams) GetSnapshotLabelOk() (*SnapshotLabel, bool) {
	if o == nil || o.SnapshotLabel == nil {
		return nil, false
	}
	return o.SnapshotLabel, true
}

// HasSnapshotLabel returns a boolean if a field has been set.
func (o *NetappObjectProtectionParams) HasSnapshotLabel() bool {
	if o != nil && o.SnapshotLabel != nil {
		return true
	}

	return false
}

// SetSnapshotLabel gets a reference to the given SnapshotLabel and assigns it to the SnapshotLabel field.
func (o *NetappObjectProtectionParams) SetSnapshotLabel(v SnapshotLabel) {
	o.SnapshotLabel = &v
}

// GetBackupExistingSnapshot returns the BackupExistingSnapshot field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetappObjectProtectionParams) GetBackupExistingSnapshot() bool {
	if o == nil || o.BackupExistingSnapshot.Get() == nil {
		var ret bool
		return ret
	}
	return *o.BackupExistingSnapshot.Get()
}

// GetBackupExistingSnapshotOk returns a tuple with the BackupExistingSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappObjectProtectionParams) GetBackupExistingSnapshotOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BackupExistingSnapshot.Get(), o.BackupExistingSnapshot.IsSet()
}

// HasBackupExistingSnapshot returns a boolean if a field has been set.
func (o *NetappObjectProtectionParams) HasBackupExistingSnapshot() bool {
	if o != nil && o.BackupExistingSnapshot.IsSet() {
		return true
	}

	return false
}

// SetBackupExistingSnapshot gets a reference to the given NullableBool and assigns it to the BackupExistingSnapshot field.
func (o *NetappObjectProtectionParams) SetBackupExistingSnapshot(v bool) {
	o.BackupExistingSnapshot.Set(&v)
}
// SetBackupExistingSnapshotNil sets the value for BackupExistingSnapshot to be an explicit nil
func (o *NetappObjectProtectionParams) SetBackupExistingSnapshotNil() {
	o.BackupExistingSnapshot.Set(nil)
}

// UnsetBackupExistingSnapshot ensures that no value is present for BackupExistingSnapshot, not even an explicit nil
func (o *NetappObjectProtectionParams) UnsetBackupExistingSnapshot() {
	o.BackupExistingSnapshot.Unset()
}

// GetContinuousSnapshots returns the ContinuousSnapshots field value if set, zero value otherwise.
func (o *NetappObjectProtectionParams) GetContinuousSnapshots() ContinuousSnapshotParams {
	if o == nil || o.ContinuousSnapshots == nil {
		var ret ContinuousSnapshotParams
		return ret
	}
	return *o.ContinuousSnapshots
}

// GetContinuousSnapshotsOk returns a tuple with the ContinuousSnapshots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetappObjectProtectionParams) GetContinuousSnapshotsOk() (*ContinuousSnapshotParams, bool) {
	if o == nil || o.ContinuousSnapshots == nil {
		return nil, false
	}
	return o.ContinuousSnapshots, true
}

// HasContinuousSnapshots returns a boolean if a field has been set.
func (o *NetappObjectProtectionParams) HasContinuousSnapshots() bool {
	if o != nil && o.ContinuousSnapshots != nil {
		return true
	}

	return false
}

// SetContinuousSnapshots gets a reference to the given ContinuousSnapshotParams and assigns it to the ContinuousSnapshots field.
func (o *NetappObjectProtectionParams) SetContinuousSnapshots(v ContinuousSnapshotParams) {
	o.ContinuousSnapshots = &v
}

func (o NetappObjectProtectionParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Protocol.IsSet() {
		toSerialize["protocol"] = o.Protocol.Get()
	}
	if o.ExcludeObjectIds != nil {
		toSerialize["excludeObjectIds"] = o.ExcludeObjectIds
	}
	if o.SnapshotLabel != nil {
		toSerialize["snapshotLabel"] = o.SnapshotLabel
	}
	if o.BackupExistingSnapshot.IsSet() {
		toSerialize["backupExistingSnapshot"] = o.BackupExistingSnapshot.Get()
	}
	if o.ContinuousSnapshots != nil {
		toSerialize["continuousSnapshots"] = o.ContinuousSnapshots
	}
	return json.Marshal(toSerialize)
}

type NullableNetappObjectProtectionParams struct {
	value *NetappObjectProtectionParams
	isSet bool
}

func (v NullableNetappObjectProtectionParams) Get() *NetappObjectProtectionParams {
	return v.value
}

func (v *NullableNetappObjectProtectionParams) Set(val *NetappObjectProtectionParams) {
	v.value = val
	v.isSet = true
}

func (v NullableNetappObjectProtectionParams) IsSet() bool {
	return v.isSet
}

func (v *NullableNetappObjectProtectionParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetappObjectProtectionParams(val *NetappObjectProtectionParams) *NullableNetappObjectProtectionParams {
	return &NullableNetappObjectProtectionParams{value: val, isSet: true}
}

func (v NullableNetappObjectProtectionParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetappObjectProtectionParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o NetappObjectProtectionParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}