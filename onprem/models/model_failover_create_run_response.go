/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// FailoverCreateRunResponse Specifies the response upon creating a special run during failover workflow.
type FailoverCreateRunResponse struct {
	// Specifies the unique failover Id which will be generated by orchestrator. This Id will be used to uniquely identify current failover operation.
	FailoverId NullableString `json:"failoverId,omitempty"`
}

// NewFailoverCreateRunResponse instantiates a new FailoverCreateRunResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFailoverCreateRunResponse() *FailoverCreateRunResponse {
	this := FailoverCreateRunResponse{}
	return &this
}

// NewFailoverCreateRunResponseWithDefaults instantiates a new FailoverCreateRunResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFailoverCreateRunResponseWithDefaults() *FailoverCreateRunResponse {
	this := FailoverCreateRunResponse{}
	return &this
}

// GetFailoverId returns the FailoverId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FailoverCreateRunResponse) GetFailoverId() string {
	if o == nil || o.FailoverId.Get() == nil {
		var ret string
		return ret
	}
	return *o.FailoverId.Get()
}

// GetFailoverIdOk returns a tuple with the FailoverId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FailoverCreateRunResponse) GetFailoverIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FailoverId.Get(), o.FailoverId.IsSet()
}

// HasFailoverId returns a boolean if a field has been set.
func (o *FailoverCreateRunResponse) HasFailoverId() bool {
	if o != nil && o.FailoverId.IsSet() {
		return true
	}

	return false
}

// SetFailoverId gets a reference to the given NullableString and assigns it to the FailoverId field.
func (o *FailoverCreateRunResponse) SetFailoverId(v string) {
	o.FailoverId.Set(&v)
}
// SetFailoverIdNil sets the value for FailoverId to be an explicit nil
func (o *FailoverCreateRunResponse) SetFailoverIdNil() {
	o.FailoverId.Set(nil)
}

// UnsetFailoverId ensures that no value is present for FailoverId, not even an explicit nil
func (o *FailoverCreateRunResponse) UnsetFailoverId() {
	o.FailoverId.Unset()
}

func (o FailoverCreateRunResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FailoverId.IsSet() {
		toSerialize["failoverId"] = o.FailoverId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableFailoverCreateRunResponse struct {
	value *FailoverCreateRunResponse
	isSet bool
}

func (v NullableFailoverCreateRunResponse) Get() *FailoverCreateRunResponse {
	return v.value
}

func (v *NullableFailoverCreateRunResponse) Set(val *FailoverCreateRunResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFailoverCreateRunResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFailoverCreateRunResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFailoverCreateRunResponse(val *FailoverCreateRunResponse) *NullableFailoverCreateRunResponse {
	return &NullableFailoverCreateRunResponse{value: val, isSet: true}
}

func (v NullableFailoverCreateRunResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFailoverCreateRunResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o FailoverCreateRunResponse) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}