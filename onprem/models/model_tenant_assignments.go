/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// TenantAssignments All properties like entities, sources, policies etc assigned to the tenant.
type TenantAssignments struct {
	// The tenant id.
	TenantId NullableString `json:"tenantId,omitempty"`
	Assignments NullableTenantAssignmentsResult `json:"assignments,omitempty"`
}

// NewTenantAssignments instantiates a new TenantAssignments object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantAssignments() *TenantAssignments {
	this := TenantAssignments{}
	return &this
}

// NewTenantAssignmentsWithDefaults instantiates a new TenantAssignments object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantAssignmentsWithDefaults() *TenantAssignments {
	this := TenantAssignments{}
	return &this
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantAssignments) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantAssignments) GetTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *TenantAssignments) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *TenantAssignments) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *TenantAssignments) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *TenantAssignments) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetAssignments returns the Assignments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantAssignments) GetAssignments() TenantAssignmentsResult {
	if o == nil || o.Assignments.Get() == nil {
		var ret TenantAssignmentsResult
		return ret
	}
	return *o.Assignments.Get()
}

// GetAssignmentsOk returns a tuple with the Assignments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantAssignments) GetAssignmentsOk() (*TenantAssignmentsResult, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Assignments.Get(), o.Assignments.IsSet()
}

// HasAssignments returns a boolean if a field has been set.
func (o *TenantAssignments) HasAssignments() bool {
	if o != nil && o.Assignments.IsSet() {
		return true
	}

	return false
}

// SetAssignments gets a reference to the given NullableTenantAssignmentsResult and assigns it to the Assignments field.
func (o *TenantAssignments) SetAssignments(v TenantAssignmentsResult) {
	o.Assignments.Set(&v)
}
// SetAssignmentsNil sets the value for Assignments to be an explicit nil
func (o *TenantAssignments) SetAssignmentsNil() {
	o.Assignments.Set(nil)
}

// UnsetAssignments ensures that no value is present for Assignments, not even an explicit nil
func (o *TenantAssignments) UnsetAssignments() {
	o.Assignments.Unset()
}

func (o TenantAssignments) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.Assignments.IsSet() {
		toSerialize["assignments"] = o.Assignments.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableTenantAssignments struct {
	value *TenantAssignments
	isSet bool
}

func (v NullableTenantAssignments) Get() *TenantAssignments {
	return v.value
}

func (v *NullableTenantAssignments) Set(val *TenantAssignments) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantAssignments) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantAssignments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantAssignments(val *TenantAssignments) *NullableTenantAssignments {
	return &NullableTenantAssignments{value: val, isSet: true}
}

func (v NullableTenantAssignments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantAssignments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o TenantAssignments) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}