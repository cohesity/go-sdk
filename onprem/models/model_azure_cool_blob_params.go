/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// AzureCoolBlobParams Specifies the parameters which are specific to Azure related with tier type Cool Blob
type AzureCoolBlobParams struct {
	// Specifies the category of the external target.
	Category NullableString `json:"category"`
}

// NewAzureCoolBlobParams instantiates a new AzureCoolBlobParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureCoolBlobParams(category NullableString) *AzureCoolBlobParams {
	this := AzureCoolBlobParams{}
	this.Category = category
	return &this
}

// NewAzureCoolBlobParamsWithDefaults instantiates a new AzureCoolBlobParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureCoolBlobParamsWithDefaults() *AzureCoolBlobParams {
	this := AzureCoolBlobParams{}
	return &this
}

// GetCategory returns the Category field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AzureCoolBlobParams) GetCategory() string {
	if o == nil || o.Category.Get() == nil {
		var ret string
		return ret
	}

	return *o.Category.Get()
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureCoolBlobParams) GetCategoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Category.Get(), o.Category.IsSet()
}

// SetCategory sets field value
func (o *AzureCoolBlobParams) SetCategory(v string) {
	o.Category.Set(&v)
}

func (o AzureCoolBlobParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["category"] = o.Category.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAzureCoolBlobParams struct {
	value *AzureCoolBlobParams
	isSet bool
}

func (v NullableAzureCoolBlobParams) Get() *AzureCoolBlobParams {
	return v.value
}

func (v *NullableAzureCoolBlobParams) Set(val *AzureCoolBlobParams) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureCoolBlobParams) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureCoolBlobParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureCoolBlobParams(val *AzureCoolBlobParams) *NullableAzureCoolBlobParams {
	return &NullableAzureCoolBlobParams{value: val, isSet: true}
}

func (v NullableAzureCoolBlobParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureCoolBlobParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o AzureCoolBlobParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}