/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// FlashBladeRegistrationInfo Specifies the information specific to flashblade registration.
type FlashBladeRegistrationInfo struct {
	// Specifies management ip of pure flashblade server.
	Ip NullableString `json:"ip,omitempty"`
	// Specifies the api token of the pure flashblade.
	ApiToken NullableString `json:"apiToken"`
}

// NewFlashBladeRegistrationInfo instantiates a new FlashBladeRegistrationInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlashBladeRegistrationInfo(apiToken NullableString) *FlashBladeRegistrationInfo {
	this := FlashBladeRegistrationInfo{}
	this.ApiToken = apiToken
	return &this
}

// NewFlashBladeRegistrationInfoWithDefaults instantiates a new FlashBladeRegistrationInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlashBladeRegistrationInfoWithDefaults() *FlashBladeRegistrationInfo {
	this := FlashBladeRegistrationInfo{}
	return &this
}

// GetIp returns the Ip field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FlashBladeRegistrationInfo) GetIp() string {
	if o == nil || o.Ip.Get() == nil {
		var ret string
		return ret
	}
	return *o.Ip.Get()
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FlashBladeRegistrationInfo) GetIpOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Ip.Get(), o.Ip.IsSet()
}

// HasIp returns a boolean if a field has been set.
func (o *FlashBladeRegistrationInfo) HasIp() bool {
	if o != nil && o.Ip.IsSet() {
		return true
	}

	return false
}

// SetIp gets a reference to the given NullableString and assigns it to the Ip field.
func (o *FlashBladeRegistrationInfo) SetIp(v string) {
	o.Ip.Set(&v)
}
// SetIpNil sets the value for Ip to be an explicit nil
func (o *FlashBladeRegistrationInfo) SetIpNil() {
	o.Ip.Set(nil)
}

// UnsetIp ensures that no value is present for Ip, not even an explicit nil
func (o *FlashBladeRegistrationInfo) UnsetIp() {
	o.Ip.Unset()
}

// GetApiToken returns the ApiToken field value
// If the value is explicit nil, the zero value for string will be returned
func (o *FlashBladeRegistrationInfo) GetApiToken() string {
	if o == nil || o.ApiToken.Get() == nil {
		var ret string
		return ret
	}

	return *o.ApiToken.Get()
}

// GetApiTokenOk returns a tuple with the ApiToken field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FlashBladeRegistrationInfo) GetApiTokenOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ApiToken.Get(), o.ApiToken.IsSet()
}

// SetApiToken sets field value
func (o *FlashBladeRegistrationInfo) SetApiToken(v string) {
	o.ApiToken.Set(&v)
}

func (o FlashBladeRegistrationInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ip.IsSet() {
		toSerialize["ip"] = o.Ip.Get()
	}
	if true {
		toSerialize["apiToken"] = o.ApiToken.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableFlashBladeRegistrationInfo struct {
	value *FlashBladeRegistrationInfo
	isSet bool
}

func (v NullableFlashBladeRegistrationInfo) Get() *FlashBladeRegistrationInfo {
	return v.value
}

func (v *NullableFlashBladeRegistrationInfo) Set(val *FlashBladeRegistrationInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableFlashBladeRegistrationInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableFlashBladeRegistrationInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlashBladeRegistrationInfo(val *FlashBladeRegistrationInfo) *NullableFlashBladeRegistrationInfo {
	return &NullableFlashBladeRegistrationInfo{value: val, isSet: true}
}

func (v NullableFlashBladeRegistrationInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlashBladeRegistrationInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o FlashBladeRegistrationInfo) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}