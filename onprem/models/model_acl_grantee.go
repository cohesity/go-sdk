/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// AclGrantee Specifies an ACL grantee.
type AclGrantee struct {
	// Specifies the grantee type.
	Type NullableString `json:"type"`
	// Specifies the user id of the grantee.
	UserId NullableString `json:"userId,omitempty"`
}

// NewAclGrantee instantiates a new AclGrantee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAclGrantee(type_ NullableString) *AclGrantee {
	this := AclGrantee{}
	this.Type = type_
	return &this
}

// NewAclGranteeWithDefaults instantiates a new AclGrantee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAclGranteeWithDefaults() *AclGrantee {
	this := AclGrantee{}
	return &this
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AclGrantee) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}

	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AclGrantee) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// SetType sets field value
func (o *AclGrantee) SetType(v string) {
	o.Type.Set(&v)
}

// GetUserId returns the UserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AclGrantee) GetUserId() string {
	if o == nil || o.UserId.Get() == nil {
		var ret string
		return ret
	}
	return *o.UserId.Get()
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AclGrantee) GetUserIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UserId.Get(), o.UserId.IsSet()
}

// HasUserId returns a boolean if a field has been set.
func (o *AclGrantee) HasUserId() bool {
	if o != nil && o.UserId.IsSet() {
		return true
	}

	return false
}

// SetUserId gets a reference to the given NullableString and assigns it to the UserId field.
func (o *AclGrantee) SetUserId(v string) {
	o.UserId.Set(&v)
}
// SetUserIdNil sets the value for UserId to be an explicit nil
func (o *AclGrantee) SetUserIdNil() {
	o.UserId.Set(nil)
}

// UnsetUserId ensures that no value is present for UserId, not even an explicit nil
func (o *AclGrantee) UnsetUserId() {
	o.UserId.Unset()
}

func (o AclGrantee) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type.Get()
	}
	if o.UserId.IsSet() {
		toSerialize["userId"] = o.UserId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAclGrantee struct {
	value *AclGrantee
	isSet bool
}

func (v NullableAclGrantee) Get() *AclGrantee {
	return v.value
}

func (v *NullableAclGrantee) Set(val *AclGrantee) {
	v.value = val
	v.isSet = true
}

func (v NullableAclGrantee) IsSet() bool {
	return v.isSet
}

func (v *NullableAclGrantee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAclGrantee(val *AclGrantee) *NullableAclGrantee {
	return &NullableAclGrantee{value: val, isSet: true}
}

func (v NullableAclGrantee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAclGrantee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o AclGrantee) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}