/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// AdFixedTypeParams Specifies the properties accociated to a Fixed type user id mapping.
type AdFixedTypeParams struct {
	// Specifies the fixed Unix UID, when mapping type is set to kFixed.
	Uid NullableInt64 `json:"uid"`
	// Specifies the fixed Unix GID, when mapping type is set to kFixed.
	Gid NullableInt64 `json:"gid"`
}

// NewAdFixedTypeParams instantiates a new AdFixedTypeParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdFixedTypeParams(uid NullableInt64, gid NullableInt64) *AdFixedTypeParams {
	this := AdFixedTypeParams{}
	this.Uid = uid
	this.Gid = gid
	return &this
}

// NewAdFixedTypeParamsWithDefaults instantiates a new AdFixedTypeParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdFixedTypeParamsWithDefaults() *AdFixedTypeParams {
	this := AdFixedTypeParams{}
	return &this
}

// GetUid returns the Uid field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *AdFixedTypeParams) GetUid() int64 {
	if o == nil || o.Uid.Get() == nil {
		var ret int64
		return ret
	}

	return *o.Uid.Get()
}

// GetUidOk returns a tuple with the Uid field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdFixedTypeParams) GetUidOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Uid.Get(), o.Uid.IsSet()
}

// SetUid sets field value
func (o *AdFixedTypeParams) SetUid(v int64) {
	o.Uid.Set(&v)
}

// GetGid returns the Gid field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *AdFixedTypeParams) GetGid() int64 {
	if o == nil || o.Gid.Get() == nil {
		var ret int64
		return ret
	}

	return *o.Gid.Get()
}

// GetGidOk returns a tuple with the Gid field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdFixedTypeParams) GetGidOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Gid.Get(), o.Gid.IsSet()
}

// SetGid sets field value
func (o *AdFixedTypeParams) SetGid(v int64) {
	o.Gid.Set(&v)
}

func (o AdFixedTypeParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["uid"] = o.Uid.Get()
	}
	if true {
		toSerialize["gid"] = o.Gid.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAdFixedTypeParams struct {
	value *AdFixedTypeParams
	isSet bool
}

func (v NullableAdFixedTypeParams) Get() *AdFixedTypeParams {
	return v.value
}

func (v *NullableAdFixedTypeParams) Set(val *AdFixedTypeParams) {
	v.value = val
	v.isSet = true
}

func (v NullableAdFixedTypeParams) IsSet() bool {
	return v.isSet
}

func (v *NullableAdFixedTypeParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdFixedTypeParams(val *AdFixedTypeParams) *NullableAdFixedTypeParams {
	return &NullableAdFixedTypeParams{value: val, isSet: true}
}

func (v NullableAdFixedTypeParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdFixedTypeParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o AdFixedTypeParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}