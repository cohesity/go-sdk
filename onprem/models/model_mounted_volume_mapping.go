/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// MountedVolumeMapping Specifies the mapping of original volume and mounted volume after Instant Volume Mount.
type MountedVolumeMapping struct {
	// Specifies the name of the original volume.
	OriginalVolume NullableString `json:"originalVolume,omitempty"`
	// Specifies the name of the point where the volume is mounted.
	MountedVolume NullableString `json:"mountedVolume,omitempty"`
	// Specifies the type of the file system of the volume.
	FileSystemType NullableString `json:"fileSystemType,omitempty"`
}

// NewMountedVolumeMapping instantiates a new MountedVolumeMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMountedVolumeMapping() *MountedVolumeMapping {
	this := MountedVolumeMapping{}
	return &this
}

// NewMountedVolumeMappingWithDefaults instantiates a new MountedVolumeMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMountedVolumeMappingWithDefaults() *MountedVolumeMapping {
	this := MountedVolumeMapping{}
	return &this
}

// GetOriginalVolume returns the OriginalVolume field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MountedVolumeMapping) GetOriginalVolume() string {
	if o == nil || o.OriginalVolume.Get() == nil {
		var ret string
		return ret
	}
	return *o.OriginalVolume.Get()
}

// GetOriginalVolumeOk returns a tuple with the OriginalVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MountedVolumeMapping) GetOriginalVolumeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OriginalVolume.Get(), o.OriginalVolume.IsSet()
}

// HasOriginalVolume returns a boolean if a field has been set.
func (o *MountedVolumeMapping) HasOriginalVolume() bool {
	if o != nil && o.OriginalVolume.IsSet() {
		return true
	}

	return false
}

// SetOriginalVolume gets a reference to the given NullableString and assigns it to the OriginalVolume field.
func (o *MountedVolumeMapping) SetOriginalVolume(v string) {
	o.OriginalVolume.Set(&v)
}
// SetOriginalVolumeNil sets the value for OriginalVolume to be an explicit nil
func (o *MountedVolumeMapping) SetOriginalVolumeNil() {
	o.OriginalVolume.Set(nil)
}

// UnsetOriginalVolume ensures that no value is present for OriginalVolume, not even an explicit nil
func (o *MountedVolumeMapping) UnsetOriginalVolume() {
	o.OriginalVolume.Unset()
}

// GetMountedVolume returns the MountedVolume field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MountedVolumeMapping) GetMountedVolume() string {
	if o == nil || o.MountedVolume.Get() == nil {
		var ret string
		return ret
	}
	return *o.MountedVolume.Get()
}

// GetMountedVolumeOk returns a tuple with the MountedVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MountedVolumeMapping) GetMountedVolumeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MountedVolume.Get(), o.MountedVolume.IsSet()
}

// HasMountedVolume returns a boolean if a field has been set.
func (o *MountedVolumeMapping) HasMountedVolume() bool {
	if o != nil && o.MountedVolume.IsSet() {
		return true
	}

	return false
}

// SetMountedVolume gets a reference to the given NullableString and assigns it to the MountedVolume field.
func (o *MountedVolumeMapping) SetMountedVolume(v string) {
	o.MountedVolume.Set(&v)
}
// SetMountedVolumeNil sets the value for MountedVolume to be an explicit nil
func (o *MountedVolumeMapping) SetMountedVolumeNil() {
	o.MountedVolume.Set(nil)
}

// UnsetMountedVolume ensures that no value is present for MountedVolume, not even an explicit nil
func (o *MountedVolumeMapping) UnsetMountedVolume() {
	o.MountedVolume.Unset()
}

// GetFileSystemType returns the FileSystemType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MountedVolumeMapping) GetFileSystemType() string {
	if o == nil || o.FileSystemType.Get() == nil {
		var ret string
		return ret
	}
	return *o.FileSystemType.Get()
}

// GetFileSystemTypeOk returns a tuple with the FileSystemType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MountedVolumeMapping) GetFileSystemTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FileSystemType.Get(), o.FileSystemType.IsSet()
}

// HasFileSystemType returns a boolean if a field has been set.
func (o *MountedVolumeMapping) HasFileSystemType() bool {
	if o != nil && o.FileSystemType.IsSet() {
		return true
	}

	return false
}

// SetFileSystemType gets a reference to the given NullableString and assigns it to the FileSystemType field.
func (o *MountedVolumeMapping) SetFileSystemType(v string) {
	o.FileSystemType.Set(&v)
}
// SetFileSystemTypeNil sets the value for FileSystemType to be an explicit nil
func (o *MountedVolumeMapping) SetFileSystemTypeNil() {
	o.FileSystemType.Set(nil)
}

// UnsetFileSystemType ensures that no value is present for FileSystemType, not even an explicit nil
func (o *MountedVolumeMapping) UnsetFileSystemType() {
	o.FileSystemType.Unset()
}

func (o MountedVolumeMapping) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OriginalVolume.IsSet() {
		toSerialize["originalVolume"] = o.OriginalVolume.Get()
	}
	if o.MountedVolume.IsSet() {
		toSerialize["mountedVolume"] = o.MountedVolume.Get()
	}
	if o.FileSystemType.IsSet() {
		toSerialize["fileSystemType"] = o.FileSystemType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMountedVolumeMapping struct {
	value *MountedVolumeMapping
	isSet bool
}

func (v NullableMountedVolumeMapping) Get() *MountedVolumeMapping {
	return v.value
}

func (v *NullableMountedVolumeMapping) Set(val *MountedVolumeMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableMountedVolumeMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableMountedVolumeMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMountedVolumeMapping(val *MountedVolumeMapping) *NullableMountedVolumeMapping {
	return &NullableMountedVolumeMapping{value: val, isSet: true}
}

func (v NullableMountedVolumeMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMountedVolumeMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o MountedVolumeMapping) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}