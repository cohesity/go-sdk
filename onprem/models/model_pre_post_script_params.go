/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// PrePostScriptParams Specifies the params for pre and post scripts.
type PrePostScriptParams struct {
	PreScript *CommonPreBackupScriptParams `json:"preScript,omitempty"`
	PostScript *CommonPostBackupScriptParams `json:"postScript,omitempty"`
}

// NewPrePostScriptParams instantiates a new PrePostScriptParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrePostScriptParams() *PrePostScriptParams {
	this := PrePostScriptParams{}
	return &this
}

// NewPrePostScriptParamsWithDefaults instantiates a new PrePostScriptParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrePostScriptParamsWithDefaults() *PrePostScriptParams {
	this := PrePostScriptParams{}
	return &this
}

// GetPreScript returns the PreScript field value if set, zero value otherwise.
func (o *PrePostScriptParams) GetPreScript() CommonPreBackupScriptParams {
	if o == nil || o.PreScript == nil {
		var ret CommonPreBackupScriptParams
		return ret
	}
	return *o.PreScript
}

// GetPreScriptOk returns a tuple with the PreScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrePostScriptParams) GetPreScriptOk() (*CommonPreBackupScriptParams, bool) {
	if o == nil || o.PreScript == nil {
		return nil, false
	}
	return o.PreScript, true
}

// HasPreScript returns a boolean if a field has been set.
func (o *PrePostScriptParams) HasPreScript() bool {
	if o != nil && o.PreScript != nil {
		return true
	}

	return false
}

// SetPreScript gets a reference to the given CommonPreBackupScriptParams and assigns it to the PreScript field.
func (o *PrePostScriptParams) SetPreScript(v CommonPreBackupScriptParams) {
	o.PreScript = &v
}

// GetPostScript returns the PostScript field value if set, zero value otherwise.
func (o *PrePostScriptParams) GetPostScript() CommonPostBackupScriptParams {
	if o == nil || o.PostScript == nil {
		var ret CommonPostBackupScriptParams
		return ret
	}
	return *o.PostScript
}

// GetPostScriptOk returns a tuple with the PostScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrePostScriptParams) GetPostScriptOk() (*CommonPostBackupScriptParams, bool) {
	if o == nil || o.PostScript == nil {
		return nil, false
	}
	return o.PostScript, true
}

// HasPostScript returns a boolean if a field has been set.
func (o *PrePostScriptParams) HasPostScript() bool {
	if o != nil && o.PostScript != nil {
		return true
	}

	return false
}

// SetPostScript gets a reference to the given CommonPostBackupScriptParams and assigns it to the PostScript field.
func (o *PrePostScriptParams) SetPostScript(v CommonPostBackupScriptParams) {
	o.PostScript = &v
}

func (o PrePostScriptParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PreScript != nil {
		toSerialize["preScript"] = o.PreScript
	}
	if o.PostScript != nil {
		toSerialize["postScript"] = o.PostScript
	}
	return json.Marshal(toSerialize)
}

type NullablePrePostScriptParams struct {
	value *PrePostScriptParams
	isSet bool
}

func (v NullablePrePostScriptParams) Get() *PrePostScriptParams {
	return v.value
}

func (v *NullablePrePostScriptParams) Set(val *PrePostScriptParams) {
	v.value = val
	v.isSet = true
}

func (v NullablePrePostScriptParams) IsSet() bool {
	return v.isSet
}

func (v *NullablePrePostScriptParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrePostScriptParams(val *PrePostScriptParams) *NullablePrePostScriptParams {
	return &NullablePrePostScriptParams{value: val, isSet: true}
}

func (v NullablePrePostScriptParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrePostScriptParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o PrePostScriptParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}