/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// ProgressSummary Specifies the progress summary.
type ProgressSummary struct {
	// Specifies the successful count.
	Success NullableInt64 `json:"success,omitempty"`
	// Specifies the failed count.
	Failed NullableInt64 `json:"failed,omitempty"`
	// Specifies the total count.
	Total NullableInt64 `json:"total,omitempty"`
}

// NewProgressSummary instantiates a new ProgressSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProgressSummary() *ProgressSummary {
	this := ProgressSummary{}
	return &this
}

// NewProgressSummaryWithDefaults instantiates a new ProgressSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProgressSummaryWithDefaults() *ProgressSummary {
	this := ProgressSummary{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProgressSummary) GetSuccess() int64 {
	if o == nil || o.Success.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Success.Get()
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProgressSummary) GetSuccessOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Success.Get(), o.Success.IsSet()
}

// HasSuccess returns a boolean if a field has been set.
func (o *ProgressSummary) HasSuccess() bool {
	if o != nil && o.Success.IsSet() {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given NullableInt64 and assigns it to the Success field.
func (o *ProgressSummary) SetSuccess(v int64) {
	o.Success.Set(&v)
}
// SetSuccessNil sets the value for Success to be an explicit nil
func (o *ProgressSummary) SetSuccessNil() {
	o.Success.Set(nil)
}

// UnsetSuccess ensures that no value is present for Success, not even an explicit nil
func (o *ProgressSummary) UnsetSuccess() {
	o.Success.Unset()
}

// GetFailed returns the Failed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProgressSummary) GetFailed() int64 {
	if o == nil || o.Failed.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Failed.Get()
}

// GetFailedOk returns a tuple with the Failed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProgressSummary) GetFailedOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Failed.Get(), o.Failed.IsSet()
}

// HasFailed returns a boolean if a field has been set.
func (o *ProgressSummary) HasFailed() bool {
	if o != nil && o.Failed.IsSet() {
		return true
	}

	return false
}

// SetFailed gets a reference to the given NullableInt64 and assigns it to the Failed field.
func (o *ProgressSummary) SetFailed(v int64) {
	o.Failed.Set(&v)
}
// SetFailedNil sets the value for Failed to be an explicit nil
func (o *ProgressSummary) SetFailedNil() {
	o.Failed.Set(nil)
}

// UnsetFailed ensures that no value is present for Failed, not even an explicit nil
func (o *ProgressSummary) UnsetFailed() {
	o.Failed.Unset()
}

// GetTotal returns the Total field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProgressSummary) GetTotal() int64 {
	if o == nil || o.Total.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Total.Get()
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProgressSummary) GetTotalOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Total.Get(), o.Total.IsSet()
}

// HasTotal returns a boolean if a field has been set.
func (o *ProgressSummary) HasTotal() bool {
	if o != nil && o.Total.IsSet() {
		return true
	}

	return false
}

// SetTotal gets a reference to the given NullableInt64 and assigns it to the Total field.
func (o *ProgressSummary) SetTotal(v int64) {
	o.Total.Set(&v)
}
// SetTotalNil sets the value for Total to be an explicit nil
func (o *ProgressSummary) SetTotalNil() {
	o.Total.Set(nil)
}

// UnsetTotal ensures that no value is present for Total, not even an explicit nil
func (o *ProgressSummary) UnsetTotal() {
	o.Total.Unset()
}

func (o ProgressSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Success.IsSet() {
		toSerialize["success"] = o.Success.Get()
	}
	if o.Failed.IsSet() {
		toSerialize["failed"] = o.Failed.Get()
	}
	if o.Total.IsSet() {
		toSerialize["total"] = o.Total.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableProgressSummary struct {
	value *ProgressSummary
	isSet bool
}

func (v NullableProgressSummary) Get() *ProgressSummary {
	return v.value
}

func (v *NullableProgressSummary) Set(val *ProgressSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableProgressSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableProgressSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProgressSummary(val *ProgressSummary) *NullableProgressSummary {
	return &NullableProgressSummary{value: val, isSet: true}
}

func (v NullableProgressSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProgressSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o ProgressSummary) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}