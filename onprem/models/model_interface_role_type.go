/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// InterfaceRoleType Role of a network interface.
type InterfaceRoleType struct {
	// Specifies the network interface role.
	InterfaceRoleType *string `json:"interfaceRoleType,omitempty"`
}

// NewInterfaceRoleType instantiates a new InterfaceRoleType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterfaceRoleType() *InterfaceRoleType {
	this := InterfaceRoleType{}
	return &this
}

// NewInterfaceRoleTypeWithDefaults instantiates a new InterfaceRoleType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterfaceRoleTypeWithDefaults() *InterfaceRoleType {
	this := InterfaceRoleType{}
	return &this
}

// GetInterfaceRoleType returns the InterfaceRoleType field value if set, zero value otherwise.
func (o *InterfaceRoleType) GetInterfaceRoleType() string {
	if o == nil || o.InterfaceRoleType == nil {
		var ret string
		return ret
	}
	return *o.InterfaceRoleType
}

// GetInterfaceRoleTypeOk returns a tuple with the InterfaceRoleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceRoleType) GetInterfaceRoleTypeOk() (*string, bool) {
	if o == nil || o.InterfaceRoleType == nil {
		return nil, false
	}
	return o.InterfaceRoleType, true
}

// HasInterfaceRoleType returns a boolean if a field has been set.
func (o *InterfaceRoleType) HasInterfaceRoleType() bool {
	if o != nil && o.InterfaceRoleType != nil {
		return true
	}

	return false
}

// SetInterfaceRoleType gets a reference to the given string and assigns it to the InterfaceRoleType field.
func (o *InterfaceRoleType) SetInterfaceRoleType(v string) {
	o.InterfaceRoleType = &v
}

func (o InterfaceRoleType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.InterfaceRoleType != nil {
		toSerialize["interfaceRoleType"] = o.InterfaceRoleType
	}
	return json.Marshal(toSerialize)
}

type NullableInterfaceRoleType struct {
	value *InterfaceRoleType
	isSet bool
}

func (v NullableInterfaceRoleType) Get() *InterfaceRoleType {
	return v.value
}

func (v *NullableInterfaceRoleType) Set(val *InterfaceRoleType) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceRoleType) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceRoleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceRoleType(val *InterfaceRoleType) *NullableInterfaceRoleType {
	return &NullableInterfaceRoleType{value: val, isSet: true}
}

func (v NullableInterfaceRoleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceRoleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o InterfaceRoleType) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}