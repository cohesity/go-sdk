/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// DataTieringAnalysisGroupAllOf struct for DataTieringAnalysisGroupAllOf
type DataTieringAnalysisGroupAllOf struct {
	// Specifies the ID of the data tiering analysis group.
	Id NullableString `json:"id,omitempty"`
	LastRun *DataTieringAnalysisGroupRun `json:"lastRun,omitempty"`
}

// NewDataTieringAnalysisGroupAllOf instantiates a new DataTieringAnalysisGroupAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataTieringAnalysisGroupAllOf() *DataTieringAnalysisGroupAllOf {
	this := DataTieringAnalysisGroupAllOf{}
	return &this
}

// NewDataTieringAnalysisGroupAllOfWithDefaults instantiates a new DataTieringAnalysisGroupAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataTieringAnalysisGroupAllOfWithDefaults() *DataTieringAnalysisGroupAllOf {
	this := DataTieringAnalysisGroupAllOf{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTieringAnalysisGroupAllOf) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTieringAnalysisGroupAllOf) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *DataTieringAnalysisGroupAllOf) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *DataTieringAnalysisGroupAllOf) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *DataTieringAnalysisGroupAllOf) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *DataTieringAnalysisGroupAllOf) UnsetId() {
	o.Id.Unset()
}

// GetLastRun returns the LastRun field value if set, zero value otherwise.
func (o *DataTieringAnalysisGroupAllOf) GetLastRun() DataTieringAnalysisGroupRun {
	if o == nil || o.LastRun == nil {
		var ret DataTieringAnalysisGroupRun
		return ret
	}
	return *o.LastRun
}

// GetLastRunOk returns a tuple with the LastRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataTieringAnalysisGroupAllOf) GetLastRunOk() (*DataTieringAnalysisGroupRun, bool) {
	if o == nil || o.LastRun == nil {
		return nil, false
	}
	return o.LastRun, true
}

// HasLastRun returns a boolean if a field has been set.
func (o *DataTieringAnalysisGroupAllOf) HasLastRun() bool {
	if o != nil && o.LastRun != nil {
		return true
	}

	return false
}

// SetLastRun gets a reference to the given DataTieringAnalysisGroupRun and assigns it to the LastRun field.
func (o *DataTieringAnalysisGroupAllOf) SetLastRun(v DataTieringAnalysisGroupRun) {
	o.LastRun = &v
}

func (o DataTieringAnalysisGroupAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.LastRun != nil {
		toSerialize["lastRun"] = o.LastRun
	}
	return json.Marshal(toSerialize)
}

type NullableDataTieringAnalysisGroupAllOf struct {
	value *DataTieringAnalysisGroupAllOf
	isSet bool
}

func (v NullableDataTieringAnalysisGroupAllOf) Get() *DataTieringAnalysisGroupAllOf {
	return v.value
}

func (v *NullableDataTieringAnalysisGroupAllOf) Set(val *DataTieringAnalysisGroupAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDataTieringAnalysisGroupAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDataTieringAnalysisGroupAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataTieringAnalysisGroupAllOf(val *DataTieringAnalysisGroupAllOf) *NullableDataTieringAnalysisGroupAllOf {
	return &NullableDataTieringAnalysisGroupAllOf{value: val, isSet: true}
}

func (v NullableDataTieringAnalysisGroupAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataTieringAnalysisGroupAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o DataTieringAnalysisGroupAllOf) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}