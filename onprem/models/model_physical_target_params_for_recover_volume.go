/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// PhysicalTargetParamsForRecoverVolume Specifies the parameters for a physical recovery target.
type PhysicalTargetParamsForRecoverVolume struct {
	// Specifies the target entity where the volumes are being mounted.
	MountTarget NullableRecoveryObjectIdentifier `json:"mountTarget"`
	// Specifies the mapping from source volumes to destination volumes.
	VolumeMapping []RecoverVolumeMapping `json:"volumeMapping"`
	// Specifies whether volume would be dismounted first during LockVolume failure. If not specified, default is false.
	ForceUnmountVolume NullableBool `json:"forceUnmountVolume,omitempty"`
	// Specifies VLAN Params associated with the recovered. If this is not specified, then the VLAN settings will be automatically selected from one of the below options: a. If VLANs are configured on Cohesity, then the VLAN host/VIP will be automatically based on the client's (e.g. ESXI host) IP address. b. If VLANs are not configured on Cohesity, then the partition hostname or VIPs will be used for Recovery.
	VlanConfig NullableRecoveryVlanConfig `json:"vlanConfig,omitempty"`
}

// NewPhysicalTargetParamsForRecoverVolume instantiates a new PhysicalTargetParamsForRecoverVolume object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhysicalTargetParamsForRecoverVolume(mountTarget NullableRecoveryObjectIdentifier, volumeMapping []RecoverVolumeMapping) *PhysicalTargetParamsForRecoverVolume {
	this := PhysicalTargetParamsForRecoverVolume{}
	this.MountTarget = mountTarget
	this.VolumeMapping = volumeMapping
	return &this
}

// NewPhysicalTargetParamsForRecoverVolumeWithDefaults instantiates a new PhysicalTargetParamsForRecoverVolume object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhysicalTargetParamsForRecoverVolumeWithDefaults() *PhysicalTargetParamsForRecoverVolume {
	this := PhysicalTargetParamsForRecoverVolume{}
	return &this
}

// GetMountTarget returns the MountTarget field value
// If the value is explicit nil, the zero value for RecoveryObjectIdentifier will be returned
func (o *PhysicalTargetParamsForRecoverVolume) GetMountTarget() RecoveryObjectIdentifier {
	if o == nil || o.MountTarget.Get() == nil {
		var ret RecoveryObjectIdentifier
		return ret
	}

	return *o.MountTarget.Get()
}

// GetMountTargetOk returns a tuple with the MountTarget field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalTargetParamsForRecoverVolume) GetMountTargetOk() (*RecoveryObjectIdentifier, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MountTarget.Get(), o.MountTarget.IsSet()
}

// SetMountTarget sets field value
func (o *PhysicalTargetParamsForRecoverVolume) SetMountTarget(v RecoveryObjectIdentifier) {
	o.MountTarget.Set(&v)
}

// GetVolumeMapping returns the VolumeMapping field value
// If the value is explicit nil, the zero value for []RecoverVolumeMapping will be returned
func (o *PhysicalTargetParamsForRecoverVolume) GetVolumeMapping() []RecoverVolumeMapping {
	if o == nil {
		var ret []RecoverVolumeMapping
		return ret
	}

	return o.VolumeMapping
}

// GetVolumeMappingOk returns a tuple with the VolumeMapping field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalTargetParamsForRecoverVolume) GetVolumeMappingOk() (*[]RecoverVolumeMapping, bool) {
	if o == nil || o.VolumeMapping == nil {
		return nil, false
	}
	return &o.VolumeMapping, true
}

// SetVolumeMapping sets field value
func (o *PhysicalTargetParamsForRecoverVolume) SetVolumeMapping(v []RecoverVolumeMapping) {
	o.VolumeMapping = v
}

// GetForceUnmountVolume returns the ForceUnmountVolume field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalTargetParamsForRecoverVolume) GetForceUnmountVolume() bool {
	if o == nil || o.ForceUnmountVolume.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ForceUnmountVolume.Get()
}

// GetForceUnmountVolumeOk returns a tuple with the ForceUnmountVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalTargetParamsForRecoverVolume) GetForceUnmountVolumeOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ForceUnmountVolume.Get(), o.ForceUnmountVolume.IsSet()
}

// HasForceUnmountVolume returns a boolean if a field has been set.
func (o *PhysicalTargetParamsForRecoverVolume) HasForceUnmountVolume() bool {
	if o != nil && o.ForceUnmountVolume.IsSet() {
		return true
	}

	return false
}

// SetForceUnmountVolume gets a reference to the given NullableBool and assigns it to the ForceUnmountVolume field.
func (o *PhysicalTargetParamsForRecoverVolume) SetForceUnmountVolume(v bool) {
	o.ForceUnmountVolume.Set(&v)
}
// SetForceUnmountVolumeNil sets the value for ForceUnmountVolume to be an explicit nil
func (o *PhysicalTargetParamsForRecoverVolume) SetForceUnmountVolumeNil() {
	o.ForceUnmountVolume.Set(nil)
}

// UnsetForceUnmountVolume ensures that no value is present for ForceUnmountVolume, not even an explicit nil
func (o *PhysicalTargetParamsForRecoverVolume) UnsetForceUnmountVolume() {
	o.ForceUnmountVolume.Unset()
}

// GetVlanConfig returns the VlanConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalTargetParamsForRecoverVolume) GetVlanConfig() RecoveryVlanConfig {
	if o == nil || o.VlanConfig.Get() == nil {
		var ret RecoveryVlanConfig
		return ret
	}
	return *o.VlanConfig.Get()
}

// GetVlanConfigOk returns a tuple with the VlanConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalTargetParamsForRecoverVolume) GetVlanConfigOk() (*RecoveryVlanConfig, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VlanConfig.Get(), o.VlanConfig.IsSet()
}

// HasVlanConfig returns a boolean if a field has been set.
func (o *PhysicalTargetParamsForRecoverVolume) HasVlanConfig() bool {
	if o != nil && o.VlanConfig.IsSet() {
		return true
	}

	return false
}

// SetVlanConfig gets a reference to the given NullableRecoveryVlanConfig and assigns it to the VlanConfig field.
func (o *PhysicalTargetParamsForRecoverVolume) SetVlanConfig(v RecoveryVlanConfig) {
	o.VlanConfig.Set(&v)
}
// SetVlanConfigNil sets the value for VlanConfig to be an explicit nil
func (o *PhysicalTargetParamsForRecoverVolume) SetVlanConfigNil() {
	o.VlanConfig.Set(nil)
}

// UnsetVlanConfig ensures that no value is present for VlanConfig, not even an explicit nil
func (o *PhysicalTargetParamsForRecoverVolume) UnsetVlanConfig() {
	o.VlanConfig.Unset()
}

func (o PhysicalTargetParamsForRecoverVolume) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["mountTarget"] = o.MountTarget.Get()
	}
	if o.VolumeMapping != nil {
		toSerialize["volumeMapping"] = o.VolumeMapping
	}
	if o.ForceUnmountVolume.IsSet() {
		toSerialize["forceUnmountVolume"] = o.ForceUnmountVolume.Get()
	}
	if o.VlanConfig.IsSet() {
		toSerialize["vlanConfig"] = o.VlanConfig.Get()
	}
	return json.Marshal(toSerialize)
}

type NullablePhysicalTargetParamsForRecoverVolume struct {
	value *PhysicalTargetParamsForRecoverVolume
	isSet bool
}

func (v NullablePhysicalTargetParamsForRecoverVolume) Get() *PhysicalTargetParamsForRecoverVolume {
	return v.value
}

func (v *NullablePhysicalTargetParamsForRecoverVolume) Set(val *PhysicalTargetParamsForRecoverVolume) {
	v.value = val
	v.isSet = true
}

func (v NullablePhysicalTargetParamsForRecoverVolume) IsSet() bool {
	return v.isSet
}

func (v *NullablePhysicalTargetParamsForRecoverVolume) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhysicalTargetParamsForRecoverVolume(val *PhysicalTargetParamsForRecoverVolume) *NullablePhysicalTargetParamsForRecoverVolume {
	return &NullablePhysicalTargetParamsForRecoverVolume{value: val, isSet: true}
}

func (v NullablePhysicalTargetParamsForRecoverVolume) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhysicalTargetParamsForRecoverVolume) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o PhysicalTargetParamsForRecoverVolume) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}