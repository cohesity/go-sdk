/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// OraclePdbRestoreParams Specifies information about the list of pdbs to be restored.
type OraclePdbRestoreParams struct {
	// Specifies if the PDB should be ignored if a PDB already exists with same name.
	DropDuplicatePDB NullableBool `json:"dropDuplicatePDB,omitempty"`
	// Specifies list of PDB objects to restore.
	PdbObjects []OraclePdbObjectInfo `json:"pdbObjects,omitempty"`
	// Specifies if pdbs should be restored to an existing CDB.
	RestoreToExistingCdb NullableBool `json:"restoreToExistingCdb,omitempty"`
}

// NewOraclePdbRestoreParams instantiates a new OraclePdbRestoreParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOraclePdbRestoreParams() *OraclePdbRestoreParams {
	this := OraclePdbRestoreParams{}
	return &this
}

// NewOraclePdbRestoreParamsWithDefaults instantiates a new OraclePdbRestoreParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOraclePdbRestoreParamsWithDefaults() *OraclePdbRestoreParams {
	this := OraclePdbRestoreParams{}
	return &this
}

// GetDropDuplicatePDB returns the DropDuplicatePDB field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OraclePdbRestoreParams) GetDropDuplicatePDB() bool {
	if o == nil || o.DropDuplicatePDB.Get() == nil {
		var ret bool
		return ret
	}
	return *o.DropDuplicatePDB.Get()
}

// GetDropDuplicatePDBOk returns a tuple with the DropDuplicatePDB field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OraclePdbRestoreParams) GetDropDuplicatePDBOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DropDuplicatePDB.Get(), o.DropDuplicatePDB.IsSet()
}

// HasDropDuplicatePDB returns a boolean if a field has been set.
func (o *OraclePdbRestoreParams) HasDropDuplicatePDB() bool {
	if o != nil && o.DropDuplicatePDB.IsSet() {
		return true
	}

	return false
}

// SetDropDuplicatePDB gets a reference to the given NullableBool and assigns it to the DropDuplicatePDB field.
func (o *OraclePdbRestoreParams) SetDropDuplicatePDB(v bool) {
	o.DropDuplicatePDB.Set(&v)
}
// SetDropDuplicatePDBNil sets the value for DropDuplicatePDB to be an explicit nil
func (o *OraclePdbRestoreParams) SetDropDuplicatePDBNil() {
	o.DropDuplicatePDB.Set(nil)
}

// UnsetDropDuplicatePDB ensures that no value is present for DropDuplicatePDB, not even an explicit nil
func (o *OraclePdbRestoreParams) UnsetDropDuplicatePDB() {
	o.DropDuplicatePDB.Unset()
}

// GetPdbObjects returns the PdbObjects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OraclePdbRestoreParams) GetPdbObjects() []OraclePdbObjectInfo {
	if o == nil  {
		var ret []OraclePdbObjectInfo
		return ret
	}
	return o.PdbObjects
}

// GetPdbObjectsOk returns a tuple with the PdbObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OraclePdbRestoreParams) GetPdbObjectsOk() (*[]OraclePdbObjectInfo, bool) {
	if o == nil || o.PdbObjects == nil {
		return nil, false
	}
	return &o.PdbObjects, true
}

// HasPdbObjects returns a boolean if a field has been set.
func (o *OraclePdbRestoreParams) HasPdbObjects() bool {
	if o != nil && o.PdbObjects != nil {
		return true
	}

	return false
}

// SetPdbObjects gets a reference to the given []OraclePdbObjectInfo and assigns it to the PdbObjects field.
func (o *OraclePdbRestoreParams) SetPdbObjects(v []OraclePdbObjectInfo) {
	o.PdbObjects = v
}

// GetRestoreToExistingCdb returns the RestoreToExistingCdb field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OraclePdbRestoreParams) GetRestoreToExistingCdb() bool {
	if o == nil || o.RestoreToExistingCdb.Get() == nil {
		var ret bool
		return ret
	}
	return *o.RestoreToExistingCdb.Get()
}

// GetRestoreToExistingCdbOk returns a tuple with the RestoreToExistingCdb field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OraclePdbRestoreParams) GetRestoreToExistingCdbOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RestoreToExistingCdb.Get(), o.RestoreToExistingCdb.IsSet()
}

// HasRestoreToExistingCdb returns a boolean if a field has been set.
func (o *OraclePdbRestoreParams) HasRestoreToExistingCdb() bool {
	if o != nil && o.RestoreToExistingCdb.IsSet() {
		return true
	}

	return false
}

// SetRestoreToExistingCdb gets a reference to the given NullableBool and assigns it to the RestoreToExistingCdb field.
func (o *OraclePdbRestoreParams) SetRestoreToExistingCdb(v bool) {
	o.RestoreToExistingCdb.Set(&v)
}
// SetRestoreToExistingCdbNil sets the value for RestoreToExistingCdb to be an explicit nil
func (o *OraclePdbRestoreParams) SetRestoreToExistingCdbNil() {
	o.RestoreToExistingCdb.Set(nil)
}

// UnsetRestoreToExistingCdb ensures that no value is present for RestoreToExistingCdb, not even an explicit nil
func (o *OraclePdbRestoreParams) UnsetRestoreToExistingCdb() {
	o.RestoreToExistingCdb.Unset()
}

func (o OraclePdbRestoreParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DropDuplicatePDB.IsSet() {
		toSerialize["dropDuplicatePDB"] = o.DropDuplicatePDB.Get()
	}
	if o.PdbObjects != nil {
		toSerialize["pdbObjects"] = o.PdbObjects
	}
	if o.RestoreToExistingCdb.IsSet() {
		toSerialize["restoreToExistingCdb"] = o.RestoreToExistingCdb.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableOraclePdbRestoreParams struct {
	value *OraclePdbRestoreParams
	isSet bool
}

func (v NullableOraclePdbRestoreParams) Get() *OraclePdbRestoreParams {
	return v.value
}

func (v *NullableOraclePdbRestoreParams) Set(val *OraclePdbRestoreParams) {
	v.value = val
	v.isSet = true
}

func (v NullableOraclePdbRestoreParams) IsSet() bool {
	return v.isSet
}

func (v *NullableOraclePdbRestoreParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOraclePdbRestoreParams(val *OraclePdbRestoreParams) *NullableOraclePdbRestoreParams {
	return &NullableOraclePdbRestoreParams{value: val, isSet: true}
}

func (v NullableOraclePdbRestoreParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOraclePdbRestoreParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o OraclePdbRestoreParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}