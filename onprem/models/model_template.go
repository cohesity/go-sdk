/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// Template Description of the view template.
type Template struct {
	// Specifies an id of the view template.
	Id NullableInt64 `json:"id,omitempty"`
	// Specifies the name of the view template.
	Name NullableString `json:"name,omitempty"`
	// Specifies whether to enable dedup in storage domain.
	Dedup NullableBool `json:"dedup,omitempty"`
	// Specifies whether to enable compression in storage domain.
	Compress NullableBool `json:"compress,omitempty"`
	// Specifies if the tempate is custom or static.
	IsDefault NullableBool `json:"isDefault,omitempty"`
	// Used for uniquely indentifying a default template.
	DefaultTemplateName NullableString `json:"defaultTemplateName,omitempty"`
	// Specifies the parameters which is used to create the view. No field is required.
	ViewParams *CreateView `json:"viewParams,omitempty"`
}

// NewTemplate instantiates a new Template object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplate() *Template {
	this := Template{}
	return &this
}

// NewTemplateWithDefaults instantiates a new Template object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateWithDefaults() *Template {
	this := Template{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Template) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Template) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *Template) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *Template) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *Template) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *Template) UnsetId() {
	o.Id.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Template) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Template) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Template) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *Template) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *Template) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Template) UnsetName() {
	o.Name.Unset()
}

// GetDedup returns the Dedup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Template) GetDedup() bool {
	if o == nil || o.Dedup.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Dedup.Get()
}

// GetDedupOk returns a tuple with the Dedup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Template) GetDedupOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Dedup.Get(), o.Dedup.IsSet()
}

// HasDedup returns a boolean if a field has been set.
func (o *Template) HasDedup() bool {
	if o != nil && o.Dedup.IsSet() {
		return true
	}

	return false
}

// SetDedup gets a reference to the given NullableBool and assigns it to the Dedup field.
func (o *Template) SetDedup(v bool) {
	o.Dedup.Set(&v)
}
// SetDedupNil sets the value for Dedup to be an explicit nil
func (o *Template) SetDedupNil() {
	o.Dedup.Set(nil)
}

// UnsetDedup ensures that no value is present for Dedup, not even an explicit nil
func (o *Template) UnsetDedup() {
	o.Dedup.Unset()
}

// GetCompress returns the Compress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Template) GetCompress() bool {
	if o == nil || o.Compress.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Compress.Get()
}

// GetCompressOk returns a tuple with the Compress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Template) GetCompressOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Compress.Get(), o.Compress.IsSet()
}

// HasCompress returns a boolean if a field has been set.
func (o *Template) HasCompress() bool {
	if o != nil && o.Compress.IsSet() {
		return true
	}

	return false
}

// SetCompress gets a reference to the given NullableBool and assigns it to the Compress field.
func (o *Template) SetCompress(v bool) {
	o.Compress.Set(&v)
}
// SetCompressNil sets the value for Compress to be an explicit nil
func (o *Template) SetCompressNil() {
	o.Compress.Set(nil)
}

// UnsetCompress ensures that no value is present for Compress, not even an explicit nil
func (o *Template) UnsetCompress() {
	o.Compress.Unset()
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Template) GetIsDefault() bool {
	if o == nil || o.IsDefault.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsDefault.Get()
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Template) GetIsDefaultOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsDefault.Get(), o.IsDefault.IsSet()
}

// HasIsDefault returns a boolean if a field has been set.
func (o *Template) HasIsDefault() bool {
	if o != nil && o.IsDefault.IsSet() {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given NullableBool and assigns it to the IsDefault field.
func (o *Template) SetIsDefault(v bool) {
	o.IsDefault.Set(&v)
}
// SetIsDefaultNil sets the value for IsDefault to be an explicit nil
func (o *Template) SetIsDefaultNil() {
	o.IsDefault.Set(nil)
}

// UnsetIsDefault ensures that no value is present for IsDefault, not even an explicit nil
func (o *Template) UnsetIsDefault() {
	o.IsDefault.Unset()
}

// GetDefaultTemplateName returns the DefaultTemplateName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Template) GetDefaultTemplateName() string {
	if o == nil || o.DefaultTemplateName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DefaultTemplateName.Get()
}

// GetDefaultTemplateNameOk returns a tuple with the DefaultTemplateName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Template) GetDefaultTemplateNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DefaultTemplateName.Get(), o.DefaultTemplateName.IsSet()
}

// HasDefaultTemplateName returns a boolean if a field has been set.
func (o *Template) HasDefaultTemplateName() bool {
	if o != nil && o.DefaultTemplateName.IsSet() {
		return true
	}

	return false
}

// SetDefaultTemplateName gets a reference to the given NullableString and assigns it to the DefaultTemplateName field.
func (o *Template) SetDefaultTemplateName(v string) {
	o.DefaultTemplateName.Set(&v)
}
// SetDefaultTemplateNameNil sets the value for DefaultTemplateName to be an explicit nil
func (o *Template) SetDefaultTemplateNameNil() {
	o.DefaultTemplateName.Set(nil)
}

// UnsetDefaultTemplateName ensures that no value is present for DefaultTemplateName, not even an explicit nil
func (o *Template) UnsetDefaultTemplateName() {
	o.DefaultTemplateName.Unset()
}

// GetViewParams returns the ViewParams field value if set, zero value otherwise.
func (o *Template) GetViewParams() CreateView {
	if o == nil || o.ViewParams == nil {
		var ret CreateView
		return ret
	}
	return *o.ViewParams
}

// GetViewParamsOk returns a tuple with the ViewParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Template) GetViewParamsOk() (*CreateView, bool) {
	if o == nil || o.ViewParams == nil {
		return nil, false
	}
	return o.ViewParams, true
}

// HasViewParams returns a boolean if a field has been set.
func (o *Template) HasViewParams() bool {
	if o != nil && o.ViewParams != nil {
		return true
	}

	return false
}

// SetViewParams gets a reference to the given CreateView and assigns it to the ViewParams field.
func (o *Template) SetViewParams(v CreateView) {
	o.ViewParams = &v
}

func (o Template) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Dedup.IsSet() {
		toSerialize["dedup"] = o.Dedup.Get()
	}
	if o.Compress.IsSet() {
		toSerialize["compress"] = o.Compress.Get()
	}
	if o.IsDefault.IsSet() {
		toSerialize["isDefault"] = o.IsDefault.Get()
	}
	if o.DefaultTemplateName.IsSet() {
		toSerialize["defaultTemplateName"] = o.DefaultTemplateName.Get()
	}
	if o.ViewParams != nil {
		toSerialize["viewParams"] = o.ViewParams
	}
	return json.Marshal(toSerialize)
}

type NullableTemplate struct {
	value *Template
	isSet bool
}

func (v NullableTemplate) Get() *Template {
	return v.value
}

func (v *NullableTemplate) Set(val *Template) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplate(val *Template) *NullableTemplate {
	return &NullableTemplate{value: val, isSet: true}
}

func (v NullableTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o Template) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}