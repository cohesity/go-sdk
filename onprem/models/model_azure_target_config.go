/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// AzureTargetConfig Specifies the configuration for adding Azure as replication target
type AzureTargetConfig struct {
	// Specifies the source id of the Azure protection source registered on Cohesity cluster.
	SourceId NullableInt64 `json:"sourceId"`
	// Specifies the name of the Azure Replication target.
	Name NullableString `json:"name,omitempty"`
	// Specifies id of the Azure resource group used to filter regions in UI.
	ResourceGroup NullableInt64 `json:"resourceGroup,omitempty"`
	// Specifies name of the Azure resource group used to filter regions in UI.
	ResourceGroupName NullableString `json:"resourceGroupName,omitempty"`
	// Specifies id of the storage account of Azure replication target which will contain storage container.
	StorageAccount NullableInt32 `json:"storageAccount,omitempty"`
	// Specifies name of the storage account of Azure replication target which will contain storage container.
	StorageAccountName NullableString `json:"storageAccountName,omitempty"`
	// Specifies id of the storage container of Azure Replication target.
	StorageContainer NullableInt32 `json:"storageContainer,omitempty"`
	// Specifies name of the storage container of Azure Replication target.
	StorageContainerName NullableString `json:"storageContainerName,omitempty"`
	// Specifies id of the storage resource group of Azure Replication target.
	StorageResourceGroup NullableInt32 `json:"storageResourceGroup,omitempty"`
	// Specifies name of the storage resource group of Azure Replication target.
	StorageResourceGroupName NullableString `json:"storageResourceGroupName,omitempty"`
}

// NewAzureTargetConfig instantiates a new AzureTargetConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureTargetConfig(sourceId NullableInt64) *AzureTargetConfig {
	this := AzureTargetConfig{}
	this.SourceId = sourceId
	return &this
}

// NewAzureTargetConfigWithDefaults instantiates a new AzureTargetConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureTargetConfigWithDefaults() *AzureTargetConfig {
	this := AzureTargetConfig{}
	return &this
}

// GetSourceId returns the SourceId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *AzureTargetConfig) GetSourceId() int64 {
	if o == nil || o.SourceId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.SourceId.Get()
}

// GetSourceIdOk returns a tuple with the SourceId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureTargetConfig) GetSourceIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceId.Get(), o.SourceId.IsSet()
}

// SetSourceId sets field value
func (o *AzureTargetConfig) SetSourceId(v int64) {
	o.SourceId.Set(&v)
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AzureTargetConfig) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureTargetConfig) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *AzureTargetConfig) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *AzureTargetConfig) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *AzureTargetConfig) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *AzureTargetConfig) UnsetName() {
	o.Name.Unset()
}

// GetResourceGroup returns the ResourceGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AzureTargetConfig) GetResourceGroup() int64 {
	if o == nil || o.ResourceGroup.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ResourceGroup.Get()
}

// GetResourceGroupOk returns a tuple with the ResourceGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureTargetConfig) GetResourceGroupOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ResourceGroup.Get(), o.ResourceGroup.IsSet()
}

// HasResourceGroup returns a boolean if a field has been set.
func (o *AzureTargetConfig) HasResourceGroup() bool {
	if o != nil && o.ResourceGroup.IsSet() {
		return true
	}

	return false
}

// SetResourceGroup gets a reference to the given NullableInt64 and assigns it to the ResourceGroup field.
func (o *AzureTargetConfig) SetResourceGroup(v int64) {
	o.ResourceGroup.Set(&v)
}
// SetResourceGroupNil sets the value for ResourceGroup to be an explicit nil
func (o *AzureTargetConfig) SetResourceGroupNil() {
	o.ResourceGroup.Set(nil)
}

// UnsetResourceGroup ensures that no value is present for ResourceGroup, not even an explicit nil
func (o *AzureTargetConfig) UnsetResourceGroup() {
	o.ResourceGroup.Unset()
}

// GetResourceGroupName returns the ResourceGroupName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AzureTargetConfig) GetResourceGroupName() string {
	if o == nil || o.ResourceGroupName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ResourceGroupName.Get()
}

// GetResourceGroupNameOk returns a tuple with the ResourceGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureTargetConfig) GetResourceGroupNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ResourceGroupName.Get(), o.ResourceGroupName.IsSet()
}

// HasResourceGroupName returns a boolean if a field has been set.
func (o *AzureTargetConfig) HasResourceGroupName() bool {
	if o != nil && o.ResourceGroupName.IsSet() {
		return true
	}

	return false
}

// SetResourceGroupName gets a reference to the given NullableString and assigns it to the ResourceGroupName field.
func (o *AzureTargetConfig) SetResourceGroupName(v string) {
	o.ResourceGroupName.Set(&v)
}
// SetResourceGroupNameNil sets the value for ResourceGroupName to be an explicit nil
func (o *AzureTargetConfig) SetResourceGroupNameNil() {
	o.ResourceGroupName.Set(nil)
}

// UnsetResourceGroupName ensures that no value is present for ResourceGroupName, not even an explicit nil
func (o *AzureTargetConfig) UnsetResourceGroupName() {
	o.ResourceGroupName.Unset()
}

// GetStorageAccount returns the StorageAccount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AzureTargetConfig) GetStorageAccount() int32 {
	if o == nil || o.StorageAccount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.StorageAccount.Get()
}

// GetStorageAccountOk returns a tuple with the StorageAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureTargetConfig) GetStorageAccountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageAccount.Get(), o.StorageAccount.IsSet()
}

// HasStorageAccount returns a boolean if a field has been set.
func (o *AzureTargetConfig) HasStorageAccount() bool {
	if o != nil && o.StorageAccount.IsSet() {
		return true
	}

	return false
}

// SetStorageAccount gets a reference to the given NullableInt32 and assigns it to the StorageAccount field.
func (o *AzureTargetConfig) SetStorageAccount(v int32) {
	o.StorageAccount.Set(&v)
}
// SetStorageAccountNil sets the value for StorageAccount to be an explicit nil
func (o *AzureTargetConfig) SetStorageAccountNil() {
	o.StorageAccount.Set(nil)
}

// UnsetStorageAccount ensures that no value is present for StorageAccount, not even an explicit nil
func (o *AzureTargetConfig) UnsetStorageAccount() {
	o.StorageAccount.Unset()
}

// GetStorageAccountName returns the StorageAccountName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AzureTargetConfig) GetStorageAccountName() string {
	if o == nil || o.StorageAccountName.Get() == nil {
		var ret string
		return ret
	}
	return *o.StorageAccountName.Get()
}

// GetStorageAccountNameOk returns a tuple with the StorageAccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureTargetConfig) GetStorageAccountNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageAccountName.Get(), o.StorageAccountName.IsSet()
}

// HasStorageAccountName returns a boolean if a field has been set.
func (o *AzureTargetConfig) HasStorageAccountName() bool {
	if o != nil && o.StorageAccountName.IsSet() {
		return true
	}

	return false
}

// SetStorageAccountName gets a reference to the given NullableString and assigns it to the StorageAccountName field.
func (o *AzureTargetConfig) SetStorageAccountName(v string) {
	o.StorageAccountName.Set(&v)
}
// SetStorageAccountNameNil sets the value for StorageAccountName to be an explicit nil
func (o *AzureTargetConfig) SetStorageAccountNameNil() {
	o.StorageAccountName.Set(nil)
}

// UnsetStorageAccountName ensures that no value is present for StorageAccountName, not even an explicit nil
func (o *AzureTargetConfig) UnsetStorageAccountName() {
	o.StorageAccountName.Unset()
}

// GetStorageContainer returns the StorageContainer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AzureTargetConfig) GetStorageContainer() int32 {
	if o == nil || o.StorageContainer.Get() == nil {
		var ret int32
		return ret
	}
	return *o.StorageContainer.Get()
}

// GetStorageContainerOk returns a tuple with the StorageContainer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureTargetConfig) GetStorageContainerOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageContainer.Get(), o.StorageContainer.IsSet()
}

// HasStorageContainer returns a boolean if a field has been set.
func (o *AzureTargetConfig) HasStorageContainer() bool {
	if o != nil && o.StorageContainer.IsSet() {
		return true
	}

	return false
}

// SetStorageContainer gets a reference to the given NullableInt32 and assigns it to the StorageContainer field.
func (o *AzureTargetConfig) SetStorageContainer(v int32) {
	o.StorageContainer.Set(&v)
}
// SetStorageContainerNil sets the value for StorageContainer to be an explicit nil
func (o *AzureTargetConfig) SetStorageContainerNil() {
	o.StorageContainer.Set(nil)
}

// UnsetStorageContainer ensures that no value is present for StorageContainer, not even an explicit nil
func (o *AzureTargetConfig) UnsetStorageContainer() {
	o.StorageContainer.Unset()
}

// GetStorageContainerName returns the StorageContainerName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AzureTargetConfig) GetStorageContainerName() string {
	if o == nil || o.StorageContainerName.Get() == nil {
		var ret string
		return ret
	}
	return *o.StorageContainerName.Get()
}

// GetStorageContainerNameOk returns a tuple with the StorageContainerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureTargetConfig) GetStorageContainerNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageContainerName.Get(), o.StorageContainerName.IsSet()
}

// HasStorageContainerName returns a boolean if a field has been set.
func (o *AzureTargetConfig) HasStorageContainerName() bool {
	if o != nil && o.StorageContainerName.IsSet() {
		return true
	}

	return false
}

// SetStorageContainerName gets a reference to the given NullableString and assigns it to the StorageContainerName field.
func (o *AzureTargetConfig) SetStorageContainerName(v string) {
	o.StorageContainerName.Set(&v)
}
// SetStorageContainerNameNil sets the value for StorageContainerName to be an explicit nil
func (o *AzureTargetConfig) SetStorageContainerNameNil() {
	o.StorageContainerName.Set(nil)
}

// UnsetStorageContainerName ensures that no value is present for StorageContainerName, not even an explicit nil
func (o *AzureTargetConfig) UnsetStorageContainerName() {
	o.StorageContainerName.Unset()
}

// GetStorageResourceGroup returns the StorageResourceGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AzureTargetConfig) GetStorageResourceGroup() int32 {
	if o == nil || o.StorageResourceGroup.Get() == nil {
		var ret int32
		return ret
	}
	return *o.StorageResourceGroup.Get()
}

// GetStorageResourceGroupOk returns a tuple with the StorageResourceGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureTargetConfig) GetStorageResourceGroupOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageResourceGroup.Get(), o.StorageResourceGroup.IsSet()
}

// HasStorageResourceGroup returns a boolean if a field has been set.
func (o *AzureTargetConfig) HasStorageResourceGroup() bool {
	if o != nil && o.StorageResourceGroup.IsSet() {
		return true
	}

	return false
}

// SetStorageResourceGroup gets a reference to the given NullableInt32 and assigns it to the StorageResourceGroup field.
func (o *AzureTargetConfig) SetStorageResourceGroup(v int32) {
	o.StorageResourceGroup.Set(&v)
}
// SetStorageResourceGroupNil sets the value for StorageResourceGroup to be an explicit nil
func (o *AzureTargetConfig) SetStorageResourceGroupNil() {
	o.StorageResourceGroup.Set(nil)
}

// UnsetStorageResourceGroup ensures that no value is present for StorageResourceGroup, not even an explicit nil
func (o *AzureTargetConfig) UnsetStorageResourceGroup() {
	o.StorageResourceGroup.Unset()
}

// GetStorageResourceGroupName returns the StorageResourceGroupName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AzureTargetConfig) GetStorageResourceGroupName() string {
	if o == nil || o.StorageResourceGroupName.Get() == nil {
		var ret string
		return ret
	}
	return *o.StorageResourceGroupName.Get()
}

// GetStorageResourceGroupNameOk returns a tuple with the StorageResourceGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureTargetConfig) GetStorageResourceGroupNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageResourceGroupName.Get(), o.StorageResourceGroupName.IsSet()
}

// HasStorageResourceGroupName returns a boolean if a field has been set.
func (o *AzureTargetConfig) HasStorageResourceGroupName() bool {
	if o != nil && o.StorageResourceGroupName.IsSet() {
		return true
	}

	return false
}

// SetStorageResourceGroupName gets a reference to the given NullableString and assigns it to the StorageResourceGroupName field.
func (o *AzureTargetConfig) SetStorageResourceGroupName(v string) {
	o.StorageResourceGroupName.Set(&v)
}
// SetStorageResourceGroupNameNil sets the value for StorageResourceGroupName to be an explicit nil
func (o *AzureTargetConfig) SetStorageResourceGroupNameNil() {
	o.StorageResourceGroupName.Set(nil)
}

// UnsetStorageResourceGroupName ensures that no value is present for StorageResourceGroupName, not even an explicit nil
func (o *AzureTargetConfig) UnsetStorageResourceGroupName() {
	o.StorageResourceGroupName.Unset()
}

func (o AzureTargetConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["sourceId"] = o.SourceId.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.ResourceGroup.IsSet() {
		toSerialize["resourceGroup"] = o.ResourceGroup.Get()
	}
	if o.ResourceGroupName.IsSet() {
		toSerialize["resourceGroupName"] = o.ResourceGroupName.Get()
	}
	if o.StorageAccount.IsSet() {
		toSerialize["storageAccount"] = o.StorageAccount.Get()
	}
	if o.StorageAccountName.IsSet() {
		toSerialize["storageAccountName"] = o.StorageAccountName.Get()
	}
	if o.StorageContainer.IsSet() {
		toSerialize["storageContainer"] = o.StorageContainer.Get()
	}
	if o.StorageContainerName.IsSet() {
		toSerialize["storageContainerName"] = o.StorageContainerName.Get()
	}
	if o.StorageResourceGroup.IsSet() {
		toSerialize["storageResourceGroup"] = o.StorageResourceGroup.Get()
	}
	if o.StorageResourceGroupName.IsSet() {
		toSerialize["storageResourceGroupName"] = o.StorageResourceGroupName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAzureTargetConfig struct {
	value *AzureTargetConfig
	isSet bool
}

func (v NullableAzureTargetConfig) Get() *AzureTargetConfig {
	return v.value
}

func (v *NullableAzureTargetConfig) Set(val *AzureTargetConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureTargetConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureTargetConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureTargetConfig(val *AzureTargetConfig) *NullableAzureTargetConfig {
	return &NullableAzureTargetConfig{value: val, isSet: true}
}

func (v NullableAzureTargetConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureTargetConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o AzureTargetConfig) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}