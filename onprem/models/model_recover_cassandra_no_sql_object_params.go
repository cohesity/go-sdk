/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// RecoverCassandraNoSqlObjectParams Specifies the fully qualified object name and other attributes of each object to be recovered.
type RecoverCassandraNoSqlObjectParams struct {
	// Specifies the fully qualified name of the object to be restored.
	ObjectName NullableString `json:"objectName"`
	// Specifies the new name to which the object should be renamed to after the recovery.
	RenameTo NullableString `json:"renameTo,omitempty"`
	// Specifies the properties to be applied to the object at the time of recovery.
	ObjectProperties []NoSqlObjectProperty `json:"objectProperties,omitempty"`
}

// NewRecoverCassandraNoSqlObjectParams instantiates a new RecoverCassandraNoSqlObjectParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverCassandraNoSqlObjectParams(objectName NullableString) *RecoverCassandraNoSqlObjectParams {
	this := RecoverCassandraNoSqlObjectParams{}
	this.ObjectName = objectName
	return &this
}

// NewRecoverCassandraNoSqlObjectParamsWithDefaults instantiates a new RecoverCassandraNoSqlObjectParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverCassandraNoSqlObjectParamsWithDefaults() *RecoverCassandraNoSqlObjectParams {
	this := RecoverCassandraNoSqlObjectParams{}
	return &this
}

// GetObjectName returns the ObjectName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *RecoverCassandraNoSqlObjectParams) GetObjectName() string {
	if o == nil || o.ObjectName.Get() == nil {
		var ret string
		return ret
	}

	return *o.ObjectName.Get()
}

// GetObjectNameOk returns a tuple with the ObjectName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverCassandraNoSqlObjectParams) GetObjectNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ObjectName.Get(), o.ObjectName.IsSet()
}

// SetObjectName sets field value
func (o *RecoverCassandraNoSqlObjectParams) SetObjectName(v string) {
	o.ObjectName.Set(&v)
}

// GetRenameTo returns the RenameTo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverCassandraNoSqlObjectParams) GetRenameTo() string {
	if o == nil || o.RenameTo.Get() == nil {
		var ret string
		return ret
	}
	return *o.RenameTo.Get()
}

// GetRenameToOk returns a tuple with the RenameTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverCassandraNoSqlObjectParams) GetRenameToOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RenameTo.Get(), o.RenameTo.IsSet()
}

// HasRenameTo returns a boolean if a field has been set.
func (o *RecoverCassandraNoSqlObjectParams) HasRenameTo() bool {
	if o != nil && o.RenameTo.IsSet() {
		return true
	}

	return false
}

// SetRenameTo gets a reference to the given NullableString and assigns it to the RenameTo field.
func (o *RecoverCassandraNoSqlObjectParams) SetRenameTo(v string) {
	o.RenameTo.Set(&v)
}
// SetRenameToNil sets the value for RenameTo to be an explicit nil
func (o *RecoverCassandraNoSqlObjectParams) SetRenameToNil() {
	o.RenameTo.Set(nil)
}

// UnsetRenameTo ensures that no value is present for RenameTo, not even an explicit nil
func (o *RecoverCassandraNoSqlObjectParams) UnsetRenameTo() {
	o.RenameTo.Unset()
}

// GetObjectProperties returns the ObjectProperties field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverCassandraNoSqlObjectParams) GetObjectProperties() []NoSqlObjectProperty {
	if o == nil  {
		var ret []NoSqlObjectProperty
		return ret
	}
	return o.ObjectProperties
}

// GetObjectPropertiesOk returns a tuple with the ObjectProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverCassandraNoSqlObjectParams) GetObjectPropertiesOk() (*[]NoSqlObjectProperty, bool) {
	if o == nil || o.ObjectProperties == nil {
		return nil, false
	}
	return &o.ObjectProperties, true
}

// HasObjectProperties returns a boolean if a field has been set.
func (o *RecoverCassandraNoSqlObjectParams) HasObjectProperties() bool {
	if o != nil && o.ObjectProperties != nil {
		return true
	}

	return false
}

// SetObjectProperties gets a reference to the given []NoSqlObjectProperty and assigns it to the ObjectProperties field.
func (o *RecoverCassandraNoSqlObjectParams) SetObjectProperties(v []NoSqlObjectProperty) {
	o.ObjectProperties = v
}

func (o RecoverCassandraNoSqlObjectParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["objectName"] = o.ObjectName.Get()
	}
	if o.RenameTo.IsSet() {
		toSerialize["renameTo"] = o.RenameTo.Get()
	}
	if o.ObjectProperties != nil {
		toSerialize["objectProperties"] = o.ObjectProperties
	}
	return json.Marshal(toSerialize)
}

type NullableRecoverCassandraNoSqlObjectParams struct {
	value *RecoverCassandraNoSqlObjectParams
	isSet bool
}

func (v NullableRecoverCassandraNoSqlObjectParams) Get() *RecoverCassandraNoSqlObjectParams {
	return v.value
}

func (v *NullableRecoverCassandraNoSqlObjectParams) Set(val *RecoverCassandraNoSqlObjectParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverCassandraNoSqlObjectParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverCassandraNoSqlObjectParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverCassandraNoSqlObjectParams(val *RecoverCassandraNoSqlObjectParams) *NullableRecoverCassandraNoSqlObjectParams {
	return &NullableRecoverCassandraNoSqlObjectParams{value: val, isSet: true}
}

func (v NullableRecoverCassandraNoSqlObjectParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverCassandraNoSqlObjectParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o RecoverCassandraNoSqlObjectParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}