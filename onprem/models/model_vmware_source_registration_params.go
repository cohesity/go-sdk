/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// VmwareSourceRegistrationParams Specifies the paramaters to register a VMware source.
type VmwareSourceRegistrationParams struct {
	// Specifies the VMware Source type.
	Type NullableString `json:"type"`
	VCenterParams *VcenterRegistrationParams `json:"vCenterParams,omitempty"`
	EsxiParams *EsxiRegistrationParams `json:"esxiParams,omitempty"`
	VcdParams *VcdRegistrationParams `json:"vcdParams,omitempty"`
}

// NewVmwareSourceRegistrationParams instantiates a new VmwareSourceRegistrationParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmwareSourceRegistrationParams(type_ NullableString) *VmwareSourceRegistrationParams {
	this := VmwareSourceRegistrationParams{}
	this.Type = type_
	return &this
}

// NewVmwareSourceRegistrationParamsWithDefaults instantiates a new VmwareSourceRegistrationParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmwareSourceRegistrationParamsWithDefaults() *VmwareSourceRegistrationParams {
	this := VmwareSourceRegistrationParams{}
	return &this
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for string will be returned
func (o *VmwareSourceRegistrationParams) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}

	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareSourceRegistrationParams) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// SetType sets field value
func (o *VmwareSourceRegistrationParams) SetType(v string) {
	o.Type.Set(&v)
}

// GetVCenterParams returns the VCenterParams field value if set, zero value otherwise.
func (o *VmwareSourceRegistrationParams) GetVCenterParams() VcenterRegistrationParams {
	if o == nil || o.VCenterParams == nil {
		var ret VcenterRegistrationParams
		return ret
	}
	return *o.VCenterParams
}

// GetVCenterParamsOk returns a tuple with the VCenterParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmwareSourceRegistrationParams) GetVCenterParamsOk() (*VcenterRegistrationParams, bool) {
	if o == nil || o.VCenterParams == nil {
		return nil, false
	}
	return o.VCenterParams, true
}

// HasVCenterParams returns a boolean if a field has been set.
func (o *VmwareSourceRegistrationParams) HasVCenterParams() bool {
	if o != nil && o.VCenterParams != nil {
		return true
	}

	return false
}

// SetVCenterParams gets a reference to the given VcenterRegistrationParams and assigns it to the VCenterParams field.
func (o *VmwareSourceRegistrationParams) SetVCenterParams(v VcenterRegistrationParams) {
	o.VCenterParams = &v
}

// GetEsxiParams returns the EsxiParams field value if set, zero value otherwise.
func (o *VmwareSourceRegistrationParams) GetEsxiParams() EsxiRegistrationParams {
	if o == nil || o.EsxiParams == nil {
		var ret EsxiRegistrationParams
		return ret
	}
	return *o.EsxiParams
}

// GetEsxiParamsOk returns a tuple with the EsxiParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmwareSourceRegistrationParams) GetEsxiParamsOk() (*EsxiRegistrationParams, bool) {
	if o == nil || o.EsxiParams == nil {
		return nil, false
	}
	return o.EsxiParams, true
}

// HasEsxiParams returns a boolean if a field has been set.
func (o *VmwareSourceRegistrationParams) HasEsxiParams() bool {
	if o != nil && o.EsxiParams != nil {
		return true
	}

	return false
}

// SetEsxiParams gets a reference to the given EsxiRegistrationParams and assigns it to the EsxiParams field.
func (o *VmwareSourceRegistrationParams) SetEsxiParams(v EsxiRegistrationParams) {
	o.EsxiParams = &v
}

// GetVcdParams returns the VcdParams field value if set, zero value otherwise.
func (o *VmwareSourceRegistrationParams) GetVcdParams() VcdRegistrationParams {
	if o == nil || o.VcdParams == nil {
		var ret VcdRegistrationParams
		return ret
	}
	return *o.VcdParams
}

// GetVcdParamsOk returns a tuple with the VcdParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmwareSourceRegistrationParams) GetVcdParamsOk() (*VcdRegistrationParams, bool) {
	if o == nil || o.VcdParams == nil {
		return nil, false
	}
	return o.VcdParams, true
}

// HasVcdParams returns a boolean if a field has been set.
func (o *VmwareSourceRegistrationParams) HasVcdParams() bool {
	if o != nil && o.VcdParams != nil {
		return true
	}

	return false
}

// SetVcdParams gets a reference to the given VcdRegistrationParams and assigns it to the VcdParams field.
func (o *VmwareSourceRegistrationParams) SetVcdParams(v VcdRegistrationParams) {
	o.VcdParams = &v
}

func (o VmwareSourceRegistrationParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type.Get()
	}
	if o.VCenterParams != nil {
		toSerialize["vCenterParams"] = o.VCenterParams
	}
	if o.EsxiParams != nil {
		toSerialize["esxiParams"] = o.EsxiParams
	}
	if o.VcdParams != nil {
		toSerialize["vcdParams"] = o.VcdParams
	}
	return json.Marshal(toSerialize)
}

type NullableVmwareSourceRegistrationParams struct {
	value *VmwareSourceRegistrationParams
	isSet bool
}

func (v NullableVmwareSourceRegistrationParams) Get() *VmwareSourceRegistrationParams {
	return v.value
}

func (v *NullableVmwareSourceRegistrationParams) Set(val *VmwareSourceRegistrationParams) {
	v.value = val
	v.isSet = true
}

func (v NullableVmwareSourceRegistrationParams) IsSet() bool {
	return v.isSet
}

func (v *NullableVmwareSourceRegistrationParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmwareSourceRegistrationParams(val *VmwareSourceRegistrationParams) *NullableVmwareSourceRegistrationParams {
	return &NullableVmwareSourceRegistrationParams{value: val, isSet: true}
}

func (v NullableVmwareSourceRegistrationParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmwareSourceRegistrationParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o VmwareSourceRegistrationParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}