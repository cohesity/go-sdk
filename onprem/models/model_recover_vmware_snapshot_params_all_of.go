/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// RecoverVmwareSnapshotParamsAllOf struct for RecoverVmwareSnapshotParamsAllOf
type RecoverVmwareSnapshotParamsAllOf struct {
	// Specifies optional information about any child snapshots of this object. For example a VCD snapshot may have child VM information populated here.
	ChildSnapshots *[]RecoverVmwareChildSnapshotParams `json:"childSnapshots,omitempty"`
}

// NewRecoverVmwareSnapshotParamsAllOf instantiates a new RecoverVmwareSnapshotParamsAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverVmwareSnapshotParamsAllOf() *RecoverVmwareSnapshotParamsAllOf {
	this := RecoverVmwareSnapshotParamsAllOf{}
	return &this
}

// NewRecoverVmwareSnapshotParamsAllOfWithDefaults instantiates a new RecoverVmwareSnapshotParamsAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverVmwareSnapshotParamsAllOfWithDefaults() *RecoverVmwareSnapshotParamsAllOf {
	this := RecoverVmwareSnapshotParamsAllOf{}
	return &this
}

// GetChildSnapshots returns the ChildSnapshots field value if set, zero value otherwise.
func (o *RecoverVmwareSnapshotParamsAllOf) GetChildSnapshots() []RecoverVmwareChildSnapshotParams {
	if o == nil || o.ChildSnapshots == nil {
		var ret []RecoverVmwareChildSnapshotParams
		return ret
	}
	return *o.ChildSnapshots
}

// GetChildSnapshotsOk returns a tuple with the ChildSnapshots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecoverVmwareSnapshotParamsAllOf) GetChildSnapshotsOk() (*[]RecoverVmwareChildSnapshotParams, bool) {
	if o == nil || o.ChildSnapshots == nil {
		return nil, false
	}
	return o.ChildSnapshots, true
}

// HasChildSnapshots returns a boolean if a field has been set.
func (o *RecoverVmwareSnapshotParamsAllOf) HasChildSnapshots() bool {
	if o != nil && o.ChildSnapshots != nil {
		return true
	}

	return false
}

// SetChildSnapshots gets a reference to the given []RecoverVmwareChildSnapshotParams and assigns it to the ChildSnapshots field.
func (o *RecoverVmwareSnapshotParamsAllOf) SetChildSnapshots(v []RecoverVmwareChildSnapshotParams) {
	o.ChildSnapshots = &v
}

func (o RecoverVmwareSnapshotParamsAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ChildSnapshots != nil {
		toSerialize["childSnapshots"] = o.ChildSnapshots
	}
	return json.Marshal(toSerialize)
}

type NullableRecoverVmwareSnapshotParamsAllOf struct {
	value *RecoverVmwareSnapshotParamsAllOf
	isSet bool
}

func (v NullableRecoverVmwareSnapshotParamsAllOf) Get() *RecoverVmwareSnapshotParamsAllOf {
	return v.value
}

func (v *NullableRecoverVmwareSnapshotParamsAllOf) Set(val *RecoverVmwareSnapshotParamsAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverVmwareSnapshotParamsAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverVmwareSnapshotParamsAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverVmwareSnapshotParamsAllOf(val *RecoverVmwareSnapshotParamsAllOf) *NullableRecoverVmwareSnapshotParamsAllOf {
	return &NullableRecoverVmwareSnapshotParamsAllOf{value: val, isSet: true}
}

func (v NullableRecoverVmwareSnapshotParamsAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverVmwareSnapshotParamsAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o RecoverVmwareSnapshotParamsAllOf) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}