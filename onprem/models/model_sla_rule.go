/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// SlaRule Specifies an SLA rule for a specific Protection Group run type.
type SlaRule struct {
	// Specifies the type of run this rule should apply to.
	BackupRunType NullableString `json:"backupRunType,omitempty"`
	// Specifies the number of minutes allotted to a run of the specified type before SLA is considered violated.
	SlaMinutes NullableInt64 `json:"slaMinutes,omitempty"`
}

// NewSlaRule instantiates a new SlaRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSlaRule() *SlaRule {
	this := SlaRule{}
	return &this
}

// NewSlaRuleWithDefaults instantiates a new SlaRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSlaRuleWithDefaults() *SlaRule {
	this := SlaRule{}
	return &this
}

// GetBackupRunType returns the BackupRunType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SlaRule) GetBackupRunType() string {
	if o == nil || o.BackupRunType.Get() == nil {
		var ret string
		return ret
	}
	return *o.BackupRunType.Get()
}

// GetBackupRunTypeOk returns a tuple with the BackupRunType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SlaRule) GetBackupRunTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BackupRunType.Get(), o.BackupRunType.IsSet()
}

// HasBackupRunType returns a boolean if a field has been set.
func (o *SlaRule) HasBackupRunType() bool {
	if o != nil && o.BackupRunType.IsSet() {
		return true
	}

	return false
}

// SetBackupRunType gets a reference to the given NullableString and assigns it to the BackupRunType field.
func (o *SlaRule) SetBackupRunType(v string) {
	o.BackupRunType.Set(&v)
}
// SetBackupRunTypeNil sets the value for BackupRunType to be an explicit nil
func (o *SlaRule) SetBackupRunTypeNil() {
	o.BackupRunType.Set(nil)
}

// UnsetBackupRunType ensures that no value is present for BackupRunType, not even an explicit nil
func (o *SlaRule) UnsetBackupRunType() {
	o.BackupRunType.Unset()
}

// GetSlaMinutes returns the SlaMinutes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SlaRule) GetSlaMinutes() int64 {
	if o == nil || o.SlaMinutes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SlaMinutes.Get()
}

// GetSlaMinutesOk returns a tuple with the SlaMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SlaRule) GetSlaMinutesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SlaMinutes.Get(), o.SlaMinutes.IsSet()
}

// HasSlaMinutes returns a boolean if a field has been set.
func (o *SlaRule) HasSlaMinutes() bool {
	if o != nil && o.SlaMinutes.IsSet() {
		return true
	}

	return false
}

// SetSlaMinutes gets a reference to the given NullableInt64 and assigns it to the SlaMinutes field.
func (o *SlaRule) SetSlaMinutes(v int64) {
	o.SlaMinutes.Set(&v)
}
// SetSlaMinutesNil sets the value for SlaMinutes to be an explicit nil
func (o *SlaRule) SetSlaMinutesNil() {
	o.SlaMinutes.Set(nil)
}

// UnsetSlaMinutes ensures that no value is present for SlaMinutes, not even an explicit nil
func (o *SlaRule) UnsetSlaMinutes() {
	o.SlaMinutes.Unset()
}

func (o SlaRule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BackupRunType.IsSet() {
		toSerialize["backupRunType"] = o.BackupRunType.Get()
	}
	if o.SlaMinutes.IsSet() {
		toSerialize["slaMinutes"] = o.SlaMinutes.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSlaRule struct {
	value *SlaRule
	isSet bool
}

func (v NullableSlaRule) Get() *SlaRule {
	return v.value
}

func (v *NullableSlaRule) Set(val *SlaRule) {
	v.value = val
	v.isSet = true
}

func (v NullableSlaRule) IsSet() bool {
	return v.isSet
}

func (v *NullableSlaRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSlaRule(val *SlaRule) *NullableSlaRule {
	return &NullableSlaRule{value: val, isSet: true}
}

func (v NullableSlaRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSlaRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o SlaRule) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}