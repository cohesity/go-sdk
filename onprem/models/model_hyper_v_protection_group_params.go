/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// HyperVProtectionGroupParams Specifies the parameters which are specific to HyperV related Protection Groups.
type HyperVProtectionGroupParams struct {
	// Specifies the Protection Group type. If not specified, then backup method is auto determined. Specifying RCT will forcibly use RCT backup for all VMs in this Protection Group. Available only for VMs with hardware version 8.0 and above, but is more efficient. Specifying VSS will forcibly use VSS backup for all VMs in this Protection Group. Available for VMs with hardware version 5.0 and above, but is slower than RCT backup.
	ProtectionType NullableString `json:"protectionType,omitempty"`
	// Specifies the objects to be included in the Protection Group.
	Objects *[]HyperVProtectionGroupObjectParams `json:"objects,omitempty"`
	// Specifies the list of IDs of the objects to not be protected by this Protection Group. This can be used to ignore specific objects under a parent object which has been included for protection.
	ExcludeObjectIds *[]int64 `json:"excludeObjectIds,omitempty"`
	// Array of Array of VM Tag Ids that Specify VMs to Protect. Optionally specify a list of VMs to protect by listing Protection Source ids of VM Tags in this two dimensional array. Using this two dimensional array of Tag ids, the Cluster generates a list of VMs to protect which are derived from intersections of the inner arrays and union of the outer array, as shown by the following example. To protect only 'Eng' VMs in the East and all the VMs in the West, specify the following tag id array: [ [1101, 2221], [3031] ], where 1101 is the 'Eng' VM Tag id, 2221 is the 'East' VM Tag id and 3031 is the 'West' VM Tag id. The inner array [1101, 2221] produces a list of VMs that are both tagged with 'Eng' and 'East' (an intersection). The outer array combines the list from the inner array with list of VMs tagged with 'West' (a union). The list of resulting VMs are protected by this Protection Group.
	VmTagIds [][]int64 `json:"vmTagIds,omitempty"`
	// Array of Arrays of VM Tag Ids that Specify VMs to Exclude. Optionally specify a list of VMs to exclude from protecting by listing Protection Source ids of VM Tags in this two dimensional array. Using this two dimensional array of Tag ids, the Cluster generates a list of VMs to exclude from protecting, which are derived from intersections of the inner arrays and union of the outer array, as shown by the following example. For example a Datacenter is selected to be protected but you want to exclude all the 'Former Employees' VMs in the East and West but keep all the VMs for 'Former Employees' in the South which are also stored in this Datacenter, by specifying the following tag id array: [ [1000, 2221], [1000, 3031] ], where 1000 is the 'Former Employee' VM Tag id, 2221 is the 'East' VM Tag id and 3031 is the 'West' VM Tag id. The first inner array [1000, 2221] produces a list of VMs that are both tagged with 'Former Employees' and 'East' (an intersection). The second inner array [1000, 3031] produces a list of VMs that are both tagged with 'Former Employees' and 'West' (an intersection). The outer array combines the list of VMs from the two inner arrays. The list of resulting VMs are excluded from being protected this Job.
	ExcludeVmTagIds [][]int64 `json:"excludeVmTagIds,omitempty"`
	// Specifies whether or not to move the workload to the cloud.
	CloudMigration NullableBool `json:"cloudMigration,omitempty"`
	// Specifies the id of the parent of the objects.
	SourceId NullableInt64 `json:"sourceId,omitempty"`
	// Specifies the name of the parent of the objects.
	SourceName NullableString `json:"sourceName,omitempty"`
	// Specifies whether or not to quiesce apps and the file system in order to take app consistent snapshots. If not specified or false then snapshots will not be app consistent.
	AppConsistentSnapshot NullableBool `json:"appConsistentSnapshot,omitempty"`
	// Specifies whether or not to fallback to a crash consistent snapshot in the event that an app consistent snapshot fails.
	FallbackToCrashConsistentSnapshot NullableBool `json:"fallbackToCrashConsistentSnapshot,omitempty"`
	IndexingPolicy *IndexingPolicy `json:"indexingPolicy,omitempty"`
}

// NewHyperVProtectionGroupParams instantiates a new HyperVProtectionGroupParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHyperVProtectionGroupParams() *HyperVProtectionGroupParams {
	this := HyperVProtectionGroupParams{}
	return &this
}

// NewHyperVProtectionGroupParamsWithDefaults instantiates a new HyperVProtectionGroupParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHyperVProtectionGroupParamsWithDefaults() *HyperVProtectionGroupParams {
	this := HyperVProtectionGroupParams{}
	return &this
}

// GetProtectionType returns the ProtectionType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperVProtectionGroupParams) GetProtectionType() string {
	if o == nil || o.ProtectionType.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProtectionType.Get()
}

// GetProtectionTypeOk returns a tuple with the ProtectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperVProtectionGroupParams) GetProtectionTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProtectionType.Get(), o.ProtectionType.IsSet()
}

// HasProtectionType returns a boolean if a field has been set.
func (o *HyperVProtectionGroupParams) HasProtectionType() bool {
	if o != nil && o.ProtectionType.IsSet() {
		return true
	}

	return false
}

// SetProtectionType gets a reference to the given NullableString and assigns it to the ProtectionType field.
func (o *HyperVProtectionGroupParams) SetProtectionType(v string) {
	o.ProtectionType.Set(&v)
}
// SetProtectionTypeNil sets the value for ProtectionType to be an explicit nil
func (o *HyperVProtectionGroupParams) SetProtectionTypeNil() {
	o.ProtectionType.Set(nil)
}

// UnsetProtectionType ensures that no value is present for ProtectionType, not even an explicit nil
func (o *HyperVProtectionGroupParams) UnsetProtectionType() {
	o.ProtectionType.Unset()
}

// GetObjects returns the Objects field value if set, zero value otherwise.
func (o *HyperVProtectionGroupParams) GetObjects() []HyperVProtectionGroupObjectParams {
	if o == nil || o.Objects == nil {
		var ret []HyperVProtectionGroupObjectParams
		return ret
	}
	return *o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperVProtectionGroupParams) GetObjectsOk() (*[]HyperVProtectionGroupObjectParams, bool) {
	if o == nil || o.Objects == nil {
		return nil, false
	}
	return o.Objects, true
}

// HasObjects returns a boolean if a field has been set.
func (o *HyperVProtectionGroupParams) HasObjects() bool {
	if o != nil && o.Objects != nil {
		return true
	}

	return false
}

// SetObjects gets a reference to the given []HyperVProtectionGroupObjectParams and assigns it to the Objects field.
func (o *HyperVProtectionGroupParams) SetObjects(v []HyperVProtectionGroupObjectParams) {
	o.Objects = &v
}

// GetExcludeObjectIds returns the ExcludeObjectIds field value if set, zero value otherwise.
func (o *HyperVProtectionGroupParams) GetExcludeObjectIds() []int64 {
	if o == nil || o.ExcludeObjectIds == nil {
		var ret []int64
		return ret
	}
	return *o.ExcludeObjectIds
}

// GetExcludeObjectIdsOk returns a tuple with the ExcludeObjectIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperVProtectionGroupParams) GetExcludeObjectIdsOk() (*[]int64, bool) {
	if o == nil || o.ExcludeObjectIds == nil {
		return nil, false
	}
	return o.ExcludeObjectIds, true
}

// HasExcludeObjectIds returns a boolean if a field has been set.
func (o *HyperVProtectionGroupParams) HasExcludeObjectIds() bool {
	if o != nil && o.ExcludeObjectIds != nil {
		return true
	}

	return false
}

// SetExcludeObjectIds gets a reference to the given []int64 and assigns it to the ExcludeObjectIds field.
func (o *HyperVProtectionGroupParams) SetExcludeObjectIds(v []int64) {
	o.ExcludeObjectIds = &v
}

// GetVmTagIds returns the VmTagIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperVProtectionGroupParams) GetVmTagIds() [][]int64 {
	if o == nil  {
		var ret [][]int64
		return ret
	}
	return o.VmTagIds
}

// GetVmTagIdsOk returns a tuple with the VmTagIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperVProtectionGroupParams) GetVmTagIdsOk() (*[][]int64, bool) {
	if o == nil || o.VmTagIds == nil {
		return nil, false
	}
	return &o.VmTagIds, true
}

// HasVmTagIds returns a boolean if a field has been set.
func (o *HyperVProtectionGroupParams) HasVmTagIds() bool {
	if o != nil && o.VmTagIds != nil {
		return true
	}

	return false
}

// SetVmTagIds gets a reference to the given [][]int64 and assigns it to the VmTagIds field.
func (o *HyperVProtectionGroupParams) SetVmTagIds(v [][]int64) {
	o.VmTagIds = v
}

// GetExcludeVmTagIds returns the ExcludeVmTagIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperVProtectionGroupParams) GetExcludeVmTagIds() [][]int64 {
	if o == nil  {
		var ret [][]int64
		return ret
	}
	return o.ExcludeVmTagIds
}

// GetExcludeVmTagIdsOk returns a tuple with the ExcludeVmTagIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperVProtectionGroupParams) GetExcludeVmTagIdsOk() (*[][]int64, bool) {
	if o == nil || o.ExcludeVmTagIds == nil {
		return nil, false
	}
	return &o.ExcludeVmTagIds, true
}

// HasExcludeVmTagIds returns a boolean if a field has been set.
func (o *HyperVProtectionGroupParams) HasExcludeVmTagIds() bool {
	if o != nil && o.ExcludeVmTagIds != nil {
		return true
	}

	return false
}

// SetExcludeVmTagIds gets a reference to the given [][]int64 and assigns it to the ExcludeVmTagIds field.
func (o *HyperVProtectionGroupParams) SetExcludeVmTagIds(v [][]int64) {
	o.ExcludeVmTagIds = v
}

// GetCloudMigration returns the CloudMigration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperVProtectionGroupParams) GetCloudMigration() bool {
	if o == nil || o.CloudMigration.Get() == nil {
		var ret bool
		return ret
	}
	return *o.CloudMigration.Get()
}

// GetCloudMigrationOk returns a tuple with the CloudMigration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperVProtectionGroupParams) GetCloudMigrationOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CloudMigration.Get(), o.CloudMigration.IsSet()
}

// HasCloudMigration returns a boolean if a field has been set.
func (o *HyperVProtectionGroupParams) HasCloudMigration() bool {
	if o != nil && o.CloudMigration.IsSet() {
		return true
	}

	return false
}

// SetCloudMigration gets a reference to the given NullableBool and assigns it to the CloudMigration field.
func (o *HyperVProtectionGroupParams) SetCloudMigration(v bool) {
	o.CloudMigration.Set(&v)
}
// SetCloudMigrationNil sets the value for CloudMigration to be an explicit nil
func (o *HyperVProtectionGroupParams) SetCloudMigrationNil() {
	o.CloudMigration.Set(nil)
}

// UnsetCloudMigration ensures that no value is present for CloudMigration, not even an explicit nil
func (o *HyperVProtectionGroupParams) UnsetCloudMigration() {
	o.CloudMigration.Unset()
}

// GetSourceId returns the SourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperVProtectionGroupParams) GetSourceId() int64 {
	if o == nil || o.SourceId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SourceId.Get()
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperVProtectionGroupParams) GetSourceIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceId.Get(), o.SourceId.IsSet()
}

// HasSourceId returns a boolean if a field has been set.
func (o *HyperVProtectionGroupParams) HasSourceId() bool {
	if o != nil && o.SourceId.IsSet() {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given NullableInt64 and assigns it to the SourceId field.
func (o *HyperVProtectionGroupParams) SetSourceId(v int64) {
	o.SourceId.Set(&v)
}
// SetSourceIdNil sets the value for SourceId to be an explicit nil
func (o *HyperVProtectionGroupParams) SetSourceIdNil() {
	o.SourceId.Set(nil)
}

// UnsetSourceId ensures that no value is present for SourceId, not even an explicit nil
func (o *HyperVProtectionGroupParams) UnsetSourceId() {
	o.SourceId.Unset()
}

// GetSourceName returns the SourceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperVProtectionGroupParams) GetSourceName() string {
	if o == nil || o.SourceName.Get() == nil {
		var ret string
		return ret
	}
	return *o.SourceName.Get()
}

// GetSourceNameOk returns a tuple with the SourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperVProtectionGroupParams) GetSourceNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceName.Get(), o.SourceName.IsSet()
}

// HasSourceName returns a boolean if a field has been set.
func (o *HyperVProtectionGroupParams) HasSourceName() bool {
	if o != nil && o.SourceName.IsSet() {
		return true
	}

	return false
}

// SetSourceName gets a reference to the given NullableString and assigns it to the SourceName field.
func (o *HyperVProtectionGroupParams) SetSourceName(v string) {
	o.SourceName.Set(&v)
}
// SetSourceNameNil sets the value for SourceName to be an explicit nil
func (o *HyperVProtectionGroupParams) SetSourceNameNil() {
	o.SourceName.Set(nil)
}

// UnsetSourceName ensures that no value is present for SourceName, not even an explicit nil
func (o *HyperVProtectionGroupParams) UnsetSourceName() {
	o.SourceName.Unset()
}

// GetAppConsistentSnapshot returns the AppConsistentSnapshot field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperVProtectionGroupParams) GetAppConsistentSnapshot() bool {
	if o == nil || o.AppConsistentSnapshot.Get() == nil {
		var ret bool
		return ret
	}
	return *o.AppConsistentSnapshot.Get()
}

// GetAppConsistentSnapshotOk returns a tuple with the AppConsistentSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperVProtectionGroupParams) GetAppConsistentSnapshotOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AppConsistentSnapshot.Get(), o.AppConsistentSnapshot.IsSet()
}

// HasAppConsistentSnapshot returns a boolean if a field has been set.
func (o *HyperVProtectionGroupParams) HasAppConsistentSnapshot() bool {
	if o != nil && o.AppConsistentSnapshot.IsSet() {
		return true
	}

	return false
}

// SetAppConsistentSnapshot gets a reference to the given NullableBool and assigns it to the AppConsistentSnapshot field.
func (o *HyperVProtectionGroupParams) SetAppConsistentSnapshot(v bool) {
	o.AppConsistentSnapshot.Set(&v)
}
// SetAppConsistentSnapshotNil sets the value for AppConsistentSnapshot to be an explicit nil
func (o *HyperVProtectionGroupParams) SetAppConsistentSnapshotNil() {
	o.AppConsistentSnapshot.Set(nil)
}

// UnsetAppConsistentSnapshot ensures that no value is present for AppConsistentSnapshot, not even an explicit nil
func (o *HyperVProtectionGroupParams) UnsetAppConsistentSnapshot() {
	o.AppConsistentSnapshot.Unset()
}

// GetFallbackToCrashConsistentSnapshot returns the FallbackToCrashConsistentSnapshot field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperVProtectionGroupParams) GetFallbackToCrashConsistentSnapshot() bool {
	if o == nil || o.FallbackToCrashConsistentSnapshot.Get() == nil {
		var ret bool
		return ret
	}
	return *o.FallbackToCrashConsistentSnapshot.Get()
}

// GetFallbackToCrashConsistentSnapshotOk returns a tuple with the FallbackToCrashConsistentSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperVProtectionGroupParams) GetFallbackToCrashConsistentSnapshotOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FallbackToCrashConsistentSnapshot.Get(), o.FallbackToCrashConsistentSnapshot.IsSet()
}

// HasFallbackToCrashConsistentSnapshot returns a boolean if a field has been set.
func (o *HyperVProtectionGroupParams) HasFallbackToCrashConsistentSnapshot() bool {
	if o != nil && o.FallbackToCrashConsistentSnapshot.IsSet() {
		return true
	}

	return false
}

// SetFallbackToCrashConsistentSnapshot gets a reference to the given NullableBool and assigns it to the FallbackToCrashConsistentSnapshot field.
func (o *HyperVProtectionGroupParams) SetFallbackToCrashConsistentSnapshot(v bool) {
	o.FallbackToCrashConsistentSnapshot.Set(&v)
}
// SetFallbackToCrashConsistentSnapshotNil sets the value for FallbackToCrashConsistentSnapshot to be an explicit nil
func (o *HyperVProtectionGroupParams) SetFallbackToCrashConsistentSnapshotNil() {
	o.FallbackToCrashConsistentSnapshot.Set(nil)
}

// UnsetFallbackToCrashConsistentSnapshot ensures that no value is present for FallbackToCrashConsistentSnapshot, not even an explicit nil
func (o *HyperVProtectionGroupParams) UnsetFallbackToCrashConsistentSnapshot() {
	o.FallbackToCrashConsistentSnapshot.Unset()
}

// GetIndexingPolicy returns the IndexingPolicy field value if set, zero value otherwise.
func (o *HyperVProtectionGroupParams) GetIndexingPolicy() IndexingPolicy {
	if o == nil || o.IndexingPolicy == nil {
		var ret IndexingPolicy
		return ret
	}
	return *o.IndexingPolicy
}

// GetIndexingPolicyOk returns a tuple with the IndexingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperVProtectionGroupParams) GetIndexingPolicyOk() (*IndexingPolicy, bool) {
	if o == nil || o.IndexingPolicy == nil {
		return nil, false
	}
	return o.IndexingPolicy, true
}

// HasIndexingPolicy returns a boolean if a field has been set.
func (o *HyperVProtectionGroupParams) HasIndexingPolicy() bool {
	if o != nil && o.IndexingPolicy != nil {
		return true
	}

	return false
}

// SetIndexingPolicy gets a reference to the given IndexingPolicy and assigns it to the IndexingPolicy field.
func (o *HyperVProtectionGroupParams) SetIndexingPolicy(v IndexingPolicy) {
	o.IndexingPolicy = &v
}

func (o HyperVProtectionGroupParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ProtectionType.IsSet() {
		toSerialize["protectionType"] = o.ProtectionType.Get()
	}
	if o.Objects != nil {
		toSerialize["objects"] = o.Objects
	}
	if o.ExcludeObjectIds != nil {
		toSerialize["excludeObjectIds"] = o.ExcludeObjectIds
	}
	if o.VmTagIds != nil {
		toSerialize["vmTagIds"] = o.VmTagIds
	}
	if o.ExcludeVmTagIds != nil {
		toSerialize["excludeVmTagIds"] = o.ExcludeVmTagIds
	}
	if o.CloudMigration.IsSet() {
		toSerialize["cloudMigration"] = o.CloudMigration.Get()
	}
	if o.SourceId.IsSet() {
		toSerialize["sourceId"] = o.SourceId.Get()
	}
	if o.SourceName.IsSet() {
		toSerialize["sourceName"] = o.SourceName.Get()
	}
	if o.AppConsistentSnapshot.IsSet() {
		toSerialize["appConsistentSnapshot"] = o.AppConsistentSnapshot.Get()
	}
	if o.FallbackToCrashConsistentSnapshot.IsSet() {
		toSerialize["fallbackToCrashConsistentSnapshot"] = o.FallbackToCrashConsistentSnapshot.Get()
	}
	if o.IndexingPolicy != nil {
		toSerialize["indexingPolicy"] = o.IndexingPolicy
	}
	return json.Marshal(toSerialize)
}

type NullableHyperVProtectionGroupParams struct {
	value *HyperVProtectionGroupParams
	isSet bool
}

func (v NullableHyperVProtectionGroupParams) Get() *HyperVProtectionGroupParams {
	return v.value
}

func (v *NullableHyperVProtectionGroupParams) Set(val *HyperVProtectionGroupParams) {
	v.value = val
	v.isSet = true
}

func (v NullableHyperVProtectionGroupParams) IsSet() bool {
	return v.isSet
}

func (v *NullableHyperVProtectionGroupParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHyperVProtectionGroupParams(val *HyperVProtectionGroupParams) *NullableHyperVProtectionGroupParams {
	return &NullableHyperVProtectionGroupParams{value: val, isSet: true}
}

func (v NullableHyperVProtectionGroupParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHyperVProtectionGroupParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o HyperVProtectionGroupParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}