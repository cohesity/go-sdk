/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// RecoverUdaParams Specifies the parameters to recover Universal Data Adapter objects.
type RecoverUdaParams struct {
	// Specifies the 'Source Registration ID' of the source where the objects are to be recovered. If this is not specified, the recovery job will recover to the original location.
	RecoverTo NullableInt64 `json:"recoverTo,omitempty"`
	// Specifies the maximum number of concurrent IO Streams that will be created to exchange data with the cluster. If not specified, the default value is taken as 1.
	Concurrency NullableInt32 `json:"concurrency,omitempty"`
	// Specifies the maximum number of view mounts per host. If not specified, the default value is taken as 1.
	Mounts NullableInt32 `json:"mounts,omitempty"`
	// Specifies the arguments for recovery of Universal Data Adapter objects.
	RecoveryArgs NullableString `json:"recoveryArgs,omitempty"`
	// Specifies the local snapshot ids and other details of the objects to be recovered.
	Snapshots []RecoverUdaSnapshotParams `json:"snapshots"`
	// This field will hold the warnings in cases where the job status is SucceededWithWarnings.
	Warnings []string `json:"warnings,omitempty"`
}

// NewRecoverUdaParams instantiates a new RecoverUdaParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverUdaParams(snapshots []RecoverUdaSnapshotParams) *RecoverUdaParams {
	this := RecoverUdaParams{}
	var concurrency int32 = 1
	this.Concurrency = *NewNullableInt32(&concurrency)
	var mounts int32 = 1
	this.Mounts = *NewNullableInt32(&mounts)
	this.Snapshots = snapshots
	return &this
}

// NewRecoverUdaParamsWithDefaults instantiates a new RecoverUdaParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverUdaParamsWithDefaults() *RecoverUdaParams {
	this := RecoverUdaParams{}
	var concurrency int32 = 1
	this.Concurrency = *NewNullableInt32(&concurrency)
	var mounts int32 = 1
	this.Mounts = *NewNullableInt32(&mounts)
	return &this
}

// GetRecoverTo returns the RecoverTo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverUdaParams) GetRecoverTo() int64 {
	if o == nil || o.RecoverTo.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RecoverTo.Get()
}

// GetRecoverToOk returns a tuple with the RecoverTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverUdaParams) GetRecoverToOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RecoverTo.Get(), o.RecoverTo.IsSet()
}

// HasRecoverTo returns a boolean if a field has been set.
func (o *RecoverUdaParams) HasRecoverTo() bool {
	if o != nil && o.RecoverTo.IsSet() {
		return true
	}

	return false
}

// SetRecoverTo gets a reference to the given NullableInt64 and assigns it to the RecoverTo field.
func (o *RecoverUdaParams) SetRecoverTo(v int64) {
	o.RecoverTo.Set(&v)
}
// SetRecoverToNil sets the value for RecoverTo to be an explicit nil
func (o *RecoverUdaParams) SetRecoverToNil() {
	o.RecoverTo.Set(nil)
}

// UnsetRecoverTo ensures that no value is present for RecoverTo, not even an explicit nil
func (o *RecoverUdaParams) UnsetRecoverTo() {
	o.RecoverTo.Unset()
}

// GetConcurrency returns the Concurrency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverUdaParams) GetConcurrency() int32 {
	if o == nil || o.Concurrency.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Concurrency.Get()
}

// GetConcurrencyOk returns a tuple with the Concurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverUdaParams) GetConcurrencyOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Concurrency.Get(), o.Concurrency.IsSet()
}

// HasConcurrency returns a boolean if a field has been set.
func (o *RecoverUdaParams) HasConcurrency() bool {
	if o != nil && o.Concurrency.IsSet() {
		return true
	}

	return false
}

// SetConcurrency gets a reference to the given NullableInt32 and assigns it to the Concurrency field.
func (o *RecoverUdaParams) SetConcurrency(v int32) {
	o.Concurrency.Set(&v)
}
// SetConcurrencyNil sets the value for Concurrency to be an explicit nil
func (o *RecoverUdaParams) SetConcurrencyNil() {
	o.Concurrency.Set(nil)
}

// UnsetConcurrency ensures that no value is present for Concurrency, not even an explicit nil
func (o *RecoverUdaParams) UnsetConcurrency() {
	o.Concurrency.Unset()
}

// GetMounts returns the Mounts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverUdaParams) GetMounts() int32 {
	if o == nil || o.Mounts.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Mounts.Get()
}

// GetMountsOk returns a tuple with the Mounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverUdaParams) GetMountsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Mounts.Get(), o.Mounts.IsSet()
}

// HasMounts returns a boolean if a field has been set.
func (o *RecoverUdaParams) HasMounts() bool {
	if o != nil && o.Mounts.IsSet() {
		return true
	}

	return false
}

// SetMounts gets a reference to the given NullableInt32 and assigns it to the Mounts field.
func (o *RecoverUdaParams) SetMounts(v int32) {
	o.Mounts.Set(&v)
}
// SetMountsNil sets the value for Mounts to be an explicit nil
func (o *RecoverUdaParams) SetMountsNil() {
	o.Mounts.Set(nil)
}

// UnsetMounts ensures that no value is present for Mounts, not even an explicit nil
func (o *RecoverUdaParams) UnsetMounts() {
	o.Mounts.Unset()
}

// GetRecoveryArgs returns the RecoveryArgs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverUdaParams) GetRecoveryArgs() string {
	if o == nil || o.RecoveryArgs.Get() == nil {
		var ret string
		return ret
	}
	return *o.RecoveryArgs.Get()
}

// GetRecoveryArgsOk returns a tuple with the RecoveryArgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverUdaParams) GetRecoveryArgsOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RecoveryArgs.Get(), o.RecoveryArgs.IsSet()
}

// HasRecoveryArgs returns a boolean if a field has been set.
func (o *RecoverUdaParams) HasRecoveryArgs() bool {
	if o != nil && o.RecoveryArgs.IsSet() {
		return true
	}

	return false
}

// SetRecoveryArgs gets a reference to the given NullableString and assigns it to the RecoveryArgs field.
func (o *RecoverUdaParams) SetRecoveryArgs(v string) {
	o.RecoveryArgs.Set(&v)
}
// SetRecoveryArgsNil sets the value for RecoveryArgs to be an explicit nil
func (o *RecoverUdaParams) SetRecoveryArgsNil() {
	o.RecoveryArgs.Set(nil)
}

// UnsetRecoveryArgs ensures that no value is present for RecoveryArgs, not even an explicit nil
func (o *RecoverUdaParams) UnsetRecoveryArgs() {
	o.RecoveryArgs.Unset()
}

// GetSnapshots returns the Snapshots field value
// If the value is explicit nil, the zero value for []RecoverUdaSnapshotParams will be returned
func (o *RecoverUdaParams) GetSnapshots() []RecoverUdaSnapshotParams {
	if o == nil {
		var ret []RecoverUdaSnapshotParams
		return ret
	}

	return o.Snapshots
}

// GetSnapshotsOk returns a tuple with the Snapshots field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverUdaParams) GetSnapshotsOk() (*[]RecoverUdaSnapshotParams, bool) {
	if o == nil || o.Snapshots == nil {
		return nil, false
	}
	return &o.Snapshots, true
}

// SetSnapshots sets field value
func (o *RecoverUdaParams) SetSnapshots(v []RecoverUdaSnapshotParams) {
	o.Snapshots = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverUdaParams) GetWarnings() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverUdaParams) GetWarningsOk() (*[]string, bool) {
	if o == nil || o.Warnings == nil {
		return nil, false
	}
	return &o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *RecoverUdaParams) HasWarnings() bool {
	if o != nil && o.Warnings != nil {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []string and assigns it to the Warnings field.
func (o *RecoverUdaParams) SetWarnings(v []string) {
	o.Warnings = v
}

func (o RecoverUdaParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RecoverTo.IsSet() {
		toSerialize["recoverTo"] = o.RecoverTo.Get()
	}
	if o.Concurrency.IsSet() {
		toSerialize["concurrency"] = o.Concurrency.Get()
	}
	if o.Mounts.IsSet() {
		toSerialize["mounts"] = o.Mounts.Get()
	}
	if o.RecoveryArgs.IsSet() {
		toSerialize["recoveryArgs"] = o.RecoveryArgs.Get()
	}
	if o.Snapshots != nil {
		toSerialize["snapshots"] = o.Snapshots
	}
	if o.Warnings != nil {
		toSerialize["warnings"] = o.Warnings
	}
	return json.Marshal(toSerialize)
}

type NullableRecoverUdaParams struct {
	value *RecoverUdaParams
	isSet bool
}

func (v NullableRecoverUdaParams) Get() *RecoverUdaParams {
	return v.value
}

func (v *NullableRecoverUdaParams) Set(val *RecoverUdaParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverUdaParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverUdaParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverUdaParams(val *RecoverUdaParams) *NullableRecoverUdaParams {
	return &NullableRecoverUdaParams{value: val, isSet: true}
}

func (v NullableRecoverUdaParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverUdaParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o RecoverUdaParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}