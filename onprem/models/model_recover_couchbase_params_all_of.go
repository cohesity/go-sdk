/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// RecoverCouchbaseParamsAllOf struct for RecoverCouchbaseParamsAllOf
type RecoverCouchbaseParamsAllOf struct {
	// Specifies the local snapshot ids of the Objects to be recovered.
	Snapshots []RecoverCouchbaseSnapshotParams `json:"snapshots"`
	// A suffix that is to be applied to all recovered objects.
	Suffix NullableString `json:"suffix,omitempty"`
	FilterDocumentsParams FilterDocumentsParams `json:"filterDocumentsParams"`
	// If set to true, docuements from the bucket being recovered will be appended into the bucket at the destination.
	AppendDocuments NullableBool `json:"appendDocuments,omitempty"`
	// Set to true to recover only the bucket configurations. No documents will be recovered.
	DdlOnlyRecovery NullableBool `json:"ddlOnlyRecovery,omitempty"`
	// If set to true existing users will be replaced with users from the bucket being recovered.
	OverwriteUsers NullableBool `json:"overwriteUsers,omitempty"`
}

// NewRecoverCouchbaseParamsAllOf instantiates a new RecoverCouchbaseParamsAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverCouchbaseParamsAllOf(snapshots []RecoverCouchbaseSnapshotParams, filterDocumentsParams FilterDocumentsParams) *RecoverCouchbaseParamsAllOf {
	this := RecoverCouchbaseParamsAllOf{}
	this.Snapshots = snapshots
	this.FilterDocumentsParams = filterDocumentsParams
	return &this
}

// NewRecoverCouchbaseParamsAllOfWithDefaults instantiates a new RecoverCouchbaseParamsAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverCouchbaseParamsAllOfWithDefaults() *RecoverCouchbaseParamsAllOf {
	this := RecoverCouchbaseParamsAllOf{}
	return &this
}

// GetSnapshots returns the Snapshots field value
// If the value is explicit nil, the zero value for []RecoverCouchbaseSnapshotParams will be returned
func (o *RecoverCouchbaseParamsAllOf) GetSnapshots() []RecoverCouchbaseSnapshotParams {
	if o == nil {
		var ret []RecoverCouchbaseSnapshotParams
		return ret
	}

	return o.Snapshots
}

// GetSnapshotsOk returns a tuple with the Snapshots field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverCouchbaseParamsAllOf) GetSnapshotsOk() (*[]RecoverCouchbaseSnapshotParams, bool) {
	if o == nil || o.Snapshots == nil {
		return nil, false
	}
	return &o.Snapshots, true
}

// SetSnapshots sets field value
func (o *RecoverCouchbaseParamsAllOf) SetSnapshots(v []RecoverCouchbaseSnapshotParams) {
	o.Snapshots = v
}

// GetSuffix returns the Suffix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverCouchbaseParamsAllOf) GetSuffix() string {
	if o == nil || o.Suffix.Get() == nil {
		var ret string
		return ret
	}
	return *o.Suffix.Get()
}

// GetSuffixOk returns a tuple with the Suffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverCouchbaseParamsAllOf) GetSuffixOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Suffix.Get(), o.Suffix.IsSet()
}

// HasSuffix returns a boolean if a field has been set.
func (o *RecoverCouchbaseParamsAllOf) HasSuffix() bool {
	if o != nil && o.Suffix.IsSet() {
		return true
	}

	return false
}

// SetSuffix gets a reference to the given NullableString and assigns it to the Suffix field.
func (o *RecoverCouchbaseParamsAllOf) SetSuffix(v string) {
	o.Suffix.Set(&v)
}
// SetSuffixNil sets the value for Suffix to be an explicit nil
func (o *RecoverCouchbaseParamsAllOf) SetSuffixNil() {
	o.Suffix.Set(nil)
}

// UnsetSuffix ensures that no value is present for Suffix, not even an explicit nil
func (o *RecoverCouchbaseParamsAllOf) UnsetSuffix() {
	o.Suffix.Unset()
}

// GetFilterDocumentsParams returns the FilterDocumentsParams field value
func (o *RecoverCouchbaseParamsAllOf) GetFilterDocumentsParams() FilterDocumentsParams {
	if o == nil {
		var ret FilterDocumentsParams
		return ret
	}

	return o.FilterDocumentsParams
}

// GetFilterDocumentsParamsOk returns a tuple with the FilterDocumentsParams field value
// and a boolean to check if the value has been set.
func (o *RecoverCouchbaseParamsAllOf) GetFilterDocumentsParamsOk() (*FilterDocumentsParams, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FilterDocumentsParams, true
}

// SetFilterDocumentsParams sets field value
func (o *RecoverCouchbaseParamsAllOf) SetFilterDocumentsParams(v FilterDocumentsParams) {
	o.FilterDocumentsParams = v
}

// GetAppendDocuments returns the AppendDocuments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverCouchbaseParamsAllOf) GetAppendDocuments() bool {
	if o == nil || o.AppendDocuments.Get() == nil {
		var ret bool
		return ret
	}
	return *o.AppendDocuments.Get()
}

// GetAppendDocumentsOk returns a tuple with the AppendDocuments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverCouchbaseParamsAllOf) GetAppendDocumentsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AppendDocuments.Get(), o.AppendDocuments.IsSet()
}

// HasAppendDocuments returns a boolean if a field has been set.
func (o *RecoverCouchbaseParamsAllOf) HasAppendDocuments() bool {
	if o != nil && o.AppendDocuments.IsSet() {
		return true
	}

	return false
}

// SetAppendDocuments gets a reference to the given NullableBool and assigns it to the AppendDocuments field.
func (o *RecoverCouchbaseParamsAllOf) SetAppendDocuments(v bool) {
	o.AppendDocuments.Set(&v)
}
// SetAppendDocumentsNil sets the value for AppendDocuments to be an explicit nil
func (o *RecoverCouchbaseParamsAllOf) SetAppendDocumentsNil() {
	o.AppendDocuments.Set(nil)
}

// UnsetAppendDocuments ensures that no value is present for AppendDocuments, not even an explicit nil
func (o *RecoverCouchbaseParamsAllOf) UnsetAppendDocuments() {
	o.AppendDocuments.Unset()
}

// GetDdlOnlyRecovery returns the DdlOnlyRecovery field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverCouchbaseParamsAllOf) GetDdlOnlyRecovery() bool {
	if o == nil || o.DdlOnlyRecovery.Get() == nil {
		var ret bool
		return ret
	}
	return *o.DdlOnlyRecovery.Get()
}

// GetDdlOnlyRecoveryOk returns a tuple with the DdlOnlyRecovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverCouchbaseParamsAllOf) GetDdlOnlyRecoveryOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DdlOnlyRecovery.Get(), o.DdlOnlyRecovery.IsSet()
}

// HasDdlOnlyRecovery returns a boolean if a field has been set.
func (o *RecoverCouchbaseParamsAllOf) HasDdlOnlyRecovery() bool {
	if o != nil && o.DdlOnlyRecovery.IsSet() {
		return true
	}

	return false
}

// SetDdlOnlyRecovery gets a reference to the given NullableBool and assigns it to the DdlOnlyRecovery field.
func (o *RecoverCouchbaseParamsAllOf) SetDdlOnlyRecovery(v bool) {
	o.DdlOnlyRecovery.Set(&v)
}
// SetDdlOnlyRecoveryNil sets the value for DdlOnlyRecovery to be an explicit nil
func (o *RecoverCouchbaseParamsAllOf) SetDdlOnlyRecoveryNil() {
	o.DdlOnlyRecovery.Set(nil)
}

// UnsetDdlOnlyRecovery ensures that no value is present for DdlOnlyRecovery, not even an explicit nil
func (o *RecoverCouchbaseParamsAllOf) UnsetDdlOnlyRecovery() {
	o.DdlOnlyRecovery.Unset()
}

// GetOverwriteUsers returns the OverwriteUsers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverCouchbaseParamsAllOf) GetOverwriteUsers() bool {
	if o == nil || o.OverwriteUsers.Get() == nil {
		var ret bool
		return ret
	}
	return *o.OverwriteUsers.Get()
}

// GetOverwriteUsersOk returns a tuple with the OverwriteUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverCouchbaseParamsAllOf) GetOverwriteUsersOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OverwriteUsers.Get(), o.OverwriteUsers.IsSet()
}

// HasOverwriteUsers returns a boolean if a field has been set.
func (o *RecoverCouchbaseParamsAllOf) HasOverwriteUsers() bool {
	if o != nil && o.OverwriteUsers.IsSet() {
		return true
	}

	return false
}

// SetOverwriteUsers gets a reference to the given NullableBool and assigns it to the OverwriteUsers field.
func (o *RecoverCouchbaseParamsAllOf) SetOverwriteUsers(v bool) {
	o.OverwriteUsers.Set(&v)
}
// SetOverwriteUsersNil sets the value for OverwriteUsers to be an explicit nil
func (o *RecoverCouchbaseParamsAllOf) SetOverwriteUsersNil() {
	o.OverwriteUsers.Set(nil)
}

// UnsetOverwriteUsers ensures that no value is present for OverwriteUsers, not even an explicit nil
func (o *RecoverCouchbaseParamsAllOf) UnsetOverwriteUsers() {
	o.OverwriteUsers.Unset()
}

func (o RecoverCouchbaseParamsAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Snapshots != nil {
		toSerialize["snapshots"] = o.Snapshots
	}
	if o.Suffix.IsSet() {
		toSerialize["suffix"] = o.Suffix.Get()
	}
	if true {
		toSerialize["filterDocumentsParams"] = o.FilterDocumentsParams
	}
	if o.AppendDocuments.IsSet() {
		toSerialize["appendDocuments"] = o.AppendDocuments.Get()
	}
	if o.DdlOnlyRecovery.IsSet() {
		toSerialize["ddlOnlyRecovery"] = o.DdlOnlyRecovery.Get()
	}
	if o.OverwriteUsers.IsSet() {
		toSerialize["overwriteUsers"] = o.OverwriteUsers.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRecoverCouchbaseParamsAllOf struct {
	value *RecoverCouchbaseParamsAllOf
	isSet bool
}

func (v NullableRecoverCouchbaseParamsAllOf) Get() *RecoverCouchbaseParamsAllOf {
	return v.value
}

func (v *NullableRecoverCouchbaseParamsAllOf) Set(val *RecoverCouchbaseParamsAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverCouchbaseParamsAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverCouchbaseParamsAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverCouchbaseParamsAllOf(val *RecoverCouchbaseParamsAllOf) *NullableRecoverCouchbaseParamsAllOf {
	return &NullableRecoverCouchbaseParamsAllOf{value: val, isSet: true}
}

func (v NullableRecoverCouchbaseParamsAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverCouchbaseParamsAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o RecoverCouchbaseParamsAllOf) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}