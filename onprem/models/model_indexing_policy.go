/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// IndexingPolicy Specifies settings for indexing files found in an Object (such as a VM) so these files can be searched and recovered. This also specifies inclusion and exclusion rules that determine the directories to index.
type IndexingPolicy struct {
	// Specifies if the files found in an Object (such as a VM) should be indexed. If true (the default), files are indexed.
	EnableIndexing NullableBool `json:"enableIndexing"`
	// Array of Indexed Directories. Specifies a list of directories to index. Regular expression can also be specified to provide the directory paths. Example: /Users/<wildcard>/AppData
	IncludePaths []string `json:"includePaths,omitempty"`
	// Array of Excluded Directories. Specifies a list of directories to exclude from indexing.Regular expression can also be specified to provide the directory paths. Example: /Users/<wildcard>/AppData
	ExcludePaths []string `json:"excludePaths,omitempty"`
}

// NewIndexingPolicy instantiates a new IndexingPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndexingPolicy(enableIndexing NullableBool) *IndexingPolicy {
	this := IndexingPolicy{}
	this.EnableIndexing = enableIndexing
	return &this
}

// NewIndexingPolicyWithDefaults instantiates a new IndexingPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndexingPolicyWithDefaults() *IndexingPolicy {
	this := IndexingPolicy{}
	return &this
}

// GetEnableIndexing returns the EnableIndexing field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *IndexingPolicy) GetEnableIndexing() bool {
	if o == nil || o.EnableIndexing.Get() == nil {
		var ret bool
		return ret
	}

	return *o.EnableIndexing.Get()
}

// GetEnableIndexingOk returns a tuple with the EnableIndexing field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IndexingPolicy) GetEnableIndexingOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableIndexing.Get(), o.EnableIndexing.IsSet()
}

// SetEnableIndexing sets field value
func (o *IndexingPolicy) SetEnableIndexing(v bool) {
	o.EnableIndexing.Set(&v)
}

// GetIncludePaths returns the IncludePaths field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IndexingPolicy) GetIncludePaths() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.IncludePaths
}

// GetIncludePathsOk returns a tuple with the IncludePaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IndexingPolicy) GetIncludePathsOk() (*[]string, bool) {
	if o == nil || o.IncludePaths == nil {
		return nil, false
	}
	return &o.IncludePaths, true
}

// HasIncludePaths returns a boolean if a field has been set.
func (o *IndexingPolicy) HasIncludePaths() bool {
	if o != nil && o.IncludePaths != nil {
		return true
	}

	return false
}

// SetIncludePaths gets a reference to the given []string and assigns it to the IncludePaths field.
func (o *IndexingPolicy) SetIncludePaths(v []string) {
	o.IncludePaths = v
}

// GetExcludePaths returns the ExcludePaths field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IndexingPolicy) GetExcludePaths() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.ExcludePaths
}

// GetExcludePathsOk returns a tuple with the ExcludePaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IndexingPolicy) GetExcludePathsOk() (*[]string, bool) {
	if o == nil || o.ExcludePaths == nil {
		return nil, false
	}
	return &o.ExcludePaths, true
}

// HasExcludePaths returns a boolean if a field has been set.
func (o *IndexingPolicy) HasExcludePaths() bool {
	if o != nil && o.ExcludePaths != nil {
		return true
	}

	return false
}

// SetExcludePaths gets a reference to the given []string and assigns it to the ExcludePaths field.
func (o *IndexingPolicy) SetExcludePaths(v []string) {
	o.ExcludePaths = v
}

func (o IndexingPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["enableIndexing"] = o.EnableIndexing.Get()
	}
	if o.IncludePaths != nil {
		toSerialize["includePaths"] = o.IncludePaths
	}
	if o.ExcludePaths != nil {
		toSerialize["excludePaths"] = o.ExcludePaths
	}
	return json.Marshal(toSerialize)
}

type NullableIndexingPolicy struct {
	value *IndexingPolicy
	isSet bool
}

func (v NullableIndexingPolicy) Get() *IndexingPolicy {
	return v.value
}

func (v *NullableIndexingPolicy) Set(val *IndexingPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableIndexingPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableIndexingPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndexingPolicy(val *IndexingPolicy) *NullableIndexingPolicy {
	return &NullableIndexingPolicy{value: val, isSet: true}
}

func (v NullableIndexingPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndexingPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o IndexingPolicy) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}