/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// HiveAdditionalParams Additional params for Hive protection source.
type HiveAdditionalParams struct {
	// The MetastoreAddress for this Hive.
	MetastoreAddress *string `json:"metastoreAddress,omitempty"`
	// The MetastorePort for this Hive.
	MetastorePort *int32 `json:"metastorePort,omitempty"`
	// Authentication type.
	AuthType NullableString `json:"authType,omitempty"`
}

// NewHiveAdditionalParams instantiates a new HiveAdditionalParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHiveAdditionalParams() *HiveAdditionalParams {
	this := HiveAdditionalParams{}
	return &this
}

// NewHiveAdditionalParamsWithDefaults instantiates a new HiveAdditionalParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHiveAdditionalParamsWithDefaults() *HiveAdditionalParams {
	this := HiveAdditionalParams{}
	return &this
}

// GetMetastoreAddress returns the MetastoreAddress field value if set, zero value otherwise.
func (o *HiveAdditionalParams) GetMetastoreAddress() string {
	if o == nil || o.MetastoreAddress == nil {
		var ret string
		return ret
	}
	return *o.MetastoreAddress
}

// GetMetastoreAddressOk returns a tuple with the MetastoreAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HiveAdditionalParams) GetMetastoreAddressOk() (*string, bool) {
	if o == nil || o.MetastoreAddress == nil {
		return nil, false
	}
	return o.MetastoreAddress, true
}

// HasMetastoreAddress returns a boolean if a field has been set.
func (o *HiveAdditionalParams) HasMetastoreAddress() bool {
	if o != nil && o.MetastoreAddress != nil {
		return true
	}

	return false
}

// SetMetastoreAddress gets a reference to the given string and assigns it to the MetastoreAddress field.
func (o *HiveAdditionalParams) SetMetastoreAddress(v string) {
	o.MetastoreAddress = &v
}

// GetMetastorePort returns the MetastorePort field value if set, zero value otherwise.
func (o *HiveAdditionalParams) GetMetastorePort() int32 {
	if o == nil || o.MetastorePort == nil {
		var ret int32
		return ret
	}
	return *o.MetastorePort
}

// GetMetastorePortOk returns a tuple with the MetastorePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HiveAdditionalParams) GetMetastorePortOk() (*int32, bool) {
	if o == nil || o.MetastorePort == nil {
		return nil, false
	}
	return o.MetastorePort, true
}

// HasMetastorePort returns a boolean if a field has been set.
func (o *HiveAdditionalParams) HasMetastorePort() bool {
	if o != nil && o.MetastorePort != nil {
		return true
	}

	return false
}

// SetMetastorePort gets a reference to the given int32 and assigns it to the MetastorePort field.
func (o *HiveAdditionalParams) SetMetastorePort(v int32) {
	o.MetastorePort = &v
}

// GetAuthType returns the AuthType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HiveAdditionalParams) GetAuthType() string {
	if o == nil || o.AuthType.Get() == nil {
		var ret string
		return ret
	}
	return *o.AuthType.Get()
}

// GetAuthTypeOk returns a tuple with the AuthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HiveAdditionalParams) GetAuthTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AuthType.Get(), o.AuthType.IsSet()
}

// HasAuthType returns a boolean if a field has been set.
func (o *HiveAdditionalParams) HasAuthType() bool {
	if o != nil && o.AuthType.IsSet() {
		return true
	}

	return false
}

// SetAuthType gets a reference to the given NullableString and assigns it to the AuthType field.
func (o *HiveAdditionalParams) SetAuthType(v string) {
	o.AuthType.Set(&v)
}
// SetAuthTypeNil sets the value for AuthType to be an explicit nil
func (o *HiveAdditionalParams) SetAuthTypeNil() {
	o.AuthType.Set(nil)
}

// UnsetAuthType ensures that no value is present for AuthType, not even an explicit nil
func (o *HiveAdditionalParams) UnsetAuthType() {
	o.AuthType.Unset()
}

func (o HiveAdditionalParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MetastoreAddress != nil {
		toSerialize["metastoreAddress"] = o.MetastoreAddress
	}
	if o.MetastorePort != nil {
		toSerialize["metastorePort"] = o.MetastorePort
	}
	if o.AuthType.IsSet() {
		toSerialize["authType"] = o.AuthType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableHiveAdditionalParams struct {
	value *HiveAdditionalParams
	isSet bool
}

func (v NullableHiveAdditionalParams) Get() *HiveAdditionalParams {
	return v.value
}

func (v *NullableHiveAdditionalParams) Set(val *HiveAdditionalParams) {
	v.value = val
	v.isSet = true
}

func (v NullableHiveAdditionalParams) IsSet() bool {
	return v.isSet
}

func (v *NullableHiveAdditionalParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHiveAdditionalParams(val *HiveAdditionalParams) *NullableHiveAdditionalParams {
	return &NullableHiveAdditionalParams{value: val, isSet: true}
}

func (v NullableHiveAdditionalParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHiveAdditionalParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o HiveAdditionalParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}