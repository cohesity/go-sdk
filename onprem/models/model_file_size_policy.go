/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// FileSizePolicy Specifies the file's selection rule by file size eg. 1. select files greather than 10 Bytes. 2. select files less than 20 TiB. 3. select files greather than 5 MiB. type: object
type FileSizePolicy struct {
	// Specifies condition for the file selection.
	Condition NullableString `json:"condition,omitempty"`
	// Specifies the number of bytes.
	NBytes NullableInt64 `json:"nBytes,omitempty"`
}

// NewFileSizePolicy instantiates a new FileSizePolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileSizePolicy() *FileSizePolicy {
	this := FileSizePolicy{}
	return &this
}

// NewFileSizePolicyWithDefaults instantiates a new FileSizePolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileSizePolicyWithDefaults() *FileSizePolicy {
	this := FileSizePolicy{}
	return &this
}

// GetCondition returns the Condition field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileSizePolicy) GetCondition() string {
	if o == nil || o.Condition.Get() == nil {
		var ret string
		return ret
	}
	return *o.Condition.Get()
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileSizePolicy) GetConditionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Condition.Get(), o.Condition.IsSet()
}

// HasCondition returns a boolean if a field has been set.
func (o *FileSizePolicy) HasCondition() bool {
	if o != nil && o.Condition.IsSet() {
		return true
	}

	return false
}

// SetCondition gets a reference to the given NullableString and assigns it to the Condition field.
func (o *FileSizePolicy) SetCondition(v string) {
	o.Condition.Set(&v)
}
// SetConditionNil sets the value for Condition to be an explicit nil
func (o *FileSizePolicy) SetConditionNil() {
	o.Condition.Set(nil)
}

// UnsetCondition ensures that no value is present for Condition, not even an explicit nil
func (o *FileSizePolicy) UnsetCondition() {
	o.Condition.Unset()
}

// GetNBytes returns the NBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileSizePolicy) GetNBytes() int64 {
	if o == nil || o.NBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NBytes.Get()
}

// GetNBytesOk returns a tuple with the NBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileSizePolicy) GetNBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NBytes.Get(), o.NBytes.IsSet()
}

// HasNBytes returns a boolean if a field has been set.
func (o *FileSizePolicy) HasNBytes() bool {
	if o != nil && o.NBytes.IsSet() {
		return true
	}

	return false
}

// SetNBytes gets a reference to the given NullableInt64 and assigns it to the NBytes field.
func (o *FileSizePolicy) SetNBytes(v int64) {
	o.NBytes.Set(&v)
}
// SetNBytesNil sets the value for NBytes to be an explicit nil
func (o *FileSizePolicy) SetNBytesNil() {
	o.NBytes.Set(nil)
}

// UnsetNBytes ensures that no value is present for NBytes, not even an explicit nil
func (o *FileSizePolicy) UnsetNBytes() {
	o.NBytes.Unset()
}

func (o FileSizePolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Condition.IsSet() {
		toSerialize["condition"] = o.Condition.Get()
	}
	if o.NBytes.IsSet() {
		toSerialize["nBytes"] = o.NBytes.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableFileSizePolicy struct {
	value *FileSizePolicy
	isSet bool
}

func (v NullableFileSizePolicy) Get() *FileSizePolicy {
	return v.value
}

func (v *NullableFileSizePolicy) Set(val *FileSizePolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableFileSizePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableFileSizePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileSizePolicy(val *FileSizePolicy) *NullableFileSizePolicy {
	return &NullableFileSizePolicy{value: val, isSet: true}
}

func (v NullableFileSizePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileSizePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o FileSizePolicy) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}