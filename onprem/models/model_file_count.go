/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// FileCount Specifies the number of files with provided size range.
type FileCount struct {
	// Specifies the lower bound of file size in bytes. This value is inclusive.
	LowerSizeBytes NullableInt64 `json:"lowerSizeBytes,omitempty"`
	// Specifies the upper bound of file size in bytes. This value is exclusive.
	UpperSizeBytes NullableInt64 `json:"upperSizeBytes,omitempty"`
	// Specifies the number of files with size in this range.
	Count NullableInt64 `json:"count,omitempty"`
}

// NewFileCount instantiates a new FileCount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileCount() *FileCount {
	this := FileCount{}
	return &this
}

// NewFileCountWithDefaults instantiates a new FileCount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileCountWithDefaults() *FileCount {
	this := FileCount{}
	return &this
}

// GetLowerSizeBytes returns the LowerSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileCount) GetLowerSizeBytes() int64 {
	if o == nil || o.LowerSizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LowerSizeBytes.Get()
}

// GetLowerSizeBytesOk returns a tuple with the LowerSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileCount) GetLowerSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LowerSizeBytes.Get(), o.LowerSizeBytes.IsSet()
}

// HasLowerSizeBytes returns a boolean if a field has been set.
func (o *FileCount) HasLowerSizeBytes() bool {
	if o != nil && o.LowerSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetLowerSizeBytes gets a reference to the given NullableInt64 and assigns it to the LowerSizeBytes field.
func (o *FileCount) SetLowerSizeBytes(v int64) {
	o.LowerSizeBytes.Set(&v)
}
// SetLowerSizeBytesNil sets the value for LowerSizeBytes to be an explicit nil
func (o *FileCount) SetLowerSizeBytesNil() {
	o.LowerSizeBytes.Set(nil)
}

// UnsetLowerSizeBytes ensures that no value is present for LowerSizeBytes, not even an explicit nil
func (o *FileCount) UnsetLowerSizeBytes() {
	o.LowerSizeBytes.Unset()
}

// GetUpperSizeBytes returns the UpperSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileCount) GetUpperSizeBytes() int64 {
	if o == nil || o.UpperSizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.UpperSizeBytes.Get()
}

// GetUpperSizeBytesOk returns a tuple with the UpperSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileCount) GetUpperSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UpperSizeBytes.Get(), o.UpperSizeBytes.IsSet()
}

// HasUpperSizeBytes returns a boolean if a field has been set.
func (o *FileCount) HasUpperSizeBytes() bool {
	if o != nil && o.UpperSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetUpperSizeBytes gets a reference to the given NullableInt64 and assigns it to the UpperSizeBytes field.
func (o *FileCount) SetUpperSizeBytes(v int64) {
	o.UpperSizeBytes.Set(&v)
}
// SetUpperSizeBytesNil sets the value for UpperSizeBytes to be an explicit nil
func (o *FileCount) SetUpperSizeBytesNil() {
	o.UpperSizeBytes.Set(nil)
}

// UnsetUpperSizeBytes ensures that no value is present for UpperSizeBytes, not even an explicit nil
func (o *FileCount) UnsetUpperSizeBytes() {
	o.UpperSizeBytes.Unset()
}

// GetCount returns the Count field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileCount) GetCount() int64 {
	if o == nil || o.Count.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Count.Get()
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileCount) GetCountOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Count.Get(), o.Count.IsSet()
}

// HasCount returns a boolean if a field has been set.
func (o *FileCount) HasCount() bool {
	if o != nil && o.Count.IsSet() {
		return true
	}

	return false
}

// SetCount gets a reference to the given NullableInt64 and assigns it to the Count field.
func (o *FileCount) SetCount(v int64) {
	o.Count.Set(&v)
}
// SetCountNil sets the value for Count to be an explicit nil
func (o *FileCount) SetCountNil() {
	o.Count.Set(nil)
}

// UnsetCount ensures that no value is present for Count, not even an explicit nil
func (o *FileCount) UnsetCount() {
	o.Count.Unset()
}

func (o FileCount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LowerSizeBytes.IsSet() {
		toSerialize["lowerSizeBytes"] = o.LowerSizeBytes.Get()
	}
	if o.UpperSizeBytes.IsSet() {
		toSerialize["upperSizeBytes"] = o.UpperSizeBytes.Get()
	}
	if o.Count.IsSet() {
		toSerialize["count"] = o.Count.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableFileCount struct {
	value *FileCount
	isSet bool
}

func (v NullableFileCount) Get() *FileCount {
	return v.value
}

func (v *NullableFileCount) Set(val *FileCount) {
	v.value = val
	v.isSet = true
}

func (v NullableFileCount) IsSet() bool {
	return v.isSet
}

func (v *NullableFileCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileCount(val *FileCount) *NullableFileCount {
	return &NullableFileCount{value: val, isSet: true}
}

func (v NullableFileCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o FileCount) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}