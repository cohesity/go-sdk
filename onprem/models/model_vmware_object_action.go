/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// VmwareObjectAction Actions on VMware objects.
type VmwareObjectAction struct {
	// Specifies the actions on vmware objects.
	VmwareObjectAction *string `json:"vmwareObjectAction,omitempty"`
}

// NewVmwareObjectAction instantiates a new VmwareObjectAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmwareObjectAction() *VmwareObjectAction {
	this := VmwareObjectAction{}
	return &this
}

// NewVmwareObjectActionWithDefaults instantiates a new VmwareObjectAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmwareObjectActionWithDefaults() *VmwareObjectAction {
	this := VmwareObjectAction{}
	return &this
}

// GetVmwareObjectAction returns the VmwareObjectAction field value if set, zero value otherwise.
func (o *VmwareObjectAction) GetVmwareObjectAction() string {
	if o == nil || o.VmwareObjectAction == nil {
		var ret string
		return ret
	}
	return *o.VmwareObjectAction
}

// GetVmwareObjectActionOk returns a tuple with the VmwareObjectAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmwareObjectAction) GetVmwareObjectActionOk() (*string, bool) {
	if o == nil || o.VmwareObjectAction == nil {
		return nil, false
	}
	return o.VmwareObjectAction, true
}

// HasVmwareObjectAction returns a boolean if a field has been set.
func (o *VmwareObjectAction) HasVmwareObjectAction() bool {
	if o != nil && o.VmwareObjectAction != nil {
		return true
	}

	return false
}

// SetVmwareObjectAction gets a reference to the given string and assigns it to the VmwareObjectAction field.
func (o *VmwareObjectAction) SetVmwareObjectAction(v string) {
	o.VmwareObjectAction = &v
}

func (o VmwareObjectAction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.VmwareObjectAction != nil {
		toSerialize["vmwareObjectAction"] = o.VmwareObjectAction
	}
	return json.Marshal(toSerialize)
}

type NullableVmwareObjectAction struct {
	value *VmwareObjectAction
	isSet bool
}

func (v NullableVmwareObjectAction) Get() *VmwareObjectAction {
	return v.value
}

func (v *NullableVmwareObjectAction) Set(val *VmwareObjectAction) {
	v.value = val
	v.isSet = true
}

func (v NullableVmwareObjectAction) IsSet() bool {
	return v.isSet
}

func (v *NullableVmwareObjectAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmwareObjectAction(val *VmwareObjectAction) *NullableVmwareObjectAction {
	return &NullableVmwareObjectAction{value: val, isSet: true}
}

func (v NullableVmwareObjectAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmwareObjectAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o VmwareObjectAction) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}