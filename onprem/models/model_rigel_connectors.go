/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// RigelConnectors Specify a list of Rigel connectors.
type RigelConnectors struct {
	// Specifies a list of Rigel Connectors.
	RigelConnectors []RigelConnector `json:"RigelConnectors,omitempty"`
}

// NewRigelConnectors instantiates a new RigelConnectors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRigelConnectors() *RigelConnectors {
	this := RigelConnectors{}
	return &this
}

// NewRigelConnectorsWithDefaults instantiates a new RigelConnectors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRigelConnectorsWithDefaults() *RigelConnectors {
	this := RigelConnectors{}
	return &this
}

// GetRigelConnectors returns the RigelConnectors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RigelConnectors) GetRigelConnectors() []RigelConnector {
	if o == nil  {
		var ret []RigelConnector
		return ret
	}
	return o.RigelConnectors
}

// GetRigelConnectorsOk returns a tuple with the RigelConnectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RigelConnectors) GetRigelConnectorsOk() (*[]RigelConnector, bool) {
	if o == nil || o.RigelConnectors == nil {
		return nil, false
	}
	return &o.RigelConnectors, true
}

// HasRigelConnectors returns a boolean if a field has been set.
func (o *RigelConnectors) HasRigelConnectors() bool {
	if o != nil && o.RigelConnectors != nil {
		return true
	}

	return false
}

// SetRigelConnectors gets a reference to the given []RigelConnector and assigns it to the RigelConnectors field.
func (o *RigelConnectors) SetRigelConnectors(v []RigelConnector) {
	o.RigelConnectors = v
}

func (o RigelConnectors) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RigelConnectors != nil {
		toSerialize["RigelConnectors"] = o.RigelConnectors
	}
	return json.Marshal(toSerialize)
}

type NullableRigelConnectors struct {
	value *RigelConnectors
	isSet bool
}

func (v NullableRigelConnectors) Get() *RigelConnectors {
	return v.value
}

func (v *NullableRigelConnectors) Set(val *RigelConnectors) {
	v.value = val
	v.isSet = true
}

func (v NullableRigelConnectors) IsSet() bool {
	return v.isSet
}

func (v *NullableRigelConnectors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRigelConnectors(val *RigelConnectors) *NullableRigelConnectors {
	return &NullableRigelConnectors{value: val, isSet: true}
}

func (v NullableRigelConnectors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRigelConnectors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o RigelConnectors) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}