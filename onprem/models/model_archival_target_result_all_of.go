/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// ArchivalTargetResultAllOf struct for ArchivalTargetResultAllOf
type ArchivalTargetResultAllOf struct {
	// Type of Protection Group run. 'kRegular' indicates an incremental (CBT) backup. Incremental backups utilizing CBT (if supported) are captured of the target protection objects. The first run of a kRegular schedule captures all the blocks. 'kFull' indicates a full (no CBT) backup. A complete backup (all blocks) of the target protection objects are always captured and Change Block Tracking (CBT) is not utilized. 'kLog' indicates a Database Log backup. Capture the database transaction logs to allow rolling back to a specific point in time. 'kSystem' indicates system volume backup. It produces an image for bare metal recovery.
	RunType NullableString `json:"runType,omitempty"`
	// Indicated if SLA has been violated for this run.
	IsSlaViolated NullableBool `json:"isSlaViolated,omitempty"`
	// Snapshot id for a successful snapshot. This field will not be set if the archival Run fails to take the snapshot.
	SnapshotId NullableString `json:"snapshotId,omitempty"`
	// Specifies the start time of replication run in Unix epoch Timestamp(in microseconds) for an archival target.
	StartTimeUsecs NullableInt64 `json:"startTimeUsecs,omitempty"`
	// Specifies the end time of replication run in Unix epoch Timestamp(in microseconds) for an archival target.
	EndTimeUsecs NullableInt64 `json:"endTimeUsecs,omitempty"`
	// Specifies the time when the archival is queued for schedule in Unix epoch Timestamp(in microseconds) for a target.
	QueuedTimeUsecs NullableInt64 `json:"queuedTimeUsecs,omitempty"`
	// Whether this is an incremental archive. If set to true, this is an incremental archive, otherwise this is a full archive.
	IsIncremental NullableBool `json:"isIncremental,omitempty"`
	// Whether this is forever incremental or not
	IsForeverIncremental NullableBool `json:"isForeverIncremental,omitempty"`
	// Status of the replication run for an archival target. 'Running' indicates that the run is still running. 'Canceled' indicates that the run has been canceled. 'Canceling' indicates that the run is in the process of being canceled. 'Paused' indicates that the ongoing run has been paused. 'Failed' indicates that the run has failed. 'Missed' indicates that the run was unable to take place at the scheduled time because the previous run was still happening. 'Succeeded' indicates that the run has finished successfully. 'SucceededWithWarning' indicates that the run finished successfully, but there were some warning messages.
	Status NullableString `json:"status,omitempty"`
	// Message about the archival run.
	Message NullableString `json:"message,omitempty"`
	// Progress monitor task id for archival.
	ProgressTaskId NullableString `json:"progressTaskId,omitempty"`
	// Progress monitor task for indexing.
	IndexingTaskId NullableString `json:"indexingTaskId,omitempty"`
	// Specifies the count of objects for which backup was successful.
	SuccessfulObjectsCount NullableInt64 `json:"successfulObjectsCount,omitempty"`
	// Specifies the count of objects for which backup failed.
	FailedObjectsCount NullableInt64 `json:"failedObjectsCount,omitempty"`
	// Specifies the count of objects for which backup was cancelled.
	CancelledObjectsCount NullableInt64 `json:"cancelledObjectsCount,omitempty"`
	// Specifies the count of app objects for which backup was successful.
	SuccessfulAppObjectsCount NullableInt32 `json:"successfulAppObjectsCount,omitempty"`
	// Specifies the count of app objects for which backup failed.
	FailedAppObjectsCount NullableInt32 `json:"failedAppObjectsCount,omitempty"`
	// Specifies the count of app objects for which backup was cancelled.
	CancelledAppObjectsCount NullableInt32 `json:"cancelledAppObjectsCount,omitempty"`
	Stats *ArchivalDataStats `json:"stats,omitempty"`
	// Specifies whether the snapshot is deleted manually.
	IsManuallyDeleted NullableBool `json:"isManuallyDeleted,omitempty"`
	// Specifies the expiry time of attempt in Unix epoch Timestamp (in microseconds).
	ExpiryTimeUsecs NullableInt64 `json:"expiryTimeUsecs,omitempty"`
	DataLockConstraints *DataLockConstraints `json:"dataLockConstraints,omitempty"`
	// Specifies the legal hold status for a archival target.
	OnLegalHold NullableBool `json:"onLegalHold,omitempty"`
}

// NewArchivalTargetResultAllOf instantiates a new ArchivalTargetResultAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArchivalTargetResultAllOf() *ArchivalTargetResultAllOf {
	this := ArchivalTargetResultAllOf{}
	return &this
}

// NewArchivalTargetResultAllOfWithDefaults instantiates a new ArchivalTargetResultAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArchivalTargetResultAllOfWithDefaults() *ArchivalTargetResultAllOf {
	this := ArchivalTargetResultAllOf{}
	return &this
}

// GetRunType returns the RunType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalTargetResultAllOf) GetRunType() string {
	if o == nil || o.RunType.Get() == nil {
		var ret string
		return ret
	}
	return *o.RunType.Get()
}

// GetRunTypeOk returns a tuple with the RunType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalTargetResultAllOf) GetRunTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RunType.Get(), o.RunType.IsSet()
}

// HasRunType returns a boolean if a field has been set.
func (o *ArchivalTargetResultAllOf) HasRunType() bool {
	if o != nil && o.RunType.IsSet() {
		return true
	}

	return false
}

// SetRunType gets a reference to the given NullableString and assigns it to the RunType field.
func (o *ArchivalTargetResultAllOf) SetRunType(v string) {
	o.RunType.Set(&v)
}
// SetRunTypeNil sets the value for RunType to be an explicit nil
func (o *ArchivalTargetResultAllOf) SetRunTypeNil() {
	o.RunType.Set(nil)
}

// UnsetRunType ensures that no value is present for RunType, not even an explicit nil
func (o *ArchivalTargetResultAllOf) UnsetRunType() {
	o.RunType.Unset()
}

// GetIsSlaViolated returns the IsSlaViolated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalTargetResultAllOf) GetIsSlaViolated() bool {
	if o == nil || o.IsSlaViolated.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsSlaViolated.Get()
}

// GetIsSlaViolatedOk returns a tuple with the IsSlaViolated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalTargetResultAllOf) GetIsSlaViolatedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsSlaViolated.Get(), o.IsSlaViolated.IsSet()
}

// HasIsSlaViolated returns a boolean if a field has been set.
func (o *ArchivalTargetResultAllOf) HasIsSlaViolated() bool {
	if o != nil && o.IsSlaViolated.IsSet() {
		return true
	}

	return false
}

// SetIsSlaViolated gets a reference to the given NullableBool and assigns it to the IsSlaViolated field.
func (o *ArchivalTargetResultAllOf) SetIsSlaViolated(v bool) {
	o.IsSlaViolated.Set(&v)
}
// SetIsSlaViolatedNil sets the value for IsSlaViolated to be an explicit nil
func (o *ArchivalTargetResultAllOf) SetIsSlaViolatedNil() {
	o.IsSlaViolated.Set(nil)
}

// UnsetIsSlaViolated ensures that no value is present for IsSlaViolated, not even an explicit nil
func (o *ArchivalTargetResultAllOf) UnsetIsSlaViolated() {
	o.IsSlaViolated.Unset()
}

// GetSnapshotId returns the SnapshotId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalTargetResultAllOf) GetSnapshotId() string {
	if o == nil || o.SnapshotId.Get() == nil {
		var ret string
		return ret
	}
	return *o.SnapshotId.Get()
}

// GetSnapshotIdOk returns a tuple with the SnapshotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalTargetResultAllOf) GetSnapshotIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SnapshotId.Get(), o.SnapshotId.IsSet()
}

// HasSnapshotId returns a boolean if a field has been set.
func (o *ArchivalTargetResultAllOf) HasSnapshotId() bool {
	if o != nil && o.SnapshotId.IsSet() {
		return true
	}

	return false
}

// SetSnapshotId gets a reference to the given NullableString and assigns it to the SnapshotId field.
func (o *ArchivalTargetResultAllOf) SetSnapshotId(v string) {
	o.SnapshotId.Set(&v)
}
// SetSnapshotIdNil sets the value for SnapshotId to be an explicit nil
func (o *ArchivalTargetResultAllOf) SetSnapshotIdNil() {
	o.SnapshotId.Set(nil)
}

// UnsetSnapshotId ensures that no value is present for SnapshotId, not even an explicit nil
func (o *ArchivalTargetResultAllOf) UnsetSnapshotId() {
	o.SnapshotId.Unset()
}

// GetStartTimeUsecs returns the StartTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalTargetResultAllOf) GetStartTimeUsecs() int64 {
	if o == nil || o.StartTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.StartTimeUsecs.Get()
}

// GetStartTimeUsecsOk returns a tuple with the StartTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalTargetResultAllOf) GetStartTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartTimeUsecs.Get(), o.StartTimeUsecs.IsSet()
}

// HasStartTimeUsecs returns a boolean if a field has been set.
func (o *ArchivalTargetResultAllOf) HasStartTimeUsecs() bool {
	if o != nil && o.StartTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetStartTimeUsecs gets a reference to the given NullableInt64 and assigns it to the StartTimeUsecs field.
func (o *ArchivalTargetResultAllOf) SetStartTimeUsecs(v int64) {
	o.StartTimeUsecs.Set(&v)
}
// SetStartTimeUsecsNil sets the value for StartTimeUsecs to be an explicit nil
func (o *ArchivalTargetResultAllOf) SetStartTimeUsecsNil() {
	o.StartTimeUsecs.Set(nil)
}

// UnsetStartTimeUsecs ensures that no value is present for StartTimeUsecs, not even an explicit nil
func (o *ArchivalTargetResultAllOf) UnsetStartTimeUsecs() {
	o.StartTimeUsecs.Unset()
}

// GetEndTimeUsecs returns the EndTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalTargetResultAllOf) GetEndTimeUsecs() int64 {
	if o == nil || o.EndTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.EndTimeUsecs.Get()
}

// GetEndTimeUsecsOk returns a tuple with the EndTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalTargetResultAllOf) GetEndTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EndTimeUsecs.Get(), o.EndTimeUsecs.IsSet()
}

// HasEndTimeUsecs returns a boolean if a field has been set.
func (o *ArchivalTargetResultAllOf) HasEndTimeUsecs() bool {
	if o != nil && o.EndTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetEndTimeUsecs gets a reference to the given NullableInt64 and assigns it to the EndTimeUsecs field.
func (o *ArchivalTargetResultAllOf) SetEndTimeUsecs(v int64) {
	o.EndTimeUsecs.Set(&v)
}
// SetEndTimeUsecsNil sets the value for EndTimeUsecs to be an explicit nil
func (o *ArchivalTargetResultAllOf) SetEndTimeUsecsNil() {
	o.EndTimeUsecs.Set(nil)
}

// UnsetEndTimeUsecs ensures that no value is present for EndTimeUsecs, not even an explicit nil
func (o *ArchivalTargetResultAllOf) UnsetEndTimeUsecs() {
	o.EndTimeUsecs.Unset()
}

// GetQueuedTimeUsecs returns the QueuedTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalTargetResultAllOf) GetQueuedTimeUsecs() int64 {
	if o == nil || o.QueuedTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.QueuedTimeUsecs.Get()
}

// GetQueuedTimeUsecsOk returns a tuple with the QueuedTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalTargetResultAllOf) GetQueuedTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.QueuedTimeUsecs.Get(), o.QueuedTimeUsecs.IsSet()
}

// HasQueuedTimeUsecs returns a boolean if a field has been set.
func (o *ArchivalTargetResultAllOf) HasQueuedTimeUsecs() bool {
	if o != nil && o.QueuedTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetQueuedTimeUsecs gets a reference to the given NullableInt64 and assigns it to the QueuedTimeUsecs field.
func (o *ArchivalTargetResultAllOf) SetQueuedTimeUsecs(v int64) {
	o.QueuedTimeUsecs.Set(&v)
}
// SetQueuedTimeUsecsNil sets the value for QueuedTimeUsecs to be an explicit nil
func (o *ArchivalTargetResultAllOf) SetQueuedTimeUsecsNil() {
	o.QueuedTimeUsecs.Set(nil)
}

// UnsetQueuedTimeUsecs ensures that no value is present for QueuedTimeUsecs, not even an explicit nil
func (o *ArchivalTargetResultAllOf) UnsetQueuedTimeUsecs() {
	o.QueuedTimeUsecs.Unset()
}

// GetIsIncremental returns the IsIncremental field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalTargetResultAllOf) GetIsIncremental() bool {
	if o == nil || o.IsIncremental.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsIncremental.Get()
}

// GetIsIncrementalOk returns a tuple with the IsIncremental field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalTargetResultAllOf) GetIsIncrementalOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsIncremental.Get(), o.IsIncremental.IsSet()
}

// HasIsIncremental returns a boolean if a field has been set.
func (o *ArchivalTargetResultAllOf) HasIsIncremental() bool {
	if o != nil && o.IsIncremental.IsSet() {
		return true
	}

	return false
}

// SetIsIncremental gets a reference to the given NullableBool and assigns it to the IsIncremental field.
func (o *ArchivalTargetResultAllOf) SetIsIncremental(v bool) {
	o.IsIncremental.Set(&v)
}
// SetIsIncrementalNil sets the value for IsIncremental to be an explicit nil
func (o *ArchivalTargetResultAllOf) SetIsIncrementalNil() {
	o.IsIncremental.Set(nil)
}

// UnsetIsIncremental ensures that no value is present for IsIncremental, not even an explicit nil
func (o *ArchivalTargetResultAllOf) UnsetIsIncremental() {
	o.IsIncremental.Unset()
}

// GetIsForeverIncremental returns the IsForeverIncremental field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalTargetResultAllOf) GetIsForeverIncremental() bool {
	if o == nil || o.IsForeverIncremental.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsForeverIncremental.Get()
}

// GetIsForeverIncrementalOk returns a tuple with the IsForeverIncremental field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalTargetResultAllOf) GetIsForeverIncrementalOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsForeverIncremental.Get(), o.IsForeverIncremental.IsSet()
}

// HasIsForeverIncremental returns a boolean if a field has been set.
func (o *ArchivalTargetResultAllOf) HasIsForeverIncremental() bool {
	if o != nil && o.IsForeverIncremental.IsSet() {
		return true
	}

	return false
}

// SetIsForeverIncremental gets a reference to the given NullableBool and assigns it to the IsForeverIncremental field.
func (o *ArchivalTargetResultAllOf) SetIsForeverIncremental(v bool) {
	o.IsForeverIncremental.Set(&v)
}
// SetIsForeverIncrementalNil sets the value for IsForeverIncremental to be an explicit nil
func (o *ArchivalTargetResultAllOf) SetIsForeverIncrementalNil() {
	o.IsForeverIncremental.Set(nil)
}

// UnsetIsForeverIncremental ensures that no value is present for IsForeverIncremental, not even an explicit nil
func (o *ArchivalTargetResultAllOf) UnsetIsForeverIncremental() {
	o.IsForeverIncremental.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalTargetResultAllOf) GetStatus() string {
	if o == nil || o.Status.Get() == nil {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalTargetResultAllOf) GetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *ArchivalTargetResultAllOf) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *ArchivalTargetResultAllOf) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *ArchivalTargetResultAllOf) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *ArchivalTargetResultAllOf) UnsetStatus() {
	o.Status.Unset()
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalTargetResultAllOf) GetMessage() string {
	if o == nil || o.Message.Get() == nil {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalTargetResultAllOf) GetMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *ArchivalTargetResultAllOf) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *ArchivalTargetResultAllOf) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *ArchivalTargetResultAllOf) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *ArchivalTargetResultAllOf) UnsetMessage() {
	o.Message.Unset()
}

// GetProgressTaskId returns the ProgressTaskId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalTargetResultAllOf) GetProgressTaskId() string {
	if o == nil || o.ProgressTaskId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProgressTaskId.Get()
}

// GetProgressTaskIdOk returns a tuple with the ProgressTaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalTargetResultAllOf) GetProgressTaskIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProgressTaskId.Get(), o.ProgressTaskId.IsSet()
}

// HasProgressTaskId returns a boolean if a field has been set.
func (o *ArchivalTargetResultAllOf) HasProgressTaskId() bool {
	if o != nil && o.ProgressTaskId.IsSet() {
		return true
	}

	return false
}

// SetProgressTaskId gets a reference to the given NullableString and assigns it to the ProgressTaskId field.
func (o *ArchivalTargetResultAllOf) SetProgressTaskId(v string) {
	o.ProgressTaskId.Set(&v)
}
// SetProgressTaskIdNil sets the value for ProgressTaskId to be an explicit nil
func (o *ArchivalTargetResultAllOf) SetProgressTaskIdNil() {
	o.ProgressTaskId.Set(nil)
}

// UnsetProgressTaskId ensures that no value is present for ProgressTaskId, not even an explicit nil
func (o *ArchivalTargetResultAllOf) UnsetProgressTaskId() {
	o.ProgressTaskId.Unset()
}

// GetIndexingTaskId returns the IndexingTaskId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalTargetResultAllOf) GetIndexingTaskId() string {
	if o == nil || o.IndexingTaskId.Get() == nil {
		var ret string
		return ret
	}
	return *o.IndexingTaskId.Get()
}

// GetIndexingTaskIdOk returns a tuple with the IndexingTaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalTargetResultAllOf) GetIndexingTaskIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IndexingTaskId.Get(), o.IndexingTaskId.IsSet()
}

// HasIndexingTaskId returns a boolean if a field has been set.
func (o *ArchivalTargetResultAllOf) HasIndexingTaskId() bool {
	if o != nil && o.IndexingTaskId.IsSet() {
		return true
	}

	return false
}

// SetIndexingTaskId gets a reference to the given NullableString and assigns it to the IndexingTaskId field.
func (o *ArchivalTargetResultAllOf) SetIndexingTaskId(v string) {
	o.IndexingTaskId.Set(&v)
}
// SetIndexingTaskIdNil sets the value for IndexingTaskId to be an explicit nil
func (o *ArchivalTargetResultAllOf) SetIndexingTaskIdNil() {
	o.IndexingTaskId.Set(nil)
}

// UnsetIndexingTaskId ensures that no value is present for IndexingTaskId, not even an explicit nil
func (o *ArchivalTargetResultAllOf) UnsetIndexingTaskId() {
	o.IndexingTaskId.Unset()
}

// GetSuccessfulObjectsCount returns the SuccessfulObjectsCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalTargetResultAllOf) GetSuccessfulObjectsCount() int64 {
	if o == nil || o.SuccessfulObjectsCount.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SuccessfulObjectsCount.Get()
}

// GetSuccessfulObjectsCountOk returns a tuple with the SuccessfulObjectsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalTargetResultAllOf) GetSuccessfulObjectsCountOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SuccessfulObjectsCount.Get(), o.SuccessfulObjectsCount.IsSet()
}

// HasSuccessfulObjectsCount returns a boolean if a field has been set.
func (o *ArchivalTargetResultAllOf) HasSuccessfulObjectsCount() bool {
	if o != nil && o.SuccessfulObjectsCount.IsSet() {
		return true
	}

	return false
}

// SetSuccessfulObjectsCount gets a reference to the given NullableInt64 and assigns it to the SuccessfulObjectsCount field.
func (o *ArchivalTargetResultAllOf) SetSuccessfulObjectsCount(v int64) {
	o.SuccessfulObjectsCount.Set(&v)
}
// SetSuccessfulObjectsCountNil sets the value for SuccessfulObjectsCount to be an explicit nil
func (o *ArchivalTargetResultAllOf) SetSuccessfulObjectsCountNil() {
	o.SuccessfulObjectsCount.Set(nil)
}

// UnsetSuccessfulObjectsCount ensures that no value is present for SuccessfulObjectsCount, not even an explicit nil
func (o *ArchivalTargetResultAllOf) UnsetSuccessfulObjectsCount() {
	o.SuccessfulObjectsCount.Unset()
}

// GetFailedObjectsCount returns the FailedObjectsCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalTargetResultAllOf) GetFailedObjectsCount() int64 {
	if o == nil || o.FailedObjectsCount.Get() == nil {
		var ret int64
		return ret
	}
	return *o.FailedObjectsCount.Get()
}

// GetFailedObjectsCountOk returns a tuple with the FailedObjectsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalTargetResultAllOf) GetFailedObjectsCountOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FailedObjectsCount.Get(), o.FailedObjectsCount.IsSet()
}

// HasFailedObjectsCount returns a boolean if a field has been set.
func (o *ArchivalTargetResultAllOf) HasFailedObjectsCount() bool {
	if o != nil && o.FailedObjectsCount.IsSet() {
		return true
	}

	return false
}

// SetFailedObjectsCount gets a reference to the given NullableInt64 and assigns it to the FailedObjectsCount field.
func (o *ArchivalTargetResultAllOf) SetFailedObjectsCount(v int64) {
	o.FailedObjectsCount.Set(&v)
}
// SetFailedObjectsCountNil sets the value for FailedObjectsCount to be an explicit nil
func (o *ArchivalTargetResultAllOf) SetFailedObjectsCountNil() {
	o.FailedObjectsCount.Set(nil)
}

// UnsetFailedObjectsCount ensures that no value is present for FailedObjectsCount, not even an explicit nil
func (o *ArchivalTargetResultAllOf) UnsetFailedObjectsCount() {
	o.FailedObjectsCount.Unset()
}

// GetCancelledObjectsCount returns the CancelledObjectsCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalTargetResultAllOf) GetCancelledObjectsCount() int64 {
	if o == nil || o.CancelledObjectsCount.Get() == nil {
		var ret int64
		return ret
	}
	return *o.CancelledObjectsCount.Get()
}

// GetCancelledObjectsCountOk returns a tuple with the CancelledObjectsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalTargetResultAllOf) GetCancelledObjectsCountOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CancelledObjectsCount.Get(), o.CancelledObjectsCount.IsSet()
}

// HasCancelledObjectsCount returns a boolean if a field has been set.
func (o *ArchivalTargetResultAllOf) HasCancelledObjectsCount() bool {
	if o != nil && o.CancelledObjectsCount.IsSet() {
		return true
	}

	return false
}

// SetCancelledObjectsCount gets a reference to the given NullableInt64 and assigns it to the CancelledObjectsCount field.
func (o *ArchivalTargetResultAllOf) SetCancelledObjectsCount(v int64) {
	o.CancelledObjectsCount.Set(&v)
}
// SetCancelledObjectsCountNil sets the value for CancelledObjectsCount to be an explicit nil
func (o *ArchivalTargetResultAllOf) SetCancelledObjectsCountNil() {
	o.CancelledObjectsCount.Set(nil)
}

// UnsetCancelledObjectsCount ensures that no value is present for CancelledObjectsCount, not even an explicit nil
func (o *ArchivalTargetResultAllOf) UnsetCancelledObjectsCount() {
	o.CancelledObjectsCount.Unset()
}

// GetSuccessfulAppObjectsCount returns the SuccessfulAppObjectsCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalTargetResultAllOf) GetSuccessfulAppObjectsCount() int32 {
	if o == nil || o.SuccessfulAppObjectsCount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.SuccessfulAppObjectsCount.Get()
}

// GetSuccessfulAppObjectsCountOk returns a tuple with the SuccessfulAppObjectsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalTargetResultAllOf) GetSuccessfulAppObjectsCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SuccessfulAppObjectsCount.Get(), o.SuccessfulAppObjectsCount.IsSet()
}

// HasSuccessfulAppObjectsCount returns a boolean if a field has been set.
func (o *ArchivalTargetResultAllOf) HasSuccessfulAppObjectsCount() bool {
	if o != nil && o.SuccessfulAppObjectsCount.IsSet() {
		return true
	}

	return false
}

// SetSuccessfulAppObjectsCount gets a reference to the given NullableInt32 and assigns it to the SuccessfulAppObjectsCount field.
func (o *ArchivalTargetResultAllOf) SetSuccessfulAppObjectsCount(v int32) {
	o.SuccessfulAppObjectsCount.Set(&v)
}
// SetSuccessfulAppObjectsCountNil sets the value for SuccessfulAppObjectsCount to be an explicit nil
func (o *ArchivalTargetResultAllOf) SetSuccessfulAppObjectsCountNil() {
	o.SuccessfulAppObjectsCount.Set(nil)
}

// UnsetSuccessfulAppObjectsCount ensures that no value is present for SuccessfulAppObjectsCount, not even an explicit nil
func (o *ArchivalTargetResultAllOf) UnsetSuccessfulAppObjectsCount() {
	o.SuccessfulAppObjectsCount.Unset()
}

// GetFailedAppObjectsCount returns the FailedAppObjectsCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalTargetResultAllOf) GetFailedAppObjectsCount() int32 {
	if o == nil || o.FailedAppObjectsCount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.FailedAppObjectsCount.Get()
}

// GetFailedAppObjectsCountOk returns a tuple with the FailedAppObjectsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalTargetResultAllOf) GetFailedAppObjectsCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FailedAppObjectsCount.Get(), o.FailedAppObjectsCount.IsSet()
}

// HasFailedAppObjectsCount returns a boolean if a field has been set.
func (o *ArchivalTargetResultAllOf) HasFailedAppObjectsCount() bool {
	if o != nil && o.FailedAppObjectsCount.IsSet() {
		return true
	}

	return false
}

// SetFailedAppObjectsCount gets a reference to the given NullableInt32 and assigns it to the FailedAppObjectsCount field.
func (o *ArchivalTargetResultAllOf) SetFailedAppObjectsCount(v int32) {
	o.FailedAppObjectsCount.Set(&v)
}
// SetFailedAppObjectsCountNil sets the value for FailedAppObjectsCount to be an explicit nil
func (o *ArchivalTargetResultAllOf) SetFailedAppObjectsCountNil() {
	o.FailedAppObjectsCount.Set(nil)
}

// UnsetFailedAppObjectsCount ensures that no value is present for FailedAppObjectsCount, not even an explicit nil
func (o *ArchivalTargetResultAllOf) UnsetFailedAppObjectsCount() {
	o.FailedAppObjectsCount.Unset()
}

// GetCancelledAppObjectsCount returns the CancelledAppObjectsCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalTargetResultAllOf) GetCancelledAppObjectsCount() int32 {
	if o == nil || o.CancelledAppObjectsCount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.CancelledAppObjectsCount.Get()
}

// GetCancelledAppObjectsCountOk returns a tuple with the CancelledAppObjectsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalTargetResultAllOf) GetCancelledAppObjectsCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CancelledAppObjectsCount.Get(), o.CancelledAppObjectsCount.IsSet()
}

// HasCancelledAppObjectsCount returns a boolean if a field has been set.
func (o *ArchivalTargetResultAllOf) HasCancelledAppObjectsCount() bool {
	if o != nil && o.CancelledAppObjectsCount.IsSet() {
		return true
	}

	return false
}

// SetCancelledAppObjectsCount gets a reference to the given NullableInt32 and assigns it to the CancelledAppObjectsCount field.
func (o *ArchivalTargetResultAllOf) SetCancelledAppObjectsCount(v int32) {
	o.CancelledAppObjectsCount.Set(&v)
}
// SetCancelledAppObjectsCountNil sets the value for CancelledAppObjectsCount to be an explicit nil
func (o *ArchivalTargetResultAllOf) SetCancelledAppObjectsCountNil() {
	o.CancelledAppObjectsCount.Set(nil)
}

// UnsetCancelledAppObjectsCount ensures that no value is present for CancelledAppObjectsCount, not even an explicit nil
func (o *ArchivalTargetResultAllOf) UnsetCancelledAppObjectsCount() {
	o.CancelledAppObjectsCount.Unset()
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *ArchivalTargetResultAllOf) GetStats() ArchivalDataStats {
	if o == nil || o.Stats == nil {
		var ret ArchivalDataStats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchivalTargetResultAllOf) GetStatsOk() (*ArchivalDataStats, bool) {
	if o == nil || o.Stats == nil {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *ArchivalTargetResultAllOf) HasStats() bool {
	if o != nil && o.Stats != nil {
		return true
	}

	return false
}

// SetStats gets a reference to the given ArchivalDataStats and assigns it to the Stats field.
func (o *ArchivalTargetResultAllOf) SetStats(v ArchivalDataStats) {
	o.Stats = &v
}

// GetIsManuallyDeleted returns the IsManuallyDeleted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalTargetResultAllOf) GetIsManuallyDeleted() bool {
	if o == nil || o.IsManuallyDeleted.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsManuallyDeleted.Get()
}

// GetIsManuallyDeletedOk returns a tuple with the IsManuallyDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalTargetResultAllOf) GetIsManuallyDeletedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsManuallyDeleted.Get(), o.IsManuallyDeleted.IsSet()
}

// HasIsManuallyDeleted returns a boolean if a field has been set.
func (o *ArchivalTargetResultAllOf) HasIsManuallyDeleted() bool {
	if o != nil && o.IsManuallyDeleted.IsSet() {
		return true
	}

	return false
}

// SetIsManuallyDeleted gets a reference to the given NullableBool and assigns it to the IsManuallyDeleted field.
func (o *ArchivalTargetResultAllOf) SetIsManuallyDeleted(v bool) {
	o.IsManuallyDeleted.Set(&v)
}
// SetIsManuallyDeletedNil sets the value for IsManuallyDeleted to be an explicit nil
func (o *ArchivalTargetResultAllOf) SetIsManuallyDeletedNil() {
	o.IsManuallyDeleted.Set(nil)
}

// UnsetIsManuallyDeleted ensures that no value is present for IsManuallyDeleted, not even an explicit nil
func (o *ArchivalTargetResultAllOf) UnsetIsManuallyDeleted() {
	o.IsManuallyDeleted.Unset()
}

// GetExpiryTimeUsecs returns the ExpiryTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalTargetResultAllOf) GetExpiryTimeUsecs() int64 {
	if o == nil || o.ExpiryTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ExpiryTimeUsecs.Get()
}

// GetExpiryTimeUsecsOk returns a tuple with the ExpiryTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalTargetResultAllOf) GetExpiryTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExpiryTimeUsecs.Get(), o.ExpiryTimeUsecs.IsSet()
}

// HasExpiryTimeUsecs returns a boolean if a field has been set.
func (o *ArchivalTargetResultAllOf) HasExpiryTimeUsecs() bool {
	if o != nil && o.ExpiryTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetExpiryTimeUsecs gets a reference to the given NullableInt64 and assigns it to the ExpiryTimeUsecs field.
func (o *ArchivalTargetResultAllOf) SetExpiryTimeUsecs(v int64) {
	o.ExpiryTimeUsecs.Set(&v)
}
// SetExpiryTimeUsecsNil sets the value for ExpiryTimeUsecs to be an explicit nil
func (o *ArchivalTargetResultAllOf) SetExpiryTimeUsecsNil() {
	o.ExpiryTimeUsecs.Set(nil)
}

// UnsetExpiryTimeUsecs ensures that no value is present for ExpiryTimeUsecs, not even an explicit nil
func (o *ArchivalTargetResultAllOf) UnsetExpiryTimeUsecs() {
	o.ExpiryTimeUsecs.Unset()
}

// GetDataLockConstraints returns the DataLockConstraints field value if set, zero value otherwise.
func (o *ArchivalTargetResultAllOf) GetDataLockConstraints() DataLockConstraints {
	if o == nil || o.DataLockConstraints == nil {
		var ret DataLockConstraints
		return ret
	}
	return *o.DataLockConstraints
}

// GetDataLockConstraintsOk returns a tuple with the DataLockConstraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchivalTargetResultAllOf) GetDataLockConstraintsOk() (*DataLockConstraints, bool) {
	if o == nil || o.DataLockConstraints == nil {
		return nil, false
	}
	return o.DataLockConstraints, true
}

// HasDataLockConstraints returns a boolean if a field has been set.
func (o *ArchivalTargetResultAllOf) HasDataLockConstraints() bool {
	if o != nil && o.DataLockConstraints != nil {
		return true
	}

	return false
}

// SetDataLockConstraints gets a reference to the given DataLockConstraints and assigns it to the DataLockConstraints field.
func (o *ArchivalTargetResultAllOf) SetDataLockConstraints(v DataLockConstraints) {
	o.DataLockConstraints = &v
}

// GetOnLegalHold returns the OnLegalHold field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalTargetResultAllOf) GetOnLegalHold() bool {
	if o == nil || o.OnLegalHold.Get() == nil {
		var ret bool
		return ret
	}
	return *o.OnLegalHold.Get()
}

// GetOnLegalHoldOk returns a tuple with the OnLegalHold field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalTargetResultAllOf) GetOnLegalHoldOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OnLegalHold.Get(), o.OnLegalHold.IsSet()
}

// HasOnLegalHold returns a boolean if a field has been set.
func (o *ArchivalTargetResultAllOf) HasOnLegalHold() bool {
	if o != nil && o.OnLegalHold.IsSet() {
		return true
	}

	return false
}

// SetOnLegalHold gets a reference to the given NullableBool and assigns it to the OnLegalHold field.
func (o *ArchivalTargetResultAllOf) SetOnLegalHold(v bool) {
	o.OnLegalHold.Set(&v)
}
// SetOnLegalHoldNil sets the value for OnLegalHold to be an explicit nil
func (o *ArchivalTargetResultAllOf) SetOnLegalHoldNil() {
	o.OnLegalHold.Set(nil)
}

// UnsetOnLegalHold ensures that no value is present for OnLegalHold, not even an explicit nil
func (o *ArchivalTargetResultAllOf) UnsetOnLegalHold() {
	o.OnLegalHold.Unset()
}

func (o ArchivalTargetResultAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RunType.IsSet() {
		toSerialize["runType"] = o.RunType.Get()
	}
	if o.IsSlaViolated.IsSet() {
		toSerialize["isSlaViolated"] = o.IsSlaViolated.Get()
	}
	if o.SnapshotId.IsSet() {
		toSerialize["snapshotId"] = o.SnapshotId.Get()
	}
	if o.StartTimeUsecs.IsSet() {
		toSerialize["startTimeUsecs"] = o.StartTimeUsecs.Get()
	}
	if o.EndTimeUsecs.IsSet() {
		toSerialize["endTimeUsecs"] = o.EndTimeUsecs.Get()
	}
	if o.QueuedTimeUsecs.IsSet() {
		toSerialize["queuedTimeUsecs"] = o.QueuedTimeUsecs.Get()
	}
	if o.IsIncremental.IsSet() {
		toSerialize["isIncremental"] = o.IsIncremental.Get()
	}
	if o.IsForeverIncremental.IsSet() {
		toSerialize["isForeverIncremental"] = o.IsForeverIncremental.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	if o.ProgressTaskId.IsSet() {
		toSerialize["progressTaskId"] = o.ProgressTaskId.Get()
	}
	if o.IndexingTaskId.IsSet() {
		toSerialize["indexingTaskId"] = o.IndexingTaskId.Get()
	}
	if o.SuccessfulObjectsCount.IsSet() {
		toSerialize["successfulObjectsCount"] = o.SuccessfulObjectsCount.Get()
	}
	if o.FailedObjectsCount.IsSet() {
		toSerialize["failedObjectsCount"] = o.FailedObjectsCount.Get()
	}
	if o.CancelledObjectsCount.IsSet() {
		toSerialize["cancelledObjectsCount"] = o.CancelledObjectsCount.Get()
	}
	if o.SuccessfulAppObjectsCount.IsSet() {
		toSerialize["successfulAppObjectsCount"] = o.SuccessfulAppObjectsCount.Get()
	}
	if o.FailedAppObjectsCount.IsSet() {
		toSerialize["failedAppObjectsCount"] = o.FailedAppObjectsCount.Get()
	}
	if o.CancelledAppObjectsCount.IsSet() {
		toSerialize["cancelledAppObjectsCount"] = o.CancelledAppObjectsCount.Get()
	}
	if o.Stats != nil {
		toSerialize["stats"] = o.Stats
	}
	if o.IsManuallyDeleted.IsSet() {
		toSerialize["isManuallyDeleted"] = o.IsManuallyDeleted.Get()
	}
	if o.ExpiryTimeUsecs.IsSet() {
		toSerialize["expiryTimeUsecs"] = o.ExpiryTimeUsecs.Get()
	}
	if o.DataLockConstraints != nil {
		toSerialize["dataLockConstraints"] = o.DataLockConstraints
	}
	if o.OnLegalHold.IsSet() {
		toSerialize["onLegalHold"] = o.OnLegalHold.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableArchivalTargetResultAllOf struct {
	value *ArchivalTargetResultAllOf
	isSet bool
}

func (v NullableArchivalTargetResultAllOf) Get() *ArchivalTargetResultAllOf {
	return v.value
}

func (v *NullableArchivalTargetResultAllOf) Set(val *ArchivalTargetResultAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableArchivalTargetResultAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableArchivalTargetResultAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArchivalTargetResultAllOf(val *ArchivalTargetResultAllOf) *NullableArchivalTargetResultAllOf {
	return &NullableArchivalTargetResultAllOf{value: val, isSet: true}
}

func (v NullableArchivalTargetResultAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArchivalTargetResultAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o ArchivalTargetResultAllOf) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}