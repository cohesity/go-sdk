/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// UpdateViewParamAllOf struct for UpdateViewParamAllOf
type UpdateViewParamAllOf struct {
	// Specifies the name of the View.
	Name NullableString `json:"name,omitempty"`
	// Specifies the category of the View.
	Category NullableString `json:"category,omitempty"`
	// Specifies the supported Protocols for the View.
	ProtocolAccess []ViewProtocol `json:"protocolAccess,omitempty"`
	// Specifies the Quality of Service (QoS) Policy for the View.
	Qos *QoS `json:"qos,omitempty"`
	// Specifies whether view level client subnet whitelist overrides cluster and global setting.
	OverrideGlobalSubnetWhitelist NullableBool `json:"overrideGlobalSubnetWhitelist,omitempty"`
	// Array of Subnets. Specifies a list of Subnets with IP addresses that have permissions to access the View. (Overrides or extends the Subnets specified at the global Cohesity Cluster level.)
	SubnetWhitelist []Subnet `json:"subnetWhitelist,omitempty"`
	// Specifies whether view level client netgroup whitelist overrides cluster and global setting.
	OverrideGlobalNetgroupWhitelist NullableBool `json:"overrideGlobalNetgroupWhitelist,omitempty"`
	// Array of Netgroups. Specifies a list of netgroups with domains that have permissions to access the View. (Overrides or extends the Netgroup specified at the global Cohesity Cluster level.)
	NetgroupWhitelist *NisNetgroups `json:"netgroupWhitelist,omitempty"`
	// Specifies the security mode used for this view. Currently we support the following modes: Native, Unified and NTFS style. 'NativeMode' indicates a native security mode. 'UnifiedMode' indicates a unified security mode. 'NtfsMode' indicates a NTFS style security mode.
	SecurityMode NullableString `json:"securityMode,omitempty"`
	// Specifies if inline deduplication and compression settings inherited from the Storage Domain (View Box) should be disabled for this View.
	StoragePolicyOverride *StoragePolicyOverride `json:"storagePolicyOverride,omitempty"`
	// Specifies an optional logical quota limit (in bytes) for the usage allowed on this View. (Logical data is when the data is fully hydrated and expanded.) This limit overrides the limit inherited from the Storage Domain (View Box) (if set). If logicalQuota is nil, the limit is inherited from the Storage Domain (View Box) (if set). A new write is not allowed if the Storage Domain (View Box) will exceed the specified quota. However, it takes time for the Cohesity Cluster to calculate the usage across Nodes, so the limit may be exceeded by a small amount. In addition, if the limit is increased or data is removed, there may be a delay before the Cohesity Cluster allows more data to be written to the View, as the Cluster is calculating the usage across Nodes.
	LogicalQuota *QuotaPolicy `json:"logicalQuota,omitempty"`
	// Optional config that enables file locking for this view. It cannot be disabled during the edit of a view, if it has been enabled during the creation of the view. Also, it cannot be enabled if it was disabled during the creation of the view.
	FileLockConfig *FileLevelDataLockConfig `json:"fileLockConfig,omitempty"`
	// Optional filtering criteria that should be satisfied by all the files created in this view. It does not affect existing files.
	FileExtensionFilter *FileExtensionFilter `json:"fileExtensionFilter,omitempty"`
	// Specifies the antivirus scan config settings for this View.
	AntivirusScanConfig *AntivirusScanConfig `json:"antivirusScanConfig,omitempty"`
	// Specifies an optional text description about the View.
	Description NullableString `json:"description,omitempty"`
	// Specifies if this View can be mounted using the NFS protocol on Windows systems. If true, this View can be NFS mounted on Windows systems.
	AllowMountOnWindows NullableBool `json:"allowMountOnWindows,omitempty"`
	// Specifies if this view should allow minion or not. If true, this will allow minion.
	EnableMinion NullableBool `json:"enableMinion,omitempty"`
	// Specifies if Filer Audit Logging is enabled for this view.
	EnableFilerAuditLogging NullableBool `json:"enableFilerAuditLogging,omitempty"`
	// Optional tenant id who has access to this View.
	TenantId NullableString `json:"tenantId,omitempty"`
	// Specifies whether to enable live indexing for the view.
	EnableLiveIndexing NullableBool `json:"enableLiveIndexing,omitempty"`
	// Specifies whether to enable offline file caching of the view.
	EnableOfflineCaching NullableBool `json:"enableOfflineCaching,omitempty"`
	// Array of Security Identifiers (SIDs) Specifies the list of security identifiers (SIDs) for the restricted Principals who have access to this View.
	AccessSids []string `json:"accessSids,omitempty"`
	// Specifies whether view lock is enabled. If enabled the view cannot be modified or deleted until unlock. By default it is disabled.
	ViewLockEnabled NullableBool `json:"viewLockEnabled,omitempty"`
	// Specifies if the view is a read only view. User will no longer be able to write to this view if this is set to true.
	IsReadOnly NullableBool `json:"isReadOnly,omitempty"`
	// Specifies the pinning config of this view.
	ViewPinningConfig *ViewPinningConfig `json:"viewPinningConfig,omitempty"`
	// Specifies self service config of this view.
	SelfServiceSnapshotConfig *SelfServiceSnapshotConfig `json:"selfServiceSnapshotConfig,omitempty"`
	// Specifies if metadata accelerator is enabled for this view. Only supported while creating a view.
	EnableMetadataAccelerator NullableBool `json:"enableMetadataAccelerator,omitempty"`
	// Specifies whether the view is for externally triggered backup target. If so, Magneto will ignore the backup schedule for the view protection job of this view. By default it is disabled.
	IsExternallyTriggeredBackupTarget NullableBool `json:"isExternallyTriggeredBackupTarget,omitempty"`
}

// NewUpdateViewParamAllOf instantiates a new UpdateViewParamAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateViewParamAllOf() *UpdateViewParamAllOf {
	this := UpdateViewParamAllOf{}
	return &this
}

// NewUpdateViewParamAllOfWithDefaults instantiates a new UpdateViewParamAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateViewParamAllOfWithDefaults() *UpdateViewParamAllOf {
	this := UpdateViewParamAllOf{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateViewParamAllOf) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateViewParamAllOf) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *UpdateViewParamAllOf) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *UpdateViewParamAllOf) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *UpdateViewParamAllOf) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *UpdateViewParamAllOf) UnsetName() {
	o.Name.Unset()
}

// GetCategory returns the Category field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateViewParamAllOf) GetCategory() string {
	if o == nil || o.Category.Get() == nil {
		var ret string
		return ret
	}
	return *o.Category.Get()
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateViewParamAllOf) GetCategoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Category.Get(), o.Category.IsSet()
}

// HasCategory returns a boolean if a field has been set.
func (o *UpdateViewParamAllOf) HasCategory() bool {
	if o != nil && o.Category.IsSet() {
		return true
	}

	return false
}

// SetCategory gets a reference to the given NullableString and assigns it to the Category field.
func (o *UpdateViewParamAllOf) SetCategory(v string) {
	o.Category.Set(&v)
}
// SetCategoryNil sets the value for Category to be an explicit nil
func (o *UpdateViewParamAllOf) SetCategoryNil() {
	o.Category.Set(nil)
}

// UnsetCategory ensures that no value is present for Category, not even an explicit nil
func (o *UpdateViewParamAllOf) UnsetCategory() {
	o.Category.Unset()
}

// GetProtocolAccess returns the ProtocolAccess field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateViewParamAllOf) GetProtocolAccess() []ViewProtocol {
	if o == nil  {
		var ret []ViewProtocol
		return ret
	}
	return o.ProtocolAccess
}

// GetProtocolAccessOk returns a tuple with the ProtocolAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateViewParamAllOf) GetProtocolAccessOk() (*[]ViewProtocol, bool) {
	if o == nil || o.ProtocolAccess == nil {
		return nil, false
	}
	return &o.ProtocolAccess, true
}

// HasProtocolAccess returns a boolean if a field has been set.
func (o *UpdateViewParamAllOf) HasProtocolAccess() bool {
	if o != nil && o.ProtocolAccess != nil {
		return true
	}

	return false
}

// SetProtocolAccess gets a reference to the given []ViewProtocol and assigns it to the ProtocolAccess field.
func (o *UpdateViewParamAllOf) SetProtocolAccess(v []ViewProtocol) {
	o.ProtocolAccess = v
}

// GetQos returns the Qos field value if set, zero value otherwise.
func (o *UpdateViewParamAllOf) GetQos() QoS {
	if o == nil || o.Qos == nil {
		var ret QoS
		return ret
	}
	return *o.Qos
}

// GetQosOk returns a tuple with the Qos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateViewParamAllOf) GetQosOk() (*QoS, bool) {
	if o == nil || o.Qos == nil {
		return nil, false
	}
	return o.Qos, true
}

// HasQos returns a boolean if a field has been set.
func (o *UpdateViewParamAllOf) HasQos() bool {
	if o != nil && o.Qos != nil {
		return true
	}

	return false
}

// SetQos gets a reference to the given QoS and assigns it to the Qos field.
func (o *UpdateViewParamAllOf) SetQos(v QoS) {
	o.Qos = &v
}

// GetOverrideGlobalSubnetWhitelist returns the OverrideGlobalSubnetWhitelist field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateViewParamAllOf) GetOverrideGlobalSubnetWhitelist() bool {
	if o == nil || o.OverrideGlobalSubnetWhitelist.Get() == nil {
		var ret bool
		return ret
	}
	return *o.OverrideGlobalSubnetWhitelist.Get()
}

// GetOverrideGlobalSubnetWhitelistOk returns a tuple with the OverrideGlobalSubnetWhitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateViewParamAllOf) GetOverrideGlobalSubnetWhitelistOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OverrideGlobalSubnetWhitelist.Get(), o.OverrideGlobalSubnetWhitelist.IsSet()
}

// HasOverrideGlobalSubnetWhitelist returns a boolean if a field has been set.
func (o *UpdateViewParamAllOf) HasOverrideGlobalSubnetWhitelist() bool {
	if o != nil && o.OverrideGlobalSubnetWhitelist.IsSet() {
		return true
	}

	return false
}

// SetOverrideGlobalSubnetWhitelist gets a reference to the given NullableBool and assigns it to the OverrideGlobalSubnetWhitelist field.
func (o *UpdateViewParamAllOf) SetOverrideGlobalSubnetWhitelist(v bool) {
	o.OverrideGlobalSubnetWhitelist.Set(&v)
}
// SetOverrideGlobalSubnetWhitelistNil sets the value for OverrideGlobalSubnetWhitelist to be an explicit nil
func (o *UpdateViewParamAllOf) SetOverrideGlobalSubnetWhitelistNil() {
	o.OverrideGlobalSubnetWhitelist.Set(nil)
}

// UnsetOverrideGlobalSubnetWhitelist ensures that no value is present for OverrideGlobalSubnetWhitelist, not even an explicit nil
func (o *UpdateViewParamAllOf) UnsetOverrideGlobalSubnetWhitelist() {
	o.OverrideGlobalSubnetWhitelist.Unset()
}

// GetSubnetWhitelist returns the SubnetWhitelist field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateViewParamAllOf) GetSubnetWhitelist() []Subnet {
	if o == nil  {
		var ret []Subnet
		return ret
	}
	return o.SubnetWhitelist
}

// GetSubnetWhitelistOk returns a tuple with the SubnetWhitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateViewParamAllOf) GetSubnetWhitelistOk() (*[]Subnet, bool) {
	if o == nil || o.SubnetWhitelist == nil {
		return nil, false
	}
	return &o.SubnetWhitelist, true
}

// HasSubnetWhitelist returns a boolean if a field has been set.
func (o *UpdateViewParamAllOf) HasSubnetWhitelist() bool {
	if o != nil && o.SubnetWhitelist != nil {
		return true
	}

	return false
}

// SetSubnetWhitelist gets a reference to the given []Subnet and assigns it to the SubnetWhitelist field.
func (o *UpdateViewParamAllOf) SetSubnetWhitelist(v []Subnet) {
	o.SubnetWhitelist = v
}

// GetOverrideGlobalNetgroupWhitelist returns the OverrideGlobalNetgroupWhitelist field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateViewParamAllOf) GetOverrideGlobalNetgroupWhitelist() bool {
	if o == nil || o.OverrideGlobalNetgroupWhitelist.Get() == nil {
		var ret bool
		return ret
	}
	return *o.OverrideGlobalNetgroupWhitelist.Get()
}

// GetOverrideGlobalNetgroupWhitelistOk returns a tuple with the OverrideGlobalNetgroupWhitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateViewParamAllOf) GetOverrideGlobalNetgroupWhitelistOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OverrideGlobalNetgroupWhitelist.Get(), o.OverrideGlobalNetgroupWhitelist.IsSet()
}

// HasOverrideGlobalNetgroupWhitelist returns a boolean if a field has been set.
func (o *UpdateViewParamAllOf) HasOverrideGlobalNetgroupWhitelist() bool {
	if o != nil && o.OverrideGlobalNetgroupWhitelist.IsSet() {
		return true
	}

	return false
}

// SetOverrideGlobalNetgroupWhitelist gets a reference to the given NullableBool and assigns it to the OverrideGlobalNetgroupWhitelist field.
func (o *UpdateViewParamAllOf) SetOverrideGlobalNetgroupWhitelist(v bool) {
	o.OverrideGlobalNetgroupWhitelist.Set(&v)
}
// SetOverrideGlobalNetgroupWhitelistNil sets the value for OverrideGlobalNetgroupWhitelist to be an explicit nil
func (o *UpdateViewParamAllOf) SetOverrideGlobalNetgroupWhitelistNil() {
	o.OverrideGlobalNetgroupWhitelist.Set(nil)
}

// UnsetOverrideGlobalNetgroupWhitelist ensures that no value is present for OverrideGlobalNetgroupWhitelist, not even an explicit nil
func (o *UpdateViewParamAllOf) UnsetOverrideGlobalNetgroupWhitelist() {
	o.OverrideGlobalNetgroupWhitelist.Unset()
}

// GetNetgroupWhitelist returns the NetgroupWhitelist field value if set, zero value otherwise.
func (o *UpdateViewParamAllOf) GetNetgroupWhitelist() NisNetgroups {
	if o == nil || o.NetgroupWhitelist == nil {
		var ret NisNetgroups
		return ret
	}
	return *o.NetgroupWhitelist
}

// GetNetgroupWhitelistOk returns a tuple with the NetgroupWhitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateViewParamAllOf) GetNetgroupWhitelistOk() (*NisNetgroups, bool) {
	if o == nil || o.NetgroupWhitelist == nil {
		return nil, false
	}
	return o.NetgroupWhitelist, true
}

// HasNetgroupWhitelist returns a boolean if a field has been set.
func (o *UpdateViewParamAllOf) HasNetgroupWhitelist() bool {
	if o != nil && o.NetgroupWhitelist != nil {
		return true
	}

	return false
}

// SetNetgroupWhitelist gets a reference to the given NisNetgroups and assigns it to the NetgroupWhitelist field.
func (o *UpdateViewParamAllOf) SetNetgroupWhitelist(v NisNetgroups) {
	o.NetgroupWhitelist = &v
}

// GetSecurityMode returns the SecurityMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateViewParamAllOf) GetSecurityMode() string {
	if o == nil || o.SecurityMode.Get() == nil {
		var ret string
		return ret
	}
	return *o.SecurityMode.Get()
}

// GetSecurityModeOk returns a tuple with the SecurityMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateViewParamAllOf) GetSecurityModeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SecurityMode.Get(), o.SecurityMode.IsSet()
}

// HasSecurityMode returns a boolean if a field has been set.
func (o *UpdateViewParamAllOf) HasSecurityMode() bool {
	if o != nil && o.SecurityMode.IsSet() {
		return true
	}

	return false
}

// SetSecurityMode gets a reference to the given NullableString and assigns it to the SecurityMode field.
func (o *UpdateViewParamAllOf) SetSecurityMode(v string) {
	o.SecurityMode.Set(&v)
}
// SetSecurityModeNil sets the value for SecurityMode to be an explicit nil
func (o *UpdateViewParamAllOf) SetSecurityModeNil() {
	o.SecurityMode.Set(nil)
}

// UnsetSecurityMode ensures that no value is present for SecurityMode, not even an explicit nil
func (o *UpdateViewParamAllOf) UnsetSecurityMode() {
	o.SecurityMode.Unset()
}

// GetStoragePolicyOverride returns the StoragePolicyOverride field value if set, zero value otherwise.
func (o *UpdateViewParamAllOf) GetStoragePolicyOverride() StoragePolicyOverride {
	if o == nil || o.StoragePolicyOverride == nil {
		var ret StoragePolicyOverride
		return ret
	}
	return *o.StoragePolicyOverride
}

// GetStoragePolicyOverrideOk returns a tuple with the StoragePolicyOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateViewParamAllOf) GetStoragePolicyOverrideOk() (*StoragePolicyOverride, bool) {
	if o == nil || o.StoragePolicyOverride == nil {
		return nil, false
	}
	return o.StoragePolicyOverride, true
}

// HasStoragePolicyOverride returns a boolean if a field has been set.
func (o *UpdateViewParamAllOf) HasStoragePolicyOverride() bool {
	if o != nil && o.StoragePolicyOverride != nil {
		return true
	}

	return false
}

// SetStoragePolicyOverride gets a reference to the given StoragePolicyOverride and assigns it to the StoragePolicyOverride field.
func (o *UpdateViewParamAllOf) SetStoragePolicyOverride(v StoragePolicyOverride) {
	o.StoragePolicyOverride = &v
}

// GetLogicalQuota returns the LogicalQuota field value if set, zero value otherwise.
func (o *UpdateViewParamAllOf) GetLogicalQuota() QuotaPolicy {
	if o == nil || o.LogicalQuota == nil {
		var ret QuotaPolicy
		return ret
	}
	return *o.LogicalQuota
}

// GetLogicalQuotaOk returns a tuple with the LogicalQuota field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateViewParamAllOf) GetLogicalQuotaOk() (*QuotaPolicy, bool) {
	if o == nil || o.LogicalQuota == nil {
		return nil, false
	}
	return o.LogicalQuota, true
}

// HasLogicalQuota returns a boolean if a field has been set.
func (o *UpdateViewParamAllOf) HasLogicalQuota() bool {
	if o != nil && o.LogicalQuota != nil {
		return true
	}

	return false
}

// SetLogicalQuota gets a reference to the given QuotaPolicy and assigns it to the LogicalQuota field.
func (o *UpdateViewParamAllOf) SetLogicalQuota(v QuotaPolicy) {
	o.LogicalQuota = &v
}

// GetFileLockConfig returns the FileLockConfig field value if set, zero value otherwise.
func (o *UpdateViewParamAllOf) GetFileLockConfig() FileLevelDataLockConfig {
	if o == nil || o.FileLockConfig == nil {
		var ret FileLevelDataLockConfig
		return ret
	}
	return *o.FileLockConfig
}

// GetFileLockConfigOk returns a tuple with the FileLockConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateViewParamAllOf) GetFileLockConfigOk() (*FileLevelDataLockConfig, bool) {
	if o == nil || o.FileLockConfig == nil {
		return nil, false
	}
	return o.FileLockConfig, true
}

// HasFileLockConfig returns a boolean if a field has been set.
func (o *UpdateViewParamAllOf) HasFileLockConfig() bool {
	if o != nil && o.FileLockConfig != nil {
		return true
	}

	return false
}

// SetFileLockConfig gets a reference to the given FileLevelDataLockConfig and assigns it to the FileLockConfig field.
func (o *UpdateViewParamAllOf) SetFileLockConfig(v FileLevelDataLockConfig) {
	o.FileLockConfig = &v
}

// GetFileExtensionFilter returns the FileExtensionFilter field value if set, zero value otherwise.
func (o *UpdateViewParamAllOf) GetFileExtensionFilter() FileExtensionFilter {
	if o == nil || o.FileExtensionFilter == nil {
		var ret FileExtensionFilter
		return ret
	}
	return *o.FileExtensionFilter
}

// GetFileExtensionFilterOk returns a tuple with the FileExtensionFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateViewParamAllOf) GetFileExtensionFilterOk() (*FileExtensionFilter, bool) {
	if o == nil || o.FileExtensionFilter == nil {
		return nil, false
	}
	return o.FileExtensionFilter, true
}

// HasFileExtensionFilter returns a boolean if a field has been set.
func (o *UpdateViewParamAllOf) HasFileExtensionFilter() bool {
	if o != nil && o.FileExtensionFilter != nil {
		return true
	}

	return false
}

// SetFileExtensionFilter gets a reference to the given FileExtensionFilter and assigns it to the FileExtensionFilter field.
func (o *UpdateViewParamAllOf) SetFileExtensionFilter(v FileExtensionFilter) {
	o.FileExtensionFilter = &v
}

// GetAntivirusScanConfig returns the AntivirusScanConfig field value if set, zero value otherwise.
func (o *UpdateViewParamAllOf) GetAntivirusScanConfig() AntivirusScanConfig {
	if o == nil || o.AntivirusScanConfig == nil {
		var ret AntivirusScanConfig
		return ret
	}
	return *o.AntivirusScanConfig
}

// GetAntivirusScanConfigOk returns a tuple with the AntivirusScanConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateViewParamAllOf) GetAntivirusScanConfigOk() (*AntivirusScanConfig, bool) {
	if o == nil || o.AntivirusScanConfig == nil {
		return nil, false
	}
	return o.AntivirusScanConfig, true
}

// HasAntivirusScanConfig returns a boolean if a field has been set.
func (o *UpdateViewParamAllOf) HasAntivirusScanConfig() bool {
	if o != nil && o.AntivirusScanConfig != nil {
		return true
	}

	return false
}

// SetAntivirusScanConfig gets a reference to the given AntivirusScanConfig and assigns it to the AntivirusScanConfig field.
func (o *UpdateViewParamAllOf) SetAntivirusScanConfig(v AntivirusScanConfig) {
	o.AntivirusScanConfig = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateViewParamAllOf) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateViewParamAllOf) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateViewParamAllOf) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *UpdateViewParamAllOf) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *UpdateViewParamAllOf) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *UpdateViewParamAllOf) UnsetDescription() {
	o.Description.Unset()
}

// GetAllowMountOnWindows returns the AllowMountOnWindows field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateViewParamAllOf) GetAllowMountOnWindows() bool {
	if o == nil || o.AllowMountOnWindows.Get() == nil {
		var ret bool
		return ret
	}
	return *o.AllowMountOnWindows.Get()
}

// GetAllowMountOnWindowsOk returns a tuple with the AllowMountOnWindows field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateViewParamAllOf) GetAllowMountOnWindowsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AllowMountOnWindows.Get(), o.AllowMountOnWindows.IsSet()
}

// HasAllowMountOnWindows returns a boolean if a field has been set.
func (o *UpdateViewParamAllOf) HasAllowMountOnWindows() bool {
	if o != nil && o.AllowMountOnWindows.IsSet() {
		return true
	}

	return false
}

// SetAllowMountOnWindows gets a reference to the given NullableBool and assigns it to the AllowMountOnWindows field.
func (o *UpdateViewParamAllOf) SetAllowMountOnWindows(v bool) {
	o.AllowMountOnWindows.Set(&v)
}
// SetAllowMountOnWindowsNil sets the value for AllowMountOnWindows to be an explicit nil
func (o *UpdateViewParamAllOf) SetAllowMountOnWindowsNil() {
	o.AllowMountOnWindows.Set(nil)
}

// UnsetAllowMountOnWindows ensures that no value is present for AllowMountOnWindows, not even an explicit nil
func (o *UpdateViewParamAllOf) UnsetAllowMountOnWindows() {
	o.AllowMountOnWindows.Unset()
}

// GetEnableMinion returns the EnableMinion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateViewParamAllOf) GetEnableMinion() bool {
	if o == nil || o.EnableMinion.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableMinion.Get()
}

// GetEnableMinionOk returns a tuple with the EnableMinion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateViewParamAllOf) GetEnableMinionOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableMinion.Get(), o.EnableMinion.IsSet()
}

// HasEnableMinion returns a boolean if a field has been set.
func (o *UpdateViewParamAllOf) HasEnableMinion() bool {
	if o != nil && o.EnableMinion.IsSet() {
		return true
	}

	return false
}

// SetEnableMinion gets a reference to the given NullableBool and assigns it to the EnableMinion field.
func (o *UpdateViewParamAllOf) SetEnableMinion(v bool) {
	o.EnableMinion.Set(&v)
}
// SetEnableMinionNil sets the value for EnableMinion to be an explicit nil
func (o *UpdateViewParamAllOf) SetEnableMinionNil() {
	o.EnableMinion.Set(nil)
}

// UnsetEnableMinion ensures that no value is present for EnableMinion, not even an explicit nil
func (o *UpdateViewParamAllOf) UnsetEnableMinion() {
	o.EnableMinion.Unset()
}

// GetEnableFilerAuditLogging returns the EnableFilerAuditLogging field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateViewParamAllOf) GetEnableFilerAuditLogging() bool {
	if o == nil || o.EnableFilerAuditLogging.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableFilerAuditLogging.Get()
}

// GetEnableFilerAuditLoggingOk returns a tuple with the EnableFilerAuditLogging field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateViewParamAllOf) GetEnableFilerAuditLoggingOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableFilerAuditLogging.Get(), o.EnableFilerAuditLogging.IsSet()
}

// HasEnableFilerAuditLogging returns a boolean if a field has been set.
func (o *UpdateViewParamAllOf) HasEnableFilerAuditLogging() bool {
	if o != nil && o.EnableFilerAuditLogging.IsSet() {
		return true
	}

	return false
}

// SetEnableFilerAuditLogging gets a reference to the given NullableBool and assigns it to the EnableFilerAuditLogging field.
func (o *UpdateViewParamAllOf) SetEnableFilerAuditLogging(v bool) {
	o.EnableFilerAuditLogging.Set(&v)
}
// SetEnableFilerAuditLoggingNil sets the value for EnableFilerAuditLogging to be an explicit nil
func (o *UpdateViewParamAllOf) SetEnableFilerAuditLoggingNil() {
	o.EnableFilerAuditLogging.Set(nil)
}

// UnsetEnableFilerAuditLogging ensures that no value is present for EnableFilerAuditLogging, not even an explicit nil
func (o *UpdateViewParamAllOf) UnsetEnableFilerAuditLogging() {
	o.EnableFilerAuditLogging.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateViewParamAllOf) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateViewParamAllOf) GetTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *UpdateViewParamAllOf) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *UpdateViewParamAllOf) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *UpdateViewParamAllOf) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *UpdateViewParamAllOf) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetEnableLiveIndexing returns the EnableLiveIndexing field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateViewParamAllOf) GetEnableLiveIndexing() bool {
	if o == nil || o.EnableLiveIndexing.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableLiveIndexing.Get()
}

// GetEnableLiveIndexingOk returns a tuple with the EnableLiveIndexing field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateViewParamAllOf) GetEnableLiveIndexingOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableLiveIndexing.Get(), o.EnableLiveIndexing.IsSet()
}

// HasEnableLiveIndexing returns a boolean if a field has been set.
func (o *UpdateViewParamAllOf) HasEnableLiveIndexing() bool {
	if o != nil && o.EnableLiveIndexing.IsSet() {
		return true
	}

	return false
}

// SetEnableLiveIndexing gets a reference to the given NullableBool and assigns it to the EnableLiveIndexing field.
func (o *UpdateViewParamAllOf) SetEnableLiveIndexing(v bool) {
	o.EnableLiveIndexing.Set(&v)
}
// SetEnableLiveIndexingNil sets the value for EnableLiveIndexing to be an explicit nil
func (o *UpdateViewParamAllOf) SetEnableLiveIndexingNil() {
	o.EnableLiveIndexing.Set(nil)
}

// UnsetEnableLiveIndexing ensures that no value is present for EnableLiveIndexing, not even an explicit nil
func (o *UpdateViewParamAllOf) UnsetEnableLiveIndexing() {
	o.EnableLiveIndexing.Unset()
}

// GetEnableOfflineCaching returns the EnableOfflineCaching field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateViewParamAllOf) GetEnableOfflineCaching() bool {
	if o == nil || o.EnableOfflineCaching.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableOfflineCaching.Get()
}

// GetEnableOfflineCachingOk returns a tuple with the EnableOfflineCaching field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateViewParamAllOf) GetEnableOfflineCachingOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableOfflineCaching.Get(), o.EnableOfflineCaching.IsSet()
}

// HasEnableOfflineCaching returns a boolean if a field has been set.
func (o *UpdateViewParamAllOf) HasEnableOfflineCaching() bool {
	if o != nil && o.EnableOfflineCaching.IsSet() {
		return true
	}

	return false
}

// SetEnableOfflineCaching gets a reference to the given NullableBool and assigns it to the EnableOfflineCaching field.
func (o *UpdateViewParamAllOf) SetEnableOfflineCaching(v bool) {
	o.EnableOfflineCaching.Set(&v)
}
// SetEnableOfflineCachingNil sets the value for EnableOfflineCaching to be an explicit nil
func (o *UpdateViewParamAllOf) SetEnableOfflineCachingNil() {
	o.EnableOfflineCaching.Set(nil)
}

// UnsetEnableOfflineCaching ensures that no value is present for EnableOfflineCaching, not even an explicit nil
func (o *UpdateViewParamAllOf) UnsetEnableOfflineCaching() {
	o.EnableOfflineCaching.Unset()
}

// GetAccessSids returns the AccessSids field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateViewParamAllOf) GetAccessSids() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.AccessSids
}

// GetAccessSidsOk returns a tuple with the AccessSids field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateViewParamAllOf) GetAccessSidsOk() (*[]string, bool) {
	if o == nil || o.AccessSids == nil {
		return nil, false
	}
	return &o.AccessSids, true
}

// HasAccessSids returns a boolean if a field has been set.
func (o *UpdateViewParamAllOf) HasAccessSids() bool {
	if o != nil && o.AccessSids != nil {
		return true
	}

	return false
}

// SetAccessSids gets a reference to the given []string and assigns it to the AccessSids field.
func (o *UpdateViewParamAllOf) SetAccessSids(v []string) {
	o.AccessSids = v
}

// GetViewLockEnabled returns the ViewLockEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateViewParamAllOf) GetViewLockEnabled() bool {
	if o == nil || o.ViewLockEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ViewLockEnabled.Get()
}

// GetViewLockEnabledOk returns a tuple with the ViewLockEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateViewParamAllOf) GetViewLockEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewLockEnabled.Get(), o.ViewLockEnabled.IsSet()
}

// HasViewLockEnabled returns a boolean if a field has been set.
func (o *UpdateViewParamAllOf) HasViewLockEnabled() bool {
	if o != nil && o.ViewLockEnabled.IsSet() {
		return true
	}

	return false
}

// SetViewLockEnabled gets a reference to the given NullableBool and assigns it to the ViewLockEnabled field.
func (o *UpdateViewParamAllOf) SetViewLockEnabled(v bool) {
	o.ViewLockEnabled.Set(&v)
}
// SetViewLockEnabledNil sets the value for ViewLockEnabled to be an explicit nil
func (o *UpdateViewParamAllOf) SetViewLockEnabledNil() {
	o.ViewLockEnabled.Set(nil)
}

// UnsetViewLockEnabled ensures that no value is present for ViewLockEnabled, not even an explicit nil
func (o *UpdateViewParamAllOf) UnsetViewLockEnabled() {
	o.ViewLockEnabled.Unset()
}

// GetIsReadOnly returns the IsReadOnly field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateViewParamAllOf) GetIsReadOnly() bool {
	if o == nil || o.IsReadOnly.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsReadOnly.Get()
}

// GetIsReadOnlyOk returns a tuple with the IsReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateViewParamAllOf) GetIsReadOnlyOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsReadOnly.Get(), o.IsReadOnly.IsSet()
}

// HasIsReadOnly returns a boolean if a field has been set.
func (o *UpdateViewParamAllOf) HasIsReadOnly() bool {
	if o != nil && o.IsReadOnly.IsSet() {
		return true
	}

	return false
}

// SetIsReadOnly gets a reference to the given NullableBool and assigns it to the IsReadOnly field.
func (o *UpdateViewParamAllOf) SetIsReadOnly(v bool) {
	o.IsReadOnly.Set(&v)
}
// SetIsReadOnlyNil sets the value for IsReadOnly to be an explicit nil
func (o *UpdateViewParamAllOf) SetIsReadOnlyNil() {
	o.IsReadOnly.Set(nil)
}

// UnsetIsReadOnly ensures that no value is present for IsReadOnly, not even an explicit nil
func (o *UpdateViewParamAllOf) UnsetIsReadOnly() {
	o.IsReadOnly.Unset()
}

// GetViewPinningConfig returns the ViewPinningConfig field value if set, zero value otherwise.
func (o *UpdateViewParamAllOf) GetViewPinningConfig() ViewPinningConfig {
	if o == nil || o.ViewPinningConfig == nil {
		var ret ViewPinningConfig
		return ret
	}
	return *o.ViewPinningConfig
}

// GetViewPinningConfigOk returns a tuple with the ViewPinningConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateViewParamAllOf) GetViewPinningConfigOk() (*ViewPinningConfig, bool) {
	if o == nil || o.ViewPinningConfig == nil {
		return nil, false
	}
	return o.ViewPinningConfig, true
}

// HasViewPinningConfig returns a boolean if a field has been set.
func (o *UpdateViewParamAllOf) HasViewPinningConfig() bool {
	if o != nil && o.ViewPinningConfig != nil {
		return true
	}

	return false
}

// SetViewPinningConfig gets a reference to the given ViewPinningConfig and assigns it to the ViewPinningConfig field.
func (o *UpdateViewParamAllOf) SetViewPinningConfig(v ViewPinningConfig) {
	o.ViewPinningConfig = &v
}

// GetSelfServiceSnapshotConfig returns the SelfServiceSnapshotConfig field value if set, zero value otherwise.
func (o *UpdateViewParamAllOf) GetSelfServiceSnapshotConfig() SelfServiceSnapshotConfig {
	if o == nil || o.SelfServiceSnapshotConfig == nil {
		var ret SelfServiceSnapshotConfig
		return ret
	}
	return *o.SelfServiceSnapshotConfig
}

// GetSelfServiceSnapshotConfigOk returns a tuple with the SelfServiceSnapshotConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateViewParamAllOf) GetSelfServiceSnapshotConfigOk() (*SelfServiceSnapshotConfig, bool) {
	if o == nil || o.SelfServiceSnapshotConfig == nil {
		return nil, false
	}
	return o.SelfServiceSnapshotConfig, true
}

// HasSelfServiceSnapshotConfig returns a boolean if a field has been set.
func (o *UpdateViewParamAllOf) HasSelfServiceSnapshotConfig() bool {
	if o != nil && o.SelfServiceSnapshotConfig != nil {
		return true
	}

	return false
}

// SetSelfServiceSnapshotConfig gets a reference to the given SelfServiceSnapshotConfig and assigns it to the SelfServiceSnapshotConfig field.
func (o *UpdateViewParamAllOf) SetSelfServiceSnapshotConfig(v SelfServiceSnapshotConfig) {
	o.SelfServiceSnapshotConfig = &v
}

// GetEnableMetadataAccelerator returns the EnableMetadataAccelerator field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateViewParamAllOf) GetEnableMetadataAccelerator() bool {
	if o == nil || o.EnableMetadataAccelerator.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableMetadataAccelerator.Get()
}

// GetEnableMetadataAcceleratorOk returns a tuple with the EnableMetadataAccelerator field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateViewParamAllOf) GetEnableMetadataAcceleratorOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableMetadataAccelerator.Get(), o.EnableMetadataAccelerator.IsSet()
}

// HasEnableMetadataAccelerator returns a boolean if a field has been set.
func (o *UpdateViewParamAllOf) HasEnableMetadataAccelerator() bool {
	if o != nil && o.EnableMetadataAccelerator.IsSet() {
		return true
	}

	return false
}

// SetEnableMetadataAccelerator gets a reference to the given NullableBool and assigns it to the EnableMetadataAccelerator field.
func (o *UpdateViewParamAllOf) SetEnableMetadataAccelerator(v bool) {
	o.EnableMetadataAccelerator.Set(&v)
}
// SetEnableMetadataAcceleratorNil sets the value for EnableMetadataAccelerator to be an explicit nil
func (o *UpdateViewParamAllOf) SetEnableMetadataAcceleratorNil() {
	o.EnableMetadataAccelerator.Set(nil)
}

// UnsetEnableMetadataAccelerator ensures that no value is present for EnableMetadataAccelerator, not even an explicit nil
func (o *UpdateViewParamAllOf) UnsetEnableMetadataAccelerator() {
	o.EnableMetadataAccelerator.Unset()
}

// GetIsExternallyTriggeredBackupTarget returns the IsExternallyTriggeredBackupTarget field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateViewParamAllOf) GetIsExternallyTriggeredBackupTarget() bool {
	if o == nil || o.IsExternallyTriggeredBackupTarget.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsExternallyTriggeredBackupTarget.Get()
}

// GetIsExternallyTriggeredBackupTargetOk returns a tuple with the IsExternallyTriggeredBackupTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateViewParamAllOf) GetIsExternallyTriggeredBackupTargetOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsExternallyTriggeredBackupTarget.Get(), o.IsExternallyTriggeredBackupTarget.IsSet()
}

// HasIsExternallyTriggeredBackupTarget returns a boolean if a field has been set.
func (o *UpdateViewParamAllOf) HasIsExternallyTriggeredBackupTarget() bool {
	if o != nil && o.IsExternallyTriggeredBackupTarget.IsSet() {
		return true
	}

	return false
}

// SetIsExternallyTriggeredBackupTarget gets a reference to the given NullableBool and assigns it to the IsExternallyTriggeredBackupTarget field.
func (o *UpdateViewParamAllOf) SetIsExternallyTriggeredBackupTarget(v bool) {
	o.IsExternallyTriggeredBackupTarget.Set(&v)
}
// SetIsExternallyTriggeredBackupTargetNil sets the value for IsExternallyTriggeredBackupTarget to be an explicit nil
func (o *UpdateViewParamAllOf) SetIsExternallyTriggeredBackupTargetNil() {
	o.IsExternallyTriggeredBackupTarget.Set(nil)
}

// UnsetIsExternallyTriggeredBackupTarget ensures that no value is present for IsExternallyTriggeredBackupTarget, not even an explicit nil
func (o *UpdateViewParamAllOf) UnsetIsExternallyTriggeredBackupTarget() {
	o.IsExternallyTriggeredBackupTarget.Unset()
}

func (o UpdateViewParamAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Category.IsSet() {
		toSerialize["category"] = o.Category.Get()
	}
	if o.ProtocolAccess != nil {
		toSerialize["protocolAccess"] = o.ProtocolAccess
	}
	if o.Qos != nil {
		toSerialize["qos"] = o.Qos
	}
	if o.OverrideGlobalSubnetWhitelist.IsSet() {
		toSerialize["overrideGlobalSubnetWhitelist"] = o.OverrideGlobalSubnetWhitelist.Get()
	}
	if o.SubnetWhitelist != nil {
		toSerialize["subnetWhitelist"] = o.SubnetWhitelist
	}
	if o.OverrideGlobalNetgroupWhitelist.IsSet() {
		toSerialize["overrideGlobalNetgroupWhitelist"] = o.OverrideGlobalNetgroupWhitelist.Get()
	}
	if o.NetgroupWhitelist != nil {
		toSerialize["netgroupWhitelist"] = o.NetgroupWhitelist
	}
	if o.SecurityMode.IsSet() {
		toSerialize["securityMode"] = o.SecurityMode.Get()
	}
	if o.StoragePolicyOverride != nil {
		toSerialize["storagePolicyOverride"] = o.StoragePolicyOverride
	}
	if o.LogicalQuota != nil {
		toSerialize["logicalQuota"] = o.LogicalQuota
	}
	if o.FileLockConfig != nil {
		toSerialize["fileLockConfig"] = o.FileLockConfig
	}
	if o.FileExtensionFilter != nil {
		toSerialize["fileExtensionFilter"] = o.FileExtensionFilter
	}
	if o.AntivirusScanConfig != nil {
		toSerialize["antivirusScanConfig"] = o.AntivirusScanConfig
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.AllowMountOnWindows.IsSet() {
		toSerialize["allowMountOnWindows"] = o.AllowMountOnWindows.Get()
	}
	if o.EnableMinion.IsSet() {
		toSerialize["enableMinion"] = o.EnableMinion.Get()
	}
	if o.EnableFilerAuditLogging.IsSet() {
		toSerialize["enableFilerAuditLogging"] = o.EnableFilerAuditLogging.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.EnableLiveIndexing.IsSet() {
		toSerialize["enableLiveIndexing"] = o.EnableLiveIndexing.Get()
	}
	if o.EnableOfflineCaching.IsSet() {
		toSerialize["enableOfflineCaching"] = o.EnableOfflineCaching.Get()
	}
	if o.AccessSids != nil {
		toSerialize["accessSids"] = o.AccessSids
	}
	if o.ViewLockEnabled.IsSet() {
		toSerialize["viewLockEnabled"] = o.ViewLockEnabled.Get()
	}
	if o.IsReadOnly.IsSet() {
		toSerialize["isReadOnly"] = o.IsReadOnly.Get()
	}
	if o.ViewPinningConfig != nil {
		toSerialize["viewPinningConfig"] = o.ViewPinningConfig
	}
	if o.SelfServiceSnapshotConfig != nil {
		toSerialize["selfServiceSnapshotConfig"] = o.SelfServiceSnapshotConfig
	}
	if o.EnableMetadataAccelerator.IsSet() {
		toSerialize["enableMetadataAccelerator"] = o.EnableMetadataAccelerator.Get()
	}
	if o.IsExternallyTriggeredBackupTarget.IsSet() {
		toSerialize["isExternallyTriggeredBackupTarget"] = o.IsExternallyTriggeredBackupTarget.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateViewParamAllOf struct {
	value *UpdateViewParamAllOf
	isSet bool
}

func (v NullableUpdateViewParamAllOf) Get() *UpdateViewParamAllOf {
	return v.value
}

func (v *NullableUpdateViewParamAllOf) Set(val *UpdateViewParamAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateViewParamAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateViewParamAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateViewParamAllOf(val *UpdateViewParamAllOf) *NullableUpdateViewParamAllOf {
	return &NullableUpdateViewParamAllOf{value: val, isSet: true}
}

func (v NullableUpdateViewParamAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateViewParamAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o UpdateViewParamAllOf) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}