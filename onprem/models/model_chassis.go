/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// Chassis Specifies information about hardware chassis.
type Chassis struct {
	// Specifies the id of the chassis used to uniquely identify a chassis.
	Id NullableInt64 `json:"id,omitempty"`
	// Specifies the hardware model of the chassis.
	HardwareModel NullableString `json:"hardwareModel,omitempty"`
	// Specifies the name of the chassis.
	Name NullableString `json:"name,omitempty"`
	// Specifies the serial number of the chassis.
	SerialNumber NullableString `json:"serialNumber,omitempty"`
	// Specifies list of ids of all the nodes in chassis.
	NodeIds []int64 `json:"nodeIds,omitempty"`
	// Rack Id that this chassis belong to
	RackId NullableInt64 `json:"rackId,omitempty"`
}

// NewChassis instantiates a new Chassis object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChassis() *Chassis {
	this := Chassis{}
	return &this
}

// NewChassisWithDefaults instantiates a new Chassis object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChassisWithDefaults() *Chassis {
	this := Chassis{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Chassis) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Chassis) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *Chassis) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *Chassis) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *Chassis) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *Chassis) UnsetId() {
	o.Id.Unset()
}

// GetHardwareModel returns the HardwareModel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Chassis) GetHardwareModel() string {
	if o == nil || o.HardwareModel.Get() == nil {
		var ret string
		return ret
	}
	return *o.HardwareModel.Get()
}

// GetHardwareModelOk returns a tuple with the HardwareModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Chassis) GetHardwareModelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HardwareModel.Get(), o.HardwareModel.IsSet()
}

// HasHardwareModel returns a boolean if a field has been set.
func (o *Chassis) HasHardwareModel() bool {
	if o != nil && o.HardwareModel.IsSet() {
		return true
	}

	return false
}

// SetHardwareModel gets a reference to the given NullableString and assigns it to the HardwareModel field.
func (o *Chassis) SetHardwareModel(v string) {
	o.HardwareModel.Set(&v)
}
// SetHardwareModelNil sets the value for HardwareModel to be an explicit nil
func (o *Chassis) SetHardwareModelNil() {
	o.HardwareModel.Set(nil)
}

// UnsetHardwareModel ensures that no value is present for HardwareModel, not even an explicit nil
func (o *Chassis) UnsetHardwareModel() {
	o.HardwareModel.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Chassis) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Chassis) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Chassis) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *Chassis) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *Chassis) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Chassis) UnsetName() {
	o.Name.Unset()
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Chassis) GetSerialNumber() string {
	if o == nil || o.SerialNumber.Get() == nil {
		var ret string
		return ret
	}
	return *o.SerialNumber.Get()
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Chassis) GetSerialNumberOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SerialNumber.Get(), o.SerialNumber.IsSet()
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *Chassis) HasSerialNumber() bool {
	if o != nil && o.SerialNumber.IsSet() {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given NullableString and assigns it to the SerialNumber field.
func (o *Chassis) SetSerialNumber(v string) {
	o.SerialNumber.Set(&v)
}
// SetSerialNumberNil sets the value for SerialNumber to be an explicit nil
func (o *Chassis) SetSerialNumberNil() {
	o.SerialNumber.Set(nil)
}

// UnsetSerialNumber ensures that no value is present for SerialNumber, not even an explicit nil
func (o *Chassis) UnsetSerialNumber() {
	o.SerialNumber.Unset()
}

// GetNodeIds returns the NodeIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Chassis) GetNodeIds() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.NodeIds
}

// GetNodeIdsOk returns a tuple with the NodeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Chassis) GetNodeIdsOk() (*[]int64, bool) {
	if o == nil || o.NodeIds == nil {
		return nil, false
	}
	return &o.NodeIds, true
}

// HasNodeIds returns a boolean if a field has been set.
func (o *Chassis) HasNodeIds() bool {
	if o != nil && o.NodeIds != nil {
		return true
	}

	return false
}

// SetNodeIds gets a reference to the given []int64 and assigns it to the NodeIds field.
func (o *Chassis) SetNodeIds(v []int64) {
	o.NodeIds = v
}

// GetRackId returns the RackId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Chassis) GetRackId() int64 {
	if o == nil || o.RackId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RackId.Get()
}

// GetRackIdOk returns a tuple with the RackId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Chassis) GetRackIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RackId.Get(), o.RackId.IsSet()
}

// HasRackId returns a boolean if a field has been set.
func (o *Chassis) HasRackId() bool {
	if o != nil && o.RackId.IsSet() {
		return true
	}

	return false
}

// SetRackId gets a reference to the given NullableInt64 and assigns it to the RackId field.
func (o *Chassis) SetRackId(v int64) {
	o.RackId.Set(&v)
}
// SetRackIdNil sets the value for RackId to be an explicit nil
func (o *Chassis) SetRackIdNil() {
	o.RackId.Set(nil)
}

// UnsetRackId ensures that no value is present for RackId, not even an explicit nil
func (o *Chassis) UnsetRackId() {
	o.RackId.Unset()
}

func (o Chassis) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.HardwareModel.IsSet() {
		toSerialize["hardwareModel"] = o.HardwareModel.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.SerialNumber.IsSet() {
		toSerialize["serialNumber"] = o.SerialNumber.Get()
	}
	if o.NodeIds != nil {
		toSerialize["nodeIds"] = o.NodeIds
	}
	if o.RackId.IsSet() {
		toSerialize["rackId"] = o.RackId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableChassis struct {
	value *Chassis
	isSet bool
}

func (v NullableChassis) Get() *Chassis {
	return v.value
}

func (v *NullableChassis) Set(val *Chassis) {
	v.value = val
	v.isSet = true
}

func (v NullableChassis) IsSet() bool {
	return v.isSet
}

func (v *NullableChassis) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChassis(val *Chassis) *NullableChassis {
	return &NullableChassis{value: val, isSet: true}
}

func (v NullableChassis) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChassis) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o Chassis) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}