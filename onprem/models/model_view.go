/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// View Specifies settings for defining a storage location (called a View) with NFS and SMB mount paths in a Storage Domain (View Box) on the Cohesity Cluster.
type View struct {
	// Specifies an id of the View assigned by the Cohesity Cluster.
	ViewId NullableInt64 `json:"viewId,omitempty"`
	// If True, category in response is not set by user but inferred by Iris because none is set. Category can only be none when view was created by v1 API or cloned from a view created by v1 API.  Inference Logic is as follows: 1. Object Services if only S3 or Swift protocol is selected. 2. Backup Target only if one read-write protocol is selected and    QoS is \"Backup Target Commvault\" or \"Backup Target SSD\". 3. File Services if there are more than 1 read-write protocol or    it doesn't fit any other category.
	IsCategoryInferred NullableBool `json:"isCategoryInferred,omitempty"`
	// DataLock (Write Once Read Many) lock expiry epoch time in microseconds. If a view is marked as a DataLock view, only a Data Security Officer (a user having Data Security Privilege) can delete the view until the lock expiry time.
	DataLockExpiryUsecs NullableInt64 `json:"dataLockExpiryUsecs,omitempty"`
	// Specifies the Object Services key mapping config of the view. This parameter can only be set during create and cannot be changed. Configuration of Object Services key mapping. Specifies the type of Object Services key mapping config.
	ObjectServicesMappingConfig NullableString `json:"objectServicesMappingConfig,omitempty"`
	// Specifies the id of the Storage Domain (View Box) where the View is stored.
	StorageDomainId NullableInt64 `json:"storageDomainId,omitempty"`
	// Specifies the name of the Storage Domain (View Box) where the View is stored.
	StorageDomainName NullableString `json:"storageDomainName,omitempty"`
	// Specifies whether to support case insensitive file/folder names. This parameter can only be set during create and cannot be changed.
	CaseInsensitiveNamesEnabled NullableBool `json:"caseInsensitiveNamesEnabled,omitempty"`
	// Specifies the time that the View was created in milliseconds.
	CreateTimeMsecs NullableInt64 `json:"createTimeMsecs,omitempty"`
	// Specifies the NFS mount path of the View (without the hostname information). This path is used to support NFS mounting of the paths specified in the nfsExportPathList on Windows systems.
	BasicMountPath NullableString `json:"basicMountPath,omitempty"`
	// This field is currently deprecated. Please use NFS MountPaths which would be an array of strings.
	NfsMountPath NullableString `json:"nfsMountPath,omitempty"`
	// Array of NFS Paths. Specifies the path for mounting this View as an NFS share. If Kerberos Provider has multiple hostaliases, each host alias has  its own path.
	NfsMountPaths []string `json:"nfsMountPaths,omitempty"`
	// Array of SMB Paths. Specifies the possible paths that can be used to mount this View as a SMB share. If Active Directory has multiple account names; each machine account has its own path.
	SmbMountPaths []string `json:"smbMountPaths,omitempty"`
	ViewProtection *ViewProtection `json:"viewProtection,omitempty"`
	// Aliases created for the view. A view alias allows a directory path inside a view to be mounted using the alias name.
	Aliases []ViewAliasInfo `json:"aliases,omitempty"`
	// Specifies if a view contains migrated data.
	IsTargetForMigratedData NullableBool `json:"isTargetForMigratedData,omitempty"`
	// Specifies the information about the failover of the view.
	ViewFailover *ViewFailover `json:"viewFailover,omitempty"`
	// Specifies statistics about the View.
	Stats *ViewStats `json:"stats,omitempty"`
	// Specifies the file count by size for the View.
	FileCountBySize *[]FileCount `json:"fileCountBySize,omitempty"`
	// Specifies the sid of the view owner.
	OwnerSid NullableString `json:"ownerSid,omitempty"`
	// Specifies the name of the View.
	Name NullableString `json:"name,omitempty"`
	// Specifies the category of the View.
	Category NullableString `json:"category,omitempty"`
	// Specifies the supported Protocols for the View.
	ProtocolAccess []ViewProtocol `json:"protocolAccess,omitempty"`
	// Specifies the Quality of Service (QoS) Policy for the View.
	Qos *QoS `json:"qos,omitempty"`
	// Specifies whether view level client subnet whitelist overrides cluster and global setting.
	OverrideGlobalSubnetWhitelist NullableBool `json:"overrideGlobalSubnetWhitelist,omitempty"`
	// Array of Subnets. Specifies a list of Subnets with IP addresses that have permissions to access the View. (Overrides or extends the Subnets specified at the global Cohesity Cluster level.)
	SubnetWhitelist []Subnet `json:"subnetWhitelist,omitempty"`
	// Specifies whether view level client netgroup whitelist overrides cluster and global setting.
	OverrideGlobalNetgroupWhitelist NullableBool `json:"overrideGlobalNetgroupWhitelist,omitempty"`
	// Array of Netgroups. Specifies a list of netgroups with domains that have permissions to access the View. (Overrides or extends the Netgroup specified at the global Cohesity Cluster level.)
	NetgroupWhitelist *NisNetgroups `json:"netgroupWhitelist,omitempty"`
	// Specifies the security mode used for this view. Currently we support the following modes: Native, Unified and NTFS style. 'NativeMode' indicates a native security mode. 'UnifiedMode' indicates a unified security mode. 'NtfsMode' indicates a NTFS style security mode.
	SecurityMode NullableString `json:"securityMode,omitempty"`
	// Specifies if inline deduplication and compression settings inherited from the Storage Domain (View Box) should be disabled for this View.
	StoragePolicyOverride *StoragePolicyOverride `json:"storagePolicyOverride,omitempty"`
	// Specifies an optional logical quota limit (in bytes) for the usage allowed on this View. (Logical data is when the data is fully hydrated and expanded.) This limit overrides the limit inherited from the Storage Domain (View Box) (if set). If logicalQuota is nil, the limit is inherited from the Storage Domain (View Box) (if set). A new write is not allowed if the Storage Domain (View Box) will exceed the specified quota. However, it takes time for the Cohesity Cluster to calculate the usage across Nodes, so the limit may be exceeded by a small amount. In addition, if the limit is increased or data is removed, there may be a delay before the Cohesity Cluster allows more data to be written to the View, as the Cluster is calculating the usage across Nodes.
	LogicalQuota *QuotaPolicy `json:"logicalQuota,omitempty"`
	// Optional config that enables file locking for this view. It cannot be disabled during the edit of a view, if it has been enabled during the creation of the view. Also, it cannot be enabled if it was disabled during the creation of the view.
	FileLockConfig *FileLevelDataLockConfig `json:"fileLockConfig,omitempty"`
	// Optional filtering criteria that should be satisfied by all the files created in this view. It does not affect existing files.
	FileExtensionFilter *FileExtensionFilter `json:"fileExtensionFilter,omitempty"`
	// Specifies the antivirus scan config settings for this View.
	AntivirusScanConfig *AntivirusScanConfig `json:"antivirusScanConfig,omitempty"`
	// Specifies an optional text description about the View.
	Description NullableString `json:"description,omitempty"`
	// Specifies if this View can be mounted using the NFS protocol on Windows systems. If true, this View can be NFS mounted on Windows systems.
	AllowMountOnWindows NullableBool `json:"allowMountOnWindows,omitempty"`
	// Specifies if this view should allow minion or not. If true, this will allow minion.
	EnableMinion NullableBool `json:"enableMinion,omitempty"`
	// Specifies if Filer Audit Logging is enabled for this view.
	EnableFilerAuditLogging NullableBool `json:"enableFilerAuditLogging,omitempty"`
	// Optional tenant id who has access to this View.
	TenantId NullableString `json:"tenantId,omitempty"`
	// Specifies whether to enable live indexing for the view.
	EnableLiveIndexing NullableBool `json:"enableLiveIndexing,omitempty"`
	// Specifies whether to enable offline file caching of the view.
	EnableOfflineCaching NullableBool `json:"enableOfflineCaching,omitempty"`
	// Array of Security Identifiers (SIDs) Specifies the list of security identifiers (SIDs) for the restricted Principals who have access to this View.
	AccessSids []string `json:"accessSids,omitempty"`
	// Specifies whether view lock is enabled. If enabled the view cannot be modified or deleted until unlock. By default it is disabled.
	ViewLockEnabled NullableBool `json:"viewLockEnabled,omitempty"`
	// Specifies if the view is a read only view. User will no longer be able to write to this view if this is set to true.
	IsReadOnly NullableBool `json:"isReadOnly,omitempty"`
	// Specifies the pinning config of this view.
	ViewPinningConfig *ViewPinningConfig `json:"viewPinningConfig,omitempty"`
	// Specifies self service config of this view.
	SelfServiceSnapshotConfig *SelfServiceSnapshotConfig `json:"selfServiceSnapshotConfig,omitempty"`
	// Specifies if metadata accelerator is enabled for this view. Only supported while creating a view.
	EnableMetadataAccelerator NullableBool `json:"enableMetadataAccelerator,omitempty"`
	// Specifies whether the view is for externally triggered backup target. If so, Magneto will ignore the backup schedule for the view protection job of this view. By default it is disabled.
	IsExternallyTriggeredBackupTarget NullableBool `json:"isExternallyTriggeredBackupTarget,omitempty"`
	// If set, it enables discovery of view for NFS.
	EnableNfsViewDiscovery NullableBool `json:"enableNfsViewDiscovery,omitempty"`
	// Specifies the NFS all squash config.
	NfsAllSquash *NfsSquash `json:"nfsAllSquash,omitempty"`
	// Specifies the NFS root permission config of the view file system.
	NfsRootPermissions *NfsRootPermissions `json:"nfsRootPermissions,omitempty"`
	// Specifies the NFS root squash config.
	NfsRootSquash *NfsSquash `json:"nfsRootSquash,omitempty"`
	// If set, it enables NFS UNIX Authentication
	EnableNfsUnixAuthentication NullableBool `json:"enableNfsUnixAuthentication,omitempty"`
	// If set, it enables NFS Kerberos Authentication
	EnableNfsKerberosAuthentication NullableBool `json:"enableNfsKerberosAuthentication,omitempty"`
	// If set, it enables NFS Kerberos Integrity
	EnableNfsKerberosIntegrity NullableBool `json:"enableNfsKerberosIntegrity,omitempty"`
	// If set, it enables NFS Kerberos Privacy
	EnableNfsKerberosPrivacy NullableBool `json:"enableNfsKerberosPrivacy,omitempty"`
	// If set, it enables discovery of view for SMB.
	EnableSmbViewDiscovery NullableBool `json:"enableSmbViewDiscovery,omitempty"`
	// Specifies if access-based enumeration should be enabled. If 'true', only files and folders that the user has permissions to access are visible on the SMB share for that user.
	EnableSmbAccessBasedEnumeration NullableBool `json:"enableSmbAccessBasedEnumeration,omitempty"`
	// Specifies the SMB encryption for the View. If set, it enables the SMB encryption for the View. Encryption is supported only by SMB 3.x dialects. Dialects that do not support would still access data in unencrypted format.
	EnableSmbEncryption NullableBool `json:"enableSmbEncryption,omitempty"`
	// Specifies the SMB encryption for all the sessions for the View. If set, encryption is enforced for all the sessions for the View. When enabled all future and existing unencrypted sessions are disallowed.
	EnforceSmbEncryption NullableBool `json:"enforceSmbEncryption,omitempty"`
	// Specifies whether fast durable handle is enabled. If enabled, view open handle will be kept in memory, which results in a higher performance. But the handles cannot be recovered if node or service crashes.
	EnableFastDurableHandle NullableBool `json:"enableFastDurableHandle,omitempty"`
	// Specifies whether SMB opportunistic lock is enabled.
	EnableSmbOplock NullableBool `json:"enableSmbOplock,omitempty"`
	// Specifies the SMB permissions for the View.
	SmbPermissionsInfo *SmbPermissionsInfo `json:"smbPermissionsInfo,omitempty"`
	// Specifies share level permissions of the view.
	SharePermissions *ViewSharePermissions `json:"sharePermissions,omitempty"`
	// Specifies the path to access this View as an S3 share.
	S3AccessPath NullableString `json:"s3AccessPath,omitempty"`
	// Specifies the ACL config of the View as an S3 bucket.
	AclConfig *AclConfig `json:"aclConfig,omitempty"`
	// Specifies the owner info of the View as an S3 bucket.
	OwnerInfo *S3OwnerInfo `json:"ownerInfo,omitempty"`
	// Specifies the Keystone project domain.
	SwiftProjectDomain NullableString `json:"swiftProjectDomain,omitempty"`
	// Specifies the Keystone project name.
	SwiftProjectName NullableString `json:"swiftProjectName,omitempty"`
	// Specifies the Keystone user domain.
	SwiftUserDomain NullableString `json:"swiftUserDomain,omitempty"`
	// Specifies the Keystone username.
	SwiftUsername NullableString `json:"swiftUsername,omitempty"`
}

// NewView instantiates a new View object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewView() *View {
	this := View{}
	return &this
}

// NewViewWithDefaults instantiates a new View object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewWithDefaults() *View {
	this := View{}
	return &this
}

// GetViewId returns the ViewId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetViewId() int64 {
	if o == nil || o.ViewId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ViewId.Get()
}

// GetViewIdOk returns a tuple with the ViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetViewIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewId.Get(), o.ViewId.IsSet()
}

// HasViewId returns a boolean if a field has been set.
func (o *View) HasViewId() bool {
	if o != nil && o.ViewId.IsSet() {
		return true
	}

	return false
}

// SetViewId gets a reference to the given NullableInt64 and assigns it to the ViewId field.
func (o *View) SetViewId(v int64) {
	o.ViewId.Set(&v)
}
// SetViewIdNil sets the value for ViewId to be an explicit nil
func (o *View) SetViewIdNil() {
	o.ViewId.Set(nil)
}

// UnsetViewId ensures that no value is present for ViewId, not even an explicit nil
func (o *View) UnsetViewId() {
	o.ViewId.Unset()
}

// GetIsCategoryInferred returns the IsCategoryInferred field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetIsCategoryInferred() bool {
	if o == nil || o.IsCategoryInferred.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsCategoryInferred.Get()
}

// GetIsCategoryInferredOk returns a tuple with the IsCategoryInferred field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetIsCategoryInferredOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsCategoryInferred.Get(), o.IsCategoryInferred.IsSet()
}

// HasIsCategoryInferred returns a boolean if a field has been set.
func (o *View) HasIsCategoryInferred() bool {
	if o != nil && o.IsCategoryInferred.IsSet() {
		return true
	}

	return false
}

// SetIsCategoryInferred gets a reference to the given NullableBool and assigns it to the IsCategoryInferred field.
func (o *View) SetIsCategoryInferred(v bool) {
	o.IsCategoryInferred.Set(&v)
}
// SetIsCategoryInferredNil sets the value for IsCategoryInferred to be an explicit nil
func (o *View) SetIsCategoryInferredNil() {
	o.IsCategoryInferred.Set(nil)
}

// UnsetIsCategoryInferred ensures that no value is present for IsCategoryInferred, not even an explicit nil
func (o *View) UnsetIsCategoryInferred() {
	o.IsCategoryInferred.Unset()
}

// GetDataLockExpiryUsecs returns the DataLockExpiryUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetDataLockExpiryUsecs() int64 {
	if o == nil || o.DataLockExpiryUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DataLockExpiryUsecs.Get()
}

// GetDataLockExpiryUsecsOk returns a tuple with the DataLockExpiryUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetDataLockExpiryUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DataLockExpiryUsecs.Get(), o.DataLockExpiryUsecs.IsSet()
}

// HasDataLockExpiryUsecs returns a boolean if a field has been set.
func (o *View) HasDataLockExpiryUsecs() bool {
	if o != nil && o.DataLockExpiryUsecs.IsSet() {
		return true
	}

	return false
}

// SetDataLockExpiryUsecs gets a reference to the given NullableInt64 and assigns it to the DataLockExpiryUsecs field.
func (o *View) SetDataLockExpiryUsecs(v int64) {
	o.DataLockExpiryUsecs.Set(&v)
}
// SetDataLockExpiryUsecsNil sets the value for DataLockExpiryUsecs to be an explicit nil
func (o *View) SetDataLockExpiryUsecsNil() {
	o.DataLockExpiryUsecs.Set(nil)
}

// UnsetDataLockExpiryUsecs ensures that no value is present for DataLockExpiryUsecs, not even an explicit nil
func (o *View) UnsetDataLockExpiryUsecs() {
	o.DataLockExpiryUsecs.Unset()
}

// GetObjectServicesMappingConfig returns the ObjectServicesMappingConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetObjectServicesMappingConfig() string {
	if o == nil || o.ObjectServicesMappingConfig.Get() == nil {
		var ret string
		return ret
	}
	return *o.ObjectServicesMappingConfig.Get()
}

// GetObjectServicesMappingConfigOk returns a tuple with the ObjectServicesMappingConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetObjectServicesMappingConfigOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ObjectServicesMappingConfig.Get(), o.ObjectServicesMappingConfig.IsSet()
}

// HasObjectServicesMappingConfig returns a boolean if a field has been set.
func (o *View) HasObjectServicesMappingConfig() bool {
	if o != nil && o.ObjectServicesMappingConfig.IsSet() {
		return true
	}

	return false
}

// SetObjectServicesMappingConfig gets a reference to the given NullableString and assigns it to the ObjectServicesMappingConfig field.
func (o *View) SetObjectServicesMappingConfig(v string) {
	o.ObjectServicesMappingConfig.Set(&v)
}
// SetObjectServicesMappingConfigNil sets the value for ObjectServicesMappingConfig to be an explicit nil
func (o *View) SetObjectServicesMappingConfigNil() {
	o.ObjectServicesMappingConfig.Set(nil)
}

// UnsetObjectServicesMappingConfig ensures that no value is present for ObjectServicesMappingConfig, not even an explicit nil
func (o *View) UnsetObjectServicesMappingConfig() {
	o.ObjectServicesMappingConfig.Unset()
}

// GetStorageDomainId returns the StorageDomainId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetStorageDomainId() int64 {
	if o == nil || o.StorageDomainId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.StorageDomainId.Get()
}

// GetStorageDomainIdOk returns a tuple with the StorageDomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetStorageDomainIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageDomainId.Get(), o.StorageDomainId.IsSet()
}

// HasStorageDomainId returns a boolean if a field has been set.
func (o *View) HasStorageDomainId() bool {
	if o != nil && o.StorageDomainId.IsSet() {
		return true
	}

	return false
}

// SetStorageDomainId gets a reference to the given NullableInt64 and assigns it to the StorageDomainId field.
func (o *View) SetStorageDomainId(v int64) {
	o.StorageDomainId.Set(&v)
}
// SetStorageDomainIdNil sets the value for StorageDomainId to be an explicit nil
func (o *View) SetStorageDomainIdNil() {
	o.StorageDomainId.Set(nil)
}

// UnsetStorageDomainId ensures that no value is present for StorageDomainId, not even an explicit nil
func (o *View) UnsetStorageDomainId() {
	o.StorageDomainId.Unset()
}

// GetStorageDomainName returns the StorageDomainName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetStorageDomainName() string {
	if o == nil || o.StorageDomainName.Get() == nil {
		var ret string
		return ret
	}
	return *o.StorageDomainName.Get()
}

// GetStorageDomainNameOk returns a tuple with the StorageDomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetStorageDomainNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageDomainName.Get(), o.StorageDomainName.IsSet()
}

// HasStorageDomainName returns a boolean if a field has been set.
func (o *View) HasStorageDomainName() bool {
	if o != nil && o.StorageDomainName.IsSet() {
		return true
	}

	return false
}

// SetStorageDomainName gets a reference to the given NullableString and assigns it to the StorageDomainName field.
func (o *View) SetStorageDomainName(v string) {
	o.StorageDomainName.Set(&v)
}
// SetStorageDomainNameNil sets the value for StorageDomainName to be an explicit nil
func (o *View) SetStorageDomainNameNil() {
	o.StorageDomainName.Set(nil)
}

// UnsetStorageDomainName ensures that no value is present for StorageDomainName, not even an explicit nil
func (o *View) UnsetStorageDomainName() {
	o.StorageDomainName.Unset()
}

// GetCaseInsensitiveNamesEnabled returns the CaseInsensitiveNamesEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetCaseInsensitiveNamesEnabled() bool {
	if o == nil || o.CaseInsensitiveNamesEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.CaseInsensitiveNamesEnabled.Get()
}

// GetCaseInsensitiveNamesEnabledOk returns a tuple with the CaseInsensitiveNamesEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetCaseInsensitiveNamesEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CaseInsensitiveNamesEnabled.Get(), o.CaseInsensitiveNamesEnabled.IsSet()
}

// HasCaseInsensitiveNamesEnabled returns a boolean if a field has been set.
func (o *View) HasCaseInsensitiveNamesEnabled() bool {
	if o != nil && o.CaseInsensitiveNamesEnabled.IsSet() {
		return true
	}

	return false
}

// SetCaseInsensitiveNamesEnabled gets a reference to the given NullableBool and assigns it to the CaseInsensitiveNamesEnabled field.
func (o *View) SetCaseInsensitiveNamesEnabled(v bool) {
	o.CaseInsensitiveNamesEnabled.Set(&v)
}
// SetCaseInsensitiveNamesEnabledNil sets the value for CaseInsensitiveNamesEnabled to be an explicit nil
func (o *View) SetCaseInsensitiveNamesEnabledNil() {
	o.CaseInsensitiveNamesEnabled.Set(nil)
}

// UnsetCaseInsensitiveNamesEnabled ensures that no value is present for CaseInsensitiveNamesEnabled, not even an explicit nil
func (o *View) UnsetCaseInsensitiveNamesEnabled() {
	o.CaseInsensitiveNamesEnabled.Unset()
}

// GetCreateTimeMsecs returns the CreateTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetCreateTimeMsecs() int64 {
	if o == nil || o.CreateTimeMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.CreateTimeMsecs.Get()
}

// GetCreateTimeMsecsOk returns a tuple with the CreateTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetCreateTimeMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CreateTimeMsecs.Get(), o.CreateTimeMsecs.IsSet()
}

// HasCreateTimeMsecs returns a boolean if a field has been set.
func (o *View) HasCreateTimeMsecs() bool {
	if o != nil && o.CreateTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetCreateTimeMsecs gets a reference to the given NullableInt64 and assigns it to the CreateTimeMsecs field.
func (o *View) SetCreateTimeMsecs(v int64) {
	o.CreateTimeMsecs.Set(&v)
}
// SetCreateTimeMsecsNil sets the value for CreateTimeMsecs to be an explicit nil
func (o *View) SetCreateTimeMsecsNil() {
	o.CreateTimeMsecs.Set(nil)
}

// UnsetCreateTimeMsecs ensures that no value is present for CreateTimeMsecs, not even an explicit nil
func (o *View) UnsetCreateTimeMsecs() {
	o.CreateTimeMsecs.Unset()
}

// GetBasicMountPath returns the BasicMountPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetBasicMountPath() string {
	if o == nil || o.BasicMountPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.BasicMountPath.Get()
}

// GetBasicMountPathOk returns a tuple with the BasicMountPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetBasicMountPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BasicMountPath.Get(), o.BasicMountPath.IsSet()
}

// HasBasicMountPath returns a boolean if a field has been set.
func (o *View) HasBasicMountPath() bool {
	if o != nil && o.BasicMountPath.IsSet() {
		return true
	}

	return false
}

// SetBasicMountPath gets a reference to the given NullableString and assigns it to the BasicMountPath field.
func (o *View) SetBasicMountPath(v string) {
	o.BasicMountPath.Set(&v)
}
// SetBasicMountPathNil sets the value for BasicMountPath to be an explicit nil
func (o *View) SetBasicMountPathNil() {
	o.BasicMountPath.Set(nil)
}

// UnsetBasicMountPath ensures that no value is present for BasicMountPath, not even an explicit nil
func (o *View) UnsetBasicMountPath() {
	o.BasicMountPath.Unset()
}

// GetNfsMountPath returns the NfsMountPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetNfsMountPath() string {
	if o == nil || o.NfsMountPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.NfsMountPath.Get()
}

// GetNfsMountPathOk returns a tuple with the NfsMountPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetNfsMountPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NfsMountPath.Get(), o.NfsMountPath.IsSet()
}

// HasNfsMountPath returns a boolean if a field has been set.
func (o *View) HasNfsMountPath() bool {
	if o != nil && o.NfsMountPath.IsSet() {
		return true
	}

	return false
}

// SetNfsMountPath gets a reference to the given NullableString and assigns it to the NfsMountPath field.
func (o *View) SetNfsMountPath(v string) {
	o.NfsMountPath.Set(&v)
}
// SetNfsMountPathNil sets the value for NfsMountPath to be an explicit nil
func (o *View) SetNfsMountPathNil() {
	o.NfsMountPath.Set(nil)
}

// UnsetNfsMountPath ensures that no value is present for NfsMountPath, not even an explicit nil
func (o *View) UnsetNfsMountPath() {
	o.NfsMountPath.Unset()
}

// GetNfsMountPaths returns the NfsMountPaths field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetNfsMountPaths() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.NfsMountPaths
}

// GetNfsMountPathsOk returns a tuple with the NfsMountPaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetNfsMountPathsOk() (*[]string, bool) {
	if o == nil || o.NfsMountPaths == nil {
		return nil, false
	}
	return &o.NfsMountPaths, true
}

// HasNfsMountPaths returns a boolean if a field has been set.
func (o *View) HasNfsMountPaths() bool {
	if o != nil && o.NfsMountPaths != nil {
		return true
	}

	return false
}

// SetNfsMountPaths gets a reference to the given []string and assigns it to the NfsMountPaths field.
func (o *View) SetNfsMountPaths(v []string) {
	o.NfsMountPaths = v
}

// GetSmbMountPaths returns the SmbMountPaths field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetSmbMountPaths() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.SmbMountPaths
}

// GetSmbMountPathsOk returns a tuple with the SmbMountPaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetSmbMountPathsOk() (*[]string, bool) {
	if o == nil || o.SmbMountPaths == nil {
		return nil, false
	}
	return &o.SmbMountPaths, true
}

// HasSmbMountPaths returns a boolean if a field has been set.
func (o *View) HasSmbMountPaths() bool {
	if o != nil && o.SmbMountPaths != nil {
		return true
	}

	return false
}

// SetSmbMountPaths gets a reference to the given []string and assigns it to the SmbMountPaths field.
func (o *View) SetSmbMountPaths(v []string) {
	o.SmbMountPaths = v
}

// GetViewProtection returns the ViewProtection field value if set, zero value otherwise.
func (o *View) GetViewProtection() ViewProtection {
	if o == nil || o.ViewProtection == nil {
		var ret ViewProtection
		return ret
	}
	return *o.ViewProtection
}

// GetViewProtectionOk returns a tuple with the ViewProtection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetViewProtectionOk() (*ViewProtection, bool) {
	if o == nil || o.ViewProtection == nil {
		return nil, false
	}
	return o.ViewProtection, true
}

// HasViewProtection returns a boolean if a field has been set.
func (o *View) HasViewProtection() bool {
	if o != nil && o.ViewProtection != nil {
		return true
	}

	return false
}

// SetViewProtection gets a reference to the given ViewProtection and assigns it to the ViewProtection field.
func (o *View) SetViewProtection(v ViewProtection) {
	o.ViewProtection = &v
}

// GetAliases returns the Aliases field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetAliases() []ViewAliasInfo {
	if o == nil  {
		var ret []ViewAliasInfo
		return ret
	}
	return o.Aliases
}

// GetAliasesOk returns a tuple with the Aliases field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetAliasesOk() (*[]ViewAliasInfo, bool) {
	if o == nil || o.Aliases == nil {
		return nil, false
	}
	return &o.Aliases, true
}

// HasAliases returns a boolean if a field has been set.
func (o *View) HasAliases() bool {
	if o != nil && o.Aliases != nil {
		return true
	}

	return false
}

// SetAliases gets a reference to the given []ViewAliasInfo and assigns it to the Aliases field.
func (o *View) SetAliases(v []ViewAliasInfo) {
	o.Aliases = v
}

// GetIsTargetForMigratedData returns the IsTargetForMigratedData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetIsTargetForMigratedData() bool {
	if o == nil || o.IsTargetForMigratedData.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsTargetForMigratedData.Get()
}

// GetIsTargetForMigratedDataOk returns a tuple with the IsTargetForMigratedData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetIsTargetForMigratedDataOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsTargetForMigratedData.Get(), o.IsTargetForMigratedData.IsSet()
}

// HasIsTargetForMigratedData returns a boolean if a field has been set.
func (o *View) HasIsTargetForMigratedData() bool {
	if o != nil && o.IsTargetForMigratedData.IsSet() {
		return true
	}

	return false
}

// SetIsTargetForMigratedData gets a reference to the given NullableBool and assigns it to the IsTargetForMigratedData field.
func (o *View) SetIsTargetForMigratedData(v bool) {
	o.IsTargetForMigratedData.Set(&v)
}
// SetIsTargetForMigratedDataNil sets the value for IsTargetForMigratedData to be an explicit nil
func (o *View) SetIsTargetForMigratedDataNil() {
	o.IsTargetForMigratedData.Set(nil)
}

// UnsetIsTargetForMigratedData ensures that no value is present for IsTargetForMigratedData, not even an explicit nil
func (o *View) UnsetIsTargetForMigratedData() {
	o.IsTargetForMigratedData.Unset()
}

// GetViewFailover returns the ViewFailover field value if set, zero value otherwise.
func (o *View) GetViewFailover() ViewFailover {
	if o == nil || o.ViewFailover == nil {
		var ret ViewFailover
		return ret
	}
	return *o.ViewFailover
}

// GetViewFailoverOk returns a tuple with the ViewFailover field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetViewFailoverOk() (*ViewFailover, bool) {
	if o == nil || o.ViewFailover == nil {
		return nil, false
	}
	return o.ViewFailover, true
}

// HasViewFailover returns a boolean if a field has been set.
func (o *View) HasViewFailover() bool {
	if o != nil && o.ViewFailover != nil {
		return true
	}

	return false
}

// SetViewFailover gets a reference to the given ViewFailover and assigns it to the ViewFailover field.
func (o *View) SetViewFailover(v ViewFailover) {
	o.ViewFailover = &v
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *View) GetStats() ViewStats {
	if o == nil || o.Stats == nil {
		var ret ViewStats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetStatsOk() (*ViewStats, bool) {
	if o == nil || o.Stats == nil {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *View) HasStats() bool {
	if o != nil && o.Stats != nil {
		return true
	}

	return false
}

// SetStats gets a reference to the given ViewStats and assigns it to the Stats field.
func (o *View) SetStats(v ViewStats) {
	o.Stats = &v
}

// GetFileCountBySize returns the FileCountBySize field value if set, zero value otherwise.
func (o *View) GetFileCountBySize() []FileCount {
	if o == nil || o.FileCountBySize == nil {
		var ret []FileCount
		return ret
	}
	return *o.FileCountBySize
}

// GetFileCountBySizeOk returns a tuple with the FileCountBySize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetFileCountBySizeOk() (*[]FileCount, bool) {
	if o == nil || o.FileCountBySize == nil {
		return nil, false
	}
	return o.FileCountBySize, true
}

// HasFileCountBySize returns a boolean if a field has been set.
func (o *View) HasFileCountBySize() bool {
	if o != nil && o.FileCountBySize != nil {
		return true
	}

	return false
}

// SetFileCountBySize gets a reference to the given []FileCount and assigns it to the FileCountBySize field.
func (o *View) SetFileCountBySize(v []FileCount) {
	o.FileCountBySize = &v
}

// GetOwnerSid returns the OwnerSid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetOwnerSid() string {
	if o == nil || o.OwnerSid.Get() == nil {
		var ret string
		return ret
	}
	return *o.OwnerSid.Get()
}

// GetOwnerSidOk returns a tuple with the OwnerSid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetOwnerSidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OwnerSid.Get(), o.OwnerSid.IsSet()
}

// HasOwnerSid returns a boolean if a field has been set.
func (o *View) HasOwnerSid() bool {
	if o != nil && o.OwnerSid.IsSet() {
		return true
	}

	return false
}

// SetOwnerSid gets a reference to the given NullableString and assigns it to the OwnerSid field.
func (o *View) SetOwnerSid(v string) {
	o.OwnerSid.Set(&v)
}
// SetOwnerSidNil sets the value for OwnerSid to be an explicit nil
func (o *View) SetOwnerSidNil() {
	o.OwnerSid.Set(nil)
}

// UnsetOwnerSid ensures that no value is present for OwnerSid, not even an explicit nil
func (o *View) UnsetOwnerSid() {
	o.OwnerSid.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *View) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *View) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *View) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *View) UnsetName() {
	o.Name.Unset()
}

// GetCategory returns the Category field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetCategory() string {
	if o == nil || o.Category.Get() == nil {
		var ret string
		return ret
	}
	return *o.Category.Get()
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetCategoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Category.Get(), o.Category.IsSet()
}

// HasCategory returns a boolean if a field has been set.
func (o *View) HasCategory() bool {
	if o != nil && o.Category.IsSet() {
		return true
	}

	return false
}

// SetCategory gets a reference to the given NullableString and assigns it to the Category field.
func (o *View) SetCategory(v string) {
	o.Category.Set(&v)
}
// SetCategoryNil sets the value for Category to be an explicit nil
func (o *View) SetCategoryNil() {
	o.Category.Set(nil)
}

// UnsetCategory ensures that no value is present for Category, not even an explicit nil
func (o *View) UnsetCategory() {
	o.Category.Unset()
}

// GetProtocolAccess returns the ProtocolAccess field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetProtocolAccess() []ViewProtocol {
	if o == nil  {
		var ret []ViewProtocol
		return ret
	}
	return o.ProtocolAccess
}

// GetProtocolAccessOk returns a tuple with the ProtocolAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetProtocolAccessOk() (*[]ViewProtocol, bool) {
	if o == nil || o.ProtocolAccess == nil {
		return nil, false
	}
	return &o.ProtocolAccess, true
}

// HasProtocolAccess returns a boolean if a field has been set.
func (o *View) HasProtocolAccess() bool {
	if o != nil && o.ProtocolAccess != nil {
		return true
	}

	return false
}

// SetProtocolAccess gets a reference to the given []ViewProtocol and assigns it to the ProtocolAccess field.
func (o *View) SetProtocolAccess(v []ViewProtocol) {
	o.ProtocolAccess = v
}

// GetQos returns the Qos field value if set, zero value otherwise.
func (o *View) GetQos() QoS {
	if o == nil || o.Qos == nil {
		var ret QoS
		return ret
	}
	return *o.Qos
}

// GetQosOk returns a tuple with the Qos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetQosOk() (*QoS, bool) {
	if o == nil || o.Qos == nil {
		return nil, false
	}
	return o.Qos, true
}

// HasQos returns a boolean if a field has been set.
func (o *View) HasQos() bool {
	if o != nil && o.Qos != nil {
		return true
	}

	return false
}

// SetQos gets a reference to the given QoS and assigns it to the Qos field.
func (o *View) SetQos(v QoS) {
	o.Qos = &v
}

// GetOverrideGlobalSubnetWhitelist returns the OverrideGlobalSubnetWhitelist field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetOverrideGlobalSubnetWhitelist() bool {
	if o == nil || o.OverrideGlobalSubnetWhitelist.Get() == nil {
		var ret bool
		return ret
	}
	return *o.OverrideGlobalSubnetWhitelist.Get()
}

// GetOverrideGlobalSubnetWhitelistOk returns a tuple with the OverrideGlobalSubnetWhitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetOverrideGlobalSubnetWhitelistOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OverrideGlobalSubnetWhitelist.Get(), o.OverrideGlobalSubnetWhitelist.IsSet()
}

// HasOverrideGlobalSubnetWhitelist returns a boolean if a field has been set.
func (o *View) HasOverrideGlobalSubnetWhitelist() bool {
	if o != nil && o.OverrideGlobalSubnetWhitelist.IsSet() {
		return true
	}

	return false
}

// SetOverrideGlobalSubnetWhitelist gets a reference to the given NullableBool and assigns it to the OverrideGlobalSubnetWhitelist field.
func (o *View) SetOverrideGlobalSubnetWhitelist(v bool) {
	o.OverrideGlobalSubnetWhitelist.Set(&v)
}
// SetOverrideGlobalSubnetWhitelistNil sets the value for OverrideGlobalSubnetWhitelist to be an explicit nil
func (o *View) SetOverrideGlobalSubnetWhitelistNil() {
	o.OverrideGlobalSubnetWhitelist.Set(nil)
}

// UnsetOverrideGlobalSubnetWhitelist ensures that no value is present for OverrideGlobalSubnetWhitelist, not even an explicit nil
func (o *View) UnsetOverrideGlobalSubnetWhitelist() {
	o.OverrideGlobalSubnetWhitelist.Unset()
}

// GetSubnetWhitelist returns the SubnetWhitelist field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetSubnetWhitelist() []Subnet {
	if o == nil  {
		var ret []Subnet
		return ret
	}
	return o.SubnetWhitelist
}

// GetSubnetWhitelistOk returns a tuple with the SubnetWhitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetSubnetWhitelistOk() (*[]Subnet, bool) {
	if o == nil || o.SubnetWhitelist == nil {
		return nil, false
	}
	return &o.SubnetWhitelist, true
}

// HasSubnetWhitelist returns a boolean if a field has been set.
func (o *View) HasSubnetWhitelist() bool {
	if o != nil && o.SubnetWhitelist != nil {
		return true
	}

	return false
}

// SetSubnetWhitelist gets a reference to the given []Subnet and assigns it to the SubnetWhitelist field.
func (o *View) SetSubnetWhitelist(v []Subnet) {
	o.SubnetWhitelist = v
}

// GetOverrideGlobalNetgroupWhitelist returns the OverrideGlobalNetgroupWhitelist field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetOverrideGlobalNetgroupWhitelist() bool {
	if o == nil || o.OverrideGlobalNetgroupWhitelist.Get() == nil {
		var ret bool
		return ret
	}
	return *o.OverrideGlobalNetgroupWhitelist.Get()
}

// GetOverrideGlobalNetgroupWhitelistOk returns a tuple with the OverrideGlobalNetgroupWhitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetOverrideGlobalNetgroupWhitelistOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OverrideGlobalNetgroupWhitelist.Get(), o.OverrideGlobalNetgroupWhitelist.IsSet()
}

// HasOverrideGlobalNetgroupWhitelist returns a boolean if a field has been set.
func (o *View) HasOverrideGlobalNetgroupWhitelist() bool {
	if o != nil && o.OverrideGlobalNetgroupWhitelist.IsSet() {
		return true
	}

	return false
}

// SetOverrideGlobalNetgroupWhitelist gets a reference to the given NullableBool and assigns it to the OverrideGlobalNetgroupWhitelist field.
func (o *View) SetOverrideGlobalNetgroupWhitelist(v bool) {
	o.OverrideGlobalNetgroupWhitelist.Set(&v)
}
// SetOverrideGlobalNetgroupWhitelistNil sets the value for OverrideGlobalNetgroupWhitelist to be an explicit nil
func (o *View) SetOverrideGlobalNetgroupWhitelistNil() {
	o.OverrideGlobalNetgroupWhitelist.Set(nil)
}

// UnsetOverrideGlobalNetgroupWhitelist ensures that no value is present for OverrideGlobalNetgroupWhitelist, not even an explicit nil
func (o *View) UnsetOverrideGlobalNetgroupWhitelist() {
	o.OverrideGlobalNetgroupWhitelist.Unset()
}

// GetNetgroupWhitelist returns the NetgroupWhitelist field value if set, zero value otherwise.
func (o *View) GetNetgroupWhitelist() NisNetgroups {
	if o == nil || o.NetgroupWhitelist == nil {
		var ret NisNetgroups
		return ret
	}
	return *o.NetgroupWhitelist
}

// GetNetgroupWhitelistOk returns a tuple with the NetgroupWhitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetNetgroupWhitelistOk() (*NisNetgroups, bool) {
	if o == nil || o.NetgroupWhitelist == nil {
		return nil, false
	}
	return o.NetgroupWhitelist, true
}

// HasNetgroupWhitelist returns a boolean if a field has been set.
func (o *View) HasNetgroupWhitelist() bool {
	if o != nil && o.NetgroupWhitelist != nil {
		return true
	}

	return false
}

// SetNetgroupWhitelist gets a reference to the given NisNetgroups and assigns it to the NetgroupWhitelist field.
func (o *View) SetNetgroupWhitelist(v NisNetgroups) {
	o.NetgroupWhitelist = &v
}

// GetSecurityMode returns the SecurityMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetSecurityMode() string {
	if o == nil || o.SecurityMode.Get() == nil {
		var ret string
		return ret
	}
	return *o.SecurityMode.Get()
}

// GetSecurityModeOk returns a tuple with the SecurityMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetSecurityModeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SecurityMode.Get(), o.SecurityMode.IsSet()
}

// HasSecurityMode returns a boolean if a field has been set.
func (o *View) HasSecurityMode() bool {
	if o != nil && o.SecurityMode.IsSet() {
		return true
	}

	return false
}

// SetSecurityMode gets a reference to the given NullableString and assigns it to the SecurityMode field.
func (o *View) SetSecurityMode(v string) {
	o.SecurityMode.Set(&v)
}
// SetSecurityModeNil sets the value for SecurityMode to be an explicit nil
func (o *View) SetSecurityModeNil() {
	o.SecurityMode.Set(nil)
}

// UnsetSecurityMode ensures that no value is present for SecurityMode, not even an explicit nil
func (o *View) UnsetSecurityMode() {
	o.SecurityMode.Unset()
}

// GetStoragePolicyOverride returns the StoragePolicyOverride field value if set, zero value otherwise.
func (o *View) GetStoragePolicyOverride() StoragePolicyOverride {
	if o == nil || o.StoragePolicyOverride == nil {
		var ret StoragePolicyOverride
		return ret
	}
	return *o.StoragePolicyOverride
}

// GetStoragePolicyOverrideOk returns a tuple with the StoragePolicyOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetStoragePolicyOverrideOk() (*StoragePolicyOverride, bool) {
	if o == nil || o.StoragePolicyOverride == nil {
		return nil, false
	}
	return o.StoragePolicyOverride, true
}

// HasStoragePolicyOverride returns a boolean if a field has been set.
func (o *View) HasStoragePolicyOverride() bool {
	if o != nil && o.StoragePolicyOverride != nil {
		return true
	}

	return false
}

// SetStoragePolicyOverride gets a reference to the given StoragePolicyOverride and assigns it to the StoragePolicyOverride field.
func (o *View) SetStoragePolicyOverride(v StoragePolicyOverride) {
	o.StoragePolicyOverride = &v
}

// GetLogicalQuota returns the LogicalQuota field value if set, zero value otherwise.
func (o *View) GetLogicalQuota() QuotaPolicy {
	if o == nil || o.LogicalQuota == nil {
		var ret QuotaPolicy
		return ret
	}
	return *o.LogicalQuota
}

// GetLogicalQuotaOk returns a tuple with the LogicalQuota field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetLogicalQuotaOk() (*QuotaPolicy, bool) {
	if o == nil || o.LogicalQuota == nil {
		return nil, false
	}
	return o.LogicalQuota, true
}

// HasLogicalQuota returns a boolean if a field has been set.
func (o *View) HasLogicalQuota() bool {
	if o != nil && o.LogicalQuota != nil {
		return true
	}

	return false
}

// SetLogicalQuota gets a reference to the given QuotaPolicy and assigns it to the LogicalQuota field.
func (o *View) SetLogicalQuota(v QuotaPolicy) {
	o.LogicalQuota = &v
}

// GetFileLockConfig returns the FileLockConfig field value if set, zero value otherwise.
func (o *View) GetFileLockConfig() FileLevelDataLockConfig {
	if o == nil || o.FileLockConfig == nil {
		var ret FileLevelDataLockConfig
		return ret
	}
	return *o.FileLockConfig
}

// GetFileLockConfigOk returns a tuple with the FileLockConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetFileLockConfigOk() (*FileLevelDataLockConfig, bool) {
	if o == nil || o.FileLockConfig == nil {
		return nil, false
	}
	return o.FileLockConfig, true
}

// HasFileLockConfig returns a boolean if a field has been set.
func (o *View) HasFileLockConfig() bool {
	if o != nil && o.FileLockConfig != nil {
		return true
	}

	return false
}

// SetFileLockConfig gets a reference to the given FileLevelDataLockConfig and assigns it to the FileLockConfig field.
func (o *View) SetFileLockConfig(v FileLevelDataLockConfig) {
	o.FileLockConfig = &v
}

// GetFileExtensionFilter returns the FileExtensionFilter field value if set, zero value otherwise.
func (o *View) GetFileExtensionFilter() FileExtensionFilter {
	if o == nil || o.FileExtensionFilter == nil {
		var ret FileExtensionFilter
		return ret
	}
	return *o.FileExtensionFilter
}

// GetFileExtensionFilterOk returns a tuple with the FileExtensionFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetFileExtensionFilterOk() (*FileExtensionFilter, bool) {
	if o == nil || o.FileExtensionFilter == nil {
		return nil, false
	}
	return o.FileExtensionFilter, true
}

// HasFileExtensionFilter returns a boolean if a field has been set.
func (o *View) HasFileExtensionFilter() bool {
	if o != nil && o.FileExtensionFilter != nil {
		return true
	}

	return false
}

// SetFileExtensionFilter gets a reference to the given FileExtensionFilter and assigns it to the FileExtensionFilter field.
func (o *View) SetFileExtensionFilter(v FileExtensionFilter) {
	o.FileExtensionFilter = &v
}

// GetAntivirusScanConfig returns the AntivirusScanConfig field value if set, zero value otherwise.
func (o *View) GetAntivirusScanConfig() AntivirusScanConfig {
	if o == nil || o.AntivirusScanConfig == nil {
		var ret AntivirusScanConfig
		return ret
	}
	return *o.AntivirusScanConfig
}

// GetAntivirusScanConfigOk returns a tuple with the AntivirusScanConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetAntivirusScanConfigOk() (*AntivirusScanConfig, bool) {
	if o == nil || o.AntivirusScanConfig == nil {
		return nil, false
	}
	return o.AntivirusScanConfig, true
}

// HasAntivirusScanConfig returns a boolean if a field has been set.
func (o *View) HasAntivirusScanConfig() bool {
	if o != nil && o.AntivirusScanConfig != nil {
		return true
	}

	return false
}

// SetAntivirusScanConfig gets a reference to the given AntivirusScanConfig and assigns it to the AntivirusScanConfig field.
func (o *View) SetAntivirusScanConfig(v AntivirusScanConfig) {
	o.AntivirusScanConfig = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *View) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *View) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *View) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *View) UnsetDescription() {
	o.Description.Unset()
}

// GetAllowMountOnWindows returns the AllowMountOnWindows field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetAllowMountOnWindows() bool {
	if o == nil || o.AllowMountOnWindows.Get() == nil {
		var ret bool
		return ret
	}
	return *o.AllowMountOnWindows.Get()
}

// GetAllowMountOnWindowsOk returns a tuple with the AllowMountOnWindows field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetAllowMountOnWindowsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AllowMountOnWindows.Get(), o.AllowMountOnWindows.IsSet()
}

// HasAllowMountOnWindows returns a boolean if a field has been set.
func (o *View) HasAllowMountOnWindows() bool {
	if o != nil && o.AllowMountOnWindows.IsSet() {
		return true
	}

	return false
}

// SetAllowMountOnWindows gets a reference to the given NullableBool and assigns it to the AllowMountOnWindows field.
func (o *View) SetAllowMountOnWindows(v bool) {
	o.AllowMountOnWindows.Set(&v)
}
// SetAllowMountOnWindowsNil sets the value for AllowMountOnWindows to be an explicit nil
func (o *View) SetAllowMountOnWindowsNil() {
	o.AllowMountOnWindows.Set(nil)
}

// UnsetAllowMountOnWindows ensures that no value is present for AllowMountOnWindows, not even an explicit nil
func (o *View) UnsetAllowMountOnWindows() {
	o.AllowMountOnWindows.Unset()
}

// GetEnableMinion returns the EnableMinion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetEnableMinion() bool {
	if o == nil || o.EnableMinion.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableMinion.Get()
}

// GetEnableMinionOk returns a tuple with the EnableMinion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetEnableMinionOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableMinion.Get(), o.EnableMinion.IsSet()
}

// HasEnableMinion returns a boolean if a field has been set.
func (o *View) HasEnableMinion() bool {
	if o != nil && o.EnableMinion.IsSet() {
		return true
	}

	return false
}

// SetEnableMinion gets a reference to the given NullableBool and assigns it to the EnableMinion field.
func (o *View) SetEnableMinion(v bool) {
	o.EnableMinion.Set(&v)
}
// SetEnableMinionNil sets the value for EnableMinion to be an explicit nil
func (o *View) SetEnableMinionNil() {
	o.EnableMinion.Set(nil)
}

// UnsetEnableMinion ensures that no value is present for EnableMinion, not even an explicit nil
func (o *View) UnsetEnableMinion() {
	o.EnableMinion.Unset()
}

// GetEnableFilerAuditLogging returns the EnableFilerAuditLogging field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetEnableFilerAuditLogging() bool {
	if o == nil || o.EnableFilerAuditLogging.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableFilerAuditLogging.Get()
}

// GetEnableFilerAuditLoggingOk returns a tuple with the EnableFilerAuditLogging field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetEnableFilerAuditLoggingOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableFilerAuditLogging.Get(), o.EnableFilerAuditLogging.IsSet()
}

// HasEnableFilerAuditLogging returns a boolean if a field has been set.
func (o *View) HasEnableFilerAuditLogging() bool {
	if o != nil && o.EnableFilerAuditLogging.IsSet() {
		return true
	}

	return false
}

// SetEnableFilerAuditLogging gets a reference to the given NullableBool and assigns it to the EnableFilerAuditLogging field.
func (o *View) SetEnableFilerAuditLogging(v bool) {
	o.EnableFilerAuditLogging.Set(&v)
}
// SetEnableFilerAuditLoggingNil sets the value for EnableFilerAuditLogging to be an explicit nil
func (o *View) SetEnableFilerAuditLoggingNil() {
	o.EnableFilerAuditLogging.Set(nil)
}

// UnsetEnableFilerAuditLogging ensures that no value is present for EnableFilerAuditLogging, not even an explicit nil
func (o *View) UnsetEnableFilerAuditLogging() {
	o.EnableFilerAuditLogging.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *View) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *View) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *View) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *View) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetEnableLiveIndexing returns the EnableLiveIndexing field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetEnableLiveIndexing() bool {
	if o == nil || o.EnableLiveIndexing.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableLiveIndexing.Get()
}

// GetEnableLiveIndexingOk returns a tuple with the EnableLiveIndexing field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetEnableLiveIndexingOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableLiveIndexing.Get(), o.EnableLiveIndexing.IsSet()
}

// HasEnableLiveIndexing returns a boolean if a field has been set.
func (o *View) HasEnableLiveIndexing() bool {
	if o != nil && o.EnableLiveIndexing.IsSet() {
		return true
	}

	return false
}

// SetEnableLiveIndexing gets a reference to the given NullableBool and assigns it to the EnableLiveIndexing field.
func (o *View) SetEnableLiveIndexing(v bool) {
	o.EnableLiveIndexing.Set(&v)
}
// SetEnableLiveIndexingNil sets the value for EnableLiveIndexing to be an explicit nil
func (o *View) SetEnableLiveIndexingNil() {
	o.EnableLiveIndexing.Set(nil)
}

// UnsetEnableLiveIndexing ensures that no value is present for EnableLiveIndexing, not even an explicit nil
func (o *View) UnsetEnableLiveIndexing() {
	o.EnableLiveIndexing.Unset()
}

// GetEnableOfflineCaching returns the EnableOfflineCaching field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetEnableOfflineCaching() bool {
	if o == nil || o.EnableOfflineCaching.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableOfflineCaching.Get()
}

// GetEnableOfflineCachingOk returns a tuple with the EnableOfflineCaching field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetEnableOfflineCachingOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableOfflineCaching.Get(), o.EnableOfflineCaching.IsSet()
}

// HasEnableOfflineCaching returns a boolean if a field has been set.
func (o *View) HasEnableOfflineCaching() bool {
	if o != nil && o.EnableOfflineCaching.IsSet() {
		return true
	}

	return false
}

// SetEnableOfflineCaching gets a reference to the given NullableBool and assigns it to the EnableOfflineCaching field.
func (o *View) SetEnableOfflineCaching(v bool) {
	o.EnableOfflineCaching.Set(&v)
}
// SetEnableOfflineCachingNil sets the value for EnableOfflineCaching to be an explicit nil
func (o *View) SetEnableOfflineCachingNil() {
	o.EnableOfflineCaching.Set(nil)
}

// UnsetEnableOfflineCaching ensures that no value is present for EnableOfflineCaching, not even an explicit nil
func (o *View) UnsetEnableOfflineCaching() {
	o.EnableOfflineCaching.Unset()
}

// GetAccessSids returns the AccessSids field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetAccessSids() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.AccessSids
}

// GetAccessSidsOk returns a tuple with the AccessSids field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetAccessSidsOk() (*[]string, bool) {
	if o == nil || o.AccessSids == nil {
		return nil, false
	}
	return &o.AccessSids, true
}

// HasAccessSids returns a boolean if a field has been set.
func (o *View) HasAccessSids() bool {
	if o != nil && o.AccessSids != nil {
		return true
	}

	return false
}

// SetAccessSids gets a reference to the given []string and assigns it to the AccessSids field.
func (o *View) SetAccessSids(v []string) {
	o.AccessSids = v
}

// GetViewLockEnabled returns the ViewLockEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetViewLockEnabled() bool {
	if o == nil || o.ViewLockEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ViewLockEnabled.Get()
}

// GetViewLockEnabledOk returns a tuple with the ViewLockEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetViewLockEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewLockEnabled.Get(), o.ViewLockEnabled.IsSet()
}

// HasViewLockEnabled returns a boolean if a field has been set.
func (o *View) HasViewLockEnabled() bool {
	if o != nil && o.ViewLockEnabled.IsSet() {
		return true
	}

	return false
}

// SetViewLockEnabled gets a reference to the given NullableBool and assigns it to the ViewLockEnabled field.
func (o *View) SetViewLockEnabled(v bool) {
	o.ViewLockEnabled.Set(&v)
}
// SetViewLockEnabledNil sets the value for ViewLockEnabled to be an explicit nil
func (o *View) SetViewLockEnabledNil() {
	o.ViewLockEnabled.Set(nil)
}

// UnsetViewLockEnabled ensures that no value is present for ViewLockEnabled, not even an explicit nil
func (o *View) UnsetViewLockEnabled() {
	o.ViewLockEnabled.Unset()
}

// GetIsReadOnly returns the IsReadOnly field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetIsReadOnly() bool {
	if o == nil || o.IsReadOnly.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsReadOnly.Get()
}

// GetIsReadOnlyOk returns a tuple with the IsReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetIsReadOnlyOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsReadOnly.Get(), o.IsReadOnly.IsSet()
}

// HasIsReadOnly returns a boolean if a field has been set.
func (o *View) HasIsReadOnly() bool {
	if o != nil && o.IsReadOnly.IsSet() {
		return true
	}

	return false
}

// SetIsReadOnly gets a reference to the given NullableBool and assigns it to the IsReadOnly field.
func (o *View) SetIsReadOnly(v bool) {
	o.IsReadOnly.Set(&v)
}
// SetIsReadOnlyNil sets the value for IsReadOnly to be an explicit nil
func (o *View) SetIsReadOnlyNil() {
	o.IsReadOnly.Set(nil)
}

// UnsetIsReadOnly ensures that no value is present for IsReadOnly, not even an explicit nil
func (o *View) UnsetIsReadOnly() {
	o.IsReadOnly.Unset()
}

// GetViewPinningConfig returns the ViewPinningConfig field value if set, zero value otherwise.
func (o *View) GetViewPinningConfig() ViewPinningConfig {
	if o == nil || o.ViewPinningConfig == nil {
		var ret ViewPinningConfig
		return ret
	}
	return *o.ViewPinningConfig
}

// GetViewPinningConfigOk returns a tuple with the ViewPinningConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetViewPinningConfigOk() (*ViewPinningConfig, bool) {
	if o == nil || o.ViewPinningConfig == nil {
		return nil, false
	}
	return o.ViewPinningConfig, true
}

// HasViewPinningConfig returns a boolean if a field has been set.
func (o *View) HasViewPinningConfig() bool {
	if o != nil && o.ViewPinningConfig != nil {
		return true
	}

	return false
}

// SetViewPinningConfig gets a reference to the given ViewPinningConfig and assigns it to the ViewPinningConfig field.
func (o *View) SetViewPinningConfig(v ViewPinningConfig) {
	o.ViewPinningConfig = &v
}

// GetSelfServiceSnapshotConfig returns the SelfServiceSnapshotConfig field value if set, zero value otherwise.
func (o *View) GetSelfServiceSnapshotConfig() SelfServiceSnapshotConfig {
	if o == nil || o.SelfServiceSnapshotConfig == nil {
		var ret SelfServiceSnapshotConfig
		return ret
	}
	return *o.SelfServiceSnapshotConfig
}

// GetSelfServiceSnapshotConfigOk returns a tuple with the SelfServiceSnapshotConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetSelfServiceSnapshotConfigOk() (*SelfServiceSnapshotConfig, bool) {
	if o == nil || o.SelfServiceSnapshotConfig == nil {
		return nil, false
	}
	return o.SelfServiceSnapshotConfig, true
}

// HasSelfServiceSnapshotConfig returns a boolean if a field has been set.
func (o *View) HasSelfServiceSnapshotConfig() bool {
	if o != nil && o.SelfServiceSnapshotConfig != nil {
		return true
	}

	return false
}

// SetSelfServiceSnapshotConfig gets a reference to the given SelfServiceSnapshotConfig and assigns it to the SelfServiceSnapshotConfig field.
func (o *View) SetSelfServiceSnapshotConfig(v SelfServiceSnapshotConfig) {
	o.SelfServiceSnapshotConfig = &v
}

// GetEnableMetadataAccelerator returns the EnableMetadataAccelerator field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetEnableMetadataAccelerator() bool {
	if o == nil || o.EnableMetadataAccelerator.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableMetadataAccelerator.Get()
}

// GetEnableMetadataAcceleratorOk returns a tuple with the EnableMetadataAccelerator field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetEnableMetadataAcceleratorOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableMetadataAccelerator.Get(), o.EnableMetadataAccelerator.IsSet()
}

// HasEnableMetadataAccelerator returns a boolean if a field has been set.
func (o *View) HasEnableMetadataAccelerator() bool {
	if o != nil && o.EnableMetadataAccelerator.IsSet() {
		return true
	}

	return false
}

// SetEnableMetadataAccelerator gets a reference to the given NullableBool and assigns it to the EnableMetadataAccelerator field.
func (o *View) SetEnableMetadataAccelerator(v bool) {
	o.EnableMetadataAccelerator.Set(&v)
}
// SetEnableMetadataAcceleratorNil sets the value for EnableMetadataAccelerator to be an explicit nil
func (o *View) SetEnableMetadataAcceleratorNil() {
	o.EnableMetadataAccelerator.Set(nil)
}

// UnsetEnableMetadataAccelerator ensures that no value is present for EnableMetadataAccelerator, not even an explicit nil
func (o *View) UnsetEnableMetadataAccelerator() {
	o.EnableMetadataAccelerator.Unset()
}

// GetIsExternallyTriggeredBackupTarget returns the IsExternallyTriggeredBackupTarget field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetIsExternallyTriggeredBackupTarget() bool {
	if o == nil || o.IsExternallyTriggeredBackupTarget.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsExternallyTriggeredBackupTarget.Get()
}

// GetIsExternallyTriggeredBackupTargetOk returns a tuple with the IsExternallyTriggeredBackupTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetIsExternallyTriggeredBackupTargetOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsExternallyTriggeredBackupTarget.Get(), o.IsExternallyTriggeredBackupTarget.IsSet()
}

// HasIsExternallyTriggeredBackupTarget returns a boolean if a field has been set.
func (o *View) HasIsExternallyTriggeredBackupTarget() bool {
	if o != nil && o.IsExternallyTriggeredBackupTarget.IsSet() {
		return true
	}

	return false
}

// SetIsExternallyTriggeredBackupTarget gets a reference to the given NullableBool and assigns it to the IsExternallyTriggeredBackupTarget field.
func (o *View) SetIsExternallyTriggeredBackupTarget(v bool) {
	o.IsExternallyTriggeredBackupTarget.Set(&v)
}
// SetIsExternallyTriggeredBackupTargetNil sets the value for IsExternallyTriggeredBackupTarget to be an explicit nil
func (o *View) SetIsExternallyTriggeredBackupTargetNil() {
	o.IsExternallyTriggeredBackupTarget.Set(nil)
}

// UnsetIsExternallyTriggeredBackupTarget ensures that no value is present for IsExternallyTriggeredBackupTarget, not even an explicit nil
func (o *View) UnsetIsExternallyTriggeredBackupTarget() {
	o.IsExternallyTriggeredBackupTarget.Unset()
}

// GetEnableNfsViewDiscovery returns the EnableNfsViewDiscovery field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetEnableNfsViewDiscovery() bool {
	if o == nil || o.EnableNfsViewDiscovery.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableNfsViewDiscovery.Get()
}

// GetEnableNfsViewDiscoveryOk returns a tuple with the EnableNfsViewDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetEnableNfsViewDiscoveryOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableNfsViewDiscovery.Get(), o.EnableNfsViewDiscovery.IsSet()
}

// HasEnableNfsViewDiscovery returns a boolean if a field has been set.
func (o *View) HasEnableNfsViewDiscovery() bool {
	if o != nil && o.EnableNfsViewDiscovery.IsSet() {
		return true
	}

	return false
}

// SetEnableNfsViewDiscovery gets a reference to the given NullableBool and assigns it to the EnableNfsViewDiscovery field.
func (o *View) SetEnableNfsViewDiscovery(v bool) {
	o.EnableNfsViewDiscovery.Set(&v)
}
// SetEnableNfsViewDiscoveryNil sets the value for EnableNfsViewDiscovery to be an explicit nil
func (o *View) SetEnableNfsViewDiscoveryNil() {
	o.EnableNfsViewDiscovery.Set(nil)
}

// UnsetEnableNfsViewDiscovery ensures that no value is present for EnableNfsViewDiscovery, not even an explicit nil
func (o *View) UnsetEnableNfsViewDiscovery() {
	o.EnableNfsViewDiscovery.Unset()
}

// GetNfsAllSquash returns the NfsAllSquash field value if set, zero value otherwise.
func (o *View) GetNfsAllSquash() NfsSquash {
	if o == nil || o.NfsAllSquash == nil {
		var ret NfsSquash
		return ret
	}
	return *o.NfsAllSquash
}

// GetNfsAllSquashOk returns a tuple with the NfsAllSquash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetNfsAllSquashOk() (*NfsSquash, bool) {
	if o == nil || o.NfsAllSquash == nil {
		return nil, false
	}
	return o.NfsAllSquash, true
}

// HasNfsAllSquash returns a boolean if a field has been set.
func (o *View) HasNfsAllSquash() bool {
	if o != nil && o.NfsAllSquash != nil {
		return true
	}

	return false
}

// SetNfsAllSquash gets a reference to the given NfsSquash and assigns it to the NfsAllSquash field.
func (o *View) SetNfsAllSquash(v NfsSquash) {
	o.NfsAllSquash = &v
}

// GetNfsRootPermissions returns the NfsRootPermissions field value if set, zero value otherwise.
func (o *View) GetNfsRootPermissions() NfsRootPermissions {
	if o == nil || o.NfsRootPermissions == nil {
		var ret NfsRootPermissions
		return ret
	}
	return *o.NfsRootPermissions
}

// GetNfsRootPermissionsOk returns a tuple with the NfsRootPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetNfsRootPermissionsOk() (*NfsRootPermissions, bool) {
	if o == nil || o.NfsRootPermissions == nil {
		return nil, false
	}
	return o.NfsRootPermissions, true
}

// HasNfsRootPermissions returns a boolean if a field has been set.
func (o *View) HasNfsRootPermissions() bool {
	if o != nil && o.NfsRootPermissions != nil {
		return true
	}

	return false
}

// SetNfsRootPermissions gets a reference to the given NfsRootPermissions and assigns it to the NfsRootPermissions field.
func (o *View) SetNfsRootPermissions(v NfsRootPermissions) {
	o.NfsRootPermissions = &v
}

// GetNfsRootSquash returns the NfsRootSquash field value if set, zero value otherwise.
func (o *View) GetNfsRootSquash() NfsSquash {
	if o == nil || o.NfsRootSquash == nil {
		var ret NfsSquash
		return ret
	}
	return *o.NfsRootSquash
}

// GetNfsRootSquashOk returns a tuple with the NfsRootSquash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetNfsRootSquashOk() (*NfsSquash, bool) {
	if o == nil || o.NfsRootSquash == nil {
		return nil, false
	}
	return o.NfsRootSquash, true
}

// HasNfsRootSquash returns a boolean if a field has been set.
func (o *View) HasNfsRootSquash() bool {
	if o != nil && o.NfsRootSquash != nil {
		return true
	}

	return false
}

// SetNfsRootSquash gets a reference to the given NfsSquash and assigns it to the NfsRootSquash field.
func (o *View) SetNfsRootSquash(v NfsSquash) {
	o.NfsRootSquash = &v
}

// GetEnableNfsUnixAuthentication returns the EnableNfsUnixAuthentication field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetEnableNfsUnixAuthentication() bool {
	if o == nil || o.EnableNfsUnixAuthentication.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableNfsUnixAuthentication.Get()
}

// GetEnableNfsUnixAuthenticationOk returns a tuple with the EnableNfsUnixAuthentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetEnableNfsUnixAuthenticationOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableNfsUnixAuthentication.Get(), o.EnableNfsUnixAuthentication.IsSet()
}

// HasEnableNfsUnixAuthentication returns a boolean if a field has been set.
func (o *View) HasEnableNfsUnixAuthentication() bool {
	if o != nil && o.EnableNfsUnixAuthentication.IsSet() {
		return true
	}

	return false
}

// SetEnableNfsUnixAuthentication gets a reference to the given NullableBool and assigns it to the EnableNfsUnixAuthentication field.
func (o *View) SetEnableNfsUnixAuthentication(v bool) {
	o.EnableNfsUnixAuthentication.Set(&v)
}
// SetEnableNfsUnixAuthenticationNil sets the value for EnableNfsUnixAuthentication to be an explicit nil
func (o *View) SetEnableNfsUnixAuthenticationNil() {
	o.EnableNfsUnixAuthentication.Set(nil)
}

// UnsetEnableNfsUnixAuthentication ensures that no value is present for EnableNfsUnixAuthentication, not even an explicit nil
func (o *View) UnsetEnableNfsUnixAuthentication() {
	o.EnableNfsUnixAuthentication.Unset()
}

// GetEnableNfsKerberosAuthentication returns the EnableNfsKerberosAuthentication field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetEnableNfsKerberosAuthentication() bool {
	if o == nil || o.EnableNfsKerberosAuthentication.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableNfsKerberosAuthentication.Get()
}

// GetEnableNfsKerberosAuthenticationOk returns a tuple with the EnableNfsKerberosAuthentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetEnableNfsKerberosAuthenticationOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableNfsKerberosAuthentication.Get(), o.EnableNfsKerberosAuthentication.IsSet()
}

// HasEnableNfsKerberosAuthentication returns a boolean if a field has been set.
func (o *View) HasEnableNfsKerberosAuthentication() bool {
	if o != nil && o.EnableNfsKerberosAuthentication.IsSet() {
		return true
	}

	return false
}

// SetEnableNfsKerberosAuthentication gets a reference to the given NullableBool and assigns it to the EnableNfsKerberosAuthentication field.
func (o *View) SetEnableNfsKerberosAuthentication(v bool) {
	o.EnableNfsKerberosAuthentication.Set(&v)
}
// SetEnableNfsKerberosAuthenticationNil sets the value for EnableNfsKerberosAuthentication to be an explicit nil
func (o *View) SetEnableNfsKerberosAuthenticationNil() {
	o.EnableNfsKerberosAuthentication.Set(nil)
}

// UnsetEnableNfsKerberosAuthentication ensures that no value is present for EnableNfsKerberosAuthentication, not even an explicit nil
func (o *View) UnsetEnableNfsKerberosAuthentication() {
	o.EnableNfsKerberosAuthentication.Unset()
}

// GetEnableNfsKerberosIntegrity returns the EnableNfsKerberosIntegrity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetEnableNfsKerberosIntegrity() bool {
	if o == nil || o.EnableNfsKerberosIntegrity.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableNfsKerberosIntegrity.Get()
}

// GetEnableNfsKerberosIntegrityOk returns a tuple with the EnableNfsKerberosIntegrity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetEnableNfsKerberosIntegrityOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableNfsKerberosIntegrity.Get(), o.EnableNfsKerberosIntegrity.IsSet()
}

// HasEnableNfsKerberosIntegrity returns a boolean if a field has been set.
func (o *View) HasEnableNfsKerberosIntegrity() bool {
	if o != nil && o.EnableNfsKerberosIntegrity.IsSet() {
		return true
	}

	return false
}

// SetEnableNfsKerberosIntegrity gets a reference to the given NullableBool and assigns it to the EnableNfsKerberosIntegrity field.
func (o *View) SetEnableNfsKerberosIntegrity(v bool) {
	o.EnableNfsKerberosIntegrity.Set(&v)
}
// SetEnableNfsKerberosIntegrityNil sets the value for EnableNfsKerberosIntegrity to be an explicit nil
func (o *View) SetEnableNfsKerberosIntegrityNil() {
	o.EnableNfsKerberosIntegrity.Set(nil)
}

// UnsetEnableNfsKerberosIntegrity ensures that no value is present for EnableNfsKerberosIntegrity, not even an explicit nil
func (o *View) UnsetEnableNfsKerberosIntegrity() {
	o.EnableNfsKerberosIntegrity.Unset()
}

// GetEnableNfsKerberosPrivacy returns the EnableNfsKerberosPrivacy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetEnableNfsKerberosPrivacy() bool {
	if o == nil || o.EnableNfsKerberosPrivacy.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableNfsKerberosPrivacy.Get()
}

// GetEnableNfsKerberosPrivacyOk returns a tuple with the EnableNfsKerberosPrivacy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetEnableNfsKerberosPrivacyOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableNfsKerberosPrivacy.Get(), o.EnableNfsKerberosPrivacy.IsSet()
}

// HasEnableNfsKerberosPrivacy returns a boolean if a field has been set.
func (o *View) HasEnableNfsKerberosPrivacy() bool {
	if o != nil && o.EnableNfsKerberosPrivacy.IsSet() {
		return true
	}

	return false
}

// SetEnableNfsKerberosPrivacy gets a reference to the given NullableBool and assigns it to the EnableNfsKerberosPrivacy field.
func (o *View) SetEnableNfsKerberosPrivacy(v bool) {
	o.EnableNfsKerberosPrivacy.Set(&v)
}
// SetEnableNfsKerberosPrivacyNil sets the value for EnableNfsKerberosPrivacy to be an explicit nil
func (o *View) SetEnableNfsKerberosPrivacyNil() {
	o.EnableNfsKerberosPrivacy.Set(nil)
}

// UnsetEnableNfsKerberosPrivacy ensures that no value is present for EnableNfsKerberosPrivacy, not even an explicit nil
func (o *View) UnsetEnableNfsKerberosPrivacy() {
	o.EnableNfsKerberosPrivacy.Unset()
}

// GetEnableSmbViewDiscovery returns the EnableSmbViewDiscovery field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetEnableSmbViewDiscovery() bool {
	if o == nil || o.EnableSmbViewDiscovery.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableSmbViewDiscovery.Get()
}

// GetEnableSmbViewDiscoveryOk returns a tuple with the EnableSmbViewDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetEnableSmbViewDiscoveryOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableSmbViewDiscovery.Get(), o.EnableSmbViewDiscovery.IsSet()
}

// HasEnableSmbViewDiscovery returns a boolean if a field has been set.
func (o *View) HasEnableSmbViewDiscovery() bool {
	if o != nil && o.EnableSmbViewDiscovery.IsSet() {
		return true
	}

	return false
}

// SetEnableSmbViewDiscovery gets a reference to the given NullableBool and assigns it to the EnableSmbViewDiscovery field.
func (o *View) SetEnableSmbViewDiscovery(v bool) {
	o.EnableSmbViewDiscovery.Set(&v)
}
// SetEnableSmbViewDiscoveryNil sets the value for EnableSmbViewDiscovery to be an explicit nil
func (o *View) SetEnableSmbViewDiscoveryNil() {
	o.EnableSmbViewDiscovery.Set(nil)
}

// UnsetEnableSmbViewDiscovery ensures that no value is present for EnableSmbViewDiscovery, not even an explicit nil
func (o *View) UnsetEnableSmbViewDiscovery() {
	o.EnableSmbViewDiscovery.Unset()
}

// GetEnableSmbAccessBasedEnumeration returns the EnableSmbAccessBasedEnumeration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetEnableSmbAccessBasedEnumeration() bool {
	if o == nil || o.EnableSmbAccessBasedEnumeration.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableSmbAccessBasedEnumeration.Get()
}

// GetEnableSmbAccessBasedEnumerationOk returns a tuple with the EnableSmbAccessBasedEnumeration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetEnableSmbAccessBasedEnumerationOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableSmbAccessBasedEnumeration.Get(), o.EnableSmbAccessBasedEnumeration.IsSet()
}

// HasEnableSmbAccessBasedEnumeration returns a boolean if a field has been set.
func (o *View) HasEnableSmbAccessBasedEnumeration() bool {
	if o != nil && o.EnableSmbAccessBasedEnumeration.IsSet() {
		return true
	}

	return false
}

// SetEnableSmbAccessBasedEnumeration gets a reference to the given NullableBool and assigns it to the EnableSmbAccessBasedEnumeration field.
func (o *View) SetEnableSmbAccessBasedEnumeration(v bool) {
	o.EnableSmbAccessBasedEnumeration.Set(&v)
}
// SetEnableSmbAccessBasedEnumerationNil sets the value for EnableSmbAccessBasedEnumeration to be an explicit nil
func (o *View) SetEnableSmbAccessBasedEnumerationNil() {
	o.EnableSmbAccessBasedEnumeration.Set(nil)
}

// UnsetEnableSmbAccessBasedEnumeration ensures that no value is present for EnableSmbAccessBasedEnumeration, not even an explicit nil
func (o *View) UnsetEnableSmbAccessBasedEnumeration() {
	o.EnableSmbAccessBasedEnumeration.Unset()
}

// GetEnableSmbEncryption returns the EnableSmbEncryption field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetEnableSmbEncryption() bool {
	if o == nil || o.EnableSmbEncryption.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableSmbEncryption.Get()
}

// GetEnableSmbEncryptionOk returns a tuple with the EnableSmbEncryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetEnableSmbEncryptionOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableSmbEncryption.Get(), o.EnableSmbEncryption.IsSet()
}

// HasEnableSmbEncryption returns a boolean if a field has been set.
func (o *View) HasEnableSmbEncryption() bool {
	if o != nil && o.EnableSmbEncryption.IsSet() {
		return true
	}

	return false
}

// SetEnableSmbEncryption gets a reference to the given NullableBool and assigns it to the EnableSmbEncryption field.
func (o *View) SetEnableSmbEncryption(v bool) {
	o.EnableSmbEncryption.Set(&v)
}
// SetEnableSmbEncryptionNil sets the value for EnableSmbEncryption to be an explicit nil
func (o *View) SetEnableSmbEncryptionNil() {
	o.EnableSmbEncryption.Set(nil)
}

// UnsetEnableSmbEncryption ensures that no value is present for EnableSmbEncryption, not even an explicit nil
func (o *View) UnsetEnableSmbEncryption() {
	o.EnableSmbEncryption.Unset()
}

// GetEnforceSmbEncryption returns the EnforceSmbEncryption field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetEnforceSmbEncryption() bool {
	if o == nil || o.EnforceSmbEncryption.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnforceSmbEncryption.Get()
}

// GetEnforceSmbEncryptionOk returns a tuple with the EnforceSmbEncryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetEnforceSmbEncryptionOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnforceSmbEncryption.Get(), o.EnforceSmbEncryption.IsSet()
}

// HasEnforceSmbEncryption returns a boolean if a field has been set.
func (o *View) HasEnforceSmbEncryption() bool {
	if o != nil && o.EnforceSmbEncryption.IsSet() {
		return true
	}

	return false
}

// SetEnforceSmbEncryption gets a reference to the given NullableBool and assigns it to the EnforceSmbEncryption field.
func (o *View) SetEnforceSmbEncryption(v bool) {
	o.EnforceSmbEncryption.Set(&v)
}
// SetEnforceSmbEncryptionNil sets the value for EnforceSmbEncryption to be an explicit nil
func (o *View) SetEnforceSmbEncryptionNil() {
	o.EnforceSmbEncryption.Set(nil)
}

// UnsetEnforceSmbEncryption ensures that no value is present for EnforceSmbEncryption, not even an explicit nil
func (o *View) UnsetEnforceSmbEncryption() {
	o.EnforceSmbEncryption.Unset()
}

// GetEnableFastDurableHandle returns the EnableFastDurableHandle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetEnableFastDurableHandle() bool {
	if o == nil || o.EnableFastDurableHandle.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableFastDurableHandle.Get()
}

// GetEnableFastDurableHandleOk returns a tuple with the EnableFastDurableHandle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetEnableFastDurableHandleOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableFastDurableHandle.Get(), o.EnableFastDurableHandle.IsSet()
}

// HasEnableFastDurableHandle returns a boolean if a field has been set.
func (o *View) HasEnableFastDurableHandle() bool {
	if o != nil && o.EnableFastDurableHandle.IsSet() {
		return true
	}

	return false
}

// SetEnableFastDurableHandle gets a reference to the given NullableBool and assigns it to the EnableFastDurableHandle field.
func (o *View) SetEnableFastDurableHandle(v bool) {
	o.EnableFastDurableHandle.Set(&v)
}
// SetEnableFastDurableHandleNil sets the value for EnableFastDurableHandle to be an explicit nil
func (o *View) SetEnableFastDurableHandleNil() {
	o.EnableFastDurableHandle.Set(nil)
}

// UnsetEnableFastDurableHandle ensures that no value is present for EnableFastDurableHandle, not even an explicit nil
func (o *View) UnsetEnableFastDurableHandle() {
	o.EnableFastDurableHandle.Unset()
}

// GetEnableSmbOplock returns the EnableSmbOplock field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetEnableSmbOplock() bool {
	if o == nil || o.EnableSmbOplock.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableSmbOplock.Get()
}

// GetEnableSmbOplockOk returns a tuple with the EnableSmbOplock field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetEnableSmbOplockOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableSmbOplock.Get(), o.EnableSmbOplock.IsSet()
}

// HasEnableSmbOplock returns a boolean if a field has been set.
func (o *View) HasEnableSmbOplock() bool {
	if o != nil && o.EnableSmbOplock.IsSet() {
		return true
	}

	return false
}

// SetEnableSmbOplock gets a reference to the given NullableBool and assigns it to the EnableSmbOplock field.
func (o *View) SetEnableSmbOplock(v bool) {
	o.EnableSmbOplock.Set(&v)
}
// SetEnableSmbOplockNil sets the value for EnableSmbOplock to be an explicit nil
func (o *View) SetEnableSmbOplockNil() {
	o.EnableSmbOplock.Set(nil)
}

// UnsetEnableSmbOplock ensures that no value is present for EnableSmbOplock, not even an explicit nil
func (o *View) UnsetEnableSmbOplock() {
	o.EnableSmbOplock.Unset()
}

// GetSmbPermissionsInfo returns the SmbPermissionsInfo field value if set, zero value otherwise.
func (o *View) GetSmbPermissionsInfo() SmbPermissionsInfo {
	if o == nil || o.SmbPermissionsInfo == nil {
		var ret SmbPermissionsInfo
		return ret
	}
	return *o.SmbPermissionsInfo
}

// GetSmbPermissionsInfoOk returns a tuple with the SmbPermissionsInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetSmbPermissionsInfoOk() (*SmbPermissionsInfo, bool) {
	if o == nil || o.SmbPermissionsInfo == nil {
		return nil, false
	}
	return o.SmbPermissionsInfo, true
}

// HasSmbPermissionsInfo returns a boolean if a field has been set.
func (o *View) HasSmbPermissionsInfo() bool {
	if o != nil && o.SmbPermissionsInfo != nil {
		return true
	}

	return false
}

// SetSmbPermissionsInfo gets a reference to the given SmbPermissionsInfo and assigns it to the SmbPermissionsInfo field.
func (o *View) SetSmbPermissionsInfo(v SmbPermissionsInfo) {
	o.SmbPermissionsInfo = &v
}

// GetSharePermissions returns the SharePermissions field value if set, zero value otherwise.
func (o *View) GetSharePermissions() ViewSharePermissions {
	if o == nil || o.SharePermissions == nil {
		var ret ViewSharePermissions
		return ret
	}
	return *o.SharePermissions
}

// GetSharePermissionsOk returns a tuple with the SharePermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetSharePermissionsOk() (*ViewSharePermissions, bool) {
	if o == nil || o.SharePermissions == nil {
		return nil, false
	}
	return o.SharePermissions, true
}

// HasSharePermissions returns a boolean if a field has been set.
func (o *View) HasSharePermissions() bool {
	if o != nil && o.SharePermissions != nil {
		return true
	}

	return false
}

// SetSharePermissions gets a reference to the given ViewSharePermissions and assigns it to the SharePermissions field.
func (o *View) SetSharePermissions(v ViewSharePermissions) {
	o.SharePermissions = &v
}

// GetS3AccessPath returns the S3AccessPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetS3AccessPath() string {
	if o == nil || o.S3AccessPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.S3AccessPath.Get()
}

// GetS3AccessPathOk returns a tuple with the S3AccessPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetS3AccessPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.S3AccessPath.Get(), o.S3AccessPath.IsSet()
}

// HasS3AccessPath returns a boolean if a field has been set.
func (o *View) HasS3AccessPath() bool {
	if o != nil && o.S3AccessPath.IsSet() {
		return true
	}

	return false
}

// SetS3AccessPath gets a reference to the given NullableString and assigns it to the S3AccessPath field.
func (o *View) SetS3AccessPath(v string) {
	o.S3AccessPath.Set(&v)
}
// SetS3AccessPathNil sets the value for S3AccessPath to be an explicit nil
func (o *View) SetS3AccessPathNil() {
	o.S3AccessPath.Set(nil)
}

// UnsetS3AccessPath ensures that no value is present for S3AccessPath, not even an explicit nil
func (o *View) UnsetS3AccessPath() {
	o.S3AccessPath.Unset()
}

// GetAclConfig returns the AclConfig field value if set, zero value otherwise.
func (o *View) GetAclConfig() AclConfig {
	if o == nil || o.AclConfig == nil {
		var ret AclConfig
		return ret
	}
	return *o.AclConfig
}

// GetAclConfigOk returns a tuple with the AclConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetAclConfigOk() (*AclConfig, bool) {
	if o == nil || o.AclConfig == nil {
		return nil, false
	}
	return o.AclConfig, true
}

// HasAclConfig returns a boolean if a field has been set.
func (o *View) HasAclConfig() bool {
	if o != nil && o.AclConfig != nil {
		return true
	}

	return false
}

// SetAclConfig gets a reference to the given AclConfig and assigns it to the AclConfig field.
func (o *View) SetAclConfig(v AclConfig) {
	o.AclConfig = &v
}

// GetOwnerInfo returns the OwnerInfo field value if set, zero value otherwise.
func (o *View) GetOwnerInfo() S3OwnerInfo {
	if o == nil || o.OwnerInfo == nil {
		var ret S3OwnerInfo
		return ret
	}
	return *o.OwnerInfo
}

// GetOwnerInfoOk returns a tuple with the OwnerInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *View) GetOwnerInfoOk() (*S3OwnerInfo, bool) {
	if o == nil || o.OwnerInfo == nil {
		return nil, false
	}
	return o.OwnerInfo, true
}

// HasOwnerInfo returns a boolean if a field has been set.
func (o *View) HasOwnerInfo() bool {
	if o != nil && o.OwnerInfo != nil {
		return true
	}

	return false
}

// SetOwnerInfo gets a reference to the given S3OwnerInfo and assigns it to the OwnerInfo field.
func (o *View) SetOwnerInfo(v S3OwnerInfo) {
	o.OwnerInfo = &v
}

// GetSwiftProjectDomain returns the SwiftProjectDomain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetSwiftProjectDomain() string {
	if o == nil || o.SwiftProjectDomain.Get() == nil {
		var ret string
		return ret
	}
	return *o.SwiftProjectDomain.Get()
}

// GetSwiftProjectDomainOk returns a tuple with the SwiftProjectDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetSwiftProjectDomainOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SwiftProjectDomain.Get(), o.SwiftProjectDomain.IsSet()
}

// HasSwiftProjectDomain returns a boolean if a field has been set.
func (o *View) HasSwiftProjectDomain() bool {
	if o != nil && o.SwiftProjectDomain.IsSet() {
		return true
	}

	return false
}

// SetSwiftProjectDomain gets a reference to the given NullableString and assigns it to the SwiftProjectDomain field.
func (o *View) SetSwiftProjectDomain(v string) {
	o.SwiftProjectDomain.Set(&v)
}
// SetSwiftProjectDomainNil sets the value for SwiftProjectDomain to be an explicit nil
func (o *View) SetSwiftProjectDomainNil() {
	o.SwiftProjectDomain.Set(nil)
}

// UnsetSwiftProjectDomain ensures that no value is present for SwiftProjectDomain, not even an explicit nil
func (o *View) UnsetSwiftProjectDomain() {
	o.SwiftProjectDomain.Unset()
}

// GetSwiftProjectName returns the SwiftProjectName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetSwiftProjectName() string {
	if o == nil || o.SwiftProjectName.Get() == nil {
		var ret string
		return ret
	}
	return *o.SwiftProjectName.Get()
}

// GetSwiftProjectNameOk returns a tuple with the SwiftProjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetSwiftProjectNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SwiftProjectName.Get(), o.SwiftProjectName.IsSet()
}

// HasSwiftProjectName returns a boolean if a field has been set.
func (o *View) HasSwiftProjectName() bool {
	if o != nil && o.SwiftProjectName.IsSet() {
		return true
	}

	return false
}

// SetSwiftProjectName gets a reference to the given NullableString and assigns it to the SwiftProjectName field.
func (o *View) SetSwiftProjectName(v string) {
	o.SwiftProjectName.Set(&v)
}
// SetSwiftProjectNameNil sets the value for SwiftProjectName to be an explicit nil
func (o *View) SetSwiftProjectNameNil() {
	o.SwiftProjectName.Set(nil)
}

// UnsetSwiftProjectName ensures that no value is present for SwiftProjectName, not even an explicit nil
func (o *View) UnsetSwiftProjectName() {
	o.SwiftProjectName.Unset()
}

// GetSwiftUserDomain returns the SwiftUserDomain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetSwiftUserDomain() string {
	if o == nil || o.SwiftUserDomain.Get() == nil {
		var ret string
		return ret
	}
	return *o.SwiftUserDomain.Get()
}

// GetSwiftUserDomainOk returns a tuple with the SwiftUserDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetSwiftUserDomainOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SwiftUserDomain.Get(), o.SwiftUserDomain.IsSet()
}

// HasSwiftUserDomain returns a boolean if a field has been set.
func (o *View) HasSwiftUserDomain() bool {
	if o != nil && o.SwiftUserDomain.IsSet() {
		return true
	}

	return false
}

// SetSwiftUserDomain gets a reference to the given NullableString and assigns it to the SwiftUserDomain field.
func (o *View) SetSwiftUserDomain(v string) {
	o.SwiftUserDomain.Set(&v)
}
// SetSwiftUserDomainNil sets the value for SwiftUserDomain to be an explicit nil
func (o *View) SetSwiftUserDomainNil() {
	o.SwiftUserDomain.Set(nil)
}

// UnsetSwiftUserDomain ensures that no value is present for SwiftUserDomain, not even an explicit nil
func (o *View) UnsetSwiftUserDomain() {
	o.SwiftUserDomain.Unset()
}

// GetSwiftUsername returns the SwiftUsername field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *View) GetSwiftUsername() string {
	if o == nil || o.SwiftUsername.Get() == nil {
		var ret string
		return ret
	}
	return *o.SwiftUsername.Get()
}

// GetSwiftUsernameOk returns a tuple with the SwiftUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *View) GetSwiftUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SwiftUsername.Get(), o.SwiftUsername.IsSet()
}

// HasSwiftUsername returns a boolean if a field has been set.
func (o *View) HasSwiftUsername() bool {
	if o != nil && o.SwiftUsername.IsSet() {
		return true
	}

	return false
}

// SetSwiftUsername gets a reference to the given NullableString and assigns it to the SwiftUsername field.
func (o *View) SetSwiftUsername(v string) {
	o.SwiftUsername.Set(&v)
}
// SetSwiftUsernameNil sets the value for SwiftUsername to be an explicit nil
func (o *View) SetSwiftUsernameNil() {
	o.SwiftUsername.Set(nil)
}

// UnsetSwiftUsername ensures that no value is present for SwiftUsername, not even an explicit nil
func (o *View) UnsetSwiftUsername() {
	o.SwiftUsername.Unset()
}

func (o View) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ViewId.IsSet() {
		toSerialize["viewId"] = o.ViewId.Get()
	}
	if o.IsCategoryInferred.IsSet() {
		toSerialize["isCategoryInferred"] = o.IsCategoryInferred.Get()
	}
	if o.DataLockExpiryUsecs.IsSet() {
		toSerialize["dataLockExpiryUsecs"] = o.DataLockExpiryUsecs.Get()
	}
	if o.ObjectServicesMappingConfig.IsSet() {
		toSerialize["objectServicesMappingConfig"] = o.ObjectServicesMappingConfig.Get()
	}
	if o.StorageDomainId.IsSet() {
		toSerialize["storageDomainId"] = o.StorageDomainId.Get()
	}
	if o.StorageDomainName.IsSet() {
		toSerialize["storageDomainName"] = o.StorageDomainName.Get()
	}
	if o.CaseInsensitiveNamesEnabled.IsSet() {
		toSerialize["caseInsensitiveNamesEnabled"] = o.CaseInsensitiveNamesEnabled.Get()
	}
	if o.CreateTimeMsecs.IsSet() {
		toSerialize["createTimeMsecs"] = o.CreateTimeMsecs.Get()
	}
	if o.BasicMountPath.IsSet() {
		toSerialize["basicMountPath"] = o.BasicMountPath.Get()
	}
	if o.NfsMountPath.IsSet() {
		toSerialize["nfsMountPath"] = o.NfsMountPath.Get()
	}
	if o.NfsMountPaths != nil {
		toSerialize["nfsMountPaths"] = o.NfsMountPaths
	}
	if o.SmbMountPaths != nil {
		toSerialize["smbMountPaths"] = o.SmbMountPaths
	}
	if o.ViewProtection != nil {
		toSerialize["viewProtection"] = o.ViewProtection
	}
	if o.Aliases != nil {
		toSerialize["aliases"] = o.Aliases
	}
	if o.IsTargetForMigratedData.IsSet() {
		toSerialize["isTargetForMigratedData"] = o.IsTargetForMigratedData.Get()
	}
	if o.ViewFailover != nil {
		toSerialize["viewFailover"] = o.ViewFailover
	}
	if o.Stats != nil {
		toSerialize["stats"] = o.Stats
	}
	if o.FileCountBySize != nil {
		toSerialize["fileCountBySize"] = o.FileCountBySize
	}
	if o.OwnerSid.IsSet() {
		toSerialize["ownerSid"] = o.OwnerSid.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Category.IsSet() {
		toSerialize["category"] = o.Category.Get()
	}
	if o.ProtocolAccess != nil {
		toSerialize["protocolAccess"] = o.ProtocolAccess
	}
	if o.Qos != nil {
		toSerialize["qos"] = o.Qos
	}
	if o.OverrideGlobalSubnetWhitelist.IsSet() {
		toSerialize["overrideGlobalSubnetWhitelist"] = o.OverrideGlobalSubnetWhitelist.Get()
	}
	if o.SubnetWhitelist != nil {
		toSerialize["subnetWhitelist"] = o.SubnetWhitelist
	}
	if o.OverrideGlobalNetgroupWhitelist.IsSet() {
		toSerialize["overrideGlobalNetgroupWhitelist"] = o.OverrideGlobalNetgroupWhitelist.Get()
	}
	if o.NetgroupWhitelist != nil {
		toSerialize["netgroupWhitelist"] = o.NetgroupWhitelist
	}
	if o.SecurityMode.IsSet() {
		toSerialize["securityMode"] = o.SecurityMode.Get()
	}
	if o.StoragePolicyOverride != nil {
		toSerialize["storagePolicyOverride"] = o.StoragePolicyOverride
	}
	if o.LogicalQuota != nil {
		toSerialize["logicalQuota"] = o.LogicalQuota
	}
	if o.FileLockConfig != nil {
		toSerialize["fileLockConfig"] = o.FileLockConfig
	}
	if o.FileExtensionFilter != nil {
		toSerialize["fileExtensionFilter"] = o.FileExtensionFilter
	}
	if o.AntivirusScanConfig != nil {
		toSerialize["antivirusScanConfig"] = o.AntivirusScanConfig
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.AllowMountOnWindows.IsSet() {
		toSerialize["allowMountOnWindows"] = o.AllowMountOnWindows.Get()
	}
	if o.EnableMinion.IsSet() {
		toSerialize["enableMinion"] = o.EnableMinion.Get()
	}
	if o.EnableFilerAuditLogging.IsSet() {
		toSerialize["enableFilerAuditLogging"] = o.EnableFilerAuditLogging.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.EnableLiveIndexing.IsSet() {
		toSerialize["enableLiveIndexing"] = o.EnableLiveIndexing.Get()
	}
	if o.EnableOfflineCaching.IsSet() {
		toSerialize["enableOfflineCaching"] = o.EnableOfflineCaching.Get()
	}
	if o.AccessSids != nil {
		toSerialize["accessSids"] = o.AccessSids
	}
	if o.ViewLockEnabled.IsSet() {
		toSerialize["viewLockEnabled"] = o.ViewLockEnabled.Get()
	}
	if o.IsReadOnly.IsSet() {
		toSerialize["isReadOnly"] = o.IsReadOnly.Get()
	}
	if o.ViewPinningConfig != nil {
		toSerialize["viewPinningConfig"] = o.ViewPinningConfig
	}
	if o.SelfServiceSnapshotConfig != nil {
		toSerialize["selfServiceSnapshotConfig"] = o.SelfServiceSnapshotConfig
	}
	if o.EnableMetadataAccelerator.IsSet() {
		toSerialize["enableMetadataAccelerator"] = o.EnableMetadataAccelerator.Get()
	}
	if o.IsExternallyTriggeredBackupTarget.IsSet() {
		toSerialize["isExternallyTriggeredBackupTarget"] = o.IsExternallyTriggeredBackupTarget.Get()
	}
	if o.EnableNfsViewDiscovery.IsSet() {
		toSerialize["enableNfsViewDiscovery"] = o.EnableNfsViewDiscovery.Get()
	}
	if o.NfsAllSquash != nil {
		toSerialize["nfsAllSquash"] = o.NfsAllSquash
	}
	if o.NfsRootPermissions != nil {
		toSerialize["nfsRootPermissions"] = o.NfsRootPermissions
	}
	if o.NfsRootSquash != nil {
		toSerialize["nfsRootSquash"] = o.NfsRootSquash
	}
	if o.EnableNfsUnixAuthentication.IsSet() {
		toSerialize["enableNfsUnixAuthentication"] = o.EnableNfsUnixAuthentication.Get()
	}
	if o.EnableNfsKerberosAuthentication.IsSet() {
		toSerialize["enableNfsKerberosAuthentication"] = o.EnableNfsKerberosAuthentication.Get()
	}
	if o.EnableNfsKerberosIntegrity.IsSet() {
		toSerialize["enableNfsKerberosIntegrity"] = o.EnableNfsKerberosIntegrity.Get()
	}
	if o.EnableNfsKerberosPrivacy.IsSet() {
		toSerialize["enableNfsKerberosPrivacy"] = o.EnableNfsKerberosPrivacy.Get()
	}
	if o.EnableSmbViewDiscovery.IsSet() {
		toSerialize["enableSmbViewDiscovery"] = o.EnableSmbViewDiscovery.Get()
	}
	if o.EnableSmbAccessBasedEnumeration.IsSet() {
		toSerialize["enableSmbAccessBasedEnumeration"] = o.EnableSmbAccessBasedEnumeration.Get()
	}
	if o.EnableSmbEncryption.IsSet() {
		toSerialize["enableSmbEncryption"] = o.EnableSmbEncryption.Get()
	}
	if o.EnforceSmbEncryption.IsSet() {
		toSerialize["enforceSmbEncryption"] = o.EnforceSmbEncryption.Get()
	}
	if o.EnableFastDurableHandle.IsSet() {
		toSerialize["enableFastDurableHandle"] = o.EnableFastDurableHandle.Get()
	}
	if o.EnableSmbOplock.IsSet() {
		toSerialize["enableSmbOplock"] = o.EnableSmbOplock.Get()
	}
	if o.SmbPermissionsInfo != nil {
		toSerialize["smbPermissionsInfo"] = o.SmbPermissionsInfo
	}
	if o.SharePermissions != nil {
		toSerialize["sharePermissions"] = o.SharePermissions
	}
	if o.S3AccessPath.IsSet() {
		toSerialize["s3AccessPath"] = o.S3AccessPath.Get()
	}
	if o.AclConfig != nil {
		toSerialize["aclConfig"] = o.AclConfig
	}
	if o.OwnerInfo != nil {
		toSerialize["ownerInfo"] = o.OwnerInfo
	}
	if o.SwiftProjectDomain.IsSet() {
		toSerialize["swiftProjectDomain"] = o.SwiftProjectDomain.Get()
	}
	if o.SwiftProjectName.IsSet() {
		toSerialize["swiftProjectName"] = o.SwiftProjectName.Get()
	}
	if o.SwiftUserDomain.IsSet() {
		toSerialize["swiftUserDomain"] = o.SwiftUserDomain.Get()
	}
	if o.SwiftUsername.IsSet() {
		toSerialize["swiftUsername"] = o.SwiftUsername.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableView struct {
	value *View
	isSet bool
}

func (v NullableView) Get() *View {
	return v.value
}

func (v *NullableView) Set(val *View) {
	v.value = val
	v.isSet = true
}

func (v NullableView) IsSet() bool {
	return v.isSet
}

func (v *NullableView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableView(val *View) *NullableView {
	return &NullableView{value: val, isSet: true}
}

func (v NullableView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o View) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}