/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// SnapshotIdResult struct for SnapshotIdResult
type SnapshotIdResult struct {
	SnapshotId string `json:"snapshotId"`
}

// NewSnapshotIdResult instantiates a new SnapshotIdResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotIdResult(snapshotId string) *SnapshotIdResult {
	this := SnapshotIdResult{}
	this.SnapshotId = snapshotId
	return &this
}

// NewSnapshotIdResultWithDefaults instantiates a new SnapshotIdResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotIdResultWithDefaults() *SnapshotIdResult {
	this := SnapshotIdResult{}
	return &this
}

// GetSnapshotId returns the SnapshotId field value
func (o *SnapshotIdResult) GetSnapshotId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SnapshotId
}

// GetSnapshotIdOk returns a tuple with the SnapshotId field value
// and a boolean to check if the value has been set.
func (o *SnapshotIdResult) GetSnapshotIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SnapshotId, true
}

// SetSnapshotId sets field value
func (o *SnapshotIdResult) SetSnapshotId(v string) {
	o.SnapshotId = v
}

func (o SnapshotIdResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["snapshotId"] = o.SnapshotId
	}
	return json.Marshal(toSerialize)
}

type NullableSnapshotIdResult struct {
	value *SnapshotIdResult
	isSet bool
}

func (v NullableSnapshotIdResult) Get() *SnapshotIdResult {
	return v.value
}

func (v *NullableSnapshotIdResult) Set(val *SnapshotIdResult) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotIdResult) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotIdResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotIdResult(val *SnapshotIdResult) *NullableSnapshotIdResult {
	return &NullableSnapshotIdResult{value: val, isSet: true}
}

func (v NullableSnapshotIdResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotIdResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o SnapshotIdResult) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}