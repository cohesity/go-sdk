/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// SmbPermission Specifies information about a single SMB permission.
type SmbPermission struct {
	// Specifies the type of permission. 'Allow' indicates access is allowed. 'Deny' indicates access is denied. 'SpecialType' indicates a type defined in the Access Control Entry (ACE) does not map to 'Allow' or 'Deny'.
	Type NullableString `json:"type,omitempty"`
	// Specifies how the permission should be applied to folders and/or files. 'FolderSubFoldersAndFiles' indicates that permissions are applied to a Folder and it's sub folders and files. 'FolderAndSubFolders' indicates that permissions are applied to a Folder and it's sub folders. 'FolderAndSubFiles' indicates that permissions are applied to a Folder and it's sub files. 'FolderOnly' indicates that permsission are applied to folder only. 'SubFoldersAndFilesOnly' indicates that permissions are applied to sub folders and files only. 'SubFoldersOnly' indicates that permissiona are applied to sub folders only. 'FilesOnly' indicates that permissions are applied to files only.
	Mode NullableString `json:"mode,omitempty"`
	// Specifies the read/write access to the SMB share. 'ReadyOnly' indicates read only access to the SMB share. 'ReadWrite' indicates read and write access to the SMB share. 'FullControl' indicates full administrative control of the SMB share. 'SpecialAccess' indicates custom permissions to the SMB share using  access masks structures. 'SuperUser' indicates root permissions ignoring all SMB ACLs.
	Access NullableString `json:"access,omitempty"`
	// Specifies the security identifier (SID) of the principal.
	Sid NullableString `json:"sid,omitempty"`
	// Specifies a custom type. When the type from the Access Control Entry (ACE) cannot be mapped to one of the enums in 'type', this field is populated with the custom type derived from the ACE and 'type' is set to kSpecialType. This is a placeholder for storing an unmapped type and should not be set when creating and editing a View.
	SpecialType NullableInt32 `json:"specialType,omitempty"`
	// Specifies custom access permissions. When the access mask from the Access Control Entry (ACE) cannot be mapped to one of the enums in 'access', this field is populated with the custom mask derived from the ACE and 'access' is set to kSpecialAccess. This is a placeholder for storing an unmapped access permission and should not be set when creating and editing a View.
	SpecialAccessMask NullableInt32 `json:"specialAccessMask,omitempty"`
}

// NewSmbPermission instantiates a new SmbPermission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmbPermission() *SmbPermission {
	this := SmbPermission{}
	return &this
}

// NewSmbPermissionWithDefaults instantiates a new SmbPermission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmbPermissionWithDefaults() *SmbPermission {
	this := SmbPermission{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmbPermission) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmbPermission) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *SmbPermission) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *SmbPermission) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *SmbPermission) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *SmbPermission) UnsetType() {
	o.Type.Unset()
}

// GetMode returns the Mode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmbPermission) GetMode() string {
	if o == nil || o.Mode.Get() == nil {
		var ret string
		return ret
	}
	return *o.Mode.Get()
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmbPermission) GetModeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Mode.Get(), o.Mode.IsSet()
}

// HasMode returns a boolean if a field has been set.
func (o *SmbPermission) HasMode() bool {
	if o != nil && o.Mode.IsSet() {
		return true
	}

	return false
}

// SetMode gets a reference to the given NullableString and assigns it to the Mode field.
func (o *SmbPermission) SetMode(v string) {
	o.Mode.Set(&v)
}
// SetModeNil sets the value for Mode to be an explicit nil
func (o *SmbPermission) SetModeNil() {
	o.Mode.Set(nil)
}

// UnsetMode ensures that no value is present for Mode, not even an explicit nil
func (o *SmbPermission) UnsetMode() {
	o.Mode.Unset()
}

// GetAccess returns the Access field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmbPermission) GetAccess() string {
	if o == nil || o.Access.Get() == nil {
		var ret string
		return ret
	}
	return *o.Access.Get()
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmbPermission) GetAccessOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Access.Get(), o.Access.IsSet()
}

// HasAccess returns a boolean if a field has been set.
func (o *SmbPermission) HasAccess() bool {
	if o != nil && o.Access.IsSet() {
		return true
	}

	return false
}

// SetAccess gets a reference to the given NullableString and assigns it to the Access field.
func (o *SmbPermission) SetAccess(v string) {
	o.Access.Set(&v)
}
// SetAccessNil sets the value for Access to be an explicit nil
func (o *SmbPermission) SetAccessNil() {
	o.Access.Set(nil)
}

// UnsetAccess ensures that no value is present for Access, not even an explicit nil
func (o *SmbPermission) UnsetAccess() {
	o.Access.Unset()
}

// GetSid returns the Sid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmbPermission) GetSid() string {
	if o == nil || o.Sid.Get() == nil {
		var ret string
		return ret
	}
	return *o.Sid.Get()
}

// GetSidOk returns a tuple with the Sid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmbPermission) GetSidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Sid.Get(), o.Sid.IsSet()
}

// HasSid returns a boolean if a field has been set.
func (o *SmbPermission) HasSid() bool {
	if o != nil && o.Sid.IsSet() {
		return true
	}

	return false
}

// SetSid gets a reference to the given NullableString and assigns it to the Sid field.
func (o *SmbPermission) SetSid(v string) {
	o.Sid.Set(&v)
}
// SetSidNil sets the value for Sid to be an explicit nil
func (o *SmbPermission) SetSidNil() {
	o.Sid.Set(nil)
}

// UnsetSid ensures that no value is present for Sid, not even an explicit nil
func (o *SmbPermission) UnsetSid() {
	o.Sid.Unset()
}

// GetSpecialType returns the SpecialType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmbPermission) GetSpecialType() int32 {
	if o == nil || o.SpecialType.Get() == nil {
		var ret int32
		return ret
	}
	return *o.SpecialType.Get()
}

// GetSpecialTypeOk returns a tuple with the SpecialType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmbPermission) GetSpecialTypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SpecialType.Get(), o.SpecialType.IsSet()
}

// HasSpecialType returns a boolean if a field has been set.
func (o *SmbPermission) HasSpecialType() bool {
	if o != nil && o.SpecialType.IsSet() {
		return true
	}

	return false
}

// SetSpecialType gets a reference to the given NullableInt32 and assigns it to the SpecialType field.
func (o *SmbPermission) SetSpecialType(v int32) {
	o.SpecialType.Set(&v)
}
// SetSpecialTypeNil sets the value for SpecialType to be an explicit nil
func (o *SmbPermission) SetSpecialTypeNil() {
	o.SpecialType.Set(nil)
}

// UnsetSpecialType ensures that no value is present for SpecialType, not even an explicit nil
func (o *SmbPermission) UnsetSpecialType() {
	o.SpecialType.Unset()
}

// GetSpecialAccessMask returns the SpecialAccessMask field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmbPermission) GetSpecialAccessMask() int32 {
	if o == nil || o.SpecialAccessMask.Get() == nil {
		var ret int32
		return ret
	}
	return *o.SpecialAccessMask.Get()
}

// GetSpecialAccessMaskOk returns a tuple with the SpecialAccessMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmbPermission) GetSpecialAccessMaskOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SpecialAccessMask.Get(), o.SpecialAccessMask.IsSet()
}

// HasSpecialAccessMask returns a boolean if a field has been set.
func (o *SmbPermission) HasSpecialAccessMask() bool {
	if o != nil && o.SpecialAccessMask.IsSet() {
		return true
	}

	return false
}

// SetSpecialAccessMask gets a reference to the given NullableInt32 and assigns it to the SpecialAccessMask field.
func (o *SmbPermission) SetSpecialAccessMask(v int32) {
	o.SpecialAccessMask.Set(&v)
}
// SetSpecialAccessMaskNil sets the value for SpecialAccessMask to be an explicit nil
func (o *SmbPermission) SetSpecialAccessMaskNil() {
	o.SpecialAccessMask.Set(nil)
}

// UnsetSpecialAccessMask ensures that no value is present for SpecialAccessMask, not even an explicit nil
func (o *SmbPermission) UnsetSpecialAccessMask() {
	o.SpecialAccessMask.Unset()
}

func (o SmbPermission) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Mode.IsSet() {
		toSerialize["mode"] = o.Mode.Get()
	}
	if o.Access.IsSet() {
		toSerialize["access"] = o.Access.Get()
	}
	if o.Sid.IsSet() {
		toSerialize["sid"] = o.Sid.Get()
	}
	if o.SpecialType.IsSet() {
		toSerialize["specialType"] = o.SpecialType.Get()
	}
	if o.SpecialAccessMask.IsSet() {
		toSerialize["specialAccessMask"] = o.SpecialAccessMask.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSmbPermission struct {
	value *SmbPermission
	isSet bool
}

func (v NullableSmbPermission) Get() *SmbPermission {
	return v.value
}

func (v *NullableSmbPermission) Set(val *SmbPermission) {
	v.value = val
	v.isSet = true
}

func (v NullableSmbPermission) IsSet() bool {
	return v.isSet
}

func (v *NullableSmbPermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmbPermission(val *SmbPermission) *NullableSmbPermission {
	return &NullableSmbPermission{value: val, isSet: true}
}

func (v NullableSmbPermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmbPermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o SmbPermission) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}