/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// CreateOrUpdateBifrostConnectionRequest Specify the params to create or update a connection of Bifrost.
type CreateOrUpdateBifrostConnectionRequest struct {
	// Specifies the id of the tenant which the connection belongs to.
	TenantId NullableString `json:"tenantId"`
	// Specifies the name of the connection.
	Name NullableString `json:"name,omitempty"`
	Subnet ConnectionSubnet `json:"subnet"`
	// Specifies the version of the connection's certificate. The version is used to revoke/renew connection's certificates.
	CertificateVersion NullableInt64 `json:"certificateVersion,omitempty"`
}

// NewCreateOrUpdateBifrostConnectionRequest instantiates a new CreateOrUpdateBifrostConnectionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateOrUpdateBifrostConnectionRequest(tenantId NullableString, subnet ConnectionSubnet) *CreateOrUpdateBifrostConnectionRequest {
	this := CreateOrUpdateBifrostConnectionRequest{}
	this.TenantId = tenantId
	this.Subnet = subnet
	return &this
}

// NewCreateOrUpdateBifrostConnectionRequestWithDefaults instantiates a new CreateOrUpdateBifrostConnectionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateOrUpdateBifrostConnectionRequestWithDefaults() *CreateOrUpdateBifrostConnectionRequest {
	this := CreateOrUpdateBifrostConnectionRequest{}
	return &this
}

// GetTenantId returns the TenantId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CreateOrUpdateBifrostConnectionRequest) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}

	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateOrUpdateBifrostConnectionRequest) GetTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// SetTenantId sets field value
func (o *CreateOrUpdateBifrostConnectionRequest) SetTenantId(v string) {
	o.TenantId.Set(&v)
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateOrUpdateBifrostConnectionRequest) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateOrUpdateBifrostConnectionRequest) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *CreateOrUpdateBifrostConnectionRequest) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *CreateOrUpdateBifrostConnectionRequest) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *CreateOrUpdateBifrostConnectionRequest) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *CreateOrUpdateBifrostConnectionRequest) UnsetName() {
	o.Name.Unset()
}

// GetSubnet returns the Subnet field value
func (o *CreateOrUpdateBifrostConnectionRequest) GetSubnet() ConnectionSubnet {
	if o == nil {
		var ret ConnectionSubnet
		return ret
	}

	return o.Subnet
}

// GetSubnetOk returns a tuple with the Subnet field value
// and a boolean to check if the value has been set.
func (o *CreateOrUpdateBifrostConnectionRequest) GetSubnetOk() (*ConnectionSubnet, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Subnet, true
}

// SetSubnet sets field value
func (o *CreateOrUpdateBifrostConnectionRequest) SetSubnet(v ConnectionSubnet) {
	o.Subnet = v
}

// GetCertificateVersion returns the CertificateVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateOrUpdateBifrostConnectionRequest) GetCertificateVersion() int64 {
	if o == nil || o.CertificateVersion.Get() == nil {
		var ret int64
		return ret
	}
	return *o.CertificateVersion.Get()
}

// GetCertificateVersionOk returns a tuple with the CertificateVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateOrUpdateBifrostConnectionRequest) GetCertificateVersionOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CertificateVersion.Get(), o.CertificateVersion.IsSet()
}

// HasCertificateVersion returns a boolean if a field has been set.
func (o *CreateOrUpdateBifrostConnectionRequest) HasCertificateVersion() bool {
	if o != nil && o.CertificateVersion.IsSet() {
		return true
	}

	return false
}

// SetCertificateVersion gets a reference to the given NullableInt64 and assigns it to the CertificateVersion field.
func (o *CreateOrUpdateBifrostConnectionRequest) SetCertificateVersion(v int64) {
	o.CertificateVersion.Set(&v)
}
// SetCertificateVersionNil sets the value for CertificateVersion to be an explicit nil
func (o *CreateOrUpdateBifrostConnectionRequest) SetCertificateVersionNil() {
	o.CertificateVersion.Set(nil)
}

// UnsetCertificateVersion ensures that no value is present for CertificateVersion, not even an explicit nil
func (o *CreateOrUpdateBifrostConnectionRequest) UnsetCertificateVersion() {
	o.CertificateVersion.Unset()
}

func (o CreateOrUpdateBifrostConnectionRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if true {
		toSerialize["subnet"] = o.Subnet
	}
	if o.CertificateVersion.IsSet() {
		toSerialize["certificateVersion"] = o.CertificateVersion.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCreateOrUpdateBifrostConnectionRequest struct {
	value *CreateOrUpdateBifrostConnectionRequest
	isSet bool
}

func (v NullableCreateOrUpdateBifrostConnectionRequest) Get() *CreateOrUpdateBifrostConnectionRequest {
	return v.value
}

func (v *NullableCreateOrUpdateBifrostConnectionRequest) Set(val *CreateOrUpdateBifrostConnectionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateOrUpdateBifrostConnectionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateOrUpdateBifrostConnectionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateOrUpdateBifrostConnectionRequest(val *CreateOrUpdateBifrostConnectionRequest) *NullableCreateOrUpdateBifrostConnectionRequest {
	return &NullableCreateOrUpdateBifrostConnectionRequest{value: val, isSet: true}
}

func (v NullableCreateOrUpdateBifrostConnectionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateOrUpdateBifrostConnectionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o CreateOrUpdateBifrostConnectionRequest) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}