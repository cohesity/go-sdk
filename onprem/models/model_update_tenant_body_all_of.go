/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// UpdateTenantBodyAllOf struct for UpdateTenantBodyAllOf
type UpdateTenantBodyAllOf struct {
	Network *TenantNetwork `json:"network,omitempty"`
}

// NewUpdateTenantBodyAllOf instantiates a new UpdateTenantBodyAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateTenantBodyAllOf() *UpdateTenantBodyAllOf {
	this := UpdateTenantBodyAllOf{}
	return &this
}

// NewUpdateTenantBodyAllOfWithDefaults instantiates a new UpdateTenantBodyAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateTenantBodyAllOfWithDefaults() *UpdateTenantBodyAllOf {
	this := UpdateTenantBodyAllOf{}
	return &this
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *UpdateTenantBodyAllOf) GetNetwork() TenantNetwork {
	if o == nil || o.Network == nil {
		var ret TenantNetwork
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateTenantBodyAllOf) GetNetworkOk() (*TenantNetwork, bool) {
	if o == nil || o.Network == nil {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *UpdateTenantBodyAllOf) HasNetwork() bool {
	if o != nil && o.Network != nil {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given TenantNetwork and assigns it to the Network field.
func (o *UpdateTenantBodyAllOf) SetNetwork(v TenantNetwork) {
	o.Network = &v
}

func (o UpdateTenantBodyAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Network != nil {
		toSerialize["network"] = o.Network
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateTenantBodyAllOf struct {
	value *UpdateTenantBodyAllOf
	isSet bool
}

func (v NullableUpdateTenantBodyAllOf) Get() *UpdateTenantBodyAllOf {
	return v.value
}

func (v *NullableUpdateTenantBodyAllOf) Set(val *UpdateTenantBodyAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateTenantBodyAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateTenantBodyAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateTenantBodyAllOf(val *UpdateTenantBodyAllOf) *NullableUpdateTenantBodyAllOf {
	return &NullableUpdateTenantBodyAllOf{value: val, isSet: true}
}

func (v NullableUpdateTenantBodyAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateTenantBodyAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o UpdateTenantBodyAllOf) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}