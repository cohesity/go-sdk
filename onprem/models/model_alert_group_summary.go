/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// AlertGroupSummary Specifies alerts summary grouped for an alert category.
type AlertGroupSummary struct {
	// Category of alerts by which summary is grouped.
	Category *string `json:"category,omitempty"`
	// Type/bucket that this alert category belongs to.
	Type *string `json:"type,omitempty"`
	// Specifies count of warning alerts.
	WarningCount NullableInt64 `json:"warningCount,omitempty"`
	// Specifies count of critical alerts.
	CriticalCount NullableInt64 `json:"criticalCount,omitempty"`
	// Specifies count of info alerts.
	InfoCount NullableInt64 `json:"infoCount,omitempty"`
	// Specifies count of total alerts.
	TotalCount NullableInt64 `json:"totalCount,omitempty"`
}

// NewAlertGroupSummary instantiates a new AlertGroupSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertGroupSummary() *AlertGroupSummary {
	this := AlertGroupSummary{}
	return &this
}

// NewAlertGroupSummaryWithDefaults instantiates a new AlertGroupSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertGroupSummaryWithDefaults() *AlertGroupSummary {
	this := AlertGroupSummary{}
	return &this
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *AlertGroupSummary) GetCategory() string {
	if o == nil || o.Category == nil {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertGroupSummary) GetCategoryOk() (*string, bool) {
	if o == nil || o.Category == nil {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *AlertGroupSummary) HasCategory() bool {
	if o != nil && o.Category != nil {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *AlertGroupSummary) SetCategory(v string) {
	o.Category = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AlertGroupSummary) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertGroupSummary) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AlertGroupSummary) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AlertGroupSummary) SetType(v string) {
	o.Type = &v
}

// GetWarningCount returns the WarningCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertGroupSummary) GetWarningCount() int64 {
	if o == nil || o.WarningCount.Get() == nil {
		var ret int64
		return ret
	}
	return *o.WarningCount.Get()
}

// GetWarningCountOk returns a tuple with the WarningCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertGroupSummary) GetWarningCountOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.WarningCount.Get(), o.WarningCount.IsSet()
}

// HasWarningCount returns a boolean if a field has been set.
func (o *AlertGroupSummary) HasWarningCount() bool {
	if o != nil && o.WarningCount.IsSet() {
		return true
	}

	return false
}

// SetWarningCount gets a reference to the given NullableInt64 and assigns it to the WarningCount field.
func (o *AlertGroupSummary) SetWarningCount(v int64) {
	o.WarningCount.Set(&v)
}
// SetWarningCountNil sets the value for WarningCount to be an explicit nil
func (o *AlertGroupSummary) SetWarningCountNil() {
	o.WarningCount.Set(nil)
}

// UnsetWarningCount ensures that no value is present for WarningCount, not even an explicit nil
func (o *AlertGroupSummary) UnsetWarningCount() {
	o.WarningCount.Unset()
}

// GetCriticalCount returns the CriticalCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertGroupSummary) GetCriticalCount() int64 {
	if o == nil || o.CriticalCount.Get() == nil {
		var ret int64
		return ret
	}
	return *o.CriticalCount.Get()
}

// GetCriticalCountOk returns a tuple with the CriticalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertGroupSummary) GetCriticalCountOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CriticalCount.Get(), o.CriticalCount.IsSet()
}

// HasCriticalCount returns a boolean if a field has been set.
func (o *AlertGroupSummary) HasCriticalCount() bool {
	if o != nil && o.CriticalCount.IsSet() {
		return true
	}

	return false
}

// SetCriticalCount gets a reference to the given NullableInt64 and assigns it to the CriticalCount field.
func (o *AlertGroupSummary) SetCriticalCount(v int64) {
	o.CriticalCount.Set(&v)
}
// SetCriticalCountNil sets the value for CriticalCount to be an explicit nil
func (o *AlertGroupSummary) SetCriticalCountNil() {
	o.CriticalCount.Set(nil)
}

// UnsetCriticalCount ensures that no value is present for CriticalCount, not even an explicit nil
func (o *AlertGroupSummary) UnsetCriticalCount() {
	o.CriticalCount.Unset()
}

// GetInfoCount returns the InfoCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertGroupSummary) GetInfoCount() int64 {
	if o == nil || o.InfoCount.Get() == nil {
		var ret int64
		return ret
	}
	return *o.InfoCount.Get()
}

// GetInfoCountOk returns a tuple with the InfoCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertGroupSummary) GetInfoCountOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InfoCount.Get(), o.InfoCount.IsSet()
}

// HasInfoCount returns a boolean if a field has been set.
func (o *AlertGroupSummary) HasInfoCount() bool {
	if o != nil && o.InfoCount.IsSet() {
		return true
	}

	return false
}

// SetInfoCount gets a reference to the given NullableInt64 and assigns it to the InfoCount field.
func (o *AlertGroupSummary) SetInfoCount(v int64) {
	o.InfoCount.Set(&v)
}
// SetInfoCountNil sets the value for InfoCount to be an explicit nil
func (o *AlertGroupSummary) SetInfoCountNil() {
	o.InfoCount.Set(nil)
}

// UnsetInfoCount ensures that no value is present for InfoCount, not even an explicit nil
func (o *AlertGroupSummary) UnsetInfoCount() {
	o.InfoCount.Unset()
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertGroupSummary) GetTotalCount() int64 {
	if o == nil || o.TotalCount.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TotalCount.Get()
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertGroupSummary) GetTotalCountOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TotalCount.Get(), o.TotalCount.IsSet()
}

// HasTotalCount returns a boolean if a field has been set.
func (o *AlertGroupSummary) HasTotalCount() bool {
	if o != nil && o.TotalCount.IsSet() {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given NullableInt64 and assigns it to the TotalCount field.
func (o *AlertGroupSummary) SetTotalCount(v int64) {
	o.TotalCount.Set(&v)
}
// SetTotalCountNil sets the value for TotalCount to be an explicit nil
func (o *AlertGroupSummary) SetTotalCountNil() {
	o.TotalCount.Set(nil)
}

// UnsetTotalCount ensures that no value is present for TotalCount, not even an explicit nil
func (o *AlertGroupSummary) UnsetTotalCount() {
	o.TotalCount.Unset()
}

func (o AlertGroupSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Category != nil {
		toSerialize["category"] = o.Category
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.WarningCount.IsSet() {
		toSerialize["warningCount"] = o.WarningCount.Get()
	}
	if o.CriticalCount.IsSet() {
		toSerialize["criticalCount"] = o.CriticalCount.Get()
	}
	if o.InfoCount.IsSet() {
		toSerialize["infoCount"] = o.InfoCount.Get()
	}
	if o.TotalCount.IsSet() {
		toSerialize["totalCount"] = o.TotalCount.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAlertGroupSummary struct {
	value *AlertGroupSummary
	isSet bool
}

func (v NullableAlertGroupSummary) Get() *AlertGroupSummary {
	return v.value
}

func (v *NullableAlertGroupSummary) Set(val *AlertGroupSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertGroupSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertGroupSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertGroupSummary(val *AlertGroupSummary) *NullableAlertGroupSummary {
	return &NullableAlertGroupSummary{value: val, isSet: true}
}

func (v NullableAlertGroupSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertGroupSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o AlertGroupSummary) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}