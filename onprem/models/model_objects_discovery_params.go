/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// ObjectsDiscoveryParams Specifies the parameters used for discovering the office 365 objects selectively during source registration or refresh.
type ObjectsDiscoveryParams struct {
	// Specifies the list of object types that will be discovered as part of source registration or refresh.
	DiscoverableObjectTypeList []string `json:"discoverableObjectTypeList,omitempty"`
	UsersDiscoveryParams *UsersDiscoveryParams `json:"usersDiscoveryParams,omitempty"`
}

// NewObjectsDiscoveryParams instantiates a new ObjectsDiscoveryParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectsDiscoveryParams() *ObjectsDiscoveryParams {
	this := ObjectsDiscoveryParams{}
	return &this
}

// NewObjectsDiscoveryParamsWithDefaults instantiates a new ObjectsDiscoveryParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectsDiscoveryParamsWithDefaults() *ObjectsDiscoveryParams {
	this := ObjectsDiscoveryParams{}
	return &this
}

// GetDiscoverableObjectTypeList returns the DiscoverableObjectTypeList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectsDiscoveryParams) GetDiscoverableObjectTypeList() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.DiscoverableObjectTypeList
}

// GetDiscoverableObjectTypeListOk returns a tuple with the DiscoverableObjectTypeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectsDiscoveryParams) GetDiscoverableObjectTypeListOk() (*[]string, bool) {
	if o == nil || o.DiscoverableObjectTypeList == nil {
		return nil, false
	}
	return &o.DiscoverableObjectTypeList, true
}

// HasDiscoverableObjectTypeList returns a boolean if a field has been set.
func (o *ObjectsDiscoveryParams) HasDiscoverableObjectTypeList() bool {
	if o != nil && o.DiscoverableObjectTypeList != nil {
		return true
	}

	return false
}

// SetDiscoverableObjectTypeList gets a reference to the given []string and assigns it to the DiscoverableObjectTypeList field.
func (o *ObjectsDiscoveryParams) SetDiscoverableObjectTypeList(v []string) {
	o.DiscoverableObjectTypeList = v
}

// GetUsersDiscoveryParams returns the UsersDiscoveryParams field value if set, zero value otherwise.
func (o *ObjectsDiscoveryParams) GetUsersDiscoveryParams() UsersDiscoveryParams {
	if o == nil || o.UsersDiscoveryParams == nil {
		var ret UsersDiscoveryParams
		return ret
	}
	return *o.UsersDiscoveryParams
}

// GetUsersDiscoveryParamsOk returns a tuple with the UsersDiscoveryParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectsDiscoveryParams) GetUsersDiscoveryParamsOk() (*UsersDiscoveryParams, bool) {
	if o == nil || o.UsersDiscoveryParams == nil {
		return nil, false
	}
	return o.UsersDiscoveryParams, true
}

// HasUsersDiscoveryParams returns a boolean if a field has been set.
func (o *ObjectsDiscoveryParams) HasUsersDiscoveryParams() bool {
	if o != nil && o.UsersDiscoveryParams != nil {
		return true
	}

	return false
}

// SetUsersDiscoveryParams gets a reference to the given UsersDiscoveryParams and assigns it to the UsersDiscoveryParams field.
func (o *ObjectsDiscoveryParams) SetUsersDiscoveryParams(v UsersDiscoveryParams) {
	o.UsersDiscoveryParams = &v
}

func (o ObjectsDiscoveryParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DiscoverableObjectTypeList != nil {
		toSerialize["discoverableObjectTypeList"] = o.DiscoverableObjectTypeList
	}
	if o.UsersDiscoveryParams != nil {
		toSerialize["usersDiscoveryParams"] = o.UsersDiscoveryParams
	}
	return json.Marshal(toSerialize)
}

type NullableObjectsDiscoveryParams struct {
	value *ObjectsDiscoveryParams
	isSet bool
}

func (v NullableObjectsDiscoveryParams) Get() *ObjectsDiscoveryParams {
	return v.value
}

func (v *NullableObjectsDiscoveryParams) Set(val *ObjectsDiscoveryParams) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectsDiscoveryParams) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectsDiscoveryParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectsDiscoveryParams(val *ObjectsDiscoveryParams) *NullableObjectsDiscoveryParams {
	return &NullableObjectsDiscoveryParams{value: val, isSet: true}
}

func (v NullableObjectsDiscoveryParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectsDiscoveryParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o ObjectsDiscoveryParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}