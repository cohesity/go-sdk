/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// TagInfo Specifies the tag info for an object.
type TagInfo struct {
	// Specifies Id of tag applied to the object.
	TagId NullableString `json:"tagId"`
}

// NewTagInfo instantiates a new TagInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagInfo(tagId NullableString) *TagInfo {
	this := TagInfo{}
	this.TagId = tagId
	return &this
}

// NewTagInfoWithDefaults instantiates a new TagInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagInfoWithDefaults() *TagInfo {
	this := TagInfo{}
	return &this
}

// GetTagId returns the TagId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *TagInfo) GetTagId() string {
	if o == nil || o.TagId.Get() == nil {
		var ret string
		return ret
	}

	return *o.TagId.Get()
}

// GetTagIdOk returns a tuple with the TagId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TagInfo) GetTagIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TagId.Get(), o.TagId.IsSet()
}

// SetTagId sets field value
func (o *TagInfo) SetTagId(v string) {
	o.TagId.Set(&v)
}

func (o TagInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["tagId"] = o.TagId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableTagInfo struct {
	value *TagInfo
	isSet bool
}

func (v NullableTagInfo) Get() *TagInfo {
	return v.value
}

func (v *NullableTagInfo) Set(val *TagInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTagInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTagInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagInfo(val *TagInfo) *NullableTagInfo {
	return &NullableTagInfo{value: val, isSet: true}
}

func (v NullableTagInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o TagInfo) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}