/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// ReplicatedViewNameConfig Specifies an object protected by a View Protection Group.
type ReplicatedViewNameConfig struct {
	// Specifies the ID of the protected view.
	SourceViewId NullableInt64 `json:"sourceViewId"`
	// Specifies if the remote view name to be kept is same as the source view name. If this field is true, viewName field will be ignored.
	UseSameViewName NullableBool `json:"useSameViewName,omitempty"`
	// Specifies the name of the remote view. This field is only used when useSameViewName is false. If useSameViewName is true, this field is not used.
	ViewName NullableString `json:"viewName,omitempty"`
}

// NewReplicatedViewNameConfig instantiates a new ReplicatedViewNameConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplicatedViewNameConfig(sourceViewId NullableInt64) *ReplicatedViewNameConfig {
	this := ReplicatedViewNameConfig{}
	this.SourceViewId = sourceViewId
	return &this
}

// NewReplicatedViewNameConfigWithDefaults instantiates a new ReplicatedViewNameConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplicatedViewNameConfigWithDefaults() *ReplicatedViewNameConfig {
	this := ReplicatedViewNameConfig{}
	return &this
}

// GetSourceViewId returns the SourceViewId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *ReplicatedViewNameConfig) GetSourceViewId() int64 {
	if o == nil || o.SourceViewId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.SourceViewId.Get()
}

// GetSourceViewIdOk returns a tuple with the SourceViewId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicatedViewNameConfig) GetSourceViewIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceViewId.Get(), o.SourceViewId.IsSet()
}

// SetSourceViewId sets field value
func (o *ReplicatedViewNameConfig) SetSourceViewId(v int64) {
	o.SourceViewId.Set(&v)
}

// GetUseSameViewName returns the UseSameViewName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicatedViewNameConfig) GetUseSameViewName() bool {
	if o == nil || o.UseSameViewName.Get() == nil {
		var ret bool
		return ret
	}
	return *o.UseSameViewName.Get()
}

// GetUseSameViewNameOk returns a tuple with the UseSameViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicatedViewNameConfig) GetUseSameViewNameOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UseSameViewName.Get(), o.UseSameViewName.IsSet()
}

// HasUseSameViewName returns a boolean if a field has been set.
func (o *ReplicatedViewNameConfig) HasUseSameViewName() bool {
	if o != nil && o.UseSameViewName.IsSet() {
		return true
	}

	return false
}

// SetUseSameViewName gets a reference to the given NullableBool and assigns it to the UseSameViewName field.
func (o *ReplicatedViewNameConfig) SetUseSameViewName(v bool) {
	o.UseSameViewName.Set(&v)
}
// SetUseSameViewNameNil sets the value for UseSameViewName to be an explicit nil
func (o *ReplicatedViewNameConfig) SetUseSameViewNameNil() {
	o.UseSameViewName.Set(nil)
}

// UnsetUseSameViewName ensures that no value is present for UseSameViewName, not even an explicit nil
func (o *ReplicatedViewNameConfig) UnsetUseSameViewName() {
	o.UseSameViewName.Unset()
}

// GetViewName returns the ViewName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicatedViewNameConfig) GetViewName() string {
	if o == nil || o.ViewName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ViewName.Get()
}

// GetViewNameOk returns a tuple with the ViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicatedViewNameConfig) GetViewNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewName.Get(), o.ViewName.IsSet()
}

// HasViewName returns a boolean if a field has been set.
func (o *ReplicatedViewNameConfig) HasViewName() bool {
	if o != nil && o.ViewName.IsSet() {
		return true
	}

	return false
}

// SetViewName gets a reference to the given NullableString and assigns it to the ViewName field.
func (o *ReplicatedViewNameConfig) SetViewName(v string) {
	o.ViewName.Set(&v)
}
// SetViewNameNil sets the value for ViewName to be an explicit nil
func (o *ReplicatedViewNameConfig) SetViewNameNil() {
	o.ViewName.Set(nil)
}

// UnsetViewName ensures that no value is present for ViewName, not even an explicit nil
func (o *ReplicatedViewNameConfig) UnsetViewName() {
	o.ViewName.Unset()
}

func (o ReplicatedViewNameConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["sourceViewId"] = o.SourceViewId.Get()
	}
	if o.UseSameViewName.IsSet() {
		toSerialize["useSameViewName"] = o.UseSameViewName.Get()
	}
	if o.ViewName.IsSet() {
		toSerialize["viewName"] = o.ViewName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableReplicatedViewNameConfig struct {
	value *ReplicatedViewNameConfig
	isSet bool
}

func (v NullableReplicatedViewNameConfig) Get() *ReplicatedViewNameConfig {
	return v.value
}

func (v *NullableReplicatedViewNameConfig) Set(val *ReplicatedViewNameConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicatedViewNameConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicatedViewNameConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicatedViewNameConfig(val *ReplicatedViewNameConfig) *NullableReplicatedViewNameConfig {
	return &NullableReplicatedViewNameConfig{value: val, isSet: true}
}

func (v NullableReplicatedViewNameConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicatedViewNameConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o ReplicatedViewNameConfig) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}