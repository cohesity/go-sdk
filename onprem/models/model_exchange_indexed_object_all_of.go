/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// ExchangeIndexedObjectAllOf struct for ExchangeIndexedObjectAllOf
type ExchangeIndexedObjectAllOf struct {
	// Specifies the name of the Exchange mailbox.
	ObjectName NullableString `json:"objectName,omitempty"`
	// Specifies the email corresponding to the mailbox.
	Email NullableString `json:"email,omitempty"`
	// Specifies the name of the Exchange database corresponding to the mailbox.
	DatabaseName NullableString `json:"databaseName,omitempty"`
}

// NewExchangeIndexedObjectAllOf instantiates a new ExchangeIndexedObjectAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExchangeIndexedObjectAllOf() *ExchangeIndexedObjectAllOf {
	this := ExchangeIndexedObjectAllOf{}
	return &this
}

// NewExchangeIndexedObjectAllOfWithDefaults instantiates a new ExchangeIndexedObjectAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExchangeIndexedObjectAllOfWithDefaults() *ExchangeIndexedObjectAllOf {
	this := ExchangeIndexedObjectAllOf{}
	return &this
}

// GetObjectName returns the ObjectName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeIndexedObjectAllOf) GetObjectName() string {
	if o == nil || o.ObjectName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ObjectName.Get()
}

// GetObjectNameOk returns a tuple with the ObjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeIndexedObjectAllOf) GetObjectNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ObjectName.Get(), o.ObjectName.IsSet()
}

// HasObjectName returns a boolean if a field has been set.
func (o *ExchangeIndexedObjectAllOf) HasObjectName() bool {
	if o != nil && o.ObjectName.IsSet() {
		return true
	}

	return false
}

// SetObjectName gets a reference to the given NullableString and assigns it to the ObjectName field.
func (o *ExchangeIndexedObjectAllOf) SetObjectName(v string) {
	o.ObjectName.Set(&v)
}
// SetObjectNameNil sets the value for ObjectName to be an explicit nil
func (o *ExchangeIndexedObjectAllOf) SetObjectNameNil() {
	o.ObjectName.Set(nil)
}

// UnsetObjectName ensures that no value is present for ObjectName, not even an explicit nil
func (o *ExchangeIndexedObjectAllOf) UnsetObjectName() {
	o.ObjectName.Unset()
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeIndexedObjectAllOf) GetEmail() string {
	if o == nil || o.Email.Get() == nil {
		var ret string
		return ret
	}
	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeIndexedObjectAllOf) GetEmailOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// HasEmail returns a boolean if a field has been set.
func (o *ExchangeIndexedObjectAllOf) HasEmail() bool {
	if o != nil && o.Email.IsSet() {
		return true
	}

	return false
}

// SetEmail gets a reference to the given NullableString and assigns it to the Email field.
func (o *ExchangeIndexedObjectAllOf) SetEmail(v string) {
	o.Email.Set(&v)
}
// SetEmailNil sets the value for Email to be an explicit nil
func (o *ExchangeIndexedObjectAllOf) SetEmailNil() {
	o.Email.Set(nil)
}

// UnsetEmail ensures that no value is present for Email, not even an explicit nil
func (o *ExchangeIndexedObjectAllOf) UnsetEmail() {
	o.Email.Unset()
}

// GetDatabaseName returns the DatabaseName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeIndexedObjectAllOf) GetDatabaseName() string {
	if o == nil || o.DatabaseName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DatabaseName.Get()
}

// GetDatabaseNameOk returns a tuple with the DatabaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeIndexedObjectAllOf) GetDatabaseNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DatabaseName.Get(), o.DatabaseName.IsSet()
}

// HasDatabaseName returns a boolean if a field has been set.
func (o *ExchangeIndexedObjectAllOf) HasDatabaseName() bool {
	if o != nil && o.DatabaseName.IsSet() {
		return true
	}

	return false
}

// SetDatabaseName gets a reference to the given NullableString and assigns it to the DatabaseName field.
func (o *ExchangeIndexedObjectAllOf) SetDatabaseName(v string) {
	o.DatabaseName.Set(&v)
}
// SetDatabaseNameNil sets the value for DatabaseName to be an explicit nil
func (o *ExchangeIndexedObjectAllOf) SetDatabaseNameNil() {
	o.DatabaseName.Set(nil)
}

// UnsetDatabaseName ensures that no value is present for DatabaseName, not even an explicit nil
func (o *ExchangeIndexedObjectAllOf) UnsetDatabaseName() {
	o.DatabaseName.Unset()
}

func (o ExchangeIndexedObjectAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ObjectName.IsSet() {
		toSerialize["objectName"] = o.ObjectName.Get()
	}
	if o.Email.IsSet() {
		toSerialize["email"] = o.Email.Get()
	}
	if o.DatabaseName.IsSet() {
		toSerialize["databaseName"] = o.DatabaseName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableExchangeIndexedObjectAllOf struct {
	value *ExchangeIndexedObjectAllOf
	isSet bool
}

func (v NullableExchangeIndexedObjectAllOf) Get() *ExchangeIndexedObjectAllOf {
	return v.value
}

func (v *NullableExchangeIndexedObjectAllOf) Set(val *ExchangeIndexedObjectAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableExchangeIndexedObjectAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableExchangeIndexedObjectAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchangeIndexedObjectAllOf(val *ExchangeIndexedObjectAllOf) *NullableExchangeIndexedObjectAllOf {
	return &NullableExchangeIndexedObjectAllOf{value: val, isSet: true}
}

func (v NullableExchangeIndexedObjectAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchangeIndexedObjectAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o ExchangeIndexedObjectAllOf) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}