/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// SnapMirrorConfig Specifies the snapshot backup configuration if S3 views are used for backing up NetApp Data-Protect volumes.
type SnapMirrorConfig struct {
	// Specifies the Id of the S3 view where data need to be written.
	ViewId NullableInt64 `json:"viewId,omitempty"`
	// Specifies the incremental snapshot prefix value.
	IncrementalPrefix NullableString `json:"incrementalPrefix,omitempty"`
}

// NewSnapMirrorConfig instantiates a new SnapMirrorConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapMirrorConfig() *SnapMirrorConfig {
	this := SnapMirrorConfig{}
	return &this
}

// NewSnapMirrorConfigWithDefaults instantiates a new SnapMirrorConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapMirrorConfigWithDefaults() *SnapMirrorConfig {
	this := SnapMirrorConfig{}
	return &this
}

// GetViewId returns the ViewId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapMirrorConfig) GetViewId() int64 {
	if o == nil || o.ViewId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ViewId.Get()
}

// GetViewIdOk returns a tuple with the ViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapMirrorConfig) GetViewIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewId.Get(), o.ViewId.IsSet()
}

// HasViewId returns a boolean if a field has been set.
func (o *SnapMirrorConfig) HasViewId() bool {
	if o != nil && o.ViewId.IsSet() {
		return true
	}

	return false
}

// SetViewId gets a reference to the given NullableInt64 and assigns it to the ViewId field.
func (o *SnapMirrorConfig) SetViewId(v int64) {
	o.ViewId.Set(&v)
}
// SetViewIdNil sets the value for ViewId to be an explicit nil
func (o *SnapMirrorConfig) SetViewIdNil() {
	o.ViewId.Set(nil)
}

// UnsetViewId ensures that no value is present for ViewId, not even an explicit nil
func (o *SnapMirrorConfig) UnsetViewId() {
	o.ViewId.Unset()
}

// GetIncrementalPrefix returns the IncrementalPrefix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapMirrorConfig) GetIncrementalPrefix() string {
	if o == nil || o.IncrementalPrefix.Get() == nil {
		var ret string
		return ret
	}
	return *o.IncrementalPrefix.Get()
}

// GetIncrementalPrefixOk returns a tuple with the IncrementalPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapMirrorConfig) GetIncrementalPrefixOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IncrementalPrefix.Get(), o.IncrementalPrefix.IsSet()
}

// HasIncrementalPrefix returns a boolean if a field has been set.
func (o *SnapMirrorConfig) HasIncrementalPrefix() bool {
	if o != nil && o.IncrementalPrefix.IsSet() {
		return true
	}

	return false
}

// SetIncrementalPrefix gets a reference to the given NullableString and assigns it to the IncrementalPrefix field.
func (o *SnapMirrorConfig) SetIncrementalPrefix(v string) {
	o.IncrementalPrefix.Set(&v)
}
// SetIncrementalPrefixNil sets the value for IncrementalPrefix to be an explicit nil
func (o *SnapMirrorConfig) SetIncrementalPrefixNil() {
	o.IncrementalPrefix.Set(nil)
}

// UnsetIncrementalPrefix ensures that no value is present for IncrementalPrefix, not even an explicit nil
func (o *SnapMirrorConfig) UnsetIncrementalPrefix() {
	o.IncrementalPrefix.Unset()
}

func (o SnapMirrorConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ViewId.IsSet() {
		toSerialize["viewId"] = o.ViewId.Get()
	}
	if o.IncrementalPrefix.IsSet() {
		toSerialize["incrementalPrefix"] = o.IncrementalPrefix.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSnapMirrorConfig struct {
	value *SnapMirrorConfig
	isSet bool
}

func (v NullableSnapMirrorConfig) Get() *SnapMirrorConfig {
	return v.value
}

func (v *NullableSnapMirrorConfig) Set(val *SnapMirrorConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapMirrorConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapMirrorConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapMirrorConfig(val *SnapMirrorConfig) *NullableSnapMirrorConfig {
	return &NullableSnapMirrorConfig{value: val, isSet: true}
}

func (v NullableSnapMirrorConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapMirrorConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o SnapMirrorConfig) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}