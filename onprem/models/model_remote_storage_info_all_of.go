/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// RemoteStorageInfoAllOf struct for RemoteStorageInfoAllOf
type RemoteStorageInfoAllOf struct {
	FlashbladeParams *FlashbladeParams `json:"flashbladeParams,omitempty"`
}

// NewRemoteStorageInfoAllOf instantiates a new RemoteStorageInfoAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteStorageInfoAllOf() *RemoteStorageInfoAllOf {
	this := RemoteStorageInfoAllOf{}
	return &this
}

// NewRemoteStorageInfoAllOfWithDefaults instantiates a new RemoteStorageInfoAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteStorageInfoAllOfWithDefaults() *RemoteStorageInfoAllOf {
	this := RemoteStorageInfoAllOf{}
	return &this
}

// GetFlashbladeParams returns the FlashbladeParams field value if set, zero value otherwise.
func (o *RemoteStorageInfoAllOf) GetFlashbladeParams() FlashbladeParams {
	if o == nil || o.FlashbladeParams == nil {
		var ret FlashbladeParams
		return ret
	}
	return *o.FlashbladeParams
}

// GetFlashbladeParamsOk returns a tuple with the FlashbladeParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteStorageInfoAllOf) GetFlashbladeParamsOk() (*FlashbladeParams, bool) {
	if o == nil || o.FlashbladeParams == nil {
		return nil, false
	}
	return o.FlashbladeParams, true
}

// HasFlashbladeParams returns a boolean if a field has been set.
func (o *RemoteStorageInfoAllOf) HasFlashbladeParams() bool {
	if o != nil && o.FlashbladeParams != nil {
		return true
	}

	return false
}

// SetFlashbladeParams gets a reference to the given FlashbladeParams and assigns it to the FlashbladeParams field.
func (o *RemoteStorageInfoAllOf) SetFlashbladeParams(v FlashbladeParams) {
	o.FlashbladeParams = &v
}

func (o RemoteStorageInfoAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FlashbladeParams != nil {
		toSerialize["flashbladeParams"] = o.FlashbladeParams
	}
	return json.Marshal(toSerialize)
}

type NullableRemoteStorageInfoAllOf struct {
	value *RemoteStorageInfoAllOf
	isSet bool
}

func (v NullableRemoteStorageInfoAllOf) Get() *RemoteStorageInfoAllOf {
	return v.value
}

func (v *NullableRemoteStorageInfoAllOf) Set(val *RemoteStorageInfoAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteStorageInfoAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteStorageInfoAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteStorageInfoAllOf(val *RemoteStorageInfoAllOf) *NullableRemoteStorageInfoAllOf {
	return &NullableRemoteStorageInfoAllOf{value: val, isSet: true}
}

func (v NullableRemoteStorageInfoAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteStorageInfoAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o RemoteStorageInfoAllOf) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}