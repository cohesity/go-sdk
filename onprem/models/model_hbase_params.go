/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// HbaseParams Specifies the recovery options specific to Hbase environment.
type HbaseParams struct {
	// Specifies the type of recover action to be performed.
	RecoveryAction string `json:"recoveryAction"`
	RecoverHbaseParams RecoverHbaseParams `json:"recoverHbaseParams"`
}

// NewHbaseParams instantiates a new HbaseParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHbaseParams(recoveryAction string, recoverHbaseParams RecoverHbaseParams) *HbaseParams {
	this := HbaseParams{}
	this.RecoveryAction = recoveryAction
	this.RecoverHbaseParams = recoverHbaseParams
	return &this
}

// NewHbaseParamsWithDefaults instantiates a new HbaseParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHbaseParamsWithDefaults() *HbaseParams {
	this := HbaseParams{}
	return &this
}

// GetRecoveryAction returns the RecoveryAction field value
func (o *HbaseParams) GetRecoveryAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecoveryAction
}

// GetRecoveryActionOk returns a tuple with the RecoveryAction field value
// and a boolean to check if the value has been set.
func (o *HbaseParams) GetRecoveryActionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RecoveryAction, true
}

// SetRecoveryAction sets field value
func (o *HbaseParams) SetRecoveryAction(v string) {
	o.RecoveryAction = v
}

// GetRecoverHbaseParams returns the RecoverHbaseParams field value
func (o *HbaseParams) GetRecoverHbaseParams() RecoverHbaseParams {
	if o == nil {
		var ret RecoverHbaseParams
		return ret
	}

	return o.RecoverHbaseParams
}

// GetRecoverHbaseParamsOk returns a tuple with the RecoverHbaseParams field value
// and a boolean to check if the value has been set.
func (o *HbaseParams) GetRecoverHbaseParamsOk() (*RecoverHbaseParams, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RecoverHbaseParams, true
}

// SetRecoverHbaseParams sets field value
func (o *HbaseParams) SetRecoverHbaseParams(v RecoverHbaseParams) {
	o.RecoverHbaseParams = v
}

func (o HbaseParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["recoveryAction"] = o.RecoveryAction
	}
	if true {
		toSerialize["recoverHbaseParams"] = o.RecoverHbaseParams
	}
	return json.Marshal(toSerialize)
}

type NullableHbaseParams struct {
	value *HbaseParams
	isSet bool
}

func (v NullableHbaseParams) Get() *HbaseParams {
	return v.value
}

func (v *NullableHbaseParams) Set(val *HbaseParams) {
	v.value = val
	v.isSet = true
}

func (v NullableHbaseParams) IsSet() bool {
	return v.isSet
}

func (v *NullableHbaseParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHbaseParams(val *HbaseParams) *NullableHbaseParams {
	return &NullableHbaseParams{value: val, isSet: true}
}

func (v NullableHbaseParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHbaseParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o HbaseParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}