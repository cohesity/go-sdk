/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// RecoverHyperVVmParams Specifies the parameters to recover VMs.
type RecoverHyperVVmParams struct {
	// Specifies the Protection Group Runs params to recover. All the VM's that are successfully backed up by specified Runs will be recovered. This can be specified along with individual snapshots of VMs. User has to make sure that specified Object snapshots and Protection Group Runs should not have any intersection. For example, user cannot specify multiple Runs which has same Object or an Object snapshot and a Run which has same Object's snapshot.
	RecoverProtectionGroupRunsParams []RecoverProtectionGroupRunParams `json:"recoverProtectionGroupRunsParams,omitempty"`
	// Specifies the environment of the recovery target. The corresponding params below must be filled out.
	TargetEnvironment string `json:"targetEnvironment"`
	// Specifies the params for recovering to a HyperV target.
	HypervTargetParams NullableHyperVTargetParamsForRecoverVm `json:"hypervTargetParams,omitempty"`
}

// NewRecoverHyperVVmParams instantiates a new RecoverHyperVVmParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverHyperVVmParams(targetEnvironment string) *RecoverHyperVVmParams {
	this := RecoverHyperVVmParams{}
	this.TargetEnvironment = targetEnvironment
	return &this
}

// NewRecoverHyperVVmParamsWithDefaults instantiates a new RecoverHyperVVmParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverHyperVVmParamsWithDefaults() *RecoverHyperVVmParams {
	this := RecoverHyperVVmParams{}
	return &this
}

// GetRecoverProtectionGroupRunsParams returns the RecoverProtectionGroupRunsParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverHyperVVmParams) GetRecoverProtectionGroupRunsParams() []RecoverProtectionGroupRunParams {
	if o == nil  {
		var ret []RecoverProtectionGroupRunParams
		return ret
	}
	return o.RecoverProtectionGroupRunsParams
}

// GetRecoverProtectionGroupRunsParamsOk returns a tuple with the RecoverProtectionGroupRunsParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverHyperVVmParams) GetRecoverProtectionGroupRunsParamsOk() (*[]RecoverProtectionGroupRunParams, bool) {
	if o == nil || o.RecoverProtectionGroupRunsParams == nil {
		return nil, false
	}
	return &o.RecoverProtectionGroupRunsParams, true
}

// HasRecoverProtectionGroupRunsParams returns a boolean if a field has been set.
func (o *RecoverHyperVVmParams) HasRecoverProtectionGroupRunsParams() bool {
	if o != nil && o.RecoverProtectionGroupRunsParams != nil {
		return true
	}

	return false
}

// SetRecoverProtectionGroupRunsParams gets a reference to the given []RecoverProtectionGroupRunParams and assigns it to the RecoverProtectionGroupRunsParams field.
func (o *RecoverHyperVVmParams) SetRecoverProtectionGroupRunsParams(v []RecoverProtectionGroupRunParams) {
	o.RecoverProtectionGroupRunsParams = v
}

// GetTargetEnvironment returns the TargetEnvironment field value
func (o *RecoverHyperVVmParams) GetTargetEnvironment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetEnvironment
}

// GetTargetEnvironmentOk returns a tuple with the TargetEnvironment field value
// and a boolean to check if the value has been set.
func (o *RecoverHyperVVmParams) GetTargetEnvironmentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TargetEnvironment, true
}

// SetTargetEnvironment sets field value
func (o *RecoverHyperVVmParams) SetTargetEnvironment(v string) {
	o.TargetEnvironment = v
}

// GetHypervTargetParams returns the HypervTargetParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverHyperVVmParams) GetHypervTargetParams() HyperVTargetParamsForRecoverVm {
	if o == nil || o.HypervTargetParams.Get() == nil {
		var ret HyperVTargetParamsForRecoverVm
		return ret
	}
	return *o.HypervTargetParams.Get()
}

// GetHypervTargetParamsOk returns a tuple with the HypervTargetParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverHyperVVmParams) GetHypervTargetParamsOk() (*HyperVTargetParamsForRecoverVm, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HypervTargetParams.Get(), o.HypervTargetParams.IsSet()
}

// HasHypervTargetParams returns a boolean if a field has been set.
func (o *RecoverHyperVVmParams) HasHypervTargetParams() bool {
	if o != nil && o.HypervTargetParams.IsSet() {
		return true
	}

	return false
}

// SetHypervTargetParams gets a reference to the given NullableHyperVTargetParamsForRecoverVm and assigns it to the HypervTargetParams field.
func (o *RecoverHyperVVmParams) SetHypervTargetParams(v HyperVTargetParamsForRecoverVm) {
	o.HypervTargetParams.Set(&v)
}
// SetHypervTargetParamsNil sets the value for HypervTargetParams to be an explicit nil
func (o *RecoverHyperVVmParams) SetHypervTargetParamsNil() {
	o.HypervTargetParams.Set(nil)
}

// UnsetHypervTargetParams ensures that no value is present for HypervTargetParams, not even an explicit nil
func (o *RecoverHyperVVmParams) UnsetHypervTargetParams() {
	o.HypervTargetParams.Unset()
}

func (o RecoverHyperVVmParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RecoverProtectionGroupRunsParams != nil {
		toSerialize["recoverProtectionGroupRunsParams"] = o.RecoverProtectionGroupRunsParams
	}
	if true {
		toSerialize["targetEnvironment"] = o.TargetEnvironment
	}
	if o.HypervTargetParams.IsSet() {
		toSerialize["hypervTargetParams"] = o.HypervTargetParams.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRecoverHyperVVmParams struct {
	value *RecoverHyperVVmParams
	isSet bool
}

func (v NullableRecoverHyperVVmParams) Get() *RecoverHyperVVmParams {
	return v.value
}

func (v *NullableRecoverHyperVVmParams) Set(val *RecoverHyperVVmParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverHyperVVmParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverHyperVVmParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverHyperVVmParams(val *RecoverHyperVVmParams) *NullableRecoverHyperVVmParams {
	return &NullableRecoverHyperVVmParams{value: val, isSet: true}
}

func (v NullableRecoverHyperVVmParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverHyperVVmParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o RecoverHyperVVmParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}