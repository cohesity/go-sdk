/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// ViewDirectoryQuotas Specifies a list of View directory quotas.
type ViewDirectoryQuotas struct {
	// Specifies the list of View directory quotas.
	DirectoryQuotas []ViewDirectoryQuota `json:"directoryQuotas,omitempty"`
	// Specifies the pagination cookie.
	Cookie NullableInt64 `json:"cookie,omitempty"`
}

// NewViewDirectoryQuotas instantiates a new ViewDirectoryQuotas object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewDirectoryQuotas() *ViewDirectoryQuotas {
	this := ViewDirectoryQuotas{}
	return &this
}

// NewViewDirectoryQuotasWithDefaults instantiates a new ViewDirectoryQuotas object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewDirectoryQuotasWithDefaults() *ViewDirectoryQuotas {
	this := ViewDirectoryQuotas{}
	return &this
}

// GetDirectoryQuotas returns the DirectoryQuotas field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewDirectoryQuotas) GetDirectoryQuotas() []ViewDirectoryQuota {
	if o == nil  {
		var ret []ViewDirectoryQuota
		return ret
	}
	return o.DirectoryQuotas
}

// GetDirectoryQuotasOk returns a tuple with the DirectoryQuotas field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewDirectoryQuotas) GetDirectoryQuotasOk() (*[]ViewDirectoryQuota, bool) {
	if o == nil || o.DirectoryQuotas == nil {
		return nil, false
	}
	return &o.DirectoryQuotas, true
}

// HasDirectoryQuotas returns a boolean if a field has been set.
func (o *ViewDirectoryQuotas) HasDirectoryQuotas() bool {
	if o != nil && o.DirectoryQuotas != nil {
		return true
	}

	return false
}

// SetDirectoryQuotas gets a reference to the given []ViewDirectoryQuota and assigns it to the DirectoryQuotas field.
func (o *ViewDirectoryQuotas) SetDirectoryQuotas(v []ViewDirectoryQuota) {
	o.DirectoryQuotas = v
}

// GetCookie returns the Cookie field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewDirectoryQuotas) GetCookie() int64 {
	if o == nil || o.Cookie.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Cookie.Get()
}

// GetCookieOk returns a tuple with the Cookie field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewDirectoryQuotas) GetCookieOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Cookie.Get(), o.Cookie.IsSet()
}

// HasCookie returns a boolean if a field has been set.
func (o *ViewDirectoryQuotas) HasCookie() bool {
	if o != nil && o.Cookie.IsSet() {
		return true
	}

	return false
}

// SetCookie gets a reference to the given NullableInt64 and assigns it to the Cookie field.
func (o *ViewDirectoryQuotas) SetCookie(v int64) {
	o.Cookie.Set(&v)
}
// SetCookieNil sets the value for Cookie to be an explicit nil
func (o *ViewDirectoryQuotas) SetCookieNil() {
	o.Cookie.Set(nil)
}

// UnsetCookie ensures that no value is present for Cookie, not even an explicit nil
func (o *ViewDirectoryQuotas) UnsetCookie() {
	o.Cookie.Unset()
}

func (o ViewDirectoryQuotas) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DirectoryQuotas != nil {
		toSerialize["directoryQuotas"] = o.DirectoryQuotas
	}
	if o.Cookie.IsSet() {
		toSerialize["cookie"] = o.Cookie.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableViewDirectoryQuotas struct {
	value *ViewDirectoryQuotas
	isSet bool
}

func (v NullableViewDirectoryQuotas) Get() *ViewDirectoryQuotas {
	return v.value
}

func (v *NullableViewDirectoryQuotas) Set(val *ViewDirectoryQuotas) {
	v.value = val
	v.isSet = true
}

func (v NullableViewDirectoryQuotas) IsSet() bool {
	return v.isSet
}

func (v *NullableViewDirectoryQuotas) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewDirectoryQuotas(val *ViewDirectoryQuotas) *NullableViewDirectoryQuotas {
	return &NullableViewDirectoryQuotas{value: val, isSet: true}
}

func (v NullableViewDirectoryQuotas) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewDirectoryQuotas) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o ViewDirectoryQuotas) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}