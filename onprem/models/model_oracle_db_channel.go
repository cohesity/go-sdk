/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// OracleDbChannel Specifies the DB channel info for all the databases of app entity. Length of this array will be 1 for RAC and Standalone setups.
type OracleDbChannel struct {
	// Specifies the number of days archive log should be stored. For keeping the archived log forever, set this to -1. For deleting the archived log immediately, set this to 0. For deleting the archived log after n days, set this to n.
	ArchiveLogRetentionDays NullableInt32 `json:"archiveLogRetentionDays,omitempty"`
	Credentials *Credentials `json:"credentials,omitempty"`
	// Specifies the unique Name of the database.
	DatabaseUniqueName NullableString `json:"databaseUniqueName,omitempty"`
	// Specifies the database unique id. This is an internal field and is filled by magneto master based on corresponding app entity id.
	DatabaseUuid NullableString `json:"databaseUuid,omitempty"`
	// Specifies the default number of channels to use per node per database. This value is used on all Oracle Database Nodes unless databaseNodeList item's channelCount is specified for the node. Default value for the number of channels will be calculated as the minimum of number of nodes in Cohesity cluster and 2 * number of CPU on the host. If the number of channels is unspecified here and unspecified within databaseNodeList, the above formula will be used to determine the same.
	DefaultChannelCount NullableInt32 `json:"defaultChannelCount,omitempty"`
	// Specifies the Node info from where we are allowed to take the backup/restore.
	DatabaseNodeList []OracleDatabaseHost `json:"databaseNodeList,omitempty"`
	// Specifies the maximum number of hosts from which backup/restore is allowed in parallel. This will be less than or equal to the number of databaseNode specified within databaseNodeList.
	MaxHostCount NullableInt32 `json:"maxHostCount,omitempty"`
	// Specifies whether the database having the Primary role within Data Guard configuration is to be backed up.
	EnableDgPrimaryBackup NullableBool `json:"enableDgPrimaryBackup,omitempty"`
	// Specifies the type of Oracle RMAN backup requested
	RmanBackupType *string `json:"rmanBackupType,omitempty"`
}

// NewOracleDbChannel instantiates a new OracleDbChannel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleDbChannel() *OracleDbChannel {
	this := OracleDbChannel{}
	return &this
}

// NewOracleDbChannelWithDefaults instantiates a new OracleDbChannel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleDbChannelWithDefaults() *OracleDbChannel {
	this := OracleDbChannel{}
	return &this
}

// GetArchiveLogRetentionDays returns the ArchiveLogRetentionDays field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDbChannel) GetArchiveLogRetentionDays() int32 {
	if o == nil || o.ArchiveLogRetentionDays.Get() == nil {
		var ret int32
		return ret
	}
	return *o.ArchiveLogRetentionDays.Get()
}

// GetArchiveLogRetentionDaysOk returns a tuple with the ArchiveLogRetentionDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDbChannel) GetArchiveLogRetentionDaysOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ArchiveLogRetentionDays.Get(), o.ArchiveLogRetentionDays.IsSet()
}

// HasArchiveLogRetentionDays returns a boolean if a field has been set.
func (o *OracleDbChannel) HasArchiveLogRetentionDays() bool {
	if o != nil && o.ArchiveLogRetentionDays.IsSet() {
		return true
	}

	return false
}

// SetArchiveLogRetentionDays gets a reference to the given NullableInt32 and assigns it to the ArchiveLogRetentionDays field.
func (o *OracleDbChannel) SetArchiveLogRetentionDays(v int32) {
	o.ArchiveLogRetentionDays.Set(&v)
}
// SetArchiveLogRetentionDaysNil sets the value for ArchiveLogRetentionDays to be an explicit nil
func (o *OracleDbChannel) SetArchiveLogRetentionDaysNil() {
	o.ArchiveLogRetentionDays.Set(nil)
}

// UnsetArchiveLogRetentionDays ensures that no value is present for ArchiveLogRetentionDays, not even an explicit nil
func (o *OracleDbChannel) UnsetArchiveLogRetentionDays() {
	o.ArchiveLogRetentionDays.Unset()
}

// GetCredentials returns the Credentials field value if set, zero value otherwise.
func (o *OracleDbChannel) GetCredentials() Credentials {
	if o == nil || o.Credentials == nil {
		var ret Credentials
		return ret
	}
	return *o.Credentials
}

// GetCredentialsOk returns a tuple with the Credentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDbChannel) GetCredentialsOk() (*Credentials, bool) {
	if o == nil || o.Credentials == nil {
		return nil, false
	}
	return o.Credentials, true
}

// HasCredentials returns a boolean if a field has been set.
func (o *OracleDbChannel) HasCredentials() bool {
	if o != nil && o.Credentials != nil {
		return true
	}

	return false
}

// SetCredentials gets a reference to the given Credentials and assigns it to the Credentials field.
func (o *OracleDbChannel) SetCredentials(v Credentials) {
	o.Credentials = &v
}

// GetDatabaseUniqueName returns the DatabaseUniqueName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDbChannel) GetDatabaseUniqueName() string {
	if o == nil || o.DatabaseUniqueName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DatabaseUniqueName.Get()
}

// GetDatabaseUniqueNameOk returns a tuple with the DatabaseUniqueName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDbChannel) GetDatabaseUniqueNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DatabaseUniqueName.Get(), o.DatabaseUniqueName.IsSet()
}

// HasDatabaseUniqueName returns a boolean if a field has been set.
func (o *OracleDbChannel) HasDatabaseUniqueName() bool {
	if o != nil && o.DatabaseUniqueName.IsSet() {
		return true
	}

	return false
}

// SetDatabaseUniqueName gets a reference to the given NullableString and assigns it to the DatabaseUniqueName field.
func (o *OracleDbChannel) SetDatabaseUniqueName(v string) {
	o.DatabaseUniqueName.Set(&v)
}
// SetDatabaseUniqueNameNil sets the value for DatabaseUniqueName to be an explicit nil
func (o *OracleDbChannel) SetDatabaseUniqueNameNil() {
	o.DatabaseUniqueName.Set(nil)
}

// UnsetDatabaseUniqueName ensures that no value is present for DatabaseUniqueName, not even an explicit nil
func (o *OracleDbChannel) UnsetDatabaseUniqueName() {
	o.DatabaseUniqueName.Unset()
}

// GetDatabaseUuid returns the DatabaseUuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDbChannel) GetDatabaseUuid() string {
	if o == nil || o.DatabaseUuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.DatabaseUuid.Get()
}

// GetDatabaseUuidOk returns a tuple with the DatabaseUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDbChannel) GetDatabaseUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DatabaseUuid.Get(), o.DatabaseUuid.IsSet()
}

// HasDatabaseUuid returns a boolean if a field has been set.
func (o *OracleDbChannel) HasDatabaseUuid() bool {
	if o != nil && o.DatabaseUuid.IsSet() {
		return true
	}

	return false
}

// SetDatabaseUuid gets a reference to the given NullableString and assigns it to the DatabaseUuid field.
func (o *OracleDbChannel) SetDatabaseUuid(v string) {
	o.DatabaseUuid.Set(&v)
}
// SetDatabaseUuidNil sets the value for DatabaseUuid to be an explicit nil
func (o *OracleDbChannel) SetDatabaseUuidNil() {
	o.DatabaseUuid.Set(nil)
}

// UnsetDatabaseUuid ensures that no value is present for DatabaseUuid, not even an explicit nil
func (o *OracleDbChannel) UnsetDatabaseUuid() {
	o.DatabaseUuid.Unset()
}

// GetDefaultChannelCount returns the DefaultChannelCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDbChannel) GetDefaultChannelCount() int32 {
	if o == nil || o.DefaultChannelCount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.DefaultChannelCount.Get()
}

// GetDefaultChannelCountOk returns a tuple with the DefaultChannelCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDbChannel) GetDefaultChannelCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DefaultChannelCount.Get(), o.DefaultChannelCount.IsSet()
}

// HasDefaultChannelCount returns a boolean if a field has been set.
func (o *OracleDbChannel) HasDefaultChannelCount() bool {
	if o != nil && o.DefaultChannelCount.IsSet() {
		return true
	}

	return false
}

// SetDefaultChannelCount gets a reference to the given NullableInt32 and assigns it to the DefaultChannelCount field.
func (o *OracleDbChannel) SetDefaultChannelCount(v int32) {
	o.DefaultChannelCount.Set(&v)
}
// SetDefaultChannelCountNil sets the value for DefaultChannelCount to be an explicit nil
func (o *OracleDbChannel) SetDefaultChannelCountNil() {
	o.DefaultChannelCount.Set(nil)
}

// UnsetDefaultChannelCount ensures that no value is present for DefaultChannelCount, not even an explicit nil
func (o *OracleDbChannel) UnsetDefaultChannelCount() {
	o.DefaultChannelCount.Unset()
}

// GetDatabaseNodeList returns the DatabaseNodeList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDbChannel) GetDatabaseNodeList() []OracleDatabaseHost {
	if o == nil  {
		var ret []OracleDatabaseHost
		return ret
	}
	return o.DatabaseNodeList
}

// GetDatabaseNodeListOk returns a tuple with the DatabaseNodeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDbChannel) GetDatabaseNodeListOk() (*[]OracleDatabaseHost, bool) {
	if o == nil || o.DatabaseNodeList == nil {
		return nil, false
	}
	return &o.DatabaseNodeList, true
}

// HasDatabaseNodeList returns a boolean if a field has been set.
func (o *OracleDbChannel) HasDatabaseNodeList() bool {
	if o != nil && o.DatabaseNodeList != nil {
		return true
	}

	return false
}

// SetDatabaseNodeList gets a reference to the given []OracleDatabaseHost and assigns it to the DatabaseNodeList field.
func (o *OracleDbChannel) SetDatabaseNodeList(v []OracleDatabaseHost) {
	o.DatabaseNodeList = v
}

// GetMaxHostCount returns the MaxHostCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDbChannel) GetMaxHostCount() int32 {
	if o == nil || o.MaxHostCount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.MaxHostCount.Get()
}

// GetMaxHostCountOk returns a tuple with the MaxHostCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDbChannel) GetMaxHostCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MaxHostCount.Get(), o.MaxHostCount.IsSet()
}

// HasMaxHostCount returns a boolean if a field has been set.
func (o *OracleDbChannel) HasMaxHostCount() bool {
	if o != nil && o.MaxHostCount.IsSet() {
		return true
	}

	return false
}

// SetMaxHostCount gets a reference to the given NullableInt32 and assigns it to the MaxHostCount field.
func (o *OracleDbChannel) SetMaxHostCount(v int32) {
	o.MaxHostCount.Set(&v)
}
// SetMaxHostCountNil sets the value for MaxHostCount to be an explicit nil
func (o *OracleDbChannel) SetMaxHostCountNil() {
	o.MaxHostCount.Set(nil)
}

// UnsetMaxHostCount ensures that no value is present for MaxHostCount, not even an explicit nil
func (o *OracleDbChannel) UnsetMaxHostCount() {
	o.MaxHostCount.Unset()
}

// GetEnableDgPrimaryBackup returns the EnableDgPrimaryBackup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDbChannel) GetEnableDgPrimaryBackup() bool {
	if o == nil || o.EnableDgPrimaryBackup.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableDgPrimaryBackup.Get()
}

// GetEnableDgPrimaryBackupOk returns a tuple with the EnableDgPrimaryBackup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDbChannel) GetEnableDgPrimaryBackupOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableDgPrimaryBackup.Get(), o.EnableDgPrimaryBackup.IsSet()
}

// HasEnableDgPrimaryBackup returns a boolean if a field has been set.
func (o *OracleDbChannel) HasEnableDgPrimaryBackup() bool {
	if o != nil && o.EnableDgPrimaryBackup.IsSet() {
		return true
	}

	return false
}

// SetEnableDgPrimaryBackup gets a reference to the given NullableBool and assigns it to the EnableDgPrimaryBackup field.
func (o *OracleDbChannel) SetEnableDgPrimaryBackup(v bool) {
	o.EnableDgPrimaryBackup.Set(&v)
}
// SetEnableDgPrimaryBackupNil sets the value for EnableDgPrimaryBackup to be an explicit nil
func (o *OracleDbChannel) SetEnableDgPrimaryBackupNil() {
	o.EnableDgPrimaryBackup.Set(nil)
}

// UnsetEnableDgPrimaryBackup ensures that no value is present for EnableDgPrimaryBackup, not even an explicit nil
func (o *OracleDbChannel) UnsetEnableDgPrimaryBackup() {
	o.EnableDgPrimaryBackup.Unset()
}

// GetRmanBackupType returns the RmanBackupType field value if set, zero value otherwise.
func (o *OracleDbChannel) GetRmanBackupType() string {
	if o == nil || o.RmanBackupType == nil {
		var ret string
		return ret
	}
	return *o.RmanBackupType
}

// GetRmanBackupTypeOk returns a tuple with the RmanBackupType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDbChannel) GetRmanBackupTypeOk() (*string, bool) {
	if o == nil || o.RmanBackupType == nil {
		return nil, false
	}
	return o.RmanBackupType, true
}

// HasRmanBackupType returns a boolean if a field has been set.
func (o *OracleDbChannel) HasRmanBackupType() bool {
	if o != nil && o.RmanBackupType != nil {
		return true
	}

	return false
}

// SetRmanBackupType gets a reference to the given string and assigns it to the RmanBackupType field.
func (o *OracleDbChannel) SetRmanBackupType(v string) {
	o.RmanBackupType = &v
}

func (o OracleDbChannel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ArchiveLogRetentionDays.IsSet() {
		toSerialize["archiveLogRetentionDays"] = o.ArchiveLogRetentionDays.Get()
	}
	if o.Credentials != nil {
		toSerialize["credentials"] = o.Credentials
	}
	if o.DatabaseUniqueName.IsSet() {
		toSerialize["databaseUniqueName"] = o.DatabaseUniqueName.Get()
	}
	if o.DatabaseUuid.IsSet() {
		toSerialize["databaseUuid"] = o.DatabaseUuid.Get()
	}
	if o.DefaultChannelCount.IsSet() {
		toSerialize["defaultChannelCount"] = o.DefaultChannelCount.Get()
	}
	if o.DatabaseNodeList != nil {
		toSerialize["databaseNodeList"] = o.DatabaseNodeList
	}
	if o.MaxHostCount.IsSet() {
		toSerialize["maxHostCount"] = o.MaxHostCount.Get()
	}
	if o.EnableDgPrimaryBackup.IsSet() {
		toSerialize["enableDgPrimaryBackup"] = o.EnableDgPrimaryBackup.Get()
	}
	if o.RmanBackupType != nil {
		toSerialize["rmanBackupType"] = o.RmanBackupType
	}
	return json.Marshal(toSerialize)
}

type NullableOracleDbChannel struct {
	value *OracleDbChannel
	isSet bool
}

func (v NullableOracleDbChannel) Get() *OracleDbChannel {
	return v.value
}

func (v *NullableOracleDbChannel) Set(val *OracleDbChannel) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleDbChannel) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleDbChannel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleDbChannel(val *OracleDbChannel) *NullableOracleDbChannel {
	return &NullableOracleDbChannel{value: val, isSet: true}
}

func (v NullableOracleDbChannel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleDbChannel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o OracleDbChannel) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}