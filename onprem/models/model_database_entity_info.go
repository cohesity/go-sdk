/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// DatabaseEntityInfo Object details about Oracle database entity info.
type DatabaseEntityInfo struct {
	ContainerDatabaseInfo *ContainerDatabaseInfo `json:"containerDatabaseInfo,omitempty"`
	DataGuardInfo *OracleDataGuardInfo `json:"dataGuardInfo,omitempty"`
}

// NewDatabaseEntityInfo instantiates a new DatabaseEntityInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseEntityInfo() *DatabaseEntityInfo {
	this := DatabaseEntityInfo{}
	return &this
}

// NewDatabaseEntityInfoWithDefaults instantiates a new DatabaseEntityInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseEntityInfoWithDefaults() *DatabaseEntityInfo {
	this := DatabaseEntityInfo{}
	return &this
}

// GetContainerDatabaseInfo returns the ContainerDatabaseInfo field value if set, zero value otherwise.
func (o *DatabaseEntityInfo) GetContainerDatabaseInfo() ContainerDatabaseInfo {
	if o == nil || o.ContainerDatabaseInfo == nil {
		var ret ContainerDatabaseInfo
		return ret
	}
	return *o.ContainerDatabaseInfo
}

// GetContainerDatabaseInfoOk returns a tuple with the ContainerDatabaseInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseEntityInfo) GetContainerDatabaseInfoOk() (*ContainerDatabaseInfo, bool) {
	if o == nil || o.ContainerDatabaseInfo == nil {
		return nil, false
	}
	return o.ContainerDatabaseInfo, true
}

// HasContainerDatabaseInfo returns a boolean if a field has been set.
func (o *DatabaseEntityInfo) HasContainerDatabaseInfo() bool {
	if o != nil && o.ContainerDatabaseInfo != nil {
		return true
	}

	return false
}

// SetContainerDatabaseInfo gets a reference to the given ContainerDatabaseInfo and assigns it to the ContainerDatabaseInfo field.
func (o *DatabaseEntityInfo) SetContainerDatabaseInfo(v ContainerDatabaseInfo) {
	o.ContainerDatabaseInfo = &v
}

// GetDataGuardInfo returns the DataGuardInfo field value if set, zero value otherwise.
func (o *DatabaseEntityInfo) GetDataGuardInfo() OracleDataGuardInfo {
	if o == nil || o.DataGuardInfo == nil {
		var ret OracleDataGuardInfo
		return ret
	}
	return *o.DataGuardInfo
}

// GetDataGuardInfoOk returns a tuple with the DataGuardInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseEntityInfo) GetDataGuardInfoOk() (*OracleDataGuardInfo, bool) {
	if o == nil || o.DataGuardInfo == nil {
		return nil, false
	}
	return o.DataGuardInfo, true
}

// HasDataGuardInfo returns a boolean if a field has been set.
func (o *DatabaseEntityInfo) HasDataGuardInfo() bool {
	if o != nil && o.DataGuardInfo != nil {
		return true
	}

	return false
}

// SetDataGuardInfo gets a reference to the given OracleDataGuardInfo and assigns it to the DataGuardInfo field.
func (o *DatabaseEntityInfo) SetDataGuardInfo(v OracleDataGuardInfo) {
	o.DataGuardInfo = &v
}

func (o DatabaseEntityInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ContainerDatabaseInfo != nil {
		toSerialize["containerDatabaseInfo"] = o.ContainerDatabaseInfo
	}
	if o.DataGuardInfo != nil {
		toSerialize["dataGuardInfo"] = o.DataGuardInfo
	}
	return json.Marshal(toSerialize)
}

type NullableDatabaseEntityInfo struct {
	value *DatabaseEntityInfo
	isSet bool
}

func (v NullableDatabaseEntityInfo) Get() *DatabaseEntityInfo {
	return v.value
}

func (v *NullableDatabaseEntityInfo) Set(val *DatabaseEntityInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseEntityInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseEntityInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseEntityInfo(val *DatabaseEntityInfo) *NullableDatabaseEntityInfo {
	return &NullableDatabaseEntityInfo{value: val, isSet: true}
}

func (v NullableDatabaseEntityInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseEntityInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o DatabaseEntityInfo) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}