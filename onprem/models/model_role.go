/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// Role Specifies a Role.
type Role struct {
	// Specifies the Role name.
	Name NullableString `json:"name"`
	// Specifies the description message for the Role.
	Description NullableString `json:"description,omitempty"`
	// Specifies the list of Privileges of the Role.
	Privileges []string `json:"privileges,omitempty"`
	// Specifies the Role label.
	Label NullableString `json:"label,omitempty"`
	// Specifies the timestamp when the Role is created in milliseconds.
	CreatedTimestampMsecs NullableInt64 `json:"createdTimestampMsecs,omitempty"`
	// Specifies the timestamp when the Role is last updated in milliseconds.
	LastUpdatedTimestampMsecs NullableInt64 `json:"lastUpdatedTimestampMsecs,omitempty"`
	// Specifies if the Role is created by user.
	IsUserCreatedRole NullableBool `json:"isUserCreatedRole,omitempty"`
	// Specifies the list of tenant ids who have access to this Role.
	TenantIds []string `json:"tenantIds,omitempty"`
}

// NewRole instantiates a new Role object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRole(name NullableString) *Role {
	this := Role{}
	this.Name = name
	return &this
}

// NewRoleWithDefaults instantiates a new Role object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleWithDefaults() *Role {
	this := Role{}
	return &this
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Role) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Role) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *Role) SetName(v string) {
	o.Name.Set(&v)
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Role) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Role) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *Role) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *Role) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *Role) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *Role) UnsetDescription() {
	o.Description.Unset()
}

// GetPrivileges returns the Privileges field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Role) GetPrivileges() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Privileges
}

// GetPrivilegesOk returns a tuple with the Privileges field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Role) GetPrivilegesOk() (*[]string, bool) {
	if o == nil || o.Privileges == nil {
		return nil, false
	}
	return &o.Privileges, true
}

// HasPrivileges returns a boolean if a field has been set.
func (o *Role) HasPrivileges() bool {
	if o != nil && o.Privileges != nil {
		return true
	}

	return false
}

// SetPrivileges gets a reference to the given []string and assigns it to the Privileges field.
func (o *Role) SetPrivileges(v []string) {
	o.Privileges = v
}

// GetLabel returns the Label field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Role) GetLabel() string {
	if o == nil || o.Label.Get() == nil {
		var ret string
		return ret
	}
	return *o.Label.Get()
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Role) GetLabelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Label.Get(), o.Label.IsSet()
}

// HasLabel returns a boolean if a field has been set.
func (o *Role) HasLabel() bool {
	if o != nil && o.Label.IsSet() {
		return true
	}

	return false
}

// SetLabel gets a reference to the given NullableString and assigns it to the Label field.
func (o *Role) SetLabel(v string) {
	o.Label.Set(&v)
}
// SetLabelNil sets the value for Label to be an explicit nil
func (o *Role) SetLabelNil() {
	o.Label.Set(nil)
}

// UnsetLabel ensures that no value is present for Label, not even an explicit nil
func (o *Role) UnsetLabel() {
	o.Label.Unset()
}

// GetCreatedTimestampMsecs returns the CreatedTimestampMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Role) GetCreatedTimestampMsecs() int64 {
	if o == nil || o.CreatedTimestampMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.CreatedTimestampMsecs.Get()
}

// GetCreatedTimestampMsecsOk returns a tuple with the CreatedTimestampMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Role) GetCreatedTimestampMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CreatedTimestampMsecs.Get(), o.CreatedTimestampMsecs.IsSet()
}

// HasCreatedTimestampMsecs returns a boolean if a field has been set.
func (o *Role) HasCreatedTimestampMsecs() bool {
	if o != nil && o.CreatedTimestampMsecs.IsSet() {
		return true
	}

	return false
}

// SetCreatedTimestampMsecs gets a reference to the given NullableInt64 and assigns it to the CreatedTimestampMsecs field.
func (o *Role) SetCreatedTimestampMsecs(v int64) {
	o.CreatedTimestampMsecs.Set(&v)
}
// SetCreatedTimestampMsecsNil sets the value for CreatedTimestampMsecs to be an explicit nil
func (o *Role) SetCreatedTimestampMsecsNil() {
	o.CreatedTimestampMsecs.Set(nil)
}

// UnsetCreatedTimestampMsecs ensures that no value is present for CreatedTimestampMsecs, not even an explicit nil
func (o *Role) UnsetCreatedTimestampMsecs() {
	o.CreatedTimestampMsecs.Unset()
}

// GetLastUpdatedTimestampMsecs returns the LastUpdatedTimestampMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Role) GetLastUpdatedTimestampMsecs() int64 {
	if o == nil || o.LastUpdatedTimestampMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LastUpdatedTimestampMsecs.Get()
}

// GetLastUpdatedTimestampMsecsOk returns a tuple with the LastUpdatedTimestampMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Role) GetLastUpdatedTimestampMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastUpdatedTimestampMsecs.Get(), o.LastUpdatedTimestampMsecs.IsSet()
}

// HasLastUpdatedTimestampMsecs returns a boolean if a field has been set.
func (o *Role) HasLastUpdatedTimestampMsecs() bool {
	if o != nil && o.LastUpdatedTimestampMsecs.IsSet() {
		return true
	}

	return false
}

// SetLastUpdatedTimestampMsecs gets a reference to the given NullableInt64 and assigns it to the LastUpdatedTimestampMsecs field.
func (o *Role) SetLastUpdatedTimestampMsecs(v int64) {
	o.LastUpdatedTimestampMsecs.Set(&v)
}
// SetLastUpdatedTimestampMsecsNil sets the value for LastUpdatedTimestampMsecs to be an explicit nil
func (o *Role) SetLastUpdatedTimestampMsecsNil() {
	o.LastUpdatedTimestampMsecs.Set(nil)
}

// UnsetLastUpdatedTimestampMsecs ensures that no value is present for LastUpdatedTimestampMsecs, not even an explicit nil
func (o *Role) UnsetLastUpdatedTimestampMsecs() {
	o.LastUpdatedTimestampMsecs.Unset()
}

// GetIsUserCreatedRole returns the IsUserCreatedRole field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Role) GetIsUserCreatedRole() bool {
	if o == nil || o.IsUserCreatedRole.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsUserCreatedRole.Get()
}

// GetIsUserCreatedRoleOk returns a tuple with the IsUserCreatedRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Role) GetIsUserCreatedRoleOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsUserCreatedRole.Get(), o.IsUserCreatedRole.IsSet()
}

// HasIsUserCreatedRole returns a boolean if a field has been set.
func (o *Role) HasIsUserCreatedRole() bool {
	if o != nil && o.IsUserCreatedRole.IsSet() {
		return true
	}

	return false
}

// SetIsUserCreatedRole gets a reference to the given NullableBool and assigns it to the IsUserCreatedRole field.
func (o *Role) SetIsUserCreatedRole(v bool) {
	o.IsUserCreatedRole.Set(&v)
}
// SetIsUserCreatedRoleNil sets the value for IsUserCreatedRole to be an explicit nil
func (o *Role) SetIsUserCreatedRoleNil() {
	o.IsUserCreatedRole.Set(nil)
}

// UnsetIsUserCreatedRole ensures that no value is present for IsUserCreatedRole, not even an explicit nil
func (o *Role) UnsetIsUserCreatedRole() {
	o.IsUserCreatedRole.Unset()
}

// GetTenantIds returns the TenantIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Role) GetTenantIds() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.TenantIds
}

// GetTenantIdsOk returns a tuple with the TenantIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Role) GetTenantIdsOk() (*[]string, bool) {
	if o == nil || o.TenantIds == nil {
		return nil, false
	}
	return &o.TenantIds, true
}

// HasTenantIds returns a boolean if a field has been set.
func (o *Role) HasTenantIds() bool {
	if o != nil && o.TenantIds != nil {
		return true
	}

	return false
}

// SetTenantIds gets a reference to the given []string and assigns it to the TenantIds field.
func (o *Role) SetTenantIds(v []string) {
	o.TenantIds = v
}

func (o Role) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Privileges != nil {
		toSerialize["privileges"] = o.Privileges
	}
	if o.Label.IsSet() {
		toSerialize["label"] = o.Label.Get()
	}
	if o.CreatedTimestampMsecs.IsSet() {
		toSerialize["createdTimestampMsecs"] = o.CreatedTimestampMsecs.Get()
	}
	if o.LastUpdatedTimestampMsecs.IsSet() {
		toSerialize["lastUpdatedTimestampMsecs"] = o.LastUpdatedTimestampMsecs.Get()
	}
	if o.IsUserCreatedRole.IsSet() {
		toSerialize["isUserCreatedRole"] = o.IsUserCreatedRole.Get()
	}
	if o.TenantIds != nil {
		toSerialize["tenantIds"] = o.TenantIds
	}
	return json.Marshal(toSerialize)
}

type NullableRole struct {
	value *Role
	isSet bool
}

func (v NullableRole) Get() *Role {
	return v.value
}

func (v *NullableRole) Set(val *Role) {
	v.value = val
	v.isSet = true
}

func (v NullableRole) IsSet() bool {
	return v.isSet
}

func (v *NullableRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRole(val *Role) *NullableRole {
	return &NullableRole{value: val, isSet: true}
}

func (v NullableRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o Role) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}