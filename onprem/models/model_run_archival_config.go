/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// RunArchivalConfig Specifies settings for copying Snapshots External Targets (such as AWS or Tape). This also specifies the retention policy that should be applied to Snapshots after they have been copied to the specified target.
type RunArchivalConfig struct {
	// Specifies the Archival target to copy the Snapshots to.
	Id NullableInt64 `json:"id"`
	// Specifies the snapshot's archival target type from which recovery has been performed.
	ArchivalTargetType NullableString `json:"archivalTargetType"`
	Retention *Retention `json:"retention,omitempty"`
}

// NewRunArchivalConfig instantiates a new RunArchivalConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunArchivalConfig(id NullableInt64, archivalTargetType NullableString) *RunArchivalConfig {
	this := RunArchivalConfig{}
	this.Id = id
	this.ArchivalTargetType = archivalTargetType
	return &this
}

// NewRunArchivalConfigWithDefaults instantiates a new RunArchivalConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunArchivalConfigWithDefaults() *RunArchivalConfig {
	this := RunArchivalConfig{}
	return &this
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *RunArchivalConfig) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}

	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RunArchivalConfig) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// SetId sets field value
func (o *RunArchivalConfig) SetId(v int64) {
	o.Id.Set(&v)
}

// GetArchivalTargetType returns the ArchivalTargetType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *RunArchivalConfig) GetArchivalTargetType() string {
	if o == nil || o.ArchivalTargetType.Get() == nil {
		var ret string
		return ret
	}

	return *o.ArchivalTargetType.Get()
}

// GetArchivalTargetTypeOk returns a tuple with the ArchivalTargetType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RunArchivalConfig) GetArchivalTargetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ArchivalTargetType.Get(), o.ArchivalTargetType.IsSet()
}

// SetArchivalTargetType sets field value
func (o *RunArchivalConfig) SetArchivalTargetType(v string) {
	o.ArchivalTargetType.Set(&v)
}

// GetRetention returns the Retention field value if set, zero value otherwise.
func (o *RunArchivalConfig) GetRetention() Retention {
	if o == nil || o.Retention == nil {
		var ret Retention
		return ret
	}
	return *o.Retention
}

// GetRetentionOk returns a tuple with the Retention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunArchivalConfig) GetRetentionOk() (*Retention, bool) {
	if o == nil || o.Retention == nil {
		return nil, false
	}
	return o.Retention, true
}

// HasRetention returns a boolean if a field has been set.
func (o *RunArchivalConfig) HasRetention() bool {
	if o != nil && o.Retention != nil {
		return true
	}

	return false
}

// SetRetention gets a reference to the given Retention and assigns it to the Retention field.
func (o *RunArchivalConfig) SetRetention(v Retention) {
	o.Retention = &v
}

func (o RunArchivalConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id.Get()
	}
	if true {
		toSerialize["archivalTargetType"] = o.ArchivalTargetType.Get()
	}
	if o.Retention != nil {
		toSerialize["retention"] = o.Retention
	}
	return json.Marshal(toSerialize)
}

type NullableRunArchivalConfig struct {
	value *RunArchivalConfig
	isSet bool
}

func (v NullableRunArchivalConfig) Get() *RunArchivalConfig {
	return v.value
}

func (v *NullableRunArchivalConfig) Set(val *RunArchivalConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRunArchivalConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRunArchivalConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunArchivalConfig(val *RunArchivalConfig) *NullableRunArchivalConfig {
	return &NullableRunArchivalConfig{value: val, isSet: true}
}

func (v NullableRunArchivalConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunArchivalConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o RunArchivalConfig) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}