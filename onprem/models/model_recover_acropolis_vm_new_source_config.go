/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// RecoverAcropolisVmNewSourceConfig Specifies the new destination Source configuration where the VMs will be recovered.
type RecoverAcropolisVmNewSourceConfig struct {
	// Specifies the id of the parent source to recover the VMs.
	Source NullableRecoveryObjectIdentifier `json:"source"`
	// A storage container where the VM's files should be restored to.
	StorageContainer NullableRecoveryObjectIdentifier `json:"storageContainer,omitempty"`
	// Specifies the networking configuration to be applied to the recovered VMs.
	NetworkConfig NullableRecoverAcropolisVmNewSourceNetworkConfig `json:"networkConfig,omitempty"`
}

// NewRecoverAcropolisVmNewSourceConfig instantiates a new RecoverAcropolisVmNewSourceConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverAcropolisVmNewSourceConfig(source NullableRecoveryObjectIdentifier) *RecoverAcropolisVmNewSourceConfig {
	this := RecoverAcropolisVmNewSourceConfig{}
	this.Source = source
	return &this
}

// NewRecoverAcropolisVmNewSourceConfigWithDefaults instantiates a new RecoverAcropolisVmNewSourceConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverAcropolisVmNewSourceConfigWithDefaults() *RecoverAcropolisVmNewSourceConfig {
	this := RecoverAcropolisVmNewSourceConfig{}
	return &this
}

// GetSource returns the Source field value
// If the value is explicit nil, the zero value for RecoveryObjectIdentifier will be returned
func (o *RecoverAcropolisVmNewSourceConfig) GetSource() RecoveryObjectIdentifier {
	if o == nil || o.Source.Get() == nil {
		var ret RecoveryObjectIdentifier
		return ret
	}

	return *o.Source.Get()
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAcropolisVmNewSourceConfig) GetSourceOk() (*RecoveryObjectIdentifier, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Source.Get(), o.Source.IsSet()
}

// SetSource sets field value
func (o *RecoverAcropolisVmNewSourceConfig) SetSource(v RecoveryObjectIdentifier) {
	o.Source.Set(&v)
}

// GetStorageContainer returns the StorageContainer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverAcropolisVmNewSourceConfig) GetStorageContainer() RecoveryObjectIdentifier {
	if o == nil || o.StorageContainer.Get() == nil {
		var ret RecoveryObjectIdentifier
		return ret
	}
	return *o.StorageContainer.Get()
}

// GetStorageContainerOk returns a tuple with the StorageContainer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAcropolisVmNewSourceConfig) GetStorageContainerOk() (*RecoveryObjectIdentifier, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageContainer.Get(), o.StorageContainer.IsSet()
}

// HasStorageContainer returns a boolean if a field has been set.
func (o *RecoverAcropolisVmNewSourceConfig) HasStorageContainer() bool {
	if o != nil && o.StorageContainer.IsSet() {
		return true
	}

	return false
}

// SetStorageContainer gets a reference to the given NullableRecoveryObjectIdentifier and assigns it to the StorageContainer field.
func (o *RecoverAcropolisVmNewSourceConfig) SetStorageContainer(v RecoveryObjectIdentifier) {
	o.StorageContainer.Set(&v)
}
// SetStorageContainerNil sets the value for StorageContainer to be an explicit nil
func (o *RecoverAcropolisVmNewSourceConfig) SetStorageContainerNil() {
	o.StorageContainer.Set(nil)
}

// UnsetStorageContainer ensures that no value is present for StorageContainer, not even an explicit nil
func (o *RecoverAcropolisVmNewSourceConfig) UnsetStorageContainer() {
	o.StorageContainer.Unset()
}

// GetNetworkConfig returns the NetworkConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverAcropolisVmNewSourceConfig) GetNetworkConfig() RecoverAcropolisVmNewSourceNetworkConfig {
	if o == nil || o.NetworkConfig.Get() == nil {
		var ret RecoverAcropolisVmNewSourceNetworkConfig
		return ret
	}
	return *o.NetworkConfig.Get()
}

// GetNetworkConfigOk returns a tuple with the NetworkConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAcropolisVmNewSourceConfig) GetNetworkConfigOk() (*RecoverAcropolisVmNewSourceNetworkConfig, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NetworkConfig.Get(), o.NetworkConfig.IsSet()
}

// HasNetworkConfig returns a boolean if a field has been set.
func (o *RecoverAcropolisVmNewSourceConfig) HasNetworkConfig() bool {
	if o != nil && o.NetworkConfig.IsSet() {
		return true
	}

	return false
}

// SetNetworkConfig gets a reference to the given NullableRecoverAcropolisVmNewSourceNetworkConfig and assigns it to the NetworkConfig field.
func (o *RecoverAcropolisVmNewSourceConfig) SetNetworkConfig(v RecoverAcropolisVmNewSourceNetworkConfig) {
	o.NetworkConfig.Set(&v)
}
// SetNetworkConfigNil sets the value for NetworkConfig to be an explicit nil
func (o *RecoverAcropolisVmNewSourceConfig) SetNetworkConfigNil() {
	o.NetworkConfig.Set(nil)
}

// UnsetNetworkConfig ensures that no value is present for NetworkConfig, not even an explicit nil
func (o *RecoverAcropolisVmNewSourceConfig) UnsetNetworkConfig() {
	o.NetworkConfig.Unset()
}

func (o RecoverAcropolisVmNewSourceConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["source"] = o.Source.Get()
	}
	if o.StorageContainer.IsSet() {
		toSerialize["storageContainer"] = o.StorageContainer.Get()
	}
	if o.NetworkConfig.IsSet() {
		toSerialize["networkConfig"] = o.NetworkConfig.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRecoverAcropolisVmNewSourceConfig struct {
	value *RecoverAcropolisVmNewSourceConfig
	isSet bool
}

func (v NullableRecoverAcropolisVmNewSourceConfig) Get() *RecoverAcropolisVmNewSourceConfig {
	return v.value
}

func (v *NullableRecoverAcropolisVmNewSourceConfig) Set(val *RecoverAcropolisVmNewSourceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverAcropolisVmNewSourceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverAcropolisVmNewSourceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverAcropolisVmNewSourceConfig(val *RecoverAcropolisVmNewSourceConfig) *NullableRecoverAcropolisVmNewSourceConfig {
	return &NullableRecoverAcropolisVmNewSourceConfig{value: val, isSet: true}
}

func (v NullableRecoverAcropolisVmNewSourceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverAcropolisVmNewSourceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o RecoverAcropolisVmNewSourceConfig) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}