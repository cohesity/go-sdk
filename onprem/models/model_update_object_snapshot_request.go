/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// UpdateObjectSnapshotRequest Specifies the parameters to update an object snapshot.
type UpdateObjectSnapshotRequest struct {
	// Whether to set the snapshot on legal hold. If set to true, the run cannot be deleted during the retention period.
	SetLegalHold NullableBool `json:"setLegalHold,omitempty"`
	// Specifies the snapshot data lock type.
	DataLockType NullableString `json:"dataLockType,omitempty"`
	// Specifies the expiry time of the snapshot in Unix timestamp epoch in seconds.
	ExpiryTimeSecs NullableInt32 `json:"expiryTimeSecs,omitempty"`
}

// NewUpdateObjectSnapshotRequest instantiates a new UpdateObjectSnapshotRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateObjectSnapshotRequest() *UpdateObjectSnapshotRequest {
	this := UpdateObjectSnapshotRequest{}
	return &this
}

// NewUpdateObjectSnapshotRequestWithDefaults instantiates a new UpdateObjectSnapshotRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateObjectSnapshotRequestWithDefaults() *UpdateObjectSnapshotRequest {
	this := UpdateObjectSnapshotRequest{}
	return &this
}

// GetSetLegalHold returns the SetLegalHold field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateObjectSnapshotRequest) GetSetLegalHold() bool {
	if o == nil || o.SetLegalHold.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SetLegalHold.Get()
}

// GetSetLegalHoldOk returns a tuple with the SetLegalHold field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateObjectSnapshotRequest) GetSetLegalHoldOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SetLegalHold.Get(), o.SetLegalHold.IsSet()
}

// HasSetLegalHold returns a boolean if a field has been set.
func (o *UpdateObjectSnapshotRequest) HasSetLegalHold() bool {
	if o != nil && o.SetLegalHold.IsSet() {
		return true
	}

	return false
}

// SetSetLegalHold gets a reference to the given NullableBool and assigns it to the SetLegalHold field.
func (o *UpdateObjectSnapshotRequest) SetSetLegalHold(v bool) {
	o.SetLegalHold.Set(&v)
}
// SetSetLegalHoldNil sets the value for SetLegalHold to be an explicit nil
func (o *UpdateObjectSnapshotRequest) SetSetLegalHoldNil() {
	o.SetLegalHold.Set(nil)
}

// UnsetSetLegalHold ensures that no value is present for SetLegalHold, not even an explicit nil
func (o *UpdateObjectSnapshotRequest) UnsetSetLegalHold() {
	o.SetLegalHold.Unset()
}

// GetDataLockType returns the DataLockType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateObjectSnapshotRequest) GetDataLockType() string {
	if o == nil || o.DataLockType.Get() == nil {
		var ret string
		return ret
	}
	return *o.DataLockType.Get()
}

// GetDataLockTypeOk returns a tuple with the DataLockType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateObjectSnapshotRequest) GetDataLockTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DataLockType.Get(), o.DataLockType.IsSet()
}

// HasDataLockType returns a boolean if a field has been set.
func (o *UpdateObjectSnapshotRequest) HasDataLockType() bool {
	if o != nil && o.DataLockType.IsSet() {
		return true
	}

	return false
}

// SetDataLockType gets a reference to the given NullableString and assigns it to the DataLockType field.
func (o *UpdateObjectSnapshotRequest) SetDataLockType(v string) {
	o.DataLockType.Set(&v)
}
// SetDataLockTypeNil sets the value for DataLockType to be an explicit nil
func (o *UpdateObjectSnapshotRequest) SetDataLockTypeNil() {
	o.DataLockType.Set(nil)
}

// UnsetDataLockType ensures that no value is present for DataLockType, not even an explicit nil
func (o *UpdateObjectSnapshotRequest) UnsetDataLockType() {
	o.DataLockType.Unset()
}

// GetExpiryTimeSecs returns the ExpiryTimeSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateObjectSnapshotRequest) GetExpiryTimeSecs() int32 {
	if o == nil || o.ExpiryTimeSecs.Get() == nil {
		var ret int32
		return ret
	}
	return *o.ExpiryTimeSecs.Get()
}

// GetExpiryTimeSecsOk returns a tuple with the ExpiryTimeSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateObjectSnapshotRequest) GetExpiryTimeSecsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExpiryTimeSecs.Get(), o.ExpiryTimeSecs.IsSet()
}

// HasExpiryTimeSecs returns a boolean if a field has been set.
func (o *UpdateObjectSnapshotRequest) HasExpiryTimeSecs() bool {
	if o != nil && o.ExpiryTimeSecs.IsSet() {
		return true
	}

	return false
}

// SetExpiryTimeSecs gets a reference to the given NullableInt32 and assigns it to the ExpiryTimeSecs field.
func (o *UpdateObjectSnapshotRequest) SetExpiryTimeSecs(v int32) {
	o.ExpiryTimeSecs.Set(&v)
}
// SetExpiryTimeSecsNil sets the value for ExpiryTimeSecs to be an explicit nil
func (o *UpdateObjectSnapshotRequest) SetExpiryTimeSecsNil() {
	o.ExpiryTimeSecs.Set(nil)
}

// UnsetExpiryTimeSecs ensures that no value is present for ExpiryTimeSecs, not even an explicit nil
func (o *UpdateObjectSnapshotRequest) UnsetExpiryTimeSecs() {
	o.ExpiryTimeSecs.Unset()
}

func (o UpdateObjectSnapshotRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SetLegalHold.IsSet() {
		toSerialize["setLegalHold"] = o.SetLegalHold.Get()
	}
	if o.DataLockType.IsSet() {
		toSerialize["dataLockType"] = o.DataLockType.Get()
	}
	if o.ExpiryTimeSecs.IsSet() {
		toSerialize["expiryTimeSecs"] = o.ExpiryTimeSecs.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateObjectSnapshotRequest struct {
	value *UpdateObjectSnapshotRequest
	isSet bool
}

func (v NullableUpdateObjectSnapshotRequest) Get() *UpdateObjectSnapshotRequest {
	return v.value
}

func (v *NullableUpdateObjectSnapshotRequest) Set(val *UpdateObjectSnapshotRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateObjectSnapshotRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateObjectSnapshotRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateObjectSnapshotRequest(val *UpdateObjectSnapshotRequest) *NullableUpdateObjectSnapshotRequest {
	return &NullableUpdateObjectSnapshotRequest{value: val, isSet: true}
}

func (v NullableUpdateObjectSnapshotRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateObjectSnapshotRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o UpdateObjectSnapshotRequest) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}