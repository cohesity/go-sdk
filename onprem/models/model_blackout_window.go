/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// BlackoutWindow Specifies a time range in a single day when new Protection Group Runs of Protection Groups cannot be started. For example, a Protection Group with a daily schedule could define a blackout period for Sunday.
type BlackoutWindow struct {
	// Specifies a day in the week when no new Protection Group Runs should be started such as 'Sunday'. Specifies a day in a week such as 'Sunday', 'Monday', etc.
	Day NullableString `json:"day"`
	StartTime TimeOfDay `json:"startTime"`
	EndTime TimeOfDay `json:"endTime"`
	// Specifies the unique identifier for the target getting added. This field need to be passed olny when policies are updated.
	ConfigId NullableString `json:"configId,omitempty"`
}

// NewBlackoutWindow instantiates a new BlackoutWindow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlackoutWindow(day NullableString, startTime TimeOfDay, endTime TimeOfDay) *BlackoutWindow {
	this := BlackoutWindow{}
	this.Day = day
	this.StartTime = startTime
	this.EndTime = endTime
	return &this
}

// NewBlackoutWindowWithDefaults instantiates a new BlackoutWindow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlackoutWindowWithDefaults() *BlackoutWindow {
	this := BlackoutWindow{}
	return &this
}

// GetDay returns the Day field value
// If the value is explicit nil, the zero value for string will be returned
func (o *BlackoutWindow) GetDay() string {
	if o == nil || o.Day.Get() == nil {
		var ret string
		return ret
	}

	return *o.Day.Get()
}

// GetDayOk returns a tuple with the Day field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlackoutWindow) GetDayOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Day.Get(), o.Day.IsSet()
}

// SetDay sets field value
func (o *BlackoutWindow) SetDay(v string) {
	o.Day.Set(&v)
}

// GetStartTime returns the StartTime field value
func (o *BlackoutWindow) GetStartTime() TimeOfDay {
	if o == nil {
		var ret TimeOfDay
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *BlackoutWindow) GetStartTimeOk() (*TimeOfDay, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *BlackoutWindow) SetStartTime(v TimeOfDay) {
	o.StartTime = v
}

// GetEndTime returns the EndTime field value
func (o *BlackoutWindow) GetEndTime() TimeOfDay {
	if o == nil {
		var ret TimeOfDay
		return ret
	}

	return o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value
// and a boolean to check if the value has been set.
func (o *BlackoutWindow) GetEndTimeOk() (*TimeOfDay, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EndTime, true
}

// SetEndTime sets field value
func (o *BlackoutWindow) SetEndTime(v TimeOfDay) {
	o.EndTime = v
}

// GetConfigId returns the ConfigId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BlackoutWindow) GetConfigId() string {
	if o == nil || o.ConfigId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ConfigId.Get()
}

// GetConfigIdOk returns a tuple with the ConfigId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BlackoutWindow) GetConfigIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ConfigId.Get(), o.ConfigId.IsSet()
}

// HasConfigId returns a boolean if a field has been set.
func (o *BlackoutWindow) HasConfigId() bool {
	if o != nil && o.ConfigId.IsSet() {
		return true
	}

	return false
}

// SetConfigId gets a reference to the given NullableString and assigns it to the ConfigId field.
func (o *BlackoutWindow) SetConfigId(v string) {
	o.ConfigId.Set(&v)
}
// SetConfigIdNil sets the value for ConfigId to be an explicit nil
func (o *BlackoutWindow) SetConfigIdNil() {
	o.ConfigId.Set(nil)
}

// UnsetConfigId ensures that no value is present for ConfigId, not even an explicit nil
func (o *BlackoutWindow) UnsetConfigId() {
	o.ConfigId.Unset()
}

func (o BlackoutWindow) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["day"] = o.Day.Get()
	}
	if true {
		toSerialize["startTime"] = o.StartTime
	}
	if true {
		toSerialize["endTime"] = o.EndTime
	}
	if o.ConfigId.IsSet() {
		toSerialize["configId"] = o.ConfigId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableBlackoutWindow struct {
	value *BlackoutWindow
	isSet bool
}

func (v NullableBlackoutWindow) Get() *BlackoutWindow {
	return v.value
}

func (v *NullableBlackoutWindow) Set(val *BlackoutWindow) {
	v.value = val
	v.isSet = true
}

func (v NullableBlackoutWindow) IsSet() bool {
	return v.isSet
}

func (v *NullableBlackoutWindow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlackoutWindow(val *BlackoutWindow) *NullableBlackoutWindow {
	return &NullableBlackoutWindow{value: val, isSet: true}
}

func (v NullableBlackoutWindow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlackoutWindow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o BlackoutWindow) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}