/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// OracleRangeMetaInfo Specifies Range related information for an oracle db
type OracleRangeMetaInfo struct {
	// Specifies starting value of the range in time (usecs), SCN or sequence no.
	StartOfRange NullableInt64 `json:"startOfRange,omitempty"`
	// Specifies ending value of the range in time (usecs), SCN or sequence no.
	EndOfRange NullableInt64 `json:"endOfRange,omitempty"`
	// Specifies id of the Protection Group corresponding to this oracle range
	ProtectionGroupId NullableString `json:"protectionGroupId,omitempty"`
	// Specifies resetlogs identifier associated with the oracle range. Only applicable for ranges of type SCN and sequence no.
	ResetLogId NullableInt64 `json:"resetLogId,omitempty"`
	// Specifies incarnation id associated with the oracle db for which the restore range belongs. Only applicable for ranges of type SCN and sequence no.
	IncarnationId NullableInt64 `json:"incarnationId,omitempty"`
}

// NewOracleRangeMetaInfo instantiates a new OracleRangeMetaInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleRangeMetaInfo() *OracleRangeMetaInfo {
	this := OracleRangeMetaInfo{}
	return &this
}

// NewOracleRangeMetaInfoWithDefaults instantiates a new OracleRangeMetaInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleRangeMetaInfoWithDefaults() *OracleRangeMetaInfo {
	this := OracleRangeMetaInfo{}
	return &this
}

// GetStartOfRange returns the StartOfRange field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleRangeMetaInfo) GetStartOfRange() int64 {
	if o == nil || o.StartOfRange.Get() == nil {
		var ret int64
		return ret
	}
	return *o.StartOfRange.Get()
}

// GetStartOfRangeOk returns a tuple with the StartOfRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleRangeMetaInfo) GetStartOfRangeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartOfRange.Get(), o.StartOfRange.IsSet()
}

// HasStartOfRange returns a boolean if a field has been set.
func (o *OracleRangeMetaInfo) HasStartOfRange() bool {
	if o != nil && o.StartOfRange.IsSet() {
		return true
	}

	return false
}

// SetStartOfRange gets a reference to the given NullableInt64 and assigns it to the StartOfRange field.
func (o *OracleRangeMetaInfo) SetStartOfRange(v int64) {
	o.StartOfRange.Set(&v)
}
// SetStartOfRangeNil sets the value for StartOfRange to be an explicit nil
func (o *OracleRangeMetaInfo) SetStartOfRangeNil() {
	o.StartOfRange.Set(nil)
}

// UnsetStartOfRange ensures that no value is present for StartOfRange, not even an explicit nil
func (o *OracleRangeMetaInfo) UnsetStartOfRange() {
	o.StartOfRange.Unset()
}

// GetEndOfRange returns the EndOfRange field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleRangeMetaInfo) GetEndOfRange() int64 {
	if o == nil || o.EndOfRange.Get() == nil {
		var ret int64
		return ret
	}
	return *o.EndOfRange.Get()
}

// GetEndOfRangeOk returns a tuple with the EndOfRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleRangeMetaInfo) GetEndOfRangeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EndOfRange.Get(), o.EndOfRange.IsSet()
}

// HasEndOfRange returns a boolean if a field has been set.
func (o *OracleRangeMetaInfo) HasEndOfRange() bool {
	if o != nil && o.EndOfRange.IsSet() {
		return true
	}

	return false
}

// SetEndOfRange gets a reference to the given NullableInt64 and assigns it to the EndOfRange field.
func (o *OracleRangeMetaInfo) SetEndOfRange(v int64) {
	o.EndOfRange.Set(&v)
}
// SetEndOfRangeNil sets the value for EndOfRange to be an explicit nil
func (o *OracleRangeMetaInfo) SetEndOfRangeNil() {
	o.EndOfRange.Set(nil)
}

// UnsetEndOfRange ensures that no value is present for EndOfRange, not even an explicit nil
func (o *OracleRangeMetaInfo) UnsetEndOfRange() {
	o.EndOfRange.Unset()
}

// GetProtectionGroupId returns the ProtectionGroupId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleRangeMetaInfo) GetProtectionGroupId() string {
	if o == nil || o.ProtectionGroupId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProtectionGroupId.Get()
}

// GetProtectionGroupIdOk returns a tuple with the ProtectionGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleRangeMetaInfo) GetProtectionGroupIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProtectionGroupId.Get(), o.ProtectionGroupId.IsSet()
}

// HasProtectionGroupId returns a boolean if a field has been set.
func (o *OracleRangeMetaInfo) HasProtectionGroupId() bool {
	if o != nil && o.ProtectionGroupId.IsSet() {
		return true
	}

	return false
}

// SetProtectionGroupId gets a reference to the given NullableString and assigns it to the ProtectionGroupId field.
func (o *OracleRangeMetaInfo) SetProtectionGroupId(v string) {
	o.ProtectionGroupId.Set(&v)
}
// SetProtectionGroupIdNil sets the value for ProtectionGroupId to be an explicit nil
func (o *OracleRangeMetaInfo) SetProtectionGroupIdNil() {
	o.ProtectionGroupId.Set(nil)
}

// UnsetProtectionGroupId ensures that no value is present for ProtectionGroupId, not even an explicit nil
func (o *OracleRangeMetaInfo) UnsetProtectionGroupId() {
	o.ProtectionGroupId.Unset()
}

// GetResetLogId returns the ResetLogId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleRangeMetaInfo) GetResetLogId() int64 {
	if o == nil || o.ResetLogId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ResetLogId.Get()
}

// GetResetLogIdOk returns a tuple with the ResetLogId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleRangeMetaInfo) GetResetLogIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ResetLogId.Get(), o.ResetLogId.IsSet()
}

// HasResetLogId returns a boolean if a field has been set.
func (o *OracleRangeMetaInfo) HasResetLogId() bool {
	if o != nil && o.ResetLogId.IsSet() {
		return true
	}

	return false
}

// SetResetLogId gets a reference to the given NullableInt64 and assigns it to the ResetLogId field.
func (o *OracleRangeMetaInfo) SetResetLogId(v int64) {
	o.ResetLogId.Set(&v)
}
// SetResetLogIdNil sets the value for ResetLogId to be an explicit nil
func (o *OracleRangeMetaInfo) SetResetLogIdNil() {
	o.ResetLogId.Set(nil)
}

// UnsetResetLogId ensures that no value is present for ResetLogId, not even an explicit nil
func (o *OracleRangeMetaInfo) UnsetResetLogId() {
	o.ResetLogId.Unset()
}

// GetIncarnationId returns the IncarnationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleRangeMetaInfo) GetIncarnationId() int64 {
	if o == nil || o.IncarnationId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.IncarnationId.Get()
}

// GetIncarnationIdOk returns a tuple with the IncarnationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleRangeMetaInfo) GetIncarnationIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IncarnationId.Get(), o.IncarnationId.IsSet()
}

// HasIncarnationId returns a boolean if a field has been set.
func (o *OracleRangeMetaInfo) HasIncarnationId() bool {
	if o != nil && o.IncarnationId.IsSet() {
		return true
	}

	return false
}

// SetIncarnationId gets a reference to the given NullableInt64 and assigns it to the IncarnationId field.
func (o *OracleRangeMetaInfo) SetIncarnationId(v int64) {
	o.IncarnationId.Set(&v)
}
// SetIncarnationIdNil sets the value for IncarnationId to be an explicit nil
func (o *OracleRangeMetaInfo) SetIncarnationIdNil() {
	o.IncarnationId.Set(nil)
}

// UnsetIncarnationId ensures that no value is present for IncarnationId, not even an explicit nil
func (o *OracleRangeMetaInfo) UnsetIncarnationId() {
	o.IncarnationId.Unset()
}

func (o OracleRangeMetaInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.StartOfRange.IsSet() {
		toSerialize["startOfRange"] = o.StartOfRange.Get()
	}
	if o.EndOfRange.IsSet() {
		toSerialize["endOfRange"] = o.EndOfRange.Get()
	}
	if o.ProtectionGroupId.IsSet() {
		toSerialize["protectionGroupId"] = o.ProtectionGroupId.Get()
	}
	if o.ResetLogId.IsSet() {
		toSerialize["resetLogId"] = o.ResetLogId.Get()
	}
	if o.IncarnationId.IsSet() {
		toSerialize["incarnationId"] = o.IncarnationId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableOracleRangeMetaInfo struct {
	value *OracleRangeMetaInfo
	isSet bool
}

func (v NullableOracleRangeMetaInfo) Get() *OracleRangeMetaInfo {
	return v.value
}

func (v *NullableOracleRangeMetaInfo) Set(val *OracleRangeMetaInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleRangeMetaInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleRangeMetaInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleRangeMetaInfo(val *OracleRangeMetaInfo) *NullableOracleRangeMetaInfo {
	return &NullableOracleRangeMetaInfo{value: val, isSet: true}
}

func (v NullableOracleRangeMetaInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleRangeMetaInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o OracleRangeMetaInfo) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}