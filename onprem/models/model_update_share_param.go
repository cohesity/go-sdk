/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// UpdateShareParam Specifies the parameter to update a Share.
type UpdateShareParam struct {
	// Specifies if Filer Audit Logging is enabled for this view.
	EnableFilerAuditLogging NullableBool `json:"enableFilerAuditLogging,omitempty"`
	// SMB config for the alias (share).
	SmbConfig *AliasSmbConfig `json:"smbConfig,omitempty"`
	// List of external client subnet IPs that are allowed to access the share.
	ClientSubnetWhitelist []Subnet `json:"clientSubnetWhitelist,omitempty"`
}

// NewUpdateShareParam instantiates a new UpdateShareParam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateShareParam() *UpdateShareParam {
	this := UpdateShareParam{}
	return &this
}

// NewUpdateShareParamWithDefaults instantiates a new UpdateShareParam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateShareParamWithDefaults() *UpdateShareParam {
	this := UpdateShareParam{}
	return &this
}

// GetEnableFilerAuditLogging returns the EnableFilerAuditLogging field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateShareParam) GetEnableFilerAuditLogging() bool {
	if o == nil || o.EnableFilerAuditLogging.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableFilerAuditLogging.Get()
}

// GetEnableFilerAuditLoggingOk returns a tuple with the EnableFilerAuditLogging field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateShareParam) GetEnableFilerAuditLoggingOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableFilerAuditLogging.Get(), o.EnableFilerAuditLogging.IsSet()
}

// HasEnableFilerAuditLogging returns a boolean if a field has been set.
func (o *UpdateShareParam) HasEnableFilerAuditLogging() bool {
	if o != nil && o.EnableFilerAuditLogging.IsSet() {
		return true
	}

	return false
}

// SetEnableFilerAuditLogging gets a reference to the given NullableBool and assigns it to the EnableFilerAuditLogging field.
func (o *UpdateShareParam) SetEnableFilerAuditLogging(v bool) {
	o.EnableFilerAuditLogging.Set(&v)
}
// SetEnableFilerAuditLoggingNil sets the value for EnableFilerAuditLogging to be an explicit nil
func (o *UpdateShareParam) SetEnableFilerAuditLoggingNil() {
	o.EnableFilerAuditLogging.Set(nil)
}

// UnsetEnableFilerAuditLogging ensures that no value is present for EnableFilerAuditLogging, not even an explicit nil
func (o *UpdateShareParam) UnsetEnableFilerAuditLogging() {
	o.EnableFilerAuditLogging.Unset()
}

// GetSmbConfig returns the SmbConfig field value if set, zero value otherwise.
func (o *UpdateShareParam) GetSmbConfig() AliasSmbConfig {
	if o == nil || o.SmbConfig == nil {
		var ret AliasSmbConfig
		return ret
	}
	return *o.SmbConfig
}

// GetSmbConfigOk returns a tuple with the SmbConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateShareParam) GetSmbConfigOk() (*AliasSmbConfig, bool) {
	if o == nil || o.SmbConfig == nil {
		return nil, false
	}
	return o.SmbConfig, true
}

// HasSmbConfig returns a boolean if a field has been set.
func (o *UpdateShareParam) HasSmbConfig() bool {
	if o != nil && o.SmbConfig != nil {
		return true
	}

	return false
}

// SetSmbConfig gets a reference to the given AliasSmbConfig and assigns it to the SmbConfig field.
func (o *UpdateShareParam) SetSmbConfig(v AliasSmbConfig) {
	o.SmbConfig = &v
}

// GetClientSubnetWhitelist returns the ClientSubnetWhitelist field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateShareParam) GetClientSubnetWhitelist() []Subnet {
	if o == nil  {
		var ret []Subnet
		return ret
	}
	return o.ClientSubnetWhitelist
}

// GetClientSubnetWhitelistOk returns a tuple with the ClientSubnetWhitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateShareParam) GetClientSubnetWhitelistOk() (*[]Subnet, bool) {
	if o == nil || o.ClientSubnetWhitelist == nil {
		return nil, false
	}
	return &o.ClientSubnetWhitelist, true
}

// HasClientSubnetWhitelist returns a boolean if a field has been set.
func (o *UpdateShareParam) HasClientSubnetWhitelist() bool {
	if o != nil && o.ClientSubnetWhitelist != nil {
		return true
	}

	return false
}

// SetClientSubnetWhitelist gets a reference to the given []Subnet and assigns it to the ClientSubnetWhitelist field.
func (o *UpdateShareParam) SetClientSubnetWhitelist(v []Subnet) {
	o.ClientSubnetWhitelist = v
}

func (o UpdateShareParam) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EnableFilerAuditLogging.IsSet() {
		toSerialize["enableFilerAuditLogging"] = o.EnableFilerAuditLogging.Get()
	}
	if o.SmbConfig != nil {
		toSerialize["smbConfig"] = o.SmbConfig
	}
	if o.ClientSubnetWhitelist != nil {
		toSerialize["clientSubnetWhitelist"] = o.ClientSubnetWhitelist
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateShareParam struct {
	value *UpdateShareParam
	isSet bool
}

func (v NullableUpdateShareParam) Get() *UpdateShareParam {
	return v.value
}

func (v *NullableUpdateShareParam) Set(val *UpdateShareParam) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateShareParam) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateShareParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateShareParam(val *UpdateShareParam) *NullableUpdateShareParam {
	return &NullableUpdateShareParam{value: val, isSet: true}
}

func (v NullableUpdateShareParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateShareParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o UpdateShareParam) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}