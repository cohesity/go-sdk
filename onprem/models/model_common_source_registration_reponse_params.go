/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// CommonSourceRegistrationReponseParams Specifies the parameters which are common between all Protection Source registrations.
type CommonSourceRegistrationReponseParams struct {
	// Source Registration ID. This can be used to retrieve, edit or delete the source registration.
	Id NullableInt64 `json:"id,omitempty"`
	// ID of top level source object discovered after the registration.
	SourceId NullableInt64 `json:"sourceId,omitempty"`
	SourceInfo *Object `json:"sourceInfo,omitempty"`
	// Specifies the environment type of the Protection Source.
	Environment NullableString `json:"environment,omitempty"`
	// Specifies the id of the connection from where this source is reachable. This should only be set for a source being registered by a tenant user. This field will be depricated in future. Use connections field.
	ConnectionId NullableInt64 `json:"connectionId,omitempty"`
	// Specfies the list of connections for the source.
	Connections []ConnectionConfig `json:"connections,omitempty"`
}

// NewCommonSourceRegistrationReponseParams instantiates a new CommonSourceRegistrationReponseParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonSourceRegistrationReponseParams() *CommonSourceRegistrationReponseParams {
	this := CommonSourceRegistrationReponseParams{}
	return &this
}

// NewCommonSourceRegistrationReponseParamsWithDefaults instantiates a new CommonSourceRegistrationReponseParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonSourceRegistrationReponseParamsWithDefaults() *CommonSourceRegistrationReponseParams {
	this := CommonSourceRegistrationReponseParams{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonSourceRegistrationReponseParams) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonSourceRegistrationReponseParams) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *CommonSourceRegistrationReponseParams) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *CommonSourceRegistrationReponseParams) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *CommonSourceRegistrationReponseParams) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *CommonSourceRegistrationReponseParams) UnsetId() {
	o.Id.Unset()
}

// GetSourceId returns the SourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonSourceRegistrationReponseParams) GetSourceId() int64 {
	if o == nil || o.SourceId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SourceId.Get()
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonSourceRegistrationReponseParams) GetSourceIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceId.Get(), o.SourceId.IsSet()
}

// HasSourceId returns a boolean if a field has been set.
func (o *CommonSourceRegistrationReponseParams) HasSourceId() bool {
	if o != nil && o.SourceId.IsSet() {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given NullableInt64 and assigns it to the SourceId field.
func (o *CommonSourceRegistrationReponseParams) SetSourceId(v int64) {
	o.SourceId.Set(&v)
}
// SetSourceIdNil sets the value for SourceId to be an explicit nil
func (o *CommonSourceRegistrationReponseParams) SetSourceIdNil() {
	o.SourceId.Set(nil)
}

// UnsetSourceId ensures that no value is present for SourceId, not even an explicit nil
func (o *CommonSourceRegistrationReponseParams) UnsetSourceId() {
	o.SourceId.Unset()
}

// GetSourceInfo returns the SourceInfo field value if set, zero value otherwise.
func (o *CommonSourceRegistrationReponseParams) GetSourceInfo() Object {
	if o == nil || o.SourceInfo == nil {
		var ret Object
		return ret
	}
	return *o.SourceInfo
}

// GetSourceInfoOk returns a tuple with the SourceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonSourceRegistrationReponseParams) GetSourceInfoOk() (*Object, bool) {
	if o == nil || o.SourceInfo == nil {
		return nil, false
	}
	return o.SourceInfo, true
}

// HasSourceInfo returns a boolean if a field has been set.
func (o *CommonSourceRegistrationReponseParams) HasSourceInfo() bool {
	if o != nil && o.SourceInfo != nil {
		return true
	}

	return false
}

// SetSourceInfo gets a reference to the given Object and assigns it to the SourceInfo field.
func (o *CommonSourceRegistrationReponseParams) SetSourceInfo(v Object) {
	o.SourceInfo = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonSourceRegistrationReponseParams) GetEnvironment() string {
	if o == nil || o.Environment.Get() == nil {
		var ret string
		return ret
	}
	return *o.Environment.Get()
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonSourceRegistrationReponseParams) GetEnvironmentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Environment.Get(), o.Environment.IsSet()
}

// HasEnvironment returns a boolean if a field has been set.
func (o *CommonSourceRegistrationReponseParams) HasEnvironment() bool {
	if o != nil && o.Environment.IsSet() {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given NullableString and assigns it to the Environment field.
func (o *CommonSourceRegistrationReponseParams) SetEnvironment(v string) {
	o.Environment.Set(&v)
}
// SetEnvironmentNil sets the value for Environment to be an explicit nil
func (o *CommonSourceRegistrationReponseParams) SetEnvironmentNil() {
	o.Environment.Set(nil)
}

// UnsetEnvironment ensures that no value is present for Environment, not even an explicit nil
func (o *CommonSourceRegistrationReponseParams) UnsetEnvironment() {
	o.Environment.Unset()
}

// GetConnectionId returns the ConnectionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonSourceRegistrationReponseParams) GetConnectionId() int64 {
	if o == nil || o.ConnectionId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ConnectionId.Get()
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonSourceRegistrationReponseParams) GetConnectionIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ConnectionId.Get(), o.ConnectionId.IsSet()
}

// HasConnectionId returns a boolean if a field has been set.
func (o *CommonSourceRegistrationReponseParams) HasConnectionId() bool {
	if o != nil && o.ConnectionId.IsSet() {
		return true
	}

	return false
}

// SetConnectionId gets a reference to the given NullableInt64 and assigns it to the ConnectionId field.
func (o *CommonSourceRegistrationReponseParams) SetConnectionId(v int64) {
	o.ConnectionId.Set(&v)
}
// SetConnectionIdNil sets the value for ConnectionId to be an explicit nil
func (o *CommonSourceRegistrationReponseParams) SetConnectionIdNil() {
	o.ConnectionId.Set(nil)
}

// UnsetConnectionId ensures that no value is present for ConnectionId, not even an explicit nil
func (o *CommonSourceRegistrationReponseParams) UnsetConnectionId() {
	o.ConnectionId.Unset()
}

// GetConnections returns the Connections field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonSourceRegistrationReponseParams) GetConnections() []ConnectionConfig {
	if o == nil  {
		var ret []ConnectionConfig
		return ret
	}
	return o.Connections
}

// GetConnectionsOk returns a tuple with the Connections field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonSourceRegistrationReponseParams) GetConnectionsOk() (*[]ConnectionConfig, bool) {
	if o == nil || o.Connections == nil {
		return nil, false
	}
	return &o.Connections, true
}

// HasConnections returns a boolean if a field has been set.
func (o *CommonSourceRegistrationReponseParams) HasConnections() bool {
	if o != nil && o.Connections != nil {
		return true
	}

	return false
}

// SetConnections gets a reference to the given []ConnectionConfig and assigns it to the Connections field.
func (o *CommonSourceRegistrationReponseParams) SetConnections(v []ConnectionConfig) {
	o.Connections = v
}

func (o CommonSourceRegistrationReponseParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.SourceId.IsSet() {
		toSerialize["sourceId"] = o.SourceId.Get()
	}
	if o.SourceInfo != nil {
		toSerialize["sourceInfo"] = o.SourceInfo
	}
	if o.Environment.IsSet() {
		toSerialize["environment"] = o.Environment.Get()
	}
	if o.ConnectionId.IsSet() {
		toSerialize["connectionId"] = o.ConnectionId.Get()
	}
	if o.Connections != nil {
		toSerialize["connections"] = o.Connections
	}
	return json.Marshal(toSerialize)
}

type NullableCommonSourceRegistrationReponseParams struct {
	value *CommonSourceRegistrationReponseParams
	isSet bool
}

func (v NullableCommonSourceRegistrationReponseParams) Get() *CommonSourceRegistrationReponseParams {
	return v.value
}

func (v *NullableCommonSourceRegistrationReponseParams) Set(val *CommonSourceRegistrationReponseParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonSourceRegistrationReponseParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonSourceRegistrationReponseParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonSourceRegistrationReponseParams(val *CommonSourceRegistrationReponseParams) *NullableCommonSourceRegistrationReponseParams {
	return &NullableCommonSourceRegistrationReponseParams{value: val, isSet: true}
}

func (v NullableCommonSourceRegistrationReponseParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonSourceRegistrationReponseParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o CommonSourceRegistrationReponseParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}