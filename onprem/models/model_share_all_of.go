/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// ShareAllOf struct for ShareAllOf
type ShareAllOf struct {
	// Specifies the Share name.
	Name NullableString `json:"name"`
	// Specifies the View name of this Share.
	ViewName NullableString `json:"viewName"`
	// Specifies the View path of this Share.
	ViewPath NullableString `json:"viewPath"`
	// Specifies the path for mounting this Share as an NFS share. If Kerberos Provider has multiple hostaliases, each host alias has its own path.
	NfsMountPaths []string `json:"nfsMountPaths,omitempty"`
	// Specifies the possible paths that can be used to mount this Share as a SMB share. If Active Directory has multiple account names, each machine account has its own path.
	SmbMountPaths []string `json:"smbMountPaths,omitempty"`
	// Specifies the path to access this Share as an S3 share.
	S3AccessPath NullableString `json:"s3AccessPath,omitempty"`
	// Specifies the tenant id who has access to this Share.
	TenantId NullableString `json:"tenantId,omitempty"`
}

// NewShareAllOf instantiates a new ShareAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShareAllOf(name NullableString, viewName NullableString, viewPath NullableString) *ShareAllOf {
	this := ShareAllOf{}
	this.Name = name
	this.ViewName = viewName
	this.ViewPath = viewPath
	return &this
}

// NewShareAllOfWithDefaults instantiates a new ShareAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShareAllOfWithDefaults() *ShareAllOf {
	this := ShareAllOf{}
	return &this
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ShareAllOf) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShareAllOf) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *ShareAllOf) SetName(v string) {
	o.Name.Set(&v)
}

// GetViewName returns the ViewName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ShareAllOf) GetViewName() string {
	if o == nil || o.ViewName.Get() == nil {
		var ret string
		return ret
	}

	return *o.ViewName.Get()
}

// GetViewNameOk returns a tuple with the ViewName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShareAllOf) GetViewNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewName.Get(), o.ViewName.IsSet()
}

// SetViewName sets field value
func (o *ShareAllOf) SetViewName(v string) {
	o.ViewName.Set(&v)
}

// GetViewPath returns the ViewPath field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ShareAllOf) GetViewPath() string {
	if o == nil || o.ViewPath.Get() == nil {
		var ret string
		return ret
	}

	return *o.ViewPath.Get()
}

// GetViewPathOk returns a tuple with the ViewPath field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShareAllOf) GetViewPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewPath.Get(), o.ViewPath.IsSet()
}

// SetViewPath sets field value
func (o *ShareAllOf) SetViewPath(v string) {
	o.ViewPath.Set(&v)
}

// GetNfsMountPaths returns the NfsMountPaths field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ShareAllOf) GetNfsMountPaths() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.NfsMountPaths
}

// GetNfsMountPathsOk returns a tuple with the NfsMountPaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShareAllOf) GetNfsMountPathsOk() (*[]string, bool) {
	if o == nil || o.NfsMountPaths == nil {
		return nil, false
	}
	return &o.NfsMountPaths, true
}

// HasNfsMountPaths returns a boolean if a field has been set.
func (o *ShareAllOf) HasNfsMountPaths() bool {
	if o != nil && o.NfsMountPaths != nil {
		return true
	}

	return false
}

// SetNfsMountPaths gets a reference to the given []string and assigns it to the NfsMountPaths field.
func (o *ShareAllOf) SetNfsMountPaths(v []string) {
	o.NfsMountPaths = v
}

// GetSmbMountPaths returns the SmbMountPaths field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ShareAllOf) GetSmbMountPaths() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.SmbMountPaths
}

// GetSmbMountPathsOk returns a tuple with the SmbMountPaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShareAllOf) GetSmbMountPathsOk() (*[]string, bool) {
	if o == nil || o.SmbMountPaths == nil {
		return nil, false
	}
	return &o.SmbMountPaths, true
}

// HasSmbMountPaths returns a boolean if a field has been set.
func (o *ShareAllOf) HasSmbMountPaths() bool {
	if o != nil && o.SmbMountPaths != nil {
		return true
	}

	return false
}

// SetSmbMountPaths gets a reference to the given []string and assigns it to the SmbMountPaths field.
func (o *ShareAllOf) SetSmbMountPaths(v []string) {
	o.SmbMountPaths = v
}

// GetS3AccessPath returns the S3AccessPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ShareAllOf) GetS3AccessPath() string {
	if o == nil || o.S3AccessPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.S3AccessPath.Get()
}

// GetS3AccessPathOk returns a tuple with the S3AccessPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShareAllOf) GetS3AccessPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.S3AccessPath.Get(), o.S3AccessPath.IsSet()
}

// HasS3AccessPath returns a boolean if a field has been set.
func (o *ShareAllOf) HasS3AccessPath() bool {
	if o != nil && o.S3AccessPath.IsSet() {
		return true
	}

	return false
}

// SetS3AccessPath gets a reference to the given NullableString and assigns it to the S3AccessPath field.
func (o *ShareAllOf) SetS3AccessPath(v string) {
	o.S3AccessPath.Set(&v)
}
// SetS3AccessPathNil sets the value for S3AccessPath to be an explicit nil
func (o *ShareAllOf) SetS3AccessPathNil() {
	o.S3AccessPath.Set(nil)
}

// UnsetS3AccessPath ensures that no value is present for S3AccessPath, not even an explicit nil
func (o *ShareAllOf) UnsetS3AccessPath() {
	o.S3AccessPath.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ShareAllOf) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShareAllOf) GetTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *ShareAllOf) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *ShareAllOf) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *ShareAllOf) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *ShareAllOf) UnsetTenantId() {
	o.TenantId.Unset()
}

func (o ShareAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name.Get()
	}
	if true {
		toSerialize["viewName"] = o.ViewName.Get()
	}
	if true {
		toSerialize["viewPath"] = o.ViewPath.Get()
	}
	if o.NfsMountPaths != nil {
		toSerialize["nfsMountPaths"] = o.NfsMountPaths
	}
	if o.SmbMountPaths != nil {
		toSerialize["smbMountPaths"] = o.SmbMountPaths
	}
	if o.S3AccessPath.IsSet() {
		toSerialize["s3AccessPath"] = o.S3AccessPath.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableShareAllOf struct {
	value *ShareAllOf
	isSet bool
}

func (v NullableShareAllOf) Get() *ShareAllOf {
	return v.value
}

func (v *NullableShareAllOf) Set(val *ShareAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableShareAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableShareAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShareAllOf(val *ShareAllOf) *NullableShareAllOf {
	return &NullableShareAllOf{value: val, isSet: true}
}

func (v NullableShareAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShareAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o ShareAllOf) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}