/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// DataLockConfig Specifies WORM retention type for the snapshots. When a WORM retention type is specified, the snapshots of the Protection Groups using this policy will be kept for the last N days as specified in the duration of the datalock. During that time, the snapshots cannot be deleted.
type DataLockConfig struct {
	// Specifies the type of WORM retention type.  'Compliance' implies WORM retention is set for compliance reason.  'Administrative' implies WORM retention is set for administrative purposes.
	Mode NullableString `json:"mode"`
	// Specificies the Retention Unit of a dataLock measured in days, months or years. <br> If unit is 'Months', then number specified in duration is multiplied to 30. <br> Example: If duration is 4 and unit is 'Months' then number of retention days will be 30 * 4 = 120 days. <br> If unit is 'Years', then number specified in duration is multiplied to 365. <br> If duration is 2 and unit is 'Months' then number of retention days will be 365 * 2 = 730 days.
	Unit NullableString `json:"unit"`
	// Specifies the duration for a dataLock. <br> Example. If duration is 7 and unit is Months, the dataLock is enabled for last 7 * 30 = 210 days of the backup.
	Duration NullableInt64 `json:"duration"`
}

// NewDataLockConfig instantiates a new DataLockConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataLockConfig(mode NullableString, unit NullableString, duration NullableInt64) *DataLockConfig {
	this := DataLockConfig{}
	this.Mode = mode
	this.Unit = unit
	this.Duration = duration
	return &this
}

// NewDataLockConfigWithDefaults instantiates a new DataLockConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataLockConfigWithDefaults() *DataLockConfig {
	this := DataLockConfig{}
	return &this
}

// GetMode returns the Mode field value
// If the value is explicit nil, the zero value for string will be returned
func (o *DataLockConfig) GetMode() string {
	if o == nil || o.Mode.Get() == nil {
		var ret string
		return ret
	}

	return *o.Mode.Get()
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataLockConfig) GetModeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Mode.Get(), o.Mode.IsSet()
}

// SetMode sets field value
func (o *DataLockConfig) SetMode(v string) {
	o.Mode.Set(&v)
}

// GetUnit returns the Unit field value
// If the value is explicit nil, the zero value for string will be returned
func (o *DataLockConfig) GetUnit() string {
	if o == nil || o.Unit.Get() == nil {
		var ret string
		return ret
	}

	return *o.Unit.Get()
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataLockConfig) GetUnitOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Unit.Get(), o.Unit.IsSet()
}

// SetUnit sets field value
func (o *DataLockConfig) SetUnit(v string) {
	o.Unit.Set(&v)
}

// GetDuration returns the Duration field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *DataLockConfig) GetDuration() int64 {
	if o == nil || o.Duration.Get() == nil {
		var ret int64
		return ret
	}

	return *o.Duration.Get()
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataLockConfig) GetDurationOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Duration.Get(), o.Duration.IsSet()
}

// SetDuration sets field value
func (o *DataLockConfig) SetDuration(v int64) {
	o.Duration.Set(&v)
}

func (o DataLockConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["mode"] = o.Mode.Get()
	}
	if true {
		toSerialize["unit"] = o.Unit.Get()
	}
	if true {
		toSerialize["duration"] = o.Duration.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDataLockConfig struct {
	value *DataLockConfig
	isSet bool
}

func (v NullableDataLockConfig) Get() *DataLockConfig {
	return v.value
}

func (v *NullableDataLockConfig) Set(val *DataLockConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableDataLockConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableDataLockConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataLockConfig(val *DataLockConfig) *NullableDataLockConfig {
	return &NullableDataLockConfig{value: val, isSet: true}
}

func (v NullableDataLockConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataLockConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o DataLockConfig) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}