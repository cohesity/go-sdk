/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// ObjectActionRequest Specifies the request to peform an action on an Object.
type ObjectActionRequest struct {
	// Specifies the environment type of the Object.
	Environment NullableString `json:"environment"`
	VmwareParams *VmwareObjectActionParams `json:"vmwareParams,omitempty"`
}

// NewObjectActionRequest instantiates a new ObjectActionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectActionRequest(environment NullableString) *ObjectActionRequest {
	this := ObjectActionRequest{}
	this.Environment = environment
	return &this
}

// NewObjectActionRequestWithDefaults instantiates a new ObjectActionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectActionRequestWithDefaults() *ObjectActionRequest {
	this := ObjectActionRequest{}
	return &this
}

// GetEnvironment returns the Environment field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ObjectActionRequest) GetEnvironment() string {
	if o == nil || o.Environment.Get() == nil {
		var ret string
		return ret
	}

	return *o.Environment.Get()
}

// GetEnvironmentOk returns a tuple with the Environment field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectActionRequest) GetEnvironmentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Environment.Get(), o.Environment.IsSet()
}

// SetEnvironment sets field value
func (o *ObjectActionRequest) SetEnvironment(v string) {
	o.Environment.Set(&v)
}

// GetVmwareParams returns the VmwareParams field value if set, zero value otherwise.
func (o *ObjectActionRequest) GetVmwareParams() VmwareObjectActionParams {
	if o == nil || o.VmwareParams == nil {
		var ret VmwareObjectActionParams
		return ret
	}
	return *o.VmwareParams
}

// GetVmwareParamsOk returns a tuple with the VmwareParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectActionRequest) GetVmwareParamsOk() (*VmwareObjectActionParams, bool) {
	if o == nil || o.VmwareParams == nil {
		return nil, false
	}
	return o.VmwareParams, true
}

// HasVmwareParams returns a boolean if a field has been set.
func (o *ObjectActionRequest) HasVmwareParams() bool {
	if o != nil && o.VmwareParams != nil {
		return true
	}

	return false
}

// SetVmwareParams gets a reference to the given VmwareObjectActionParams and assigns it to the VmwareParams field.
func (o *ObjectActionRequest) SetVmwareParams(v VmwareObjectActionParams) {
	o.VmwareParams = &v
}

func (o ObjectActionRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["environment"] = o.Environment.Get()
	}
	if o.VmwareParams != nil {
		toSerialize["vmwareParams"] = o.VmwareParams
	}
	return json.Marshal(toSerialize)
}

type NullableObjectActionRequest struct {
	value *ObjectActionRequest
	isSet bool
}

func (v NullableObjectActionRequest) Get() *ObjectActionRequest {
	return v.value
}

func (v *NullableObjectActionRequest) Set(val *ObjectActionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectActionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectActionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectActionRequest(val *ObjectActionRequest) *NullableObjectActionRequest {
	return &NullableObjectActionRequest{value: val, isSet: true}
}

func (v NullableObjectActionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectActionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o ObjectActionRequest) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}