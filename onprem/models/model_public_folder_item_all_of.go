/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// PublicFolderItemAllOf struct for PublicFolderItemAllOf
type PublicFolderItemAllOf struct {
	// Specifies the Public folder item type.
	Type NullableString `json:"type,omitempty"`
	// Specifies the id of the indexed item.
	Id NullableString `json:"id,omitempty"`
	// Specifies the subject of the indexed item.
	Subject NullableString `json:"subject,omitempty"`
	// Specifies whether the item has any attachments
	HasAttachments NullableBool `json:"hasAttachments,omitempty"`
	// Specifies the item class of the indexed item.
	ItemClass NullableString `json:"itemClass,omitempty"`
	// Specifies the Unix timestamp epoch in seconds at which this item is received.
	ReceivedTimeSecs NullableInt64 `json:"receivedTimeSecs,omitempty"`
	// Specifies the size in bytes for the indexed item.
	ItemSize NullableInt64 `json:"itemSize,omitempty"`
	// Specifies the id of parent folder the indexed item.
	ParentFolderId NullableString `json:"parentFolderId,omitempty"`
}

// NewPublicFolderItemAllOf instantiates a new PublicFolderItemAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicFolderItemAllOf() *PublicFolderItemAllOf {
	this := PublicFolderItemAllOf{}
	return &this
}

// NewPublicFolderItemAllOfWithDefaults instantiates a new PublicFolderItemAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicFolderItemAllOfWithDefaults() *PublicFolderItemAllOf {
	this := PublicFolderItemAllOf{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicFolderItemAllOf) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicFolderItemAllOf) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *PublicFolderItemAllOf) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *PublicFolderItemAllOf) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *PublicFolderItemAllOf) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *PublicFolderItemAllOf) UnsetType() {
	o.Type.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicFolderItemAllOf) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicFolderItemAllOf) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *PublicFolderItemAllOf) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *PublicFolderItemAllOf) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *PublicFolderItemAllOf) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *PublicFolderItemAllOf) UnsetId() {
	o.Id.Unset()
}

// GetSubject returns the Subject field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicFolderItemAllOf) GetSubject() string {
	if o == nil || o.Subject.Get() == nil {
		var ret string
		return ret
	}
	return *o.Subject.Get()
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicFolderItemAllOf) GetSubjectOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Subject.Get(), o.Subject.IsSet()
}

// HasSubject returns a boolean if a field has been set.
func (o *PublicFolderItemAllOf) HasSubject() bool {
	if o != nil && o.Subject.IsSet() {
		return true
	}

	return false
}

// SetSubject gets a reference to the given NullableString and assigns it to the Subject field.
func (o *PublicFolderItemAllOf) SetSubject(v string) {
	o.Subject.Set(&v)
}
// SetSubjectNil sets the value for Subject to be an explicit nil
func (o *PublicFolderItemAllOf) SetSubjectNil() {
	o.Subject.Set(nil)
}

// UnsetSubject ensures that no value is present for Subject, not even an explicit nil
func (o *PublicFolderItemAllOf) UnsetSubject() {
	o.Subject.Unset()
}

// GetHasAttachments returns the HasAttachments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicFolderItemAllOf) GetHasAttachments() bool {
	if o == nil || o.HasAttachments.Get() == nil {
		var ret bool
		return ret
	}
	return *o.HasAttachments.Get()
}

// GetHasAttachmentsOk returns a tuple with the HasAttachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicFolderItemAllOf) GetHasAttachmentsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HasAttachments.Get(), o.HasAttachments.IsSet()
}

// HasHasAttachments returns a boolean if a field has been set.
func (o *PublicFolderItemAllOf) HasHasAttachments() bool {
	if o != nil && o.HasAttachments.IsSet() {
		return true
	}

	return false
}

// SetHasAttachments gets a reference to the given NullableBool and assigns it to the HasAttachments field.
func (o *PublicFolderItemAllOf) SetHasAttachments(v bool) {
	o.HasAttachments.Set(&v)
}
// SetHasAttachmentsNil sets the value for HasAttachments to be an explicit nil
func (o *PublicFolderItemAllOf) SetHasAttachmentsNil() {
	o.HasAttachments.Set(nil)
}

// UnsetHasAttachments ensures that no value is present for HasAttachments, not even an explicit nil
func (o *PublicFolderItemAllOf) UnsetHasAttachments() {
	o.HasAttachments.Unset()
}

// GetItemClass returns the ItemClass field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicFolderItemAllOf) GetItemClass() string {
	if o == nil || o.ItemClass.Get() == nil {
		var ret string
		return ret
	}
	return *o.ItemClass.Get()
}

// GetItemClassOk returns a tuple with the ItemClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicFolderItemAllOf) GetItemClassOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ItemClass.Get(), o.ItemClass.IsSet()
}

// HasItemClass returns a boolean if a field has been set.
func (o *PublicFolderItemAllOf) HasItemClass() bool {
	if o != nil && o.ItemClass.IsSet() {
		return true
	}

	return false
}

// SetItemClass gets a reference to the given NullableString and assigns it to the ItemClass field.
func (o *PublicFolderItemAllOf) SetItemClass(v string) {
	o.ItemClass.Set(&v)
}
// SetItemClassNil sets the value for ItemClass to be an explicit nil
func (o *PublicFolderItemAllOf) SetItemClassNil() {
	o.ItemClass.Set(nil)
}

// UnsetItemClass ensures that no value is present for ItemClass, not even an explicit nil
func (o *PublicFolderItemAllOf) UnsetItemClass() {
	o.ItemClass.Unset()
}

// GetReceivedTimeSecs returns the ReceivedTimeSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicFolderItemAllOf) GetReceivedTimeSecs() int64 {
	if o == nil || o.ReceivedTimeSecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ReceivedTimeSecs.Get()
}

// GetReceivedTimeSecsOk returns a tuple with the ReceivedTimeSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicFolderItemAllOf) GetReceivedTimeSecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ReceivedTimeSecs.Get(), o.ReceivedTimeSecs.IsSet()
}

// HasReceivedTimeSecs returns a boolean if a field has been set.
func (o *PublicFolderItemAllOf) HasReceivedTimeSecs() bool {
	if o != nil && o.ReceivedTimeSecs.IsSet() {
		return true
	}

	return false
}

// SetReceivedTimeSecs gets a reference to the given NullableInt64 and assigns it to the ReceivedTimeSecs field.
func (o *PublicFolderItemAllOf) SetReceivedTimeSecs(v int64) {
	o.ReceivedTimeSecs.Set(&v)
}
// SetReceivedTimeSecsNil sets the value for ReceivedTimeSecs to be an explicit nil
func (o *PublicFolderItemAllOf) SetReceivedTimeSecsNil() {
	o.ReceivedTimeSecs.Set(nil)
}

// UnsetReceivedTimeSecs ensures that no value is present for ReceivedTimeSecs, not even an explicit nil
func (o *PublicFolderItemAllOf) UnsetReceivedTimeSecs() {
	o.ReceivedTimeSecs.Unset()
}

// GetItemSize returns the ItemSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicFolderItemAllOf) GetItemSize() int64 {
	if o == nil || o.ItemSize.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ItemSize.Get()
}

// GetItemSizeOk returns a tuple with the ItemSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicFolderItemAllOf) GetItemSizeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ItemSize.Get(), o.ItemSize.IsSet()
}

// HasItemSize returns a boolean if a field has been set.
func (o *PublicFolderItemAllOf) HasItemSize() bool {
	if o != nil && o.ItemSize.IsSet() {
		return true
	}

	return false
}

// SetItemSize gets a reference to the given NullableInt64 and assigns it to the ItemSize field.
func (o *PublicFolderItemAllOf) SetItemSize(v int64) {
	o.ItemSize.Set(&v)
}
// SetItemSizeNil sets the value for ItemSize to be an explicit nil
func (o *PublicFolderItemAllOf) SetItemSizeNil() {
	o.ItemSize.Set(nil)
}

// UnsetItemSize ensures that no value is present for ItemSize, not even an explicit nil
func (o *PublicFolderItemAllOf) UnsetItemSize() {
	o.ItemSize.Unset()
}

// GetParentFolderId returns the ParentFolderId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicFolderItemAllOf) GetParentFolderId() string {
	if o == nil || o.ParentFolderId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ParentFolderId.Get()
}

// GetParentFolderIdOk returns a tuple with the ParentFolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicFolderItemAllOf) GetParentFolderIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ParentFolderId.Get(), o.ParentFolderId.IsSet()
}

// HasParentFolderId returns a boolean if a field has been set.
func (o *PublicFolderItemAllOf) HasParentFolderId() bool {
	if o != nil && o.ParentFolderId.IsSet() {
		return true
	}

	return false
}

// SetParentFolderId gets a reference to the given NullableString and assigns it to the ParentFolderId field.
func (o *PublicFolderItemAllOf) SetParentFolderId(v string) {
	o.ParentFolderId.Set(&v)
}
// SetParentFolderIdNil sets the value for ParentFolderId to be an explicit nil
func (o *PublicFolderItemAllOf) SetParentFolderIdNil() {
	o.ParentFolderId.Set(nil)
}

// UnsetParentFolderId ensures that no value is present for ParentFolderId, not even an explicit nil
func (o *PublicFolderItemAllOf) UnsetParentFolderId() {
	o.ParentFolderId.Unset()
}

func (o PublicFolderItemAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Subject.IsSet() {
		toSerialize["subject"] = o.Subject.Get()
	}
	if o.HasAttachments.IsSet() {
		toSerialize["hasAttachments"] = o.HasAttachments.Get()
	}
	if o.ItemClass.IsSet() {
		toSerialize["itemClass"] = o.ItemClass.Get()
	}
	if o.ReceivedTimeSecs.IsSet() {
		toSerialize["receivedTimeSecs"] = o.ReceivedTimeSecs.Get()
	}
	if o.ItemSize.IsSet() {
		toSerialize["itemSize"] = o.ItemSize.Get()
	}
	if o.ParentFolderId.IsSet() {
		toSerialize["parentFolderId"] = o.ParentFolderId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullablePublicFolderItemAllOf struct {
	value *PublicFolderItemAllOf
	isSet bool
}

func (v NullablePublicFolderItemAllOf) Get() *PublicFolderItemAllOf {
	return v.value
}

func (v *NullablePublicFolderItemAllOf) Set(val *PublicFolderItemAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicFolderItemAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicFolderItemAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicFolderItemAllOf(val *PublicFolderItemAllOf) *NullablePublicFolderItemAllOf {
	return &NullablePublicFolderItemAllOf{value: val, isSet: true}
}

func (v NullablePublicFolderItemAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicFolderItemAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o PublicFolderItemAllOf) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}