/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// RevertPatchesRequest Specifies the request to revert a patch. An optional patch level can be specified. When a patch level is specified, system keeps reverting patches until the given patch level is reverted. If no patch level is specified, just the last applied patch is reverted.
type RevertPatchesRequest struct {
	// Specifies the name of the service whose patch should be reverted.
	Service string `json:"service"`
	// Specifies optional patch level upto which the patches should be reverted. If given, it should be between 1 and the current patch level inclusive.
	PatchLevel NullableInt64 `json:"patchLevel,omitempty"`
}

// NewRevertPatchesRequest instantiates a new RevertPatchesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRevertPatchesRequest(service string) *RevertPatchesRequest {
	this := RevertPatchesRequest{}
	this.Service = service
	return &this
}

// NewRevertPatchesRequestWithDefaults instantiates a new RevertPatchesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRevertPatchesRequestWithDefaults() *RevertPatchesRequest {
	this := RevertPatchesRequest{}
	return &this
}

// GetService returns the Service field value
func (o *RevertPatchesRequest) GetService() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Service
}

// GetServiceOk returns a tuple with the Service field value
// and a boolean to check if the value has been set.
func (o *RevertPatchesRequest) GetServiceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Service, true
}

// SetService sets field value
func (o *RevertPatchesRequest) SetService(v string) {
	o.Service = v
}

// GetPatchLevel returns the PatchLevel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RevertPatchesRequest) GetPatchLevel() int64 {
	if o == nil || o.PatchLevel.Get() == nil {
		var ret int64
		return ret
	}
	return *o.PatchLevel.Get()
}

// GetPatchLevelOk returns a tuple with the PatchLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RevertPatchesRequest) GetPatchLevelOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PatchLevel.Get(), o.PatchLevel.IsSet()
}

// HasPatchLevel returns a boolean if a field has been set.
func (o *RevertPatchesRequest) HasPatchLevel() bool {
	if o != nil && o.PatchLevel.IsSet() {
		return true
	}

	return false
}

// SetPatchLevel gets a reference to the given NullableInt64 and assigns it to the PatchLevel field.
func (o *RevertPatchesRequest) SetPatchLevel(v int64) {
	o.PatchLevel.Set(&v)
}
// SetPatchLevelNil sets the value for PatchLevel to be an explicit nil
func (o *RevertPatchesRequest) SetPatchLevelNil() {
	o.PatchLevel.Set(nil)
}

// UnsetPatchLevel ensures that no value is present for PatchLevel, not even an explicit nil
func (o *RevertPatchesRequest) UnsetPatchLevel() {
	o.PatchLevel.Unset()
}

func (o RevertPatchesRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["service"] = o.Service
	}
	if o.PatchLevel.IsSet() {
		toSerialize["patchLevel"] = o.PatchLevel.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRevertPatchesRequest struct {
	value *RevertPatchesRequest
	isSet bool
}

func (v NullableRevertPatchesRequest) Get() *RevertPatchesRequest {
	return v.value
}

func (v *NullableRevertPatchesRequest) Set(val *RevertPatchesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRevertPatchesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRevertPatchesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRevertPatchesRequest(val *RevertPatchesRequest) *NullableRevertPatchesRequest {
	return &NullableRevertPatchesRequest{value: val, isSet: true}
}

func (v NullableRevertPatchesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRevertPatchesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o RevertPatchesRequest) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}