/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// ReverseReplicationResult Specifies the request parameters to create a view failover task.
type ReverseReplicationResult struct {
	// Specifies whether the reverse replication was enabled or not during group creation. It can be false, if source cluster is not reachable for reverse replication.
	IsReverseReplicationEnabled NullableBool `json:"isReverseReplicationEnabled,omitempty"`
	// Specifies the reason of not enabling reverse replication.
	ErrorReason NullableString `json:"errorReason,omitempty"`
}

// NewReverseReplicationResult instantiates a new ReverseReplicationResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReverseReplicationResult() *ReverseReplicationResult {
	this := ReverseReplicationResult{}
	return &this
}

// NewReverseReplicationResultWithDefaults instantiates a new ReverseReplicationResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReverseReplicationResultWithDefaults() *ReverseReplicationResult {
	this := ReverseReplicationResult{}
	return &this
}

// GetIsReverseReplicationEnabled returns the IsReverseReplicationEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReverseReplicationResult) GetIsReverseReplicationEnabled() bool {
	if o == nil || o.IsReverseReplicationEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsReverseReplicationEnabled.Get()
}

// GetIsReverseReplicationEnabledOk returns a tuple with the IsReverseReplicationEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReverseReplicationResult) GetIsReverseReplicationEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsReverseReplicationEnabled.Get(), o.IsReverseReplicationEnabled.IsSet()
}

// HasIsReverseReplicationEnabled returns a boolean if a field has been set.
func (o *ReverseReplicationResult) HasIsReverseReplicationEnabled() bool {
	if o != nil && o.IsReverseReplicationEnabled.IsSet() {
		return true
	}

	return false
}

// SetIsReverseReplicationEnabled gets a reference to the given NullableBool and assigns it to the IsReverseReplicationEnabled field.
func (o *ReverseReplicationResult) SetIsReverseReplicationEnabled(v bool) {
	o.IsReverseReplicationEnabled.Set(&v)
}
// SetIsReverseReplicationEnabledNil sets the value for IsReverseReplicationEnabled to be an explicit nil
func (o *ReverseReplicationResult) SetIsReverseReplicationEnabledNil() {
	o.IsReverseReplicationEnabled.Set(nil)
}

// UnsetIsReverseReplicationEnabled ensures that no value is present for IsReverseReplicationEnabled, not even an explicit nil
func (o *ReverseReplicationResult) UnsetIsReverseReplicationEnabled() {
	o.IsReverseReplicationEnabled.Unset()
}

// GetErrorReason returns the ErrorReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReverseReplicationResult) GetErrorReason() string {
	if o == nil || o.ErrorReason.Get() == nil {
		var ret string
		return ret
	}
	return *o.ErrorReason.Get()
}

// GetErrorReasonOk returns a tuple with the ErrorReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReverseReplicationResult) GetErrorReasonOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ErrorReason.Get(), o.ErrorReason.IsSet()
}

// HasErrorReason returns a boolean if a field has been set.
func (o *ReverseReplicationResult) HasErrorReason() bool {
	if o != nil && o.ErrorReason.IsSet() {
		return true
	}

	return false
}

// SetErrorReason gets a reference to the given NullableString and assigns it to the ErrorReason field.
func (o *ReverseReplicationResult) SetErrorReason(v string) {
	o.ErrorReason.Set(&v)
}
// SetErrorReasonNil sets the value for ErrorReason to be an explicit nil
func (o *ReverseReplicationResult) SetErrorReasonNil() {
	o.ErrorReason.Set(nil)
}

// UnsetErrorReason ensures that no value is present for ErrorReason, not even an explicit nil
func (o *ReverseReplicationResult) UnsetErrorReason() {
	o.ErrorReason.Unset()
}

func (o ReverseReplicationResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsReverseReplicationEnabled.IsSet() {
		toSerialize["isReverseReplicationEnabled"] = o.IsReverseReplicationEnabled.Get()
	}
	if o.ErrorReason.IsSet() {
		toSerialize["errorReason"] = o.ErrorReason.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableReverseReplicationResult struct {
	value *ReverseReplicationResult
	isSet bool
}

func (v NullableReverseReplicationResult) Get() *ReverseReplicationResult {
	return v.value
}

func (v *NullableReverseReplicationResult) Set(val *ReverseReplicationResult) {
	v.value = val
	v.isSet = true
}

func (v NullableReverseReplicationResult) IsSet() bool {
	return v.isSet
}

func (v *NullableReverseReplicationResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReverseReplicationResult(val *ReverseReplicationResult) *NullableReverseReplicationResult {
	return &NullableReverseReplicationResult{value: val, isSet: true}
}

func (v NullableReverseReplicationResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReverseReplicationResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o ReverseReplicationResult) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}