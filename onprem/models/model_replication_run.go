/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// ReplicationRun Specifies information about replication run for an object.
type ReplicationRun struct {
	// Replication result for a target.
	ReplicationTargetResults *[]ReplicationTargetResult `json:"replicationTargetResults,omitempty"`
}

// NewReplicationRun instantiates a new ReplicationRun object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplicationRun() *ReplicationRun {
	this := ReplicationRun{}
	return &this
}

// NewReplicationRunWithDefaults instantiates a new ReplicationRun object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplicationRunWithDefaults() *ReplicationRun {
	this := ReplicationRun{}
	return &this
}

// GetReplicationTargetResults returns the ReplicationTargetResults field value if set, zero value otherwise.
func (o *ReplicationRun) GetReplicationTargetResults() []ReplicationTargetResult {
	if o == nil || o.ReplicationTargetResults == nil {
		var ret []ReplicationTargetResult
		return ret
	}
	return *o.ReplicationTargetResults
}

// GetReplicationTargetResultsOk returns a tuple with the ReplicationTargetResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicationRun) GetReplicationTargetResultsOk() (*[]ReplicationTargetResult, bool) {
	if o == nil || o.ReplicationTargetResults == nil {
		return nil, false
	}
	return o.ReplicationTargetResults, true
}

// HasReplicationTargetResults returns a boolean if a field has been set.
func (o *ReplicationRun) HasReplicationTargetResults() bool {
	if o != nil && o.ReplicationTargetResults != nil {
		return true
	}

	return false
}

// SetReplicationTargetResults gets a reference to the given []ReplicationTargetResult and assigns it to the ReplicationTargetResults field.
func (o *ReplicationRun) SetReplicationTargetResults(v []ReplicationTargetResult) {
	o.ReplicationTargetResults = &v
}

func (o ReplicationRun) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ReplicationTargetResults != nil {
		toSerialize["replicationTargetResults"] = o.ReplicationTargetResults
	}
	return json.Marshal(toSerialize)
}

type NullableReplicationRun struct {
	value *ReplicationRun
	isSet bool
}

func (v NullableReplicationRun) Get() *ReplicationRun {
	return v.value
}

func (v *NullableReplicationRun) Set(val *ReplicationRun) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicationRun) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicationRun) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicationRun(val *ReplicationRun) *NullableReplicationRun {
	return &NullableReplicationRun{value: val, isSet: true}
}

func (v NullableReplicationRun) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicationRun) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o ReplicationRun) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}