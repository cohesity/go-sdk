/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// HeliosLogBackupPolicy Specifies log backup settings for a Protection Group.
type HeliosLogBackupPolicy struct {
	Schedule *HeliosLogSchedule `json:"schedule,omitempty"`
	Retention *HeliosRetention `json:"retention,omitempty"`
}

// NewHeliosLogBackupPolicy instantiates a new HeliosLogBackupPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeliosLogBackupPolicy() *HeliosLogBackupPolicy {
	this := HeliosLogBackupPolicy{}
	return &this
}

// NewHeliosLogBackupPolicyWithDefaults instantiates a new HeliosLogBackupPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeliosLogBackupPolicyWithDefaults() *HeliosLogBackupPolicy {
	this := HeliosLogBackupPolicy{}
	return &this
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *HeliosLogBackupPolicy) GetSchedule() HeliosLogSchedule {
	if o == nil || o.Schedule == nil {
		var ret HeliosLogSchedule
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeliosLogBackupPolicy) GetScheduleOk() (*HeliosLogSchedule, bool) {
	if o == nil || o.Schedule == nil {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *HeliosLogBackupPolicy) HasSchedule() bool {
	if o != nil && o.Schedule != nil {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given HeliosLogSchedule and assigns it to the Schedule field.
func (o *HeliosLogBackupPolicy) SetSchedule(v HeliosLogSchedule) {
	o.Schedule = &v
}

// GetRetention returns the Retention field value if set, zero value otherwise.
func (o *HeliosLogBackupPolicy) GetRetention() HeliosRetention {
	if o == nil || o.Retention == nil {
		var ret HeliosRetention
		return ret
	}
	return *o.Retention
}

// GetRetentionOk returns a tuple with the Retention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeliosLogBackupPolicy) GetRetentionOk() (*HeliosRetention, bool) {
	if o == nil || o.Retention == nil {
		return nil, false
	}
	return o.Retention, true
}

// HasRetention returns a boolean if a field has been set.
func (o *HeliosLogBackupPolicy) HasRetention() bool {
	if o != nil && o.Retention != nil {
		return true
	}

	return false
}

// SetRetention gets a reference to the given HeliosRetention and assigns it to the Retention field.
func (o *HeliosLogBackupPolicy) SetRetention(v HeliosRetention) {
	o.Retention = &v
}

func (o HeliosLogBackupPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Schedule != nil {
		toSerialize["schedule"] = o.Schedule
	}
	if o.Retention != nil {
		toSerialize["retention"] = o.Retention
	}
	return json.Marshal(toSerialize)
}

type NullableHeliosLogBackupPolicy struct {
	value *HeliosLogBackupPolicy
	isSet bool
}

func (v NullableHeliosLogBackupPolicy) Get() *HeliosLogBackupPolicy {
	return v.value
}

func (v *NullableHeliosLogBackupPolicy) Set(val *HeliosLogBackupPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableHeliosLogBackupPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableHeliosLogBackupPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeliosLogBackupPolicy(val *HeliosLogBackupPolicy) *NullableHeliosLogBackupPolicy {
	return &NullableHeliosLogBackupPolicy{value: val, isSet: true}
}

func (v NullableHeliosLogBackupPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeliosLogBackupPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o HeliosLogBackupPolicy) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}