/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// VmwareRecoverOriginalSourceDiskParams Specifies disk specific parameters for performing a disk recovery.
type VmwareRecoverOriginalSourceDiskParams struct {
	// Specifies the UUID of the source disk being recovered.
	DiskUuid NullableString `json:"diskUuid"`
	// Specifies whether or not to overwrite the original disk. If this is set to true, then datastoreId should not be specified. Otherwise, datastoreId must be specified.
	OverwriteOriginalDisk NullableBool `json:"overwriteOriginalDisk,omitempty"`
	// Specifies the ID of the datastore on which the specified disk will be spun up.
	DatastoreId NullableInt64 `json:"datastoreId,omitempty"`
}

// NewVmwareRecoverOriginalSourceDiskParams instantiates a new VmwareRecoverOriginalSourceDiskParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmwareRecoverOriginalSourceDiskParams(diskUuid NullableString) *VmwareRecoverOriginalSourceDiskParams {
	this := VmwareRecoverOriginalSourceDiskParams{}
	this.DiskUuid = diskUuid
	return &this
}

// NewVmwareRecoverOriginalSourceDiskParamsWithDefaults instantiates a new VmwareRecoverOriginalSourceDiskParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmwareRecoverOriginalSourceDiskParamsWithDefaults() *VmwareRecoverOriginalSourceDiskParams {
	this := VmwareRecoverOriginalSourceDiskParams{}
	return &this
}

// GetDiskUuid returns the DiskUuid field value
// If the value is explicit nil, the zero value for string will be returned
func (o *VmwareRecoverOriginalSourceDiskParams) GetDiskUuid() string {
	if o == nil || o.DiskUuid.Get() == nil {
		var ret string
		return ret
	}

	return *o.DiskUuid.Get()
}

// GetDiskUuidOk returns a tuple with the DiskUuid field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareRecoverOriginalSourceDiskParams) GetDiskUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DiskUuid.Get(), o.DiskUuid.IsSet()
}

// SetDiskUuid sets field value
func (o *VmwareRecoverOriginalSourceDiskParams) SetDiskUuid(v string) {
	o.DiskUuid.Set(&v)
}

// GetOverwriteOriginalDisk returns the OverwriteOriginalDisk field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareRecoverOriginalSourceDiskParams) GetOverwriteOriginalDisk() bool {
	if o == nil || o.OverwriteOriginalDisk.Get() == nil {
		var ret bool
		return ret
	}
	return *o.OverwriteOriginalDisk.Get()
}

// GetOverwriteOriginalDiskOk returns a tuple with the OverwriteOriginalDisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareRecoverOriginalSourceDiskParams) GetOverwriteOriginalDiskOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OverwriteOriginalDisk.Get(), o.OverwriteOriginalDisk.IsSet()
}

// HasOverwriteOriginalDisk returns a boolean if a field has been set.
func (o *VmwareRecoverOriginalSourceDiskParams) HasOverwriteOriginalDisk() bool {
	if o != nil && o.OverwriteOriginalDisk.IsSet() {
		return true
	}

	return false
}

// SetOverwriteOriginalDisk gets a reference to the given NullableBool and assigns it to the OverwriteOriginalDisk field.
func (o *VmwareRecoverOriginalSourceDiskParams) SetOverwriteOriginalDisk(v bool) {
	o.OverwriteOriginalDisk.Set(&v)
}
// SetOverwriteOriginalDiskNil sets the value for OverwriteOriginalDisk to be an explicit nil
func (o *VmwareRecoverOriginalSourceDiskParams) SetOverwriteOriginalDiskNil() {
	o.OverwriteOriginalDisk.Set(nil)
}

// UnsetOverwriteOriginalDisk ensures that no value is present for OverwriteOriginalDisk, not even an explicit nil
func (o *VmwareRecoverOriginalSourceDiskParams) UnsetOverwriteOriginalDisk() {
	o.OverwriteOriginalDisk.Unset()
}

// GetDatastoreId returns the DatastoreId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareRecoverOriginalSourceDiskParams) GetDatastoreId() int64 {
	if o == nil || o.DatastoreId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DatastoreId.Get()
}

// GetDatastoreIdOk returns a tuple with the DatastoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareRecoverOriginalSourceDiskParams) GetDatastoreIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DatastoreId.Get(), o.DatastoreId.IsSet()
}

// HasDatastoreId returns a boolean if a field has been set.
func (o *VmwareRecoverOriginalSourceDiskParams) HasDatastoreId() bool {
	if o != nil && o.DatastoreId.IsSet() {
		return true
	}

	return false
}

// SetDatastoreId gets a reference to the given NullableInt64 and assigns it to the DatastoreId field.
func (o *VmwareRecoverOriginalSourceDiskParams) SetDatastoreId(v int64) {
	o.DatastoreId.Set(&v)
}
// SetDatastoreIdNil sets the value for DatastoreId to be an explicit nil
func (o *VmwareRecoverOriginalSourceDiskParams) SetDatastoreIdNil() {
	o.DatastoreId.Set(nil)
}

// UnsetDatastoreId ensures that no value is present for DatastoreId, not even an explicit nil
func (o *VmwareRecoverOriginalSourceDiskParams) UnsetDatastoreId() {
	o.DatastoreId.Unset()
}

func (o VmwareRecoverOriginalSourceDiskParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["diskUuid"] = o.DiskUuid.Get()
	}
	if o.OverwriteOriginalDisk.IsSet() {
		toSerialize["overwriteOriginalDisk"] = o.OverwriteOriginalDisk.Get()
	}
	if o.DatastoreId.IsSet() {
		toSerialize["datastoreId"] = o.DatastoreId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableVmwareRecoverOriginalSourceDiskParams struct {
	value *VmwareRecoverOriginalSourceDiskParams
	isSet bool
}

func (v NullableVmwareRecoverOriginalSourceDiskParams) Get() *VmwareRecoverOriginalSourceDiskParams {
	return v.value
}

func (v *NullableVmwareRecoverOriginalSourceDiskParams) Set(val *VmwareRecoverOriginalSourceDiskParams) {
	v.value = val
	v.isSet = true
}

func (v NullableVmwareRecoverOriginalSourceDiskParams) IsSet() bool {
	return v.isSet
}

func (v *NullableVmwareRecoverOriginalSourceDiskParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmwareRecoverOriginalSourceDiskParams(val *VmwareRecoverOriginalSourceDiskParams) *NullableVmwareRecoverOriginalSourceDiskParams {
	return &NullableVmwareRecoverOriginalSourceDiskParams{value: val, isSet: true}
}

func (v NullableVmwareRecoverOriginalSourceDiskParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmwareRecoverOriginalSourceDiskParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o VmwareRecoverOriginalSourceDiskParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}