/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// CreateOdpRemoteClusterParams Specifies the parameters to create an ODP Remote Cluster config.
type CreateOdpRemoteClusterParams struct {
	// Specifies the ODP Remote Cluster id.
	ClusterId NullableInt64 `json:"clusterId"`
	// Specifies the ODP Remote Cluster incarnation id.
	ClusterIncarnationId NullableInt64 `json:"clusterIncarnationId"`
	// Specifies the ODP Remote Cluster name.
	ClusterName NullableString `json:"clusterName"`
	// Specifies if the cluster id is stale and needs to be refreshed.
	ClusterIdStale NullableBool `json:"clusterIdStale,omitempty"`
	// Specifies if all endpoints on ODP Remote Cluster are reachable.
	AllEndpointsReachable NullableBool `json:"allEndpointsReachable,omitempty"`
	// Specifies a list of Storage Domain pairs.
	StorageDomainPairs []StorageDomainPair `json:"storageDomainPairs,omitempty"`
	// Specifies whether to compress the data transferred to ODP Remote Cluster.
	CompressionEnabled NullableBool `json:"compressionEnabled,omitempty"`
	// Specifies the key used for encrypting the data transferred to ODP Remote Cluster.
	KeyEncryptionKey NullableString `json:"keyEncryptionKey,omitempty"`
	// Specifies if the ODP Remote Cluster is used for replication.
	UsedForReplication NullableBool `json:"usedForReplication,omitempty"`
	// Specifies the tenant id.
	TenantId NullableString `json:"tenantId,omitempty"`
	// Specifies the tenant id for ODP Remote Cluster.
	RemoteTenantId NullableString `json:"remoteTenantId,omitempty"`
	// Specifies the interface group name of the ODP Remote Cluster.
	InterfaceGroupName NullableString `json:"interfaceGroupName,omitempty"`
	// Specifies whether to use Bifrost Broker channel for remote connection.
	UseBifrostBrokerChannel NullableBool `json:"useBifrostBrokerChannel,omitempty"`
}

// NewCreateOdpRemoteClusterParams instantiates a new CreateOdpRemoteClusterParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateOdpRemoteClusterParams(clusterId NullableInt64, clusterIncarnationId NullableInt64, clusterName NullableString) *CreateOdpRemoteClusterParams {
	this := CreateOdpRemoteClusterParams{}
	this.ClusterId = clusterId
	this.ClusterIncarnationId = clusterIncarnationId
	this.ClusterName = clusterName
	return &this
}

// NewCreateOdpRemoteClusterParamsWithDefaults instantiates a new CreateOdpRemoteClusterParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateOdpRemoteClusterParamsWithDefaults() *CreateOdpRemoteClusterParams {
	this := CreateOdpRemoteClusterParams{}
	return &this
}

// GetClusterId returns the ClusterId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *CreateOdpRemoteClusterParams) GetClusterId() int64 {
	if o == nil || o.ClusterId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.ClusterId.Get()
}

// GetClusterIdOk returns a tuple with the ClusterId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateOdpRemoteClusterParams) GetClusterIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterId.Get(), o.ClusterId.IsSet()
}

// SetClusterId sets field value
func (o *CreateOdpRemoteClusterParams) SetClusterId(v int64) {
	o.ClusterId.Set(&v)
}

// GetClusterIncarnationId returns the ClusterIncarnationId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *CreateOdpRemoteClusterParams) GetClusterIncarnationId() int64 {
	if o == nil || o.ClusterIncarnationId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.ClusterIncarnationId.Get()
}

// GetClusterIncarnationIdOk returns a tuple with the ClusterIncarnationId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateOdpRemoteClusterParams) GetClusterIncarnationIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterIncarnationId.Get(), o.ClusterIncarnationId.IsSet()
}

// SetClusterIncarnationId sets field value
func (o *CreateOdpRemoteClusterParams) SetClusterIncarnationId(v int64) {
	o.ClusterIncarnationId.Set(&v)
}

// GetClusterName returns the ClusterName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CreateOdpRemoteClusterParams) GetClusterName() string {
	if o == nil || o.ClusterName.Get() == nil {
		var ret string
		return ret
	}

	return *o.ClusterName.Get()
}

// GetClusterNameOk returns a tuple with the ClusterName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateOdpRemoteClusterParams) GetClusterNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterName.Get(), o.ClusterName.IsSet()
}

// SetClusterName sets field value
func (o *CreateOdpRemoteClusterParams) SetClusterName(v string) {
	o.ClusterName.Set(&v)
}

// GetClusterIdStale returns the ClusterIdStale field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateOdpRemoteClusterParams) GetClusterIdStale() bool {
	if o == nil || o.ClusterIdStale.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ClusterIdStale.Get()
}

// GetClusterIdStaleOk returns a tuple with the ClusterIdStale field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateOdpRemoteClusterParams) GetClusterIdStaleOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterIdStale.Get(), o.ClusterIdStale.IsSet()
}

// HasClusterIdStale returns a boolean if a field has been set.
func (o *CreateOdpRemoteClusterParams) HasClusterIdStale() bool {
	if o != nil && o.ClusterIdStale.IsSet() {
		return true
	}

	return false
}

// SetClusterIdStale gets a reference to the given NullableBool and assigns it to the ClusterIdStale field.
func (o *CreateOdpRemoteClusterParams) SetClusterIdStale(v bool) {
	o.ClusterIdStale.Set(&v)
}
// SetClusterIdStaleNil sets the value for ClusterIdStale to be an explicit nil
func (o *CreateOdpRemoteClusterParams) SetClusterIdStaleNil() {
	o.ClusterIdStale.Set(nil)
}

// UnsetClusterIdStale ensures that no value is present for ClusterIdStale, not even an explicit nil
func (o *CreateOdpRemoteClusterParams) UnsetClusterIdStale() {
	o.ClusterIdStale.Unset()
}

// GetAllEndpointsReachable returns the AllEndpointsReachable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateOdpRemoteClusterParams) GetAllEndpointsReachable() bool {
	if o == nil || o.AllEndpointsReachable.Get() == nil {
		var ret bool
		return ret
	}
	return *o.AllEndpointsReachable.Get()
}

// GetAllEndpointsReachableOk returns a tuple with the AllEndpointsReachable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateOdpRemoteClusterParams) GetAllEndpointsReachableOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AllEndpointsReachable.Get(), o.AllEndpointsReachable.IsSet()
}

// HasAllEndpointsReachable returns a boolean if a field has been set.
func (o *CreateOdpRemoteClusterParams) HasAllEndpointsReachable() bool {
	if o != nil && o.AllEndpointsReachable.IsSet() {
		return true
	}

	return false
}

// SetAllEndpointsReachable gets a reference to the given NullableBool and assigns it to the AllEndpointsReachable field.
func (o *CreateOdpRemoteClusterParams) SetAllEndpointsReachable(v bool) {
	o.AllEndpointsReachable.Set(&v)
}
// SetAllEndpointsReachableNil sets the value for AllEndpointsReachable to be an explicit nil
func (o *CreateOdpRemoteClusterParams) SetAllEndpointsReachableNil() {
	o.AllEndpointsReachable.Set(nil)
}

// UnsetAllEndpointsReachable ensures that no value is present for AllEndpointsReachable, not even an explicit nil
func (o *CreateOdpRemoteClusterParams) UnsetAllEndpointsReachable() {
	o.AllEndpointsReachable.Unset()
}

// GetStorageDomainPairs returns the StorageDomainPairs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateOdpRemoteClusterParams) GetStorageDomainPairs() []StorageDomainPair {
	if o == nil  {
		var ret []StorageDomainPair
		return ret
	}
	return o.StorageDomainPairs
}

// GetStorageDomainPairsOk returns a tuple with the StorageDomainPairs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateOdpRemoteClusterParams) GetStorageDomainPairsOk() (*[]StorageDomainPair, bool) {
	if o == nil || o.StorageDomainPairs == nil {
		return nil, false
	}
	return &o.StorageDomainPairs, true
}

// HasStorageDomainPairs returns a boolean if a field has been set.
func (o *CreateOdpRemoteClusterParams) HasStorageDomainPairs() bool {
	if o != nil && o.StorageDomainPairs != nil {
		return true
	}

	return false
}

// SetStorageDomainPairs gets a reference to the given []StorageDomainPair and assigns it to the StorageDomainPairs field.
func (o *CreateOdpRemoteClusterParams) SetStorageDomainPairs(v []StorageDomainPair) {
	o.StorageDomainPairs = v
}

// GetCompressionEnabled returns the CompressionEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateOdpRemoteClusterParams) GetCompressionEnabled() bool {
	if o == nil || o.CompressionEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.CompressionEnabled.Get()
}

// GetCompressionEnabledOk returns a tuple with the CompressionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateOdpRemoteClusterParams) GetCompressionEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CompressionEnabled.Get(), o.CompressionEnabled.IsSet()
}

// HasCompressionEnabled returns a boolean if a field has been set.
func (o *CreateOdpRemoteClusterParams) HasCompressionEnabled() bool {
	if o != nil && o.CompressionEnabled.IsSet() {
		return true
	}

	return false
}

// SetCompressionEnabled gets a reference to the given NullableBool and assigns it to the CompressionEnabled field.
func (o *CreateOdpRemoteClusterParams) SetCompressionEnabled(v bool) {
	o.CompressionEnabled.Set(&v)
}
// SetCompressionEnabledNil sets the value for CompressionEnabled to be an explicit nil
func (o *CreateOdpRemoteClusterParams) SetCompressionEnabledNil() {
	o.CompressionEnabled.Set(nil)
}

// UnsetCompressionEnabled ensures that no value is present for CompressionEnabled, not even an explicit nil
func (o *CreateOdpRemoteClusterParams) UnsetCompressionEnabled() {
	o.CompressionEnabled.Unset()
}

// GetKeyEncryptionKey returns the KeyEncryptionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateOdpRemoteClusterParams) GetKeyEncryptionKey() string {
	if o == nil || o.KeyEncryptionKey.Get() == nil {
		var ret string
		return ret
	}
	return *o.KeyEncryptionKey.Get()
}

// GetKeyEncryptionKeyOk returns a tuple with the KeyEncryptionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateOdpRemoteClusterParams) GetKeyEncryptionKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.KeyEncryptionKey.Get(), o.KeyEncryptionKey.IsSet()
}

// HasKeyEncryptionKey returns a boolean if a field has been set.
func (o *CreateOdpRemoteClusterParams) HasKeyEncryptionKey() bool {
	if o != nil && o.KeyEncryptionKey.IsSet() {
		return true
	}

	return false
}

// SetKeyEncryptionKey gets a reference to the given NullableString and assigns it to the KeyEncryptionKey field.
func (o *CreateOdpRemoteClusterParams) SetKeyEncryptionKey(v string) {
	o.KeyEncryptionKey.Set(&v)
}
// SetKeyEncryptionKeyNil sets the value for KeyEncryptionKey to be an explicit nil
func (o *CreateOdpRemoteClusterParams) SetKeyEncryptionKeyNil() {
	o.KeyEncryptionKey.Set(nil)
}

// UnsetKeyEncryptionKey ensures that no value is present for KeyEncryptionKey, not even an explicit nil
func (o *CreateOdpRemoteClusterParams) UnsetKeyEncryptionKey() {
	o.KeyEncryptionKey.Unset()
}

// GetUsedForReplication returns the UsedForReplication field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateOdpRemoteClusterParams) GetUsedForReplication() bool {
	if o == nil || o.UsedForReplication.Get() == nil {
		var ret bool
		return ret
	}
	return *o.UsedForReplication.Get()
}

// GetUsedForReplicationOk returns a tuple with the UsedForReplication field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateOdpRemoteClusterParams) GetUsedForReplicationOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UsedForReplication.Get(), o.UsedForReplication.IsSet()
}

// HasUsedForReplication returns a boolean if a field has been set.
func (o *CreateOdpRemoteClusterParams) HasUsedForReplication() bool {
	if o != nil && o.UsedForReplication.IsSet() {
		return true
	}

	return false
}

// SetUsedForReplication gets a reference to the given NullableBool and assigns it to the UsedForReplication field.
func (o *CreateOdpRemoteClusterParams) SetUsedForReplication(v bool) {
	o.UsedForReplication.Set(&v)
}
// SetUsedForReplicationNil sets the value for UsedForReplication to be an explicit nil
func (o *CreateOdpRemoteClusterParams) SetUsedForReplicationNil() {
	o.UsedForReplication.Set(nil)
}

// UnsetUsedForReplication ensures that no value is present for UsedForReplication, not even an explicit nil
func (o *CreateOdpRemoteClusterParams) UnsetUsedForReplication() {
	o.UsedForReplication.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateOdpRemoteClusterParams) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateOdpRemoteClusterParams) GetTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *CreateOdpRemoteClusterParams) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *CreateOdpRemoteClusterParams) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *CreateOdpRemoteClusterParams) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *CreateOdpRemoteClusterParams) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetRemoteTenantId returns the RemoteTenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateOdpRemoteClusterParams) GetRemoteTenantId() string {
	if o == nil || o.RemoteTenantId.Get() == nil {
		var ret string
		return ret
	}
	return *o.RemoteTenantId.Get()
}

// GetRemoteTenantIdOk returns a tuple with the RemoteTenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateOdpRemoteClusterParams) GetRemoteTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RemoteTenantId.Get(), o.RemoteTenantId.IsSet()
}

// HasRemoteTenantId returns a boolean if a field has been set.
func (o *CreateOdpRemoteClusterParams) HasRemoteTenantId() bool {
	if o != nil && o.RemoteTenantId.IsSet() {
		return true
	}

	return false
}

// SetRemoteTenantId gets a reference to the given NullableString and assigns it to the RemoteTenantId field.
func (o *CreateOdpRemoteClusterParams) SetRemoteTenantId(v string) {
	o.RemoteTenantId.Set(&v)
}
// SetRemoteTenantIdNil sets the value for RemoteTenantId to be an explicit nil
func (o *CreateOdpRemoteClusterParams) SetRemoteTenantIdNil() {
	o.RemoteTenantId.Set(nil)
}

// UnsetRemoteTenantId ensures that no value is present for RemoteTenantId, not even an explicit nil
func (o *CreateOdpRemoteClusterParams) UnsetRemoteTenantId() {
	o.RemoteTenantId.Unset()
}

// GetInterfaceGroupName returns the InterfaceGroupName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateOdpRemoteClusterParams) GetInterfaceGroupName() string {
	if o == nil || o.InterfaceGroupName.Get() == nil {
		var ret string
		return ret
	}
	return *o.InterfaceGroupName.Get()
}

// GetInterfaceGroupNameOk returns a tuple with the InterfaceGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateOdpRemoteClusterParams) GetInterfaceGroupNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InterfaceGroupName.Get(), o.InterfaceGroupName.IsSet()
}

// HasInterfaceGroupName returns a boolean if a field has been set.
func (o *CreateOdpRemoteClusterParams) HasInterfaceGroupName() bool {
	if o != nil && o.InterfaceGroupName.IsSet() {
		return true
	}

	return false
}

// SetInterfaceGroupName gets a reference to the given NullableString and assigns it to the InterfaceGroupName field.
func (o *CreateOdpRemoteClusterParams) SetInterfaceGroupName(v string) {
	o.InterfaceGroupName.Set(&v)
}
// SetInterfaceGroupNameNil sets the value for InterfaceGroupName to be an explicit nil
func (o *CreateOdpRemoteClusterParams) SetInterfaceGroupNameNil() {
	o.InterfaceGroupName.Set(nil)
}

// UnsetInterfaceGroupName ensures that no value is present for InterfaceGroupName, not even an explicit nil
func (o *CreateOdpRemoteClusterParams) UnsetInterfaceGroupName() {
	o.InterfaceGroupName.Unset()
}

// GetUseBifrostBrokerChannel returns the UseBifrostBrokerChannel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateOdpRemoteClusterParams) GetUseBifrostBrokerChannel() bool {
	if o == nil || o.UseBifrostBrokerChannel.Get() == nil {
		var ret bool
		return ret
	}
	return *o.UseBifrostBrokerChannel.Get()
}

// GetUseBifrostBrokerChannelOk returns a tuple with the UseBifrostBrokerChannel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateOdpRemoteClusterParams) GetUseBifrostBrokerChannelOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UseBifrostBrokerChannel.Get(), o.UseBifrostBrokerChannel.IsSet()
}

// HasUseBifrostBrokerChannel returns a boolean if a field has been set.
func (o *CreateOdpRemoteClusterParams) HasUseBifrostBrokerChannel() bool {
	if o != nil && o.UseBifrostBrokerChannel.IsSet() {
		return true
	}

	return false
}

// SetUseBifrostBrokerChannel gets a reference to the given NullableBool and assigns it to the UseBifrostBrokerChannel field.
func (o *CreateOdpRemoteClusterParams) SetUseBifrostBrokerChannel(v bool) {
	o.UseBifrostBrokerChannel.Set(&v)
}
// SetUseBifrostBrokerChannelNil sets the value for UseBifrostBrokerChannel to be an explicit nil
func (o *CreateOdpRemoteClusterParams) SetUseBifrostBrokerChannelNil() {
	o.UseBifrostBrokerChannel.Set(nil)
}

// UnsetUseBifrostBrokerChannel ensures that no value is present for UseBifrostBrokerChannel, not even an explicit nil
func (o *CreateOdpRemoteClusterParams) UnsetUseBifrostBrokerChannel() {
	o.UseBifrostBrokerChannel.Unset()
}

func (o CreateOdpRemoteClusterParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["clusterId"] = o.ClusterId.Get()
	}
	if true {
		toSerialize["clusterIncarnationId"] = o.ClusterIncarnationId.Get()
	}
	if true {
		toSerialize["clusterName"] = o.ClusterName.Get()
	}
	if o.ClusterIdStale.IsSet() {
		toSerialize["clusterIdStale"] = o.ClusterIdStale.Get()
	}
	if o.AllEndpointsReachable.IsSet() {
		toSerialize["allEndpointsReachable"] = o.AllEndpointsReachable.Get()
	}
	if o.StorageDomainPairs != nil {
		toSerialize["storageDomainPairs"] = o.StorageDomainPairs
	}
	if o.CompressionEnabled.IsSet() {
		toSerialize["compressionEnabled"] = o.CompressionEnabled.Get()
	}
	if o.KeyEncryptionKey.IsSet() {
		toSerialize["keyEncryptionKey"] = o.KeyEncryptionKey.Get()
	}
	if o.UsedForReplication.IsSet() {
		toSerialize["usedForReplication"] = o.UsedForReplication.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.RemoteTenantId.IsSet() {
		toSerialize["remoteTenantId"] = o.RemoteTenantId.Get()
	}
	if o.InterfaceGroupName.IsSet() {
		toSerialize["interfaceGroupName"] = o.InterfaceGroupName.Get()
	}
	if o.UseBifrostBrokerChannel.IsSet() {
		toSerialize["useBifrostBrokerChannel"] = o.UseBifrostBrokerChannel.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCreateOdpRemoteClusterParams struct {
	value *CreateOdpRemoteClusterParams
	isSet bool
}

func (v NullableCreateOdpRemoteClusterParams) Get() *CreateOdpRemoteClusterParams {
	return v.value
}

func (v *NullableCreateOdpRemoteClusterParams) Set(val *CreateOdpRemoteClusterParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateOdpRemoteClusterParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateOdpRemoteClusterParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateOdpRemoteClusterParams(val *CreateOdpRemoteClusterParams) *NullableCreateOdpRemoteClusterParams {
	return &NullableCreateOdpRemoteClusterParams{value: val, isSet: true}
}

func (v NullableCreateOdpRemoteClusterParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateOdpRemoteClusterParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o CreateOdpRemoteClusterParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}