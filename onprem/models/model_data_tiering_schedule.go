/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// DataTieringSchedule Specifies the data tiering schedule.
type DataTieringSchedule struct {
	// Specifies how often to migrate data from source to target
	Unit NullableString `json:"unit,omitempty"`
	DaySchedule *DaySchedule `json:"daySchedule,omitempty"`
	WeekSchedule *WeekSchedule `json:"weekSchedule,omitempty"`
	MonthSchedule *MonthSchedule `json:"monthSchedule,omitempty"`
	StartTime *TimeOfDay `json:"startTime,omitempty"`
}

// NewDataTieringSchedule instantiates a new DataTieringSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataTieringSchedule() *DataTieringSchedule {
	this := DataTieringSchedule{}
	return &this
}

// NewDataTieringScheduleWithDefaults instantiates a new DataTieringSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataTieringScheduleWithDefaults() *DataTieringSchedule {
	this := DataTieringSchedule{}
	return &this
}

// GetUnit returns the Unit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTieringSchedule) GetUnit() string {
	if o == nil || o.Unit.Get() == nil {
		var ret string
		return ret
	}
	return *o.Unit.Get()
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTieringSchedule) GetUnitOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Unit.Get(), o.Unit.IsSet()
}

// HasUnit returns a boolean if a field has been set.
func (o *DataTieringSchedule) HasUnit() bool {
	if o != nil && o.Unit.IsSet() {
		return true
	}

	return false
}

// SetUnit gets a reference to the given NullableString and assigns it to the Unit field.
func (o *DataTieringSchedule) SetUnit(v string) {
	o.Unit.Set(&v)
}
// SetUnitNil sets the value for Unit to be an explicit nil
func (o *DataTieringSchedule) SetUnitNil() {
	o.Unit.Set(nil)
}

// UnsetUnit ensures that no value is present for Unit, not even an explicit nil
func (o *DataTieringSchedule) UnsetUnit() {
	o.Unit.Unset()
}

// GetDaySchedule returns the DaySchedule field value if set, zero value otherwise.
func (o *DataTieringSchedule) GetDaySchedule() DaySchedule {
	if o == nil || o.DaySchedule == nil {
		var ret DaySchedule
		return ret
	}
	return *o.DaySchedule
}

// GetDayScheduleOk returns a tuple with the DaySchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataTieringSchedule) GetDayScheduleOk() (*DaySchedule, bool) {
	if o == nil || o.DaySchedule == nil {
		return nil, false
	}
	return o.DaySchedule, true
}

// HasDaySchedule returns a boolean if a field has been set.
func (o *DataTieringSchedule) HasDaySchedule() bool {
	if o != nil && o.DaySchedule != nil {
		return true
	}

	return false
}

// SetDaySchedule gets a reference to the given DaySchedule and assigns it to the DaySchedule field.
func (o *DataTieringSchedule) SetDaySchedule(v DaySchedule) {
	o.DaySchedule = &v
}

// GetWeekSchedule returns the WeekSchedule field value if set, zero value otherwise.
func (o *DataTieringSchedule) GetWeekSchedule() WeekSchedule {
	if o == nil || o.WeekSchedule == nil {
		var ret WeekSchedule
		return ret
	}
	return *o.WeekSchedule
}

// GetWeekScheduleOk returns a tuple with the WeekSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataTieringSchedule) GetWeekScheduleOk() (*WeekSchedule, bool) {
	if o == nil || o.WeekSchedule == nil {
		return nil, false
	}
	return o.WeekSchedule, true
}

// HasWeekSchedule returns a boolean if a field has been set.
func (o *DataTieringSchedule) HasWeekSchedule() bool {
	if o != nil && o.WeekSchedule != nil {
		return true
	}

	return false
}

// SetWeekSchedule gets a reference to the given WeekSchedule and assigns it to the WeekSchedule field.
func (o *DataTieringSchedule) SetWeekSchedule(v WeekSchedule) {
	o.WeekSchedule = &v
}

// GetMonthSchedule returns the MonthSchedule field value if set, zero value otherwise.
func (o *DataTieringSchedule) GetMonthSchedule() MonthSchedule {
	if o == nil || o.MonthSchedule == nil {
		var ret MonthSchedule
		return ret
	}
	return *o.MonthSchedule
}

// GetMonthScheduleOk returns a tuple with the MonthSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataTieringSchedule) GetMonthScheduleOk() (*MonthSchedule, bool) {
	if o == nil || o.MonthSchedule == nil {
		return nil, false
	}
	return o.MonthSchedule, true
}

// HasMonthSchedule returns a boolean if a field has been set.
func (o *DataTieringSchedule) HasMonthSchedule() bool {
	if o != nil && o.MonthSchedule != nil {
		return true
	}

	return false
}

// SetMonthSchedule gets a reference to the given MonthSchedule and assigns it to the MonthSchedule field.
func (o *DataTieringSchedule) SetMonthSchedule(v MonthSchedule) {
	o.MonthSchedule = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *DataTieringSchedule) GetStartTime() TimeOfDay {
	if o == nil || o.StartTime == nil {
		var ret TimeOfDay
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataTieringSchedule) GetStartTimeOk() (*TimeOfDay, bool) {
	if o == nil || o.StartTime == nil {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *DataTieringSchedule) HasStartTime() bool {
	if o != nil && o.StartTime != nil {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given TimeOfDay and assigns it to the StartTime field.
func (o *DataTieringSchedule) SetStartTime(v TimeOfDay) {
	o.StartTime = &v
}

func (o DataTieringSchedule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Unit.IsSet() {
		toSerialize["unit"] = o.Unit.Get()
	}
	if o.DaySchedule != nil {
		toSerialize["daySchedule"] = o.DaySchedule
	}
	if o.WeekSchedule != nil {
		toSerialize["weekSchedule"] = o.WeekSchedule
	}
	if o.MonthSchedule != nil {
		toSerialize["monthSchedule"] = o.MonthSchedule
	}
	if o.StartTime != nil {
		toSerialize["startTime"] = o.StartTime
	}
	return json.Marshal(toSerialize)
}

type NullableDataTieringSchedule struct {
	value *DataTieringSchedule
	isSet bool
}

func (v NullableDataTieringSchedule) Get() *DataTieringSchedule {
	return v.value
}

func (v *NullableDataTieringSchedule) Set(val *DataTieringSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableDataTieringSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableDataTieringSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataTieringSchedule(val *DataTieringSchedule) *NullableDataTieringSchedule {
	return &NullableDataTieringSchedule{value: val, isSet: true}
}

func (v NullableDataTieringSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataTieringSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o DataTieringSchedule) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}