/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// TagObject Specifies all the tag related info for an object.
type TagObject struct {
	// Specifies tag applied to the object.
	Tags []TagInfo `json:"tags,omitempty"`
	// Specifies snapshot tags applied to the object.
	SnapshotTags []SnapshotTagInfo `json:"snapshotTags,omitempty"`
}

// NewTagObject instantiates a new TagObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagObject() *TagObject {
	this := TagObject{}
	return &this
}

// NewTagObjectWithDefaults instantiates a new TagObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagObjectWithDefaults() *TagObject {
	this := TagObject{}
	return &this
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TagObject) GetTags() []TagInfo {
	if o == nil  {
		var ret []TagInfo
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TagObject) GetTagsOk() (*[]TagInfo, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return &o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *TagObject) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []TagInfo and assigns it to the Tags field.
func (o *TagObject) SetTags(v []TagInfo) {
	o.Tags = v
}

// GetSnapshotTags returns the SnapshotTags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TagObject) GetSnapshotTags() []SnapshotTagInfo {
	if o == nil  {
		var ret []SnapshotTagInfo
		return ret
	}
	return o.SnapshotTags
}

// GetSnapshotTagsOk returns a tuple with the SnapshotTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TagObject) GetSnapshotTagsOk() (*[]SnapshotTagInfo, bool) {
	if o == nil || o.SnapshotTags == nil {
		return nil, false
	}
	return &o.SnapshotTags, true
}

// HasSnapshotTags returns a boolean if a field has been set.
func (o *TagObject) HasSnapshotTags() bool {
	if o != nil && o.SnapshotTags != nil {
		return true
	}

	return false
}

// SetSnapshotTags gets a reference to the given []SnapshotTagInfo and assigns it to the SnapshotTags field.
func (o *TagObject) SetSnapshotTags(v []SnapshotTagInfo) {
	o.SnapshotTags = v
}

func (o TagObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.SnapshotTags != nil {
		toSerialize["snapshotTags"] = o.SnapshotTags
	}
	return json.Marshal(toSerialize)
}

type NullableTagObject struct {
	value *TagObject
	isSet bool
}

func (v NullableTagObject) Get() *TagObject {
	return v.value
}

func (v *NullableTagObject) Set(val *TagObject) {
	v.value = val
	v.isSet = true
}

func (v NullableTagObject) IsSet() bool {
	return v.isSet
}

func (v *NullableTagObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagObject(val *TagObject) *NullableTagObject {
	return &NullableTagObject{value: val, isSet: true}
}

func (v NullableTagObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o TagObject) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}