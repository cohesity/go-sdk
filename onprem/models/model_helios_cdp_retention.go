/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// HeliosCdpRetention Specifies the retention of a CDP backup.
type HeliosCdpRetention struct {
	// Specificies the Retention Unit of a CDP backup measured in minutes or hours.
	Unit NullableString `json:"unit,omitempty"`
	// Specifies the duration for a cdp backup retention.
	Duration NullableInt32 `json:"duration,omitempty"`
	DataLockConfig *DataLockConfig `json:"dataLockConfig,omitempty"`
}

// NewHeliosCdpRetention instantiates a new HeliosCdpRetention object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeliosCdpRetention() *HeliosCdpRetention {
	this := HeliosCdpRetention{}
	return &this
}

// NewHeliosCdpRetentionWithDefaults instantiates a new HeliosCdpRetention object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeliosCdpRetentionWithDefaults() *HeliosCdpRetention {
	this := HeliosCdpRetention{}
	return &this
}

// GetUnit returns the Unit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeliosCdpRetention) GetUnit() string {
	if o == nil || o.Unit.Get() == nil {
		var ret string
		return ret
	}
	return *o.Unit.Get()
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeliosCdpRetention) GetUnitOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Unit.Get(), o.Unit.IsSet()
}

// HasUnit returns a boolean if a field has been set.
func (o *HeliosCdpRetention) HasUnit() bool {
	if o != nil && o.Unit.IsSet() {
		return true
	}

	return false
}

// SetUnit gets a reference to the given NullableString and assigns it to the Unit field.
func (o *HeliosCdpRetention) SetUnit(v string) {
	o.Unit.Set(&v)
}
// SetUnitNil sets the value for Unit to be an explicit nil
func (o *HeliosCdpRetention) SetUnitNil() {
	o.Unit.Set(nil)
}

// UnsetUnit ensures that no value is present for Unit, not even an explicit nil
func (o *HeliosCdpRetention) UnsetUnit() {
	o.Unit.Unset()
}

// GetDuration returns the Duration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeliosCdpRetention) GetDuration() int32 {
	if o == nil || o.Duration.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Duration.Get()
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeliosCdpRetention) GetDurationOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Duration.Get(), o.Duration.IsSet()
}

// HasDuration returns a boolean if a field has been set.
func (o *HeliosCdpRetention) HasDuration() bool {
	if o != nil && o.Duration.IsSet() {
		return true
	}

	return false
}

// SetDuration gets a reference to the given NullableInt32 and assigns it to the Duration field.
func (o *HeliosCdpRetention) SetDuration(v int32) {
	o.Duration.Set(&v)
}
// SetDurationNil sets the value for Duration to be an explicit nil
func (o *HeliosCdpRetention) SetDurationNil() {
	o.Duration.Set(nil)
}

// UnsetDuration ensures that no value is present for Duration, not even an explicit nil
func (o *HeliosCdpRetention) UnsetDuration() {
	o.Duration.Unset()
}

// GetDataLockConfig returns the DataLockConfig field value if set, zero value otherwise.
func (o *HeliosCdpRetention) GetDataLockConfig() DataLockConfig {
	if o == nil || o.DataLockConfig == nil {
		var ret DataLockConfig
		return ret
	}
	return *o.DataLockConfig
}

// GetDataLockConfigOk returns a tuple with the DataLockConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeliosCdpRetention) GetDataLockConfigOk() (*DataLockConfig, bool) {
	if o == nil || o.DataLockConfig == nil {
		return nil, false
	}
	return o.DataLockConfig, true
}

// HasDataLockConfig returns a boolean if a field has been set.
func (o *HeliosCdpRetention) HasDataLockConfig() bool {
	if o != nil && o.DataLockConfig != nil {
		return true
	}

	return false
}

// SetDataLockConfig gets a reference to the given DataLockConfig and assigns it to the DataLockConfig field.
func (o *HeliosCdpRetention) SetDataLockConfig(v DataLockConfig) {
	o.DataLockConfig = &v
}

func (o HeliosCdpRetention) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Unit.IsSet() {
		toSerialize["unit"] = o.Unit.Get()
	}
	if o.Duration.IsSet() {
		toSerialize["duration"] = o.Duration.Get()
	}
	if o.DataLockConfig != nil {
		toSerialize["dataLockConfig"] = o.DataLockConfig
	}
	return json.Marshal(toSerialize)
}

type NullableHeliosCdpRetention struct {
	value *HeliosCdpRetention
	isSet bool
}

func (v NullableHeliosCdpRetention) Get() *HeliosCdpRetention {
	return v.value
}

func (v *NullableHeliosCdpRetention) Set(val *HeliosCdpRetention) {
	v.value = val
	v.isSet = true
}

func (v NullableHeliosCdpRetention) IsSet() bool {
	return v.isSet
}

func (v *NullableHeliosCdpRetention) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeliosCdpRetention(val *HeliosCdpRetention) *NullableHeliosCdpRetention {
	return &NullableHeliosCdpRetention{value: val, isSet: true}
}

func (v NullableHeliosCdpRetention) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeliosCdpRetention) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o HeliosCdpRetention) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}