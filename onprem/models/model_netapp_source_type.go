/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// NetappSourceType Netapp Source type.
type NetappSourceType struct {
	// Specifies Netapp Source type.
	NetappProtocol *string `json:"netappProtocol,omitempty"`
}

// NewNetappSourceType instantiates a new NetappSourceType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetappSourceType() *NetappSourceType {
	this := NetappSourceType{}
	return &this
}

// NewNetappSourceTypeWithDefaults instantiates a new NetappSourceType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetappSourceTypeWithDefaults() *NetappSourceType {
	this := NetappSourceType{}
	return &this
}

// GetNetappProtocol returns the NetappProtocol field value if set, zero value otherwise.
func (o *NetappSourceType) GetNetappProtocol() string {
	if o == nil || o.NetappProtocol == nil {
		var ret string
		return ret
	}
	return *o.NetappProtocol
}

// GetNetappProtocolOk returns a tuple with the NetappProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetappSourceType) GetNetappProtocolOk() (*string, bool) {
	if o == nil || o.NetappProtocol == nil {
		return nil, false
	}
	return o.NetappProtocol, true
}

// HasNetappProtocol returns a boolean if a field has been set.
func (o *NetappSourceType) HasNetappProtocol() bool {
	if o != nil && o.NetappProtocol != nil {
		return true
	}

	return false
}

// SetNetappProtocol gets a reference to the given string and assigns it to the NetappProtocol field.
func (o *NetappSourceType) SetNetappProtocol(v string) {
	o.NetappProtocol = &v
}

func (o NetappSourceType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NetappProtocol != nil {
		toSerialize["netappProtocol"] = o.NetappProtocol
	}
	return json.Marshal(toSerialize)
}

type NullableNetappSourceType struct {
	value *NetappSourceType
	isSet bool
}

func (v NullableNetappSourceType) Get() *NetappSourceType {
	return v.value
}

func (v *NullableNetappSourceType) Set(val *NetappSourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableNetappSourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableNetappSourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetappSourceType(val *NetappSourceType) *NullableNetappSourceType {
	return &NullableNetappSourceType{value: val, isSet: true}
}

func (v NullableNetappSourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetappSourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o NetappSourceType) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}