/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// AcropolisTargetParamsForRecoverVm Specifies the parameters for an Acropolis recovery target.
type AcropolisTargetParamsForRecoverVm struct {
	// Specifies params to rename the VMs that are recovered. If not specified, the original names of the VMs are preserved.
	RenameRecoveredVmsParams NullableRecoveredOrClonedVmsRenameConfig `json:"renameRecoveredVmsParams,omitempty"`
	// Specifies the recovery target configuration if recovery has to be done to a different location which is different from original source or to original Source with different configuration. If not specified, then the recovery of the vms will be performed to original location with all configuration parameters retained.
	RecoveryTargetConfig NullableRecoverAcropolisVmTargetConfig `json:"recoveryTargetConfig,omitempty"`
	// Specifies VLAN Params associated with the recovered. If this is not specified, then the VLAN settings will be automatically selected from one of the below options: a. If VLANs are configured on Cohesity, then the VLAN host/VIP will be automatically based on the client's (e.g. ESXI host) IP address. b. If VLANs are not configured on Cohesity, then the partition hostname or VIPs will be used for Recovery.
	VlanConfig NullableRecoveryVlanConfig `json:"vlanConfig,omitempty"`
	// Specifies whether to power on vms after recovery. If not specified, or false, recovered vms will be in powered off state.
	PowerOnVms NullableBool `json:"powerOnVms,omitempty"`
	// Specifies whether to continue recovering other vms if one of vms failed to recover. Default value is false.
	ContinueOnError NullableBool `json:"continueOnError,omitempty"`
}

// NewAcropolisTargetParamsForRecoverVm instantiates a new AcropolisTargetParamsForRecoverVm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAcropolisTargetParamsForRecoverVm() *AcropolisTargetParamsForRecoverVm {
	this := AcropolisTargetParamsForRecoverVm{}
	return &this
}

// NewAcropolisTargetParamsForRecoverVmWithDefaults instantiates a new AcropolisTargetParamsForRecoverVm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAcropolisTargetParamsForRecoverVmWithDefaults() *AcropolisTargetParamsForRecoverVm {
	this := AcropolisTargetParamsForRecoverVm{}
	return &this
}

// GetRenameRecoveredVmsParams returns the RenameRecoveredVmsParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AcropolisTargetParamsForRecoverVm) GetRenameRecoveredVmsParams() RecoveredOrClonedVmsRenameConfig {
	if o == nil || o.RenameRecoveredVmsParams.Get() == nil {
		var ret RecoveredOrClonedVmsRenameConfig
		return ret
	}
	return *o.RenameRecoveredVmsParams.Get()
}

// GetRenameRecoveredVmsParamsOk returns a tuple with the RenameRecoveredVmsParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AcropolisTargetParamsForRecoverVm) GetRenameRecoveredVmsParamsOk() (*RecoveredOrClonedVmsRenameConfig, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RenameRecoveredVmsParams.Get(), o.RenameRecoveredVmsParams.IsSet()
}

// HasRenameRecoveredVmsParams returns a boolean if a field has been set.
func (o *AcropolisTargetParamsForRecoverVm) HasRenameRecoveredVmsParams() bool {
	if o != nil && o.RenameRecoveredVmsParams.IsSet() {
		return true
	}

	return false
}

// SetRenameRecoveredVmsParams gets a reference to the given NullableRecoveredOrClonedVmsRenameConfig and assigns it to the RenameRecoveredVmsParams field.
func (o *AcropolisTargetParamsForRecoverVm) SetRenameRecoveredVmsParams(v RecoveredOrClonedVmsRenameConfig) {
	o.RenameRecoveredVmsParams.Set(&v)
}
// SetRenameRecoveredVmsParamsNil sets the value for RenameRecoveredVmsParams to be an explicit nil
func (o *AcropolisTargetParamsForRecoverVm) SetRenameRecoveredVmsParamsNil() {
	o.RenameRecoveredVmsParams.Set(nil)
}

// UnsetRenameRecoveredVmsParams ensures that no value is present for RenameRecoveredVmsParams, not even an explicit nil
func (o *AcropolisTargetParamsForRecoverVm) UnsetRenameRecoveredVmsParams() {
	o.RenameRecoveredVmsParams.Unset()
}

// GetRecoveryTargetConfig returns the RecoveryTargetConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AcropolisTargetParamsForRecoverVm) GetRecoveryTargetConfig() RecoverAcropolisVmTargetConfig {
	if o == nil || o.RecoveryTargetConfig.Get() == nil {
		var ret RecoverAcropolisVmTargetConfig
		return ret
	}
	return *o.RecoveryTargetConfig.Get()
}

// GetRecoveryTargetConfigOk returns a tuple with the RecoveryTargetConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AcropolisTargetParamsForRecoverVm) GetRecoveryTargetConfigOk() (*RecoverAcropolisVmTargetConfig, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RecoveryTargetConfig.Get(), o.RecoveryTargetConfig.IsSet()
}

// HasRecoveryTargetConfig returns a boolean if a field has been set.
func (o *AcropolisTargetParamsForRecoverVm) HasRecoveryTargetConfig() bool {
	if o != nil && o.RecoveryTargetConfig.IsSet() {
		return true
	}

	return false
}

// SetRecoveryTargetConfig gets a reference to the given NullableRecoverAcropolisVmTargetConfig and assigns it to the RecoveryTargetConfig field.
func (o *AcropolisTargetParamsForRecoverVm) SetRecoveryTargetConfig(v RecoverAcropolisVmTargetConfig) {
	o.RecoveryTargetConfig.Set(&v)
}
// SetRecoveryTargetConfigNil sets the value for RecoveryTargetConfig to be an explicit nil
func (o *AcropolisTargetParamsForRecoverVm) SetRecoveryTargetConfigNil() {
	o.RecoveryTargetConfig.Set(nil)
}

// UnsetRecoveryTargetConfig ensures that no value is present for RecoveryTargetConfig, not even an explicit nil
func (o *AcropolisTargetParamsForRecoverVm) UnsetRecoveryTargetConfig() {
	o.RecoveryTargetConfig.Unset()
}

// GetVlanConfig returns the VlanConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AcropolisTargetParamsForRecoverVm) GetVlanConfig() RecoveryVlanConfig {
	if o == nil || o.VlanConfig.Get() == nil {
		var ret RecoveryVlanConfig
		return ret
	}
	return *o.VlanConfig.Get()
}

// GetVlanConfigOk returns a tuple with the VlanConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AcropolisTargetParamsForRecoverVm) GetVlanConfigOk() (*RecoveryVlanConfig, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VlanConfig.Get(), o.VlanConfig.IsSet()
}

// HasVlanConfig returns a boolean if a field has been set.
func (o *AcropolisTargetParamsForRecoverVm) HasVlanConfig() bool {
	if o != nil && o.VlanConfig.IsSet() {
		return true
	}

	return false
}

// SetVlanConfig gets a reference to the given NullableRecoveryVlanConfig and assigns it to the VlanConfig field.
func (o *AcropolisTargetParamsForRecoverVm) SetVlanConfig(v RecoveryVlanConfig) {
	o.VlanConfig.Set(&v)
}
// SetVlanConfigNil sets the value for VlanConfig to be an explicit nil
func (o *AcropolisTargetParamsForRecoverVm) SetVlanConfigNil() {
	o.VlanConfig.Set(nil)
}

// UnsetVlanConfig ensures that no value is present for VlanConfig, not even an explicit nil
func (o *AcropolisTargetParamsForRecoverVm) UnsetVlanConfig() {
	o.VlanConfig.Unset()
}

// GetPowerOnVms returns the PowerOnVms field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AcropolisTargetParamsForRecoverVm) GetPowerOnVms() bool {
	if o == nil || o.PowerOnVms.Get() == nil {
		var ret bool
		return ret
	}
	return *o.PowerOnVms.Get()
}

// GetPowerOnVmsOk returns a tuple with the PowerOnVms field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AcropolisTargetParamsForRecoverVm) GetPowerOnVmsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PowerOnVms.Get(), o.PowerOnVms.IsSet()
}

// HasPowerOnVms returns a boolean if a field has been set.
func (o *AcropolisTargetParamsForRecoverVm) HasPowerOnVms() bool {
	if o != nil && o.PowerOnVms.IsSet() {
		return true
	}

	return false
}

// SetPowerOnVms gets a reference to the given NullableBool and assigns it to the PowerOnVms field.
func (o *AcropolisTargetParamsForRecoverVm) SetPowerOnVms(v bool) {
	o.PowerOnVms.Set(&v)
}
// SetPowerOnVmsNil sets the value for PowerOnVms to be an explicit nil
func (o *AcropolisTargetParamsForRecoverVm) SetPowerOnVmsNil() {
	o.PowerOnVms.Set(nil)
}

// UnsetPowerOnVms ensures that no value is present for PowerOnVms, not even an explicit nil
func (o *AcropolisTargetParamsForRecoverVm) UnsetPowerOnVms() {
	o.PowerOnVms.Unset()
}

// GetContinueOnError returns the ContinueOnError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AcropolisTargetParamsForRecoverVm) GetContinueOnError() bool {
	if o == nil || o.ContinueOnError.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ContinueOnError.Get()
}

// GetContinueOnErrorOk returns a tuple with the ContinueOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AcropolisTargetParamsForRecoverVm) GetContinueOnErrorOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ContinueOnError.Get(), o.ContinueOnError.IsSet()
}

// HasContinueOnError returns a boolean if a field has been set.
func (o *AcropolisTargetParamsForRecoverVm) HasContinueOnError() bool {
	if o != nil && o.ContinueOnError.IsSet() {
		return true
	}

	return false
}

// SetContinueOnError gets a reference to the given NullableBool and assigns it to the ContinueOnError field.
func (o *AcropolisTargetParamsForRecoverVm) SetContinueOnError(v bool) {
	o.ContinueOnError.Set(&v)
}
// SetContinueOnErrorNil sets the value for ContinueOnError to be an explicit nil
func (o *AcropolisTargetParamsForRecoverVm) SetContinueOnErrorNil() {
	o.ContinueOnError.Set(nil)
}

// UnsetContinueOnError ensures that no value is present for ContinueOnError, not even an explicit nil
func (o *AcropolisTargetParamsForRecoverVm) UnsetContinueOnError() {
	o.ContinueOnError.Unset()
}

func (o AcropolisTargetParamsForRecoverVm) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RenameRecoveredVmsParams.IsSet() {
		toSerialize["renameRecoveredVmsParams"] = o.RenameRecoveredVmsParams.Get()
	}
	if o.RecoveryTargetConfig.IsSet() {
		toSerialize["recoveryTargetConfig"] = o.RecoveryTargetConfig.Get()
	}
	if o.VlanConfig.IsSet() {
		toSerialize["vlanConfig"] = o.VlanConfig.Get()
	}
	if o.PowerOnVms.IsSet() {
		toSerialize["powerOnVms"] = o.PowerOnVms.Get()
	}
	if o.ContinueOnError.IsSet() {
		toSerialize["continueOnError"] = o.ContinueOnError.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAcropolisTargetParamsForRecoverVm struct {
	value *AcropolisTargetParamsForRecoverVm
	isSet bool
}

func (v NullableAcropolisTargetParamsForRecoverVm) Get() *AcropolisTargetParamsForRecoverVm {
	return v.value
}

func (v *NullableAcropolisTargetParamsForRecoverVm) Set(val *AcropolisTargetParamsForRecoverVm) {
	v.value = val
	v.isSet = true
}

func (v NullableAcropolisTargetParamsForRecoverVm) IsSet() bool {
	return v.isSet
}

func (v *NullableAcropolisTargetParamsForRecoverVm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAcropolisTargetParamsForRecoverVm(val *AcropolisTargetParamsForRecoverVm) *NullableAcropolisTargetParamsForRecoverVm {
	return &NullableAcropolisTargetParamsForRecoverVm{value: val, isSet: true}
}

func (v NullableAcropolisTargetParamsForRecoverVm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAcropolisTargetParamsForRecoverVm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o AcropolisTargetParamsForRecoverVm) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}