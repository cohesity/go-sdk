/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// IncrementalSchedule Specifies settings that defines how frequent backup will be performed for a Protection Group.
type IncrementalSchedule struct {
	// Specifies how often to start new runs of a Protection Group. <br>'Minutes' specifies that Protection Group run starts periodically after certain number of minutes specified in 'frequency' field. <br>'Hours' specifies that Protection Group run starts periodically after certain number of hours specified in 'frequency' field. <br>'Days' specifies that Protection Group run starts periodically after certain number of days specified in 'frequency' field. <br>'Week' specifies that new Protection Group runs start weekly on certain days specified using 'dayOfWeek' field. <br>'Month' specifies that new Protection Group runs start monthly on certain day of specific week. This schedule needs 'weekOfMonth' and 'dayOfWeek' fields to be set. <br> Example: To run the Protection Group on Second Sunday of Every Month, following schedule need to be set: <br> unit: 'Month' <br> dayOfWeek: 'Sunday' <br> weekOfMonth: 'Second'
	Unit NullableString `json:"unit"`
	MinuteSchedule *MinuteSchedule `json:"minuteSchedule,omitempty"`
	HourSchedule *HourSchedule `json:"hourSchedule,omitempty"`
	DaySchedule *DaySchedule `json:"daySchedule,omitempty"`
	WeekSchedule *WeekSchedule `json:"weekSchedule,omitempty"`
	MonthSchedule *MonthSchedule `json:"monthSchedule,omitempty"`
}

// NewIncrementalSchedule instantiates a new IncrementalSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncrementalSchedule(unit NullableString) *IncrementalSchedule {
	this := IncrementalSchedule{}
	this.Unit = unit
	return &this
}

// NewIncrementalScheduleWithDefaults instantiates a new IncrementalSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncrementalScheduleWithDefaults() *IncrementalSchedule {
	this := IncrementalSchedule{}
	return &this
}

// GetUnit returns the Unit field value
// If the value is explicit nil, the zero value for string will be returned
func (o *IncrementalSchedule) GetUnit() string {
	if o == nil || o.Unit.Get() == nil {
		var ret string
		return ret
	}

	return *o.Unit.Get()
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncrementalSchedule) GetUnitOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Unit.Get(), o.Unit.IsSet()
}

// SetUnit sets field value
func (o *IncrementalSchedule) SetUnit(v string) {
	o.Unit.Set(&v)
}

// GetMinuteSchedule returns the MinuteSchedule field value if set, zero value otherwise.
func (o *IncrementalSchedule) GetMinuteSchedule() MinuteSchedule {
	if o == nil || o.MinuteSchedule == nil {
		var ret MinuteSchedule
		return ret
	}
	return *o.MinuteSchedule
}

// GetMinuteScheduleOk returns a tuple with the MinuteSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncrementalSchedule) GetMinuteScheduleOk() (*MinuteSchedule, bool) {
	if o == nil || o.MinuteSchedule == nil {
		return nil, false
	}
	return o.MinuteSchedule, true
}

// HasMinuteSchedule returns a boolean if a field has been set.
func (o *IncrementalSchedule) HasMinuteSchedule() bool {
	if o != nil && o.MinuteSchedule != nil {
		return true
	}

	return false
}

// SetMinuteSchedule gets a reference to the given MinuteSchedule and assigns it to the MinuteSchedule field.
func (o *IncrementalSchedule) SetMinuteSchedule(v MinuteSchedule) {
	o.MinuteSchedule = &v
}

// GetHourSchedule returns the HourSchedule field value if set, zero value otherwise.
func (o *IncrementalSchedule) GetHourSchedule() HourSchedule {
	if o == nil || o.HourSchedule == nil {
		var ret HourSchedule
		return ret
	}
	return *o.HourSchedule
}

// GetHourScheduleOk returns a tuple with the HourSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncrementalSchedule) GetHourScheduleOk() (*HourSchedule, bool) {
	if o == nil || o.HourSchedule == nil {
		return nil, false
	}
	return o.HourSchedule, true
}

// HasHourSchedule returns a boolean if a field has been set.
func (o *IncrementalSchedule) HasHourSchedule() bool {
	if o != nil && o.HourSchedule != nil {
		return true
	}

	return false
}

// SetHourSchedule gets a reference to the given HourSchedule and assigns it to the HourSchedule field.
func (o *IncrementalSchedule) SetHourSchedule(v HourSchedule) {
	o.HourSchedule = &v
}

// GetDaySchedule returns the DaySchedule field value if set, zero value otherwise.
func (o *IncrementalSchedule) GetDaySchedule() DaySchedule {
	if o == nil || o.DaySchedule == nil {
		var ret DaySchedule
		return ret
	}
	return *o.DaySchedule
}

// GetDayScheduleOk returns a tuple with the DaySchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncrementalSchedule) GetDayScheduleOk() (*DaySchedule, bool) {
	if o == nil || o.DaySchedule == nil {
		return nil, false
	}
	return o.DaySchedule, true
}

// HasDaySchedule returns a boolean if a field has been set.
func (o *IncrementalSchedule) HasDaySchedule() bool {
	if o != nil && o.DaySchedule != nil {
		return true
	}

	return false
}

// SetDaySchedule gets a reference to the given DaySchedule and assigns it to the DaySchedule field.
func (o *IncrementalSchedule) SetDaySchedule(v DaySchedule) {
	o.DaySchedule = &v
}

// GetWeekSchedule returns the WeekSchedule field value if set, zero value otherwise.
func (o *IncrementalSchedule) GetWeekSchedule() WeekSchedule {
	if o == nil || o.WeekSchedule == nil {
		var ret WeekSchedule
		return ret
	}
	return *o.WeekSchedule
}

// GetWeekScheduleOk returns a tuple with the WeekSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncrementalSchedule) GetWeekScheduleOk() (*WeekSchedule, bool) {
	if o == nil || o.WeekSchedule == nil {
		return nil, false
	}
	return o.WeekSchedule, true
}

// HasWeekSchedule returns a boolean if a field has been set.
func (o *IncrementalSchedule) HasWeekSchedule() bool {
	if o != nil && o.WeekSchedule != nil {
		return true
	}

	return false
}

// SetWeekSchedule gets a reference to the given WeekSchedule and assigns it to the WeekSchedule field.
func (o *IncrementalSchedule) SetWeekSchedule(v WeekSchedule) {
	o.WeekSchedule = &v
}

// GetMonthSchedule returns the MonthSchedule field value if set, zero value otherwise.
func (o *IncrementalSchedule) GetMonthSchedule() MonthSchedule {
	if o == nil || o.MonthSchedule == nil {
		var ret MonthSchedule
		return ret
	}
	return *o.MonthSchedule
}

// GetMonthScheduleOk returns a tuple with the MonthSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncrementalSchedule) GetMonthScheduleOk() (*MonthSchedule, bool) {
	if o == nil || o.MonthSchedule == nil {
		return nil, false
	}
	return o.MonthSchedule, true
}

// HasMonthSchedule returns a boolean if a field has been set.
func (o *IncrementalSchedule) HasMonthSchedule() bool {
	if o != nil && o.MonthSchedule != nil {
		return true
	}

	return false
}

// SetMonthSchedule gets a reference to the given MonthSchedule and assigns it to the MonthSchedule field.
func (o *IncrementalSchedule) SetMonthSchedule(v MonthSchedule) {
	o.MonthSchedule = &v
}

func (o IncrementalSchedule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["unit"] = o.Unit.Get()
	}
	if o.MinuteSchedule != nil {
		toSerialize["minuteSchedule"] = o.MinuteSchedule
	}
	if o.HourSchedule != nil {
		toSerialize["hourSchedule"] = o.HourSchedule
	}
	if o.DaySchedule != nil {
		toSerialize["daySchedule"] = o.DaySchedule
	}
	if o.WeekSchedule != nil {
		toSerialize["weekSchedule"] = o.WeekSchedule
	}
	if o.MonthSchedule != nil {
		toSerialize["monthSchedule"] = o.MonthSchedule
	}
	return json.Marshal(toSerialize)
}

type NullableIncrementalSchedule struct {
	value *IncrementalSchedule
	isSet bool
}

func (v NullableIncrementalSchedule) Get() *IncrementalSchedule {
	return v.value
}

func (v *NullableIncrementalSchedule) Set(val *IncrementalSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableIncrementalSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableIncrementalSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncrementalSchedule(val *IncrementalSchedule) *NullableIncrementalSchedule {
	return &NullableIncrementalSchedule{value: val, isSet: true}
}

func (v NullableIncrementalSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncrementalSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o IncrementalSchedule) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}