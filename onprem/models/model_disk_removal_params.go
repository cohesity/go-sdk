/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// DiskRemovalParams Specifies parameters to initiate/cancel disk removal.
type DiskRemovalParams struct {
	// If true, cancels disk removal which is already in progress.
	Cancel NullableBool `json:"cancel"`
}

// NewDiskRemovalParams instantiates a new DiskRemovalParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiskRemovalParams(cancel NullableBool) *DiskRemovalParams {
	this := DiskRemovalParams{}
	this.Cancel = cancel
	return &this
}

// NewDiskRemovalParamsWithDefaults instantiates a new DiskRemovalParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskRemovalParamsWithDefaults() *DiskRemovalParams {
	this := DiskRemovalParams{}
	return &this
}

// GetCancel returns the Cancel field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *DiskRemovalParams) GetCancel() bool {
	if o == nil || o.Cancel.Get() == nil {
		var ret bool
		return ret
	}

	return *o.Cancel.Get()
}

// GetCancelOk returns a tuple with the Cancel field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiskRemovalParams) GetCancelOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Cancel.Get(), o.Cancel.IsSet()
}

// SetCancel sets field value
func (o *DiskRemovalParams) SetCancel(v bool) {
	o.Cancel.Set(&v)
}

func (o DiskRemovalParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["cancel"] = o.Cancel.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDiskRemovalParams struct {
	value *DiskRemovalParams
	isSet bool
}

func (v NullableDiskRemovalParams) Get() *DiskRemovalParams {
	return v.value
}

func (v *NullableDiskRemovalParams) Set(val *DiskRemovalParams) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskRemovalParams) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskRemovalParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskRemovalParams(val *DiskRemovalParams) *NullableDiskRemovalParams {
	return &NullableDiskRemovalParams{value: val, isSet: true}
}

func (v NullableDiskRemovalParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskRemovalParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o DiskRemovalParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}