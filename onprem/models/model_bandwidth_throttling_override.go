/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// BandwidthThrottlingOverride Specifies a list of override bandwidth limits and time periods when those limits override the rateLimitBytesPerSec limit.
type BandwidthThrottlingOverride struct {
	// Specifies the value for the specified time period. The value is specified in bytes per second.
	BytesPerSecond NullableInt64 `json:"bytesPerSecond,omitempty"`
	TimePeriods *TimeOfAWeek `json:"timePeriods,omitempty"`
}

// NewBandwidthThrottlingOverride instantiates a new BandwidthThrottlingOverride object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBandwidthThrottlingOverride() *BandwidthThrottlingOverride {
	this := BandwidthThrottlingOverride{}
	return &this
}

// NewBandwidthThrottlingOverrideWithDefaults instantiates a new BandwidthThrottlingOverride object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBandwidthThrottlingOverrideWithDefaults() *BandwidthThrottlingOverride {
	this := BandwidthThrottlingOverride{}
	return &this
}

// GetBytesPerSecond returns the BytesPerSecond field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BandwidthThrottlingOverride) GetBytesPerSecond() int64 {
	if o == nil || o.BytesPerSecond.Get() == nil {
		var ret int64
		return ret
	}
	return *o.BytesPerSecond.Get()
}

// GetBytesPerSecondOk returns a tuple with the BytesPerSecond field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BandwidthThrottlingOverride) GetBytesPerSecondOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BytesPerSecond.Get(), o.BytesPerSecond.IsSet()
}

// HasBytesPerSecond returns a boolean if a field has been set.
func (o *BandwidthThrottlingOverride) HasBytesPerSecond() bool {
	if o != nil && o.BytesPerSecond.IsSet() {
		return true
	}

	return false
}

// SetBytesPerSecond gets a reference to the given NullableInt64 and assigns it to the BytesPerSecond field.
func (o *BandwidthThrottlingOverride) SetBytesPerSecond(v int64) {
	o.BytesPerSecond.Set(&v)
}
// SetBytesPerSecondNil sets the value for BytesPerSecond to be an explicit nil
func (o *BandwidthThrottlingOverride) SetBytesPerSecondNil() {
	o.BytesPerSecond.Set(nil)
}

// UnsetBytesPerSecond ensures that no value is present for BytesPerSecond, not even an explicit nil
func (o *BandwidthThrottlingOverride) UnsetBytesPerSecond() {
	o.BytesPerSecond.Unset()
}

// GetTimePeriods returns the TimePeriods field value if set, zero value otherwise.
func (o *BandwidthThrottlingOverride) GetTimePeriods() TimeOfAWeek {
	if o == nil || o.TimePeriods == nil {
		var ret TimeOfAWeek
		return ret
	}
	return *o.TimePeriods
}

// GetTimePeriodsOk returns a tuple with the TimePeriods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BandwidthThrottlingOverride) GetTimePeriodsOk() (*TimeOfAWeek, bool) {
	if o == nil || o.TimePeriods == nil {
		return nil, false
	}
	return o.TimePeriods, true
}

// HasTimePeriods returns a boolean if a field has been set.
func (o *BandwidthThrottlingOverride) HasTimePeriods() bool {
	if o != nil && o.TimePeriods != nil {
		return true
	}

	return false
}

// SetTimePeriods gets a reference to the given TimeOfAWeek and assigns it to the TimePeriods field.
func (o *BandwidthThrottlingOverride) SetTimePeriods(v TimeOfAWeek) {
	o.TimePeriods = &v
}

func (o BandwidthThrottlingOverride) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BytesPerSecond.IsSet() {
		toSerialize["bytesPerSecond"] = o.BytesPerSecond.Get()
	}
	if o.TimePeriods != nil {
		toSerialize["timePeriods"] = o.TimePeriods
	}
	return json.Marshal(toSerialize)
}

type NullableBandwidthThrottlingOverride struct {
	value *BandwidthThrottlingOverride
	isSet bool
}

func (v NullableBandwidthThrottlingOverride) Get() *BandwidthThrottlingOverride {
	return v.value
}

func (v *NullableBandwidthThrottlingOverride) Set(val *BandwidthThrottlingOverride) {
	v.value = val
	v.isSet = true
}

func (v NullableBandwidthThrottlingOverride) IsSet() bool {
	return v.isSet
}

func (v *NullableBandwidthThrottlingOverride) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBandwidthThrottlingOverride(val *BandwidthThrottlingOverride) *NullableBandwidthThrottlingOverride {
	return &NullableBandwidthThrottlingOverride{value: val, isSet: true}
}

func (v NullableBandwidthThrottlingOverride) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBandwidthThrottlingOverride) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o BandwidthThrottlingOverride) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}