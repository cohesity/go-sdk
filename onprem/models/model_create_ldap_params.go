/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// CreateLdapParams Specifies the parameters to create an LDAP.
type CreateLdapParams struct {
	// Specifies the LDAP name.
	Name NullableString `json:"name"`
	// Specifies a list of preferred LDAP servers. Servers should either be FQDNs or IP addresses.
	PreferredLdapServers []string `json:"preferredLdapServers"`
	// Specifies the base distinguished name used as the base for LDAP search requests.
	BaseDistinguishedName NullableString `json:"baseDistinguishedName"`
	// Specifies the LDAP authentication type.
	AuthType string `json:"authType"`
	// Specifies the LDAP server port.
	Port NullableInt32 `json:"port,omitempty"`
	// Specifies the parameters for LDAP with 'Simple' authentication type.
	SimpleAuthParams *SimpleAuthParams `json:"simpleAuthParams,omitempty"`
	// Specifies the Active Directory id which is mapped to this LDAP.
	ActiveDirectoryId NullableInt64 `json:"activeDirectoryId,omitempty"`
	// Specifies name of the LDAP attribute used for common name of an object.
	AttributeCommonName NullableString `json:"attributeCommonName,omitempty"`
	// Specifies name of the attribute used to lookup unix GID of an LDAP user.
	AttributeGid NullableString `json:"attributeGid,omitempty"`
	// Specifies name of the attribute used to lookup unix UID of an LDAP user.
	AttributeUid NullableString `json:"attributeUid,omitempty"`
	// Specifies name of the LDAP attribute used to lookup members of a group.
	AttributeMemberOf NullableString `json:"attributeMemberOf,omitempty"`
	// Specifies name of the LDAP attribute used to lookup a user by user ID.
	AttributeUsername NullableString `json:"attributeUsername,omitempty"`
	// Specifies name of the LDAP group object class for user accounts.
	ObjectClassGroup NullableString `json:"objectClassGroup,omitempty"`
	// Specifies name of the LDAP user object class for user accounts.
	ObjectClassUser NullableString `json:"objectClassUser,omitempty"`
}

// NewCreateLdapParams instantiates a new CreateLdapParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateLdapParams(name NullableString, preferredLdapServers []string, baseDistinguishedName NullableString, authType string) *CreateLdapParams {
	this := CreateLdapParams{}
	this.Name = name
	this.PreferredLdapServers = preferredLdapServers
	this.BaseDistinguishedName = baseDistinguishedName
	this.AuthType = authType
	return &this
}

// NewCreateLdapParamsWithDefaults instantiates a new CreateLdapParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateLdapParamsWithDefaults() *CreateLdapParams {
	this := CreateLdapParams{}
	return &this
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CreateLdapParams) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateLdapParams) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *CreateLdapParams) SetName(v string) {
	o.Name.Set(&v)
}

// GetPreferredLdapServers returns the PreferredLdapServers field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *CreateLdapParams) GetPreferredLdapServers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.PreferredLdapServers
}

// GetPreferredLdapServersOk returns a tuple with the PreferredLdapServers field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateLdapParams) GetPreferredLdapServersOk() (*[]string, bool) {
	if o == nil || o.PreferredLdapServers == nil {
		return nil, false
	}
	return &o.PreferredLdapServers, true
}

// SetPreferredLdapServers sets field value
func (o *CreateLdapParams) SetPreferredLdapServers(v []string) {
	o.PreferredLdapServers = v
}

// GetBaseDistinguishedName returns the BaseDistinguishedName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CreateLdapParams) GetBaseDistinguishedName() string {
	if o == nil || o.BaseDistinguishedName.Get() == nil {
		var ret string
		return ret
	}

	return *o.BaseDistinguishedName.Get()
}

// GetBaseDistinguishedNameOk returns a tuple with the BaseDistinguishedName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateLdapParams) GetBaseDistinguishedNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BaseDistinguishedName.Get(), o.BaseDistinguishedName.IsSet()
}

// SetBaseDistinguishedName sets field value
func (o *CreateLdapParams) SetBaseDistinguishedName(v string) {
	o.BaseDistinguishedName.Set(&v)
}

// GetAuthType returns the AuthType field value
func (o *CreateLdapParams) GetAuthType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthType
}

// GetAuthTypeOk returns a tuple with the AuthType field value
// and a boolean to check if the value has been set.
func (o *CreateLdapParams) GetAuthTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AuthType, true
}

// SetAuthType sets field value
func (o *CreateLdapParams) SetAuthType(v string) {
	o.AuthType = v
}

// GetPort returns the Port field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateLdapParams) GetPort() int32 {
	if o == nil || o.Port.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Port.Get()
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateLdapParams) GetPortOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Port.Get(), o.Port.IsSet()
}

// HasPort returns a boolean if a field has been set.
func (o *CreateLdapParams) HasPort() bool {
	if o != nil && o.Port.IsSet() {
		return true
	}

	return false
}

// SetPort gets a reference to the given NullableInt32 and assigns it to the Port field.
func (o *CreateLdapParams) SetPort(v int32) {
	o.Port.Set(&v)
}
// SetPortNil sets the value for Port to be an explicit nil
func (o *CreateLdapParams) SetPortNil() {
	o.Port.Set(nil)
}

// UnsetPort ensures that no value is present for Port, not even an explicit nil
func (o *CreateLdapParams) UnsetPort() {
	o.Port.Unset()
}

// GetSimpleAuthParams returns the SimpleAuthParams field value if set, zero value otherwise.
func (o *CreateLdapParams) GetSimpleAuthParams() SimpleAuthParams {
	if o == nil || o.SimpleAuthParams == nil {
		var ret SimpleAuthParams
		return ret
	}
	return *o.SimpleAuthParams
}

// GetSimpleAuthParamsOk returns a tuple with the SimpleAuthParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateLdapParams) GetSimpleAuthParamsOk() (*SimpleAuthParams, bool) {
	if o == nil || o.SimpleAuthParams == nil {
		return nil, false
	}
	return o.SimpleAuthParams, true
}

// HasSimpleAuthParams returns a boolean if a field has been set.
func (o *CreateLdapParams) HasSimpleAuthParams() bool {
	if o != nil && o.SimpleAuthParams != nil {
		return true
	}

	return false
}

// SetSimpleAuthParams gets a reference to the given SimpleAuthParams and assigns it to the SimpleAuthParams field.
func (o *CreateLdapParams) SetSimpleAuthParams(v SimpleAuthParams) {
	o.SimpleAuthParams = &v
}

// GetActiveDirectoryId returns the ActiveDirectoryId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateLdapParams) GetActiveDirectoryId() int64 {
	if o == nil || o.ActiveDirectoryId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ActiveDirectoryId.Get()
}

// GetActiveDirectoryIdOk returns a tuple with the ActiveDirectoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateLdapParams) GetActiveDirectoryIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ActiveDirectoryId.Get(), o.ActiveDirectoryId.IsSet()
}

// HasActiveDirectoryId returns a boolean if a field has been set.
func (o *CreateLdapParams) HasActiveDirectoryId() bool {
	if o != nil && o.ActiveDirectoryId.IsSet() {
		return true
	}

	return false
}

// SetActiveDirectoryId gets a reference to the given NullableInt64 and assigns it to the ActiveDirectoryId field.
func (o *CreateLdapParams) SetActiveDirectoryId(v int64) {
	o.ActiveDirectoryId.Set(&v)
}
// SetActiveDirectoryIdNil sets the value for ActiveDirectoryId to be an explicit nil
func (o *CreateLdapParams) SetActiveDirectoryIdNil() {
	o.ActiveDirectoryId.Set(nil)
}

// UnsetActiveDirectoryId ensures that no value is present for ActiveDirectoryId, not even an explicit nil
func (o *CreateLdapParams) UnsetActiveDirectoryId() {
	o.ActiveDirectoryId.Unset()
}

// GetAttributeCommonName returns the AttributeCommonName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateLdapParams) GetAttributeCommonName() string {
	if o == nil || o.AttributeCommonName.Get() == nil {
		var ret string
		return ret
	}
	return *o.AttributeCommonName.Get()
}

// GetAttributeCommonNameOk returns a tuple with the AttributeCommonName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateLdapParams) GetAttributeCommonNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AttributeCommonName.Get(), o.AttributeCommonName.IsSet()
}

// HasAttributeCommonName returns a boolean if a field has been set.
func (o *CreateLdapParams) HasAttributeCommonName() bool {
	if o != nil && o.AttributeCommonName.IsSet() {
		return true
	}

	return false
}

// SetAttributeCommonName gets a reference to the given NullableString and assigns it to the AttributeCommonName field.
func (o *CreateLdapParams) SetAttributeCommonName(v string) {
	o.AttributeCommonName.Set(&v)
}
// SetAttributeCommonNameNil sets the value for AttributeCommonName to be an explicit nil
func (o *CreateLdapParams) SetAttributeCommonNameNil() {
	o.AttributeCommonName.Set(nil)
}

// UnsetAttributeCommonName ensures that no value is present for AttributeCommonName, not even an explicit nil
func (o *CreateLdapParams) UnsetAttributeCommonName() {
	o.AttributeCommonName.Unset()
}

// GetAttributeGid returns the AttributeGid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateLdapParams) GetAttributeGid() string {
	if o == nil || o.AttributeGid.Get() == nil {
		var ret string
		return ret
	}
	return *o.AttributeGid.Get()
}

// GetAttributeGidOk returns a tuple with the AttributeGid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateLdapParams) GetAttributeGidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AttributeGid.Get(), o.AttributeGid.IsSet()
}

// HasAttributeGid returns a boolean if a field has been set.
func (o *CreateLdapParams) HasAttributeGid() bool {
	if o != nil && o.AttributeGid.IsSet() {
		return true
	}

	return false
}

// SetAttributeGid gets a reference to the given NullableString and assigns it to the AttributeGid field.
func (o *CreateLdapParams) SetAttributeGid(v string) {
	o.AttributeGid.Set(&v)
}
// SetAttributeGidNil sets the value for AttributeGid to be an explicit nil
func (o *CreateLdapParams) SetAttributeGidNil() {
	o.AttributeGid.Set(nil)
}

// UnsetAttributeGid ensures that no value is present for AttributeGid, not even an explicit nil
func (o *CreateLdapParams) UnsetAttributeGid() {
	o.AttributeGid.Unset()
}

// GetAttributeUid returns the AttributeUid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateLdapParams) GetAttributeUid() string {
	if o == nil || o.AttributeUid.Get() == nil {
		var ret string
		return ret
	}
	return *o.AttributeUid.Get()
}

// GetAttributeUidOk returns a tuple with the AttributeUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateLdapParams) GetAttributeUidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AttributeUid.Get(), o.AttributeUid.IsSet()
}

// HasAttributeUid returns a boolean if a field has been set.
func (o *CreateLdapParams) HasAttributeUid() bool {
	if o != nil && o.AttributeUid.IsSet() {
		return true
	}

	return false
}

// SetAttributeUid gets a reference to the given NullableString and assigns it to the AttributeUid field.
func (o *CreateLdapParams) SetAttributeUid(v string) {
	o.AttributeUid.Set(&v)
}
// SetAttributeUidNil sets the value for AttributeUid to be an explicit nil
func (o *CreateLdapParams) SetAttributeUidNil() {
	o.AttributeUid.Set(nil)
}

// UnsetAttributeUid ensures that no value is present for AttributeUid, not even an explicit nil
func (o *CreateLdapParams) UnsetAttributeUid() {
	o.AttributeUid.Unset()
}

// GetAttributeMemberOf returns the AttributeMemberOf field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateLdapParams) GetAttributeMemberOf() string {
	if o == nil || o.AttributeMemberOf.Get() == nil {
		var ret string
		return ret
	}
	return *o.AttributeMemberOf.Get()
}

// GetAttributeMemberOfOk returns a tuple with the AttributeMemberOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateLdapParams) GetAttributeMemberOfOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AttributeMemberOf.Get(), o.AttributeMemberOf.IsSet()
}

// HasAttributeMemberOf returns a boolean if a field has been set.
func (o *CreateLdapParams) HasAttributeMemberOf() bool {
	if o != nil && o.AttributeMemberOf.IsSet() {
		return true
	}

	return false
}

// SetAttributeMemberOf gets a reference to the given NullableString and assigns it to the AttributeMemberOf field.
func (o *CreateLdapParams) SetAttributeMemberOf(v string) {
	o.AttributeMemberOf.Set(&v)
}
// SetAttributeMemberOfNil sets the value for AttributeMemberOf to be an explicit nil
func (o *CreateLdapParams) SetAttributeMemberOfNil() {
	o.AttributeMemberOf.Set(nil)
}

// UnsetAttributeMemberOf ensures that no value is present for AttributeMemberOf, not even an explicit nil
func (o *CreateLdapParams) UnsetAttributeMemberOf() {
	o.AttributeMemberOf.Unset()
}

// GetAttributeUsername returns the AttributeUsername field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateLdapParams) GetAttributeUsername() string {
	if o == nil || o.AttributeUsername.Get() == nil {
		var ret string
		return ret
	}
	return *o.AttributeUsername.Get()
}

// GetAttributeUsernameOk returns a tuple with the AttributeUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateLdapParams) GetAttributeUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AttributeUsername.Get(), o.AttributeUsername.IsSet()
}

// HasAttributeUsername returns a boolean if a field has been set.
func (o *CreateLdapParams) HasAttributeUsername() bool {
	if o != nil && o.AttributeUsername.IsSet() {
		return true
	}

	return false
}

// SetAttributeUsername gets a reference to the given NullableString and assigns it to the AttributeUsername field.
func (o *CreateLdapParams) SetAttributeUsername(v string) {
	o.AttributeUsername.Set(&v)
}
// SetAttributeUsernameNil sets the value for AttributeUsername to be an explicit nil
func (o *CreateLdapParams) SetAttributeUsernameNil() {
	o.AttributeUsername.Set(nil)
}

// UnsetAttributeUsername ensures that no value is present for AttributeUsername, not even an explicit nil
func (o *CreateLdapParams) UnsetAttributeUsername() {
	o.AttributeUsername.Unset()
}

// GetObjectClassGroup returns the ObjectClassGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateLdapParams) GetObjectClassGroup() string {
	if o == nil || o.ObjectClassGroup.Get() == nil {
		var ret string
		return ret
	}
	return *o.ObjectClassGroup.Get()
}

// GetObjectClassGroupOk returns a tuple with the ObjectClassGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateLdapParams) GetObjectClassGroupOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ObjectClassGroup.Get(), o.ObjectClassGroup.IsSet()
}

// HasObjectClassGroup returns a boolean if a field has been set.
func (o *CreateLdapParams) HasObjectClassGroup() bool {
	if o != nil && o.ObjectClassGroup.IsSet() {
		return true
	}

	return false
}

// SetObjectClassGroup gets a reference to the given NullableString and assigns it to the ObjectClassGroup field.
func (o *CreateLdapParams) SetObjectClassGroup(v string) {
	o.ObjectClassGroup.Set(&v)
}
// SetObjectClassGroupNil sets the value for ObjectClassGroup to be an explicit nil
func (o *CreateLdapParams) SetObjectClassGroupNil() {
	o.ObjectClassGroup.Set(nil)
}

// UnsetObjectClassGroup ensures that no value is present for ObjectClassGroup, not even an explicit nil
func (o *CreateLdapParams) UnsetObjectClassGroup() {
	o.ObjectClassGroup.Unset()
}

// GetObjectClassUser returns the ObjectClassUser field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateLdapParams) GetObjectClassUser() string {
	if o == nil || o.ObjectClassUser.Get() == nil {
		var ret string
		return ret
	}
	return *o.ObjectClassUser.Get()
}

// GetObjectClassUserOk returns a tuple with the ObjectClassUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateLdapParams) GetObjectClassUserOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ObjectClassUser.Get(), o.ObjectClassUser.IsSet()
}

// HasObjectClassUser returns a boolean if a field has been set.
func (o *CreateLdapParams) HasObjectClassUser() bool {
	if o != nil && o.ObjectClassUser.IsSet() {
		return true
	}

	return false
}

// SetObjectClassUser gets a reference to the given NullableString and assigns it to the ObjectClassUser field.
func (o *CreateLdapParams) SetObjectClassUser(v string) {
	o.ObjectClassUser.Set(&v)
}
// SetObjectClassUserNil sets the value for ObjectClassUser to be an explicit nil
func (o *CreateLdapParams) SetObjectClassUserNil() {
	o.ObjectClassUser.Set(nil)
}

// UnsetObjectClassUser ensures that no value is present for ObjectClassUser, not even an explicit nil
func (o *CreateLdapParams) UnsetObjectClassUser() {
	o.ObjectClassUser.Unset()
}

func (o CreateLdapParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name.Get()
	}
	if o.PreferredLdapServers != nil {
		toSerialize["preferredLdapServers"] = o.PreferredLdapServers
	}
	if true {
		toSerialize["baseDistinguishedName"] = o.BaseDistinguishedName.Get()
	}
	if true {
		toSerialize["authType"] = o.AuthType
	}
	if o.Port.IsSet() {
		toSerialize["port"] = o.Port.Get()
	}
	if o.SimpleAuthParams != nil {
		toSerialize["simpleAuthParams"] = o.SimpleAuthParams
	}
	if o.ActiveDirectoryId.IsSet() {
		toSerialize["activeDirectoryId"] = o.ActiveDirectoryId.Get()
	}
	if o.AttributeCommonName.IsSet() {
		toSerialize["attributeCommonName"] = o.AttributeCommonName.Get()
	}
	if o.AttributeGid.IsSet() {
		toSerialize["attributeGid"] = o.AttributeGid.Get()
	}
	if o.AttributeUid.IsSet() {
		toSerialize["attributeUid"] = o.AttributeUid.Get()
	}
	if o.AttributeMemberOf.IsSet() {
		toSerialize["attributeMemberOf"] = o.AttributeMemberOf.Get()
	}
	if o.AttributeUsername.IsSet() {
		toSerialize["attributeUsername"] = o.AttributeUsername.Get()
	}
	if o.ObjectClassGroup.IsSet() {
		toSerialize["objectClassGroup"] = o.ObjectClassGroup.Get()
	}
	if o.ObjectClassUser.IsSet() {
		toSerialize["objectClassUser"] = o.ObjectClassUser.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCreateLdapParams struct {
	value *CreateLdapParams
	isSet bool
}

func (v NullableCreateLdapParams) Get() *CreateLdapParams {
	return v.value
}

func (v *NullableCreateLdapParams) Set(val *CreateLdapParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateLdapParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateLdapParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateLdapParams(val *CreateLdapParams) *NullableCreateLdapParams {
	return &NullableCreateLdapParams{value: val, isSet: true}
}

func (v NullableCreateLdapParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateLdapParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o CreateLdapParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}