/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// NodeInterfaces Specifies the interfaces present on a Node.
type NodeInterfaces struct {
	// Specifies the id of the node.
	Id NullableInt64 `json:"id,omitempty"`
	// Specifies the list of network interfaces present on this Node.
	Interfaces *[]NetworkInterface `json:"interfaces,omitempty"`
}

// NewNodeInterfaces instantiates a new NodeInterfaces object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeInterfaces() *NodeInterfaces {
	this := NodeInterfaces{}
	return &this
}

// NewNodeInterfacesWithDefaults instantiates a new NodeInterfaces object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeInterfacesWithDefaults() *NodeInterfaces {
	this := NodeInterfaces{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeInterfaces) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeInterfaces) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *NodeInterfaces) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *NodeInterfaces) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *NodeInterfaces) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *NodeInterfaces) UnsetId() {
	o.Id.Unset()
}

// GetInterfaces returns the Interfaces field value if set, zero value otherwise.
func (o *NodeInterfaces) GetInterfaces() []NetworkInterface {
	if o == nil || o.Interfaces == nil {
		var ret []NetworkInterface
		return ret
	}
	return *o.Interfaces
}

// GetInterfacesOk returns a tuple with the Interfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInterfaces) GetInterfacesOk() (*[]NetworkInterface, bool) {
	if o == nil || o.Interfaces == nil {
		return nil, false
	}
	return o.Interfaces, true
}

// HasInterfaces returns a boolean if a field has been set.
func (o *NodeInterfaces) HasInterfaces() bool {
	if o != nil && o.Interfaces != nil {
		return true
	}

	return false
}

// SetInterfaces gets a reference to the given []NetworkInterface and assigns it to the Interfaces field.
func (o *NodeInterfaces) SetInterfaces(v []NetworkInterface) {
	o.Interfaces = &v
}

func (o NodeInterfaces) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Interfaces != nil {
		toSerialize["interfaces"] = o.Interfaces
	}
	return json.Marshal(toSerialize)
}

type NullableNodeInterfaces struct {
	value *NodeInterfaces
	isSet bool
}

func (v NullableNodeInterfaces) Get() *NodeInterfaces {
	return v.value
}

func (v *NullableNodeInterfaces) Set(val *NodeInterfaces) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeInterfaces) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeInterfaces) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeInterfaces(val *NodeInterfaces) *NullableNodeInterfaces {
	return &NullableNodeInterfaces{value: val, isSet: true}
}

func (v NullableNodeInterfaces) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeInterfaces) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o NodeInterfaces) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}