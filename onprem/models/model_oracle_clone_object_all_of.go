/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// OracleCloneObjectAllOf struct for OracleCloneObjectAllOf
type OracleCloneObjectAllOf struct {
	// Specifies the version of the Oracle database.
	DbVersion NullableString `json:"dbVersion,omitempty"`
}

// NewOracleCloneObjectAllOf instantiates a new OracleCloneObjectAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleCloneObjectAllOf() *OracleCloneObjectAllOf {
	this := OracleCloneObjectAllOf{}
	return &this
}

// NewOracleCloneObjectAllOfWithDefaults instantiates a new OracleCloneObjectAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleCloneObjectAllOfWithDefaults() *OracleCloneObjectAllOf {
	this := OracleCloneObjectAllOf{}
	return &this
}

// GetDbVersion returns the DbVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleCloneObjectAllOf) GetDbVersion() string {
	if o == nil || o.DbVersion.Get() == nil {
		var ret string
		return ret
	}
	return *o.DbVersion.Get()
}

// GetDbVersionOk returns a tuple with the DbVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleCloneObjectAllOf) GetDbVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DbVersion.Get(), o.DbVersion.IsSet()
}

// HasDbVersion returns a boolean if a field has been set.
func (o *OracleCloneObjectAllOf) HasDbVersion() bool {
	if o != nil && o.DbVersion.IsSet() {
		return true
	}

	return false
}

// SetDbVersion gets a reference to the given NullableString and assigns it to the DbVersion field.
func (o *OracleCloneObjectAllOf) SetDbVersion(v string) {
	o.DbVersion.Set(&v)
}
// SetDbVersionNil sets the value for DbVersion to be an explicit nil
func (o *OracleCloneObjectAllOf) SetDbVersionNil() {
	o.DbVersion.Set(nil)
}

// UnsetDbVersion ensures that no value is present for DbVersion, not even an explicit nil
func (o *OracleCloneObjectAllOf) UnsetDbVersion() {
	o.DbVersion.Unset()
}

func (o OracleCloneObjectAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DbVersion.IsSet() {
		toSerialize["dbVersion"] = o.DbVersion.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableOracleCloneObjectAllOf struct {
	value *OracleCloneObjectAllOf
	isSet bool
}

func (v NullableOracleCloneObjectAllOf) Get() *OracleCloneObjectAllOf {
	return v.value
}

func (v *NullableOracleCloneObjectAllOf) Set(val *OracleCloneObjectAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleCloneObjectAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleCloneObjectAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleCloneObjectAllOf(val *OracleCloneObjectAllOf) *NullableOracleCloneObjectAllOf {
	return &NullableOracleCloneObjectAllOf{value: val, isSet: true}
}

func (v NullableOracleCloneObjectAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleCloneObjectAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o OracleCloneObjectAllOf) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}