/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// ObjectLocalSnapshotInfo Specifies the Local snapshot information for the object.
type ObjectLocalSnapshotInfo struct {
	// Specifies the id of the local snapshot for the object.
	SnapshotId NullableString `json:"snapshotId,omitempty"`
	// Specifies the logical size of this snapshot in bytes.
	LogicalSizeBytes NullableInt64 `json:"logicalSizeBytes,omitempty"`
}

// NewObjectLocalSnapshotInfo instantiates a new ObjectLocalSnapshotInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectLocalSnapshotInfo() *ObjectLocalSnapshotInfo {
	this := ObjectLocalSnapshotInfo{}
	return &this
}

// NewObjectLocalSnapshotInfoWithDefaults instantiates a new ObjectLocalSnapshotInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectLocalSnapshotInfoWithDefaults() *ObjectLocalSnapshotInfo {
	this := ObjectLocalSnapshotInfo{}
	return &this
}

// GetSnapshotId returns the SnapshotId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectLocalSnapshotInfo) GetSnapshotId() string {
	if o == nil || o.SnapshotId.Get() == nil {
		var ret string
		return ret
	}
	return *o.SnapshotId.Get()
}

// GetSnapshotIdOk returns a tuple with the SnapshotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectLocalSnapshotInfo) GetSnapshotIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SnapshotId.Get(), o.SnapshotId.IsSet()
}

// HasSnapshotId returns a boolean if a field has been set.
func (o *ObjectLocalSnapshotInfo) HasSnapshotId() bool {
	if o != nil && o.SnapshotId.IsSet() {
		return true
	}

	return false
}

// SetSnapshotId gets a reference to the given NullableString and assigns it to the SnapshotId field.
func (o *ObjectLocalSnapshotInfo) SetSnapshotId(v string) {
	o.SnapshotId.Set(&v)
}
// SetSnapshotIdNil sets the value for SnapshotId to be an explicit nil
func (o *ObjectLocalSnapshotInfo) SetSnapshotIdNil() {
	o.SnapshotId.Set(nil)
}

// UnsetSnapshotId ensures that no value is present for SnapshotId, not even an explicit nil
func (o *ObjectLocalSnapshotInfo) UnsetSnapshotId() {
	o.SnapshotId.Unset()
}

// GetLogicalSizeBytes returns the LogicalSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectLocalSnapshotInfo) GetLogicalSizeBytes() int64 {
	if o == nil || o.LogicalSizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LogicalSizeBytes.Get()
}

// GetLogicalSizeBytesOk returns a tuple with the LogicalSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectLocalSnapshotInfo) GetLogicalSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogicalSizeBytes.Get(), o.LogicalSizeBytes.IsSet()
}

// HasLogicalSizeBytes returns a boolean if a field has been set.
func (o *ObjectLocalSnapshotInfo) HasLogicalSizeBytes() bool {
	if o != nil && o.LogicalSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetLogicalSizeBytes gets a reference to the given NullableInt64 and assigns it to the LogicalSizeBytes field.
func (o *ObjectLocalSnapshotInfo) SetLogicalSizeBytes(v int64) {
	o.LogicalSizeBytes.Set(&v)
}
// SetLogicalSizeBytesNil sets the value for LogicalSizeBytes to be an explicit nil
func (o *ObjectLocalSnapshotInfo) SetLogicalSizeBytesNil() {
	o.LogicalSizeBytes.Set(nil)
}

// UnsetLogicalSizeBytes ensures that no value is present for LogicalSizeBytes, not even an explicit nil
func (o *ObjectLocalSnapshotInfo) UnsetLogicalSizeBytes() {
	o.LogicalSizeBytes.Unset()
}

func (o ObjectLocalSnapshotInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SnapshotId.IsSet() {
		toSerialize["snapshotId"] = o.SnapshotId.Get()
	}
	if o.LogicalSizeBytes.IsSet() {
		toSerialize["logicalSizeBytes"] = o.LogicalSizeBytes.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableObjectLocalSnapshotInfo struct {
	value *ObjectLocalSnapshotInfo
	isSet bool
}

func (v NullableObjectLocalSnapshotInfo) Get() *ObjectLocalSnapshotInfo {
	return v.value
}

func (v *NullableObjectLocalSnapshotInfo) Set(val *ObjectLocalSnapshotInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectLocalSnapshotInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectLocalSnapshotInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectLocalSnapshotInfo(val *ObjectLocalSnapshotInfo) *NullableObjectLocalSnapshotInfo {
	return &NullableObjectLocalSnapshotInfo{value: val, isSet: true}
}

func (v NullableObjectLocalSnapshotInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectLocalSnapshotInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o ObjectLocalSnapshotInfo) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}