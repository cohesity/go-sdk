/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// RigelConnector Specify a Rigel connector.
type RigelConnector struct {
	// Specifies the id of the connector.
	Id NullableInt64 `json:"id,omitempty"`
	// Specifies the name of the connector.
	Name NullableString `json:"name,omitempty"`
	// Specifies the Id of the connection which this connector belongs to.
	ConnectionId NullableInt64 `json:"connectionId,omitempty"`
	// Specifies the version of the connector's certificate. The version is used to revoke/renew connector's certificates.
	CertificateVersion NullableInt64 `json:"certificateVersion,omitempty"`
	ConnectionStatus *ConnectorConnectionInfo `json:"connectionStatus,omitempty"`
}

// NewRigelConnector instantiates a new RigelConnector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRigelConnector() *RigelConnector {
	this := RigelConnector{}
	return &this
}

// NewRigelConnectorWithDefaults instantiates a new RigelConnector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRigelConnectorWithDefaults() *RigelConnector {
	this := RigelConnector{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RigelConnector) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RigelConnector) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *RigelConnector) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *RigelConnector) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *RigelConnector) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *RigelConnector) UnsetId() {
	o.Id.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RigelConnector) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RigelConnector) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *RigelConnector) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *RigelConnector) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *RigelConnector) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *RigelConnector) UnsetName() {
	o.Name.Unset()
}

// GetConnectionId returns the ConnectionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RigelConnector) GetConnectionId() int64 {
	if o == nil || o.ConnectionId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ConnectionId.Get()
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RigelConnector) GetConnectionIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ConnectionId.Get(), o.ConnectionId.IsSet()
}

// HasConnectionId returns a boolean if a field has been set.
func (o *RigelConnector) HasConnectionId() bool {
	if o != nil && o.ConnectionId.IsSet() {
		return true
	}

	return false
}

// SetConnectionId gets a reference to the given NullableInt64 and assigns it to the ConnectionId field.
func (o *RigelConnector) SetConnectionId(v int64) {
	o.ConnectionId.Set(&v)
}
// SetConnectionIdNil sets the value for ConnectionId to be an explicit nil
func (o *RigelConnector) SetConnectionIdNil() {
	o.ConnectionId.Set(nil)
}

// UnsetConnectionId ensures that no value is present for ConnectionId, not even an explicit nil
func (o *RigelConnector) UnsetConnectionId() {
	o.ConnectionId.Unset()
}

// GetCertificateVersion returns the CertificateVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RigelConnector) GetCertificateVersion() int64 {
	if o == nil || o.CertificateVersion.Get() == nil {
		var ret int64
		return ret
	}
	return *o.CertificateVersion.Get()
}

// GetCertificateVersionOk returns a tuple with the CertificateVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RigelConnector) GetCertificateVersionOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CertificateVersion.Get(), o.CertificateVersion.IsSet()
}

// HasCertificateVersion returns a boolean if a field has been set.
func (o *RigelConnector) HasCertificateVersion() bool {
	if o != nil && o.CertificateVersion.IsSet() {
		return true
	}

	return false
}

// SetCertificateVersion gets a reference to the given NullableInt64 and assigns it to the CertificateVersion field.
func (o *RigelConnector) SetCertificateVersion(v int64) {
	o.CertificateVersion.Set(&v)
}
// SetCertificateVersionNil sets the value for CertificateVersion to be an explicit nil
func (o *RigelConnector) SetCertificateVersionNil() {
	o.CertificateVersion.Set(nil)
}

// UnsetCertificateVersion ensures that no value is present for CertificateVersion, not even an explicit nil
func (o *RigelConnector) UnsetCertificateVersion() {
	o.CertificateVersion.Unset()
}

// GetConnectionStatus returns the ConnectionStatus field value if set, zero value otherwise.
func (o *RigelConnector) GetConnectionStatus() ConnectorConnectionInfo {
	if o == nil || o.ConnectionStatus == nil {
		var ret ConnectorConnectionInfo
		return ret
	}
	return *o.ConnectionStatus
}

// GetConnectionStatusOk returns a tuple with the ConnectionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RigelConnector) GetConnectionStatusOk() (*ConnectorConnectionInfo, bool) {
	if o == nil || o.ConnectionStatus == nil {
		return nil, false
	}
	return o.ConnectionStatus, true
}

// HasConnectionStatus returns a boolean if a field has been set.
func (o *RigelConnector) HasConnectionStatus() bool {
	if o != nil && o.ConnectionStatus != nil {
		return true
	}

	return false
}

// SetConnectionStatus gets a reference to the given ConnectorConnectionInfo and assigns it to the ConnectionStatus field.
func (o *RigelConnector) SetConnectionStatus(v ConnectorConnectionInfo) {
	o.ConnectionStatus = &v
}

func (o RigelConnector) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.ConnectionId.IsSet() {
		toSerialize["connectionId"] = o.ConnectionId.Get()
	}
	if o.CertificateVersion.IsSet() {
		toSerialize["certificateVersion"] = o.CertificateVersion.Get()
	}
	if o.ConnectionStatus != nil {
		toSerialize["connectionStatus"] = o.ConnectionStatus
	}
	return json.Marshal(toSerialize)
}

type NullableRigelConnector struct {
	value *RigelConnector
	isSet bool
}

func (v NullableRigelConnector) Get() *RigelConnector {
	return v.value
}

func (v *NullableRigelConnector) Set(val *RigelConnector) {
	v.value = val
	v.isSet = true
}

func (v NullableRigelConnector) IsSet() bool {
	return v.isSet
}

func (v *NullableRigelConnector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRigelConnector(val *RigelConnector) *NullableRigelConnector {
	return &NullableRigelConnector{value: val, isSet: true}
}

func (v NullableRigelConnector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRigelConnector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o RigelConnector) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}