/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// VmwareObjectEnableAppProtectionParams Specifies the parameters to enable app protection on VMware.
type VmwareObjectEnableAppProtectionParams struct {
	// Specifies the app from which protection must be enabled.
	AppType NullableString `json:"appType"`
	EnableSqlProtectionParams *VmwareObjectEnableSqlProtectionParams `json:"enableSqlProtectionParams,omitempty"`
}

// NewVmwareObjectEnableAppProtectionParams instantiates a new VmwareObjectEnableAppProtectionParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmwareObjectEnableAppProtectionParams(appType NullableString) *VmwareObjectEnableAppProtectionParams {
	this := VmwareObjectEnableAppProtectionParams{}
	this.AppType = appType
	return &this
}

// NewVmwareObjectEnableAppProtectionParamsWithDefaults instantiates a new VmwareObjectEnableAppProtectionParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmwareObjectEnableAppProtectionParamsWithDefaults() *VmwareObjectEnableAppProtectionParams {
	this := VmwareObjectEnableAppProtectionParams{}
	return &this
}

// GetAppType returns the AppType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *VmwareObjectEnableAppProtectionParams) GetAppType() string {
	if o == nil || o.AppType.Get() == nil {
		var ret string
		return ret
	}

	return *o.AppType.Get()
}

// GetAppTypeOk returns a tuple with the AppType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareObjectEnableAppProtectionParams) GetAppTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AppType.Get(), o.AppType.IsSet()
}

// SetAppType sets field value
func (o *VmwareObjectEnableAppProtectionParams) SetAppType(v string) {
	o.AppType.Set(&v)
}

// GetEnableSqlProtectionParams returns the EnableSqlProtectionParams field value if set, zero value otherwise.
func (o *VmwareObjectEnableAppProtectionParams) GetEnableSqlProtectionParams() VmwareObjectEnableSqlProtectionParams {
	if o == nil || o.EnableSqlProtectionParams == nil {
		var ret VmwareObjectEnableSqlProtectionParams
		return ret
	}
	return *o.EnableSqlProtectionParams
}

// GetEnableSqlProtectionParamsOk returns a tuple with the EnableSqlProtectionParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmwareObjectEnableAppProtectionParams) GetEnableSqlProtectionParamsOk() (*VmwareObjectEnableSqlProtectionParams, bool) {
	if o == nil || o.EnableSqlProtectionParams == nil {
		return nil, false
	}
	return o.EnableSqlProtectionParams, true
}

// HasEnableSqlProtectionParams returns a boolean if a field has been set.
func (o *VmwareObjectEnableAppProtectionParams) HasEnableSqlProtectionParams() bool {
	if o != nil && o.EnableSqlProtectionParams != nil {
		return true
	}

	return false
}

// SetEnableSqlProtectionParams gets a reference to the given VmwareObjectEnableSqlProtectionParams and assigns it to the EnableSqlProtectionParams field.
func (o *VmwareObjectEnableAppProtectionParams) SetEnableSqlProtectionParams(v VmwareObjectEnableSqlProtectionParams) {
	o.EnableSqlProtectionParams = &v
}

func (o VmwareObjectEnableAppProtectionParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["appType"] = o.AppType.Get()
	}
	if o.EnableSqlProtectionParams != nil {
		toSerialize["enableSqlProtectionParams"] = o.EnableSqlProtectionParams
	}
	return json.Marshal(toSerialize)
}

type NullableVmwareObjectEnableAppProtectionParams struct {
	value *VmwareObjectEnableAppProtectionParams
	isSet bool
}

func (v NullableVmwareObjectEnableAppProtectionParams) Get() *VmwareObjectEnableAppProtectionParams {
	return v.value
}

func (v *NullableVmwareObjectEnableAppProtectionParams) Set(val *VmwareObjectEnableAppProtectionParams) {
	v.value = val
	v.isSet = true
}

func (v NullableVmwareObjectEnableAppProtectionParams) IsSet() bool {
	return v.isSet
}

func (v *NullableVmwareObjectEnableAppProtectionParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmwareObjectEnableAppProtectionParams(val *VmwareObjectEnableAppProtectionParams) *NullableVmwareObjectEnableAppProtectionParams {
	return &NullableVmwareObjectEnableAppProtectionParams{value: val, isSet: true}
}

func (v NullableVmwareObjectEnableAppProtectionParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmwareObjectEnableAppProtectionParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o VmwareObjectEnableAppProtectionParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}