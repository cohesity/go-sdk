/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// PauseActionObjectLevelResponse Specifies the infomration about status of pause action.
type PauseActionObjectLevelResponse struct {
	Error *Error `json:"error,omitempty"`
}

// NewPauseActionObjectLevelResponse instantiates a new PauseActionObjectLevelResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPauseActionObjectLevelResponse() *PauseActionObjectLevelResponse {
	this := PauseActionObjectLevelResponse{}
	return &this
}

// NewPauseActionObjectLevelResponseWithDefaults instantiates a new PauseActionObjectLevelResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPauseActionObjectLevelResponseWithDefaults() *PauseActionObjectLevelResponse {
	this := PauseActionObjectLevelResponse{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *PauseActionObjectLevelResponse) GetError() Error {
	if o == nil || o.Error == nil {
		var ret Error
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PauseActionObjectLevelResponse) GetErrorOk() (*Error, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *PauseActionObjectLevelResponse) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given Error and assigns it to the Error field.
func (o *PauseActionObjectLevelResponse) SetError(v Error) {
	o.Error = &v
}

func (o PauseActionObjectLevelResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullablePauseActionObjectLevelResponse struct {
	value *PauseActionObjectLevelResponse
	isSet bool
}

func (v NullablePauseActionObjectLevelResponse) Get() *PauseActionObjectLevelResponse {
	return v.value
}

func (v *NullablePauseActionObjectLevelResponse) Set(val *PauseActionObjectLevelResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePauseActionObjectLevelResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePauseActionObjectLevelResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePauseActionObjectLevelResponse(val *PauseActionObjectLevelResponse) *NullablePauseActionObjectLevelResponse {
	return &NullablePauseActionObjectLevelResponse{value: val, isSet: true}
}

func (v NullablePauseActionObjectLevelResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePauseActionObjectLevelResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o PauseActionObjectLevelResponse) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}