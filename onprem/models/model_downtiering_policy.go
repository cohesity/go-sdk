/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// DowntieringPolicy Specifies the data downtiering policy.
type DowntieringPolicy struct {
	// Specifies whether the data tiering task will be written to HDD or SSD.
	QosPolicy NullableString `json:"qosPolicy,omitempty"`
	IndexingPolicy *IndexingPolicy `json:"indexingPolicy,omitempty"`
	Retention *Retention `json:"retention,omitempty"`
	// Specifies whether to create a symlink for the migrated data from source to target.
	SkipBackSymlink NullableBool `json:"skipBackSymlink,omitempty"`
	// Specifies whether to remove the orphan data from the target if the symlink is removed from the source.
	AutoOrphanDataCleanup NullableBool `json:"autoOrphanDataCleanup,omitempty"`
	// Specifies the maximum amount of data that should be present on source after downtiering.
	TieringGoal NullableInt64 `json:"tieringGoal,omitempty"`
	FileAge *DowntieringFileAgePolicy `json:"fileAge,omitempty"`
	Target NullableDowntieringTarget `json:"target,omitempty"`
	// Specifies whether to audit log the file tiering activity.
	EnableAuditLogging NullableBool `json:"enableAuditLogging,omitempty"`
	FileSize *FileSizePolicy `json:"fileSize,omitempty"`
	FilePath *FileFilteringPolicy `json:"filePath,omitempty"`
}

// NewDowntieringPolicy instantiates a new DowntieringPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDowntieringPolicy() *DowntieringPolicy {
	this := DowntieringPolicy{}
	var skipBackSymlink bool = true
	this.SkipBackSymlink = *NewNullableBool(&skipBackSymlink)
	var autoOrphanDataCleanup bool = true
	this.AutoOrphanDataCleanup = *NewNullableBool(&autoOrphanDataCleanup)
	var enableAuditLogging bool = false
	this.EnableAuditLogging = *NewNullableBool(&enableAuditLogging)
	return &this
}

// NewDowntieringPolicyWithDefaults instantiates a new DowntieringPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDowntieringPolicyWithDefaults() *DowntieringPolicy {
	this := DowntieringPolicy{}
	var skipBackSymlink bool = true
	this.SkipBackSymlink = *NewNullableBool(&skipBackSymlink)
	var autoOrphanDataCleanup bool = true
	this.AutoOrphanDataCleanup = *NewNullableBool(&autoOrphanDataCleanup)
	var enableAuditLogging bool = false
	this.EnableAuditLogging = *NewNullableBool(&enableAuditLogging)
	return &this
}

// GetQosPolicy returns the QosPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DowntieringPolicy) GetQosPolicy() string {
	if o == nil || o.QosPolicy.Get() == nil {
		var ret string
		return ret
	}
	return *o.QosPolicy.Get()
}

// GetQosPolicyOk returns a tuple with the QosPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DowntieringPolicy) GetQosPolicyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.QosPolicy.Get(), o.QosPolicy.IsSet()
}

// HasQosPolicy returns a boolean if a field has been set.
func (o *DowntieringPolicy) HasQosPolicy() bool {
	if o != nil && o.QosPolicy.IsSet() {
		return true
	}

	return false
}

// SetQosPolicy gets a reference to the given NullableString and assigns it to the QosPolicy field.
func (o *DowntieringPolicy) SetQosPolicy(v string) {
	o.QosPolicy.Set(&v)
}
// SetQosPolicyNil sets the value for QosPolicy to be an explicit nil
func (o *DowntieringPolicy) SetQosPolicyNil() {
	o.QosPolicy.Set(nil)
}

// UnsetQosPolicy ensures that no value is present for QosPolicy, not even an explicit nil
func (o *DowntieringPolicy) UnsetQosPolicy() {
	o.QosPolicy.Unset()
}

// GetIndexingPolicy returns the IndexingPolicy field value if set, zero value otherwise.
func (o *DowntieringPolicy) GetIndexingPolicy() IndexingPolicy {
	if o == nil || o.IndexingPolicy == nil {
		var ret IndexingPolicy
		return ret
	}
	return *o.IndexingPolicy
}

// GetIndexingPolicyOk returns a tuple with the IndexingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DowntieringPolicy) GetIndexingPolicyOk() (*IndexingPolicy, bool) {
	if o == nil || o.IndexingPolicy == nil {
		return nil, false
	}
	return o.IndexingPolicy, true
}

// HasIndexingPolicy returns a boolean if a field has been set.
func (o *DowntieringPolicy) HasIndexingPolicy() bool {
	if o != nil && o.IndexingPolicy != nil {
		return true
	}

	return false
}

// SetIndexingPolicy gets a reference to the given IndexingPolicy and assigns it to the IndexingPolicy field.
func (o *DowntieringPolicy) SetIndexingPolicy(v IndexingPolicy) {
	o.IndexingPolicy = &v
}

// GetRetention returns the Retention field value if set, zero value otherwise.
func (o *DowntieringPolicy) GetRetention() Retention {
	if o == nil || o.Retention == nil {
		var ret Retention
		return ret
	}
	return *o.Retention
}

// GetRetentionOk returns a tuple with the Retention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DowntieringPolicy) GetRetentionOk() (*Retention, bool) {
	if o == nil || o.Retention == nil {
		return nil, false
	}
	return o.Retention, true
}

// HasRetention returns a boolean if a field has been set.
func (o *DowntieringPolicy) HasRetention() bool {
	if o != nil && o.Retention != nil {
		return true
	}

	return false
}

// SetRetention gets a reference to the given Retention and assigns it to the Retention field.
func (o *DowntieringPolicy) SetRetention(v Retention) {
	o.Retention = &v
}

// GetSkipBackSymlink returns the SkipBackSymlink field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DowntieringPolicy) GetSkipBackSymlink() bool {
	if o == nil || o.SkipBackSymlink.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SkipBackSymlink.Get()
}

// GetSkipBackSymlinkOk returns a tuple with the SkipBackSymlink field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DowntieringPolicy) GetSkipBackSymlinkOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SkipBackSymlink.Get(), o.SkipBackSymlink.IsSet()
}

// HasSkipBackSymlink returns a boolean if a field has been set.
func (o *DowntieringPolicy) HasSkipBackSymlink() bool {
	if o != nil && o.SkipBackSymlink.IsSet() {
		return true
	}

	return false
}

// SetSkipBackSymlink gets a reference to the given NullableBool and assigns it to the SkipBackSymlink field.
func (o *DowntieringPolicy) SetSkipBackSymlink(v bool) {
	o.SkipBackSymlink.Set(&v)
}
// SetSkipBackSymlinkNil sets the value for SkipBackSymlink to be an explicit nil
func (o *DowntieringPolicy) SetSkipBackSymlinkNil() {
	o.SkipBackSymlink.Set(nil)
}

// UnsetSkipBackSymlink ensures that no value is present for SkipBackSymlink, not even an explicit nil
func (o *DowntieringPolicy) UnsetSkipBackSymlink() {
	o.SkipBackSymlink.Unset()
}

// GetAutoOrphanDataCleanup returns the AutoOrphanDataCleanup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DowntieringPolicy) GetAutoOrphanDataCleanup() bool {
	if o == nil || o.AutoOrphanDataCleanup.Get() == nil {
		var ret bool
		return ret
	}
	return *o.AutoOrphanDataCleanup.Get()
}

// GetAutoOrphanDataCleanupOk returns a tuple with the AutoOrphanDataCleanup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DowntieringPolicy) GetAutoOrphanDataCleanupOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AutoOrphanDataCleanup.Get(), o.AutoOrphanDataCleanup.IsSet()
}

// HasAutoOrphanDataCleanup returns a boolean if a field has been set.
func (o *DowntieringPolicy) HasAutoOrphanDataCleanup() bool {
	if o != nil && o.AutoOrphanDataCleanup.IsSet() {
		return true
	}

	return false
}

// SetAutoOrphanDataCleanup gets a reference to the given NullableBool and assigns it to the AutoOrphanDataCleanup field.
func (o *DowntieringPolicy) SetAutoOrphanDataCleanup(v bool) {
	o.AutoOrphanDataCleanup.Set(&v)
}
// SetAutoOrphanDataCleanupNil sets the value for AutoOrphanDataCleanup to be an explicit nil
func (o *DowntieringPolicy) SetAutoOrphanDataCleanupNil() {
	o.AutoOrphanDataCleanup.Set(nil)
}

// UnsetAutoOrphanDataCleanup ensures that no value is present for AutoOrphanDataCleanup, not even an explicit nil
func (o *DowntieringPolicy) UnsetAutoOrphanDataCleanup() {
	o.AutoOrphanDataCleanup.Unset()
}

// GetTieringGoal returns the TieringGoal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DowntieringPolicy) GetTieringGoal() int64 {
	if o == nil || o.TieringGoal.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TieringGoal.Get()
}

// GetTieringGoalOk returns a tuple with the TieringGoal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DowntieringPolicy) GetTieringGoalOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TieringGoal.Get(), o.TieringGoal.IsSet()
}

// HasTieringGoal returns a boolean if a field has been set.
func (o *DowntieringPolicy) HasTieringGoal() bool {
	if o != nil && o.TieringGoal.IsSet() {
		return true
	}

	return false
}

// SetTieringGoal gets a reference to the given NullableInt64 and assigns it to the TieringGoal field.
func (o *DowntieringPolicy) SetTieringGoal(v int64) {
	o.TieringGoal.Set(&v)
}
// SetTieringGoalNil sets the value for TieringGoal to be an explicit nil
func (o *DowntieringPolicy) SetTieringGoalNil() {
	o.TieringGoal.Set(nil)
}

// UnsetTieringGoal ensures that no value is present for TieringGoal, not even an explicit nil
func (o *DowntieringPolicy) UnsetTieringGoal() {
	o.TieringGoal.Unset()
}

// GetFileAge returns the FileAge field value if set, zero value otherwise.
func (o *DowntieringPolicy) GetFileAge() DowntieringFileAgePolicy {
	if o == nil || o.FileAge == nil {
		var ret DowntieringFileAgePolicy
		return ret
	}
	return *o.FileAge
}

// GetFileAgeOk returns a tuple with the FileAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DowntieringPolicy) GetFileAgeOk() (*DowntieringFileAgePolicy, bool) {
	if o == nil || o.FileAge == nil {
		return nil, false
	}
	return o.FileAge, true
}

// HasFileAge returns a boolean if a field has been set.
func (o *DowntieringPolicy) HasFileAge() bool {
	if o != nil && o.FileAge != nil {
		return true
	}

	return false
}

// SetFileAge gets a reference to the given DowntieringFileAgePolicy and assigns it to the FileAge field.
func (o *DowntieringPolicy) SetFileAge(v DowntieringFileAgePolicy) {
	o.FileAge = &v
}

// GetTarget returns the Target field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DowntieringPolicy) GetTarget() DowntieringTarget {
	if o == nil || o.Target.Get() == nil {
		var ret DowntieringTarget
		return ret
	}
	return *o.Target.Get()
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DowntieringPolicy) GetTargetOk() (*DowntieringTarget, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Target.Get(), o.Target.IsSet()
}

// HasTarget returns a boolean if a field has been set.
func (o *DowntieringPolicy) HasTarget() bool {
	if o != nil && o.Target.IsSet() {
		return true
	}

	return false
}

// SetTarget gets a reference to the given NullableDowntieringTarget and assigns it to the Target field.
func (o *DowntieringPolicy) SetTarget(v DowntieringTarget) {
	o.Target.Set(&v)
}
// SetTargetNil sets the value for Target to be an explicit nil
func (o *DowntieringPolicy) SetTargetNil() {
	o.Target.Set(nil)
}

// UnsetTarget ensures that no value is present for Target, not even an explicit nil
func (o *DowntieringPolicy) UnsetTarget() {
	o.Target.Unset()
}

// GetEnableAuditLogging returns the EnableAuditLogging field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DowntieringPolicy) GetEnableAuditLogging() bool {
	if o == nil || o.EnableAuditLogging.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableAuditLogging.Get()
}

// GetEnableAuditLoggingOk returns a tuple with the EnableAuditLogging field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DowntieringPolicy) GetEnableAuditLoggingOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableAuditLogging.Get(), o.EnableAuditLogging.IsSet()
}

// HasEnableAuditLogging returns a boolean if a field has been set.
func (o *DowntieringPolicy) HasEnableAuditLogging() bool {
	if o != nil && o.EnableAuditLogging.IsSet() {
		return true
	}

	return false
}

// SetEnableAuditLogging gets a reference to the given NullableBool and assigns it to the EnableAuditLogging field.
func (o *DowntieringPolicy) SetEnableAuditLogging(v bool) {
	o.EnableAuditLogging.Set(&v)
}
// SetEnableAuditLoggingNil sets the value for EnableAuditLogging to be an explicit nil
func (o *DowntieringPolicy) SetEnableAuditLoggingNil() {
	o.EnableAuditLogging.Set(nil)
}

// UnsetEnableAuditLogging ensures that no value is present for EnableAuditLogging, not even an explicit nil
func (o *DowntieringPolicy) UnsetEnableAuditLogging() {
	o.EnableAuditLogging.Unset()
}

// GetFileSize returns the FileSize field value if set, zero value otherwise.
func (o *DowntieringPolicy) GetFileSize() FileSizePolicy {
	if o == nil || o.FileSize == nil {
		var ret FileSizePolicy
		return ret
	}
	return *o.FileSize
}

// GetFileSizeOk returns a tuple with the FileSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DowntieringPolicy) GetFileSizeOk() (*FileSizePolicy, bool) {
	if o == nil || o.FileSize == nil {
		return nil, false
	}
	return o.FileSize, true
}

// HasFileSize returns a boolean if a field has been set.
func (o *DowntieringPolicy) HasFileSize() bool {
	if o != nil && o.FileSize != nil {
		return true
	}

	return false
}

// SetFileSize gets a reference to the given FileSizePolicy and assigns it to the FileSize field.
func (o *DowntieringPolicy) SetFileSize(v FileSizePolicy) {
	o.FileSize = &v
}

// GetFilePath returns the FilePath field value if set, zero value otherwise.
func (o *DowntieringPolicy) GetFilePath() FileFilteringPolicy {
	if o == nil || o.FilePath == nil {
		var ret FileFilteringPolicy
		return ret
	}
	return *o.FilePath
}

// GetFilePathOk returns a tuple with the FilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DowntieringPolicy) GetFilePathOk() (*FileFilteringPolicy, bool) {
	if o == nil || o.FilePath == nil {
		return nil, false
	}
	return o.FilePath, true
}

// HasFilePath returns a boolean if a field has been set.
func (o *DowntieringPolicy) HasFilePath() bool {
	if o != nil && o.FilePath != nil {
		return true
	}

	return false
}

// SetFilePath gets a reference to the given FileFilteringPolicy and assigns it to the FilePath field.
func (o *DowntieringPolicy) SetFilePath(v FileFilteringPolicy) {
	o.FilePath = &v
}

func (o DowntieringPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.QosPolicy.IsSet() {
		toSerialize["qosPolicy"] = o.QosPolicy.Get()
	}
	if o.IndexingPolicy != nil {
		toSerialize["indexingPolicy"] = o.IndexingPolicy
	}
	if o.Retention != nil {
		toSerialize["retention"] = o.Retention
	}
	if o.SkipBackSymlink.IsSet() {
		toSerialize["skipBackSymlink"] = o.SkipBackSymlink.Get()
	}
	if o.AutoOrphanDataCleanup.IsSet() {
		toSerialize["autoOrphanDataCleanup"] = o.AutoOrphanDataCleanup.Get()
	}
	if o.TieringGoal.IsSet() {
		toSerialize["tieringGoal"] = o.TieringGoal.Get()
	}
	if o.FileAge != nil {
		toSerialize["fileAge"] = o.FileAge
	}
	if o.Target.IsSet() {
		toSerialize["target"] = o.Target.Get()
	}
	if o.EnableAuditLogging.IsSet() {
		toSerialize["enableAuditLogging"] = o.EnableAuditLogging.Get()
	}
	if o.FileSize != nil {
		toSerialize["fileSize"] = o.FileSize
	}
	if o.FilePath != nil {
		toSerialize["filePath"] = o.FilePath
	}
	return json.Marshal(toSerialize)
}

type NullableDowntieringPolicy struct {
	value *DowntieringPolicy
	isSet bool
}

func (v NullableDowntieringPolicy) Get() *DowntieringPolicy {
	return v.value
}

func (v *NullableDowntieringPolicy) Set(val *DowntieringPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableDowntieringPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableDowntieringPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDowntieringPolicy(val *DowntieringPolicy) *NullableDowntieringPolicy {
	return &NullableDowntieringPolicy{value: val, isSet: true}
}

func (v NullableDowntieringPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDowntieringPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o DowntieringPolicy) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}