/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// ViewAliasInfo View Alias Info is returned as part of list views.
type ViewAliasInfo struct {
	// Alias name.
	AliasName NullableString `json:"aliasName,omitempty"`
	// View path for the alias.
	ViewPath NullableString `json:"viewPath,omitempty"`
	// SMB config for the alias (share).
	SmbConfig *AliasSmbConfig `json:"smbConfig,omitempty"`
	// List of external client subnet IPs that are allowed to access the share.
	ClientSubnetWhitelist []Subnet `json:"clientSubnetWhitelist,omitempty"`
}

// NewViewAliasInfo instantiates a new ViewAliasInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewAliasInfo() *ViewAliasInfo {
	this := ViewAliasInfo{}
	return &this
}

// NewViewAliasInfoWithDefaults instantiates a new ViewAliasInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewAliasInfoWithDefaults() *ViewAliasInfo {
	this := ViewAliasInfo{}
	return &this
}

// GetAliasName returns the AliasName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewAliasInfo) GetAliasName() string {
	if o == nil || o.AliasName.Get() == nil {
		var ret string
		return ret
	}
	return *o.AliasName.Get()
}

// GetAliasNameOk returns a tuple with the AliasName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewAliasInfo) GetAliasNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AliasName.Get(), o.AliasName.IsSet()
}

// HasAliasName returns a boolean if a field has been set.
func (o *ViewAliasInfo) HasAliasName() bool {
	if o != nil && o.AliasName.IsSet() {
		return true
	}

	return false
}

// SetAliasName gets a reference to the given NullableString and assigns it to the AliasName field.
func (o *ViewAliasInfo) SetAliasName(v string) {
	o.AliasName.Set(&v)
}
// SetAliasNameNil sets the value for AliasName to be an explicit nil
func (o *ViewAliasInfo) SetAliasNameNil() {
	o.AliasName.Set(nil)
}

// UnsetAliasName ensures that no value is present for AliasName, not even an explicit nil
func (o *ViewAliasInfo) UnsetAliasName() {
	o.AliasName.Unset()
}

// GetViewPath returns the ViewPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewAliasInfo) GetViewPath() string {
	if o == nil || o.ViewPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.ViewPath.Get()
}

// GetViewPathOk returns a tuple with the ViewPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewAliasInfo) GetViewPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewPath.Get(), o.ViewPath.IsSet()
}

// HasViewPath returns a boolean if a field has been set.
func (o *ViewAliasInfo) HasViewPath() bool {
	if o != nil && o.ViewPath.IsSet() {
		return true
	}

	return false
}

// SetViewPath gets a reference to the given NullableString and assigns it to the ViewPath field.
func (o *ViewAliasInfo) SetViewPath(v string) {
	o.ViewPath.Set(&v)
}
// SetViewPathNil sets the value for ViewPath to be an explicit nil
func (o *ViewAliasInfo) SetViewPathNil() {
	o.ViewPath.Set(nil)
}

// UnsetViewPath ensures that no value is present for ViewPath, not even an explicit nil
func (o *ViewAliasInfo) UnsetViewPath() {
	o.ViewPath.Unset()
}

// GetSmbConfig returns the SmbConfig field value if set, zero value otherwise.
func (o *ViewAliasInfo) GetSmbConfig() AliasSmbConfig {
	if o == nil || o.SmbConfig == nil {
		var ret AliasSmbConfig
		return ret
	}
	return *o.SmbConfig
}

// GetSmbConfigOk returns a tuple with the SmbConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewAliasInfo) GetSmbConfigOk() (*AliasSmbConfig, bool) {
	if o == nil || o.SmbConfig == nil {
		return nil, false
	}
	return o.SmbConfig, true
}

// HasSmbConfig returns a boolean if a field has been set.
func (o *ViewAliasInfo) HasSmbConfig() bool {
	if o != nil && o.SmbConfig != nil {
		return true
	}

	return false
}

// SetSmbConfig gets a reference to the given AliasSmbConfig and assigns it to the SmbConfig field.
func (o *ViewAliasInfo) SetSmbConfig(v AliasSmbConfig) {
	o.SmbConfig = &v
}

// GetClientSubnetWhitelist returns the ClientSubnetWhitelist field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewAliasInfo) GetClientSubnetWhitelist() []Subnet {
	if o == nil  {
		var ret []Subnet
		return ret
	}
	return o.ClientSubnetWhitelist
}

// GetClientSubnetWhitelistOk returns a tuple with the ClientSubnetWhitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewAliasInfo) GetClientSubnetWhitelistOk() (*[]Subnet, bool) {
	if o == nil || o.ClientSubnetWhitelist == nil {
		return nil, false
	}
	return &o.ClientSubnetWhitelist, true
}

// HasClientSubnetWhitelist returns a boolean if a field has been set.
func (o *ViewAliasInfo) HasClientSubnetWhitelist() bool {
	if o != nil && o.ClientSubnetWhitelist != nil {
		return true
	}

	return false
}

// SetClientSubnetWhitelist gets a reference to the given []Subnet and assigns it to the ClientSubnetWhitelist field.
func (o *ViewAliasInfo) SetClientSubnetWhitelist(v []Subnet) {
	o.ClientSubnetWhitelist = v
}

func (o ViewAliasInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AliasName.IsSet() {
		toSerialize["aliasName"] = o.AliasName.Get()
	}
	if o.ViewPath.IsSet() {
		toSerialize["viewPath"] = o.ViewPath.Get()
	}
	if o.SmbConfig != nil {
		toSerialize["smbConfig"] = o.SmbConfig
	}
	if o.ClientSubnetWhitelist != nil {
		toSerialize["clientSubnetWhitelist"] = o.ClientSubnetWhitelist
	}
	return json.Marshal(toSerialize)
}

type NullableViewAliasInfo struct {
	value *ViewAliasInfo
	isSet bool
}

func (v NullableViewAliasInfo) Get() *ViewAliasInfo {
	return v.value
}

func (v *NullableViewAliasInfo) Set(val *ViewAliasInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableViewAliasInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableViewAliasInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewAliasInfo(val *ViewAliasInfo) *NullableViewAliasInfo {
	return &NullableViewAliasInfo{value: val, isSet: true}
}

func (v NullableViewAliasInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewAliasInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o ViewAliasInfo) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}