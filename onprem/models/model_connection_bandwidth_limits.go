/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// ConnectionBandwidthLimits ConnectionBandwidthLimits represents the network bandwidth limits while uploading/downloading data to/from the SaaS Connection.
type ConnectionBandwidthLimits struct {
	// Specifies the max rate limit at which we download the data.
	Download []BandwidthLimit `json:"download,omitempty"`
	// Specifies the max rate limit at which we upload the data.
	Upload []BandwidthLimit `json:"upload,omitempty"`
	// The tenant Id corresponding to this request.
	TenantId NullableString `json:"tenantId"`
	// Specifies a time zone for the specified time period. The time zone is defined in the following format: 'Area/Location', for example: 'America/New_York'.
	Timezone NullableString `json:"timezone,omitempty"`
}

// NewConnectionBandwidthLimits instantiates a new ConnectionBandwidthLimits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionBandwidthLimits(tenantId NullableString) *ConnectionBandwidthLimits {
	this := ConnectionBandwidthLimits{}
	this.TenantId = tenantId
	return &this
}

// NewConnectionBandwidthLimitsWithDefaults instantiates a new ConnectionBandwidthLimits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionBandwidthLimitsWithDefaults() *ConnectionBandwidthLimits {
	this := ConnectionBandwidthLimits{}
	return &this
}

// GetDownload returns the Download field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConnectionBandwidthLimits) GetDownload() []BandwidthLimit {
	if o == nil  {
		var ret []BandwidthLimit
		return ret
	}
	return o.Download
}

// GetDownloadOk returns a tuple with the Download field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConnectionBandwidthLimits) GetDownloadOk() (*[]BandwidthLimit, bool) {
	if o == nil || o.Download == nil {
		return nil, false
	}
	return &o.Download, true
}

// HasDownload returns a boolean if a field has been set.
func (o *ConnectionBandwidthLimits) HasDownload() bool {
	if o != nil && o.Download != nil {
		return true
	}

	return false
}

// SetDownload gets a reference to the given []BandwidthLimit and assigns it to the Download field.
func (o *ConnectionBandwidthLimits) SetDownload(v []BandwidthLimit) {
	o.Download = v
}

// GetUpload returns the Upload field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConnectionBandwidthLimits) GetUpload() []BandwidthLimit {
	if o == nil  {
		var ret []BandwidthLimit
		return ret
	}
	return o.Upload
}

// GetUploadOk returns a tuple with the Upload field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConnectionBandwidthLimits) GetUploadOk() (*[]BandwidthLimit, bool) {
	if o == nil || o.Upload == nil {
		return nil, false
	}
	return &o.Upload, true
}

// HasUpload returns a boolean if a field has been set.
func (o *ConnectionBandwidthLimits) HasUpload() bool {
	if o != nil && o.Upload != nil {
		return true
	}

	return false
}

// SetUpload gets a reference to the given []BandwidthLimit and assigns it to the Upload field.
func (o *ConnectionBandwidthLimits) SetUpload(v []BandwidthLimit) {
	o.Upload = v
}

// GetTenantId returns the TenantId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ConnectionBandwidthLimits) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}

	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConnectionBandwidthLimits) GetTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// SetTenantId sets field value
func (o *ConnectionBandwidthLimits) SetTenantId(v string) {
	o.TenantId.Set(&v)
}

// GetTimezone returns the Timezone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConnectionBandwidthLimits) GetTimezone() string {
	if o == nil || o.Timezone.Get() == nil {
		var ret string
		return ret
	}
	return *o.Timezone.Get()
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConnectionBandwidthLimits) GetTimezoneOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Timezone.Get(), o.Timezone.IsSet()
}

// HasTimezone returns a boolean if a field has been set.
func (o *ConnectionBandwidthLimits) HasTimezone() bool {
	if o != nil && o.Timezone.IsSet() {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given NullableString and assigns it to the Timezone field.
func (o *ConnectionBandwidthLimits) SetTimezone(v string) {
	o.Timezone.Set(&v)
}
// SetTimezoneNil sets the value for Timezone to be an explicit nil
func (o *ConnectionBandwidthLimits) SetTimezoneNil() {
	o.Timezone.Set(nil)
}

// UnsetTimezone ensures that no value is present for Timezone, not even an explicit nil
func (o *ConnectionBandwidthLimits) UnsetTimezone() {
	o.Timezone.Unset()
}

func (o ConnectionBandwidthLimits) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Download != nil {
		toSerialize["download"] = o.Download
	}
	if o.Upload != nil {
		toSerialize["upload"] = o.Upload
	}
	if true {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.Timezone.IsSet() {
		toSerialize["timezone"] = o.Timezone.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableConnectionBandwidthLimits struct {
	value *ConnectionBandwidthLimits
	isSet bool
}

func (v NullableConnectionBandwidthLimits) Get() *ConnectionBandwidthLimits {
	return v.value
}

func (v *NullableConnectionBandwidthLimits) Set(val *ConnectionBandwidthLimits) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionBandwidthLimits) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionBandwidthLimits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionBandwidthLimits(val *ConnectionBandwidthLimits) *NullableConnectionBandwidthLimits {
	return &NullableConnectionBandwidthLimits{value: val, isSet: true}
}

func (v NullableConnectionBandwidthLimits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionBandwidthLimits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o ConnectionBandwidthLimits) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}