/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// ObjectArchivalSnapshotInfo Specifies the Archival snapshot information for the object.
type ObjectArchivalSnapshotInfo struct {
	// Specifies the id of the archival snapshot for the object.
	SnapshotId NullableString `json:"snapshotId,omitempty"`
	// Specifies the logical size of this snapshot in bytes.
	LogicalSizeBytes NullableInt64 `json:"logicalSizeBytes,omitempty"`
	// Specifies the archival target ID.
	TargetId NullableInt64 `json:"targetId,omitempty"`
	// Specifies the archival task id. This is a protection group UID which only applies when archival type is 'Tape'.
	ArchivalTaskId NullableString `json:"archivalTaskId,omitempty"`
	// Specifies the archival target name.
	TargetName NullableString `json:"targetName,omitempty"`
	// Specifies the archival target type.
	TargetType NullableString `json:"targetType,omitempty"`
	TierSettings *ArchivalTargetTierInfo `json:"tierSettings,omitempty"`
}

// NewObjectArchivalSnapshotInfo instantiates a new ObjectArchivalSnapshotInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectArchivalSnapshotInfo() *ObjectArchivalSnapshotInfo {
	this := ObjectArchivalSnapshotInfo{}
	return &this
}

// NewObjectArchivalSnapshotInfoWithDefaults instantiates a new ObjectArchivalSnapshotInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectArchivalSnapshotInfoWithDefaults() *ObjectArchivalSnapshotInfo {
	this := ObjectArchivalSnapshotInfo{}
	return &this
}

// GetSnapshotId returns the SnapshotId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectArchivalSnapshotInfo) GetSnapshotId() string {
	if o == nil || o.SnapshotId.Get() == nil {
		var ret string
		return ret
	}
	return *o.SnapshotId.Get()
}

// GetSnapshotIdOk returns a tuple with the SnapshotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectArchivalSnapshotInfo) GetSnapshotIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SnapshotId.Get(), o.SnapshotId.IsSet()
}

// HasSnapshotId returns a boolean if a field has been set.
func (o *ObjectArchivalSnapshotInfo) HasSnapshotId() bool {
	if o != nil && o.SnapshotId.IsSet() {
		return true
	}

	return false
}

// SetSnapshotId gets a reference to the given NullableString and assigns it to the SnapshotId field.
func (o *ObjectArchivalSnapshotInfo) SetSnapshotId(v string) {
	o.SnapshotId.Set(&v)
}
// SetSnapshotIdNil sets the value for SnapshotId to be an explicit nil
func (o *ObjectArchivalSnapshotInfo) SetSnapshotIdNil() {
	o.SnapshotId.Set(nil)
}

// UnsetSnapshotId ensures that no value is present for SnapshotId, not even an explicit nil
func (o *ObjectArchivalSnapshotInfo) UnsetSnapshotId() {
	o.SnapshotId.Unset()
}

// GetLogicalSizeBytes returns the LogicalSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectArchivalSnapshotInfo) GetLogicalSizeBytes() int64 {
	if o == nil || o.LogicalSizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LogicalSizeBytes.Get()
}

// GetLogicalSizeBytesOk returns a tuple with the LogicalSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectArchivalSnapshotInfo) GetLogicalSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogicalSizeBytes.Get(), o.LogicalSizeBytes.IsSet()
}

// HasLogicalSizeBytes returns a boolean if a field has been set.
func (o *ObjectArchivalSnapshotInfo) HasLogicalSizeBytes() bool {
	if o != nil && o.LogicalSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetLogicalSizeBytes gets a reference to the given NullableInt64 and assigns it to the LogicalSizeBytes field.
func (o *ObjectArchivalSnapshotInfo) SetLogicalSizeBytes(v int64) {
	o.LogicalSizeBytes.Set(&v)
}
// SetLogicalSizeBytesNil sets the value for LogicalSizeBytes to be an explicit nil
func (o *ObjectArchivalSnapshotInfo) SetLogicalSizeBytesNil() {
	o.LogicalSizeBytes.Set(nil)
}

// UnsetLogicalSizeBytes ensures that no value is present for LogicalSizeBytes, not even an explicit nil
func (o *ObjectArchivalSnapshotInfo) UnsetLogicalSizeBytes() {
	o.LogicalSizeBytes.Unset()
}

// GetTargetId returns the TargetId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectArchivalSnapshotInfo) GetTargetId() int64 {
	if o == nil || o.TargetId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TargetId.Get()
}

// GetTargetIdOk returns a tuple with the TargetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectArchivalSnapshotInfo) GetTargetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetId.Get(), o.TargetId.IsSet()
}

// HasTargetId returns a boolean if a field has been set.
func (o *ObjectArchivalSnapshotInfo) HasTargetId() bool {
	if o != nil && o.TargetId.IsSet() {
		return true
	}

	return false
}

// SetTargetId gets a reference to the given NullableInt64 and assigns it to the TargetId field.
func (o *ObjectArchivalSnapshotInfo) SetTargetId(v int64) {
	o.TargetId.Set(&v)
}
// SetTargetIdNil sets the value for TargetId to be an explicit nil
func (o *ObjectArchivalSnapshotInfo) SetTargetIdNil() {
	o.TargetId.Set(nil)
}

// UnsetTargetId ensures that no value is present for TargetId, not even an explicit nil
func (o *ObjectArchivalSnapshotInfo) UnsetTargetId() {
	o.TargetId.Unset()
}

// GetArchivalTaskId returns the ArchivalTaskId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectArchivalSnapshotInfo) GetArchivalTaskId() string {
	if o == nil || o.ArchivalTaskId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ArchivalTaskId.Get()
}

// GetArchivalTaskIdOk returns a tuple with the ArchivalTaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectArchivalSnapshotInfo) GetArchivalTaskIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ArchivalTaskId.Get(), o.ArchivalTaskId.IsSet()
}

// HasArchivalTaskId returns a boolean if a field has been set.
func (o *ObjectArchivalSnapshotInfo) HasArchivalTaskId() bool {
	if o != nil && o.ArchivalTaskId.IsSet() {
		return true
	}

	return false
}

// SetArchivalTaskId gets a reference to the given NullableString and assigns it to the ArchivalTaskId field.
func (o *ObjectArchivalSnapshotInfo) SetArchivalTaskId(v string) {
	o.ArchivalTaskId.Set(&v)
}
// SetArchivalTaskIdNil sets the value for ArchivalTaskId to be an explicit nil
func (o *ObjectArchivalSnapshotInfo) SetArchivalTaskIdNil() {
	o.ArchivalTaskId.Set(nil)
}

// UnsetArchivalTaskId ensures that no value is present for ArchivalTaskId, not even an explicit nil
func (o *ObjectArchivalSnapshotInfo) UnsetArchivalTaskId() {
	o.ArchivalTaskId.Unset()
}

// GetTargetName returns the TargetName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectArchivalSnapshotInfo) GetTargetName() string {
	if o == nil || o.TargetName.Get() == nil {
		var ret string
		return ret
	}
	return *o.TargetName.Get()
}

// GetTargetNameOk returns a tuple with the TargetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectArchivalSnapshotInfo) GetTargetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetName.Get(), o.TargetName.IsSet()
}

// HasTargetName returns a boolean if a field has been set.
func (o *ObjectArchivalSnapshotInfo) HasTargetName() bool {
	if o != nil && o.TargetName.IsSet() {
		return true
	}

	return false
}

// SetTargetName gets a reference to the given NullableString and assigns it to the TargetName field.
func (o *ObjectArchivalSnapshotInfo) SetTargetName(v string) {
	o.TargetName.Set(&v)
}
// SetTargetNameNil sets the value for TargetName to be an explicit nil
func (o *ObjectArchivalSnapshotInfo) SetTargetNameNil() {
	o.TargetName.Set(nil)
}

// UnsetTargetName ensures that no value is present for TargetName, not even an explicit nil
func (o *ObjectArchivalSnapshotInfo) UnsetTargetName() {
	o.TargetName.Unset()
}

// GetTargetType returns the TargetType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectArchivalSnapshotInfo) GetTargetType() string {
	if o == nil || o.TargetType.Get() == nil {
		var ret string
		return ret
	}
	return *o.TargetType.Get()
}

// GetTargetTypeOk returns a tuple with the TargetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectArchivalSnapshotInfo) GetTargetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetType.Get(), o.TargetType.IsSet()
}

// HasTargetType returns a boolean if a field has been set.
func (o *ObjectArchivalSnapshotInfo) HasTargetType() bool {
	if o != nil && o.TargetType.IsSet() {
		return true
	}

	return false
}

// SetTargetType gets a reference to the given NullableString and assigns it to the TargetType field.
func (o *ObjectArchivalSnapshotInfo) SetTargetType(v string) {
	o.TargetType.Set(&v)
}
// SetTargetTypeNil sets the value for TargetType to be an explicit nil
func (o *ObjectArchivalSnapshotInfo) SetTargetTypeNil() {
	o.TargetType.Set(nil)
}

// UnsetTargetType ensures that no value is present for TargetType, not even an explicit nil
func (o *ObjectArchivalSnapshotInfo) UnsetTargetType() {
	o.TargetType.Unset()
}

// GetTierSettings returns the TierSettings field value if set, zero value otherwise.
func (o *ObjectArchivalSnapshotInfo) GetTierSettings() ArchivalTargetTierInfo {
	if o == nil || o.TierSettings == nil {
		var ret ArchivalTargetTierInfo
		return ret
	}
	return *o.TierSettings
}

// GetTierSettingsOk returns a tuple with the TierSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectArchivalSnapshotInfo) GetTierSettingsOk() (*ArchivalTargetTierInfo, bool) {
	if o == nil || o.TierSettings == nil {
		return nil, false
	}
	return o.TierSettings, true
}

// HasTierSettings returns a boolean if a field has been set.
func (o *ObjectArchivalSnapshotInfo) HasTierSettings() bool {
	if o != nil && o.TierSettings != nil {
		return true
	}

	return false
}

// SetTierSettings gets a reference to the given ArchivalTargetTierInfo and assigns it to the TierSettings field.
func (o *ObjectArchivalSnapshotInfo) SetTierSettings(v ArchivalTargetTierInfo) {
	o.TierSettings = &v
}

func (o ObjectArchivalSnapshotInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SnapshotId.IsSet() {
		toSerialize["snapshotId"] = o.SnapshotId.Get()
	}
	if o.LogicalSizeBytes.IsSet() {
		toSerialize["logicalSizeBytes"] = o.LogicalSizeBytes.Get()
	}
	if o.TargetId.IsSet() {
		toSerialize["targetId"] = o.TargetId.Get()
	}
	if o.ArchivalTaskId.IsSet() {
		toSerialize["archivalTaskId"] = o.ArchivalTaskId.Get()
	}
	if o.TargetName.IsSet() {
		toSerialize["targetName"] = o.TargetName.Get()
	}
	if o.TargetType.IsSet() {
		toSerialize["targetType"] = o.TargetType.Get()
	}
	if o.TierSettings != nil {
		toSerialize["tierSettings"] = o.TierSettings
	}
	return json.Marshal(toSerialize)
}

type NullableObjectArchivalSnapshotInfo struct {
	value *ObjectArchivalSnapshotInfo
	isSet bool
}

func (v NullableObjectArchivalSnapshotInfo) Get() *ObjectArchivalSnapshotInfo {
	return v.value
}

func (v *NullableObjectArchivalSnapshotInfo) Set(val *ObjectArchivalSnapshotInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectArchivalSnapshotInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectArchivalSnapshotInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectArchivalSnapshotInfo(val *ObjectArchivalSnapshotInfo) *NullableObjectArchivalSnapshotInfo {
	return &NullableObjectArchivalSnapshotInfo{value: val, isSet: true}
}

func (v NullableObjectArchivalSnapshotInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectArchivalSnapshotInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o ObjectArchivalSnapshotInfo) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}