/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// IpPreference Preferred IP address mode of the cluster
type IpPreference struct {
	// Specifies the ip preference of cluster.
	IpPreference *string `json:"ipPreference,omitempty"`
}

// NewIpPreference instantiates a new IpPreference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpPreference() *IpPreference {
	this := IpPreference{}
	return &this
}

// NewIpPreferenceWithDefaults instantiates a new IpPreference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpPreferenceWithDefaults() *IpPreference {
	this := IpPreference{}
	return &this
}

// GetIpPreference returns the IpPreference field value if set, zero value otherwise.
func (o *IpPreference) GetIpPreference() string {
	if o == nil || o.IpPreference == nil {
		var ret string
		return ret
	}
	return *o.IpPreference
}

// GetIpPreferenceOk returns a tuple with the IpPreference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpPreference) GetIpPreferenceOk() (*string, bool) {
	if o == nil || o.IpPreference == nil {
		return nil, false
	}
	return o.IpPreference, true
}

// HasIpPreference returns a boolean if a field has been set.
func (o *IpPreference) HasIpPreference() bool {
	if o != nil && o.IpPreference != nil {
		return true
	}

	return false
}

// SetIpPreference gets a reference to the given string and assigns it to the IpPreference field.
func (o *IpPreference) SetIpPreference(v string) {
	o.IpPreference = &v
}

func (o IpPreference) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IpPreference != nil {
		toSerialize["ipPreference"] = o.IpPreference
	}
	return json.Marshal(toSerialize)
}

type NullableIpPreference struct {
	value *IpPreference
	isSet bool
}

func (v NullableIpPreference) Get() *IpPreference {
	return v.value
}

func (v *NullableIpPreference) Set(val *IpPreference) {
	v.value = val
	v.isSet = true
}

func (v NullableIpPreference) IsSet() bool {
	return v.isSet
}

func (v *NullableIpPreference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpPreference(val *IpPreference) *NullableIpPreference {
	return &NullableIpPreference{value: val, isSet: true}
}

func (v NullableIpPreference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpPreference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o IpPreference) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}