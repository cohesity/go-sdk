/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// CiphersResp Specifies a list of enabled/disabled ciphers on the cluster.
type CiphersResp struct {
	// Enabled ciphers.
	EnabledCiphers *[]string `json:"enabledCiphers,omitempty"`
	// Disabled ciphers.
	DisabledCiphers *[]string `json:"disabledCiphers,omitempty"`
}

// NewCiphersResp instantiates a new CiphersResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCiphersResp() *CiphersResp {
	this := CiphersResp{}
	return &this
}

// NewCiphersRespWithDefaults instantiates a new CiphersResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCiphersRespWithDefaults() *CiphersResp {
	this := CiphersResp{}
	return &this
}

// GetEnabledCiphers returns the EnabledCiphers field value if set, zero value otherwise.
func (o *CiphersResp) GetEnabledCiphers() []string {
	if o == nil || o.EnabledCiphers == nil {
		var ret []string
		return ret
	}
	return *o.EnabledCiphers
}

// GetEnabledCiphersOk returns a tuple with the EnabledCiphers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiphersResp) GetEnabledCiphersOk() (*[]string, bool) {
	if o == nil || o.EnabledCiphers == nil {
		return nil, false
	}
	return o.EnabledCiphers, true
}

// HasEnabledCiphers returns a boolean if a field has been set.
func (o *CiphersResp) HasEnabledCiphers() bool {
	if o != nil && o.EnabledCiphers != nil {
		return true
	}

	return false
}

// SetEnabledCiphers gets a reference to the given []string and assigns it to the EnabledCiphers field.
func (o *CiphersResp) SetEnabledCiphers(v []string) {
	o.EnabledCiphers = &v
}

// GetDisabledCiphers returns the DisabledCiphers field value if set, zero value otherwise.
func (o *CiphersResp) GetDisabledCiphers() []string {
	if o == nil || o.DisabledCiphers == nil {
		var ret []string
		return ret
	}
	return *o.DisabledCiphers
}

// GetDisabledCiphersOk returns a tuple with the DisabledCiphers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiphersResp) GetDisabledCiphersOk() (*[]string, bool) {
	if o == nil || o.DisabledCiphers == nil {
		return nil, false
	}
	return o.DisabledCiphers, true
}

// HasDisabledCiphers returns a boolean if a field has been set.
func (o *CiphersResp) HasDisabledCiphers() bool {
	if o != nil && o.DisabledCiphers != nil {
		return true
	}

	return false
}

// SetDisabledCiphers gets a reference to the given []string and assigns it to the DisabledCiphers field.
func (o *CiphersResp) SetDisabledCiphers(v []string) {
	o.DisabledCiphers = &v
}

func (o CiphersResp) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EnabledCiphers != nil {
		toSerialize["enabledCiphers"] = o.EnabledCiphers
	}
	if o.DisabledCiphers != nil {
		toSerialize["disabledCiphers"] = o.DisabledCiphers
	}
	return json.Marshal(toSerialize)
}

type NullableCiphersResp struct {
	value *CiphersResp
	isSet bool
}

func (v NullableCiphersResp) Get() *CiphersResp {
	return v.value
}

func (v *NullableCiphersResp) Set(val *CiphersResp) {
	v.value = val
	v.isSet = true
}

func (v NullableCiphersResp) IsSet() bool {
	return v.isSet
}

func (v *NullableCiphersResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCiphersResp(val *CiphersResp) *NullableCiphersResp {
	return &NullableCiphersResp{value: val, isSet: true}
}

func (v NullableCiphersResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCiphersResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o CiphersResp) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}