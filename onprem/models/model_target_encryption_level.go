/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// TargetEncryptionLevel Specifies the encryption level of the external target.
type TargetEncryptionLevel struct {
	// Specifies the encryption level of the external target.
	Enum *string `json:"enum,omitempty"`
}

// NewTargetEncryptionLevel instantiates a new TargetEncryptionLevel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTargetEncryptionLevel() *TargetEncryptionLevel {
	this := TargetEncryptionLevel{}
	return &this
}

// NewTargetEncryptionLevelWithDefaults instantiates a new TargetEncryptionLevel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTargetEncryptionLevelWithDefaults() *TargetEncryptionLevel {
	this := TargetEncryptionLevel{}
	return &this
}

// GetEnum returns the Enum field value if set, zero value otherwise.
func (o *TargetEncryptionLevel) GetEnum() string {
	if o == nil || o.Enum == nil {
		var ret string
		return ret
	}
	return *o.Enum
}

// GetEnumOk returns a tuple with the Enum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetEncryptionLevel) GetEnumOk() (*string, bool) {
	if o == nil || o.Enum == nil {
		return nil, false
	}
	return o.Enum, true
}

// HasEnum returns a boolean if a field has been set.
func (o *TargetEncryptionLevel) HasEnum() bool {
	if o != nil && o.Enum != nil {
		return true
	}

	return false
}

// SetEnum gets a reference to the given string and assigns it to the Enum field.
func (o *TargetEncryptionLevel) SetEnum(v string) {
	o.Enum = &v
}

func (o TargetEncryptionLevel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enum != nil {
		toSerialize["enum"] = o.Enum
	}
	return json.Marshal(toSerialize)
}

type NullableTargetEncryptionLevel struct {
	value *TargetEncryptionLevel
	isSet bool
}

func (v NullableTargetEncryptionLevel) Get() *TargetEncryptionLevel {
	return v.value
}

func (v *NullableTargetEncryptionLevel) Set(val *TargetEncryptionLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetEncryptionLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetEncryptionLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetEncryptionLevel(val *TargetEncryptionLevel) *NullableTargetEncryptionLevel {
	return &NullableTargetEncryptionLevel{value: val, isSet: true}
}

func (v NullableTargetEncryptionLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetEncryptionLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o TargetEncryptionLevel) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}