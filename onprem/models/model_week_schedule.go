/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// WeekSchedule Specifies settings that define a schedule for a Protection Group runs to start on certain days of week.
type WeekSchedule struct {
	// Specifies a list of days of the week when to start Protection Group Runs. <br> Example: To run a Protection Group on every Monday and Tuesday, set the schedule with following values: <br>  unit: 'Weeks' <br>  dayOfWeek: ['Monday','Tuesday']
	DayOfWeek []string `json:"dayOfWeek"`
}

// NewWeekSchedule instantiates a new WeekSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWeekSchedule(dayOfWeek []string) *WeekSchedule {
	this := WeekSchedule{}
	this.DayOfWeek = dayOfWeek
	return &this
}

// NewWeekScheduleWithDefaults instantiates a new WeekSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWeekScheduleWithDefaults() *WeekSchedule {
	this := WeekSchedule{}
	return &this
}

// GetDayOfWeek returns the DayOfWeek field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *WeekSchedule) GetDayOfWeek() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DayOfWeek
}

// GetDayOfWeekOk returns a tuple with the DayOfWeek field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WeekSchedule) GetDayOfWeekOk() (*[]string, bool) {
	if o == nil || o.DayOfWeek == nil {
		return nil, false
	}
	return &o.DayOfWeek, true
}

// SetDayOfWeek sets field value
func (o *WeekSchedule) SetDayOfWeek(v []string) {
	o.DayOfWeek = v
}

func (o WeekSchedule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DayOfWeek != nil {
		toSerialize["dayOfWeek"] = o.DayOfWeek
	}
	return json.Marshal(toSerialize)
}

type NullableWeekSchedule struct {
	value *WeekSchedule
	isSet bool
}

func (v NullableWeekSchedule) Get() *WeekSchedule {
	return v.value
}

func (v *NullableWeekSchedule) Set(val *WeekSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableWeekSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableWeekSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWeekSchedule(val *WeekSchedule) *NullableWeekSchedule {
	return &NullableWeekSchedule{value: val, isSet: true}
}

func (v NullableWeekSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWeekSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o WeekSchedule) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}