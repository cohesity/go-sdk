/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// VMFilter Specifies the VM filter details.
type VMFilter struct {
	// Specifies the filter string using wildcard supported strings or regular expressions.
	FilterString NullableString `json:"filterString,omitempty"`
	// Specifies whether the provided filter string is a regular expression or not. This needs to be explicitly set to true if user is trying to filter by regular expressions. Not providing this value in case of regular expression can result in unintended results. The default value is assumed to be false.
	IsRegularExpression NullableBool `json:"isRegularExpression,omitempty"`
	// Specifies whether the provided filter string is case sensitive or not. This needs to be explicitly set to true if user is trying to filter by case sensitive expressions. The default value is assumed to be false.
	CaseSensitive NullableBool `json:"caseSensitive,omitempty"`
}

// NewVMFilter instantiates a new VMFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVMFilter() *VMFilter {
	this := VMFilter{}
	var isRegularExpression bool = false
	this.IsRegularExpression = *NewNullableBool(&isRegularExpression)
	var caseSensitive bool = false
	this.CaseSensitive = *NewNullableBool(&caseSensitive)
	return &this
}

// NewVMFilterWithDefaults instantiates a new VMFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVMFilterWithDefaults() *VMFilter {
	this := VMFilter{}
	var isRegularExpression bool = false
	this.IsRegularExpression = *NewNullableBool(&isRegularExpression)
	var caseSensitive bool = false
	this.CaseSensitive = *NewNullableBool(&caseSensitive)
	return &this
}

// GetFilterString returns the FilterString field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VMFilter) GetFilterString() string {
	if o == nil || o.FilterString.Get() == nil {
		var ret string
		return ret
	}
	return *o.FilterString.Get()
}

// GetFilterStringOk returns a tuple with the FilterString field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VMFilter) GetFilterStringOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FilterString.Get(), o.FilterString.IsSet()
}

// HasFilterString returns a boolean if a field has been set.
func (o *VMFilter) HasFilterString() bool {
	if o != nil && o.FilterString.IsSet() {
		return true
	}

	return false
}

// SetFilterString gets a reference to the given NullableString and assigns it to the FilterString field.
func (o *VMFilter) SetFilterString(v string) {
	o.FilterString.Set(&v)
}
// SetFilterStringNil sets the value for FilterString to be an explicit nil
func (o *VMFilter) SetFilterStringNil() {
	o.FilterString.Set(nil)
}

// UnsetFilterString ensures that no value is present for FilterString, not even an explicit nil
func (o *VMFilter) UnsetFilterString() {
	o.FilterString.Unset()
}

// GetIsRegularExpression returns the IsRegularExpression field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VMFilter) GetIsRegularExpression() bool {
	if o == nil || o.IsRegularExpression.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsRegularExpression.Get()
}

// GetIsRegularExpressionOk returns a tuple with the IsRegularExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VMFilter) GetIsRegularExpressionOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsRegularExpression.Get(), o.IsRegularExpression.IsSet()
}

// HasIsRegularExpression returns a boolean if a field has been set.
func (o *VMFilter) HasIsRegularExpression() bool {
	if o != nil && o.IsRegularExpression.IsSet() {
		return true
	}

	return false
}

// SetIsRegularExpression gets a reference to the given NullableBool and assigns it to the IsRegularExpression field.
func (o *VMFilter) SetIsRegularExpression(v bool) {
	o.IsRegularExpression.Set(&v)
}
// SetIsRegularExpressionNil sets the value for IsRegularExpression to be an explicit nil
func (o *VMFilter) SetIsRegularExpressionNil() {
	o.IsRegularExpression.Set(nil)
}

// UnsetIsRegularExpression ensures that no value is present for IsRegularExpression, not even an explicit nil
func (o *VMFilter) UnsetIsRegularExpression() {
	o.IsRegularExpression.Unset()
}

// GetCaseSensitive returns the CaseSensitive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VMFilter) GetCaseSensitive() bool {
	if o == nil || o.CaseSensitive.Get() == nil {
		var ret bool
		return ret
	}
	return *o.CaseSensitive.Get()
}

// GetCaseSensitiveOk returns a tuple with the CaseSensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VMFilter) GetCaseSensitiveOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CaseSensitive.Get(), o.CaseSensitive.IsSet()
}

// HasCaseSensitive returns a boolean if a field has been set.
func (o *VMFilter) HasCaseSensitive() bool {
	if o != nil && o.CaseSensitive.IsSet() {
		return true
	}

	return false
}

// SetCaseSensitive gets a reference to the given NullableBool and assigns it to the CaseSensitive field.
func (o *VMFilter) SetCaseSensitive(v bool) {
	o.CaseSensitive.Set(&v)
}
// SetCaseSensitiveNil sets the value for CaseSensitive to be an explicit nil
func (o *VMFilter) SetCaseSensitiveNil() {
	o.CaseSensitive.Set(nil)
}

// UnsetCaseSensitive ensures that no value is present for CaseSensitive, not even an explicit nil
func (o *VMFilter) UnsetCaseSensitive() {
	o.CaseSensitive.Unset()
}

func (o VMFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FilterString.IsSet() {
		toSerialize["filterString"] = o.FilterString.Get()
	}
	if o.IsRegularExpression.IsSet() {
		toSerialize["isRegularExpression"] = o.IsRegularExpression.Get()
	}
	if o.CaseSensitive.IsSet() {
		toSerialize["caseSensitive"] = o.CaseSensitive.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableVMFilter struct {
	value *VMFilter
	isSet bool
}

func (v NullableVMFilter) Get() *VMFilter {
	return v.value
}

func (v *NullableVMFilter) Set(val *VMFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableVMFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableVMFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVMFilter(val *VMFilter) *NullableVMFilter {
	return &NullableVMFilter{value: val, isSet: true}
}

func (v NullableVMFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVMFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o VMFilter) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}