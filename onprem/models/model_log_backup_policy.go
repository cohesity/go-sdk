/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// LogBackupPolicy Specifies log backup settings for a Protection Group.
type LogBackupPolicy struct {
	Schedule LogSchedule `json:"schedule"`
	Retention Retention `json:"retention"`
}

// NewLogBackupPolicy instantiates a new LogBackupPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogBackupPolicy(schedule LogSchedule, retention Retention) *LogBackupPolicy {
	this := LogBackupPolicy{}
	this.Schedule = schedule
	this.Retention = retention
	return &this
}

// NewLogBackupPolicyWithDefaults instantiates a new LogBackupPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogBackupPolicyWithDefaults() *LogBackupPolicy {
	this := LogBackupPolicy{}
	return &this
}

// GetSchedule returns the Schedule field value
func (o *LogBackupPolicy) GetSchedule() LogSchedule {
	if o == nil {
		var ret LogSchedule
		return ret
	}

	return o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value
// and a boolean to check if the value has been set.
func (o *LogBackupPolicy) GetScheduleOk() (*LogSchedule, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Schedule, true
}

// SetSchedule sets field value
func (o *LogBackupPolicy) SetSchedule(v LogSchedule) {
	o.Schedule = v
}

// GetRetention returns the Retention field value
func (o *LogBackupPolicy) GetRetention() Retention {
	if o == nil {
		var ret Retention
		return ret
	}

	return o.Retention
}

// GetRetentionOk returns a tuple with the Retention field value
// and a boolean to check if the value has been set.
func (o *LogBackupPolicy) GetRetentionOk() (*Retention, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Retention, true
}

// SetRetention sets field value
func (o *LogBackupPolicy) SetRetention(v Retention) {
	o.Retention = v
}

func (o LogBackupPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["schedule"] = o.Schedule
	}
	if true {
		toSerialize["retention"] = o.Retention
	}
	return json.Marshal(toSerialize)
}

type NullableLogBackupPolicy struct {
	value *LogBackupPolicy
	isSet bool
}

func (v NullableLogBackupPolicy) Get() *LogBackupPolicy {
	return v.value
}

func (v *NullableLogBackupPolicy) Set(val *LogBackupPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableLogBackupPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableLogBackupPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogBackupPolicy(val *LogBackupPolicy) *NullableLogBackupPolicy {
	return &NullableLogBackupPolicy{value: val, isSet: true}
}

func (v NullableLogBackupPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogBackupPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o LogBackupPolicy) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}