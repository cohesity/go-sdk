/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// SubnetInfo Subnet information.
type SubnetInfo struct {
	// Subnet IP.
	SubnetIp NullableString `json:"subnetIp,omitempty"`
	// Subnet netmask bits.
	NetmaskBits NullableInt32 `json:"netmaskBits,omitempty"`
	// Gateway.
	Gateway NullableString `json:"gateway,omitempty"`
}

// NewSubnetInfo instantiates a new SubnetInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubnetInfo() *SubnetInfo {
	this := SubnetInfo{}
	return &this
}

// NewSubnetInfoWithDefaults instantiates a new SubnetInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubnetInfoWithDefaults() *SubnetInfo {
	this := SubnetInfo{}
	return &this
}

// GetSubnetIp returns the SubnetIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubnetInfo) GetSubnetIp() string {
	if o == nil || o.SubnetIp.Get() == nil {
		var ret string
		return ret
	}
	return *o.SubnetIp.Get()
}

// GetSubnetIpOk returns a tuple with the SubnetIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubnetInfo) GetSubnetIpOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SubnetIp.Get(), o.SubnetIp.IsSet()
}

// HasSubnetIp returns a boolean if a field has been set.
func (o *SubnetInfo) HasSubnetIp() bool {
	if o != nil && o.SubnetIp.IsSet() {
		return true
	}

	return false
}

// SetSubnetIp gets a reference to the given NullableString and assigns it to the SubnetIp field.
func (o *SubnetInfo) SetSubnetIp(v string) {
	o.SubnetIp.Set(&v)
}
// SetSubnetIpNil sets the value for SubnetIp to be an explicit nil
func (o *SubnetInfo) SetSubnetIpNil() {
	o.SubnetIp.Set(nil)
}

// UnsetSubnetIp ensures that no value is present for SubnetIp, not even an explicit nil
func (o *SubnetInfo) UnsetSubnetIp() {
	o.SubnetIp.Unset()
}

// GetNetmaskBits returns the NetmaskBits field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubnetInfo) GetNetmaskBits() int32 {
	if o == nil || o.NetmaskBits.Get() == nil {
		var ret int32
		return ret
	}
	return *o.NetmaskBits.Get()
}

// GetNetmaskBitsOk returns a tuple with the NetmaskBits field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubnetInfo) GetNetmaskBitsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NetmaskBits.Get(), o.NetmaskBits.IsSet()
}

// HasNetmaskBits returns a boolean if a field has been set.
func (o *SubnetInfo) HasNetmaskBits() bool {
	if o != nil && o.NetmaskBits.IsSet() {
		return true
	}

	return false
}

// SetNetmaskBits gets a reference to the given NullableInt32 and assigns it to the NetmaskBits field.
func (o *SubnetInfo) SetNetmaskBits(v int32) {
	o.NetmaskBits.Set(&v)
}
// SetNetmaskBitsNil sets the value for NetmaskBits to be an explicit nil
func (o *SubnetInfo) SetNetmaskBitsNil() {
	o.NetmaskBits.Set(nil)
}

// UnsetNetmaskBits ensures that no value is present for NetmaskBits, not even an explicit nil
func (o *SubnetInfo) UnsetNetmaskBits() {
	o.NetmaskBits.Unset()
}

// GetGateway returns the Gateway field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubnetInfo) GetGateway() string {
	if o == nil || o.Gateway.Get() == nil {
		var ret string
		return ret
	}
	return *o.Gateway.Get()
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubnetInfo) GetGatewayOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Gateway.Get(), o.Gateway.IsSet()
}

// HasGateway returns a boolean if a field has been set.
func (o *SubnetInfo) HasGateway() bool {
	if o != nil && o.Gateway.IsSet() {
		return true
	}

	return false
}

// SetGateway gets a reference to the given NullableString and assigns it to the Gateway field.
func (o *SubnetInfo) SetGateway(v string) {
	o.Gateway.Set(&v)
}
// SetGatewayNil sets the value for Gateway to be an explicit nil
func (o *SubnetInfo) SetGatewayNil() {
	o.Gateway.Set(nil)
}

// UnsetGateway ensures that no value is present for Gateway, not even an explicit nil
func (o *SubnetInfo) UnsetGateway() {
	o.Gateway.Unset()
}

func (o SubnetInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SubnetIp.IsSet() {
		toSerialize["subnetIp"] = o.SubnetIp.Get()
	}
	if o.NetmaskBits.IsSet() {
		toSerialize["netmaskBits"] = o.NetmaskBits.Get()
	}
	if o.Gateway.IsSet() {
		toSerialize["gateway"] = o.Gateway.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSubnetInfo struct {
	value *SubnetInfo
	isSet bool
}

func (v NullableSubnetInfo) Get() *SubnetInfo {
	return v.value
}

func (v *NullableSubnetInfo) Set(val *SubnetInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSubnetInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSubnetInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubnetInfo(val *SubnetInfo) *NullableSubnetInfo {
	return &NullableSubnetInfo{value: val, isSet: true}
}

func (v NullableSubnetInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubnetInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o SubnetInfo) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}