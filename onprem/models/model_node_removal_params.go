/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// NodeRemovalParams Specifies parameters to initiate/cancel node removal.
type NodeRemovalParams struct {
	// If true, cancels node removal that is already in progress.
	Cancel NullableBool `json:"cancel"`
}

// NewNodeRemovalParams instantiates a new NodeRemovalParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeRemovalParams(cancel NullableBool) *NodeRemovalParams {
	this := NodeRemovalParams{}
	this.Cancel = cancel
	return &this
}

// NewNodeRemovalParamsWithDefaults instantiates a new NodeRemovalParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeRemovalParamsWithDefaults() *NodeRemovalParams {
	this := NodeRemovalParams{}
	return &this
}

// GetCancel returns the Cancel field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *NodeRemovalParams) GetCancel() bool {
	if o == nil || o.Cancel.Get() == nil {
		var ret bool
		return ret
	}

	return *o.Cancel.Get()
}

// GetCancelOk returns a tuple with the Cancel field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeRemovalParams) GetCancelOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Cancel.Get(), o.Cancel.IsSet()
}

// SetCancel sets field value
func (o *NodeRemovalParams) SetCancel(v bool) {
	o.Cancel.Set(&v)
}

func (o NodeRemovalParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["cancel"] = o.Cancel.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableNodeRemovalParams struct {
	value *NodeRemovalParams
	isSet bool
}

func (v NullableNodeRemovalParams) Get() *NodeRemovalParams {
	return v.value
}

func (v *NullableNodeRemovalParams) Set(val *NodeRemovalParams) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeRemovalParams) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeRemovalParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeRemovalParams(val *NodeRemovalParams) *NullableNodeRemovalParams {
	return &NullableNodeRemovalParams{value: val, isSet: true}
}

func (v NullableNodeRemovalParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeRemovalParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o NodeRemovalParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}