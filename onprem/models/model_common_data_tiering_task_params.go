/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// CommonDataTieringTaskParams Specifies the data tiering task details.
type CommonDataTieringTaskParams struct {
	// Specifies the name of the data tiering task.
	Name NullableString `json:"name"`
	// Specifies a description of the data tiering task.
	Description NullableString `json:"description,omitempty"`
	AlertPolicy *ProtectionGroupAlertingPolicy `json:"alertPolicy,omitempty"`
	Source *DataTieringSource `json:"source,omitempty"`
	Target NullableDataTieringTarget `json:"target,omitempty"`
	Schedule *DataTieringSchedule `json:"schedule,omitempty"`
	// Type of data tiering task. 'Downtier' indicates downtiering task. 'Uptier' indicates uptiering task.
	Type NullableString `json:"type"`
}

// NewCommonDataTieringTaskParams instantiates a new CommonDataTieringTaskParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonDataTieringTaskParams(name NullableString, type_ NullableString) *CommonDataTieringTaskParams {
	this := CommonDataTieringTaskParams{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewCommonDataTieringTaskParamsWithDefaults instantiates a new CommonDataTieringTaskParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonDataTieringTaskParamsWithDefaults() *CommonDataTieringTaskParams {
	this := CommonDataTieringTaskParams{}
	return &this
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CommonDataTieringTaskParams) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonDataTieringTaskParams) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *CommonDataTieringTaskParams) SetName(v string) {
	o.Name.Set(&v)
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonDataTieringTaskParams) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonDataTieringTaskParams) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *CommonDataTieringTaskParams) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *CommonDataTieringTaskParams) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *CommonDataTieringTaskParams) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *CommonDataTieringTaskParams) UnsetDescription() {
	o.Description.Unset()
}

// GetAlertPolicy returns the AlertPolicy field value if set, zero value otherwise.
func (o *CommonDataTieringTaskParams) GetAlertPolicy() ProtectionGroupAlertingPolicy {
	if o == nil || o.AlertPolicy == nil {
		var ret ProtectionGroupAlertingPolicy
		return ret
	}
	return *o.AlertPolicy
}

// GetAlertPolicyOk returns a tuple with the AlertPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonDataTieringTaskParams) GetAlertPolicyOk() (*ProtectionGroupAlertingPolicy, bool) {
	if o == nil || o.AlertPolicy == nil {
		return nil, false
	}
	return o.AlertPolicy, true
}

// HasAlertPolicy returns a boolean if a field has been set.
func (o *CommonDataTieringTaskParams) HasAlertPolicy() bool {
	if o != nil && o.AlertPolicy != nil {
		return true
	}

	return false
}

// SetAlertPolicy gets a reference to the given ProtectionGroupAlertingPolicy and assigns it to the AlertPolicy field.
func (o *CommonDataTieringTaskParams) SetAlertPolicy(v ProtectionGroupAlertingPolicy) {
	o.AlertPolicy = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *CommonDataTieringTaskParams) GetSource() DataTieringSource {
	if o == nil || o.Source == nil {
		var ret DataTieringSource
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonDataTieringTaskParams) GetSourceOk() (*DataTieringSource, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *CommonDataTieringTaskParams) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given DataTieringSource and assigns it to the Source field.
func (o *CommonDataTieringTaskParams) SetSource(v DataTieringSource) {
	o.Source = &v
}

// GetTarget returns the Target field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonDataTieringTaskParams) GetTarget() DataTieringTarget {
	if o == nil || o.Target.Get() == nil {
		var ret DataTieringTarget
		return ret
	}
	return *o.Target.Get()
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonDataTieringTaskParams) GetTargetOk() (*DataTieringTarget, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Target.Get(), o.Target.IsSet()
}

// HasTarget returns a boolean if a field has been set.
func (o *CommonDataTieringTaskParams) HasTarget() bool {
	if o != nil && o.Target.IsSet() {
		return true
	}

	return false
}

// SetTarget gets a reference to the given NullableDataTieringTarget and assigns it to the Target field.
func (o *CommonDataTieringTaskParams) SetTarget(v DataTieringTarget) {
	o.Target.Set(&v)
}
// SetTargetNil sets the value for Target to be an explicit nil
func (o *CommonDataTieringTaskParams) SetTargetNil() {
	o.Target.Set(nil)
}

// UnsetTarget ensures that no value is present for Target, not even an explicit nil
func (o *CommonDataTieringTaskParams) UnsetTarget() {
	o.Target.Unset()
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *CommonDataTieringTaskParams) GetSchedule() DataTieringSchedule {
	if o == nil || o.Schedule == nil {
		var ret DataTieringSchedule
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonDataTieringTaskParams) GetScheduleOk() (*DataTieringSchedule, bool) {
	if o == nil || o.Schedule == nil {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *CommonDataTieringTaskParams) HasSchedule() bool {
	if o != nil && o.Schedule != nil {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given DataTieringSchedule and assigns it to the Schedule field.
func (o *CommonDataTieringTaskParams) SetSchedule(v DataTieringSchedule) {
	o.Schedule = &v
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CommonDataTieringTaskParams) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}

	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonDataTieringTaskParams) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// SetType sets field value
func (o *CommonDataTieringTaskParams) SetType(v string) {
	o.Type.Set(&v)
}

func (o CommonDataTieringTaskParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.AlertPolicy != nil {
		toSerialize["alertPolicy"] = o.AlertPolicy
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if o.Target.IsSet() {
		toSerialize["target"] = o.Target.Get()
	}
	if o.Schedule != nil {
		toSerialize["schedule"] = o.Schedule
	}
	if true {
		toSerialize["type"] = o.Type.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCommonDataTieringTaskParams struct {
	value *CommonDataTieringTaskParams
	isSet bool
}

func (v NullableCommonDataTieringTaskParams) Get() *CommonDataTieringTaskParams {
	return v.value
}

func (v *NullableCommonDataTieringTaskParams) Set(val *CommonDataTieringTaskParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonDataTieringTaskParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonDataTieringTaskParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonDataTieringTaskParams(val *CommonDataTieringTaskParams) *NullableCommonDataTieringTaskParams {
	return &NullableCommonDataTieringTaskParams{value: val, isSet: true}
}

func (v NullableCommonDataTieringTaskParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonDataTieringTaskParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o CommonDataTieringTaskParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}