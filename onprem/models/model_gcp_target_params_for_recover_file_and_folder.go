/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// GcpTargetParamsForRecoverFileAndFolder Specifies the parameters for a GCP recovery target.
type GcpTargetParamsForRecoverFileAndFolder struct {
	// Specifies the target VM to recover files and folders to.
	TargetVm NullableRecoveryObjectIdentifier `json:"targetVm"`
	// Specifies whether to recover files to original places.
	RecoverToOriginalPaths NullableBool `json:"recoverToOriginalPaths"`
	// Specifies credentials to access the target VM.
	TargetVmCredentials NullableCredentials `json:"targetVmCredentials"`
	// Specifies a base directory under which all files and folders will be recovered. This is required if recoverToOriginalPaths is set to false.
	AlternateBaseDirectory NullableString `json:"alternateBaseDirectory,omitempty"`
	// Specifies whether to override the existing files. Default is true.
	OverwriteOriginals NullableBool `json:"overwriteOriginals,omitempty"`
	// Specifies whether to preserve original attributes. Default is true.
	PreserveAttributes NullableBool `json:"preserveAttributes,omitempty"`
	// Specifies whether to continue recovering other files if one of files or folders failed to recover. Default value is false.
	ContinueOnError NullableBool `json:"continueOnError,omitempty"`
	// Specifies VLAN Params associated with the recovered files and folders. If this is not specified, then the VLAN settings will be automatically selected from one of the below options: a. If VLANs are configured on Cohesity, then the VLAN host/VIP will be automatically based on the client's (e.g. ESXI host) IP address. b. If VLANs are not configured on Cohesity, then the partition hostname or VIPs will be used for Recovery.
	VlanConfig NullableRecoveryVlanConfig `json:"vlanConfig,omitempty"`
}

// NewGcpTargetParamsForRecoverFileAndFolder instantiates a new GcpTargetParamsForRecoverFileAndFolder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGcpTargetParamsForRecoverFileAndFolder(targetVm NullableRecoveryObjectIdentifier, recoverToOriginalPaths NullableBool, targetVmCredentials NullableCredentials) *GcpTargetParamsForRecoverFileAndFolder {
	this := GcpTargetParamsForRecoverFileAndFolder{}
	this.TargetVm = targetVm
	this.RecoverToOriginalPaths = recoverToOriginalPaths
	this.TargetVmCredentials = targetVmCredentials
	return &this
}

// NewGcpTargetParamsForRecoverFileAndFolderWithDefaults instantiates a new GcpTargetParamsForRecoverFileAndFolder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGcpTargetParamsForRecoverFileAndFolderWithDefaults() *GcpTargetParamsForRecoverFileAndFolder {
	this := GcpTargetParamsForRecoverFileAndFolder{}
	return &this
}

// GetTargetVm returns the TargetVm field value
// If the value is explicit nil, the zero value for RecoveryObjectIdentifier will be returned
func (o *GcpTargetParamsForRecoverFileAndFolder) GetTargetVm() RecoveryObjectIdentifier {
	if o == nil || o.TargetVm.Get() == nil {
		var ret RecoveryObjectIdentifier
		return ret
	}

	return *o.TargetVm.Get()
}

// GetTargetVmOk returns a tuple with the TargetVm field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GcpTargetParamsForRecoverFileAndFolder) GetTargetVmOk() (*RecoveryObjectIdentifier, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetVm.Get(), o.TargetVm.IsSet()
}

// SetTargetVm sets field value
func (o *GcpTargetParamsForRecoverFileAndFolder) SetTargetVm(v RecoveryObjectIdentifier) {
	o.TargetVm.Set(&v)
}

// GetRecoverToOriginalPaths returns the RecoverToOriginalPaths field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *GcpTargetParamsForRecoverFileAndFolder) GetRecoverToOriginalPaths() bool {
	if o == nil || o.RecoverToOriginalPaths.Get() == nil {
		var ret bool
		return ret
	}

	return *o.RecoverToOriginalPaths.Get()
}

// GetRecoverToOriginalPathsOk returns a tuple with the RecoverToOriginalPaths field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GcpTargetParamsForRecoverFileAndFolder) GetRecoverToOriginalPathsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RecoverToOriginalPaths.Get(), o.RecoverToOriginalPaths.IsSet()
}

// SetRecoverToOriginalPaths sets field value
func (o *GcpTargetParamsForRecoverFileAndFolder) SetRecoverToOriginalPaths(v bool) {
	o.RecoverToOriginalPaths.Set(&v)
}

// GetTargetVmCredentials returns the TargetVmCredentials field value
// If the value is explicit nil, the zero value for Credentials will be returned
func (o *GcpTargetParamsForRecoverFileAndFolder) GetTargetVmCredentials() Credentials {
	if o == nil || o.TargetVmCredentials.Get() == nil {
		var ret Credentials
		return ret
	}

	return *o.TargetVmCredentials.Get()
}

// GetTargetVmCredentialsOk returns a tuple with the TargetVmCredentials field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GcpTargetParamsForRecoverFileAndFolder) GetTargetVmCredentialsOk() (*Credentials, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetVmCredentials.Get(), o.TargetVmCredentials.IsSet()
}

// SetTargetVmCredentials sets field value
func (o *GcpTargetParamsForRecoverFileAndFolder) SetTargetVmCredentials(v Credentials) {
	o.TargetVmCredentials.Set(&v)
}

// GetAlternateBaseDirectory returns the AlternateBaseDirectory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GcpTargetParamsForRecoverFileAndFolder) GetAlternateBaseDirectory() string {
	if o == nil || o.AlternateBaseDirectory.Get() == nil {
		var ret string
		return ret
	}
	return *o.AlternateBaseDirectory.Get()
}

// GetAlternateBaseDirectoryOk returns a tuple with the AlternateBaseDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GcpTargetParamsForRecoverFileAndFolder) GetAlternateBaseDirectoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AlternateBaseDirectory.Get(), o.AlternateBaseDirectory.IsSet()
}

// HasAlternateBaseDirectory returns a boolean if a field has been set.
func (o *GcpTargetParamsForRecoverFileAndFolder) HasAlternateBaseDirectory() bool {
	if o != nil && o.AlternateBaseDirectory.IsSet() {
		return true
	}

	return false
}

// SetAlternateBaseDirectory gets a reference to the given NullableString and assigns it to the AlternateBaseDirectory field.
func (o *GcpTargetParamsForRecoverFileAndFolder) SetAlternateBaseDirectory(v string) {
	o.AlternateBaseDirectory.Set(&v)
}
// SetAlternateBaseDirectoryNil sets the value for AlternateBaseDirectory to be an explicit nil
func (o *GcpTargetParamsForRecoverFileAndFolder) SetAlternateBaseDirectoryNil() {
	o.AlternateBaseDirectory.Set(nil)
}

// UnsetAlternateBaseDirectory ensures that no value is present for AlternateBaseDirectory, not even an explicit nil
func (o *GcpTargetParamsForRecoverFileAndFolder) UnsetAlternateBaseDirectory() {
	o.AlternateBaseDirectory.Unset()
}

// GetOverwriteOriginals returns the OverwriteOriginals field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GcpTargetParamsForRecoverFileAndFolder) GetOverwriteOriginals() bool {
	if o == nil || o.OverwriteOriginals.Get() == nil {
		var ret bool
		return ret
	}
	return *o.OverwriteOriginals.Get()
}

// GetOverwriteOriginalsOk returns a tuple with the OverwriteOriginals field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GcpTargetParamsForRecoverFileAndFolder) GetOverwriteOriginalsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OverwriteOriginals.Get(), o.OverwriteOriginals.IsSet()
}

// HasOverwriteOriginals returns a boolean if a field has been set.
func (o *GcpTargetParamsForRecoverFileAndFolder) HasOverwriteOriginals() bool {
	if o != nil && o.OverwriteOriginals.IsSet() {
		return true
	}

	return false
}

// SetOverwriteOriginals gets a reference to the given NullableBool and assigns it to the OverwriteOriginals field.
func (o *GcpTargetParamsForRecoverFileAndFolder) SetOverwriteOriginals(v bool) {
	o.OverwriteOriginals.Set(&v)
}
// SetOverwriteOriginalsNil sets the value for OverwriteOriginals to be an explicit nil
func (o *GcpTargetParamsForRecoverFileAndFolder) SetOverwriteOriginalsNil() {
	o.OverwriteOriginals.Set(nil)
}

// UnsetOverwriteOriginals ensures that no value is present for OverwriteOriginals, not even an explicit nil
func (o *GcpTargetParamsForRecoverFileAndFolder) UnsetOverwriteOriginals() {
	o.OverwriteOriginals.Unset()
}

// GetPreserveAttributes returns the PreserveAttributes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GcpTargetParamsForRecoverFileAndFolder) GetPreserveAttributes() bool {
	if o == nil || o.PreserveAttributes.Get() == nil {
		var ret bool
		return ret
	}
	return *o.PreserveAttributes.Get()
}

// GetPreserveAttributesOk returns a tuple with the PreserveAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GcpTargetParamsForRecoverFileAndFolder) GetPreserveAttributesOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PreserveAttributes.Get(), o.PreserveAttributes.IsSet()
}

// HasPreserveAttributes returns a boolean if a field has been set.
func (o *GcpTargetParamsForRecoverFileAndFolder) HasPreserveAttributes() bool {
	if o != nil && o.PreserveAttributes.IsSet() {
		return true
	}

	return false
}

// SetPreserveAttributes gets a reference to the given NullableBool and assigns it to the PreserveAttributes field.
func (o *GcpTargetParamsForRecoverFileAndFolder) SetPreserveAttributes(v bool) {
	o.PreserveAttributes.Set(&v)
}
// SetPreserveAttributesNil sets the value for PreserveAttributes to be an explicit nil
func (o *GcpTargetParamsForRecoverFileAndFolder) SetPreserveAttributesNil() {
	o.PreserveAttributes.Set(nil)
}

// UnsetPreserveAttributes ensures that no value is present for PreserveAttributes, not even an explicit nil
func (o *GcpTargetParamsForRecoverFileAndFolder) UnsetPreserveAttributes() {
	o.PreserveAttributes.Unset()
}

// GetContinueOnError returns the ContinueOnError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GcpTargetParamsForRecoverFileAndFolder) GetContinueOnError() bool {
	if o == nil || o.ContinueOnError.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ContinueOnError.Get()
}

// GetContinueOnErrorOk returns a tuple with the ContinueOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GcpTargetParamsForRecoverFileAndFolder) GetContinueOnErrorOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ContinueOnError.Get(), o.ContinueOnError.IsSet()
}

// HasContinueOnError returns a boolean if a field has been set.
func (o *GcpTargetParamsForRecoverFileAndFolder) HasContinueOnError() bool {
	if o != nil && o.ContinueOnError.IsSet() {
		return true
	}

	return false
}

// SetContinueOnError gets a reference to the given NullableBool and assigns it to the ContinueOnError field.
func (o *GcpTargetParamsForRecoverFileAndFolder) SetContinueOnError(v bool) {
	o.ContinueOnError.Set(&v)
}
// SetContinueOnErrorNil sets the value for ContinueOnError to be an explicit nil
func (o *GcpTargetParamsForRecoverFileAndFolder) SetContinueOnErrorNil() {
	o.ContinueOnError.Set(nil)
}

// UnsetContinueOnError ensures that no value is present for ContinueOnError, not even an explicit nil
func (o *GcpTargetParamsForRecoverFileAndFolder) UnsetContinueOnError() {
	o.ContinueOnError.Unset()
}

// GetVlanConfig returns the VlanConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GcpTargetParamsForRecoverFileAndFolder) GetVlanConfig() RecoveryVlanConfig {
	if o == nil || o.VlanConfig.Get() == nil {
		var ret RecoveryVlanConfig
		return ret
	}
	return *o.VlanConfig.Get()
}

// GetVlanConfigOk returns a tuple with the VlanConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GcpTargetParamsForRecoverFileAndFolder) GetVlanConfigOk() (*RecoveryVlanConfig, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VlanConfig.Get(), o.VlanConfig.IsSet()
}

// HasVlanConfig returns a boolean if a field has been set.
func (o *GcpTargetParamsForRecoverFileAndFolder) HasVlanConfig() bool {
	if o != nil && o.VlanConfig.IsSet() {
		return true
	}

	return false
}

// SetVlanConfig gets a reference to the given NullableRecoveryVlanConfig and assigns it to the VlanConfig field.
func (o *GcpTargetParamsForRecoverFileAndFolder) SetVlanConfig(v RecoveryVlanConfig) {
	o.VlanConfig.Set(&v)
}
// SetVlanConfigNil sets the value for VlanConfig to be an explicit nil
func (o *GcpTargetParamsForRecoverFileAndFolder) SetVlanConfigNil() {
	o.VlanConfig.Set(nil)
}

// UnsetVlanConfig ensures that no value is present for VlanConfig, not even an explicit nil
func (o *GcpTargetParamsForRecoverFileAndFolder) UnsetVlanConfig() {
	o.VlanConfig.Unset()
}

func (o GcpTargetParamsForRecoverFileAndFolder) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["targetVm"] = o.TargetVm.Get()
	}
	if true {
		toSerialize["recoverToOriginalPaths"] = o.RecoverToOriginalPaths.Get()
	}
	if true {
		toSerialize["targetVmCredentials"] = o.TargetVmCredentials.Get()
	}
	if o.AlternateBaseDirectory.IsSet() {
		toSerialize["alternateBaseDirectory"] = o.AlternateBaseDirectory.Get()
	}
	if o.OverwriteOriginals.IsSet() {
		toSerialize["overwriteOriginals"] = o.OverwriteOriginals.Get()
	}
	if o.PreserveAttributes.IsSet() {
		toSerialize["preserveAttributes"] = o.PreserveAttributes.Get()
	}
	if o.ContinueOnError.IsSet() {
		toSerialize["continueOnError"] = o.ContinueOnError.Get()
	}
	if o.VlanConfig.IsSet() {
		toSerialize["vlanConfig"] = o.VlanConfig.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableGcpTargetParamsForRecoverFileAndFolder struct {
	value *GcpTargetParamsForRecoverFileAndFolder
	isSet bool
}

func (v NullableGcpTargetParamsForRecoverFileAndFolder) Get() *GcpTargetParamsForRecoverFileAndFolder {
	return v.value
}

func (v *NullableGcpTargetParamsForRecoverFileAndFolder) Set(val *GcpTargetParamsForRecoverFileAndFolder) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpTargetParamsForRecoverFileAndFolder) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpTargetParamsForRecoverFileAndFolder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpTargetParamsForRecoverFileAndFolder(val *GcpTargetParamsForRecoverFileAndFolder) *NullableGcpTargetParamsForRecoverFileAndFolder {
	return &NullableGcpTargetParamsForRecoverFileAndFolder{value: val, isSet: true}
}

func (v NullableGcpTargetParamsForRecoverFileAndFolder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpTargetParamsForRecoverFileAndFolder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o GcpTargetParamsForRecoverFileAndFolder) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}