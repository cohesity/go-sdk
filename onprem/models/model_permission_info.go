/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// PermissionInfo Specifies the list of users, groups and users that have permissions for a given object.
type PermissionInfo struct {
	// Specifies the id of the object.
	ObjectId NullableInt64 `json:"objectId,omitempty"`
	// Specifies the list of users which has the permissions to the object.
	Users []User `json:"users,omitempty"`
	// Specifies the list of user groups which has permissions to the object.
	Groups []Group `json:"groups,omitempty"`
	Tenant *Tenant `json:"tenant,omitempty"`
}

// NewPermissionInfo instantiates a new PermissionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionInfo() *PermissionInfo {
	this := PermissionInfo{}
	return &this
}

// NewPermissionInfoWithDefaults instantiates a new PermissionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionInfoWithDefaults() *PermissionInfo {
	this := PermissionInfo{}
	return &this
}

// GetObjectId returns the ObjectId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PermissionInfo) GetObjectId() int64 {
	if o == nil || o.ObjectId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ObjectId.Get()
}

// GetObjectIdOk returns a tuple with the ObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PermissionInfo) GetObjectIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ObjectId.Get(), o.ObjectId.IsSet()
}

// HasObjectId returns a boolean if a field has been set.
func (o *PermissionInfo) HasObjectId() bool {
	if o != nil && o.ObjectId.IsSet() {
		return true
	}

	return false
}

// SetObjectId gets a reference to the given NullableInt64 and assigns it to the ObjectId field.
func (o *PermissionInfo) SetObjectId(v int64) {
	o.ObjectId.Set(&v)
}
// SetObjectIdNil sets the value for ObjectId to be an explicit nil
func (o *PermissionInfo) SetObjectIdNil() {
	o.ObjectId.Set(nil)
}

// UnsetObjectId ensures that no value is present for ObjectId, not even an explicit nil
func (o *PermissionInfo) UnsetObjectId() {
	o.ObjectId.Unset()
}

// GetUsers returns the Users field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PermissionInfo) GetUsers() []User {
	if o == nil  {
		var ret []User
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PermissionInfo) GetUsersOk() (*[]User, bool) {
	if o == nil || o.Users == nil {
		return nil, false
	}
	return &o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *PermissionInfo) HasUsers() bool {
	if o != nil && o.Users != nil {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []User and assigns it to the Users field.
func (o *PermissionInfo) SetUsers(v []User) {
	o.Users = v
}

// GetGroups returns the Groups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PermissionInfo) GetGroups() []Group {
	if o == nil  {
		var ret []Group
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PermissionInfo) GetGroupsOk() (*[]Group, bool) {
	if o == nil || o.Groups == nil {
		return nil, false
	}
	return &o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *PermissionInfo) HasGroups() bool {
	if o != nil && o.Groups != nil {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []Group and assigns it to the Groups field.
func (o *PermissionInfo) SetGroups(v []Group) {
	o.Groups = v
}

// GetTenant returns the Tenant field value if set, zero value otherwise.
func (o *PermissionInfo) GetTenant() Tenant {
	if o == nil || o.Tenant == nil {
		var ret Tenant
		return ret
	}
	return *o.Tenant
}

// GetTenantOk returns a tuple with the Tenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionInfo) GetTenantOk() (*Tenant, bool) {
	if o == nil || o.Tenant == nil {
		return nil, false
	}
	return o.Tenant, true
}

// HasTenant returns a boolean if a field has been set.
func (o *PermissionInfo) HasTenant() bool {
	if o != nil && o.Tenant != nil {
		return true
	}

	return false
}

// SetTenant gets a reference to the given Tenant and assigns it to the Tenant field.
func (o *PermissionInfo) SetTenant(v Tenant) {
	o.Tenant = &v
}

func (o PermissionInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ObjectId.IsSet() {
		toSerialize["objectId"] = o.ObjectId.Get()
	}
	if o.Users != nil {
		toSerialize["users"] = o.Users
	}
	if o.Groups != nil {
		toSerialize["groups"] = o.Groups
	}
	if o.Tenant != nil {
		toSerialize["tenant"] = o.Tenant
	}
	return json.Marshal(toSerialize)
}

type NullablePermissionInfo struct {
	value *PermissionInfo
	isSet bool
}

func (v NullablePermissionInfo) Get() *PermissionInfo {
	return v.value
}

func (v *NullablePermissionInfo) Set(val *PermissionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionInfo(val *PermissionInfo) *NullablePermissionInfo {
	return &NullablePermissionInfo{value: val, isSet: true}
}

func (v NullablePermissionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o PermissionInfo) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}