/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// KeystoneScopeParams Specifies scope paramteres of a Keystone.
type KeystoneScopeParams struct {
	// Specifies the scope type.
	Type NullableString `json:"type"`
	// Specifies the parameter for project type scope.
	ProjectScopeParams *ProjectScopeParams `json:"projectScopeParams,omitempty"`
	// Specifies the parameters for domain type scope.
	DomainScopeParams *DomainScopeParams `json:"domainScopeParams,omitempty"`
}

// NewKeystoneScopeParams instantiates a new KeystoneScopeParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeystoneScopeParams(type_ NullableString) *KeystoneScopeParams {
	this := KeystoneScopeParams{}
	this.Type = type_
	return &this
}

// NewKeystoneScopeParamsWithDefaults instantiates a new KeystoneScopeParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeystoneScopeParamsWithDefaults() *KeystoneScopeParams {
	this := KeystoneScopeParams{}
	return &this
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for string will be returned
func (o *KeystoneScopeParams) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}

	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeystoneScopeParams) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// SetType sets field value
func (o *KeystoneScopeParams) SetType(v string) {
	o.Type.Set(&v)
}

// GetProjectScopeParams returns the ProjectScopeParams field value if set, zero value otherwise.
func (o *KeystoneScopeParams) GetProjectScopeParams() ProjectScopeParams {
	if o == nil || o.ProjectScopeParams == nil {
		var ret ProjectScopeParams
		return ret
	}
	return *o.ProjectScopeParams
}

// GetProjectScopeParamsOk returns a tuple with the ProjectScopeParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeystoneScopeParams) GetProjectScopeParamsOk() (*ProjectScopeParams, bool) {
	if o == nil || o.ProjectScopeParams == nil {
		return nil, false
	}
	return o.ProjectScopeParams, true
}

// HasProjectScopeParams returns a boolean if a field has been set.
func (o *KeystoneScopeParams) HasProjectScopeParams() bool {
	if o != nil && o.ProjectScopeParams != nil {
		return true
	}

	return false
}

// SetProjectScopeParams gets a reference to the given ProjectScopeParams and assigns it to the ProjectScopeParams field.
func (o *KeystoneScopeParams) SetProjectScopeParams(v ProjectScopeParams) {
	o.ProjectScopeParams = &v
}

// GetDomainScopeParams returns the DomainScopeParams field value if set, zero value otherwise.
func (o *KeystoneScopeParams) GetDomainScopeParams() DomainScopeParams {
	if o == nil || o.DomainScopeParams == nil {
		var ret DomainScopeParams
		return ret
	}
	return *o.DomainScopeParams
}

// GetDomainScopeParamsOk returns a tuple with the DomainScopeParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeystoneScopeParams) GetDomainScopeParamsOk() (*DomainScopeParams, bool) {
	if o == nil || o.DomainScopeParams == nil {
		return nil, false
	}
	return o.DomainScopeParams, true
}

// HasDomainScopeParams returns a boolean if a field has been set.
func (o *KeystoneScopeParams) HasDomainScopeParams() bool {
	if o != nil && o.DomainScopeParams != nil {
		return true
	}

	return false
}

// SetDomainScopeParams gets a reference to the given DomainScopeParams and assigns it to the DomainScopeParams field.
func (o *KeystoneScopeParams) SetDomainScopeParams(v DomainScopeParams) {
	o.DomainScopeParams = &v
}

func (o KeystoneScopeParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type.Get()
	}
	if o.ProjectScopeParams != nil {
		toSerialize["projectScopeParams"] = o.ProjectScopeParams
	}
	if o.DomainScopeParams != nil {
		toSerialize["domainScopeParams"] = o.DomainScopeParams
	}
	return json.Marshal(toSerialize)
}

type NullableKeystoneScopeParams struct {
	value *KeystoneScopeParams
	isSet bool
}

func (v NullableKeystoneScopeParams) Get() *KeystoneScopeParams {
	return v.value
}

func (v *NullableKeystoneScopeParams) Set(val *KeystoneScopeParams) {
	v.value = val
	v.isSet = true
}

func (v NullableKeystoneScopeParams) IsSet() bool {
	return v.isSet
}

func (v *NullableKeystoneScopeParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeystoneScopeParams(val *KeystoneScopeParams) *NullableKeystoneScopeParams {
	return &NullableKeystoneScopeParams{value: val, isSet: true}
}

func (v NullableKeystoneScopeParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeystoneScopeParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o KeystoneScopeParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}