/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// ProtectedObjectBackupConfigAllOf struct for ProtectedObjectBackupConfigAllOf
type ProtectedObjectBackupConfigAllOf struct {
	// Specifies whether or not this configuration is applied to an autoprotected object rather than this specific object.
	IsAutoProtectConfig NullableBool `json:"isAutoProtectConfig,omitempty"`
	// Specifies the parent ID of the object which the backup configuration is applied to if this is an auto protect config.
	AutoProtectParentId NullableInt64 `json:"autoProtectParentId,omitempty"`
	// Specifies whether or not protection has been paused on this object.
	IsPaused NullableBool `json:"isPaused,omitempty"`
	// Specifies whether or not protection has been deactivated on this object.
	IsActive NullableBool `json:"isActive,omitempty"`
}

// NewProtectedObjectBackupConfigAllOf instantiates a new ProtectedObjectBackupConfigAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtectedObjectBackupConfigAllOf() *ProtectedObjectBackupConfigAllOf {
	this := ProtectedObjectBackupConfigAllOf{}
	return &this
}

// NewProtectedObjectBackupConfigAllOfWithDefaults instantiates a new ProtectedObjectBackupConfigAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtectedObjectBackupConfigAllOfWithDefaults() *ProtectedObjectBackupConfigAllOf {
	this := ProtectedObjectBackupConfigAllOf{}
	return &this
}

// GetIsAutoProtectConfig returns the IsAutoProtectConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectedObjectBackupConfigAllOf) GetIsAutoProtectConfig() bool {
	if o == nil || o.IsAutoProtectConfig.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsAutoProtectConfig.Get()
}

// GetIsAutoProtectConfigOk returns a tuple with the IsAutoProtectConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectedObjectBackupConfigAllOf) GetIsAutoProtectConfigOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsAutoProtectConfig.Get(), o.IsAutoProtectConfig.IsSet()
}

// HasIsAutoProtectConfig returns a boolean if a field has been set.
func (o *ProtectedObjectBackupConfigAllOf) HasIsAutoProtectConfig() bool {
	if o != nil && o.IsAutoProtectConfig.IsSet() {
		return true
	}

	return false
}

// SetIsAutoProtectConfig gets a reference to the given NullableBool and assigns it to the IsAutoProtectConfig field.
func (o *ProtectedObjectBackupConfigAllOf) SetIsAutoProtectConfig(v bool) {
	o.IsAutoProtectConfig.Set(&v)
}
// SetIsAutoProtectConfigNil sets the value for IsAutoProtectConfig to be an explicit nil
func (o *ProtectedObjectBackupConfigAllOf) SetIsAutoProtectConfigNil() {
	o.IsAutoProtectConfig.Set(nil)
}

// UnsetIsAutoProtectConfig ensures that no value is present for IsAutoProtectConfig, not even an explicit nil
func (o *ProtectedObjectBackupConfigAllOf) UnsetIsAutoProtectConfig() {
	o.IsAutoProtectConfig.Unset()
}

// GetAutoProtectParentId returns the AutoProtectParentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectedObjectBackupConfigAllOf) GetAutoProtectParentId() int64 {
	if o == nil || o.AutoProtectParentId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.AutoProtectParentId.Get()
}

// GetAutoProtectParentIdOk returns a tuple with the AutoProtectParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectedObjectBackupConfigAllOf) GetAutoProtectParentIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AutoProtectParentId.Get(), o.AutoProtectParentId.IsSet()
}

// HasAutoProtectParentId returns a boolean if a field has been set.
func (o *ProtectedObjectBackupConfigAllOf) HasAutoProtectParentId() bool {
	if o != nil && o.AutoProtectParentId.IsSet() {
		return true
	}

	return false
}

// SetAutoProtectParentId gets a reference to the given NullableInt64 and assigns it to the AutoProtectParentId field.
func (o *ProtectedObjectBackupConfigAllOf) SetAutoProtectParentId(v int64) {
	o.AutoProtectParentId.Set(&v)
}
// SetAutoProtectParentIdNil sets the value for AutoProtectParentId to be an explicit nil
func (o *ProtectedObjectBackupConfigAllOf) SetAutoProtectParentIdNil() {
	o.AutoProtectParentId.Set(nil)
}

// UnsetAutoProtectParentId ensures that no value is present for AutoProtectParentId, not even an explicit nil
func (o *ProtectedObjectBackupConfigAllOf) UnsetAutoProtectParentId() {
	o.AutoProtectParentId.Unset()
}

// GetIsPaused returns the IsPaused field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectedObjectBackupConfigAllOf) GetIsPaused() bool {
	if o == nil || o.IsPaused.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsPaused.Get()
}

// GetIsPausedOk returns a tuple with the IsPaused field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectedObjectBackupConfigAllOf) GetIsPausedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsPaused.Get(), o.IsPaused.IsSet()
}

// HasIsPaused returns a boolean if a field has been set.
func (o *ProtectedObjectBackupConfigAllOf) HasIsPaused() bool {
	if o != nil && o.IsPaused.IsSet() {
		return true
	}

	return false
}

// SetIsPaused gets a reference to the given NullableBool and assigns it to the IsPaused field.
func (o *ProtectedObjectBackupConfigAllOf) SetIsPaused(v bool) {
	o.IsPaused.Set(&v)
}
// SetIsPausedNil sets the value for IsPaused to be an explicit nil
func (o *ProtectedObjectBackupConfigAllOf) SetIsPausedNil() {
	o.IsPaused.Set(nil)
}

// UnsetIsPaused ensures that no value is present for IsPaused, not even an explicit nil
func (o *ProtectedObjectBackupConfigAllOf) UnsetIsPaused() {
	o.IsPaused.Unset()
}

// GetIsActive returns the IsActive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectedObjectBackupConfigAllOf) GetIsActive() bool {
	if o == nil || o.IsActive.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsActive.Get()
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectedObjectBackupConfigAllOf) GetIsActiveOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsActive.Get(), o.IsActive.IsSet()
}

// HasIsActive returns a boolean if a field has been set.
func (o *ProtectedObjectBackupConfigAllOf) HasIsActive() bool {
	if o != nil && o.IsActive.IsSet() {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given NullableBool and assigns it to the IsActive field.
func (o *ProtectedObjectBackupConfigAllOf) SetIsActive(v bool) {
	o.IsActive.Set(&v)
}
// SetIsActiveNil sets the value for IsActive to be an explicit nil
func (o *ProtectedObjectBackupConfigAllOf) SetIsActiveNil() {
	o.IsActive.Set(nil)
}

// UnsetIsActive ensures that no value is present for IsActive, not even an explicit nil
func (o *ProtectedObjectBackupConfigAllOf) UnsetIsActive() {
	o.IsActive.Unset()
}

func (o ProtectedObjectBackupConfigAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsAutoProtectConfig.IsSet() {
		toSerialize["isAutoProtectConfig"] = o.IsAutoProtectConfig.Get()
	}
	if o.AutoProtectParentId.IsSet() {
		toSerialize["autoProtectParentId"] = o.AutoProtectParentId.Get()
	}
	if o.IsPaused.IsSet() {
		toSerialize["isPaused"] = o.IsPaused.Get()
	}
	if o.IsActive.IsSet() {
		toSerialize["isActive"] = o.IsActive.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableProtectedObjectBackupConfigAllOf struct {
	value *ProtectedObjectBackupConfigAllOf
	isSet bool
}

func (v NullableProtectedObjectBackupConfigAllOf) Get() *ProtectedObjectBackupConfigAllOf {
	return v.value
}

func (v *NullableProtectedObjectBackupConfigAllOf) Set(val *ProtectedObjectBackupConfigAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableProtectedObjectBackupConfigAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableProtectedObjectBackupConfigAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtectedObjectBackupConfigAllOf(val *ProtectedObjectBackupConfigAllOf) *NullableProtectedObjectBackupConfigAllOf {
	return &NullableProtectedObjectBackupConfigAllOf{value: val, isSet: true}
}

func (v NullableProtectedObjectBackupConfigAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtectedObjectBackupConfigAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o ProtectedObjectBackupConfigAllOf) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}