/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// AwsTargetParamsForRecoverAurora Specifies the parameters for an AWS recovery target.
type AwsTargetParamsForRecoverAurora struct {
	// Specifies the recovery target configuration if recovery has to be done to a different location which is different from original source or to original Source with different configuration. If not specified, then the recovery of the vms will be performed to original location with all configuration parameters retained.
	RecoveryTargetConfig NullableAwsAuroraRecoveryTargetConfig `json:"recoveryTargetConfig,omitempty"`
	// Specifies the Aurora params.
	AuroraConfig NullableAuroraConfig `json:"auroraConfig,omitempty"`
}

// NewAwsTargetParamsForRecoverAurora instantiates a new AwsTargetParamsForRecoverAurora object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsTargetParamsForRecoverAurora() *AwsTargetParamsForRecoverAurora {
	this := AwsTargetParamsForRecoverAurora{}
	return &this
}

// NewAwsTargetParamsForRecoverAuroraWithDefaults instantiates a new AwsTargetParamsForRecoverAurora object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsTargetParamsForRecoverAuroraWithDefaults() *AwsTargetParamsForRecoverAurora {
	this := AwsTargetParamsForRecoverAurora{}
	return &this
}

// GetRecoveryTargetConfig returns the RecoveryTargetConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsTargetParamsForRecoverAurora) GetRecoveryTargetConfig() AwsAuroraRecoveryTargetConfig {
	if o == nil || o.RecoveryTargetConfig.Get() == nil {
		var ret AwsAuroraRecoveryTargetConfig
		return ret
	}
	return *o.RecoveryTargetConfig.Get()
}

// GetRecoveryTargetConfigOk returns a tuple with the RecoveryTargetConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsTargetParamsForRecoverAurora) GetRecoveryTargetConfigOk() (*AwsAuroraRecoveryTargetConfig, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RecoveryTargetConfig.Get(), o.RecoveryTargetConfig.IsSet()
}

// HasRecoveryTargetConfig returns a boolean if a field has been set.
func (o *AwsTargetParamsForRecoverAurora) HasRecoveryTargetConfig() bool {
	if o != nil && o.RecoveryTargetConfig.IsSet() {
		return true
	}

	return false
}

// SetRecoveryTargetConfig gets a reference to the given NullableAwsAuroraRecoveryTargetConfig and assigns it to the RecoveryTargetConfig field.
func (o *AwsTargetParamsForRecoverAurora) SetRecoveryTargetConfig(v AwsAuroraRecoveryTargetConfig) {
	o.RecoveryTargetConfig.Set(&v)
}
// SetRecoveryTargetConfigNil sets the value for RecoveryTargetConfig to be an explicit nil
func (o *AwsTargetParamsForRecoverAurora) SetRecoveryTargetConfigNil() {
	o.RecoveryTargetConfig.Set(nil)
}

// UnsetRecoveryTargetConfig ensures that no value is present for RecoveryTargetConfig, not even an explicit nil
func (o *AwsTargetParamsForRecoverAurora) UnsetRecoveryTargetConfig() {
	o.RecoveryTargetConfig.Unset()
}

// GetAuroraConfig returns the AuroraConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsTargetParamsForRecoverAurora) GetAuroraConfig() AuroraConfig {
	if o == nil || o.AuroraConfig.Get() == nil {
		var ret AuroraConfig
		return ret
	}
	return *o.AuroraConfig.Get()
}

// GetAuroraConfigOk returns a tuple with the AuroraConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsTargetParamsForRecoverAurora) GetAuroraConfigOk() (*AuroraConfig, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AuroraConfig.Get(), o.AuroraConfig.IsSet()
}

// HasAuroraConfig returns a boolean if a field has been set.
func (o *AwsTargetParamsForRecoverAurora) HasAuroraConfig() bool {
	if o != nil && o.AuroraConfig.IsSet() {
		return true
	}

	return false
}

// SetAuroraConfig gets a reference to the given NullableAuroraConfig and assigns it to the AuroraConfig field.
func (o *AwsTargetParamsForRecoverAurora) SetAuroraConfig(v AuroraConfig) {
	o.AuroraConfig.Set(&v)
}
// SetAuroraConfigNil sets the value for AuroraConfig to be an explicit nil
func (o *AwsTargetParamsForRecoverAurora) SetAuroraConfigNil() {
	o.AuroraConfig.Set(nil)
}

// UnsetAuroraConfig ensures that no value is present for AuroraConfig, not even an explicit nil
func (o *AwsTargetParamsForRecoverAurora) UnsetAuroraConfig() {
	o.AuroraConfig.Unset()
}

func (o AwsTargetParamsForRecoverAurora) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RecoveryTargetConfig.IsSet() {
		toSerialize["recoveryTargetConfig"] = o.RecoveryTargetConfig.Get()
	}
	if o.AuroraConfig.IsSet() {
		toSerialize["auroraConfig"] = o.AuroraConfig.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAwsTargetParamsForRecoverAurora struct {
	value *AwsTargetParamsForRecoverAurora
	isSet bool
}

func (v NullableAwsTargetParamsForRecoverAurora) Get() *AwsTargetParamsForRecoverAurora {
	return v.value
}

func (v *NullableAwsTargetParamsForRecoverAurora) Set(val *AwsTargetParamsForRecoverAurora) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsTargetParamsForRecoverAurora) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsTargetParamsForRecoverAurora) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsTargetParamsForRecoverAurora(val *AwsTargetParamsForRecoverAurora) *NullableAwsTargetParamsForRecoverAurora {
	return &NullableAwsTargetParamsForRecoverAurora{value: val, isSet: true}
}

func (v NullableAwsTargetParamsForRecoverAurora) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsTargetParamsForRecoverAurora) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o AwsTargetParamsForRecoverAurora) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}