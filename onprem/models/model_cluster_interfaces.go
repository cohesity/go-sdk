/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// ClusterInterfaces Specifies the interfaces present on a Cluster grouped by the Node where they are present.
type ClusterInterfaces struct {
	// Specifies the list of nodes present in the cluster. If the request was sent to a free node, then this list will have exactly one entry.
	Nodes *[]NodeInterfaces `json:"nodes,omitempty"`
}

// NewClusterInterfaces instantiates a new ClusterInterfaces object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterInterfaces() *ClusterInterfaces {
	this := ClusterInterfaces{}
	return &this
}

// NewClusterInterfacesWithDefaults instantiates a new ClusterInterfaces object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterInterfacesWithDefaults() *ClusterInterfaces {
	this := ClusterInterfaces{}
	return &this
}

// GetNodes returns the Nodes field value if set, zero value otherwise.
func (o *ClusterInterfaces) GetNodes() []NodeInterfaces {
	if o == nil || o.Nodes == nil {
		var ret []NodeInterfaces
		return ret
	}
	return *o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterInterfaces) GetNodesOk() (*[]NodeInterfaces, bool) {
	if o == nil || o.Nodes == nil {
		return nil, false
	}
	return o.Nodes, true
}

// HasNodes returns a boolean if a field has been set.
func (o *ClusterInterfaces) HasNodes() bool {
	if o != nil && o.Nodes != nil {
		return true
	}

	return false
}

// SetNodes gets a reference to the given []NodeInterfaces and assigns it to the Nodes field.
func (o *ClusterInterfaces) SetNodes(v []NodeInterfaces) {
	o.Nodes = &v
}

func (o ClusterInterfaces) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Nodes != nil {
		toSerialize["nodes"] = o.Nodes
	}
	return json.Marshal(toSerialize)
}

type NullableClusterInterfaces struct {
	value *ClusterInterfaces
	isSet bool
}

func (v NullableClusterInterfaces) Get() *ClusterInterfaces {
	return v.value
}

func (v *NullableClusterInterfaces) Set(val *ClusterInterfaces) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterInterfaces) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterInterfaces) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterInterfaces(val *ClusterInterfaces) *NullableClusterInterfaces {
	return &NullableClusterInterfaces{value: val, isSet: true}
}

func (v NullableClusterInterfaces) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterInterfaces) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o ClusterInterfaces) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}