/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// SearchObjectAllOf struct for SearchObjectAllOf
type SearchObjectAllOf struct {
	// Specifies whether the object is deleted. Deleted objects can't be protected but can be recovered.
	IsDeleted NullableBool `json:"isDeleted,omitempty"`
	// Specifies the Source Object information.
	SourceInfo *Object `json:"sourceInfo,omitempty"`
	// Specifies the object info on each cluster.
	ObjectProtectionInfos []ObjectProtectionInfo `json:"objectProtectionInfos,omitempty"`
}

// NewSearchObjectAllOf instantiates a new SearchObjectAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchObjectAllOf() *SearchObjectAllOf {
	this := SearchObjectAllOf{}
	return &this
}

// NewSearchObjectAllOfWithDefaults instantiates a new SearchObjectAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchObjectAllOfWithDefaults() *SearchObjectAllOf {
	this := SearchObjectAllOf{}
	return &this
}

// GetIsDeleted returns the IsDeleted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchObjectAllOf) GetIsDeleted() bool {
	if o == nil || o.IsDeleted.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsDeleted.Get()
}

// GetIsDeletedOk returns a tuple with the IsDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchObjectAllOf) GetIsDeletedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsDeleted.Get(), o.IsDeleted.IsSet()
}

// HasIsDeleted returns a boolean if a field has been set.
func (o *SearchObjectAllOf) HasIsDeleted() bool {
	if o != nil && o.IsDeleted.IsSet() {
		return true
	}

	return false
}

// SetIsDeleted gets a reference to the given NullableBool and assigns it to the IsDeleted field.
func (o *SearchObjectAllOf) SetIsDeleted(v bool) {
	o.IsDeleted.Set(&v)
}
// SetIsDeletedNil sets the value for IsDeleted to be an explicit nil
func (o *SearchObjectAllOf) SetIsDeletedNil() {
	o.IsDeleted.Set(nil)
}

// UnsetIsDeleted ensures that no value is present for IsDeleted, not even an explicit nil
func (o *SearchObjectAllOf) UnsetIsDeleted() {
	o.IsDeleted.Unset()
}

// GetSourceInfo returns the SourceInfo field value if set, zero value otherwise.
func (o *SearchObjectAllOf) GetSourceInfo() Object {
	if o == nil || o.SourceInfo == nil {
		var ret Object
		return ret
	}
	return *o.SourceInfo
}

// GetSourceInfoOk returns a tuple with the SourceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchObjectAllOf) GetSourceInfoOk() (*Object, bool) {
	if o == nil || o.SourceInfo == nil {
		return nil, false
	}
	return o.SourceInfo, true
}

// HasSourceInfo returns a boolean if a field has been set.
func (o *SearchObjectAllOf) HasSourceInfo() bool {
	if o != nil && o.SourceInfo != nil {
		return true
	}

	return false
}

// SetSourceInfo gets a reference to the given Object and assigns it to the SourceInfo field.
func (o *SearchObjectAllOf) SetSourceInfo(v Object) {
	o.SourceInfo = &v
}

// GetObjectProtectionInfos returns the ObjectProtectionInfos field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchObjectAllOf) GetObjectProtectionInfos() []ObjectProtectionInfo {
	if o == nil  {
		var ret []ObjectProtectionInfo
		return ret
	}
	return o.ObjectProtectionInfos
}

// GetObjectProtectionInfosOk returns a tuple with the ObjectProtectionInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchObjectAllOf) GetObjectProtectionInfosOk() (*[]ObjectProtectionInfo, bool) {
	if o == nil || o.ObjectProtectionInfos == nil {
		return nil, false
	}
	return &o.ObjectProtectionInfos, true
}

// HasObjectProtectionInfos returns a boolean if a field has been set.
func (o *SearchObjectAllOf) HasObjectProtectionInfos() bool {
	if o != nil && o.ObjectProtectionInfos != nil {
		return true
	}

	return false
}

// SetObjectProtectionInfos gets a reference to the given []ObjectProtectionInfo and assigns it to the ObjectProtectionInfos field.
func (o *SearchObjectAllOf) SetObjectProtectionInfos(v []ObjectProtectionInfo) {
	o.ObjectProtectionInfos = v
}

func (o SearchObjectAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsDeleted.IsSet() {
		toSerialize["isDeleted"] = o.IsDeleted.Get()
	}
	if o.SourceInfo != nil {
		toSerialize["sourceInfo"] = o.SourceInfo
	}
	if o.ObjectProtectionInfos != nil {
		toSerialize["objectProtectionInfos"] = o.ObjectProtectionInfos
	}
	return json.Marshal(toSerialize)
}

type NullableSearchObjectAllOf struct {
	value *SearchObjectAllOf
	isSet bool
}

func (v NullableSearchObjectAllOf) Get() *SearchObjectAllOf {
	return v.value
}

func (v *NullableSearchObjectAllOf) Set(val *SearchObjectAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchObjectAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchObjectAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchObjectAllOf(val *SearchObjectAllOf) *NullableSearchObjectAllOf {
	return &NullableSearchObjectAllOf{value: val, isSet: true}
}

func (v NullableSearchObjectAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchObjectAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o SearchObjectAllOf) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}