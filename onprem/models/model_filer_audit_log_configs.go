/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// FilerAuditLogConfigs Specifies the filer audit log configs.
type FilerAuditLogConfigs struct {
	// Specifies a list of share level permissions.
	SharePermissions []SmbPermission `json:"sharePermissions,omitempty"`
	// Specifies a list of Subnets with IP addresses that have permissions to access a Cohesity View containing filer audit logs.
	SubnetWhitelist []Subnet `json:"subnetWhitelist,omitempty"`
	// Specifies whether view level client subnet whitelist overrides cluster and global setting.
	OverrideGlobalSubnetWhitelist NullableBool `json:"overrideGlobalSubnetWhitelist,omitempty"`
	// Specifies a list of SMB mount paths of a Cohesity View containing filer audit logs.
	SmbMountPaths []string `json:"smbMountPaths,omitempty"`
	// This field is currently deprecated. Please use NFS MountPaths which would be an array of strings.
	NfsMountPath NullableString `json:"nfsMountPath,omitempty"`
	// Specifies a list of NFS mount paths of a Cohesity View containing filer audit logs.
	NfsMountPaths []string `json:"nfsMountPaths,omitempty"`
}

// NewFilerAuditLogConfigs instantiates a new FilerAuditLogConfigs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilerAuditLogConfigs() *FilerAuditLogConfigs {
	this := FilerAuditLogConfigs{}
	return &this
}

// NewFilerAuditLogConfigsWithDefaults instantiates a new FilerAuditLogConfigs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilerAuditLogConfigsWithDefaults() *FilerAuditLogConfigs {
	this := FilerAuditLogConfigs{}
	return &this
}

// GetSharePermissions returns the SharePermissions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilerAuditLogConfigs) GetSharePermissions() []SmbPermission {
	if o == nil  {
		var ret []SmbPermission
		return ret
	}
	return o.SharePermissions
}

// GetSharePermissionsOk returns a tuple with the SharePermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilerAuditLogConfigs) GetSharePermissionsOk() (*[]SmbPermission, bool) {
	if o == nil || o.SharePermissions == nil {
		return nil, false
	}
	return &o.SharePermissions, true
}

// HasSharePermissions returns a boolean if a field has been set.
func (o *FilerAuditLogConfigs) HasSharePermissions() bool {
	if o != nil && o.SharePermissions != nil {
		return true
	}

	return false
}

// SetSharePermissions gets a reference to the given []SmbPermission and assigns it to the SharePermissions field.
func (o *FilerAuditLogConfigs) SetSharePermissions(v []SmbPermission) {
	o.SharePermissions = v
}

// GetSubnetWhitelist returns the SubnetWhitelist field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilerAuditLogConfigs) GetSubnetWhitelist() []Subnet {
	if o == nil  {
		var ret []Subnet
		return ret
	}
	return o.SubnetWhitelist
}

// GetSubnetWhitelistOk returns a tuple with the SubnetWhitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilerAuditLogConfigs) GetSubnetWhitelistOk() (*[]Subnet, bool) {
	if o == nil || o.SubnetWhitelist == nil {
		return nil, false
	}
	return &o.SubnetWhitelist, true
}

// HasSubnetWhitelist returns a boolean if a field has been set.
func (o *FilerAuditLogConfigs) HasSubnetWhitelist() bool {
	if o != nil && o.SubnetWhitelist != nil {
		return true
	}

	return false
}

// SetSubnetWhitelist gets a reference to the given []Subnet and assigns it to the SubnetWhitelist field.
func (o *FilerAuditLogConfigs) SetSubnetWhitelist(v []Subnet) {
	o.SubnetWhitelist = v
}

// GetOverrideGlobalSubnetWhitelist returns the OverrideGlobalSubnetWhitelist field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilerAuditLogConfigs) GetOverrideGlobalSubnetWhitelist() bool {
	if o == nil || o.OverrideGlobalSubnetWhitelist.Get() == nil {
		var ret bool
		return ret
	}
	return *o.OverrideGlobalSubnetWhitelist.Get()
}

// GetOverrideGlobalSubnetWhitelistOk returns a tuple with the OverrideGlobalSubnetWhitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilerAuditLogConfigs) GetOverrideGlobalSubnetWhitelistOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OverrideGlobalSubnetWhitelist.Get(), o.OverrideGlobalSubnetWhitelist.IsSet()
}

// HasOverrideGlobalSubnetWhitelist returns a boolean if a field has been set.
func (o *FilerAuditLogConfigs) HasOverrideGlobalSubnetWhitelist() bool {
	if o != nil && o.OverrideGlobalSubnetWhitelist.IsSet() {
		return true
	}

	return false
}

// SetOverrideGlobalSubnetWhitelist gets a reference to the given NullableBool and assigns it to the OverrideGlobalSubnetWhitelist field.
func (o *FilerAuditLogConfigs) SetOverrideGlobalSubnetWhitelist(v bool) {
	o.OverrideGlobalSubnetWhitelist.Set(&v)
}
// SetOverrideGlobalSubnetWhitelistNil sets the value for OverrideGlobalSubnetWhitelist to be an explicit nil
func (o *FilerAuditLogConfigs) SetOverrideGlobalSubnetWhitelistNil() {
	o.OverrideGlobalSubnetWhitelist.Set(nil)
}

// UnsetOverrideGlobalSubnetWhitelist ensures that no value is present for OverrideGlobalSubnetWhitelist, not even an explicit nil
func (o *FilerAuditLogConfigs) UnsetOverrideGlobalSubnetWhitelist() {
	o.OverrideGlobalSubnetWhitelist.Unset()
}

// GetSmbMountPaths returns the SmbMountPaths field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilerAuditLogConfigs) GetSmbMountPaths() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.SmbMountPaths
}

// GetSmbMountPathsOk returns a tuple with the SmbMountPaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilerAuditLogConfigs) GetSmbMountPathsOk() (*[]string, bool) {
	if o == nil || o.SmbMountPaths == nil {
		return nil, false
	}
	return &o.SmbMountPaths, true
}

// HasSmbMountPaths returns a boolean if a field has been set.
func (o *FilerAuditLogConfigs) HasSmbMountPaths() bool {
	if o != nil && o.SmbMountPaths != nil {
		return true
	}

	return false
}

// SetSmbMountPaths gets a reference to the given []string and assigns it to the SmbMountPaths field.
func (o *FilerAuditLogConfigs) SetSmbMountPaths(v []string) {
	o.SmbMountPaths = v
}

// GetNfsMountPath returns the NfsMountPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilerAuditLogConfigs) GetNfsMountPath() string {
	if o == nil || o.NfsMountPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.NfsMountPath.Get()
}

// GetNfsMountPathOk returns a tuple with the NfsMountPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilerAuditLogConfigs) GetNfsMountPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NfsMountPath.Get(), o.NfsMountPath.IsSet()
}

// HasNfsMountPath returns a boolean if a field has been set.
func (o *FilerAuditLogConfigs) HasNfsMountPath() bool {
	if o != nil && o.NfsMountPath.IsSet() {
		return true
	}

	return false
}

// SetNfsMountPath gets a reference to the given NullableString and assigns it to the NfsMountPath field.
func (o *FilerAuditLogConfigs) SetNfsMountPath(v string) {
	o.NfsMountPath.Set(&v)
}
// SetNfsMountPathNil sets the value for NfsMountPath to be an explicit nil
func (o *FilerAuditLogConfigs) SetNfsMountPathNil() {
	o.NfsMountPath.Set(nil)
}

// UnsetNfsMountPath ensures that no value is present for NfsMountPath, not even an explicit nil
func (o *FilerAuditLogConfigs) UnsetNfsMountPath() {
	o.NfsMountPath.Unset()
}

// GetNfsMountPaths returns the NfsMountPaths field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilerAuditLogConfigs) GetNfsMountPaths() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.NfsMountPaths
}

// GetNfsMountPathsOk returns a tuple with the NfsMountPaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilerAuditLogConfigs) GetNfsMountPathsOk() (*[]string, bool) {
	if o == nil || o.NfsMountPaths == nil {
		return nil, false
	}
	return &o.NfsMountPaths, true
}

// HasNfsMountPaths returns a boolean if a field has been set.
func (o *FilerAuditLogConfigs) HasNfsMountPaths() bool {
	if o != nil && o.NfsMountPaths != nil {
		return true
	}

	return false
}

// SetNfsMountPaths gets a reference to the given []string and assigns it to the NfsMountPaths field.
func (o *FilerAuditLogConfigs) SetNfsMountPaths(v []string) {
	o.NfsMountPaths = v
}

func (o FilerAuditLogConfigs) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SharePermissions != nil {
		toSerialize["sharePermissions"] = o.SharePermissions
	}
	if o.SubnetWhitelist != nil {
		toSerialize["subnetWhitelist"] = o.SubnetWhitelist
	}
	if o.OverrideGlobalSubnetWhitelist.IsSet() {
		toSerialize["overrideGlobalSubnetWhitelist"] = o.OverrideGlobalSubnetWhitelist.Get()
	}
	if o.SmbMountPaths != nil {
		toSerialize["smbMountPaths"] = o.SmbMountPaths
	}
	if o.NfsMountPath.IsSet() {
		toSerialize["nfsMountPath"] = o.NfsMountPath.Get()
	}
	if o.NfsMountPaths != nil {
		toSerialize["nfsMountPaths"] = o.NfsMountPaths
	}
	return json.Marshal(toSerialize)
}

type NullableFilerAuditLogConfigs struct {
	value *FilerAuditLogConfigs
	isSet bool
}

func (v NullableFilerAuditLogConfigs) Get() *FilerAuditLogConfigs {
	return v.value
}

func (v *NullableFilerAuditLogConfigs) Set(val *FilerAuditLogConfigs) {
	v.value = val
	v.isSet = true
}

func (v NullableFilerAuditLogConfigs) IsSet() bool {
	return v.isSet
}

func (v *NullableFilerAuditLogConfigs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilerAuditLogConfigs(val *FilerAuditLogConfigs) *NullableFilerAuditLogConfigs {
	return &NullableFilerAuditLogConfigs{value: val, isSet: true}
}

func (v NullableFilerAuditLogConfigs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilerAuditLogConfigs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o FilerAuditLogConfigs) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}