/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// RecoverPhysicalFileAndFolderParams Specifies the parameters to recover files and folders.
type RecoverPhysicalFileAndFolderParams struct {
	// Specifies the information about the files and folders to be recovered.
	FilesAndFolders []CommonRecoverFileAndFolderInfo `json:"filesAndFolders"`
	// Specifies the environment of the recovery target. The corresponding params below must be filled out.
	TargetEnvironment string `json:"targetEnvironment"`
	// Specifies the parameters to recover to a Physical target.
	PhysicalTargetParams NullablePhysicalTargetParamsForRecoverFileAndFolder `json:"physicalTargetParams,omitempty"`
}

// NewRecoverPhysicalFileAndFolderParams instantiates a new RecoverPhysicalFileAndFolderParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverPhysicalFileAndFolderParams(filesAndFolders []CommonRecoverFileAndFolderInfo, targetEnvironment string) *RecoverPhysicalFileAndFolderParams {
	this := RecoverPhysicalFileAndFolderParams{}
	this.FilesAndFolders = filesAndFolders
	this.TargetEnvironment = targetEnvironment
	return &this
}

// NewRecoverPhysicalFileAndFolderParamsWithDefaults instantiates a new RecoverPhysicalFileAndFolderParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverPhysicalFileAndFolderParamsWithDefaults() *RecoverPhysicalFileAndFolderParams {
	this := RecoverPhysicalFileAndFolderParams{}
	return &this
}

// GetFilesAndFolders returns the FilesAndFolders field value
// If the value is explicit nil, the zero value for []CommonRecoverFileAndFolderInfo will be returned
func (o *RecoverPhysicalFileAndFolderParams) GetFilesAndFolders() []CommonRecoverFileAndFolderInfo {
	if o == nil {
		var ret []CommonRecoverFileAndFolderInfo
		return ret
	}

	return o.FilesAndFolders
}

// GetFilesAndFoldersOk returns a tuple with the FilesAndFolders field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverPhysicalFileAndFolderParams) GetFilesAndFoldersOk() (*[]CommonRecoverFileAndFolderInfo, bool) {
	if o == nil || o.FilesAndFolders == nil {
		return nil, false
	}
	return &o.FilesAndFolders, true
}

// SetFilesAndFolders sets field value
func (o *RecoverPhysicalFileAndFolderParams) SetFilesAndFolders(v []CommonRecoverFileAndFolderInfo) {
	o.FilesAndFolders = v
}

// GetTargetEnvironment returns the TargetEnvironment field value
func (o *RecoverPhysicalFileAndFolderParams) GetTargetEnvironment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetEnvironment
}

// GetTargetEnvironmentOk returns a tuple with the TargetEnvironment field value
// and a boolean to check if the value has been set.
func (o *RecoverPhysicalFileAndFolderParams) GetTargetEnvironmentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TargetEnvironment, true
}

// SetTargetEnvironment sets field value
func (o *RecoverPhysicalFileAndFolderParams) SetTargetEnvironment(v string) {
	o.TargetEnvironment = v
}

// GetPhysicalTargetParams returns the PhysicalTargetParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverPhysicalFileAndFolderParams) GetPhysicalTargetParams() PhysicalTargetParamsForRecoverFileAndFolder {
	if o == nil || o.PhysicalTargetParams.Get() == nil {
		var ret PhysicalTargetParamsForRecoverFileAndFolder
		return ret
	}
	return *o.PhysicalTargetParams.Get()
}

// GetPhysicalTargetParamsOk returns a tuple with the PhysicalTargetParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverPhysicalFileAndFolderParams) GetPhysicalTargetParamsOk() (*PhysicalTargetParamsForRecoverFileAndFolder, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PhysicalTargetParams.Get(), o.PhysicalTargetParams.IsSet()
}

// HasPhysicalTargetParams returns a boolean if a field has been set.
func (o *RecoverPhysicalFileAndFolderParams) HasPhysicalTargetParams() bool {
	if o != nil && o.PhysicalTargetParams.IsSet() {
		return true
	}

	return false
}

// SetPhysicalTargetParams gets a reference to the given NullablePhysicalTargetParamsForRecoverFileAndFolder and assigns it to the PhysicalTargetParams field.
func (o *RecoverPhysicalFileAndFolderParams) SetPhysicalTargetParams(v PhysicalTargetParamsForRecoverFileAndFolder) {
	o.PhysicalTargetParams.Set(&v)
}
// SetPhysicalTargetParamsNil sets the value for PhysicalTargetParams to be an explicit nil
func (o *RecoverPhysicalFileAndFolderParams) SetPhysicalTargetParamsNil() {
	o.PhysicalTargetParams.Set(nil)
}

// UnsetPhysicalTargetParams ensures that no value is present for PhysicalTargetParams, not even an explicit nil
func (o *RecoverPhysicalFileAndFolderParams) UnsetPhysicalTargetParams() {
	o.PhysicalTargetParams.Unset()
}

func (o RecoverPhysicalFileAndFolderParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FilesAndFolders != nil {
		toSerialize["filesAndFolders"] = o.FilesAndFolders
	}
	if true {
		toSerialize["targetEnvironment"] = o.TargetEnvironment
	}
	if o.PhysicalTargetParams.IsSet() {
		toSerialize["physicalTargetParams"] = o.PhysicalTargetParams.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRecoverPhysicalFileAndFolderParams struct {
	value *RecoverPhysicalFileAndFolderParams
	isSet bool
}

func (v NullableRecoverPhysicalFileAndFolderParams) Get() *RecoverPhysicalFileAndFolderParams {
	return v.value
}

func (v *NullableRecoverPhysicalFileAndFolderParams) Set(val *RecoverPhysicalFileAndFolderParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverPhysicalFileAndFolderParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverPhysicalFileAndFolderParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverPhysicalFileAndFolderParams(val *RecoverPhysicalFileAndFolderParams) *NullableRecoverPhysicalFileAndFolderParams {
	return &NullableRecoverPhysicalFileAndFolderParams{value: val, isSet: true}
}

func (v NullableRecoverPhysicalFileAndFolderParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverPhysicalFileAndFolderParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o RecoverPhysicalFileAndFolderParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}