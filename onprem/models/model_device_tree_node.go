/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// DeviceTreeNode Specifies the tree structure of a logical volume. The leaves are slices of partitions and the other nodes are assemled by combining nodes in some mode.
type DeviceTreeNode struct {
	// Specifies if the node is a leaf node.
	IsLeaf NullableBool `json:"isLeaf,omitempty"`
	// Specifies the parameters for a leaf node.
	LeafNodeParams *DeviceTreeLeafNode `json:"leafNodeParams,omitempty"`
	// Specifies the parameters for a non leaf node.
	NonLeafNodeParams *DeviceTreeNonLeafNode `json:"nonLeafNodeParams,omitempty"`
}

// NewDeviceTreeNode instantiates a new DeviceTreeNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceTreeNode() *DeviceTreeNode {
	this := DeviceTreeNode{}
	return &this
}

// NewDeviceTreeNodeWithDefaults instantiates a new DeviceTreeNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceTreeNodeWithDefaults() *DeviceTreeNode {
	this := DeviceTreeNode{}
	return &this
}

// GetIsLeaf returns the IsLeaf field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceTreeNode) GetIsLeaf() bool {
	if o == nil || o.IsLeaf.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsLeaf.Get()
}

// GetIsLeafOk returns a tuple with the IsLeaf field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceTreeNode) GetIsLeafOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsLeaf.Get(), o.IsLeaf.IsSet()
}

// HasIsLeaf returns a boolean if a field has been set.
func (o *DeviceTreeNode) HasIsLeaf() bool {
	if o != nil && o.IsLeaf.IsSet() {
		return true
	}

	return false
}

// SetIsLeaf gets a reference to the given NullableBool and assigns it to the IsLeaf field.
func (o *DeviceTreeNode) SetIsLeaf(v bool) {
	o.IsLeaf.Set(&v)
}
// SetIsLeafNil sets the value for IsLeaf to be an explicit nil
func (o *DeviceTreeNode) SetIsLeafNil() {
	o.IsLeaf.Set(nil)
}

// UnsetIsLeaf ensures that no value is present for IsLeaf, not even an explicit nil
func (o *DeviceTreeNode) UnsetIsLeaf() {
	o.IsLeaf.Unset()
}

// GetLeafNodeParams returns the LeafNodeParams field value if set, zero value otherwise.
func (o *DeviceTreeNode) GetLeafNodeParams() DeviceTreeLeafNode {
	if o == nil || o.LeafNodeParams == nil {
		var ret DeviceTreeLeafNode
		return ret
	}
	return *o.LeafNodeParams
}

// GetLeafNodeParamsOk returns a tuple with the LeafNodeParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceTreeNode) GetLeafNodeParamsOk() (*DeviceTreeLeafNode, bool) {
	if o == nil || o.LeafNodeParams == nil {
		return nil, false
	}
	return o.LeafNodeParams, true
}

// HasLeafNodeParams returns a boolean if a field has been set.
func (o *DeviceTreeNode) HasLeafNodeParams() bool {
	if o != nil && o.LeafNodeParams != nil {
		return true
	}

	return false
}

// SetLeafNodeParams gets a reference to the given DeviceTreeLeafNode and assigns it to the LeafNodeParams field.
func (o *DeviceTreeNode) SetLeafNodeParams(v DeviceTreeLeafNode) {
	o.LeafNodeParams = &v
}

// GetNonLeafNodeParams returns the NonLeafNodeParams field value if set, zero value otherwise.
func (o *DeviceTreeNode) GetNonLeafNodeParams() DeviceTreeNonLeafNode {
	if o == nil || o.NonLeafNodeParams == nil {
		var ret DeviceTreeNonLeafNode
		return ret
	}
	return *o.NonLeafNodeParams
}

// GetNonLeafNodeParamsOk returns a tuple with the NonLeafNodeParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceTreeNode) GetNonLeafNodeParamsOk() (*DeviceTreeNonLeafNode, bool) {
	if o == nil || o.NonLeafNodeParams == nil {
		return nil, false
	}
	return o.NonLeafNodeParams, true
}

// HasNonLeafNodeParams returns a boolean if a field has been set.
func (o *DeviceTreeNode) HasNonLeafNodeParams() bool {
	if o != nil && o.NonLeafNodeParams != nil {
		return true
	}

	return false
}

// SetNonLeafNodeParams gets a reference to the given DeviceTreeNonLeafNode and assigns it to the NonLeafNodeParams field.
func (o *DeviceTreeNode) SetNonLeafNodeParams(v DeviceTreeNonLeafNode) {
	o.NonLeafNodeParams = &v
}

func (o DeviceTreeNode) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsLeaf.IsSet() {
		toSerialize["isLeaf"] = o.IsLeaf.Get()
	}
	if o.LeafNodeParams != nil {
		toSerialize["leafNodeParams"] = o.LeafNodeParams
	}
	if o.NonLeafNodeParams != nil {
		toSerialize["nonLeafNodeParams"] = o.NonLeafNodeParams
	}
	return json.Marshal(toSerialize)
}

type NullableDeviceTreeNode struct {
	value *DeviceTreeNode
	isSet bool
}

func (v NullableDeviceTreeNode) Get() *DeviceTreeNode {
	return v.value
}

func (v *NullableDeviceTreeNode) Set(val *DeviceTreeNode) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceTreeNode) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceTreeNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceTreeNode(val *DeviceTreeNode) *NullableDeviceTreeNode {
	return &NullableDeviceTreeNode{value: val, isSet: true}
}

func (v NullableDeviceTreeNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceTreeNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o DeviceTreeNode) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}