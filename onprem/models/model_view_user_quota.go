/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// ViewUserQuota Specifies a View user quota.
type ViewUserQuota struct {
	// Specifies the user sid.
	Sid NullableString `json:"sid,omitempty"`
	// Specifies the unix UID.
	UnixUid NullableInt32 `json:"unixUid,omitempty"`
	// Specifies the user quota policy.
	QuotaPolicy *QuotaPolicy `json:"quotaPolicy,omitempty"`
	// Specifies the user usage in bytes.
	UsageBytes NullableInt64 `json:"usageBytes,omitempty"`
}

// NewViewUserQuota instantiates a new ViewUserQuota object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewUserQuota() *ViewUserQuota {
	this := ViewUserQuota{}
	return &this
}

// NewViewUserQuotaWithDefaults instantiates a new ViewUserQuota object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewUserQuotaWithDefaults() *ViewUserQuota {
	this := ViewUserQuota{}
	return &this
}

// GetSid returns the Sid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewUserQuota) GetSid() string {
	if o == nil || o.Sid.Get() == nil {
		var ret string
		return ret
	}
	return *o.Sid.Get()
}

// GetSidOk returns a tuple with the Sid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewUserQuota) GetSidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Sid.Get(), o.Sid.IsSet()
}

// HasSid returns a boolean if a field has been set.
func (o *ViewUserQuota) HasSid() bool {
	if o != nil && o.Sid.IsSet() {
		return true
	}

	return false
}

// SetSid gets a reference to the given NullableString and assigns it to the Sid field.
func (o *ViewUserQuota) SetSid(v string) {
	o.Sid.Set(&v)
}
// SetSidNil sets the value for Sid to be an explicit nil
func (o *ViewUserQuota) SetSidNil() {
	o.Sid.Set(nil)
}

// UnsetSid ensures that no value is present for Sid, not even an explicit nil
func (o *ViewUserQuota) UnsetSid() {
	o.Sid.Unset()
}

// GetUnixUid returns the UnixUid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewUserQuota) GetUnixUid() int32 {
	if o == nil || o.UnixUid.Get() == nil {
		var ret int32
		return ret
	}
	return *o.UnixUid.Get()
}

// GetUnixUidOk returns a tuple with the UnixUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewUserQuota) GetUnixUidOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UnixUid.Get(), o.UnixUid.IsSet()
}

// HasUnixUid returns a boolean if a field has been set.
func (o *ViewUserQuota) HasUnixUid() bool {
	if o != nil && o.UnixUid.IsSet() {
		return true
	}

	return false
}

// SetUnixUid gets a reference to the given NullableInt32 and assigns it to the UnixUid field.
func (o *ViewUserQuota) SetUnixUid(v int32) {
	o.UnixUid.Set(&v)
}
// SetUnixUidNil sets the value for UnixUid to be an explicit nil
func (o *ViewUserQuota) SetUnixUidNil() {
	o.UnixUid.Set(nil)
}

// UnsetUnixUid ensures that no value is present for UnixUid, not even an explicit nil
func (o *ViewUserQuota) UnsetUnixUid() {
	o.UnixUid.Unset()
}

// GetQuotaPolicy returns the QuotaPolicy field value if set, zero value otherwise.
func (o *ViewUserQuota) GetQuotaPolicy() QuotaPolicy {
	if o == nil || o.QuotaPolicy == nil {
		var ret QuotaPolicy
		return ret
	}
	return *o.QuotaPolicy
}

// GetQuotaPolicyOk returns a tuple with the QuotaPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewUserQuota) GetQuotaPolicyOk() (*QuotaPolicy, bool) {
	if o == nil || o.QuotaPolicy == nil {
		return nil, false
	}
	return o.QuotaPolicy, true
}

// HasQuotaPolicy returns a boolean if a field has been set.
func (o *ViewUserQuota) HasQuotaPolicy() bool {
	if o != nil && o.QuotaPolicy != nil {
		return true
	}

	return false
}

// SetQuotaPolicy gets a reference to the given QuotaPolicy and assigns it to the QuotaPolicy field.
func (o *ViewUserQuota) SetQuotaPolicy(v QuotaPolicy) {
	o.QuotaPolicy = &v
}

// GetUsageBytes returns the UsageBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewUserQuota) GetUsageBytes() int64 {
	if o == nil || o.UsageBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.UsageBytes.Get()
}

// GetUsageBytesOk returns a tuple with the UsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewUserQuota) GetUsageBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UsageBytes.Get(), o.UsageBytes.IsSet()
}

// HasUsageBytes returns a boolean if a field has been set.
func (o *ViewUserQuota) HasUsageBytes() bool {
	if o != nil && o.UsageBytes.IsSet() {
		return true
	}

	return false
}

// SetUsageBytes gets a reference to the given NullableInt64 and assigns it to the UsageBytes field.
func (o *ViewUserQuota) SetUsageBytes(v int64) {
	o.UsageBytes.Set(&v)
}
// SetUsageBytesNil sets the value for UsageBytes to be an explicit nil
func (o *ViewUserQuota) SetUsageBytesNil() {
	o.UsageBytes.Set(nil)
}

// UnsetUsageBytes ensures that no value is present for UsageBytes, not even an explicit nil
func (o *ViewUserQuota) UnsetUsageBytes() {
	o.UsageBytes.Unset()
}

func (o ViewUserQuota) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Sid.IsSet() {
		toSerialize["sid"] = o.Sid.Get()
	}
	if o.UnixUid.IsSet() {
		toSerialize["unixUid"] = o.UnixUid.Get()
	}
	if o.QuotaPolicy != nil {
		toSerialize["quotaPolicy"] = o.QuotaPolicy
	}
	if o.UsageBytes.IsSet() {
		toSerialize["usageBytes"] = o.UsageBytes.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableViewUserQuota struct {
	value *ViewUserQuota
	isSet bool
}

func (v NullableViewUserQuota) Get() *ViewUserQuota {
	return v.value
}

func (v *NullableViewUserQuota) Set(val *ViewUserQuota) {
	v.value = val
	v.isSet = true
}

func (v NullableViewUserQuota) IsSet() bool {
	return v.isSet
}

func (v *NullableViewUserQuota) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewUserQuota(val *ViewUserQuota) *NullableViewUserQuota {
	return &NullableViewUserQuota{value: val, isSet: true}
}

func (v NullableViewUserQuota) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewUserQuota) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o ViewUserQuota) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}