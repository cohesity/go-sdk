/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// KubernetesNamespaceRecoveryNewSourceConfig Specifies the new source configuration if a Kubernetes Namespace is being restored to a different source than the one from which it was protected.
type KubernetesNamespaceRecoveryNewSourceConfig struct {
	// Specifies the id of the parent source to recover the Namespaces.
	Source NullableRecoveryObjectIdentifier `json:"source"`
}

// NewKubernetesNamespaceRecoveryNewSourceConfig instantiates a new KubernetesNamespaceRecoveryNewSourceConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubernetesNamespaceRecoveryNewSourceConfig(source NullableRecoveryObjectIdentifier) *KubernetesNamespaceRecoveryNewSourceConfig {
	this := KubernetesNamespaceRecoveryNewSourceConfig{}
	this.Source = source
	return &this
}

// NewKubernetesNamespaceRecoveryNewSourceConfigWithDefaults instantiates a new KubernetesNamespaceRecoveryNewSourceConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubernetesNamespaceRecoveryNewSourceConfigWithDefaults() *KubernetesNamespaceRecoveryNewSourceConfig {
	this := KubernetesNamespaceRecoveryNewSourceConfig{}
	return &this
}

// GetSource returns the Source field value
// If the value is explicit nil, the zero value for RecoveryObjectIdentifier will be returned
func (o *KubernetesNamespaceRecoveryNewSourceConfig) GetSource() RecoveryObjectIdentifier {
	if o == nil || o.Source.Get() == nil {
		var ret RecoveryObjectIdentifier
		return ret
	}

	return *o.Source.Get()
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesNamespaceRecoveryNewSourceConfig) GetSourceOk() (*RecoveryObjectIdentifier, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Source.Get(), o.Source.IsSet()
}

// SetSource sets field value
func (o *KubernetesNamespaceRecoveryNewSourceConfig) SetSource(v RecoveryObjectIdentifier) {
	o.Source.Set(&v)
}

func (o KubernetesNamespaceRecoveryNewSourceConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["source"] = o.Source.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableKubernetesNamespaceRecoveryNewSourceConfig struct {
	value *KubernetesNamespaceRecoveryNewSourceConfig
	isSet bool
}

func (v NullableKubernetesNamespaceRecoveryNewSourceConfig) Get() *KubernetesNamespaceRecoveryNewSourceConfig {
	return v.value
}

func (v *NullableKubernetesNamespaceRecoveryNewSourceConfig) Set(val *KubernetesNamespaceRecoveryNewSourceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableKubernetesNamespaceRecoveryNewSourceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableKubernetesNamespaceRecoveryNewSourceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubernetesNamespaceRecoveryNewSourceConfig(val *KubernetesNamespaceRecoveryNewSourceConfig) *NullableKubernetesNamespaceRecoveryNewSourceConfig {
	return &NullableKubernetesNamespaceRecoveryNewSourceConfig{value: val, isSet: true}
}

func (v NullableKubernetesNamespaceRecoveryNewSourceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubernetesNamespaceRecoveryNewSourceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o KubernetesNamespaceRecoveryNewSourceConfig) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}