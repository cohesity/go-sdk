/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// VMFilterAllOf struct for VMFilterAllOf
type VMFilterAllOf struct {
	// Specifies whether the provided filter string is case sensitive or not. This needs to be explicitly set to true if user is trying to filter by case sensitive expressions. The default value is assumed to be false.
	CaseSensitive NullableBool `json:"caseSensitive,omitempty"`
}

// NewVMFilterAllOf instantiates a new VMFilterAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVMFilterAllOf() *VMFilterAllOf {
	this := VMFilterAllOf{}
	var caseSensitive bool = false
	this.CaseSensitive = *NewNullableBool(&caseSensitive)
	return &this
}

// NewVMFilterAllOfWithDefaults instantiates a new VMFilterAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVMFilterAllOfWithDefaults() *VMFilterAllOf {
	this := VMFilterAllOf{}
	var caseSensitive bool = false
	this.CaseSensitive = *NewNullableBool(&caseSensitive)
	return &this
}

// GetCaseSensitive returns the CaseSensitive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VMFilterAllOf) GetCaseSensitive() bool {
	if o == nil || o.CaseSensitive.Get() == nil {
		var ret bool
		return ret
	}
	return *o.CaseSensitive.Get()
}

// GetCaseSensitiveOk returns a tuple with the CaseSensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VMFilterAllOf) GetCaseSensitiveOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CaseSensitive.Get(), o.CaseSensitive.IsSet()
}

// HasCaseSensitive returns a boolean if a field has been set.
func (o *VMFilterAllOf) HasCaseSensitive() bool {
	if o != nil && o.CaseSensitive.IsSet() {
		return true
	}

	return false
}

// SetCaseSensitive gets a reference to the given NullableBool and assigns it to the CaseSensitive field.
func (o *VMFilterAllOf) SetCaseSensitive(v bool) {
	o.CaseSensitive.Set(&v)
}
// SetCaseSensitiveNil sets the value for CaseSensitive to be an explicit nil
func (o *VMFilterAllOf) SetCaseSensitiveNil() {
	o.CaseSensitive.Set(nil)
}

// UnsetCaseSensitive ensures that no value is present for CaseSensitive, not even an explicit nil
func (o *VMFilterAllOf) UnsetCaseSensitive() {
	o.CaseSensitive.Unset()
}

func (o VMFilterAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CaseSensitive.IsSet() {
		toSerialize["caseSensitive"] = o.CaseSensitive.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableVMFilterAllOf struct {
	value *VMFilterAllOf
	isSet bool
}

func (v NullableVMFilterAllOf) Get() *VMFilterAllOf {
	return v.value
}

func (v *NullableVMFilterAllOf) Set(val *VMFilterAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableVMFilterAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableVMFilterAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVMFilterAllOf(val *VMFilterAllOf) *NullableVMFilterAllOf {
	return &NullableVMFilterAllOf{value: val, isSet: true}
}

func (v NullableVMFilterAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVMFilterAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o VMFilterAllOf) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}