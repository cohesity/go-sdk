/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// CreationInfo Specifies the information about the creation of the protection group or recovery.
type CreationInfo struct {
	// Specifies the name of the user who created the protection group or recovery.
	UserName NullableString `json:"userName,omitempty"`
}

// NewCreationInfo instantiates a new CreationInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreationInfo() *CreationInfo {
	this := CreationInfo{}
	return &this
}

// NewCreationInfoWithDefaults instantiates a new CreationInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreationInfoWithDefaults() *CreationInfo {
	this := CreationInfo{}
	return &this
}

// GetUserName returns the UserName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreationInfo) GetUserName() string {
	if o == nil || o.UserName.Get() == nil {
		var ret string
		return ret
	}
	return *o.UserName.Get()
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreationInfo) GetUserNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UserName.Get(), o.UserName.IsSet()
}

// HasUserName returns a boolean if a field has been set.
func (o *CreationInfo) HasUserName() bool {
	if o != nil && o.UserName.IsSet() {
		return true
	}

	return false
}

// SetUserName gets a reference to the given NullableString and assigns it to the UserName field.
func (o *CreationInfo) SetUserName(v string) {
	o.UserName.Set(&v)
}
// SetUserNameNil sets the value for UserName to be an explicit nil
func (o *CreationInfo) SetUserNameNil() {
	o.UserName.Set(nil)
}

// UnsetUserName ensures that no value is present for UserName, not even an explicit nil
func (o *CreationInfo) UnsetUserName() {
	o.UserName.Unset()
}

func (o CreationInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UserName.IsSet() {
		toSerialize["userName"] = o.UserName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCreationInfo struct {
	value *CreationInfo
	isSet bool
}

func (v NullableCreationInfo) Get() *CreationInfo {
	return v.value
}

func (v *NullableCreationInfo) Set(val *CreationInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCreationInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCreationInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreationInfo(val *CreationInfo) *NullableCreationInfo {
	return &NullableCreationInfo{value: val, isSet: true}
}

func (v NullableCreationInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreationInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o CreationInfo) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}