/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// CentrifyZones Specifies a list of centrify zones for a domain.
type CentrifyZones struct {
	// Specifies a domain name with these centrify zones.
	DomainName NullableString `json:"domainName,omitempty"`
	// Specifies a list of centrify zones for this domain.
	CentrifyZones []CentrifyZone `json:"centrifyZones,omitempty"`
}

// NewCentrifyZones instantiates a new CentrifyZones object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCentrifyZones() *CentrifyZones {
	this := CentrifyZones{}
	return &this
}

// NewCentrifyZonesWithDefaults instantiates a new CentrifyZones object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCentrifyZonesWithDefaults() *CentrifyZones {
	this := CentrifyZones{}
	return &this
}

// GetDomainName returns the DomainName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CentrifyZones) GetDomainName() string {
	if o == nil || o.DomainName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DomainName.Get()
}

// GetDomainNameOk returns a tuple with the DomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CentrifyZones) GetDomainNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DomainName.Get(), o.DomainName.IsSet()
}

// HasDomainName returns a boolean if a field has been set.
func (o *CentrifyZones) HasDomainName() bool {
	if o != nil && o.DomainName.IsSet() {
		return true
	}

	return false
}

// SetDomainName gets a reference to the given NullableString and assigns it to the DomainName field.
func (o *CentrifyZones) SetDomainName(v string) {
	o.DomainName.Set(&v)
}
// SetDomainNameNil sets the value for DomainName to be an explicit nil
func (o *CentrifyZones) SetDomainNameNil() {
	o.DomainName.Set(nil)
}

// UnsetDomainName ensures that no value is present for DomainName, not even an explicit nil
func (o *CentrifyZones) UnsetDomainName() {
	o.DomainName.Unset()
}

// GetCentrifyZones returns the CentrifyZones field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CentrifyZones) GetCentrifyZones() []CentrifyZone {
	if o == nil  {
		var ret []CentrifyZone
		return ret
	}
	return o.CentrifyZones
}

// GetCentrifyZonesOk returns a tuple with the CentrifyZones field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CentrifyZones) GetCentrifyZonesOk() (*[]CentrifyZone, bool) {
	if o == nil || o.CentrifyZones == nil {
		return nil, false
	}
	return &o.CentrifyZones, true
}

// HasCentrifyZones returns a boolean if a field has been set.
func (o *CentrifyZones) HasCentrifyZones() bool {
	if o != nil && o.CentrifyZones != nil {
		return true
	}

	return false
}

// SetCentrifyZones gets a reference to the given []CentrifyZone and assigns it to the CentrifyZones field.
func (o *CentrifyZones) SetCentrifyZones(v []CentrifyZone) {
	o.CentrifyZones = v
}

func (o CentrifyZones) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DomainName.IsSet() {
		toSerialize["domainName"] = o.DomainName.Get()
	}
	if o.CentrifyZones != nil {
		toSerialize["centrifyZones"] = o.CentrifyZones
	}
	return json.Marshal(toSerialize)
}

type NullableCentrifyZones struct {
	value *CentrifyZones
	isSet bool
}

func (v NullableCentrifyZones) Get() *CentrifyZones {
	return v.value
}

func (v *NullableCentrifyZones) Set(val *CentrifyZones) {
	v.value = val
	v.isSet = true
}

func (v NullableCentrifyZones) IsSet() bool {
	return v.isSet
}

func (v *NullableCentrifyZones) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCentrifyZones(val *CentrifyZones) *NullableCentrifyZones {
	return &NullableCentrifyZones{value: val, isSet: true}
}

func (v NullableCentrifyZones) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCentrifyZones) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o CentrifyZones) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}