/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// MssqlConnectionResponseParamsAllOf struct for MssqlConnectionResponseParamsAllOf
type MssqlConnectionResponseParamsAllOf struct {
	Error *Error `json:"error,omitempty"`
	// Specifies whether to skip the discovery phase of all SQL servers, AAG groups etc during registration process.
	SkipConnectionDiscovery NullableBool `json:"skipConnectionDiscovery,omitempty"`
	// Specifies the list of SQL servers. If SQL server is a part of avalibility group then it will be returned in aagServers field. This will include the list of all standalone SQL servers and servers belonging to any FCI enviournment.
	Servers []SQLServer `json:"servers,omitempty"`
	// Specifies the list of FCI (Failover Cluster Instaces) Clusters. This will contain the list of all failover pools under a windows cluster. FCI clusters which are part of AAG, will be returned seperatly under aagServers field.
	FciClusters []FCICluster `json:"fciClusters,omitempty"`
	// Specifies the list of AAG (Always on Avalibility) groups.
	AagGroups []AAGGroup `json:"aagGroups,omitempty"`
}

// NewMssqlConnectionResponseParamsAllOf instantiates a new MssqlConnectionResponseParamsAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMssqlConnectionResponseParamsAllOf() *MssqlConnectionResponseParamsAllOf {
	this := MssqlConnectionResponseParamsAllOf{}
	return &this
}

// NewMssqlConnectionResponseParamsAllOfWithDefaults instantiates a new MssqlConnectionResponseParamsAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMssqlConnectionResponseParamsAllOfWithDefaults() *MssqlConnectionResponseParamsAllOf {
	this := MssqlConnectionResponseParamsAllOf{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *MssqlConnectionResponseParamsAllOf) GetError() Error {
	if o == nil || o.Error == nil {
		var ret Error
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MssqlConnectionResponseParamsAllOf) GetErrorOk() (*Error, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *MssqlConnectionResponseParamsAllOf) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given Error and assigns it to the Error field.
func (o *MssqlConnectionResponseParamsAllOf) SetError(v Error) {
	o.Error = &v
}

// GetSkipConnectionDiscovery returns the SkipConnectionDiscovery field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MssqlConnectionResponseParamsAllOf) GetSkipConnectionDiscovery() bool {
	if o == nil || o.SkipConnectionDiscovery.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SkipConnectionDiscovery.Get()
}

// GetSkipConnectionDiscoveryOk returns a tuple with the SkipConnectionDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MssqlConnectionResponseParamsAllOf) GetSkipConnectionDiscoveryOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SkipConnectionDiscovery.Get(), o.SkipConnectionDiscovery.IsSet()
}

// HasSkipConnectionDiscovery returns a boolean if a field has been set.
func (o *MssqlConnectionResponseParamsAllOf) HasSkipConnectionDiscovery() bool {
	if o != nil && o.SkipConnectionDiscovery.IsSet() {
		return true
	}

	return false
}

// SetSkipConnectionDiscovery gets a reference to the given NullableBool and assigns it to the SkipConnectionDiscovery field.
func (o *MssqlConnectionResponseParamsAllOf) SetSkipConnectionDiscovery(v bool) {
	o.SkipConnectionDiscovery.Set(&v)
}
// SetSkipConnectionDiscoveryNil sets the value for SkipConnectionDiscovery to be an explicit nil
func (o *MssqlConnectionResponseParamsAllOf) SetSkipConnectionDiscoveryNil() {
	o.SkipConnectionDiscovery.Set(nil)
}

// UnsetSkipConnectionDiscovery ensures that no value is present for SkipConnectionDiscovery, not even an explicit nil
func (o *MssqlConnectionResponseParamsAllOf) UnsetSkipConnectionDiscovery() {
	o.SkipConnectionDiscovery.Unset()
}

// GetServers returns the Servers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MssqlConnectionResponseParamsAllOf) GetServers() []SQLServer {
	if o == nil  {
		var ret []SQLServer
		return ret
	}
	return o.Servers
}

// GetServersOk returns a tuple with the Servers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MssqlConnectionResponseParamsAllOf) GetServersOk() (*[]SQLServer, bool) {
	if o == nil || o.Servers == nil {
		return nil, false
	}
	return &o.Servers, true
}

// HasServers returns a boolean if a field has been set.
func (o *MssqlConnectionResponseParamsAllOf) HasServers() bool {
	if o != nil && o.Servers != nil {
		return true
	}

	return false
}

// SetServers gets a reference to the given []SQLServer and assigns it to the Servers field.
func (o *MssqlConnectionResponseParamsAllOf) SetServers(v []SQLServer) {
	o.Servers = v
}

// GetFciClusters returns the FciClusters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MssqlConnectionResponseParamsAllOf) GetFciClusters() []FCICluster {
	if o == nil  {
		var ret []FCICluster
		return ret
	}
	return o.FciClusters
}

// GetFciClustersOk returns a tuple with the FciClusters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MssqlConnectionResponseParamsAllOf) GetFciClustersOk() (*[]FCICluster, bool) {
	if o == nil || o.FciClusters == nil {
		return nil, false
	}
	return &o.FciClusters, true
}

// HasFciClusters returns a boolean if a field has been set.
func (o *MssqlConnectionResponseParamsAllOf) HasFciClusters() bool {
	if o != nil && o.FciClusters != nil {
		return true
	}

	return false
}

// SetFciClusters gets a reference to the given []FCICluster and assigns it to the FciClusters field.
func (o *MssqlConnectionResponseParamsAllOf) SetFciClusters(v []FCICluster) {
	o.FciClusters = v
}

// GetAagGroups returns the AagGroups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MssqlConnectionResponseParamsAllOf) GetAagGroups() []AAGGroup {
	if o == nil  {
		var ret []AAGGroup
		return ret
	}
	return o.AagGroups
}

// GetAagGroupsOk returns a tuple with the AagGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MssqlConnectionResponseParamsAllOf) GetAagGroupsOk() (*[]AAGGroup, bool) {
	if o == nil || o.AagGroups == nil {
		return nil, false
	}
	return &o.AagGroups, true
}

// HasAagGroups returns a boolean if a field has been set.
func (o *MssqlConnectionResponseParamsAllOf) HasAagGroups() bool {
	if o != nil && o.AagGroups != nil {
		return true
	}

	return false
}

// SetAagGroups gets a reference to the given []AAGGroup and assigns it to the AagGroups field.
func (o *MssqlConnectionResponseParamsAllOf) SetAagGroups(v []AAGGroup) {
	o.AagGroups = v
}

func (o MssqlConnectionResponseParamsAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.SkipConnectionDiscovery.IsSet() {
		toSerialize["skipConnectionDiscovery"] = o.SkipConnectionDiscovery.Get()
	}
	if o.Servers != nil {
		toSerialize["servers"] = o.Servers
	}
	if o.FciClusters != nil {
		toSerialize["fciClusters"] = o.FciClusters
	}
	if o.AagGroups != nil {
		toSerialize["aagGroups"] = o.AagGroups
	}
	return json.Marshal(toSerialize)
}

type NullableMssqlConnectionResponseParamsAllOf struct {
	value *MssqlConnectionResponseParamsAllOf
	isSet bool
}

func (v NullableMssqlConnectionResponseParamsAllOf) Get() *MssqlConnectionResponseParamsAllOf {
	return v.value
}

func (v *NullableMssqlConnectionResponseParamsAllOf) Set(val *MssqlConnectionResponseParamsAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMssqlConnectionResponseParamsAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMssqlConnectionResponseParamsAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMssqlConnectionResponseParamsAllOf(val *MssqlConnectionResponseParamsAllOf) *NullableMssqlConnectionResponseParamsAllOf {
	return &NullableMssqlConnectionResponseParamsAllOf{value: val, isSet: true}
}

func (v NullableMssqlConnectionResponseParamsAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMssqlConnectionResponseParamsAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o MssqlConnectionResponseParamsAllOf) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}