/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// Recoveries Specifies list of Recoveries.
type Recoveries struct {
	// Specifies list of Recoveries.
	Recoveries []Recovery `json:"recoveries,omitempty"`
}

// NewRecoveries instantiates a new Recoveries object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoveries() *Recoveries {
	this := Recoveries{}
	return &this
}

// NewRecoveriesWithDefaults instantiates a new Recoveries object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoveriesWithDefaults() *Recoveries {
	this := Recoveries{}
	return &this
}

// GetRecoveries returns the Recoveries field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Recoveries) GetRecoveries() []Recovery {
	if o == nil  {
		var ret []Recovery
		return ret
	}
	return o.Recoveries
}

// GetRecoveriesOk returns a tuple with the Recoveries field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Recoveries) GetRecoveriesOk() (*[]Recovery, bool) {
	if o == nil || o.Recoveries == nil {
		return nil, false
	}
	return &o.Recoveries, true
}

// HasRecoveries returns a boolean if a field has been set.
func (o *Recoveries) HasRecoveries() bool {
	if o != nil && o.Recoveries != nil {
		return true
	}

	return false
}

// SetRecoveries gets a reference to the given []Recovery and assigns it to the Recoveries field.
func (o *Recoveries) SetRecoveries(v []Recovery) {
	o.Recoveries = v
}

func (o Recoveries) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Recoveries != nil {
		toSerialize["recoveries"] = o.Recoveries
	}
	return json.Marshal(toSerialize)
}

type NullableRecoveries struct {
	value *Recoveries
	isSet bool
}

func (v NullableRecoveries) Get() *Recoveries {
	return v.value
}

func (v *NullableRecoveries) Set(val *Recoveries) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoveries) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoveries) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoveries(val *Recoveries) *NullableRecoveries {
	return &NullableRecoveries{value: val, isSet: true}
}

func (v NullableRecoveries) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoveries) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o Recoveries) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}