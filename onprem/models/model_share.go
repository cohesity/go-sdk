/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// Share Specifies the details of a Share.
type Share struct {
	// Specifies if Filer Audit Logging is enabled for this view.
	EnableFilerAuditLogging NullableBool `json:"enableFilerAuditLogging,omitempty"`
	// SMB config for the alias (share).
	SmbConfig *AliasSmbConfig `json:"smbConfig,omitempty"`
	// List of external client subnet IPs that are allowed to access the share.
	ClientSubnetWhitelist []Subnet `json:"clientSubnetWhitelist,omitempty"`
	// Specifies the Share name.
	Name NullableString `json:"name"`
	// Specifies the View name of this Share.
	ViewName NullableString `json:"viewName"`
	// Specifies the View path of this Share.
	ViewPath NullableString `json:"viewPath"`
	// Specifies the path for mounting this Share as an NFS share. If Kerberos Provider has multiple hostaliases, each host alias has its own path.
	NfsMountPaths []string `json:"nfsMountPaths,omitempty"`
	// Specifies the possible paths that can be used to mount this Share as a SMB share. If Active Directory has multiple account names, each machine account has its own path.
	SmbMountPaths []string `json:"smbMountPaths,omitempty"`
	// Specifies the path to access this Share as an S3 share.
	S3AccessPath NullableString `json:"s3AccessPath,omitempty"`
	// Specifies the tenant id who has access to this Share.
	TenantId NullableString `json:"tenantId,omitempty"`
}

// NewShare instantiates a new Share object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShare(name NullableString, viewName NullableString, viewPath NullableString) *Share {
	this := Share{}
	this.Name = name
	this.ViewName = viewName
	this.ViewPath = viewPath
	return &this
}

// NewShareWithDefaults instantiates a new Share object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShareWithDefaults() *Share {
	this := Share{}
	return &this
}

// GetEnableFilerAuditLogging returns the EnableFilerAuditLogging field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Share) GetEnableFilerAuditLogging() bool {
	if o == nil || o.EnableFilerAuditLogging.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableFilerAuditLogging.Get()
}

// GetEnableFilerAuditLoggingOk returns a tuple with the EnableFilerAuditLogging field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Share) GetEnableFilerAuditLoggingOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableFilerAuditLogging.Get(), o.EnableFilerAuditLogging.IsSet()
}

// HasEnableFilerAuditLogging returns a boolean if a field has been set.
func (o *Share) HasEnableFilerAuditLogging() bool {
	if o != nil && o.EnableFilerAuditLogging.IsSet() {
		return true
	}

	return false
}

// SetEnableFilerAuditLogging gets a reference to the given NullableBool and assigns it to the EnableFilerAuditLogging field.
func (o *Share) SetEnableFilerAuditLogging(v bool) {
	o.EnableFilerAuditLogging.Set(&v)
}
// SetEnableFilerAuditLoggingNil sets the value for EnableFilerAuditLogging to be an explicit nil
func (o *Share) SetEnableFilerAuditLoggingNil() {
	o.EnableFilerAuditLogging.Set(nil)
}

// UnsetEnableFilerAuditLogging ensures that no value is present for EnableFilerAuditLogging, not even an explicit nil
func (o *Share) UnsetEnableFilerAuditLogging() {
	o.EnableFilerAuditLogging.Unset()
}

// GetSmbConfig returns the SmbConfig field value if set, zero value otherwise.
func (o *Share) GetSmbConfig() AliasSmbConfig {
	if o == nil || o.SmbConfig == nil {
		var ret AliasSmbConfig
		return ret
	}
	return *o.SmbConfig
}

// GetSmbConfigOk returns a tuple with the SmbConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Share) GetSmbConfigOk() (*AliasSmbConfig, bool) {
	if o == nil || o.SmbConfig == nil {
		return nil, false
	}
	return o.SmbConfig, true
}

// HasSmbConfig returns a boolean if a field has been set.
func (o *Share) HasSmbConfig() bool {
	if o != nil && o.SmbConfig != nil {
		return true
	}

	return false
}

// SetSmbConfig gets a reference to the given AliasSmbConfig and assigns it to the SmbConfig field.
func (o *Share) SetSmbConfig(v AliasSmbConfig) {
	o.SmbConfig = &v
}

// GetClientSubnetWhitelist returns the ClientSubnetWhitelist field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Share) GetClientSubnetWhitelist() []Subnet {
	if o == nil  {
		var ret []Subnet
		return ret
	}
	return o.ClientSubnetWhitelist
}

// GetClientSubnetWhitelistOk returns a tuple with the ClientSubnetWhitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Share) GetClientSubnetWhitelistOk() (*[]Subnet, bool) {
	if o == nil || o.ClientSubnetWhitelist == nil {
		return nil, false
	}
	return &o.ClientSubnetWhitelist, true
}

// HasClientSubnetWhitelist returns a boolean if a field has been set.
func (o *Share) HasClientSubnetWhitelist() bool {
	if o != nil && o.ClientSubnetWhitelist != nil {
		return true
	}

	return false
}

// SetClientSubnetWhitelist gets a reference to the given []Subnet and assigns it to the ClientSubnetWhitelist field.
func (o *Share) SetClientSubnetWhitelist(v []Subnet) {
	o.ClientSubnetWhitelist = v
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Share) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Share) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *Share) SetName(v string) {
	o.Name.Set(&v)
}

// GetViewName returns the ViewName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Share) GetViewName() string {
	if o == nil || o.ViewName.Get() == nil {
		var ret string
		return ret
	}

	return *o.ViewName.Get()
}

// GetViewNameOk returns a tuple with the ViewName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Share) GetViewNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewName.Get(), o.ViewName.IsSet()
}

// SetViewName sets field value
func (o *Share) SetViewName(v string) {
	o.ViewName.Set(&v)
}

// GetViewPath returns the ViewPath field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Share) GetViewPath() string {
	if o == nil || o.ViewPath.Get() == nil {
		var ret string
		return ret
	}

	return *o.ViewPath.Get()
}

// GetViewPathOk returns a tuple with the ViewPath field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Share) GetViewPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewPath.Get(), o.ViewPath.IsSet()
}

// SetViewPath sets field value
func (o *Share) SetViewPath(v string) {
	o.ViewPath.Set(&v)
}

// GetNfsMountPaths returns the NfsMountPaths field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Share) GetNfsMountPaths() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.NfsMountPaths
}

// GetNfsMountPathsOk returns a tuple with the NfsMountPaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Share) GetNfsMountPathsOk() (*[]string, bool) {
	if o == nil || o.NfsMountPaths == nil {
		return nil, false
	}
	return &o.NfsMountPaths, true
}

// HasNfsMountPaths returns a boolean if a field has been set.
func (o *Share) HasNfsMountPaths() bool {
	if o != nil && o.NfsMountPaths != nil {
		return true
	}

	return false
}

// SetNfsMountPaths gets a reference to the given []string and assigns it to the NfsMountPaths field.
func (o *Share) SetNfsMountPaths(v []string) {
	o.NfsMountPaths = v
}

// GetSmbMountPaths returns the SmbMountPaths field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Share) GetSmbMountPaths() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.SmbMountPaths
}

// GetSmbMountPathsOk returns a tuple with the SmbMountPaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Share) GetSmbMountPathsOk() (*[]string, bool) {
	if o == nil || o.SmbMountPaths == nil {
		return nil, false
	}
	return &o.SmbMountPaths, true
}

// HasSmbMountPaths returns a boolean if a field has been set.
func (o *Share) HasSmbMountPaths() bool {
	if o != nil && o.SmbMountPaths != nil {
		return true
	}

	return false
}

// SetSmbMountPaths gets a reference to the given []string and assigns it to the SmbMountPaths field.
func (o *Share) SetSmbMountPaths(v []string) {
	o.SmbMountPaths = v
}

// GetS3AccessPath returns the S3AccessPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Share) GetS3AccessPath() string {
	if o == nil || o.S3AccessPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.S3AccessPath.Get()
}

// GetS3AccessPathOk returns a tuple with the S3AccessPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Share) GetS3AccessPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.S3AccessPath.Get(), o.S3AccessPath.IsSet()
}

// HasS3AccessPath returns a boolean if a field has been set.
func (o *Share) HasS3AccessPath() bool {
	if o != nil && o.S3AccessPath.IsSet() {
		return true
	}

	return false
}

// SetS3AccessPath gets a reference to the given NullableString and assigns it to the S3AccessPath field.
func (o *Share) SetS3AccessPath(v string) {
	o.S3AccessPath.Set(&v)
}
// SetS3AccessPathNil sets the value for S3AccessPath to be an explicit nil
func (o *Share) SetS3AccessPathNil() {
	o.S3AccessPath.Set(nil)
}

// UnsetS3AccessPath ensures that no value is present for S3AccessPath, not even an explicit nil
func (o *Share) UnsetS3AccessPath() {
	o.S3AccessPath.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Share) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Share) GetTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *Share) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *Share) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *Share) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *Share) UnsetTenantId() {
	o.TenantId.Unset()
}

func (o Share) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EnableFilerAuditLogging.IsSet() {
		toSerialize["enableFilerAuditLogging"] = o.EnableFilerAuditLogging.Get()
	}
	if o.SmbConfig != nil {
		toSerialize["smbConfig"] = o.SmbConfig
	}
	if o.ClientSubnetWhitelist != nil {
		toSerialize["clientSubnetWhitelist"] = o.ClientSubnetWhitelist
	}
	if true {
		toSerialize["name"] = o.Name.Get()
	}
	if true {
		toSerialize["viewName"] = o.ViewName.Get()
	}
	if true {
		toSerialize["viewPath"] = o.ViewPath.Get()
	}
	if o.NfsMountPaths != nil {
		toSerialize["nfsMountPaths"] = o.NfsMountPaths
	}
	if o.SmbMountPaths != nil {
		toSerialize["smbMountPaths"] = o.SmbMountPaths
	}
	if o.S3AccessPath.IsSet() {
		toSerialize["s3AccessPath"] = o.S3AccessPath.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableShare struct {
	value *Share
	isSet bool
}

func (v NullableShare) Get() *Share {
	return v.value
}

func (v *NullableShare) Set(val *Share) {
	v.value = val
	v.isSet = true
}

func (v NullableShare) IsSet() bool {
	return v.isSet
}

func (v *NullableShare) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShare(val *Share) *NullableShare {
	return &NullableShare{value: val, isSet: true}
}

func (v NullableShare) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShare) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o Share) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}