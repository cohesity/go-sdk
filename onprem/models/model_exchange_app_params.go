/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// ExchangeAppParams Specifies the Exchange special parameters for the Protection Group.
type ExchangeAppParams struct {
	// Specifies the application id of the Exchange database which has to be protected.
	AppId NullableInt64 `json:"appId,omitempty"`
	// Specifies the application name of the Exchange database which has to be protected.
	AppName NullableString `json:"appName,omitempty"`
}

// NewExchangeAppParams instantiates a new ExchangeAppParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExchangeAppParams() *ExchangeAppParams {
	this := ExchangeAppParams{}
	return &this
}

// NewExchangeAppParamsWithDefaults instantiates a new ExchangeAppParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExchangeAppParamsWithDefaults() *ExchangeAppParams {
	this := ExchangeAppParams{}
	return &this
}

// GetAppId returns the AppId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeAppParams) GetAppId() int64 {
	if o == nil || o.AppId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.AppId.Get()
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeAppParams) GetAppIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AppId.Get(), o.AppId.IsSet()
}

// HasAppId returns a boolean if a field has been set.
func (o *ExchangeAppParams) HasAppId() bool {
	if o != nil && o.AppId.IsSet() {
		return true
	}

	return false
}

// SetAppId gets a reference to the given NullableInt64 and assigns it to the AppId field.
func (o *ExchangeAppParams) SetAppId(v int64) {
	o.AppId.Set(&v)
}
// SetAppIdNil sets the value for AppId to be an explicit nil
func (o *ExchangeAppParams) SetAppIdNil() {
	o.AppId.Set(nil)
}

// UnsetAppId ensures that no value is present for AppId, not even an explicit nil
func (o *ExchangeAppParams) UnsetAppId() {
	o.AppId.Unset()
}

// GetAppName returns the AppName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeAppParams) GetAppName() string {
	if o == nil || o.AppName.Get() == nil {
		var ret string
		return ret
	}
	return *o.AppName.Get()
}

// GetAppNameOk returns a tuple with the AppName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeAppParams) GetAppNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AppName.Get(), o.AppName.IsSet()
}

// HasAppName returns a boolean if a field has been set.
func (o *ExchangeAppParams) HasAppName() bool {
	if o != nil && o.AppName.IsSet() {
		return true
	}

	return false
}

// SetAppName gets a reference to the given NullableString and assigns it to the AppName field.
func (o *ExchangeAppParams) SetAppName(v string) {
	o.AppName.Set(&v)
}
// SetAppNameNil sets the value for AppName to be an explicit nil
func (o *ExchangeAppParams) SetAppNameNil() {
	o.AppName.Set(nil)
}

// UnsetAppName ensures that no value is present for AppName, not even an explicit nil
func (o *ExchangeAppParams) UnsetAppName() {
	o.AppName.Unset()
}

func (o ExchangeAppParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AppId.IsSet() {
		toSerialize["appId"] = o.AppId.Get()
	}
	if o.AppName.IsSet() {
		toSerialize["appName"] = o.AppName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableExchangeAppParams struct {
	value *ExchangeAppParams
	isSet bool
}

func (v NullableExchangeAppParams) Get() *ExchangeAppParams {
	return v.value
}

func (v *NullableExchangeAppParams) Set(val *ExchangeAppParams) {
	v.value = val
	v.isSet = true
}

func (v NullableExchangeAppParams) IsSet() bool {
	return v.isSet
}

func (v *NullableExchangeAppParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchangeAppParams(val *ExchangeAppParams) *NullableExchangeAppParams {
	return &NullableExchangeAppParams{value: val, isSet: true}
}

func (v NullableExchangeAppParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchangeAppParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o ExchangeAppParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}