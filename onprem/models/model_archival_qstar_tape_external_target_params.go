/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// ArchivalQstarTapeExternalTargetParams Specifies the parameters which are specific to QStar Tape related External Targets of archival purpose type.
type ArchivalQstarTapeExternalTargetParams struct {
	// Specifies the host of the QStar Tape external target.
	Host NullableString `json:"host"`
	// Specifies the Web Services Port of the QStar Tape external target.
	WebServicesPort NullableInt32 `json:"webServicesPort"`
	// Specifies the Username of the QStar Tape external target.
	Username NullableString `json:"username"`
	// Specifies the Password of the QStar Tape external target.
	Password NullableString `json:"password"`
	// Specifies the share type of QStar Tape external target.
	ShareType NullableString `json:"shareType,omitempty"`
	// Specifies whether HTTPS is used or not.
	UseHttps NullableBool `json:"useHttps,omitempty"`
	// Specifies the Integral Volume Names of the QStar Tape external target.
	IntegralVolumeNames []string `json:"integralVolumeNames,omitempty"`
	// Specifies if Incremental Archival setting is enabled or not.
	IsIncrementalArchivalEnabled NullableBool `json:"isIncrementalArchivalEnabled,omitempty"`
	// Specifies if Forever Incremental Archival setting is enabled or not.
	IsForeverIncrementalArchivalEnabled NullableBool `json:"isForeverIncrementalArchivalEnabled,omitempty"`
}

// NewArchivalQstarTapeExternalTargetParams instantiates a new ArchivalQstarTapeExternalTargetParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArchivalQstarTapeExternalTargetParams(host NullableString, webServicesPort NullableInt32, username NullableString, password NullableString) *ArchivalQstarTapeExternalTargetParams {
	this := ArchivalQstarTapeExternalTargetParams{}
	this.Host = host
	this.WebServicesPort = webServicesPort
	this.Username = username
	this.Password = password
	return &this
}

// NewArchivalQstarTapeExternalTargetParamsWithDefaults instantiates a new ArchivalQstarTapeExternalTargetParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArchivalQstarTapeExternalTargetParamsWithDefaults() *ArchivalQstarTapeExternalTargetParams {
	this := ArchivalQstarTapeExternalTargetParams{}
	return &this
}

// GetHost returns the Host field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ArchivalQstarTapeExternalTargetParams) GetHost() string {
	if o == nil || o.Host.Get() == nil {
		var ret string
		return ret
	}

	return *o.Host.Get()
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalQstarTapeExternalTargetParams) GetHostOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Host.Get(), o.Host.IsSet()
}

// SetHost sets field value
func (o *ArchivalQstarTapeExternalTargetParams) SetHost(v string) {
	o.Host.Set(&v)
}

// GetWebServicesPort returns the WebServicesPort field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *ArchivalQstarTapeExternalTargetParams) GetWebServicesPort() int32 {
	if o == nil || o.WebServicesPort.Get() == nil {
		var ret int32
		return ret
	}

	return *o.WebServicesPort.Get()
}

// GetWebServicesPortOk returns a tuple with the WebServicesPort field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalQstarTapeExternalTargetParams) GetWebServicesPortOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.WebServicesPort.Get(), o.WebServicesPort.IsSet()
}

// SetWebServicesPort sets field value
func (o *ArchivalQstarTapeExternalTargetParams) SetWebServicesPort(v int32) {
	o.WebServicesPort.Set(&v)
}

// GetUsername returns the Username field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ArchivalQstarTapeExternalTargetParams) GetUsername() string {
	if o == nil || o.Username.Get() == nil {
		var ret string
		return ret
	}

	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalQstarTapeExternalTargetParams) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// SetUsername sets field value
func (o *ArchivalQstarTapeExternalTargetParams) SetUsername(v string) {
	o.Username.Set(&v)
}

// GetPassword returns the Password field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ArchivalQstarTapeExternalTargetParams) GetPassword() string {
	if o == nil || o.Password.Get() == nil {
		var ret string
		return ret
	}

	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalQstarTapeExternalTargetParams) GetPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// SetPassword sets field value
func (o *ArchivalQstarTapeExternalTargetParams) SetPassword(v string) {
	o.Password.Set(&v)
}

// GetShareType returns the ShareType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalQstarTapeExternalTargetParams) GetShareType() string {
	if o == nil || o.ShareType.Get() == nil {
		var ret string
		return ret
	}
	return *o.ShareType.Get()
}

// GetShareTypeOk returns a tuple with the ShareType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalQstarTapeExternalTargetParams) GetShareTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ShareType.Get(), o.ShareType.IsSet()
}

// HasShareType returns a boolean if a field has been set.
func (o *ArchivalQstarTapeExternalTargetParams) HasShareType() bool {
	if o != nil && o.ShareType.IsSet() {
		return true
	}

	return false
}

// SetShareType gets a reference to the given NullableString and assigns it to the ShareType field.
func (o *ArchivalQstarTapeExternalTargetParams) SetShareType(v string) {
	o.ShareType.Set(&v)
}
// SetShareTypeNil sets the value for ShareType to be an explicit nil
func (o *ArchivalQstarTapeExternalTargetParams) SetShareTypeNil() {
	o.ShareType.Set(nil)
}

// UnsetShareType ensures that no value is present for ShareType, not even an explicit nil
func (o *ArchivalQstarTapeExternalTargetParams) UnsetShareType() {
	o.ShareType.Unset()
}

// GetUseHttps returns the UseHttps field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalQstarTapeExternalTargetParams) GetUseHttps() bool {
	if o == nil || o.UseHttps.Get() == nil {
		var ret bool
		return ret
	}
	return *o.UseHttps.Get()
}

// GetUseHttpsOk returns a tuple with the UseHttps field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalQstarTapeExternalTargetParams) GetUseHttpsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UseHttps.Get(), o.UseHttps.IsSet()
}

// HasUseHttps returns a boolean if a field has been set.
func (o *ArchivalQstarTapeExternalTargetParams) HasUseHttps() bool {
	if o != nil && o.UseHttps.IsSet() {
		return true
	}

	return false
}

// SetUseHttps gets a reference to the given NullableBool and assigns it to the UseHttps field.
func (o *ArchivalQstarTapeExternalTargetParams) SetUseHttps(v bool) {
	o.UseHttps.Set(&v)
}
// SetUseHttpsNil sets the value for UseHttps to be an explicit nil
func (o *ArchivalQstarTapeExternalTargetParams) SetUseHttpsNil() {
	o.UseHttps.Set(nil)
}

// UnsetUseHttps ensures that no value is present for UseHttps, not even an explicit nil
func (o *ArchivalQstarTapeExternalTargetParams) UnsetUseHttps() {
	o.UseHttps.Unset()
}

// GetIntegralVolumeNames returns the IntegralVolumeNames field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalQstarTapeExternalTargetParams) GetIntegralVolumeNames() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.IntegralVolumeNames
}

// GetIntegralVolumeNamesOk returns a tuple with the IntegralVolumeNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalQstarTapeExternalTargetParams) GetIntegralVolumeNamesOk() (*[]string, bool) {
	if o == nil || o.IntegralVolumeNames == nil {
		return nil, false
	}
	return &o.IntegralVolumeNames, true
}

// HasIntegralVolumeNames returns a boolean if a field has been set.
func (o *ArchivalQstarTapeExternalTargetParams) HasIntegralVolumeNames() bool {
	if o != nil && o.IntegralVolumeNames != nil {
		return true
	}

	return false
}

// SetIntegralVolumeNames gets a reference to the given []string and assigns it to the IntegralVolumeNames field.
func (o *ArchivalQstarTapeExternalTargetParams) SetIntegralVolumeNames(v []string) {
	o.IntegralVolumeNames = v
}

// GetIsIncrementalArchivalEnabled returns the IsIncrementalArchivalEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalQstarTapeExternalTargetParams) GetIsIncrementalArchivalEnabled() bool {
	if o == nil || o.IsIncrementalArchivalEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsIncrementalArchivalEnabled.Get()
}

// GetIsIncrementalArchivalEnabledOk returns a tuple with the IsIncrementalArchivalEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalQstarTapeExternalTargetParams) GetIsIncrementalArchivalEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsIncrementalArchivalEnabled.Get(), o.IsIncrementalArchivalEnabled.IsSet()
}

// HasIsIncrementalArchivalEnabled returns a boolean if a field has been set.
func (o *ArchivalQstarTapeExternalTargetParams) HasIsIncrementalArchivalEnabled() bool {
	if o != nil && o.IsIncrementalArchivalEnabled.IsSet() {
		return true
	}

	return false
}

// SetIsIncrementalArchivalEnabled gets a reference to the given NullableBool and assigns it to the IsIncrementalArchivalEnabled field.
func (o *ArchivalQstarTapeExternalTargetParams) SetIsIncrementalArchivalEnabled(v bool) {
	o.IsIncrementalArchivalEnabled.Set(&v)
}
// SetIsIncrementalArchivalEnabledNil sets the value for IsIncrementalArchivalEnabled to be an explicit nil
func (o *ArchivalQstarTapeExternalTargetParams) SetIsIncrementalArchivalEnabledNil() {
	o.IsIncrementalArchivalEnabled.Set(nil)
}

// UnsetIsIncrementalArchivalEnabled ensures that no value is present for IsIncrementalArchivalEnabled, not even an explicit nil
func (o *ArchivalQstarTapeExternalTargetParams) UnsetIsIncrementalArchivalEnabled() {
	o.IsIncrementalArchivalEnabled.Unset()
}

// GetIsForeverIncrementalArchivalEnabled returns the IsForeverIncrementalArchivalEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalQstarTapeExternalTargetParams) GetIsForeverIncrementalArchivalEnabled() bool {
	if o == nil || o.IsForeverIncrementalArchivalEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsForeverIncrementalArchivalEnabled.Get()
}

// GetIsForeverIncrementalArchivalEnabledOk returns a tuple with the IsForeverIncrementalArchivalEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalQstarTapeExternalTargetParams) GetIsForeverIncrementalArchivalEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsForeverIncrementalArchivalEnabled.Get(), o.IsForeverIncrementalArchivalEnabled.IsSet()
}

// HasIsForeverIncrementalArchivalEnabled returns a boolean if a field has been set.
func (o *ArchivalQstarTapeExternalTargetParams) HasIsForeverIncrementalArchivalEnabled() bool {
	if o != nil && o.IsForeverIncrementalArchivalEnabled.IsSet() {
		return true
	}

	return false
}

// SetIsForeverIncrementalArchivalEnabled gets a reference to the given NullableBool and assigns it to the IsForeverIncrementalArchivalEnabled field.
func (o *ArchivalQstarTapeExternalTargetParams) SetIsForeverIncrementalArchivalEnabled(v bool) {
	o.IsForeverIncrementalArchivalEnabled.Set(&v)
}
// SetIsForeverIncrementalArchivalEnabledNil sets the value for IsForeverIncrementalArchivalEnabled to be an explicit nil
func (o *ArchivalQstarTapeExternalTargetParams) SetIsForeverIncrementalArchivalEnabledNil() {
	o.IsForeverIncrementalArchivalEnabled.Set(nil)
}

// UnsetIsForeverIncrementalArchivalEnabled ensures that no value is present for IsForeverIncrementalArchivalEnabled, not even an explicit nil
func (o *ArchivalQstarTapeExternalTargetParams) UnsetIsForeverIncrementalArchivalEnabled() {
	o.IsForeverIncrementalArchivalEnabled.Unset()
}

func (o ArchivalQstarTapeExternalTargetParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["host"] = o.Host.Get()
	}
	if true {
		toSerialize["webServicesPort"] = o.WebServicesPort.Get()
	}
	if true {
		toSerialize["username"] = o.Username.Get()
	}
	if true {
		toSerialize["password"] = o.Password.Get()
	}
	if o.ShareType.IsSet() {
		toSerialize["shareType"] = o.ShareType.Get()
	}
	if o.UseHttps.IsSet() {
		toSerialize["useHttps"] = o.UseHttps.Get()
	}
	if o.IntegralVolumeNames != nil {
		toSerialize["integralVolumeNames"] = o.IntegralVolumeNames
	}
	if o.IsIncrementalArchivalEnabled.IsSet() {
		toSerialize["isIncrementalArchivalEnabled"] = o.IsIncrementalArchivalEnabled.Get()
	}
	if o.IsForeverIncrementalArchivalEnabled.IsSet() {
		toSerialize["isForeverIncrementalArchivalEnabled"] = o.IsForeverIncrementalArchivalEnabled.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableArchivalQstarTapeExternalTargetParams struct {
	value *ArchivalQstarTapeExternalTargetParams
	isSet bool
}

func (v NullableArchivalQstarTapeExternalTargetParams) Get() *ArchivalQstarTapeExternalTargetParams {
	return v.value
}

func (v *NullableArchivalQstarTapeExternalTargetParams) Set(val *ArchivalQstarTapeExternalTargetParams) {
	v.value = val
	v.isSet = true
}

func (v NullableArchivalQstarTapeExternalTargetParams) IsSet() bool {
	return v.isSet
}

func (v *NullableArchivalQstarTapeExternalTargetParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArchivalQstarTapeExternalTargetParams(val *ArchivalQstarTapeExternalTargetParams) *NullableArchivalQstarTapeExternalTargetParams {
	return &NullableArchivalQstarTapeExternalTargetParams{value: val, isSet: true}
}

func (v NullableArchivalQstarTapeExternalTargetParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArchivalQstarTapeExternalTargetParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o ArchivalQstarTapeExternalTargetParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}