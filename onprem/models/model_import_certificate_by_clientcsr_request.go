/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// ImportCertificateByClientcsrRequest Specifies the request to import a certificate.
type ImportCertificateByClientcsrRequest struct {
	// Specifies the server certificate to be imported.
	CertificateServer NullableString `json:"certificateServer"`
	// Specifies the client certificate to be imported.
	CertificateClient NullableString `json:"certificateClient"`
}

// NewImportCertificateByClientcsrRequest instantiates a new ImportCertificateByClientcsrRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportCertificateByClientcsrRequest(certificateServer NullableString, certificateClient NullableString) *ImportCertificateByClientcsrRequest {
	this := ImportCertificateByClientcsrRequest{}
	this.CertificateServer = certificateServer
	this.CertificateClient = certificateClient
	return &this
}

// NewImportCertificateByClientcsrRequestWithDefaults instantiates a new ImportCertificateByClientcsrRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportCertificateByClientcsrRequestWithDefaults() *ImportCertificateByClientcsrRequest {
	this := ImportCertificateByClientcsrRequest{}
	return &this
}

// GetCertificateServer returns the CertificateServer field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ImportCertificateByClientcsrRequest) GetCertificateServer() string {
	if o == nil || o.CertificateServer.Get() == nil {
		var ret string
		return ret
	}

	return *o.CertificateServer.Get()
}

// GetCertificateServerOk returns a tuple with the CertificateServer field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ImportCertificateByClientcsrRequest) GetCertificateServerOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CertificateServer.Get(), o.CertificateServer.IsSet()
}

// SetCertificateServer sets field value
func (o *ImportCertificateByClientcsrRequest) SetCertificateServer(v string) {
	o.CertificateServer.Set(&v)
}

// GetCertificateClient returns the CertificateClient field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ImportCertificateByClientcsrRequest) GetCertificateClient() string {
	if o == nil || o.CertificateClient.Get() == nil {
		var ret string
		return ret
	}

	return *o.CertificateClient.Get()
}

// GetCertificateClientOk returns a tuple with the CertificateClient field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ImportCertificateByClientcsrRequest) GetCertificateClientOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CertificateClient.Get(), o.CertificateClient.IsSet()
}

// SetCertificateClient sets field value
func (o *ImportCertificateByClientcsrRequest) SetCertificateClient(v string) {
	o.CertificateClient.Set(&v)
}

func (o ImportCertificateByClientcsrRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["certificateServer"] = o.CertificateServer.Get()
	}
	if true {
		toSerialize["certificateClient"] = o.CertificateClient.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableImportCertificateByClientcsrRequest struct {
	value *ImportCertificateByClientcsrRequest
	isSet bool
}

func (v NullableImportCertificateByClientcsrRequest) Get() *ImportCertificateByClientcsrRequest {
	return v.value
}

func (v *NullableImportCertificateByClientcsrRequest) Set(val *ImportCertificateByClientcsrRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableImportCertificateByClientcsrRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableImportCertificateByClientcsrRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportCertificateByClientcsrRequest(val *ImportCertificateByClientcsrRequest) *NullableImportCertificateByClientcsrRequest {
	return &NullableImportCertificateByClientcsrRequest{value: val, isSet: true}
}

func (v NullableImportCertificateByClientcsrRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportCertificateByClientcsrRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o ImportCertificateByClientcsrRequest) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}