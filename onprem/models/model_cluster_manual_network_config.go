/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// ClusterManualNetworkConfig Specifies all of the parameters needed for network configuration of the new Cluster using manual configuration.
type ClusterManualNetworkConfig struct {
	// Specifies the gateway of the new cluster network.
	Gateway NullableString `json:"gateway"`
	// Specifies the ip subnet ip of the cluster network.
	SubnetIp NullableString `json:"subnetIp"`
	// Specifies the ip subnet mask of the cluster network.
	SubnetMask NullableString `json:"subnetMask"`
	// Specifies the list of Dns Servers new cluster should be configured with.
	DnsServers []string `json:"dnsServers"`
}

// NewClusterManualNetworkConfig instantiates a new ClusterManualNetworkConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterManualNetworkConfig(gateway NullableString, subnetIp NullableString, subnetMask NullableString, dnsServers []string) *ClusterManualNetworkConfig {
	this := ClusterManualNetworkConfig{}
	this.Gateway = gateway
	this.SubnetIp = subnetIp
	this.SubnetMask = subnetMask
	this.DnsServers = dnsServers
	return &this
}

// NewClusterManualNetworkConfigWithDefaults instantiates a new ClusterManualNetworkConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterManualNetworkConfigWithDefaults() *ClusterManualNetworkConfig {
	this := ClusterManualNetworkConfig{}
	return &this
}

// GetGateway returns the Gateway field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ClusterManualNetworkConfig) GetGateway() string {
	if o == nil || o.Gateway.Get() == nil {
		var ret string
		return ret
	}

	return *o.Gateway.Get()
}

// GetGatewayOk returns a tuple with the Gateway field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterManualNetworkConfig) GetGatewayOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Gateway.Get(), o.Gateway.IsSet()
}

// SetGateway sets field value
func (o *ClusterManualNetworkConfig) SetGateway(v string) {
	o.Gateway.Set(&v)
}

// GetSubnetIp returns the SubnetIp field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ClusterManualNetworkConfig) GetSubnetIp() string {
	if o == nil || o.SubnetIp.Get() == nil {
		var ret string
		return ret
	}

	return *o.SubnetIp.Get()
}

// GetSubnetIpOk returns a tuple with the SubnetIp field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterManualNetworkConfig) GetSubnetIpOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SubnetIp.Get(), o.SubnetIp.IsSet()
}

// SetSubnetIp sets field value
func (o *ClusterManualNetworkConfig) SetSubnetIp(v string) {
	o.SubnetIp.Set(&v)
}

// GetSubnetMask returns the SubnetMask field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ClusterManualNetworkConfig) GetSubnetMask() string {
	if o == nil || o.SubnetMask.Get() == nil {
		var ret string
		return ret
	}

	return *o.SubnetMask.Get()
}

// GetSubnetMaskOk returns a tuple with the SubnetMask field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterManualNetworkConfig) GetSubnetMaskOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SubnetMask.Get(), o.SubnetMask.IsSet()
}

// SetSubnetMask sets field value
func (o *ClusterManualNetworkConfig) SetSubnetMask(v string) {
	o.SubnetMask.Set(&v)
}

// GetDnsServers returns the DnsServers field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *ClusterManualNetworkConfig) GetDnsServers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DnsServers
}

// GetDnsServersOk returns a tuple with the DnsServers field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterManualNetworkConfig) GetDnsServersOk() (*[]string, bool) {
	if o == nil || o.DnsServers == nil {
		return nil, false
	}
	return &o.DnsServers, true
}

// SetDnsServers sets field value
func (o *ClusterManualNetworkConfig) SetDnsServers(v []string) {
	o.DnsServers = v
}

func (o ClusterManualNetworkConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["gateway"] = o.Gateway.Get()
	}
	if true {
		toSerialize["subnetIp"] = o.SubnetIp.Get()
	}
	if true {
		toSerialize["subnetMask"] = o.SubnetMask.Get()
	}
	if o.DnsServers != nil {
		toSerialize["dnsServers"] = o.DnsServers
	}
	return json.Marshal(toSerialize)
}

type NullableClusterManualNetworkConfig struct {
	value *ClusterManualNetworkConfig
	isSet bool
}

func (v NullableClusterManualNetworkConfig) Get() *ClusterManualNetworkConfig {
	return v.value
}

func (v *NullableClusterManualNetworkConfig) Set(val *ClusterManualNetworkConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterManualNetworkConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterManualNetworkConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterManualNetworkConfig(val *ClusterManualNetworkConfig) *NullableClusterManualNetworkConfig {
	return &NullableClusterManualNetworkConfig{value: val, isSet: true}
}

func (v NullableClusterManualNetworkConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterManualNetworkConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o ClusterManualNetworkConfig) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}