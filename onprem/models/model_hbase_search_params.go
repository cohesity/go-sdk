/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// HbaseSearchParams Specifies the parameters which are specific for searching Hbase objects.
type HbaseSearchParams struct {
	// Specifies the search string to search the Hbase Objects
	SearchString NullableString `json:"searchString"`
	// Specifies one or more Hbase object types be searched.
	HbaseObjectTypes []string `json:"hbaseObjectTypes"`
}

// NewHbaseSearchParams instantiates a new HbaseSearchParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHbaseSearchParams(searchString NullableString, hbaseObjectTypes []string) *HbaseSearchParams {
	this := HbaseSearchParams{}
	this.SearchString = searchString
	this.HbaseObjectTypes = hbaseObjectTypes
	return &this
}

// NewHbaseSearchParamsWithDefaults instantiates a new HbaseSearchParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHbaseSearchParamsWithDefaults() *HbaseSearchParams {
	this := HbaseSearchParams{}
	return &this
}

// GetSearchString returns the SearchString field value
// If the value is explicit nil, the zero value for string will be returned
func (o *HbaseSearchParams) GetSearchString() string {
	if o == nil || o.SearchString.Get() == nil {
		var ret string
		return ret
	}

	return *o.SearchString.Get()
}

// GetSearchStringOk returns a tuple with the SearchString field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HbaseSearchParams) GetSearchStringOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SearchString.Get(), o.SearchString.IsSet()
}

// SetSearchString sets field value
func (o *HbaseSearchParams) SetSearchString(v string) {
	o.SearchString.Set(&v)
}

// GetHbaseObjectTypes returns the HbaseObjectTypes field value
func (o *HbaseSearchParams) GetHbaseObjectTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.HbaseObjectTypes
}

// GetHbaseObjectTypesOk returns a tuple with the HbaseObjectTypes field value
// and a boolean to check if the value has been set.
func (o *HbaseSearchParams) GetHbaseObjectTypesOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.HbaseObjectTypes, true
}

// SetHbaseObjectTypes sets field value
func (o *HbaseSearchParams) SetHbaseObjectTypes(v []string) {
	o.HbaseObjectTypes = v
}

func (o HbaseSearchParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["searchString"] = o.SearchString.Get()
	}
	if true {
		toSerialize["hbaseObjectTypes"] = o.HbaseObjectTypes
	}
	return json.Marshal(toSerialize)
}

type NullableHbaseSearchParams struct {
	value *HbaseSearchParams
	isSet bool
}

func (v NullableHbaseSearchParams) Get() *HbaseSearchParams {
	return v.value
}

func (v *NullableHbaseSearchParams) Set(val *HbaseSearchParams) {
	v.value = val
	v.isSet = true
}

func (v NullableHbaseSearchParams) IsSet() bool {
	return v.isSet
}

func (v *NullableHbaseSearchParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHbaseSearchParams(val *HbaseSearchParams) *NullableHbaseSearchParams {
	return &NullableHbaseSearchParams{value: val, isSet: true}
}

func (v NullableHbaseSearchParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHbaseSearchParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o HbaseSearchParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}