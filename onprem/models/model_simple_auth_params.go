/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// SimpleAuthParams Specifies the parameters for LDAP with 'Simple' authentication type.
type SimpleAuthParams struct {
	// Specifies the user distinguished name that is used for LDAP authentication.
	UserDistinguishedName NullableString `json:"userDistinguishedName"`
	// Specifies the user password that is used for LDAP authentication.
	UserPassword NullableString `json:"userPassword,omitempty"`
	// Specifies whether to use SSL for LDAP connections.
	UseSsl NullableBool `json:"useSsl,omitempty"`
}

// NewSimpleAuthParams instantiates a new SimpleAuthParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSimpleAuthParams(userDistinguishedName NullableString) *SimpleAuthParams {
	this := SimpleAuthParams{}
	this.UserDistinguishedName = userDistinguishedName
	return &this
}

// NewSimpleAuthParamsWithDefaults instantiates a new SimpleAuthParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSimpleAuthParamsWithDefaults() *SimpleAuthParams {
	this := SimpleAuthParams{}
	return &this
}

// GetUserDistinguishedName returns the UserDistinguishedName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *SimpleAuthParams) GetUserDistinguishedName() string {
	if o == nil || o.UserDistinguishedName.Get() == nil {
		var ret string
		return ret
	}

	return *o.UserDistinguishedName.Get()
}

// GetUserDistinguishedNameOk returns a tuple with the UserDistinguishedName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SimpleAuthParams) GetUserDistinguishedNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UserDistinguishedName.Get(), o.UserDistinguishedName.IsSet()
}

// SetUserDistinguishedName sets field value
func (o *SimpleAuthParams) SetUserDistinguishedName(v string) {
	o.UserDistinguishedName.Set(&v)
}

// GetUserPassword returns the UserPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SimpleAuthParams) GetUserPassword() string {
	if o == nil || o.UserPassword.Get() == nil {
		var ret string
		return ret
	}
	return *o.UserPassword.Get()
}

// GetUserPasswordOk returns a tuple with the UserPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SimpleAuthParams) GetUserPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UserPassword.Get(), o.UserPassword.IsSet()
}

// HasUserPassword returns a boolean if a field has been set.
func (o *SimpleAuthParams) HasUserPassword() bool {
	if o != nil && o.UserPassword.IsSet() {
		return true
	}

	return false
}

// SetUserPassword gets a reference to the given NullableString and assigns it to the UserPassword field.
func (o *SimpleAuthParams) SetUserPassword(v string) {
	o.UserPassword.Set(&v)
}
// SetUserPasswordNil sets the value for UserPassword to be an explicit nil
func (o *SimpleAuthParams) SetUserPasswordNil() {
	o.UserPassword.Set(nil)
}

// UnsetUserPassword ensures that no value is present for UserPassword, not even an explicit nil
func (o *SimpleAuthParams) UnsetUserPassword() {
	o.UserPassword.Unset()
}

// GetUseSsl returns the UseSsl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SimpleAuthParams) GetUseSsl() bool {
	if o == nil || o.UseSsl.Get() == nil {
		var ret bool
		return ret
	}
	return *o.UseSsl.Get()
}

// GetUseSslOk returns a tuple with the UseSsl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SimpleAuthParams) GetUseSslOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UseSsl.Get(), o.UseSsl.IsSet()
}

// HasUseSsl returns a boolean if a field has been set.
func (o *SimpleAuthParams) HasUseSsl() bool {
	if o != nil && o.UseSsl.IsSet() {
		return true
	}

	return false
}

// SetUseSsl gets a reference to the given NullableBool and assigns it to the UseSsl field.
func (o *SimpleAuthParams) SetUseSsl(v bool) {
	o.UseSsl.Set(&v)
}
// SetUseSslNil sets the value for UseSsl to be an explicit nil
func (o *SimpleAuthParams) SetUseSslNil() {
	o.UseSsl.Set(nil)
}

// UnsetUseSsl ensures that no value is present for UseSsl, not even an explicit nil
func (o *SimpleAuthParams) UnsetUseSsl() {
	o.UseSsl.Unset()
}

func (o SimpleAuthParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["userDistinguishedName"] = o.UserDistinguishedName.Get()
	}
	if o.UserPassword.IsSet() {
		toSerialize["userPassword"] = o.UserPassword.Get()
	}
	if o.UseSsl.IsSet() {
		toSerialize["useSsl"] = o.UseSsl.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSimpleAuthParams struct {
	value *SimpleAuthParams
	isSet bool
}

func (v NullableSimpleAuthParams) Get() *SimpleAuthParams {
	return v.value
}

func (v *NullableSimpleAuthParams) Set(val *SimpleAuthParams) {
	v.value = val
	v.isSet = true
}

func (v NullableSimpleAuthParams) IsSet() bool {
	return v.isSet
}

func (v *NullableSimpleAuthParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSimpleAuthParams(val *SimpleAuthParams) *NullableSimpleAuthParams {
	return &NullableSimpleAuthParams{value: val, isSet: true}
}

func (v NullableSimpleAuthParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSimpleAuthParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o SimpleAuthParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}