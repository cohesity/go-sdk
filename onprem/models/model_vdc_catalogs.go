/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// VdcCatalogs Specifies a list of VDC Catalogs.
type VdcCatalogs struct {
	// Specifies a list of VDC Catalogs.
	Catalogs *[]VdcCatalog `json:"catalogs,omitempty"`
}

// NewVdcCatalogs instantiates a new VdcCatalogs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVdcCatalogs() *VdcCatalogs {
	this := VdcCatalogs{}
	return &this
}

// NewVdcCatalogsWithDefaults instantiates a new VdcCatalogs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVdcCatalogsWithDefaults() *VdcCatalogs {
	this := VdcCatalogs{}
	return &this
}

// GetCatalogs returns the Catalogs field value if set, zero value otherwise.
func (o *VdcCatalogs) GetCatalogs() []VdcCatalog {
	if o == nil || o.Catalogs == nil {
		var ret []VdcCatalog
		return ret
	}
	return *o.Catalogs
}

// GetCatalogsOk returns a tuple with the Catalogs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VdcCatalogs) GetCatalogsOk() (*[]VdcCatalog, bool) {
	if o == nil || o.Catalogs == nil {
		return nil, false
	}
	return o.Catalogs, true
}

// HasCatalogs returns a boolean if a field has been set.
func (o *VdcCatalogs) HasCatalogs() bool {
	if o != nil && o.Catalogs != nil {
		return true
	}

	return false
}

// SetCatalogs gets a reference to the given []VdcCatalog and assigns it to the Catalogs field.
func (o *VdcCatalogs) SetCatalogs(v []VdcCatalog) {
	o.Catalogs = &v
}

func (o VdcCatalogs) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Catalogs != nil {
		toSerialize["catalogs"] = o.Catalogs
	}
	return json.Marshal(toSerialize)
}

type NullableVdcCatalogs struct {
	value *VdcCatalogs
	isSet bool
}

func (v NullableVdcCatalogs) Get() *VdcCatalogs {
	return v.value
}

func (v *NullableVdcCatalogs) Set(val *VdcCatalogs) {
	v.value = val
	v.isSet = true
}

func (v NullableVdcCatalogs) IsSet() bool {
	return v.isSet
}

func (v *NullableVdcCatalogs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVdcCatalogs(val *VdcCatalogs) *NullableVdcCatalogs {
	return &NullableVdcCatalogs{value: val, isSet: true}
}

func (v NullableVdcCatalogs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVdcCatalogs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o VdcCatalogs) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}