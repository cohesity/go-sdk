/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// CancelObjectRunsParams Request to cancel object runs.
type CancelObjectRunsParams struct {
	// Specifies object id
	ObjectId NullableInt64 `json:"objectId"`
	// Specifies a list of runs to cancel. If no runs are specified, then all the outstanding runs will be canceled.
	RunsConfig []CancelObjectRunParams `json:"runsConfig,omitempty"`
	// Specifies the protections type on which action to be performed. This is used when an object is protected by multiple protection types. If not specified action will be performed on all protection types.
	SnapshotBackendTypes []string `json:"snapshotBackendTypes,omitempty"`
}

// NewCancelObjectRunsParams instantiates a new CancelObjectRunsParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCancelObjectRunsParams(objectId NullableInt64) *CancelObjectRunsParams {
	this := CancelObjectRunsParams{}
	this.ObjectId = objectId
	return &this
}

// NewCancelObjectRunsParamsWithDefaults instantiates a new CancelObjectRunsParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCancelObjectRunsParamsWithDefaults() *CancelObjectRunsParams {
	this := CancelObjectRunsParams{}
	return &this
}

// GetObjectId returns the ObjectId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *CancelObjectRunsParams) GetObjectId() int64 {
	if o == nil || o.ObjectId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.ObjectId.Get()
}

// GetObjectIdOk returns a tuple with the ObjectId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CancelObjectRunsParams) GetObjectIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ObjectId.Get(), o.ObjectId.IsSet()
}

// SetObjectId sets field value
func (o *CancelObjectRunsParams) SetObjectId(v int64) {
	o.ObjectId.Set(&v)
}

// GetRunsConfig returns the RunsConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CancelObjectRunsParams) GetRunsConfig() []CancelObjectRunParams {
	if o == nil  {
		var ret []CancelObjectRunParams
		return ret
	}
	return o.RunsConfig
}

// GetRunsConfigOk returns a tuple with the RunsConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CancelObjectRunsParams) GetRunsConfigOk() (*[]CancelObjectRunParams, bool) {
	if o == nil || o.RunsConfig == nil {
		return nil, false
	}
	return &o.RunsConfig, true
}

// HasRunsConfig returns a boolean if a field has been set.
func (o *CancelObjectRunsParams) HasRunsConfig() bool {
	if o != nil && o.RunsConfig != nil {
		return true
	}

	return false
}

// SetRunsConfig gets a reference to the given []CancelObjectRunParams and assigns it to the RunsConfig field.
func (o *CancelObjectRunsParams) SetRunsConfig(v []CancelObjectRunParams) {
	o.RunsConfig = v
}

// GetSnapshotBackendTypes returns the SnapshotBackendTypes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CancelObjectRunsParams) GetSnapshotBackendTypes() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.SnapshotBackendTypes
}

// GetSnapshotBackendTypesOk returns a tuple with the SnapshotBackendTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CancelObjectRunsParams) GetSnapshotBackendTypesOk() (*[]string, bool) {
	if o == nil || o.SnapshotBackendTypes == nil {
		return nil, false
	}
	return &o.SnapshotBackendTypes, true
}

// HasSnapshotBackendTypes returns a boolean if a field has been set.
func (o *CancelObjectRunsParams) HasSnapshotBackendTypes() bool {
	if o != nil && o.SnapshotBackendTypes != nil {
		return true
	}

	return false
}

// SetSnapshotBackendTypes gets a reference to the given []string and assigns it to the SnapshotBackendTypes field.
func (o *CancelObjectRunsParams) SetSnapshotBackendTypes(v []string) {
	o.SnapshotBackendTypes = v
}

func (o CancelObjectRunsParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["objectId"] = o.ObjectId.Get()
	}
	if o.RunsConfig != nil {
		toSerialize["runsConfig"] = o.RunsConfig
	}
	if o.SnapshotBackendTypes != nil {
		toSerialize["snapshotBackendTypes"] = o.SnapshotBackendTypes
	}
	return json.Marshal(toSerialize)
}

type NullableCancelObjectRunsParams struct {
	value *CancelObjectRunsParams
	isSet bool
}

func (v NullableCancelObjectRunsParams) Get() *CancelObjectRunsParams {
	return v.value
}

func (v *NullableCancelObjectRunsParams) Set(val *CancelObjectRunsParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCancelObjectRunsParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCancelObjectRunsParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancelObjectRunsParams(val *CancelObjectRunsParams) *NullableCancelObjectRunsParams {
	return &NullableCancelObjectRunsParams{value: val, isSet: true}
}

func (v NullableCancelObjectRunsParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancelObjectRunsParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o CancelObjectRunsParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}