/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// ViewsSummary Get the summary of the Views.
type ViewsSummary struct {
	// Specifies the number of all the views.
	TotalViews NullableInt64 `json:"totalViews,omitempty"`
	// Specifies the number of all protected views.
	ProtectedViews NullableInt64 `json:"protectedViews,omitempty"`
	// Specifies the number of all the views that are replicated out to remote clusters.
	ReplicatedOutViews NullableInt64 `json:"replicatedOutViews,omitempty"`
	// Specifies the number of all the views that are relicated from remote clusters.
	ReplicatedInViews NullableInt64 `json:"replicatedInViews,omitempty"`
	// Specifies the logical usage of all the views in bytes.
	LogicalUsageBytes NullableInt64 `json:"logicalUsageBytes,omitempty"`
	// Specifies the timestamp in micro seconds when 'logicalUsageBytes' was calculated.
	LogicalUsageBytesTimestampUsec NullableInt64 `json:"logicalUsageBytesTimestampUsec,omitempty"`
	// Specifies the storage consumed of all the views in bytes.
	StorageConsumedBytes NullableInt64 `json:"storageConsumedBytes,omitempty"`
	// Specifies the timestamp in micro seconds when 'storageConsumedBytes' was calculated.
	StorageConsumedBytesTimestampUsec NullableInt64 `json:"storageConsumedBytesTimestampUsec,omitempty"`
}

// NewViewsSummary instantiates a new ViewsSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewsSummary() *ViewsSummary {
	this := ViewsSummary{}
	return &this
}

// NewViewsSummaryWithDefaults instantiates a new ViewsSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewsSummaryWithDefaults() *ViewsSummary {
	this := ViewsSummary{}
	return &this
}

// GetTotalViews returns the TotalViews field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewsSummary) GetTotalViews() int64 {
	if o == nil || o.TotalViews.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TotalViews.Get()
}

// GetTotalViewsOk returns a tuple with the TotalViews field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewsSummary) GetTotalViewsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TotalViews.Get(), o.TotalViews.IsSet()
}

// HasTotalViews returns a boolean if a field has been set.
func (o *ViewsSummary) HasTotalViews() bool {
	if o != nil && o.TotalViews.IsSet() {
		return true
	}

	return false
}

// SetTotalViews gets a reference to the given NullableInt64 and assigns it to the TotalViews field.
func (o *ViewsSummary) SetTotalViews(v int64) {
	o.TotalViews.Set(&v)
}
// SetTotalViewsNil sets the value for TotalViews to be an explicit nil
func (o *ViewsSummary) SetTotalViewsNil() {
	o.TotalViews.Set(nil)
}

// UnsetTotalViews ensures that no value is present for TotalViews, not even an explicit nil
func (o *ViewsSummary) UnsetTotalViews() {
	o.TotalViews.Unset()
}

// GetProtectedViews returns the ProtectedViews field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewsSummary) GetProtectedViews() int64 {
	if o == nil || o.ProtectedViews.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ProtectedViews.Get()
}

// GetProtectedViewsOk returns a tuple with the ProtectedViews field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewsSummary) GetProtectedViewsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProtectedViews.Get(), o.ProtectedViews.IsSet()
}

// HasProtectedViews returns a boolean if a field has been set.
func (o *ViewsSummary) HasProtectedViews() bool {
	if o != nil && o.ProtectedViews.IsSet() {
		return true
	}

	return false
}

// SetProtectedViews gets a reference to the given NullableInt64 and assigns it to the ProtectedViews field.
func (o *ViewsSummary) SetProtectedViews(v int64) {
	o.ProtectedViews.Set(&v)
}
// SetProtectedViewsNil sets the value for ProtectedViews to be an explicit nil
func (o *ViewsSummary) SetProtectedViewsNil() {
	o.ProtectedViews.Set(nil)
}

// UnsetProtectedViews ensures that no value is present for ProtectedViews, not even an explicit nil
func (o *ViewsSummary) UnsetProtectedViews() {
	o.ProtectedViews.Unset()
}

// GetReplicatedOutViews returns the ReplicatedOutViews field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewsSummary) GetReplicatedOutViews() int64 {
	if o == nil || o.ReplicatedOutViews.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ReplicatedOutViews.Get()
}

// GetReplicatedOutViewsOk returns a tuple with the ReplicatedOutViews field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewsSummary) GetReplicatedOutViewsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ReplicatedOutViews.Get(), o.ReplicatedOutViews.IsSet()
}

// HasReplicatedOutViews returns a boolean if a field has been set.
func (o *ViewsSummary) HasReplicatedOutViews() bool {
	if o != nil && o.ReplicatedOutViews.IsSet() {
		return true
	}

	return false
}

// SetReplicatedOutViews gets a reference to the given NullableInt64 and assigns it to the ReplicatedOutViews field.
func (o *ViewsSummary) SetReplicatedOutViews(v int64) {
	o.ReplicatedOutViews.Set(&v)
}
// SetReplicatedOutViewsNil sets the value for ReplicatedOutViews to be an explicit nil
func (o *ViewsSummary) SetReplicatedOutViewsNil() {
	o.ReplicatedOutViews.Set(nil)
}

// UnsetReplicatedOutViews ensures that no value is present for ReplicatedOutViews, not even an explicit nil
func (o *ViewsSummary) UnsetReplicatedOutViews() {
	o.ReplicatedOutViews.Unset()
}

// GetReplicatedInViews returns the ReplicatedInViews field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewsSummary) GetReplicatedInViews() int64 {
	if o == nil || o.ReplicatedInViews.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ReplicatedInViews.Get()
}

// GetReplicatedInViewsOk returns a tuple with the ReplicatedInViews field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewsSummary) GetReplicatedInViewsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ReplicatedInViews.Get(), o.ReplicatedInViews.IsSet()
}

// HasReplicatedInViews returns a boolean if a field has been set.
func (o *ViewsSummary) HasReplicatedInViews() bool {
	if o != nil && o.ReplicatedInViews.IsSet() {
		return true
	}

	return false
}

// SetReplicatedInViews gets a reference to the given NullableInt64 and assigns it to the ReplicatedInViews field.
func (o *ViewsSummary) SetReplicatedInViews(v int64) {
	o.ReplicatedInViews.Set(&v)
}
// SetReplicatedInViewsNil sets the value for ReplicatedInViews to be an explicit nil
func (o *ViewsSummary) SetReplicatedInViewsNil() {
	o.ReplicatedInViews.Set(nil)
}

// UnsetReplicatedInViews ensures that no value is present for ReplicatedInViews, not even an explicit nil
func (o *ViewsSummary) UnsetReplicatedInViews() {
	o.ReplicatedInViews.Unset()
}

// GetLogicalUsageBytes returns the LogicalUsageBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewsSummary) GetLogicalUsageBytes() int64 {
	if o == nil || o.LogicalUsageBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LogicalUsageBytes.Get()
}

// GetLogicalUsageBytesOk returns a tuple with the LogicalUsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewsSummary) GetLogicalUsageBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogicalUsageBytes.Get(), o.LogicalUsageBytes.IsSet()
}

// HasLogicalUsageBytes returns a boolean if a field has been set.
func (o *ViewsSummary) HasLogicalUsageBytes() bool {
	if o != nil && o.LogicalUsageBytes.IsSet() {
		return true
	}

	return false
}

// SetLogicalUsageBytes gets a reference to the given NullableInt64 and assigns it to the LogicalUsageBytes field.
func (o *ViewsSummary) SetLogicalUsageBytes(v int64) {
	o.LogicalUsageBytes.Set(&v)
}
// SetLogicalUsageBytesNil sets the value for LogicalUsageBytes to be an explicit nil
func (o *ViewsSummary) SetLogicalUsageBytesNil() {
	o.LogicalUsageBytes.Set(nil)
}

// UnsetLogicalUsageBytes ensures that no value is present for LogicalUsageBytes, not even an explicit nil
func (o *ViewsSummary) UnsetLogicalUsageBytes() {
	o.LogicalUsageBytes.Unset()
}

// GetLogicalUsageBytesTimestampUsec returns the LogicalUsageBytesTimestampUsec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewsSummary) GetLogicalUsageBytesTimestampUsec() int64 {
	if o == nil || o.LogicalUsageBytesTimestampUsec.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LogicalUsageBytesTimestampUsec.Get()
}

// GetLogicalUsageBytesTimestampUsecOk returns a tuple with the LogicalUsageBytesTimestampUsec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewsSummary) GetLogicalUsageBytesTimestampUsecOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogicalUsageBytesTimestampUsec.Get(), o.LogicalUsageBytesTimestampUsec.IsSet()
}

// HasLogicalUsageBytesTimestampUsec returns a boolean if a field has been set.
func (o *ViewsSummary) HasLogicalUsageBytesTimestampUsec() bool {
	if o != nil && o.LogicalUsageBytesTimestampUsec.IsSet() {
		return true
	}

	return false
}

// SetLogicalUsageBytesTimestampUsec gets a reference to the given NullableInt64 and assigns it to the LogicalUsageBytesTimestampUsec field.
func (o *ViewsSummary) SetLogicalUsageBytesTimestampUsec(v int64) {
	o.LogicalUsageBytesTimestampUsec.Set(&v)
}
// SetLogicalUsageBytesTimestampUsecNil sets the value for LogicalUsageBytesTimestampUsec to be an explicit nil
func (o *ViewsSummary) SetLogicalUsageBytesTimestampUsecNil() {
	o.LogicalUsageBytesTimestampUsec.Set(nil)
}

// UnsetLogicalUsageBytesTimestampUsec ensures that no value is present for LogicalUsageBytesTimestampUsec, not even an explicit nil
func (o *ViewsSummary) UnsetLogicalUsageBytesTimestampUsec() {
	o.LogicalUsageBytesTimestampUsec.Unset()
}

// GetStorageConsumedBytes returns the StorageConsumedBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewsSummary) GetStorageConsumedBytes() int64 {
	if o == nil || o.StorageConsumedBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.StorageConsumedBytes.Get()
}

// GetStorageConsumedBytesOk returns a tuple with the StorageConsumedBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewsSummary) GetStorageConsumedBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageConsumedBytes.Get(), o.StorageConsumedBytes.IsSet()
}

// HasStorageConsumedBytes returns a boolean if a field has been set.
func (o *ViewsSummary) HasStorageConsumedBytes() bool {
	if o != nil && o.StorageConsumedBytes.IsSet() {
		return true
	}

	return false
}

// SetStorageConsumedBytes gets a reference to the given NullableInt64 and assigns it to the StorageConsumedBytes field.
func (o *ViewsSummary) SetStorageConsumedBytes(v int64) {
	o.StorageConsumedBytes.Set(&v)
}
// SetStorageConsumedBytesNil sets the value for StorageConsumedBytes to be an explicit nil
func (o *ViewsSummary) SetStorageConsumedBytesNil() {
	o.StorageConsumedBytes.Set(nil)
}

// UnsetStorageConsumedBytes ensures that no value is present for StorageConsumedBytes, not even an explicit nil
func (o *ViewsSummary) UnsetStorageConsumedBytes() {
	o.StorageConsumedBytes.Unset()
}

// GetStorageConsumedBytesTimestampUsec returns the StorageConsumedBytesTimestampUsec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewsSummary) GetStorageConsumedBytesTimestampUsec() int64 {
	if o == nil || o.StorageConsumedBytesTimestampUsec.Get() == nil {
		var ret int64
		return ret
	}
	return *o.StorageConsumedBytesTimestampUsec.Get()
}

// GetStorageConsumedBytesTimestampUsecOk returns a tuple with the StorageConsumedBytesTimestampUsec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewsSummary) GetStorageConsumedBytesTimestampUsecOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageConsumedBytesTimestampUsec.Get(), o.StorageConsumedBytesTimestampUsec.IsSet()
}

// HasStorageConsumedBytesTimestampUsec returns a boolean if a field has been set.
func (o *ViewsSummary) HasStorageConsumedBytesTimestampUsec() bool {
	if o != nil && o.StorageConsumedBytesTimestampUsec.IsSet() {
		return true
	}

	return false
}

// SetStorageConsumedBytesTimestampUsec gets a reference to the given NullableInt64 and assigns it to the StorageConsumedBytesTimestampUsec field.
func (o *ViewsSummary) SetStorageConsumedBytesTimestampUsec(v int64) {
	o.StorageConsumedBytesTimestampUsec.Set(&v)
}
// SetStorageConsumedBytesTimestampUsecNil sets the value for StorageConsumedBytesTimestampUsec to be an explicit nil
func (o *ViewsSummary) SetStorageConsumedBytesTimestampUsecNil() {
	o.StorageConsumedBytesTimestampUsec.Set(nil)
}

// UnsetStorageConsumedBytesTimestampUsec ensures that no value is present for StorageConsumedBytesTimestampUsec, not even an explicit nil
func (o *ViewsSummary) UnsetStorageConsumedBytesTimestampUsec() {
	o.StorageConsumedBytesTimestampUsec.Unset()
}

func (o ViewsSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TotalViews.IsSet() {
		toSerialize["totalViews"] = o.TotalViews.Get()
	}
	if o.ProtectedViews.IsSet() {
		toSerialize["protectedViews"] = o.ProtectedViews.Get()
	}
	if o.ReplicatedOutViews.IsSet() {
		toSerialize["replicatedOutViews"] = o.ReplicatedOutViews.Get()
	}
	if o.ReplicatedInViews.IsSet() {
		toSerialize["replicatedInViews"] = o.ReplicatedInViews.Get()
	}
	if o.LogicalUsageBytes.IsSet() {
		toSerialize["logicalUsageBytes"] = o.LogicalUsageBytes.Get()
	}
	if o.LogicalUsageBytesTimestampUsec.IsSet() {
		toSerialize["logicalUsageBytesTimestampUsec"] = o.LogicalUsageBytesTimestampUsec.Get()
	}
	if o.StorageConsumedBytes.IsSet() {
		toSerialize["storageConsumedBytes"] = o.StorageConsumedBytes.Get()
	}
	if o.StorageConsumedBytesTimestampUsec.IsSet() {
		toSerialize["storageConsumedBytesTimestampUsec"] = o.StorageConsumedBytesTimestampUsec.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableViewsSummary struct {
	value *ViewsSummary
	isSet bool
}

func (v NullableViewsSummary) Get() *ViewsSummary {
	return v.value
}

func (v *NullableViewsSummary) Set(val *ViewsSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableViewsSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableViewsSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewsSummary(val *ViewsSummary) *NullableViewsSummary {
	return &NullableViewsSummary{value: val, isSet: true}
}

func (v NullableViewsSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewsSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o ViewsSummary) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}