/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// ListTrustedCasResult Specifies the basic info about CA Root Certificate.
type ListTrustedCasResult struct {
	// Array of trusted certificates. Specifies the list of certificates returned in this response. List is not sorted.
	Certificates []TrustedCa `json:"certificates,omitempty"`
}

// NewListTrustedCasResult instantiates a new ListTrustedCasResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListTrustedCasResult() *ListTrustedCasResult {
	this := ListTrustedCasResult{}
	return &this
}

// NewListTrustedCasResultWithDefaults instantiates a new ListTrustedCasResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListTrustedCasResultWithDefaults() *ListTrustedCasResult {
	this := ListTrustedCasResult{}
	return &this
}

// GetCertificates returns the Certificates field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ListTrustedCasResult) GetCertificates() []TrustedCa {
	if o == nil  {
		var ret []TrustedCa
		return ret
	}
	return o.Certificates
}

// GetCertificatesOk returns a tuple with the Certificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ListTrustedCasResult) GetCertificatesOk() (*[]TrustedCa, bool) {
	if o == nil || o.Certificates == nil {
		return nil, false
	}
	return &o.Certificates, true
}

// HasCertificates returns a boolean if a field has been set.
func (o *ListTrustedCasResult) HasCertificates() bool {
	if o != nil && o.Certificates != nil {
		return true
	}

	return false
}

// SetCertificates gets a reference to the given []TrustedCa and assigns it to the Certificates field.
func (o *ListTrustedCasResult) SetCertificates(v []TrustedCa) {
	o.Certificates = v
}

func (o ListTrustedCasResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Certificates != nil {
		toSerialize["certificates"] = o.Certificates
	}
	return json.Marshal(toSerialize)
}

type NullableListTrustedCasResult struct {
	value *ListTrustedCasResult
	isSet bool
}

func (v NullableListTrustedCasResult) Get() *ListTrustedCasResult {
	return v.value
}

func (v *NullableListTrustedCasResult) Set(val *ListTrustedCasResult) {
	v.value = val
	v.isSet = true
}

func (v NullableListTrustedCasResult) IsSet() bool {
	return v.isSet
}

func (v *NullableListTrustedCasResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListTrustedCasResult(val *ListTrustedCasResult) *NullableListTrustedCasResult {
	return &NullableListTrustedCasResult{value: val, isSet: true}
}

func (v NullableListTrustedCasResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListTrustedCasResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o ListTrustedCasResult) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}