/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// RemoteAdapterHostAllOf struct for RemoteAdapterHostAllOf
type RemoteAdapterHostAllOf struct {
	IncrementalBackupScript *CommonPreBackupScriptParams `json:"incrementalBackupScript,omitempty"`
	FullBackupScript *CommonPreBackupScriptParams `json:"fullBackupScript,omitempty"`
	LogBackupScript *CommonPreBackupScriptParams `json:"logBackupScript,omitempty"`
}

// NewRemoteAdapterHostAllOf instantiates a new RemoteAdapterHostAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteAdapterHostAllOf() *RemoteAdapterHostAllOf {
	this := RemoteAdapterHostAllOf{}
	return &this
}

// NewRemoteAdapterHostAllOfWithDefaults instantiates a new RemoteAdapterHostAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteAdapterHostAllOfWithDefaults() *RemoteAdapterHostAllOf {
	this := RemoteAdapterHostAllOf{}
	return &this
}

// GetIncrementalBackupScript returns the IncrementalBackupScript field value if set, zero value otherwise.
func (o *RemoteAdapterHostAllOf) GetIncrementalBackupScript() CommonPreBackupScriptParams {
	if o == nil || o.IncrementalBackupScript == nil {
		var ret CommonPreBackupScriptParams
		return ret
	}
	return *o.IncrementalBackupScript
}

// GetIncrementalBackupScriptOk returns a tuple with the IncrementalBackupScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteAdapterHostAllOf) GetIncrementalBackupScriptOk() (*CommonPreBackupScriptParams, bool) {
	if o == nil || o.IncrementalBackupScript == nil {
		return nil, false
	}
	return o.IncrementalBackupScript, true
}

// HasIncrementalBackupScript returns a boolean if a field has been set.
func (o *RemoteAdapterHostAllOf) HasIncrementalBackupScript() bool {
	if o != nil && o.IncrementalBackupScript != nil {
		return true
	}

	return false
}

// SetIncrementalBackupScript gets a reference to the given CommonPreBackupScriptParams and assigns it to the IncrementalBackupScript field.
func (o *RemoteAdapterHostAllOf) SetIncrementalBackupScript(v CommonPreBackupScriptParams) {
	o.IncrementalBackupScript = &v
}

// GetFullBackupScript returns the FullBackupScript field value if set, zero value otherwise.
func (o *RemoteAdapterHostAllOf) GetFullBackupScript() CommonPreBackupScriptParams {
	if o == nil || o.FullBackupScript == nil {
		var ret CommonPreBackupScriptParams
		return ret
	}
	return *o.FullBackupScript
}

// GetFullBackupScriptOk returns a tuple with the FullBackupScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteAdapterHostAllOf) GetFullBackupScriptOk() (*CommonPreBackupScriptParams, bool) {
	if o == nil || o.FullBackupScript == nil {
		return nil, false
	}
	return o.FullBackupScript, true
}

// HasFullBackupScript returns a boolean if a field has been set.
func (o *RemoteAdapterHostAllOf) HasFullBackupScript() bool {
	if o != nil && o.FullBackupScript != nil {
		return true
	}

	return false
}

// SetFullBackupScript gets a reference to the given CommonPreBackupScriptParams and assigns it to the FullBackupScript field.
func (o *RemoteAdapterHostAllOf) SetFullBackupScript(v CommonPreBackupScriptParams) {
	o.FullBackupScript = &v
}

// GetLogBackupScript returns the LogBackupScript field value if set, zero value otherwise.
func (o *RemoteAdapterHostAllOf) GetLogBackupScript() CommonPreBackupScriptParams {
	if o == nil || o.LogBackupScript == nil {
		var ret CommonPreBackupScriptParams
		return ret
	}
	return *o.LogBackupScript
}

// GetLogBackupScriptOk returns a tuple with the LogBackupScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteAdapterHostAllOf) GetLogBackupScriptOk() (*CommonPreBackupScriptParams, bool) {
	if o == nil || o.LogBackupScript == nil {
		return nil, false
	}
	return o.LogBackupScript, true
}

// HasLogBackupScript returns a boolean if a field has been set.
func (o *RemoteAdapterHostAllOf) HasLogBackupScript() bool {
	if o != nil && o.LogBackupScript != nil {
		return true
	}

	return false
}

// SetLogBackupScript gets a reference to the given CommonPreBackupScriptParams and assigns it to the LogBackupScript field.
func (o *RemoteAdapterHostAllOf) SetLogBackupScript(v CommonPreBackupScriptParams) {
	o.LogBackupScript = &v
}

func (o RemoteAdapterHostAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IncrementalBackupScript != nil {
		toSerialize["incrementalBackupScript"] = o.IncrementalBackupScript
	}
	if o.FullBackupScript != nil {
		toSerialize["fullBackupScript"] = o.FullBackupScript
	}
	if o.LogBackupScript != nil {
		toSerialize["logBackupScript"] = o.LogBackupScript
	}
	return json.Marshal(toSerialize)
}

type NullableRemoteAdapterHostAllOf struct {
	value *RemoteAdapterHostAllOf
	isSet bool
}

func (v NullableRemoteAdapterHostAllOf) Get() *RemoteAdapterHostAllOf {
	return v.value
}

func (v *NullableRemoteAdapterHostAllOf) Set(val *RemoteAdapterHostAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteAdapterHostAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteAdapterHostAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteAdapterHostAllOf(val *RemoteAdapterHostAllOf) *NullableRemoteAdapterHostAllOf {
	return &NullableRemoteAdapterHostAllOf{value: val, isSet: true}
}

func (v NullableRemoteAdapterHostAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteAdapterHostAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o RemoteAdapterHostAllOf) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}