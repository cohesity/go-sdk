/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// TenantDmaasCert Specifies the parameters to of a tenant certificate.
type TenantDmaasCert struct {
	// The id of the tenant.
	TenantId NullableString `json:"tenantId,omitempty"`
	// Specifies the tenant certificate.
	Certificate NullableString `json:"certificate,omitempty"`
	// Specifies the tenant private key.
	PrivateKey NullableString `json:"privateKey,omitempty"`
	// Specifies the CA chain that is used to sign the connector certificate.
	ConnectorCaChain NullableString `json:"connectorCaChain,omitempty"`
	// Specifies the passphrase used to encode the private key.
	Passphrase NullableString `json:"passphrase,omitempty"`
}

// NewTenantDmaasCert instantiates a new TenantDmaasCert object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantDmaasCert() *TenantDmaasCert {
	this := TenantDmaasCert{}
	return &this
}

// NewTenantDmaasCertWithDefaults instantiates a new TenantDmaasCert object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantDmaasCertWithDefaults() *TenantDmaasCert {
	this := TenantDmaasCert{}
	return &this
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantDmaasCert) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantDmaasCert) GetTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *TenantDmaasCert) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *TenantDmaasCert) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *TenantDmaasCert) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *TenantDmaasCert) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetCertificate returns the Certificate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantDmaasCert) GetCertificate() string {
	if o == nil || o.Certificate.Get() == nil {
		var ret string
		return ret
	}
	return *o.Certificate.Get()
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantDmaasCert) GetCertificateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Certificate.Get(), o.Certificate.IsSet()
}

// HasCertificate returns a boolean if a field has been set.
func (o *TenantDmaasCert) HasCertificate() bool {
	if o != nil && o.Certificate.IsSet() {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given NullableString and assigns it to the Certificate field.
func (o *TenantDmaasCert) SetCertificate(v string) {
	o.Certificate.Set(&v)
}
// SetCertificateNil sets the value for Certificate to be an explicit nil
func (o *TenantDmaasCert) SetCertificateNil() {
	o.Certificate.Set(nil)
}

// UnsetCertificate ensures that no value is present for Certificate, not even an explicit nil
func (o *TenantDmaasCert) UnsetCertificate() {
	o.Certificate.Unset()
}

// GetPrivateKey returns the PrivateKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantDmaasCert) GetPrivateKey() string {
	if o == nil || o.PrivateKey.Get() == nil {
		var ret string
		return ret
	}
	return *o.PrivateKey.Get()
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantDmaasCert) GetPrivateKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PrivateKey.Get(), o.PrivateKey.IsSet()
}

// HasPrivateKey returns a boolean if a field has been set.
func (o *TenantDmaasCert) HasPrivateKey() bool {
	if o != nil && o.PrivateKey.IsSet() {
		return true
	}

	return false
}

// SetPrivateKey gets a reference to the given NullableString and assigns it to the PrivateKey field.
func (o *TenantDmaasCert) SetPrivateKey(v string) {
	o.PrivateKey.Set(&v)
}
// SetPrivateKeyNil sets the value for PrivateKey to be an explicit nil
func (o *TenantDmaasCert) SetPrivateKeyNil() {
	o.PrivateKey.Set(nil)
}

// UnsetPrivateKey ensures that no value is present for PrivateKey, not even an explicit nil
func (o *TenantDmaasCert) UnsetPrivateKey() {
	o.PrivateKey.Unset()
}

// GetConnectorCaChain returns the ConnectorCaChain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantDmaasCert) GetConnectorCaChain() string {
	if o == nil || o.ConnectorCaChain.Get() == nil {
		var ret string
		return ret
	}
	return *o.ConnectorCaChain.Get()
}

// GetConnectorCaChainOk returns a tuple with the ConnectorCaChain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantDmaasCert) GetConnectorCaChainOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ConnectorCaChain.Get(), o.ConnectorCaChain.IsSet()
}

// HasConnectorCaChain returns a boolean if a field has been set.
func (o *TenantDmaasCert) HasConnectorCaChain() bool {
	if o != nil && o.ConnectorCaChain.IsSet() {
		return true
	}

	return false
}

// SetConnectorCaChain gets a reference to the given NullableString and assigns it to the ConnectorCaChain field.
func (o *TenantDmaasCert) SetConnectorCaChain(v string) {
	o.ConnectorCaChain.Set(&v)
}
// SetConnectorCaChainNil sets the value for ConnectorCaChain to be an explicit nil
func (o *TenantDmaasCert) SetConnectorCaChainNil() {
	o.ConnectorCaChain.Set(nil)
}

// UnsetConnectorCaChain ensures that no value is present for ConnectorCaChain, not even an explicit nil
func (o *TenantDmaasCert) UnsetConnectorCaChain() {
	o.ConnectorCaChain.Unset()
}

// GetPassphrase returns the Passphrase field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantDmaasCert) GetPassphrase() string {
	if o == nil || o.Passphrase.Get() == nil {
		var ret string
		return ret
	}
	return *o.Passphrase.Get()
}

// GetPassphraseOk returns a tuple with the Passphrase field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantDmaasCert) GetPassphraseOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Passphrase.Get(), o.Passphrase.IsSet()
}

// HasPassphrase returns a boolean if a field has been set.
func (o *TenantDmaasCert) HasPassphrase() bool {
	if o != nil && o.Passphrase.IsSet() {
		return true
	}

	return false
}

// SetPassphrase gets a reference to the given NullableString and assigns it to the Passphrase field.
func (o *TenantDmaasCert) SetPassphrase(v string) {
	o.Passphrase.Set(&v)
}
// SetPassphraseNil sets the value for Passphrase to be an explicit nil
func (o *TenantDmaasCert) SetPassphraseNil() {
	o.Passphrase.Set(nil)
}

// UnsetPassphrase ensures that no value is present for Passphrase, not even an explicit nil
func (o *TenantDmaasCert) UnsetPassphrase() {
	o.Passphrase.Unset()
}

func (o TenantDmaasCert) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.Certificate.IsSet() {
		toSerialize["certificate"] = o.Certificate.Get()
	}
	if o.PrivateKey.IsSet() {
		toSerialize["privateKey"] = o.PrivateKey.Get()
	}
	if o.ConnectorCaChain.IsSet() {
		toSerialize["connectorCaChain"] = o.ConnectorCaChain.Get()
	}
	if o.Passphrase.IsSet() {
		toSerialize["passphrase"] = o.Passphrase.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableTenantDmaasCert struct {
	value *TenantDmaasCert
	isSet bool
}

func (v NullableTenantDmaasCert) Get() *TenantDmaasCert {
	return v.value
}

func (v *NullableTenantDmaasCert) Set(val *TenantDmaasCert) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantDmaasCert) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantDmaasCert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantDmaasCert(val *TenantDmaasCert) *NullableTenantDmaasCert {
	return &NullableTenantDmaasCert{value: val, isSet: true}
}

func (v NullableTenantDmaasCert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantDmaasCert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o TenantDmaasCert) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}