/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// ProjectScopeParams Specifies the parameters for project type scope.
type ProjectScopeParams struct {
	// Specifies the project name.
	ProjectName NullableString `json:"projectName"`
	// Specifies the domain name of the project.
	DomainName NullableString `json:"domainName"`
}

// NewProjectScopeParams instantiates a new ProjectScopeParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectScopeParams(projectName NullableString, domainName NullableString) *ProjectScopeParams {
	this := ProjectScopeParams{}
	this.ProjectName = projectName
	this.DomainName = domainName
	return &this
}

// NewProjectScopeParamsWithDefaults instantiates a new ProjectScopeParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectScopeParamsWithDefaults() *ProjectScopeParams {
	this := ProjectScopeParams{}
	return &this
}

// GetProjectName returns the ProjectName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ProjectScopeParams) GetProjectName() string {
	if o == nil || o.ProjectName.Get() == nil {
		var ret string
		return ret
	}

	return *o.ProjectName.Get()
}

// GetProjectNameOk returns a tuple with the ProjectName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectScopeParams) GetProjectNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProjectName.Get(), o.ProjectName.IsSet()
}

// SetProjectName sets field value
func (o *ProjectScopeParams) SetProjectName(v string) {
	o.ProjectName.Set(&v)
}

// GetDomainName returns the DomainName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ProjectScopeParams) GetDomainName() string {
	if o == nil || o.DomainName.Get() == nil {
		var ret string
		return ret
	}

	return *o.DomainName.Get()
}

// GetDomainNameOk returns a tuple with the DomainName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectScopeParams) GetDomainNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DomainName.Get(), o.DomainName.IsSet()
}

// SetDomainName sets field value
func (o *ProjectScopeParams) SetDomainName(v string) {
	o.DomainName.Set(&v)
}

func (o ProjectScopeParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["projectName"] = o.ProjectName.Get()
	}
	if true {
		toSerialize["domainName"] = o.DomainName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableProjectScopeParams struct {
	value *ProjectScopeParams
	isSet bool
}

func (v NullableProjectScopeParams) Get() *ProjectScopeParams {
	return v.value
}

func (v *NullableProjectScopeParams) Set(val *ProjectScopeParams) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectScopeParams) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectScopeParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectScopeParams(val *ProjectScopeParams) *NullableProjectScopeParams {
	return &NullableProjectScopeParams{value: val, isSet: true}
}

func (v NullableProjectScopeParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectScopeParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o ProjectScopeParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}