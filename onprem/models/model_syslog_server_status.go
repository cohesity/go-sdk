/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// SyslogServerStatus Remote system logging server.
type SyslogServerStatus struct {
	// The id of the syslog server.
	Id NullableInt32 `json:"id,omitempty"`
	// Specify if the syslog server is reachable or not.
	IsReachable NullableBool `json:"isReachable,omitempty"`
	// Description for current status.
	Message NullableString `json:"message,omitempty"`
}

// NewSyslogServerStatus instantiates a new SyslogServerStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyslogServerStatus() *SyslogServerStatus {
	this := SyslogServerStatus{}
	return &this
}

// NewSyslogServerStatusWithDefaults instantiates a new SyslogServerStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyslogServerStatusWithDefaults() *SyslogServerStatus {
	this := SyslogServerStatus{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SyslogServerStatus) GetId() int32 {
	if o == nil || o.Id.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SyslogServerStatus) GetIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *SyslogServerStatus) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt32 and assigns it to the Id field.
func (o *SyslogServerStatus) SetId(v int32) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *SyslogServerStatus) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *SyslogServerStatus) UnsetId() {
	o.Id.Unset()
}

// GetIsReachable returns the IsReachable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SyslogServerStatus) GetIsReachable() bool {
	if o == nil || o.IsReachable.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsReachable.Get()
}

// GetIsReachableOk returns a tuple with the IsReachable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SyslogServerStatus) GetIsReachableOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsReachable.Get(), o.IsReachable.IsSet()
}

// HasIsReachable returns a boolean if a field has been set.
func (o *SyslogServerStatus) HasIsReachable() bool {
	if o != nil && o.IsReachable.IsSet() {
		return true
	}

	return false
}

// SetIsReachable gets a reference to the given NullableBool and assigns it to the IsReachable field.
func (o *SyslogServerStatus) SetIsReachable(v bool) {
	o.IsReachable.Set(&v)
}
// SetIsReachableNil sets the value for IsReachable to be an explicit nil
func (o *SyslogServerStatus) SetIsReachableNil() {
	o.IsReachable.Set(nil)
}

// UnsetIsReachable ensures that no value is present for IsReachable, not even an explicit nil
func (o *SyslogServerStatus) UnsetIsReachable() {
	o.IsReachable.Unset()
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SyslogServerStatus) GetMessage() string {
	if o == nil || o.Message.Get() == nil {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SyslogServerStatus) GetMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *SyslogServerStatus) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *SyslogServerStatus) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *SyslogServerStatus) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *SyslogServerStatus) UnsetMessage() {
	o.Message.Unset()
}

func (o SyslogServerStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.IsReachable.IsSet() {
		toSerialize["isReachable"] = o.IsReachable.Get()
	}
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSyslogServerStatus struct {
	value *SyslogServerStatus
	isSet bool
}

func (v NullableSyslogServerStatus) Get() *SyslogServerStatus {
	return v.value
}

func (v *NullableSyslogServerStatus) Set(val *SyslogServerStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSyslogServerStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSyslogServerStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyslogServerStatus(val *SyslogServerStatus) *NullableSyslogServerStatus {
	return &NullableSyslogServerStatus{value: val, isSet: true}
}

func (v NullableSyslogServerStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyslogServerStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o SyslogServerStatus) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}