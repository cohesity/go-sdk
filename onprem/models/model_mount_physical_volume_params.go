/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// MountPhysicalVolumeParams Specifies the parameters to Mount Physical Volumes.
type MountPhysicalVolumeParams struct {
	// Specifies the environment of the recovery target. The corresponding params below must be filled out.
	TargetEnvironment string `json:"targetEnvironment"`
	// Specifies the params for recovering to a physical target.
	PhysicalTargetParams NullablePhysicalTargetParamsForMountVolume `json:"physicalTargetParams,omitempty"`
}

// NewMountPhysicalVolumeParams instantiates a new MountPhysicalVolumeParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMountPhysicalVolumeParams(targetEnvironment string) *MountPhysicalVolumeParams {
	this := MountPhysicalVolumeParams{}
	this.TargetEnvironment = targetEnvironment
	return &this
}

// NewMountPhysicalVolumeParamsWithDefaults instantiates a new MountPhysicalVolumeParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMountPhysicalVolumeParamsWithDefaults() *MountPhysicalVolumeParams {
	this := MountPhysicalVolumeParams{}
	return &this
}

// GetTargetEnvironment returns the TargetEnvironment field value
func (o *MountPhysicalVolumeParams) GetTargetEnvironment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetEnvironment
}

// GetTargetEnvironmentOk returns a tuple with the TargetEnvironment field value
// and a boolean to check if the value has been set.
func (o *MountPhysicalVolumeParams) GetTargetEnvironmentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TargetEnvironment, true
}

// SetTargetEnvironment sets field value
func (o *MountPhysicalVolumeParams) SetTargetEnvironment(v string) {
	o.TargetEnvironment = v
}

// GetPhysicalTargetParams returns the PhysicalTargetParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MountPhysicalVolumeParams) GetPhysicalTargetParams() PhysicalTargetParamsForMountVolume {
	if o == nil || o.PhysicalTargetParams.Get() == nil {
		var ret PhysicalTargetParamsForMountVolume
		return ret
	}
	return *o.PhysicalTargetParams.Get()
}

// GetPhysicalTargetParamsOk returns a tuple with the PhysicalTargetParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MountPhysicalVolumeParams) GetPhysicalTargetParamsOk() (*PhysicalTargetParamsForMountVolume, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PhysicalTargetParams.Get(), o.PhysicalTargetParams.IsSet()
}

// HasPhysicalTargetParams returns a boolean if a field has been set.
func (o *MountPhysicalVolumeParams) HasPhysicalTargetParams() bool {
	if o != nil && o.PhysicalTargetParams.IsSet() {
		return true
	}

	return false
}

// SetPhysicalTargetParams gets a reference to the given NullablePhysicalTargetParamsForMountVolume and assigns it to the PhysicalTargetParams field.
func (o *MountPhysicalVolumeParams) SetPhysicalTargetParams(v PhysicalTargetParamsForMountVolume) {
	o.PhysicalTargetParams.Set(&v)
}
// SetPhysicalTargetParamsNil sets the value for PhysicalTargetParams to be an explicit nil
func (o *MountPhysicalVolumeParams) SetPhysicalTargetParamsNil() {
	o.PhysicalTargetParams.Set(nil)
}

// UnsetPhysicalTargetParams ensures that no value is present for PhysicalTargetParams, not even an explicit nil
func (o *MountPhysicalVolumeParams) UnsetPhysicalTargetParams() {
	o.PhysicalTargetParams.Unset()
}

func (o MountPhysicalVolumeParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["targetEnvironment"] = o.TargetEnvironment
	}
	if o.PhysicalTargetParams.IsSet() {
		toSerialize["physicalTargetParams"] = o.PhysicalTargetParams.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMountPhysicalVolumeParams struct {
	value *MountPhysicalVolumeParams
	isSet bool
}

func (v NullableMountPhysicalVolumeParams) Get() *MountPhysicalVolumeParams {
	return v.value
}

func (v *NullableMountPhysicalVolumeParams) Set(val *MountPhysicalVolumeParams) {
	v.value = val
	v.isSet = true
}

func (v NullableMountPhysicalVolumeParams) IsSet() bool {
	return v.isSet
}

func (v *NullableMountPhysicalVolumeParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMountPhysicalVolumeParams(val *MountPhysicalVolumeParams) *NullableMountPhysicalVolumeParams {
	return &NullableMountPhysicalVolumeParams{value: val, isSet: true}
}

func (v NullableMountPhysicalVolumeParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMountPhysicalVolumeParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o MountPhysicalVolumeParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}