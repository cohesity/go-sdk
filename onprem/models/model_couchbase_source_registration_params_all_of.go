/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// CouchbaseSourceRegistrationParamsAllOf struct for CouchbaseSourceRegistrationParamsAllOf
type CouchbaseSourceRegistrationParamsAllOf struct {
	// Specifies the IP Addresses or hostnames of the Couchbase cluster seed nodes.
	Seeds []string `json:"seeds"`
	// Set to true if connection to couchbase has to be using SSL.
	IsSslRequired NullableBool `json:"isSslRequired"`
	// HTTP direct or HTTP SSL port.
	HttpPort NullableInt32 `json:"httpPort"`
	// Carrier direct or Carrier SSL port.
	CarrierPort NullableInt32 `json:"carrierPort"`
}

// NewCouchbaseSourceRegistrationParamsAllOf instantiates a new CouchbaseSourceRegistrationParamsAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCouchbaseSourceRegistrationParamsAllOf(seeds []string, isSslRequired NullableBool, httpPort NullableInt32, carrierPort NullableInt32) *CouchbaseSourceRegistrationParamsAllOf {
	this := CouchbaseSourceRegistrationParamsAllOf{}
	this.Seeds = seeds
	this.IsSslRequired = isSslRequired
	this.HttpPort = httpPort
	this.CarrierPort = carrierPort
	return &this
}

// NewCouchbaseSourceRegistrationParamsAllOfWithDefaults instantiates a new CouchbaseSourceRegistrationParamsAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCouchbaseSourceRegistrationParamsAllOfWithDefaults() *CouchbaseSourceRegistrationParamsAllOf {
	this := CouchbaseSourceRegistrationParamsAllOf{}
	return &this
}

// GetSeeds returns the Seeds field value
func (o *CouchbaseSourceRegistrationParamsAllOf) GetSeeds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Seeds
}

// GetSeedsOk returns a tuple with the Seeds field value
// and a boolean to check if the value has been set.
func (o *CouchbaseSourceRegistrationParamsAllOf) GetSeedsOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Seeds, true
}

// SetSeeds sets field value
func (o *CouchbaseSourceRegistrationParamsAllOf) SetSeeds(v []string) {
	o.Seeds = v
}

// GetIsSslRequired returns the IsSslRequired field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *CouchbaseSourceRegistrationParamsAllOf) GetIsSslRequired() bool {
	if o == nil || o.IsSslRequired.Get() == nil {
		var ret bool
		return ret
	}

	return *o.IsSslRequired.Get()
}

// GetIsSslRequiredOk returns a tuple with the IsSslRequired field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CouchbaseSourceRegistrationParamsAllOf) GetIsSslRequiredOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsSslRequired.Get(), o.IsSslRequired.IsSet()
}

// SetIsSslRequired sets field value
func (o *CouchbaseSourceRegistrationParamsAllOf) SetIsSslRequired(v bool) {
	o.IsSslRequired.Set(&v)
}

// GetHttpPort returns the HttpPort field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *CouchbaseSourceRegistrationParamsAllOf) GetHttpPort() int32 {
	if o == nil || o.HttpPort.Get() == nil {
		var ret int32
		return ret
	}

	return *o.HttpPort.Get()
}

// GetHttpPortOk returns a tuple with the HttpPort field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CouchbaseSourceRegistrationParamsAllOf) GetHttpPortOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HttpPort.Get(), o.HttpPort.IsSet()
}

// SetHttpPort sets field value
func (o *CouchbaseSourceRegistrationParamsAllOf) SetHttpPort(v int32) {
	o.HttpPort.Set(&v)
}

// GetCarrierPort returns the CarrierPort field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *CouchbaseSourceRegistrationParamsAllOf) GetCarrierPort() int32 {
	if o == nil || o.CarrierPort.Get() == nil {
		var ret int32
		return ret
	}

	return *o.CarrierPort.Get()
}

// GetCarrierPortOk returns a tuple with the CarrierPort field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CouchbaseSourceRegistrationParamsAllOf) GetCarrierPortOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CarrierPort.Get(), o.CarrierPort.IsSet()
}

// SetCarrierPort sets field value
func (o *CouchbaseSourceRegistrationParamsAllOf) SetCarrierPort(v int32) {
	o.CarrierPort.Set(&v)
}

func (o CouchbaseSourceRegistrationParamsAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["seeds"] = o.Seeds
	}
	if true {
		toSerialize["isSslRequired"] = o.IsSslRequired.Get()
	}
	if true {
		toSerialize["httpPort"] = o.HttpPort.Get()
	}
	if true {
		toSerialize["carrierPort"] = o.CarrierPort.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCouchbaseSourceRegistrationParamsAllOf struct {
	value *CouchbaseSourceRegistrationParamsAllOf
	isSet bool
}

func (v NullableCouchbaseSourceRegistrationParamsAllOf) Get() *CouchbaseSourceRegistrationParamsAllOf {
	return v.value
}

func (v *NullableCouchbaseSourceRegistrationParamsAllOf) Set(val *CouchbaseSourceRegistrationParamsAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCouchbaseSourceRegistrationParamsAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCouchbaseSourceRegistrationParamsAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCouchbaseSourceRegistrationParamsAllOf(val *CouchbaseSourceRegistrationParamsAllOf) *NullableCouchbaseSourceRegistrationParamsAllOf {
	return &NullableCouchbaseSourceRegistrationParamsAllOf{value: val, isSet: true}
}

func (v NullableCouchbaseSourceRegistrationParamsAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCouchbaseSourceRegistrationParamsAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o CouchbaseSourceRegistrationParamsAllOf) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}