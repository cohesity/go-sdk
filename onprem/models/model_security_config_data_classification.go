/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// SecurityConfigDataClassification Specifies security config for data classification.
type SecurityConfigDataClassification struct {
	// Specifies whether to mark the web page data classified/unclassified.
	IsDataClassified NullableBool `json:"isDataClassified,omitempty"`
	// Specifies the classified data message.
	ClassifiedDataMessage NullableString `json:"classifiedDataMessage,omitempty"`
	// Specifies the unclassified data message.
	UnclassifiedDataMessage NullableString `json:"unclassifiedDataMessage,omitempty"`
}

// NewSecurityConfigDataClassification instantiates a new SecurityConfigDataClassification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityConfigDataClassification() *SecurityConfigDataClassification {
	this := SecurityConfigDataClassification{}
	return &this
}

// NewSecurityConfigDataClassificationWithDefaults instantiates a new SecurityConfigDataClassification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityConfigDataClassificationWithDefaults() *SecurityConfigDataClassification {
	this := SecurityConfigDataClassification{}
	return &this
}

// GetIsDataClassified returns the IsDataClassified field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SecurityConfigDataClassification) GetIsDataClassified() bool {
	if o == nil || o.IsDataClassified.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsDataClassified.Get()
}

// GetIsDataClassifiedOk returns a tuple with the IsDataClassified field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SecurityConfigDataClassification) GetIsDataClassifiedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsDataClassified.Get(), o.IsDataClassified.IsSet()
}

// HasIsDataClassified returns a boolean if a field has been set.
func (o *SecurityConfigDataClassification) HasIsDataClassified() bool {
	if o != nil && o.IsDataClassified.IsSet() {
		return true
	}

	return false
}

// SetIsDataClassified gets a reference to the given NullableBool and assigns it to the IsDataClassified field.
func (o *SecurityConfigDataClassification) SetIsDataClassified(v bool) {
	o.IsDataClassified.Set(&v)
}
// SetIsDataClassifiedNil sets the value for IsDataClassified to be an explicit nil
func (o *SecurityConfigDataClassification) SetIsDataClassifiedNil() {
	o.IsDataClassified.Set(nil)
}

// UnsetIsDataClassified ensures that no value is present for IsDataClassified, not even an explicit nil
func (o *SecurityConfigDataClassification) UnsetIsDataClassified() {
	o.IsDataClassified.Unset()
}

// GetClassifiedDataMessage returns the ClassifiedDataMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SecurityConfigDataClassification) GetClassifiedDataMessage() string {
	if o == nil || o.ClassifiedDataMessage.Get() == nil {
		var ret string
		return ret
	}
	return *o.ClassifiedDataMessage.Get()
}

// GetClassifiedDataMessageOk returns a tuple with the ClassifiedDataMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SecurityConfigDataClassification) GetClassifiedDataMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClassifiedDataMessage.Get(), o.ClassifiedDataMessage.IsSet()
}

// HasClassifiedDataMessage returns a boolean if a field has been set.
func (o *SecurityConfigDataClassification) HasClassifiedDataMessage() bool {
	if o != nil && o.ClassifiedDataMessage.IsSet() {
		return true
	}

	return false
}

// SetClassifiedDataMessage gets a reference to the given NullableString and assigns it to the ClassifiedDataMessage field.
func (o *SecurityConfigDataClassification) SetClassifiedDataMessage(v string) {
	o.ClassifiedDataMessage.Set(&v)
}
// SetClassifiedDataMessageNil sets the value for ClassifiedDataMessage to be an explicit nil
func (o *SecurityConfigDataClassification) SetClassifiedDataMessageNil() {
	o.ClassifiedDataMessage.Set(nil)
}

// UnsetClassifiedDataMessage ensures that no value is present for ClassifiedDataMessage, not even an explicit nil
func (o *SecurityConfigDataClassification) UnsetClassifiedDataMessage() {
	o.ClassifiedDataMessage.Unset()
}

// GetUnclassifiedDataMessage returns the UnclassifiedDataMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SecurityConfigDataClassification) GetUnclassifiedDataMessage() string {
	if o == nil || o.UnclassifiedDataMessage.Get() == nil {
		var ret string
		return ret
	}
	return *o.UnclassifiedDataMessage.Get()
}

// GetUnclassifiedDataMessageOk returns a tuple with the UnclassifiedDataMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SecurityConfigDataClassification) GetUnclassifiedDataMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UnclassifiedDataMessage.Get(), o.UnclassifiedDataMessage.IsSet()
}

// HasUnclassifiedDataMessage returns a boolean if a field has been set.
func (o *SecurityConfigDataClassification) HasUnclassifiedDataMessage() bool {
	if o != nil && o.UnclassifiedDataMessage.IsSet() {
		return true
	}

	return false
}

// SetUnclassifiedDataMessage gets a reference to the given NullableString and assigns it to the UnclassifiedDataMessage field.
func (o *SecurityConfigDataClassification) SetUnclassifiedDataMessage(v string) {
	o.UnclassifiedDataMessage.Set(&v)
}
// SetUnclassifiedDataMessageNil sets the value for UnclassifiedDataMessage to be an explicit nil
func (o *SecurityConfigDataClassification) SetUnclassifiedDataMessageNil() {
	o.UnclassifiedDataMessage.Set(nil)
}

// UnsetUnclassifiedDataMessage ensures that no value is present for UnclassifiedDataMessage, not even an explicit nil
func (o *SecurityConfigDataClassification) UnsetUnclassifiedDataMessage() {
	o.UnclassifiedDataMessage.Unset()
}

func (o SecurityConfigDataClassification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsDataClassified.IsSet() {
		toSerialize["isDataClassified"] = o.IsDataClassified.Get()
	}
	if o.ClassifiedDataMessage.IsSet() {
		toSerialize["classifiedDataMessage"] = o.ClassifiedDataMessage.Get()
	}
	if o.UnclassifiedDataMessage.IsSet() {
		toSerialize["unclassifiedDataMessage"] = o.UnclassifiedDataMessage.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSecurityConfigDataClassification struct {
	value *SecurityConfigDataClassification
	isSet bool
}

func (v NullableSecurityConfigDataClassification) Get() *SecurityConfigDataClassification {
	return v.value
}

func (v *NullableSecurityConfigDataClassification) Set(val *SecurityConfigDataClassification) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityConfigDataClassification) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityConfigDataClassification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityConfigDataClassification(val *SecurityConfigDataClassification) *NullableSecurityConfigDataClassification {
	return &NullableSecurityConfigDataClassification{value: val, isSet: true}
}

func (v NullableSecurityConfigDataClassification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityConfigDataClassification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o SecurityConfigDataClassification) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}