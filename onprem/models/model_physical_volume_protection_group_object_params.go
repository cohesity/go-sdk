/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// PhysicalVolumeProtectionGroupObjectParams Specifies object parameters for creating physical volume Protection Groups.
type PhysicalVolumeProtectionGroupObjectParams struct {
	// Specifies the ID of the object protected.
	Id int64 `json:"id"`
	// Specifies the name of the object protected.
	Name NullableString `json:"name,omitempty"`
	// Specifies the list of GUIDs of volumes protected. If empty, then all volumes will be protected by default.
	VolumeGuids *[]string `json:"volumeGuids,omitempty"`
	// Specifies whether or not to take a system backup. Applicable only for windows sources.
	EnableSystemBackup NullableBool `json:"enableSystemBackup,omitempty"`
}

// NewPhysicalVolumeProtectionGroupObjectParams instantiates a new PhysicalVolumeProtectionGroupObjectParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhysicalVolumeProtectionGroupObjectParams(id int64) *PhysicalVolumeProtectionGroupObjectParams {
	this := PhysicalVolumeProtectionGroupObjectParams{}
	this.Id = id
	return &this
}

// NewPhysicalVolumeProtectionGroupObjectParamsWithDefaults instantiates a new PhysicalVolumeProtectionGroupObjectParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhysicalVolumeProtectionGroupObjectParamsWithDefaults() *PhysicalVolumeProtectionGroupObjectParams {
	this := PhysicalVolumeProtectionGroupObjectParams{}
	return &this
}

// GetId returns the Id field value
func (o *PhysicalVolumeProtectionGroupObjectParams) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PhysicalVolumeProtectionGroupObjectParams) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PhysicalVolumeProtectionGroupObjectParams) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalVolumeProtectionGroupObjectParams) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalVolumeProtectionGroupObjectParams) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *PhysicalVolumeProtectionGroupObjectParams) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *PhysicalVolumeProtectionGroupObjectParams) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *PhysicalVolumeProtectionGroupObjectParams) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *PhysicalVolumeProtectionGroupObjectParams) UnsetName() {
	o.Name.Unset()
}

// GetVolumeGuids returns the VolumeGuids field value if set, zero value otherwise.
func (o *PhysicalVolumeProtectionGroupObjectParams) GetVolumeGuids() []string {
	if o == nil || o.VolumeGuids == nil {
		var ret []string
		return ret
	}
	return *o.VolumeGuids
}

// GetVolumeGuidsOk returns a tuple with the VolumeGuids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalVolumeProtectionGroupObjectParams) GetVolumeGuidsOk() (*[]string, bool) {
	if o == nil || o.VolumeGuids == nil {
		return nil, false
	}
	return o.VolumeGuids, true
}

// HasVolumeGuids returns a boolean if a field has been set.
func (o *PhysicalVolumeProtectionGroupObjectParams) HasVolumeGuids() bool {
	if o != nil && o.VolumeGuids != nil {
		return true
	}

	return false
}

// SetVolumeGuids gets a reference to the given []string and assigns it to the VolumeGuids field.
func (o *PhysicalVolumeProtectionGroupObjectParams) SetVolumeGuids(v []string) {
	o.VolumeGuids = &v
}

// GetEnableSystemBackup returns the EnableSystemBackup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalVolumeProtectionGroupObjectParams) GetEnableSystemBackup() bool {
	if o == nil || o.EnableSystemBackup.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableSystemBackup.Get()
}

// GetEnableSystemBackupOk returns a tuple with the EnableSystemBackup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalVolumeProtectionGroupObjectParams) GetEnableSystemBackupOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableSystemBackup.Get(), o.EnableSystemBackup.IsSet()
}

// HasEnableSystemBackup returns a boolean if a field has been set.
func (o *PhysicalVolumeProtectionGroupObjectParams) HasEnableSystemBackup() bool {
	if o != nil && o.EnableSystemBackup.IsSet() {
		return true
	}

	return false
}

// SetEnableSystemBackup gets a reference to the given NullableBool and assigns it to the EnableSystemBackup field.
func (o *PhysicalVolumeProtectionGroupObjectParams) SetEnableSystemBackup(v bool) {
	o.EnableSystemBackup.Set(&v)
}
// SetEnableSystemBackupNil sets the value for EnableSystemBackup to be an explicit nil
func (o *PhysicalVolumeProtectionGroupObjectParams) SetEnableSystemBackupNil() {
	o.EnableSystemBackup.Set(nil)
}

// UnsetEnableSystemBackup ensures that no value is present for EnableSystemBackup, not even an explicit nil
func (o *PhysicalVolumeProtectionGroupObjectParams) UnsetEnableSystemBackup() {
	o.EnableSystemBackup.Unset()
}

func (o PhysicalVolumeProtectionGroupObjectParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.VolumeGuids != nil {
		toSerialize["volumeGuids"] = o.VolumeGuids
	}
	if o.EnableSystemBackup.IsSet() {
		toSerialize["enableSystemBackup"] = o.EnableSystemBackup.Get()
	}
	return json.Marshal(toSerialize)
}

type NullablePhysicalVolumeProtectionGroupObjectParams struct {
	value *PhysicalVolumeProtectionGroupObjectParams
	isSet bool
}

func (v NullablePhysicalVolumeProtectionGroupObjectParams) Get() *PhysicalVolumeProtectionGroupObjectParams {
	return v.value
}

func (v *NullablePhysicalVolumeProtectionGroupObjectParams) Set(val *PhysicalVolumeProtectionGroupObjectParams) {
	v.value = val
	v.isSet = true
}

func (v NullablePhysicalVolumeProtectionGroupObjectParams) IsSet() bool {
	return v.isSet
}

func (v *NullablePhysicalVolumeProtectionGroupObjectParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhysicalVolumeProtectionGroupObjectParams(val *PhysicalVolumeProtectionGroupObjectParams) *NullablePhysicalVolumeProtectionGroupObjectParams {
	return &NullablePhysicalVolumeProtectionGroupObjectParams{value: val, isSet: true}
}

func (v NullablePhysicalVolumeProtectionGroupObjectParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhysicalVolumeProtectionGroupObjectParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o PhysicalVolumeProtectionGroupObjectParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}