/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// RecoverAzureFileAndFolderParams Specifies the parameters to recover Azure files and folders.
type RecoverAzureFileAndFolderParams struct {
	// Specifies the info about the files and folders to be recovered.
	FilesAndFolders []CommonRecoverFileAndFolderInfo `json:"filesAndFolders"`
	// Specifies the environment of the recovery target. The corresponding params below must be filled out.
	TargetEnvironment string `json:"targetEnvironment"`
	// Specifies the params for recovering to an Azure target.
	AzureTargetParams NullableAzureTargetParamsForRecoverFileAndFolder `json:"azureTargetParams,omitempty"`
}

// NewRecoverAzureFileAndFolderParams instantiates a new RecoverAzureFileAndFolderParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverAzureFileAndFolderParams(filesAndFolders []CommonRecoverFileAndFolderInfo, targetEnvironment string) *RecoverAzureFileAndFolderParams {
	this := RecoverAzureFileAndFolderParams{}
	this.FilesAndFolders = filesAndFolders
	this.TargetEnvironment = targetEnvironment
	return &this
}

// NewRecoverAzureFileAndFolderParamsWithDefaults instantiates a new RecoverAzureFileAndFolderParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverAzureFileAndFolderParamsWithDefaults() *RecoverAzureFileAndFolderParams {
	this := RecoverAzureFileAndFolderParams{}
	return &this
}

// GetFilesAndFolders returns the FilesAndFolders field value
// If the value is explicit nil, the zero value for []CommonRecoverFileAndFolderInfo will be returned
func (o *RecoverAzureFileAndFolderParams) GetFilesAndFolders() []CommonRecoverFileAndFolderInfo {
	if o == nil {
		var ret []CommonRecoverFileAndFolderInfo
		return ret
	}

	return o.FilesAndFolders
}

// GetFilesAndFoldersOk returns a tuple with the FilesAndFolders field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAzureFileAndFolderParams) GetFilesAndFoldersOk() (*[]CommonRecoverFileAndFolderInfo, bool) {
	if o == nil || o.FilesAndFolders == nil {
		return nil, false
	}
	return &o.FilesAndFolders, true
}

// SetFilesAndFolders sets field value
func (o *RecoverAzureFileAndFolderParams) SetFilesAndFolders(v []CommonRecoverFileAndFolderInfo) {
	o.FilesAndFolders = v
}

// GetTargetEnvironment returns the TargetEnvironment field value
func (o *RecoverAzureFileAndFolderParams) GetTargetEnvironment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetEnvironment
}

// GetTargetEnvironmentOk returns a tuple with the TargetEnvironment field value
// and a boolean to check if the value has been set.
func (o *RecoverAzureFileAndFolderParams) GetTargetEnvironmentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TargetEnvironment, true
}

// SetTargetEnvironment sets field value
func (o *RecoverAzureFileAndFolderParams) SetTargetEnvironment(v string) {
	o.TargetEnvironment = v
}

// GetAzureTargetParams returns the AzureTargetParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverAzureFileAndFolderParams) GetAzureTargetParams() AzureTargetParamsForRecoverFileAndFolder {
	if o == nil || o.AzureTargetParams.Get() == nil {
		var ret AzureTargetParamsForRecoverFileAndFolder
		return ret
	}
	return *o.AzureTargetParams.Get()
}

// GetAzureTargetParamsOk returns a tuple with the AzureTargetParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAzureFileAndFolderParams) GetAzureTargetParamsOk() (*AzureTargetParamsForRecoverFileAndFolder, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AzureTargetParams.Get(), o.AzureTargetParams.IsSet()
}

// HasAzureTargetParams returns a boolean if a field has been set.
func (o *RecoverAzureFileAndFolderParams) HasAzureTargetParams() bool {
	if o != nil && o.AzureTargetParams.IsSet() {
		return true
	}

	return false
}

// SetAzureTargetParams gets a reference to the given NullableAzureTargetParamsForRecoverFileAndFolder and assigns it to the AzureTargetParams field.
func (o *RecoverAzureFileAndFolderParams) SetAzureTargetParams(v AzureTargetParamsForRecoverFileAndFolder) {
	o.AzureTargetParams.Set(&v)
}
// SetAzureTargetParamsNil sets the value for AzureTargetParams to be an explicit nil
func (o *RecoverAzureFileAndFolderParams) SetAzureTargetParamsNil() {
	o.AzureTargetParams.Set(nil)
}

// UnsetAzureTargetParams ensures that no value is present for AzureTargetParams, not even an explicit nil
func (o *RecoverAzureFileAndFolderParams) UnsetAzureTargetParams() {
	o.AzureTargetParams.Unset()
}

func (o RecoverAzureFileAndFolderParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FilesAndFolders != nil {
		toSerialize["filesAndFolders"] = o.FilesAndFolders
	}
	if true {
		toSerialize["targetEnvironment"] = o.TargetEnvironment
	}
	if o.AzureTargetParams.IsSet() {
		toSerialize["azureTargetParams"] = o.AzureTargetParams.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRecoverAzureFileAndFolderParams struct {
	value *RecoverAzureFileAndFolderParams
	isSet bool
}

func (v NullableRecoverAzureFileAndFolderParams) Get() *RecoverAzureFileAndFolderParams {
	return v.value
}

func (v *NullableRecoverAzureFileAndFolderParams) Set(val *RecoverAzureFileAndFolderParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverAzureFileAndFolderParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverAzureFileAndFolderParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverAzureFileAndFolderParams(val *RecoverAzureFileAndFolderParams) *NullableRecoverAzureFileAndFolderParams {
	return &NullableRecoverAzureFileAndFolderParams{value: val, isSet: true}
}

func (v NullableRecoverAzureFileAndFolderParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverAzureFileAndFolderParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o RecoverAzureFileAndFolderParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}