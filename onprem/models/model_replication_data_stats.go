/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// ReplicationDataStats Specifies statistics about replication data.
type ReplicationDataStats struct {
	// Specifies the total logical size in bytes.
	LogicalSizeBytes NullableInt64 `json:"logicalSizeBytes,omitempty"`
	// Specifies the total logical bytes transferred.
	LogicalBytesTransferred NullableInt64 `json:"logicalBytesTransferred,omitempty"`
	// Specifies the total physical bytes transferred.
	PhysicalBytesTransferred NullableInt64 `json:"physicalBytesTransferred,omitempty"`
}

// NewReplicationDataStats instantiates a new ReplicationDataStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplicationDataStats() *ReplicationDataStats {
	this := ReplicationDataStats{}
	return &this
}

// NewReplicationDataStatsWithDefaults instantiates a new ReplicationDataStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplicationDataStatsWithDefaults() *ReplicationDataStats {
	this := ReplicationDataStats{}
	return &this
}

// GetLogicalSizeBytes returns the LogicalSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicationDataStats) GetLogicalSizeBytes() int64 {
	if o == nil || o.LogicalSizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LogicalSizeBytes.Get()
}

// GetLogicalSizeBytesOk returns a tuple with the LogicalSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationDataStats) GetLogicalSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogicalSizeBytes.Get(), o.LogicalSizeBytes.IsSet()
}

// HasLogicalSizeBytes returns a boolean if a field has been set.
func (o *ReplicationDataStats) HasLogicalSizeBytes() bool {
	if o != nil && o.LogicalSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetLogicalSizeBytes gets a reference to the given NullableInt64 and assigns it to the LogicalSizeBytes field.
func (o *ReplicationDataStats) SetLogicalSizeBytes(v int64) {
	o.LogicalSizeBytes.Set(&v)
}
// SetLogicalSizeBytesNil sets the value for LogicalSizeBytes to be an explicit nil
func (o *ReplicationDataStats) SetLogicalSizeBytesNil() {
	o.LogicalSizeBytes.Set(nil)
}

// UnsetLogicalSizeBytes ensures that no value is present for LogicalSizeBytes, not even an explicit nil
func (o *ReplicationDataStats) UnsetLogicalSizeBytes() {
	o.LogicalSizeBytes.Unset()
}

// GetLogicalBytesTransferred returns the LogicalBytesTransferred field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicationDataStats) GetLogicalBytesTransferred() int64 {
	if o == nil || o.LogicalBytesTransferred.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LogicalBytesTransferred.Get()
}

// GetLogicalBytesTransferredOk returns a tuple with the LogicalBytesTransferred field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationDataStats) GetLogicalBytesTransferredOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogicalBytesTransferred.Get(), o.LogicalBytesTransferred.IsSet()
}

// HasLogicalBytesTransferred returns a boolean if a field has been set.
func (o *ReplicationDataStats) HasLogicalBytesTransferred() bool {
	if o != nil && o.LogicalBytesTransferred.IsSet() {
		return true
	}

	return false
}

// SetLogicalBytesTransferred gets a reference to the given NullableInt64 and assigns it to the LogicalBytesTransferred field.
func (o *ReplicationDataStats) SetLogicalBytesTransferred(v int64) {
	o.LogicalBytesTransferred.Set(&v)
}
// SetLogicalBytesTransferredNil sets the value for LogicalBytesTransferred to be an explicit nil
func (o *ReplicationDataStats) SetLogicalBytesTransferredNil() {
	o.LogicalBytesTransferred.Set(nil)
}

// UnsetLogicalBytesTransferred ensures that no value is present for LogicalBytesTransferred, not even an explicit nil
func (o *ReplicationDataStats) UnsetLogicalBytesTransferred() {
	o.LogicalBytesTransferred.Unset()
}

// GetPhysicalBytesTransferred returns the PhysicalBytesTransferred field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicationDataStats) GetPhysicalBytesTransferred() int64 {
	if o == nil || o.PhysicalBytesTransferred.Get() == nil {
		var ret int64
		return ret
	}
	return *o.PhysicalBytesTransferred.Get()
}

// GetPhysicalBytesTransferredOk returns a tuple with the PhysicalBytesTransferred field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationDataStats) GetPhysicalBytesTransferredOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PhysicalBytesTransferred.Get(), o.PhysicalBytesTransferred.IsSet()
}

// HasPhysicalBytesTransferred returns a boolean if a field has been set.
func (o *ReplicationDataStats) HasPhysicalBytesTransferred() bool {
	if o != nil && o.PhysicalBytesTransferred.IsSet() {
		return true
	}

	return false
}

// SetPhysicalBytesTransferred gets a reference to the given NullableInt64 and assigns it to the PhysicalBytesTransferred field.
func (o *ReplicationDataStats) SetPhysicalBytesTransferred(v int64) {
	o.PhysicalBytesTransferred.Set(&v)
}
// SetPhysicalBytesTransferredNil sets the value for PhysicalBytesTransferred to be an explicit nil
func (o *ReplicationDataStats) SetPhysicalBytesTransferredNil() {
	o.PhysicalBytesTransferred.Set(nil)
}

// UnsetPhysicalBytesTransferred ensures that no value is present for PhysicalBytesTransferred, not even an explicit nil
func (o *ReplicationDataStats) UnsetPhysicalBytesTransferred() {
	o.PhysicalBytesTransferred.Unset()
}

func (o ReplicationDataStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LogicalSizeBytes.IsSet() {
		toSerialize["logicalSizeBytes"] = o.LogicalSizeBytes.Get()
	}
	if o.LogicalBytesTransferred.IsSet() {
		toSerialize["logicalBytesTransferred"] = o.LogicalBytesTransferred.Get()
	}
	if o.PhysicalBytesTransferred.IsSet() {
		toSerialize["physicalBytesTransferred"] = o.PhysicalBytesTransferred.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableReplicationDataStats struct {
	value *ReplicationDataStats
	isSet bool
}

func (v NullableReplicationDataStats) Get() *ReplicationDataStats {
	return v.value
}

func (v *NullableReplicationDataStats) Set(val *ReplicationDataStats) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicationDataStats) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicationDataStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicationDataStats(val *ReplicationDataStats) *NullableReplicationDataStats {
	return &NullableReplicationDataStats{value: val, isSet: true}
}

func (v NullableReplicationDataStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicationDataStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o ReplicationDataStats) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}