/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// PreparePlannedFailverParams Specifies parameters of preparation of a planned failover.
type PreparePlannedFailverParams struct {
	// Specifies whether a reverse replication needs to be set for the view on target cluster after failover.
	ReverseReplication NullableBool `json:"reverseReplication,omitempty"`
}

// NewPreparePlannedFailverParams instantiates a new PreparePlannedFailverParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPreparePlannedFailverParams() *PreparePlannedFailverParams {
	this := PreparePlannedFailverParams{}
	return &this
}

// NewPreparePlannedFailverParamsWithDefaults instantiates a new PreparePlannedFailverParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPreparePlannedFailverParamsWithDefaults() *PreparePlannedFailverParams {
	this := PreparePlannedFailverParams{}
	return &this
}

// GetReverseReplication returns the ReverseReplication field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PreparePlannedFailverParams) GetReverseReplication() bool {
	if o == nil || o.ReverseReplication.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ReverseReplication.Get()
}

// GetReverseReplicationOk returns a tuple with the ReverseReplication field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PreparePlannedFailverParams) GetReverseReplicationOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ReverseReplication.Get(), o.ReverseReplication.IsSet()
}

// HasReverseReplication returns a boolean if a field has been set.
func (o *PreparePlannedFailverParams) HasReverseReplication() bool {
	if o != nil && o.ReverseReplication.IsSet() {
		return true
	}

	return false
}

// SetReverseReplication gets a reference to the given NullableBool and assigns it to the ReverseReplication field.
func (o *PreparePlannedFailverParams) SetReverseReplication(v bool) {
	o.ReverseReplication.Set(&v)
}
// SetReverseReplicationNil sets the value for ReverseReplication to be an explicit nil
func (o *PreparePlannedFailverParams) SetReverseReplicationNil() {
	o.ReverseReplication.Set(nil)
}

// UnsetReverseReplication ensures that no value is present for ReverseReplication, not even an explicit nil
func (o *PreparePlannedFailverParams) UnsetReverseReplication() {
	o.ReverseReplication.Unset()
}

func (o PreparePlannedFailverParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ReverseReplication.IsSet() {
		toSerialize["reverseReplication"] = o.ReverseReplication.Get()
	}
	return json.Marshal(toSerialize)
}

type NullablePreparePlannedFailverParams struct {
	value *PreparePlannedFailverParams
	isSet bool
}

func (v NullablePreparePlannedFailverParams) Get() *PreparePlannedFailverParams {
	return v.value
}

func (v *NullablePreparePlannedFailverParams) Set(val *PreparePlannedFailverParams) {
	v.value = val
	v.isSet = true
}

func (v NullablePreparePlannedFailverParams) IsSet() bool {
	return v.isSet
}

func (v *NullablePreparePlannedFailverParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePreparePlannedFailverParams(val *PreparePlannedFailverParams) *NullablePreparePlannedFailverParams {
	return &NullablePreparePlannedFailverParams{value: val, isSet: true}
}

func (v NullablePreparePlannedFailverParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePreparePlannedFailverParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o PreparePlannedFailverParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}