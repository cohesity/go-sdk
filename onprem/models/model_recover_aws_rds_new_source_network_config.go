/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// RecoverAwsRdsNewSourceNetworkConfig Specifies the network config parameters to be applied for AWS RDS if recovering to new Source.
type RecoverAwsRdsNewSourceNetworkConfig struct {
	// Specifies the Virtual Private Cloud to choose for the instance type.
	Vpc NullableRecoveryObjectIdentifier `json:"vpc"`
	// Specifies the subnet within above VPC.
	Subnet NullableRecoveryObjectIdentifier `json:"subnet"`
	// Specifies the entity representing the availability zone to use while restoring the DB.
	AvailabilityZone NullableRecoveryObjectIdentifier `json:"availabilityZone,omitempty"`
	// Specifies the network security groups within above VPC.
	SecurityGroups []RecoveryObjectIdentifier `json:"securityGroups,omitempty"`
}

// NewRecoverAwsRdsNewSourceNetworkConfig instantiates a new RecoverAwsRdsNewSourceNetworkConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverAwsRdsNewSourceNetworkConfig(vpc NullableRecoveryObjectIdentifier, subnet NullableRecoveryObjectIdentifier) *RecoverAwsRdsNewSourceNetworkConfig {
	this := RecoverAwsRdsNewSourceNetworkConfig{}
	this.Vpc = vpc
	this.Subnet = subnet
	return &this
}

// NewRecoverAwsRdsNewSourceNetworkConfigWithDefaults instantiates a new RecoverAwsRdsNewSourceNetworkConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverAwsRdsNewSourceNetworkConfigWithDefaults() *RecoverAwsRdsNewSourceNetworkConfig {
	this := RecoverAwsRdsNewSourceNetworkConfig{}
	return &this
}

// GetVpc returns the Vpc field value
// If the value is explicit nil, the zero value for RecoveryObjectIdentifier will be returned
func (o *RecoverAwsRdsNewSourceNetworkConfig) GetVpc() RecoveryObjectIdentifier {
	if o == nil || o.Vpc.Get() == nil {
		var ret RecoveryObjectIdentifier
		return ret
	}

	return *o.Vpc.Get()
}

// GetVpcOk returns a tuple with the Vpc field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAwsRdsNewSourceNetworkConfig) GetVpcOk() (*RecoveryObjectIdentifier, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Vpc.Get(), o.Vpc.IsSet()
}

// SetVpc sets field value
func (o *RecoverAwsRdsNewSourceNetworkConfig) SetVpc(v RecoveryObjectIdentifier) {
	o.Vpc.Set(&v)
}

// GetSubnet returns the Subnet field value
// If the value is explicit nil, the zero value for RecoveryObjectIdentifier will be returned
func (o *RecoverAwsRdsNewSourceNetworkConfig) GetSubnet() RecoveryObjectIdentifier {
	if o == nil || o.Subnet.Get() == nil {
		var ret RecoveryObjectIdentifier
		return ret
	}

	return *o.Subnet.Get()
}

// GetSubnetOk returns a tuple with the Subnet field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAwsRdsNewSourceNetworkConfig) GetSubnetOk() (*RecoveryObjectIdentifier, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Subnet.Get(), o.Subnet.IsSet()
}

// SetSubnet sets field value
func (o *RecoverAwsRdsNewSourceNetworkConfig) SetSubnet(v RecoveryObjectIdentifier) {
	o.Subnet.Set(&v)
}

// GetAvailabilityZone returns the AvailabilityZone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverAwsRdsNewSourceNetworkConfig) GetAvailabilityZone() RecoveryObjectIdentifier {
	if o == nil || o.AvailabilityZone.Get() == nil {
		var ret RecoveryObjectIdentifier
		return ret
	}
	return *o.AvailabilityZone.Get()
}

// GetAvailabilityZoneOk returns a tuple with the AvailabilityZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAwsRdsNewSourceNetworkConfig) GetAvailabilityZoneOk() (*RecoveryObjectIdentifier, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AvailabilityZone.Get(), o.AvailabilityZone.IsSet()
}

// HasAvailabilityZone returns a boolean if a field has been set.
func (o *RecoverAwsRdsNewSourceNetworkConfig) HasAvailabilityZone() bool {
	if o != nil && o.AvailabilityZone.IsSet() {
		return true
	}

	return false
}

// SetAvailabilityZone gets a reference to the given NullableRecoveryObjectIdentifier and assigns it to the AvailabilityZone field.
func (o *RecoverAwsRdsNewSourceNetworkConfig) SetAvailabilityZone(v RecoveryObjectIdentifier) {
	o.AvailabilityZone.Set(&v)
}
// SetAvailabilityZoneNil sets the value for AvailabilityZone to be an explicit nil
func (o *RecoverAwsRdsNewSourceNetworkConfig) SetAvailabilityZoneNil() {
	o.AvailabilityZone.Set(nil)
}

// UnsetAvailabilityZone ensures that no value is present for AvailabilityZone, not even an explicit nil
func (o *RecoverAwsRdsNewSourceNetworkConfig) UnsetAvailabilityZone() {
	o.AvailabilityZone.Unset()
}

// GetSecurityGroups returns the SecurityGroups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverAwsRdsNewSourceNetworkConfig) GetSecurityGroups() []RecoveryObjectIdentifier {
	if o == nil  {
		var ret []RecoveryObjectIdentifier
		return ret
	}
	return o.SecurityGroups
}

// GetSecurityGroupsOk returns a tuple with the SecurityGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAwsRdsNewSourceNetworkConfig) GetSecurityGroupsOk() (*[]RecoveryObjectIdentifier, bool) {
	if o == nil || o.SecurityGroups == nil {
		return nil, false
	}
	return &o.SecurityGroups, true
}

// HasSecurityGroups returns a boolean if a field has been set.
func (o *RecoverAwsRdsNewSourceNetworkConfig) HasSecurityGroups() bool {
	if o != nil && o.SecurityGroups != nil {
		return true
	}

	return false
}

// SetSecurityGroups gets a reference to the given []RecoveryObjectIdentifier and assigns it to the SecurityGroups field.
func (o *RecoverAwsRdsNewSourceNetworkConfig) SetSecurityGroups(v []RecoveryObjectIdentifier) {
	o.SecurityGroups = v
}

func (o RecoverAwsRdsNewSourceNetworkConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["vpc"] = o.Vpc.Get()
	}
	if true {
		toSerialize["subnet"] = o.Subnet.Get()
	}
	if o.AvailabilityZone.IsSet() {
		toSerialize["availabilityZone"] = o.AvailabilityZone.Get()
	}
	if o.SecurityGroups != nil {
		toSerialize["securityGroups"] = o.SecurityGroups
	}
	return json.Marshal(toSerialize)
}

type NullableRecoverAwsRdsNewSourceNetworkConfig struct {
	value *RecoverAwsRdsNewSourceNetworkConfig
	isSet bool
}

func (v NullableRecoverAwsRdsNewSourceNetworkConfig) Get() *RecoverAwsRdsNewSourceNetworkConfig {
	return v.value
}

func (v *NullableRecoverAwsRdsNewSourceNetworkConfig) Set(val *RecoverAwsRdsNewSourceNetworkConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverAwsRdsNewSourceNetworkConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverAwsRdsNewSourceNetworkConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverAwsRdsNewSourceNetworkConfig(val *RecoverAwsRdsNewSourceNetworkConfig) *NullableRecoverAwsRdsNewSourceNetworkConfig {
	return &NullableRecoverAwsRdsNewSourceNetworkConfig{value: val, isSet: true}
}

func (v NullableRecoverAwsRdsNewSourceNetworkConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverAwsRdsNewSourceNetworkConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o RecoverAwsRdsNewSourceNetworkConfig) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}