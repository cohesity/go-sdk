/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// VmwareRecoverDisksOriginalSourceConfig Specifies the configuration for restoring a disk to the original VM from which the snapshot was taken.
type VmwareRecoverDisksOriginalSourceConfig struct {
	// Specifies the disks to be recovered and the location to which they will be recovered.
	Disks []VmwareRecoverOriginalSourceDiskParams `json:"disks"`
}

// NewVmwareRecoverDisksOriginalSourceConfig instantiates a new VmwareRecoverDisksOriginalSourceConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmwareRecoverDisksOriginalSourceConfig(disks []VmwareRecoverOriginalSourceDiskParams) *VmwareRecoverDisksOriginalSourceConfig {
	this := VmwareRecoverDisksOriginalSourceConfig{}
	this.Disks = disks
	return &this
}

// NewVmwareRecoverDisksOriginalSourceConfigWithDefaults instantiates a new VmwareRecoverDisksOriginalSourceConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmwareRecoverDisksOriginalSourceConfigWithDefaults() *VmwareRecoverDisksOriginalSourceConfig {
	this := VmwareRecoverDisksOriginalSourceConfig{}
	return &this
}

// GetDisks returns the Disks field value
func (o *VmwareRecoverDisksOriginalSourceConfig) GetDisks() []VmwareRecoverOriginalSourceDiskParams {
	if o == nil {
		var ret []VmwareRecoverOriginalSourceDiskParams
		return ret
	}

	return o.Disks
}

// GetDisksOk returns a tuple with the Disks field value
// and a boolean to check if the value has been set.
func (o *VmwareRecoverDisksOriginalSourceConfig) GetDisksOk() (*[]VmwareRecoverOriginalSourceDiskParams, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Disks, true
}

// SetDisks sets field value
func (o *VmwareRecoverDisksOriginalSourceConfig) SetDisks(v []VmwareRecoverOriginalSourceDiskParams) {
	o.Disks = v
}

func (o VmwareRecoverDisksOriginalSourceConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["disks"] = o.Disks
	}
	return json.Marshal(toSerialize)
}

type NullableVmwareRecoverDisksOriginalSourceConfig struct {
	value *VmwareRecoverDisksOriginalSourceConfig
	isSet bool
}

func (v NullableVmwareRecoverDisksOriginalSourceConfig) Get() *VmwareRecoverDisksOriginalSourceConfig {
	return v.value
}

func (v *NullableVmwareRecoverDisksOriginalSourceConfig) Set(val *VmwareRecoverDisksOriginalSourceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableVmwareRecoverDisksOriginalSourceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableVmwareRecoverDisksOriginalSourceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmwareRecoverDisksOriginalSourceConfig(val *VmwareRecoverDisksOriginalSourceConfig) *NullableVmwareRecoverDisksOriginalSourceConfig {
	return &NullableVmwareRecoverDisksOriginalSourceConfig{value: val, isSet: true}
}

func (v NullableVmwareRecoverDisksOriginalSourceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmwareRecoverDisksOriginalSourceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o VmwareRecoverDisksOriginalSourceConfig) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}