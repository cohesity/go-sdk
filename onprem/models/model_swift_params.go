/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// SwiftParams Specifies the parameters to update a Swift configuration.
type SwiftParams struct {
	// Specifies the tenant Id who will use this Swift configuration.
	TenantId NullableString `json:"tenantId"`
	// Specifies the associated Keystone configuration Id.
	KeystoneId NullableInt64 `json:"keystoneId,omitempty"`
	// Specifies a list of roles that can operate on Cohesity Swift service.
	OperatorRoles *[]string `json:"operatorRoles,omitempty"`
}

// NewSwiftParams instantiates a new SwiftParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSwiftParams(tenantId NullableString) *SwiftParams {
	this := SwiftParams{}
	this.TenantId = tenantId
	return &this
}

// NewSwiftParamsWithDefaults instantiates a new SwiftParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSwiftParamsWithDefaults() *SwiftParams {
	this := SwiftParams{}
	return &this
}

// GetTenantId returns the TenantId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *SwiftParams) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}

	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SwiftParams) GetTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// SetTenantId sets field value
func (o *SwiftParams) SetTenantId(v string) {
	o.TenantId.Set(&v)
}

// GetKeystoneId returns the KeystoneId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SwiftParams) GetKeystoneId() int64 {
	if o == nil || o.KeystoneId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.KeystoneId.Get()
}

// GetKeystoneIdOk returns a tuple with the KeystoneId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SwiftParams) GetKeystoneIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.KeystoneId.Get(), o.KeystoneId.IsSet()
}

// HasKeystoneId returns a boolean if a field has been set.
func (o *SwiftParams) HasKeystoneId() bool {
	if o != nil && o.KeystoneId.IsSet() {
		return true
	}

	return false
}

// SetKeystoneId gets a reference to the given NullableInt64 and assigns it to the KeystoneId field.
func (o *SwiftParams) SetKeystoneId(v int64) {
	o.KeystoneId.Set(&v)
}
// SetKeystoneIdNil sets the value for KeystoneId to be an explicit nil
func (o *SwiftParams) SetKeystoneIdNil() {
	o.KeystoneId.Set(nil)
}

// UnsetKeystoneId ensures that no value is present for KeystoneId, not even an explicit nil
func (o *SwiftParams) UnsetKeystoneId() {
	o.KeystoneId.Unset()
}

// GetOperatorRoles returns the OperatorRoles field value if set, zero value otherwise.
func (o *SwiftParams) GetOperatorRoles() []string {
	if o == nil || o.OperatorRoles == nil {
		var ret []string
		return ret
	}
	return *o.OperatorRoles
}

// GetOperatorRolesOk returns a tuple with the OperatorRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SwiftParams) GetOperatorRolesOk() (*[]string, bool) {
	if o == nil || o.OperatorRoles == nil {
		return nil, false
	}
	return o.OperatorRoles, true
}

// HasOperatorRoles returns a boolean if a field has been set.
func (o *SwiftParams) HasOperatorRoles() bool {
	if o != nil && o.OperatorRoles != nil {
		return true
	}

	return false
}

// SetOperatorRoles gets a reference to the given []string and assigns it to the OperatorRoles field.
func (o *SwiftParams) SetOperatorRoles(v []string) {
	o.OperatorRoles = &v
}

func (o SwiftParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.KeystoneId.IsSet() {
		toSerialize["keystoneId"] = o.KeystoneId.Get()
	}
	if o.OperatorRoles != nil {
		toSerialize["operatorRoles"] = o.OperatorRoles
	}
	return json.Marshal(toSerialize)
}

type NullableSwiftParams struct {
	value *SwiftParams
	isSet bool
}

func (v NullableSwiftParams) Get() *SwiftParams {
	return v.value
}

func (v *NullableSwiftParams) Set(val *SwiftParams) {
	v.value = val
	v.isSet = true
}

func (v NullableSwiftParams) IsSet() bool {
	return v.isSet
}

func (v *NullableSwiftParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSwiftParams(val *SwiftParams) *NullableSwiftParams {
	return &NullableSwiftParams{value: val, isSet: true}
}

func (v NullableSwiftParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSwiftParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o SwiftParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}