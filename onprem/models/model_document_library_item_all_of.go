/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// DocumentLibraryItemAllOf struct for DocumentLibraryItemAllOf
type DocumentLibraryItemAllOf struct {
	// Specifies the file type.
	FileType NullableString `json:"fileType,omitempty"`
	// Specifies the size in bytes for the indexed item.
	ItemSize NullableInt64 `json:"itemSize,omitempty"`
	// Specifies the Unix timestamp epoch in seconds at which this item is created.
	CreationTimeSecs NullableInt64 `json:"creationTimeSecs,omitempty"`
	// Specifies the name of the owner of the document library item.
	OwnerName NullableString `json:"ownerName,omitempty"`
	// Specifies the email of the owner of the document library item.
	OwnerEmail NullableString `json:"ownerEmail,omitempty"`
}

// NewDocumentLibraryItemAllOf instantiates a new DocumentLibraryItemAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentLibraryItemAllOf() *DocumentLibraryItemAllOf {
	this := DocumentLibraryItemAllOf{}
	return &this
}

// NewDocumentLibraryItemAllOfWithDefaults instantiates a new DocumentLibraryItemAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentLibraryItemAllOfWithDefaults() *DocumentLibraryItemAllOf {
	this := DocumentLibraryItemAllOf{}
	return &this
}

// GetFileType returns the FileType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentLibraryItemAllOf) GetFileType() string {
	if o == nil || o.FileType.Get() == nil {
		var ret string
		return ret
	}
	return *o.FileType.Get()
}

// GetFileTypeOk returns a tuple with the FileType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentLibraryItemAllOf) GetFileTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FileType.Get(), o.FileType.IsSet()
}

// HasFileType returns a boolean if a field has been set.
func (o *DocumentLibraryItemAllOf) HasFileType() bool {
	if o != nil && o.FileType.IsSet() {
		return true
	}

	return false
}

// SetFileType gets a reference to the given NullableString and assigns it to the FileType field.
func (o *DocumentLibraryItemAllOf) SetFileType(v string) {
	o.FileType.Set(&v)
}
// SetFileTypeNil sets the value for FileType to be an explicit nil
func (o *DocumentLibraryItemAllOf) SetFileTypeNil() {
	o.FileType.Set(nil)
}

// UnsetFileType ensures that no value is present for FileType, not even an explicit nil
func (o *DocumentLibraryItemAllOf) UnsetFileType() {
	o.FileType.Unset()
}

// GetItemSize returns the ItemSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentLibraryItemAllOf) GetItemSize() int64 {
	if o == nil || o.ItemSize.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ItemSize.Get()
}

// GetItemSizeOk returns a tuple with the ItemSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentLibraryItemAllOf) GetItemSizeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ItemSize.Get(), o.ItemSize.IsSet()
}

// HasItemSize returns a boolean if a field has been set.
func (o *DocumentLibraryItemAllOf) HasItemSize() bool {
	if o != nil && o.ItemSize.IsSet() {
		return true
	}

	return false
}

// SetItemSize gets a reference to the given NullableInt64 and assigns it to the ItemSize field.
func (o *DocumentLibraryItemAllOf) SetItemSize(v int64) {
	o.ItemSize.Set(&v)
}
// SetItemSizeNil sets the value for ItemSize to be an explicit nil
func (o *DocumentLibraryItemAllOf) SetItemSizeNil() {
	o.ItemSize.Set(nil)
}

// UnsetItemSize ensures that no value is present for ItemSize, not even an explicit nil
func (o *DocumentLibraryItemAllOf) UnsetItemSize() {
	o.ItemSize.Unset()
}

// GetCreationTimeSecs returns the CreationTimeSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentLibraryItemAllOf) GetCreationTimeSecs() int64 {
	if o == nil || o.CreationTimeSecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.CreationTimeSecs.Get()
}

// GetCreationTimeSecsOk returns a tuple with the CreationTimeSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentLibraryItemAllOf) GetCreationTimeSecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CreationTimeSecs.Get(), o.CreationTimeSecs.IsSet()
}

// HasCreationTimeSecs returns a boolean if a field has been set.
func (o *DocumentLibraryItemAllOf) HasCreationTimeSecs() bool {
	if o != nil && o.CreationTimeSecs.IsSet() {
		return true
	}

	return false
}

// SetCreationTimeSecs gets a reference to the given NullableInt64 and assigns it to the CreationTimeSecs field.
func (o *DocumentLibraryItemAllOf) SetCreationTimeSecs(v int64) {
	o.CreationTimeSecs.Set(&v)
}
// SetCreationTimeSecsNil sets the value for CreationTimeSecs to be an explicit nil
func (o *DocumentLibraryItemAllOf) SetCreationTimeSecsNil() {
	o.CreationTimeSecs.Set(nil)
}

// UnsetCreationTimeSecs ensures that no value is present for CreationTimeSecs, not even an explicit nil
func (o *DocumentLibraryItemAllOf) UnsetCreationTimeSecs() {
	o.CreationTimeSecs.Unset()
}

// GetOwnerName returns the OwnerName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentLibraryItemAllOf) GetOwnerName() string {
	if o == nil || o.OwnerName.Get() == nil {
		var ret string
		return ret
	}
	return *o.OwnerName.Get()
}

// GetOwnerNameOk returns a tuple with the OwnerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentLibraryItemAllOf) GetOwnerNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OwnerName.Get(), o.OwnerName.IsSet()
}

// HasOwnerName returns a boolean if a field has been set.
func (o *DocumentLibraryItemAllOf) HasOwnerName() bool {
	if o != nil && o.OwnerName.IsSet() {
		return true
	}

	return false
}

// SetOwnerName gets a reference to the given NullableString and assigns it to the OwnerName field.
func (o *DocumentLibraryItemAllOf) SetOwnerName(v string) {
	o.OwnerName.Set(&v)
}
// SetOwnerNameNil sets the value for OwnerName to be an explicit nil
func (o *DocumentLibraryItemAllOf) SetOwnerNameNil() {
	o.OwnerName.Set(nil)
}

// UnsetOwnerName ensures that no value is present for OwnerName, not even an explicit nil
func (o *DocumentLibraryItemAllOf) UnsetOwnerName() {
	o.OwnerName.Unset()
}

// GetOwnerEmail returns the OwnerEmail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentLibraryItemAllOf) GetOwnerEmail() string {
	if o == nil || o.OwnerEmail.Get() == nil {
		var ret string
		return ret
	}
	return *o.OwnerEmail.Get()
}

// GetOwnerEmailOk returns a tuple with the OwnerEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentLibraryItemAllOf) GetOwnerEmailOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OwnerEmail.Get(), o.OwnerEmail.IsSet()
}

// HasOwnerEmail returns a boolean if a field has been set.
func (o *DocumentLibraryItemAllOf) HasOwnerEmail() bool {
	if o != nil && o.OwnerEmail.IsSet() {
		return true
	}

	return false
}

// SetOwnerEmail gets a reference to the given NullableString and assigns it to the OwnerEmail field.
func (o *DocumentLibraryItemAllOf) SetOwnerEmail(v string) {
	o.OwnerEmail.Set(&v)
}
// SetOwnerEmailNil sets the value for OwnerEmail to be an explicit nil
func (o *DocumentLibraryItemAllOf) SetOwnerEmailNil() {
	o.OwnerEmail.Set(nil)
}

// UnsetOwnerEmail ensures that no value is present for OwnerEmail, not even an explicit nil
func (o *DocumentLibraryItemAllOf) UnsetOwnerEmail() {
	o.OwnerEmail.Unset()
}

func (o DocumentLibraryItemAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FileType.IsSet() {
		toSerialize["fileType"] = o.FileType.Get()
	}
	if o.ItemSize.IsSet() {
		toSerialize["itemSize"] = o.ItemSize.Get()
	}
	if o.CreationTimeSecs.IsSet() {
		toSerialize["creationTimeSecs"] = o.CreationTimeSecs.Get()
	}
	if o.OwnerName.IsSet() {
		toSerialize["ownerName"] = o.OwnerName.Get()
	}
	if o.OwnerEmail.IsSet() {
		toSerialize["ownerEmail"] = o.OwnerEmail.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDocumentLibraryItemAllOf struct {
	value *DocumentLibraryItemAllOf
	isSet bool
}

func (v NullableDocumentLibraryItemAllOf) Get() *DocumentLibraryItemAllOf {
	return v.value
}

func (v *NullableDocumentLibraryItemAllOf) Set(val *DocumentLibraryItemAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentLibraryItemAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentLibraryItemAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentLibraryItemAllOf(val *DocumentLibraryItemAllOf) *NullableDocumentLibraryItemAllOf {
	return &NullableDocumentLibraryItemAllOf{value: val, isSet: true}
}

func (v NullableDocumentLibraryItemAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentLibraryItemAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o DocumentLibraryItemAllOf) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}