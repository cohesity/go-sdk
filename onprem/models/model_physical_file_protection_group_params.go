/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// PhysicalFileProtectionGroupParams Specifies the parameters which are specific to Physical related Protection Groups.
type PhysicalFileProtectionGroupParams struct {
	// Specifies the list of objects protected by this Protection Group.
	Objects []PhysicalFileProtectionGroupObjectParams `json:"objects"`
	IndexingPolicy *IndexingPolicy `json:"indexingPolicy,omitempty"`
	// Specifies whether or not to perform source side deduplication on this Protection Group.
	PerformSourceSideDeduplication NullableBool `json:"performSourceSideDeduplication,omitempty"`
	// Specifies Whether to take app-consistent snapshots by quiescing apps and the filesystem before taking a backup.
	Quiesce NullableBool `json:"quiesce,omitempty"`
	// Specifies whether to continue backing up on quiesce failure.
	ContinueOnQuiesceFailure NullableBool `json:"continueOnQuiesceFailure,omitempty"`
	PrePostScript *PrePostScriptParams `json:"prePostScript,omitempty"`
	// Specifies ids of sources for which deduplication has to be disabled.
	DedupExclusionSourceIds *[]int64 `json:"dedupExclusionSourceIds,omitempty"`
	// Specifies global exclude filters which are applied to all sources in a job.
	GlobalExcludePaths *[]string `json:"globalExcludePaths,omitempty"`
}

// NewPhysicalFileProtectionGroupParams instantiates a new PhysicalFileProtectionGroupParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhysicalFileProtectionGroupParams(objects []PhysicalFileProtectionGroupObjectParams) *PhysicalFileProtectionGroupParams {
	this := PhysicalFileProtectionGroupParams{}
	this.Objects = objects
	return &this
}

// NewPhysicalFileProtectionGroupParamsWithDefaults instantiates a new PhysicalFileProtectionGroupParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhysicalFileProtectionGroupParamsWithDefaults() *PhysicalFileProtectionGroupParams {
	this := PhysicalFileProtectionGroupParams{}
	return &this
}

// GetObjects returns the Objects field value
func (o *PhysicalFileProtectionGroupParams) GetObjects() []PhysicalFileProtectionGroupObjectParams {
	if o == nil {
		var ret []PhysicalFileProtectionGroupObjectParams
		return ret
	}

	return o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value
// and a boolean to check if the value has been set.
func (o *PhysicalFileProtectionGroupParams) GetObjectsOk() (*[]PhysicalFileProtectionGroupObjectParams, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Objects, true
}

// SetObjects sets field value
func (o *PhysicalFileProtectionGroupParams) SetObjects(v []PhysicalFileProtectionGroupObjectParams) {
	o.Objects = v
}

// GetIndexingPolicy returns the IndexingPolicy field value if set, zero value otherwise.
func (o *PhysicalFileProtectionGroupParams) GetIndexingPolicy() IndexingPolicy {
	if o == nil || o.IndexingPolicy == nil {
		var ret IndexingPolicy
		return ret
	}
	return *o.IndexingPolicy
}

// GetIndexingPolicyOk returns a tuple with the IndexingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalFileProtectionGroupParams) GetIndexingPolicyOk() (*IndexingPolicy, bool) {
	if o == nil || o.IndexingPolicy == nil {
		return nil, false
	}
	return o.IndexingPolicy, true
}

// HasIndexingPolicy returns a boolean if a field has been set.
func (o *PhysicalFileProtectionGroupParams) HasIndexingPolicy() bool {
	if o != nil && o.IndexingPolicy != nil {
		return true
	}

	return false
}

// SetIndexingPolicy gets a reference to the given IndexingPolicy and assigns it to the IndexingPolicy field.
func (o *PhysicalFileProtectionGroupParams) SetIndexingPolicy(v IndexingPolicy) {
	o.IndexingPolicy = &v
}

// GetPerformSourceSideDeduplication returns the PerformSourceSideDeduplication field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalFileProtectionGroupParams) GetPerformSourceSideDeduplication() bool {
	if o == nil || o.PerformSourceSideDeduplication.Get() == nil {
		var ret bool
		return ret
	}
	return *o.PerformSourceSideDeduplication.Get()
}

// GetPerformSourceSideDeduplicationOk returns a tuple with the PerformSourceSideDeduplication field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalFileProtectionGroupParams) GetPerformSourceSideDeduplicationOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PerformSourceSideDeduplication.Get(), o.PerformSourceSideDeduplication.IsSet()
}

// HasPerformSourceSideDeduplication returns a boolean if a field has been set.
func (o *PhysicalFileProtectionGroupParams) HasPerformSourceSideDeduplication() bool {
	if o != nil && o.PerformSourceSideDeduplication.IsSet() {
		return true
	}

	return false
}

// SetPerformSourceSideDeduplication gets a reference to the given NullableBool and assigns it to the PerformSourceSideDeduplication field.
func (o *PhysicalFileProtectionGroupParams) SetPerformSourceSideDeduplication(v bool) {
	o.PerformSourceSideDeduplication.Set(&v)
}
// SetPerformSourceSideDeduplicationNil sets the value for PerformSourceSideDeduplication to be an explicit nil
func (o *PhysicalFileProtectionGroupParams) SetPerformSourceSideDeduplicationNil() {
	o.PerformSourceSideDeduplication.Set(nil)
}

// UnsetPerformSourceSideDeduplication ensures that no value is present for PerformSourceSideDeduplication, not even an explicit nil
func (o *PhysicalFileProtectionGroupParams) UnsetPerformSourceSideDeduplication() {
	o.PerformSourceSideDeduplication.Unset()
}

// GetQuiesce returns the Quiesce field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalFileProtectionGroupParams) GetQuiesce() bool {
	if o == nil || o.Quiesce.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Quiesce.Get()
}

// GetQuiesceOk returns a tuple with the Quiesce field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalFileProtectionGroupParams) GetQuiesceOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Quiesce.Get(), o.Quiesce.IsSet()
}

// HasQuiesce returns a boolean if a field has been set.
func (o *PhysicalFileProtectionGroupParams) HasQuiesce() bool {
	if o != nil && o.Quiesce.IsSet() {
		return true
	}

	return false
}

// SetQuiesce gets a reference to the given NullableBool and assigns it to the Quiesce field.
func (o *PhysicalFileProtectionGroupParams) SetQuiesce(v bool) {
	o.Quiesce.Set(&v)
}
// SetQuiesceNil sets the value for Quiesce to be an explicit nil
func (o *PhysicalFileProtectionGroupParams) SetQuiesceNil() {
	o.Quiesce.Set(nil)
}

// UnsetQuiesce ensures that no value is present for Quiesce, not even an explicit nil
func (o *PhysicalFileProtectionGroupParams) UnsetQuiesce() {
	o.Quiesce.Unset()
}

// GetContinueOnQuiesceFailure returns the ContinueOnQuiesceFailure field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalFileProtectionGroupParams) GetContinueOnQuiesceFailure() bool {
	if o == nil || o.ContinueOnQuiesceFailure.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ContinueOnQuiesceFailure.Get()
}

// GetContinueOnQuiesceFailureOk returns a tuple with the ContinueOnQuiesceFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalFileProtectionGroupParams) GetContinueOnQuiesceFailureOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ContinueOnQuiesceFailure.Get(), o.ContinueOnQuiesceFailure.IsSet()
}

// HasContinueOnQuiesceFailure returns a boolean if a field has been set.
func (o *PhysicalFileProtectionGroupParams) HasContinueOnQuiesceFailure() bool {
	if o != nil && o.ContinueOnQuiesceFailure.IsSet() {
		return true
	}

	return false
}

// SetContinueOnQuiesceFailure gets a reference to the given NullableBool and assigns it to the ContinueOnQuiesceFailure field.
func (o *PhysicalFileProtectionGroupParams) SetContinueOnQuiesceFailure(v bool) {
	o.ContinueOnQuiesceFailure.Set(&v)
}
// SetContinueOnQuiesceFailureNil sets the value for ContinueOnQuiesceFailure to be an explicit nil
func (o *PhysicalFileProtectionGroupParams) SetContinueOnQuiesceFailureNil() {
	o.ContinueOnQuiesceFailure.Set(nil)
}

// UnsetContinueOnQuiesceFailure ensures that no value is present for ContinueOnQuiesceFailure, not even an explicit nil
func (o *PhysicalFileProtectionGroupParams) UnsetContinueOnQuiesceFailure() {
	o.ContinueOnQuiesceFailure.Unset()
}

// GetPrePostScript returns the PrePostScript field value if set, zero value otherwise.
func (o *PhysicalFileProtectionGroupParams) GetPrePostScript() PrePostScriptParams {
	if o == nil || o.PrePostScript == nil {
		var ret PrePostScriptParams
		return ret
	}
	return *o.PrePostScript
}

// GetPrePostScriptOk returns a tuple with the PrePostScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalFileProtectionGroupParams) GetPrePostScriptOk() (*PrePostScriptParams, bool) {
	if o == nil || o.PrePostScript == nil {
		return nil, false
	}
	return o.PrePostScript, true
}

// HasPrePostScript returns a boolean if a field has been set.
func (o *PhysicalFileProtectionGroupParams) HasPrePostScript() bool {
	if o != nil && o.PrePostScript != nil {
		return true
	}

	return false
}

// SetPrePostScript gets a reference to the given PrePostScriptParams and assigns it to the PrePostScript field.
func (o *PhysicalFileProtectionGroupParams) SetPrePostScript(v PrePostScriptParams) {
	o.PrePostScript = &v
}

// GetDedupExclusionSourceIds returns the DedupExclusionSourceIds field value if set, zero value otherwise.
func (o *PhysicalFileProtectionGroupParams) GetDedupExclusionSourceIds() []int64 {
	if o == nil || o.DedupExclusionSourceIds == nil {
		var ret []int64
		return ret
	}
	return *o.DedupExclusionSourceIds
}

// GetDedupExclusionSourceIdsOk returns a tuple with the DedupExclusionSourceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalFileProtectionGroupParams) GetDedupExclusionSourceIdsOk() (*[]int64, bool) {
	if o == nil || o.DedupExclusionSourceIds == nil {
		return nil, false
	}
	return o.DedupExclusionSourceIds, true
}

// HasDedupExclusionSourceIds returns a boolean if a field has been set.
func (o *PhysicalFileProtectionGroupParams) HasDedupExclusionSourceIds() bool {
	if o != nil && o.DedupExclusionSourceIds != nil {
		return true
	}

	return false
}

// SetDedupExclusionSourceIds gets a reference to the given []int64 and assigns it to the DedupExclusionSourceIds field.
func (o *PhysicalFileProtectionGroupParams) SetDedupExclusionSourceIds(v []int64) {
	o.DedupExclusionSourceIds = &v
}

// GetGlobalExcludePaths returns the GlobalExcludePaths field value if set, zero value otherwise.
func (o *PhysicalFileProtectionGroupParams) GetGlobalExcludePaths() []string {
	if o == nil || o.GlobalExcludePaths == nil {
		var ret []string
		return ret
	}
	return *o.GlobalExcludePaths
}

// GetGlobalExcludePathsOk returns a tuple with the GlobalExcludePaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalFileProtectionGroupParams) GetGlobalExcludePathsOk() (*[]string, bool) {
	if o == nil || o.GlobalExcludePaths == nil {
		return nil, false
	}
	return o.GlobalExcludePaths, true
}

// HasGlobalExcludePaths returns a boolean if a field has been set.
func (o *PhysicalFileProtectionGroupParams) HasGlobalExcludePaths() bool {
	if o != nil && o.GlobalExcludePaths != nil {
		return true
	}

	return false
}

// SetGlobalExcludePaths gets a reference to the given []string and assigns it to the GlobalExcludePaths field.
func (o *PhysicalFileProtectionGroupParams) SetGlobalExcludePaths(v []string) {
	o.GlobalExcludePaths = &v
}

func (o PhysicalFileProtectionGroupParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["objects"] = o.Objects
	}
	if o.IndexingPolicy != nil {
		toSerialize["indexingPolicy"] = o.IndexingPolicy
	}
	if o.PerformSourceSideDeduplication.IsSet() {
		toSerialize["performSourceSideDeduplication"] = o.PerformSourceSideDeduplication.Get()
	}
	if o.Quiesce.IsSet() {
		toSerialize["quiesce"] = o.Quiesce.Get()
	}
	if o.ContinueOnQuiesceFailure.IsSet() {
		toSerialize["continueOnQuiesceFailure"] = o.ContinueOnQuiesceFailure.Get()
	}
	if o.PrePostScript != nil {
		toSerialize["prePostScript"] = o.PrePostScript
	}
	if o.DedupExclusionSourceIds != nil {
		toSerialize["dedupExclusionSourceIds"] = o.DedupExclusionSourceIds
	}
	if o.GlobalExcludePaths != nil {
		toSerialize["globalExcludePaths"] = o.GlobalExcludePaths
	}
	return json.Marshal(toSerialize)
}

type NullablePhysicalFileProtectionGroupParams struct {
	value *PhysicalFileProtectionGroupParams
	isSet bool
}

func (v NullablePhysicalFileProtectionGroupParams) Get() *PhysicalFileProtectionGroupParams {
	return v.value
}

func (v *NullablePhysicalFileProtectionGroupParams) Set(val *PhysicalFileProtectionGroupParams) {
	v.value = val
	v.isSet = true
}

func (v NullablePhysicalFileProtectionGroupParams) IsSet() bool {
	return v.isSet
}

func (v *NullablePhysicalFileProtectionGroupParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhysicalFileProtectionGroupParams(val *PhysicalFileProtectionGroupParams) *NullablePhysicalFileProtectionGroupParams {
	return &NullablePhysicalFileProtectionGroupParams{value: val, isSet: true}
}

func (v NullablePhysicalFileProtectionGroupParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhysicalFileProtectionGroupParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o PhysicalFileProtectionGroupParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}