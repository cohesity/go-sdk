/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// WeekDays Week Days type.
type WeekDays struct {
	// Specifies Week Days type.
	WeekDays *string `json:"weekDays,omitempty"`
}

// NewWeekDays instantiates a new WeekDays object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWeekDays() *WeekDays {
	this := WeekDays{}
	return &this
}

// NewWeekDaysWithDefaults instantiates a new WeekDays object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWeekDaysWithDefaults() *WeekDays {
	this := WeekDays{}
	return &this
}

// GetWeekDays returns the WeekDays field value if set, zero value otherwise.
func (o *WeekDays) GetWeekDays() string {
	if o == nil || o.WeekDays == nil {
		var ret string
		return ret
	}
	return *o.WeekDays
}

// GetWeekDaysOk returns a tuple with the WeekDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WeekDays) GetWeekDaysOk() (*string, bool) {
	if o == nil || o.WeekDays == nil {
		return nil, false
	}
	return o.WeekDays, true
}

// HasWeekDays returns a boolean if a field has been set.
func (o *WeekDays) HasWeekDays() bool {
	if o != nil && o.WeekDays != nil {
		return true
	}

	return false
}

// SetWeekDays gets a reference to the given string and assigns it to the WeekDays field.
func (o *WeekDays) SetWeekDays(v string) {
	o.WeekDays = &v
}

func (o WeekDays) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.WeekDays != nil {
		toSerialize["weekDays"] = o.WeekDays
	}
	return json.Marshal(toSerialize)
}

type NullableWeekDays struct {
	value *WeekDays
	isSet bool
}

func (v NullableWeekDays) Get() *WeekDays {
	return v.value
}

func (v *NullableWeekDays) Set(val *WeekDays) {
	v.value = val
	v.isSet = true
}

func (v NullableWeekDays) IsSet() bool {
	return v.isSet
}

func (v *NullableWeekDays) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWeekDays(val *WeekDays) *NullableWeekDays {
	return &NullableWeekDays{value: val, isSet: true}
}

func (v NullableWeekDays) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWeekDays) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o WeekDays) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}