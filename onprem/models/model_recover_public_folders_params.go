/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// RecoverPublicFoldersParams Specifies the parameters to recover Office 365 Public Folders.
type RecoverPublicFoldersParams struct {
	// Specifies a list of RootPublicFolder params associated with the objects to recover.
	RootPublicFolders []RootPublicFolderParam `json:"rootPublicFolders"`
	// Specifies the target RootPublicFolder to recover to. If not specified, the objects will be recovered to original location.
	TargetRootPublicFolder NullableRecoveryObjectIdentifier `json:"targetRootPublicFolder,omitempty"`
	// Specifies the path to the target folder.
	TargetFolderPath NullableString `json:"targetFolderPath,omitempty"`
	// Specifies whether to continue recovering other Public Folders if one of Public Folder failed to recover. Default value is false.
	ContinueOnError NullableBool `json:"continueOnError,omitempty"`
}

// NewRecoverPublicFoldersParams instantiates a new RecoverPublicFoldersParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverPublicFoldersParams(rootPublicFolders []RootPublicFolderParam) *RecoverPublicFoldersParams {
	this := RecoverPublicFoldersParams{}
	this.RootPublicFolders = rootPublicFolders
	return &this
}

// NewRecoverPublicFoldersParamsWithDefaults instantiates a new RecoverPublicFoldersParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverPublicFoldersParamsWithDefaults() *RecoverPublicFoldersParams {
	this := RecoverPublicFoldersParams{}
	return &this
}

// GetRootPublicFolders returns the RootPublicFolders field value
// If the value is explicit nil, the zero value for []RootPublicFolderParam will be returned
func (o *RecoverPublicFoldersParams) GetRootPublicFolders() []RootPublicFolderParam {
	if o == nil {
		var ret []RootPublicFolderParam
		return ret
	}

	return o.RootPublicFolders
}

// GetRootPublicFoldersOk returns a tuple with the RootPublicFolders field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverPublicFoldersParams) GetRootPublicFoldersOk() (*[]RootPublicFolderParam, bool) {
	if o == nil || o.RootPublicFolders == nil {
		return nil, false
	}
	return &o.RootPublicFolders, true
}

// SetRootPublicFolders sets field value
func (o *RecoverPublicFoldersParams) SetRootPublicFolders(v []RootPublicFolderParam) {
	o.RootPublicFolders = v
}

// GetTargetRootPublicFolder returns the TargetRootPublicFolder field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverPublicFoldersParams) GetTargetRootPublicFolder() RecoveryObjectIdentifier {
	if o == nil || o.TargetRootPublicFolder.Get() == nil {
		var ret RecoveryObjectIdentifier
		return ret
	}
	return *o.TargetRootPublicFolder.Get()
}

// GetTargetRootPublicFolderOk returns a tuple with the TargetRootPublicFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverPublicFoldersParams) GetTargetRootPublicFolderOk() (*RecoveryObjectIdentifier, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetRootPublicFolder.Get(), o.TargetRootPublicFolder.IsSet()
}

// HasTargetRootPublicFolder returns a boolean if a field has been set.
func (o *RecoverPublicFoldersParams) HasTargetRootPublicFolder() bool {
	if o != nil && o.TargetRootPublicFolder.IsSet() {
		return true
	}

	return false
}

// SetTargetRootPublicFolder gets a reference to the given NullableRecoveryObjectIdentifier and assigns it to the TargetRootPublicFolder field.
func (o *RecoverPublicFoldersParams) SetTargetRootPublicFolder(v RecoveryObjectIdentifier) {
	o.TargetRootPublicFolder.Set(&v)
}
// SetTargetRootPublicFolderNil sets the value for TargetRootPublicFolder to be an explicit nil
func (o *RecoverPublicFoldersParams) SetTargetRootPublicFolderNil() {
	o.TargetRootPublicFolder.Set(nil)
}

// UnsetTargetRootPublicFolder ensures that no value is present for TargetRootPublicFolder, not even an explicit nil
func (o *RecoverPublicFoldersParams) UnsetTargetRootPublicFolder() {
	o.TargetRootPublicFolder.Unset()
}

// GetTargetFolderPath returns the TargetFolderPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverPublicFoldersParams) GetTargetFolderPath() string {
	if o == nil || o.TargetFolderPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.TargetFolderPath.Get()
}

// GetTargetFolderPathOk returns a tuple with the TargetFolderPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverPublicFoldersParams) GetTargetFolderPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetFolderPath.Get(), o.TargetFolderPath.IsSet()
}

// HasTargetFolderPath returns a boolean if a field has been set.
func (o *RecoverPublicFoldersParams) HasTargetFolderPath() bool {
	if o != nil && o.TargetFolderPath.IsSet() {
		return true
	}

	return false
}

// SetTargetFolderPath gets a reference to the given NullableString and assigns it to the TargetFolderPath field.
func (o *RecoverPublicFoldersParams) SetTargetFolderPath(v string) {
	o.TargetFolderPath.Set(&v)
}
// SetTargetFolderPathNil sets the value for TargetFolderPath to be an explicit nil
func (o *RecoverPublicFoldersParams) SetTargetFolderPathNil() {
	o.TargetFolderPath.Set(nil)
}

// UnsetTargetFolderPath ensures that no value is present for TargetFolderPath, not even an explicit nil
func (o *RecoverPublicFoldersParams) UnsetTargetFolderPath() {
	o.TargetFolderPath.Unset()
}

// GetContinueOnError returns the ContinueOnError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverPublicFoldersParams) GetContinueOnError() bool {
	if o == nil || o.ContinueOnError.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ContinueOnError.Get()
}

// GetContinueOnErrorOk returns a tuple with the ContinueOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverPublicFoldersParams) GetContinueOnErrorOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ContinueOnError.Get(), o.ContinueOnError.IsSet()
}

// HasContinueOnError returns a boolean if a field has been set.
func (o *RecoverPublicFoldersParams) HasContinueOnError() bool {
	if o != nil && o.ContinueOnError.IsSet() {
		return true
	}

	return false
}

// SetContinueOnError gets a reference to the given NullableBool and assigns it to the ContinueOnError field.
func (o *RecoverPublicFoldersParams) SetContinueOnError(v bool) {
	o.ContinueOnError.Set(&v)
}
// SetContinueOnErrorNil sets the value for ContinueOnError to be an explicit nil
func (o *RecoverPublicFoldersParams) SetContinueOnErrorNil() {
	o.ContinueOnError.Set(nil)
}

// UnsetContinueOnError ensures that no value is present for ContinueOnError, not even an explicit nil
func (o *RecoverPublicFoldersParams) UnsetContinueOnError() {
	o.ContinueOnError.Unset()
}

func (o RecoverPublicFoldersParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RootPublicFolders != nil {
		toSerialize["rootPublicFolders"] = o.RootPublicFolders
	}
	if o.TargetRootPublicFolder.IsSet() {
		toSerialize["targetRootPublicFolder"] = o.TargetRootPublicFolder.Get()
	}
	if o.TargetFolderPath.IsSet() {
		toSerialize["targetFolderPath"] = o.TargetFolderPath.Get()
	}
	if o.ContinueOnError.IsSet() {
		toSerialize["continueOnError"] = o.ContinueOnError.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRecoverPublicFoldersParams struct {
	value *RecoverPublicFoldersParams
	isSet bool
}

func (v NullableRecoverPublicFoldersParams) Get() *RecoverPublicFoldersParams {
	return v.value
}

func (v *NullableRecoverPublicFoldersParams) Set(val *RecoverPublicFoldersParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverPublicFoldersParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverPublicFoldersParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverPublicFoldersParams(val *RecoverPublicFoldersParams) *NullableRecoverPublicFoldersParams {
	return &NullableRecoverPublicFoldersParams{value: val, isSet: true}
}

func (v NullableRecoverPublicFoldersParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverPublicFoldersParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o RecoverPublicFoldersParams) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}