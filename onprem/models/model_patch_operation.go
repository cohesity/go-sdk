/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package onprem
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/onprem/utils"
	"fmt"
)

var _ = NullableBool{}

// PatchOperation Specifies a patch operation.
type PatchOperation struct {
	// Specifies the name of the service.
	Service *string `json:"service,omitempty"`
	// Specifies the description of the service.
	Component *string `json:"component,omitempty"`
	// Specifies the version of the patch.
	Version *string `json:"version,omitempty"`
	// Specifies the version it replaced.
	VersionReplaced *string `json:"versionReplaced,omitempty"`
	// Specifies what patch management operation was performed
	Operation *string `json:"operation,omitempty"`
	// Specifies the time when the patch operation was done in Unix epoch in milliseconds.
	OperationTimeMsecs *int64 `json:"operationTimeMsecs,omitempty"`
	// Specifies the user who performed the operation.
	User *string `json:"user,omitempty"`
	// Specifies the domain of the user.
	Domain *string `json:"domain,omitempty"`
}

// NewPatchOperation instantiates a new PatchOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchOperation() *PatchOperation {
	this := PatchOperation{}
	return &this
}

// NewPatchOperationWithDefaults instantiates a new PatchOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchOperationWithDefaults() *PatchOperation {
	this := PatchOperation{}
	return &this
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *PatchOperation) GetService() string {
	if o == nil || o.Service == nil {
		var ret string
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchOperation) GetServiceOk() (*string, bool) {
	if o == nil || o.Service == nil {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *PatchOperation) HasService() bool {
	if o != nil && o.Service != nil {
		return true
	}

	return false
}

// SetService gets a reference to the given string and assigns it to the Service field.
func (o *PatchOperation) SetService(v string) {
	o.Service = &v
}

// GetComponent returns the Component field value if set, zero value otherwise.
func (o *PatchOperation) GetComponent() string {
	if o == nil || o.Component == nil {
		var ret string
		return ret
	}
	return *o.Component
}

// GetComponentOk returns a tuple with the Component field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchOperation) GetComponentOk() (*string, bool) {
	if o == nil || o.Component == nil {
		return nil, false
	}
	return o.Component, true
}

// HasComponent returns a boolean if a field has been set.
func (o *PatchOperation) HasComponent() bool {
	if o != nil && o.Component != nil {
		return true
	}

	return false
}

// SetComponent gets a reference to the given string and assigns it to the Component field.
func (o *PatchOperation) SetComponent(v string) {
	o.Component = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *PatchOperation) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchOperation) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *PatchOperation) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *PatchOperation) SetVersion(v string) {
	o.Version = &v
}

// GetVersionReplaced returns the VersionReplaced field value if set, zero value otherwise.
func (o *PatchOperation) GetVersionReplaced() string {
	if o == nil || o.VersionReplaced == nil {
		var ret string
		return ret
	}
	return *o.VersionReplaced
}

// GetVersionReplacedOk returns a tuple with the VersionReplaced field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchOperation) GetVersionReplacedOk() (*string, bool) {
	if o == nil || o.VersionReplaced == nil {
		return nil, false
	}
	return o.VersionReplaced, true
}

// HasVersionReplaced returns a boolean if a field has been set.
func (o *PatchOperation) HasVersionReplaced() bool {
	if o != nil && o.VersionReplaced != nil {
		return true
	}

	return false
}

// SetVersionReplaced gets a reference to the given string and assigns it to the VersionReplaced field.
func (o *PatchOperation) SetVersionReplaced(v string) {
	o.VersionReplaced = &v
}

// GetOperation returns the Operation field value if set, zero value otherwise.
func (o *PatchOperation) GetOperation() string {
	if o == nil || o.Operation == nil {
		var ret string
		return ret
	}
	return *o.Operation
}

// GetOperationOk returns a tuple with the Operation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchOperation) GetOperationOk() (*string, bool) {
	if o == nil || o.Operation == nil {
		return nil, false
	}
	return o.Operation, true
}

// HasOperation returns a boolean if a field has been set.
func (o *PatchOperation) HasOperation() bool {
	if o != nil && o.Operation != nil {
		return true
	}

	return false
}

// SetOperation gets a reference to the given string and assigns it to the Operation field.
func (o *PatchOperation) SetOperation(v string) {
	o.Operation = &v
}

// GetOperationTimeMsecs returns the OperationTimeMsecs field value if set, zero value otherwise.
func (o *PatchOperation) GetOperationTimeMsecs() int64 {
	if o == nil || o.OperationTimeMsecs == nil {
		var ret int64
		return ret
	}
	return *o.OperationTimeMsecs
}

// GetOperationTimeMsecsOk returns a tuple with the OperationTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchOperation) GetOperationTimeMsecsOk() (*int64, bool) {
	if o == nil || o.OperationTimeMsecs == nil {
		return nil, false
	}
	return o.OperationTimeMsecs, true
}

// HasOperationTimeMsecs returns a boolean if a field has been set.
func (o *PatchOperation) HasOperationTimeMsecs() bool {
	if o != nil && o.OperationTimeMsecs != nil {
		return true
	}

	return false
}

// SetOperationTimeMsecs gets a reference to the given int64 and assigns it to the OperationTimeMsecs field.
func (o *PatchOperation) SetOperationTimeMsecs(v int64) {
	o.OperationTimeMsecs = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *PatchOperation) GetUser() string {
	if o == nil || o.User == nil {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchOperation) GetUserOk() (*string, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *PatchOperation) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *PatchOperation) SetUser(v string) {
	o.User = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *PatchOperation) GetDomain() string {
	if o == nil || o.Domain == nil {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchOperation) GetDomainOk() (*string, bool) {
	if o == nil || o.Domain == nil {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *PatchOperation) HasDomain() bool {
	if o != nil && o.Domain != nil {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *PatchOperation) SetDomain(v string) {
	o.Domain = &v
}

func (o PatchOperation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Service != nil {
		toSerialize["service"] = o.Service
	}
	if o.Component != nil {
		toSerialize["component"] = o.Component
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.VersionReplaced != nil {
		toSerialize["versionReplaced"] = o.VersionReplaced
	}
	if o.Operation != nil {
		toSerialize["operation"] = o.Operation
	}
	if o.OperationTimeMsecs != nil {
		toSerialize["operationTimeMsecs"] = o.OperationTimeMsecs
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.Domain != nil {
		toSerialize["domain"] = o.Domain
	}
	return json.Marshal(toSerialize)
}

type NullablePatchOperation struct {
	value *PatchOperation
	isSet bool
}

func (v NullablePatchOperation) Get() *PatchOperation {
	return v.value
}

func (v *NullablePatchOperation) Set(val *PatchOperation) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchOperation) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchOperation(val *PatchOperation) *NullablePatchOperation {
	return &NullablePatchOperation{value: val, isSet: true}
}

func (v NullablePatchOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}




func (o PatchOperation) Print() {
		if byteArray, err := o.MarshalJSON(); err != nil {
				fmt.Println(err)
		} else {
				fmt.Println(string(byteArray))
		}
}