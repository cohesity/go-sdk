/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// LockFileParams Specifies the parameters to lock a file in a view.
type LockFileParams struct {
	// Specifies a definite timestamp in milliseconds for retaining the file, or to extend it's expiry timestamp.
	ExpiryTimestampMsecs NullableInt32 `json:"expiryTimestampMsecs,omitempty"`
	// Specifies the file path that needs to be locked.
	Path NullableString `json:"path,omitempty"`
}

// NewLockFileParams instantiates a new LockFileParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLockFileParams() *LockFileParams {
	this := LockFileParams{}
	return &this
}

// NewLockFileParamsWithDefaults instantiates a new LockFileParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLockFileParamsWithDefaults() *LockFileParams {
	this := LockFileParams{}
	return &this
}

// GetExpiryTimestampMsecs returns the ExpiryTimestampMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LockFileParams) GetExpiryTimestampMsecs() int32 {
	if o == nil || o.ExpiryTimestampMsecs.Get() == nil {
		var ret int32
		return ret
	}
	return *o.ExpiryTimestampMsecs.Get()
}

// GetExpiryTimestampMsecsOk returns a tuple with the ExpiryTimestampMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LockFileParams) GetExpiryTimestampMsecsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExpiryTimestampMsecs.Get(), o.ExpiryTimestampMsecs.IsSet()
}

// HasExpiryTimestampMsecs returns a boolean if a field has been set.
func (o *LockFileParams) HasExpiryTimestampMsecs() bool {
	if o != nil && o.ExpiryTimestampMsecs.IsSet() {
		return true
	}

	return false
}

// SetExpiryTimestampMsecs gets a reference to the given NullableInt32 and assigns it to the ExpiryTimestampMsecs field.
func (o *LockFileParams) SetExpiryTimestampMsecs(v int32) {
	o.ExpiryTimestampMsecs.Set(&v)
}
// SetExpiryTimestampMsecsNil sets the value for ExpiryTimestampMsecs to be an explicit nil
func (o *LockFileParams) SetExpiryTimestampMsecsNil() {
	o.ExpiryTimestampMsecs.Set(nil)
}

// UnsetExpiryTimestampMsecs ensures that no value is present for ExpiryTimestampMsecs, not even an explicit nil
func (o *LockFileParams) UnsetExpiryTimestampMsecs() {
	o.ExpiryTimestampMsecs.Unset()
}

// GetPath returns the Path field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LockFileParams) GetPath() string {
	if o == nil || o.Path.Get() == nil {
		var ret string
		return ret
	}
	return *o.Path.Get()
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LockFileParams) GetPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Path.Get(), o.Path.IsSet()
}

// HasPath returns a boolean if a field has been set.
func (o *LockFileParams) HasPath() bool {
	if o != nil && o.Path.IsSet() {
		return true
	}

	return false
}

// SetPath gets a reference to the given NullableString and assigns it to the Path field.
func (o *LockFileParams) SetPath(v string) {
	o.Path.Set(&v)
}
// SetPathNil sets the value for Path to be an explicit nil
func (o *LockFileParams) SetPathNil() {
	o.Path.Set(nil)
}

// UnsetPath ensures that no value is present for Path, not even an explicit nil
func (o *LockFileParams) UnsetPath() {
	o.Path.Unset()
}

func (o LockFileParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExpiryTimestampMsecs.IsSet() {
		toSerialize["expiryTimestampMsecs"] = o.ExpiryTimestampMsecs.Get()
	}
	if o.Path.IsSet() {
		toSerialize["path"] = o.Path.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableLockFileParams struct {
	value *LockFileParams
	isSet bool
}

func (v NullableLockFileParams) Get() *LockFileParams {
	return v.value
}

func (v *NullableLockFileParams) Set(val *LockFileParams) {
	v.value = val
	v.isSet = true
}

func (v NullableLockFileParams) IsSet() bool {
	return v.isSet
}

func (v *NullableLockFileParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLockFileParams(val *LockFileParams) *NullableLockFileParams {
	return &NullableLockFileParams{value: val, isSet: true}
}

func (v NullableLockFileParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLockFileParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


