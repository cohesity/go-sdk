/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// DeployCertParameters Specifies the parameters used to generate and deploy a certificate.
type DeployCertParameters struct {
	// Specifies the filename of the certificate.
	CertFileName NullableString `json:"certFileName,omitempty"`
	// Specifies the list of all hosts on which the certificate is to be deployed.
	HostsInfoList []HostInfo `json:"hostsInfoList,omitempty"`
	// Specifies the type of the host such as 'kSapHana', 'kSapOracle', etc. Specifies the host type of host for generating and deploying a Certificate. 'kOther' indicates it is any of the other hosts. 'kSapOracle' indicates it is a SAP Oracle host. 'kSapHana' indicates it is a SAP HANA host.
	Type NullableString `json:"type,omitempty"`
	// Specifies the number of days after which the certificate will expire. The user has to input the number of days (from the current date) till when the certificate is valid.
	ValidDays NullableInt64 `json:"validDays,omitempty"`
}

// NewDeployCertParameters instantiates a new DeployCertParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeployCertParameters() *DeployCertParameters {
	this := DeployCertParameters{}
	return &this
}

// NewDeployCertParametersWithDefaults instantiates a new DeployCertParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeployCertParametersWithDefaults() *DeployCertParameters {
	this := DeployCertParameters{}
	return &this
}

// GetCertFileName returns the CertFileName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeployCertParameters) GetCertFileName() string {
	if o == nil || o.CertFileName.Get() == nil {
		var ret string
		return ret
	}
	return *o.CertFileName.Get()
}

// GetCertFileNameOk returns a tuple with the CertFileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeployCertParameters) GetCertFileNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CertFileName.Get(), o.CertFileName.IsSet()
}

// HasCertFileName returns a boolean if a field has been set.
func (o *DeployCertParameters) HasCertFileName() bool {
	if o != nil && o.CertFileName.IsSet() {
		return true
	}

	return false
}

// SetCertFileName gets a reference to the given NullableString and assigns it to the CertFileName field.
func (o *DeployCertParameters) SetCertFileName(v string) {
	o.CertFileName.Set(&v)
}
// SetCertFileNameNil sets the value for CertFileName to be an explicit nil
func (o *DeployCertParameters) SetCertFileNameNil() {
	o.CertFileName.Set(nil)
}

// UnsetCertFileName ensures that no value is present for CertFileName, not even an explicit nil
func (o *DeployCertParameters) UnsetCertFileName() {
	o.CertFileName.Unset()
}

// GetHostsInfoList returns the HostsInfoList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeployCertParameters) GetHostsInfoList() []HostInfo {
	if o == nil  {
		var ret []HostInfo
		return ret
	}
	return o.HostsInfoList
}

// GetHostsInfoListOk returns a tuple with the HostsInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeployCertParameters) GetHostsInfoListOk() (*[]HostInfo, bool) {
	if o == nil || o.HostsInfoList == nil {
		return nil, false
	}
	return &o.HostsInfoList, true
}

// HasHostsInfoList returns a boolean if a field has been set.
func (o *DeployCertParameters) HasHostsInfoList() bool {
	if o != nil && o.HostsInfoList != nil {
		return true
	}

	return false
}

// SetHostsInfoList gets a reference to the given []HostInfo and assigns it to the HostsInfoList field.
func (o *DeployCertParameters) SetHostsInfoList(v []HostInfo) {
	o.HostsInfoList = v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeployCertParameters) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeployCertParameters) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *DeployCertParameters) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *DeployCertParameters) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *DeployCertParameters) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *DeployCertParameters) UnsetType() {
	o.Type.Unset()
}

// GetValidDays returns the ValidDays field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeployCertParameters) GetValidDays() int64 {
	if o == nil || o.ValidDays.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ValidDays.Get()
}

// GetValidDaysOk returns a tuple with the ValidDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeployCertParameters) GetValidDaysOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ValidDays.Get(), o.ValidDays.IsSet()
}

// HasValidDays returns a boolean if a field has been set.
func (o *DeployCertParameters) HasValidDays() bool {
	if o != nil && o.ValidDays.IsSet() {
		return true
	}

	return false
}

// SetValidDays gets a reference to the given NullableInt64 and assigns it to the ValidDays field.
func (o *DeployCertParameters) SetValidDays(v int64) {
	o.ValidDays.Set(&v)
}
// SetValidDaysNil sets the value for ValidDays to be an explicit nil
func (o *DeployCertParameters) SetValidDaysNil() {
	o.ValidDays.Set(nil)
}

// UnsetValidDays ensures that no value is present for ValidDays, not even an explicit nil
func (o *DeployCertParameters) UnsetValidDays() {
	o.ValidDays.Unset()
}

func (o DeployCertParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CertFileName.IsSet() {
		toSerialize["certFileName"] = o.CertFileName.Get()
	}
	if o.HostsInfoList != nil {
		toSerialize["hostsInfoList"] = o.HostsInfoList
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.ValidDays.IsSet() {
		toSerialize["validDays"] = o.ValidDays.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDeployCertParameters struct {
	value *DeployCertParameters
	isSet bool
}

func (v NullableDeployCertParameters) Get() *DeployCertParameters {
	return v.value
}

func (v *NullableDeployCertParameters) Set(val *DeployCertParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableDeployCertParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableDeployCertParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeployCertParameters(val *DeployCertParameters) *NullableDeployCertParameters {
	return &NullableDeployCertParameters{value: val, isSet: true}
}

func (v NullableDeployCertParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeployCertParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


