/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// PhysicalProtectionSource Specifies a Protection Source in a Physical environment.
type PhysicalProtectionSource struct {
	// Array of Agents on the Physical Protection Source.  Specifiles the agents running on the Physical Protection Source and the status information.
	Agents []AgentInformation `json:"agents,omitempty"`
	// Specifies the hostname.
	HostName NullableString `json:"hostName,omitempty"`
	// Specifies the environment type for the host. 'kLinux' indicates the Linux operating system. 'kWindows' indicates the Microsoft Windows operating system. 'kAix' indicates the IBM AIX operating system. 'kSolaris' indicates the Oracle Solaris operating system. 'kSapHana' indicates the Sap Hana database system developed by SAP SE. 'kOther' indicates the other types of operating system.
	HostType NullableString `json:"hostType,omitempty"`
	// Specifies a unique id of a Physical Protection Source. The id is unique across Cohesity Clusters.
	Id NullableUniversalId `json:"id,omitempty"`
	// Specifies the total memory on the host in bytes.
	MemorySizeBytes NullableInt64 `json:"memorySizeBytes,omitempty"`
	// Specifies a human readable name of the Protection Source.
	Name NullableString `json:"name,omitempty"`
	NetworkingInfo *NetworkingInformation `json:"networkingInfo,omitempty"`
	// Specifies the number of processors on the host.
	NumProcessors NullableInt64 `json:"numProcessors,omitempty"`
	// Specifies a human readable name of the OS of the Protection Source.
	OsName NullableString `json:"osName,omitempty"`
	// Specifies the type of managed Object in a Physical Protection Source. 'kGroup' indicates the EH container. 'kHost' indicates a single physical server. 'kWindowsCluster' indicates a Microsoft Windows cluster. 'kOracleRACCluster' indicates an Oracle Real Application Cluster(RAC). 'kOracleAPCluster' indicates an Oracle Active-Passive Cluster.
	Type NullableString `json:"type,omitempty"`
	// Specifies cluster version for VCS host.
	VcsVersion NullableString `json:"vcsVersion,omitempty"`
	// Array of Physical Volumes.  Specifies the volumes available on the physical host. These fields are populated only for the kPhysicalHost type.
	Volumes []PhysicalVolume `json:"volumes,omitempty"`
}

// NewPhysicalProtectionSource instantiates a new PhysicalProtectionSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhysicalProtectionSource() *PhysicalProtectionSource {
	this := PhysicalProtectionSource{}
	return &this
}

// NewPhysicalProtectionSourceWithDefaults instantiates a new PhysicalProtectionSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhysicalProtectionSourceWithDefaults() *PhysicalProtectionSource {
	this := PhysicalProtectionSource{}
	return &this
}

// GetAgents returns the Agents field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalProtectionSource) GetAgents() []AgentInformation {
	if o == nil  {
		var ret []AgentInformation
		return ret
	}
	return o.Agents
}

// GetAgentsOk returns a tuple with the Agents field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalProtectionSource) GetAgentsOk() (*[]AgentInformation, bool) {
	if o == nil || o.Agents == nil {
		return nil, false
	}
	return &o.Agents, true
}

// HasAgents returns a boolean if a field has been set.
func (o *PhysicalProtectionSource) HasAgents() bool {
	if o != nil && o.Agents != nil {
		return true
	}

	return false
}

// SetAgents gets a reference to the given []AgentInformation and assigns it to the Agents field.
func (o *PhysicalProtectionSource) SetAgents(v []AgentInformation) {
	o.Agents = v
}

// GetHostName returns the HostName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalProtectionSource) GetHostName() string {
	if o == nil || o.HostName.Get() == nil {
		var ret string
		return ret
	}
	return *o.HostName.Get()
}

// GetHostNameOk returns a tuple with the HostName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalProtectionSource) GetHostNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HostName.Get(), o.HostName.IsSet()
}

// HasHostName returns a boolean if a field has been set.
func (o *PhysicalProtectionSource) HasHostName() bool {
	if o != nil && o.HostName.IsSet() {
		return true
	}

	return false
}

// SetHostName gets a reference to the given NullableString and assigns it to the HostName field.
func (o *PhysicalProtectionSource) SetHostName(v string) {
	o.HostName.Set(&v)
}
// SetHostNameNil sets the value for HostName to be an explicit nil
func (o *PhysicalProtectionSource) SetHostNameNil() {
	o.HostName.Set(nil)
}

// UnsetHostName ensures that no value is present for HostName, not even an explicit nil
func (o *PhysicalProtectionSource) UnsetHostName() {
	o.HostName.Unset()
}

// GetHostType returns the HostType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalProtectionSource) GetHostType() string {
	if o == nil || o.HostType.Get() == nil {
		var ret string
		return ret
	}
	return *o.HostType.Get()
}

// GetHostTypeOk returns a tuple with the HostType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalProtectionSource) GetHostTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HostType.Get(), o.HostType.IsSet()
}

// HasHostType returns a boolean if a field has been set.
func (o *PhysicalProtectionSource) HasHostType() bool {
	if o != nil && o.HostType.IsSet() {
		return true
	}

	return false
}

// SetHostType gets a reference to the given NullableString and assigns it to the HostType field.
func (o *PhysicalProtectionSource) SetHostType(v string) {
	o.HostType.Set(&v)
}
// SetHostTypeNil sets the value for HostType to be an explicit nil
func (o *PhysicalProtectionSource) SetHostTypeNil() {
	o.HostType.Set(nil)
}

// UnsetHostType ensures that no value is present for HostType, not even an explicit nil
func (o *PhysicalProtectionSource) UnsetHostType() {
	o.HostType.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalProtectionSource) GetId() UniversalId {
	if o == nil || o.Id.Get() == nil {
		var ret UniversalId
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalProtectionSource) GetIdOk() (*UniversalId, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *PhysicalProtectionSource) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableUniversalId and assigns it to the Id field.
func (o *PhysicalProtectionSource) SetId(v UniversalId) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *PhysicalProtectionSource) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *PhysicalProtectionSource) UnsetId() {
	o.Id.Unset()
}

// GetMemorySizeBytes returns the MemorySizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalProtectionSource) GetMemorySizeBytes() int64 {
	if o == nil || o.MemorySizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.MemorySizeBytes.Get()
}

// GetMemorySizeBytesOk returns a tuple with the MemorySizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalProtectionSource) GetMemorySizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MemorySizeBytes.Get(), o.MemorySizeBytes.IsSet()
}

// HasMemorySizeBytes returns a boolean if a field has been set.
func (o *PhysicalProtectionSource) HasMemorySizeBytes() bool {
	if o != nil && o.MemorySizeBytes.IsSet() {
		return true
	}

	return false
}

// SetMemorySizeBytes gets a reference to the given NullableInt64 and assigns it to the MemorySizeBytes field.
func (o *PhysicalProtectionSource) SetMemorySizeBytes(v int64) {
	o.MemorySizeBytes.Set(&v)
}
// SetMemorySizeBytesNil sets the value for MemorySizeBytes to be an explicit nil
func (o *PhysicalProtectionSource) SetMemorySizeBytesNil() {
	o.MemorySizeBytes.Set(nil)
}

// UnsetMemorySizeBytes ensures that no value is present for MemorySizeBytes, not even an explicit nil
func (o *PhysicalProtectionSource) UnsetMemorySizeBytes() {
	o.MemorySizeBytes.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalProtectionSource) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalProtectionSource) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *PhysicalProtectionSource) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *PhysicalProtectionSource) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *PhysicalProtectionSource) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *PhysicalProtectionSource) UnsetName() {
	o.Name.Unset()
}

// GetNetworkingInfo returns the NetworkingInfo field value if set, zero value otherwise.
func (o *PhysicalProtectionSource) GetNetworkingInfo() NetworkingInformation {
	if o == nil || o.NetworkingInfo == nil {
		var ret NetworkingInformation
		return ret
	}
	return *o.NetworkingInfo
}

// GetNetworkingInfoOk returns a tuple with the NetworkingInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalProtectionSource) GetNetworkingInfoOk() (*NetworkingInformation, bool) {
	if o == nil || o.NetworkingInfo == nil {
		return nil, false
	}
	return o.NetworkingInfo, true
}

// HasNetworkingInfo returns a boolean if a field has been set.
func (o *PhysicalProtectionSource) HasNetworkingInfo() bool {
	if o != nil && o.NetworkingInfo != nil {
		return true
	}

	return false
}

// SetNetworkingInfo gets a reference to the given NetworkingInformation and assigns it to the NetworkingInfo field.
func (o *PhysicalProtectionSource) SetNetworkingInfo(v NetworkingInformation) {
	o.NetworkingInfo = &v
}

// GetNumProcessors returns the NumProcessors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalProtectionSource) GetNumProcessors() int64 {
	if o == nil || o.NumProcessors.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NumProcessors.Get()
}

// GetNumProcessorsOk returns a tuple with the NumProcessors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalProtectionSource) GetNumProcessorsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumProcessors.Get(), o.NumProcessors.IsSet()
}

// HasNumProcessors returns a boolean if a field has been set.
func (o *PhysicalProtectionSource) HasNumProcessors() bool {
	if o != nil && o.NumProcessors.IsSet() {
		return true
	}

	return false
}

// SetNumProcessors gets a reference to the given NullableInt64 and assigns it to the NumProcessors field.
func (o *PhysicalProtectionSource) SetNumProcessors(v int64) {
	o.NumProcessors.Set(&v)
}
// SetNumProcessorsNil sets the value for NumProcessors to be an explicit nil
func (o *PhysicalProtectionSource) SetNumProcessorsNil() {
	o.NumProcessors.Set(nil)
}

// UnsetNumProcessors ensures that no value is present for NumProcessors, not even an explicit nil
func (o *PhysicalProtectionSource) UnsetNumProcessors() {
	o.NumProcessors.Unset()
}

// GetOsName returns the OsName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalProtectionSource) GetOsName() string {
	if o == nil || o.OsName.Get() == nil {
		var ret string
		return ret
	}
	return *o.OsName.Get()
}

// GetOsNameOk returns a tuple with the OsName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalProtectionSource) GetOsNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OsName.Get(), o.OsName.IsSet()
}

// HasOsName returns a boolean if a field has been set.
func (o *PhysicalProtectionSource) HasOsName() bool {
	if o != nil && o.OsName.IsSet() {
		return true
	}

	return false
}

// SetOsName gets a reference to the given NullableString and assigns it to the OsName field.
func (o *PhysicalProtectionSource) SetOsName(v string) {
	o.OsName.Set(&v)
}
// SetOsNameNil sets the value for OsName to be an explicit nil
func (o *PhysicalProtectionSource) SetOsNameNil() {
	o.OsName.Set(nil)
}

// UnsetOsName ensures that no value is present for OsName, not even an explicit nil
func (o *PhysicalProtectionSource) UnsetOsName() {
	o.OsName.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalProtectionSource) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalProtectionSource) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *PhysicalProtectionSource) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *PhysicalProtectionSource) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *PhysicalProtectionSource) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *PhysicalProtectionSource) UnsetType() {
	o.Type.Unset()
}

// GetVcsVersion returns the VcsVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalProtectionSource) GetVcsVersion() string {
	if o == nil || o.VcsVersion.Get() == nil {
		var ret string
		return ret
	}
	return *o.VcsVersion.Get()
}

// GetVcsVersionOk returns a tuple with the VcsVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalProtectionSource) GetVcsVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VcsVersion.Get(), o.VcsVersion.IsSet()
}

// HasVcsVersion returns a boolean if a field has been set.
func (o *PhysicalProtectionSource) HasVcsVersion() bool {
	if o != nil && o.VcsVersion.IsSet() {
		return true
	}

	return false
}

// SetVcsVersion gets a reference to the given NullableString and assigns it to the VcsVersion field.
func (o *PhysicalProtectionSource) SetVcsVersion(v string) {
	o.VcsVersion.Set(&v)
}
// SetVcsVersionNil sets the value for VcsVersion to be an explicit nil
func (o *PhysicalProtectionSource) SetVcsVersionNil() {
	o.VcsVersion.Set(nil)
}

// UnsetVcsVersion ensures that no value is present for VcsVersion, not even an explicit nil
func (o *PhysicalProtectionSource) UnsetVcsVersion() {
	o.VcsVersion.Unset()
}

// GetVolumes returns the Volumes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalProtectionSource) GetVolumes() []PhysicalVolume {
	if o == nil  {
		var ret []PhysicalVolume
		return ret
	}
	return o.Volumes
}

// GetVolumesOk returns a tuple with the Volumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalProtectionSource) GetVolumesOk() (*[]PhysicalVolume, bool) {
	if o == nil || o.Volumes == nil {
		return nil, false
	}
	return &o.Volumes, true
}

// HasVolumes returns a boolean if a field has been set.
func (o *PhysicalProtectionSource) HasVolumes() bool {
	if o != nil && o.Volumes != nil {
		return true
	}

	return false
}

// SetVolumes gets a reference to the given []PhysicalVolume and assigns it to the Volumes field.
func (o *PhysicalProtectionSource) SetVolumes(v []PhysicalVolume) {
	o.Volumes = v
}

func (o PhysicalProtectionSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Agents != nil {
		toSerialize["agents"] = o.Agents
	}
	if o.HostName.IsSet() {
		toSerialize["hostName"] = o.HostName.Get()
	}
	if o.HostType.IsSet() {
		toSerialize["hostType"] = o.HostType.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.MemorySizeBytes.IsSet() {
		toSerialize["memorySizeBytes"] = o.MemorySizeBytes.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.NetworkingInfo != nil {
		toSerialize["networkingInfo"] = o.NetworkingInfo
	}
	if o.NumProcessors.IsSet() {
		toSerialize["numProcessors"] = o.NumProcessors.Get()
	}
	if o.OsName.IsSet() {
		toSerialize["osName"] = o.OsName.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.VcsVersion.IsSet() {
		toSerialize["vcsVersion"] = o.VcsVersion.Get()
	}
	if o.Volumes != nil {
		toSerialize["volumes"] = o.Volumes
	}
	return json.Marshal(toSerialize)
}

type NullablePhysicalProtectionSource struct {
	value *PhysicalProtectionSource
	isSet bool
}

func (v NullablePhysicalProtectionSource) Get() *PhysicalProtectionSource {
	return v.value
}

func (v *NullablePhysicalProtectionSource) Set(val *PhysicalProtectionSource) {
	v.value = val
	v.isSet = true
}

func (v NullablePhysicalProtectionSource) IsSet() bool {
	return v.isSet
}

func (v *NullablePhysicalProtectionSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhysicalProtectionSource(val *PhysicalProtectionSource) *NullablePhysicalProtectionSource {
	return &NullablePhysicalProtectionSource{value: val, isSet: true}
}

func (v NullablePhysicalProtectionSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhysicalProtectionSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


