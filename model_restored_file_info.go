/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// RestoredFileInfo struct for RestoredFileInfo
type RestoredFileInfo struct {
	// Full path of the file being restored: the actual file path without the disk. E.g.: \\Program Files\\App\\file.txt
	AbsolutePath NullableString `json:"absolutePath,omitempty"`
	// Disk information of where the source file is currently located.
	AttachedDiskId NullableInt32 `json:"attachedDiskId,omitempty"`
	// Disk partition to which the file belongs to.
	DiskPartitionId NullableInt32 `json:"diskPartitionId,omitempty"`
	// File system UUID on which file resides.
	FsUuid NullableString `json:"fsUuid,omitempty"`
	// Inode number of the file. This is needed for snapmirror restore workflow.
	InodeNumber NullableInt64 `json:"inodeNumber,omitempty"`
	// Whether the path points to a directory.
	IsDirectory NullableBool `json:"isDirectory,omitempty"`
	// This will be set to true for recovery workflows for non-simple volumes on Windows Dynamic Disks. In that case, we will use VolumeInfo instead of some of the details captured here (e.g. virtual_disk_file) for determining disk and volume related details.
	IsNonSimpleLdmVol NullableBool `json:"isNonSimpleLdmVol,omitempty"`
	// This must be set to a directory path if restore_to_original_paths is false and restore task has multiple files which are not desired to be restore to one common location. If this filed is populated, 'absolute_path' will be restored under this location. If this field is not populated all files in restore task will be restored to location specified in RestoreFilesPreferences.
	RestoreBaseDirectory NullableString `json:"restoreBaseDirectory,omitempty"`
	// Mount point of the volume on which the file to be restored is located. E.g.: c:\\temp\\vhd_mount_1234
	RestoreMountPoint NullableString `json:"restoreMountPoint,omitempty"`
	// Size of the file in bytes. Required in FLR in GCP using Cloud Functions.
	SizeBytes NullableInt64 `json:"sizeBytes,omitempty"`
	// Virtual disk file to which this file belongs to.
	VirtualDiskFile NullableString `json:"virtualDiskFile,omitempty"`
	// Id of the volume.
	VolumeId NullableString `json:"volumeId,omitempty"`
	// Original volume name (or drive letter). This is used while performing the copy to the original paths. E.g.: c:
	VolumePath NullableString `json:"volumePath,omitempty"`
}

// NewRestoredFileInfo instantiates a new RestoredFileInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoredFileInfo() *RestoredFileInfo {
	this := RestoredFileInfo{}
	return &this
}

// NewRestoredFileInfoWithDefaults instantiates a new RestoredFileInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoredFileInfoWithDefaults() *RestoredFileInfo {
	this := RestoredFileInfo{}
	return &this
}

// GetAbsolutePath returns the AbsolutePath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoredFileInfo) GetAbsolutePath() string {
	if o == nil || o.AbsolutePath.Get() == nil {
		var ret string
		return ret
	}
	return *o.AbsolutePath.Get()
}

// GetAbsolutePathOk returns a tuple with the AbsolutePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoredFileInfo) GetAbsolutePathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AbsolutePath.Get(), o.AbsolutePath.IsSet()
}

// HasAbsolutePath returns a boolean if a field has been set.
func (o *RestoredFileInfo) HasAbsolutePath() bool {
	if o != nil && o.AbsolutePath.IsSet() {
		return true
	}

	return false
}

// SetAbsolutePath gets a reference to the given NullableString and assigns it to the AbsolutePath field.
func (o *RestoredFileInfo) SetAbsolutePath(v string) {
	o.AbsolutePath.Set(&v)
}
// SetAbsolutePathNil sets the value for AbsolutePath to be an explicit nil
func (o *RestoredFileInfo) SetAbsolutePathNil() {
	o.AbsolutePath.Set(nil)
}

// UnsetAbsolutePath ensures that no value is present for AbsolutePath, not even an explicit nil
func (o *RestoredFileInfo) UnsetAbsolutePath() {
	o.AbsolutePath.Unset()
}

// GetAttachedDiskId returns the AttachedDiskId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoredFileInfo) GetAttachedDiskId() int32 {
	if o == nil || o.AttachedDiskId.Get() == nil {
		var ret int32
		return ret
	}
	return *o.AttachedDiskId.Get()
}

// GetAttachedDiskIdOk returns a tuple with the AttachedDiskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoredFileInfo) GetAttachedDiskIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AttachedDiskId.Get(), o.AttachedDiskId.IsSet()
}

// HasAttachedDiskId returns a boolean if a field has been set.
func (o *RestoredFileInfo) HasAttachedDiskId() bool {
	if o != nil && o.AttachedDiskId.IsSet() {
		return true
	}

	return false
}

// SetAttachedDiskId gets a reference to the given NullableInt32 and assigns it to the AttachedDiskId field.
func (o *RestoredFileInfo) SetAttachedDiskId(v int32) {
	o.AttachedDiskId.Set(&v)
}
// SetAttachedDiskIdNil sets the value for AttachedDiskId to be an explicit nil
func (o *RestoredFileInfo) SetAttachedDiskIdNil() {
	o.AttachedDiskId.Set(nil)
}

// UnsetAttachedDiskId ensures that no value is present for AttachedDiskId, not even an explicit nil
func (o *RestoredFileInfo) UnsetAttachedDiskId() {
	o.AttachedDiskId.Unset()
}

// GetDiskPartitionId returns the DiskPartitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoredFileInfo) GetDiskPartitionId() int32 {
	if o == nil || o.DiskPartitionId.Get() == nil {
		var ret int32
		return ret
	}
	return *o.DiskPartitionId.Get()
}

// GetDiskPartitionIdOk returns a tuple with the DiskPartitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoredFileInfo) GetDiskPartitionIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DiskPartitionId.Get(), o.DiskPartitionId.IsSet()
}

// HasDiskPartitionId returns a boolean if a field has been set.
func (o *RestoredFileInfo) HasDiskPartitionId() bool {
	if o != nil && o.DiskPartitionId.IsSet() {
		return true
	}

	return false
}

// SetDiskPartitionId gets a reference to the given NullableInt32 and assigns it to the DiskPartitionId field.
func (o *RestoredFileInfo) SetDiskPartitionId(v int32) {
	o.DiskPartitionId.Set(&v)
}
// SetDiskPartitionIdNil sets the value for DiskPartitionId to be an explicit nil
func (o *RestoredFileInfo) SetDiskPartitionIdNil() {
	o.DiskPartitionId.Set(nil)
}

// UnsetDiskPartitionId ensures that no value is present for DiskPartitionId, not even an explicit nil
func (o *RestoredFileInfo) UnsetDiskPartitionId() {
	o.DiskPartitionId.Unset()
}

// GetFsUuid returns the FsUuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoredFileInfo) GetFsUuid() string {
	if o == nil || o.FsUuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.FsUuid.Get()
}

// GetFsUuidOk returns a tuple with the FsUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoredFileInfo) GetFsUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FsUuid.Get(), o.FsUuid.IsSet()
}

// HasFsUuid returns a boolean if a field has been set.
func (o *RestoredFileInfo) HasFsUuid() bool {
	if o != nil && o.FsUuid.IsSet() {
		return true
	}

	return false
}

// SetFsUuid gets a reference to the given NullableString and assigns it to the FsUuid field.
func (o *RestoredFileInfo) SetFsUuid(v string) {
	o.FsUuid.Set(&v)
}
// SetFsUuidNil sets the value for FsUuid to be an explicit nil
func (o *RestoredFileInfo) SetFsUuidNil() {
	o.FsUuid.Set(nil)
}

// UnsetFsUuid ensures that no value is present for FsUuid, not even an explicit nil
func (o *RestoredFileInfo) UnsetFsUuid() {
	o.FsUuid.Unset()
}

// GetInodeNumber returns the InodeNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoredFileInfo) GetInodeNumber() int64 {
	if o == nil || o.InodeNumber.Get() == nil {
		var ret int64
		return ret
	}
	return *o.InodeNumber.Get()
}

// GetInodeNumberOk returns a tuple with the InodeNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoredFileInfo) GetInodeNumberOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InodeNumber.Get(), o.InodeNumber.IsSet()
}

// HasInodeNumber returns a boolean if a field has been set.
func (o *RestoredFileInfo) HasInodeNumber() bool {
	if o != nil && o.InodeNumber.IsSet() {
		return true
	}

	return false
}

// SetInodeNumber gets a reference to the given NullableInt64 and assigns it to the InodeNumber field.
func (o *RestoredFileInfo) SetInodeNumber(v int64) {
	o.InodeNumber.Set(&v)
}
// SetInodeNumberNil sets the value for InodeNumber to be an explicit nil
func (o *RestoredFileInfo) SetInodeNumberNil() {
	o.InodeNumber.Set(nil)
}

// UnsetInodeNumber ensures that no value is present for InodeNumber, not even an explicit nil
func (o *RestoredFileInfo) UnsetInodeNumber() {
	o.InodeNumber.Unset()
}

// GetIsDirectory returns the IsDirectory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoredFileInfo) GetIsDirectory() bool {
	if o == nil || o.IsDirectory.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsDirectory.Get()
}

// GetIsDirectoryOk returns a tuple with the IsDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoredFileInfo) GetIsDirectoryOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsDirectory.Get(), o.IsDirectory.IsSet()
}

// HasIsDirectory returns a boolean if a field has been set.
func (o *RestoredFileInfo) HasIsDirectory() bool {
	if o != nil && o.IsDirectory.IsSet() {
		return true
	}

	return false
}

// SetIsDirectory gets a reference to the given NullableBool and assigns it to the IsDirectory field.
func (o *RestoredFileInfo) SetIsDirectory(v bool) {
	o.IsDirectory.Set(&v)
}
// SetIsDirectoryNil sets the value for IsDirectory to be an explicit nil
func (o *RestoredFileInfo) SetIsDirectoryNil() {
	o.IsDirectory.Set(nil)
}

// UnsetIsDirectory ensures that no value is present for IsDirectory, not even an explicit nil
func (o *RestoredFileInfo) UnsetIsDirectory() {
	o.IsDirectory.Unset()
}

// GetIsNonSimpleLdmVol returns the IsNonSimpleLdmVol field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoredFileInfo) GetIsNonSimpleLdmVol() bool {
	if o == nil || o.IsNonSimpleLdmVol.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsNonSimpleLdmVol.Get()
}

// GetIsNonSimpleLdmVolOk returns a tuple with the IsNonSimpleLdmVol field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoredFileInfo) GetIsNonSimpleLdmVolOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsNonSimpleLdmVol.Get(), o.IsNonSimpleLdmVol.IsSet()
}

// HasIsNonSimpleLdmVol returns a boolean if a field has been set.
func (o *RestoredFileInfo) HasIsNonSimpleLdmVol() bool {
	if o != nil && o.IsNonSimpleLdmVol.IsSet() {
		return true
	}

	return false
}

// SetIsNonSimpleLdmVol gets a reference to the given NullableBool and assigns it to the IsNonSimpleLdmVol field.
func (o *RestoredFileInfo) SetIsNonSimpleLdmVol(v bool) {
	o.IsNonSimpleLdmVol.Set(&v)
}
// SetIsNonSimpleLdmVolNil sets the value for IsNonSimpleLdmVol to be an explicit nil
func (o *RestoredFileInfo) SetIsNonSimpleLdmVolNil() {
	o.IsNonSimpleLdmVol.Set(nil)
}

// UnsetIsNonSimpleLdmVol ensures that no value is present for IsNonSimpleLdmVol, not even an explicit nil
func (o *RestoredFileInfo) UnsetIsNonSimpleLdmVol() {
	o.IsNonSimpleLdmVol.Unset()
}

// GetRestoreBaseDirectory returns the RestoreBaseDirectory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoredFileInfo) GetRestoreBaseDirectory() string {
	if o == nil || o.RestoreBaseDirectory.Get() == nil {
		var ret string
		return ret
	}
	return *o.RestoreBaseDirectory.Get()
}

// GetRestoreBaseDirectoryOk returns a tuple with the RestoreBaseDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoredFileInfo) GetRestoreBaseDirectoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RestoreBaseDirectory.Get(), o.RestoreBaseDirectory.IsSet()
}

// HasRestoreBaseDirectory returns a boolean if a field has been set.
func (o *RestoredFileInfo) HasRestoreBaseDirectory() bool {
	if o != nil && o.RestoreBaseDirectory.IsSet() {
		return true
	}

	return false
}

// SetRestoreBaseDirectory gets a reference to the given NullableString and assigns it to the RestoreBaseDirectory field.
func (o *RestoredFileInfo) SetRestoreBaseDirectory(v string) {
	o.RestoreBaseDirectory.Set(&v)
}
// SetRestoreBaseDirectoryNil sets the value for RestoreBaseDirectory to be an explicit nil
func (o *RestoredFileInfo) SetRestoreBaseDirectoryNil() {
	o.RestoreBaseDirectory.Set(nil)
}

// UnsetRestoreBaseDirectory ensures that no value is present for RestoreBaseDirectory, not even an explicit nil
func (o *RestoredFileInfo) UnsetRestoreBaseDirectory() {
	o.RestoreBaseDirectory.Unset()
}

// GetRestoreMountPoint returns the RestoreMountPoint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoredFileInfo) GetRestoreMountPoint() string {
	if o == nil || o.RestoreMountPoint.Get() == nil {
		var ret string
		return ret
	}
	return *o.RestoreMountPoint.Get()
}

// GetRestoreMountPointOk returns a tuple with the RestoreMountPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoredFileInfo) GetRestoreMountPointOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RestoreMountPoint.Get(), o.RestoreMountPoint.IsSet()
}

// HasRestoreMountPoint returns a boolean if a field has been set.
func (o *RestoredFileInfo) HasRestoreMountPoint() bool {
	if o != nil && o.RestoreMountPoint.IsSet() {
		return true
	}

	return false
}

// SetRestoreMountPoint gets a reference to the given NullableString and assigns it to the RestoreMountPoint field.
func (o *RestoredFileInfo) SetRestoreMountPoint(v string) {
	o.RestoreMountPoint.Set(&v)
}
// SetRestoreMountPointNil sets the value for RestoreMountPoint to be an explicit nil
func (o *RestoredFileInfo) SetRestoreMountPointNil() {
	o.RestoreMountPoint.Set(nil)
}

// UnsetRestoreMountPoint ensures that no value is present for RestoreMountPoint, not even an explicit nil
func (o *RestoredFileInfo) UnsetRestoreMountPoint() {
	o.RestoreMountPoint.Unset()
}

// GetSizeBytes returns the SizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoredFileInfo) GetSizeBytes() int64 {
	if o == nil || o.SizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SizeBytes.Get()
}

// GetSizeBytesOk returns a tuple with the SizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoredFileInfo) GetSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SizeBytes.Get(), o.SizeBytes.IsSet()
}

// HasSizeBytes returns a boolean if a field has been set.
func (o *RestoredFileInfo) HasSizeBytes() bool {
	if o != nil && o.SizeBytes.IsSet() {
		return true
	}

	return false
}

// SetSizeBytes gets a reference to the given NullableInt64 and assigns it to the SizeBytes field.
func (o *RestoredFileInfo) SetSizeBytes(v int64) {
	o.SizeBytes.Set(&v)
}
// SetSizeBytesNil sets the value for SizeBytes to be an explicit nil
func (o *RestoredFileInfo) SetSizeBytesNil() {
	o.SizeBytes.Set(nil)
}

// UnsetSizeBytes ensures that no value is present for SizeBytes, not even an explicit nil
func (o *RestoredFileInfo) UnsetSizeBytes() {
	o.SizeBytes.Unset()
}

// GetVirtualDiskFile returns the VirtualDiskFile field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoredFileInfo) GetVirtualDiskFile() string {
	if o == nil || o.VirtualDiskFile.Get() == nil {
		var ret string
		return ret
	}
	return *o.VirtualDiskFile.Get()
}

// GetVirtualDiskFileOk returns a tuple with the VirtualDiskFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoredFileInfo) GetVirtualDiskFileOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VirtualDiskFile.Get(), o.VirtualDiskFile.IsSet()
}

// HasVirtualDiskFile returns a boolean if a field has been set.
func (o *RestoredFileInfo) HasVirtualDiskFile() bool {
	if o != nil && o.VirtualDiskFile.IsSet() {
		return true
	}

	return false
}

// SetVirtualDiskFile gets a reference to the given NullableString and assigns it to the VirtualDiskFile field.
func (o *RestoredFileInfo) SetVirtualDiskFile(v string) {
	o.VirtualDiskFile.Set(&v)
}
// SetVirtualDiskFileNil sets the value for VirtualDiskFile to be an explicit nil
func (o *RestoredFileInfo) SetVirtualDiskFileNil() {
	o.VirtualDiskFile.Set(nil)
}

// UnsetVirtualDiskFile ensures that no value is present for VirtualDiskFile, not even an explicit nil
func (o *RestoredFileInfo) UnsetVirtualDiskFile() {
	o.VirtualDiskFile.Unset()
}

// GetVolumeId returns the VolumeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoredFileInfo) GetVolumeId() string {
	if o == nil || o.VolumeId.Get() == nil {
		var ret string
		return ret
	}
	return *o.VolumeId.Get()
}

// GetVolumeIdOk returns a tuple with the VolumeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoredFileInfo) GetVolumeIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VolumeId.Get(), o.VolumeId.IsSet()
}

// HasVolumeId returns a boolean if a field has been set.
func (o *RestoredFileInfo) HasVolumeId() bool {
	if o != nil && o.VolumeId.IsSet() {
		return true
	}

	return false
}

// SetVolumeId gets a reference to the given NullableString and assigns it to the VolumeId field.
func (o *RestoredFileInfo) SetVolumeId(v string) {
	o.VolumeId.Set(&v)
}
// SetVolumeIdNil sets the value for VolumeId to be an explicit nil
func (o *RestoredFileInfo) SetVolumeIdNil() {
	o.VolumeId.Set(nil)
}

// UnsetVolumeId ensures that no value is present for VolumeId, not even an explicit nil
func (o *RestoredFileInfo) UnsetVolumeId() {
	o.VolumeId.Unset()
}

// GetVolumePath returns the VolumePath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoredFileInfo) GetVolumePath() string {
	if o == nil || o.VolumePath.Get() == nil {
		var ret string
		return ret
	}
	return *o.VolumePath.Get()
}

// GetVolumePathOk returns a tuple with the VolumePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoredFileInfo) GetVolumePathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VolumePath.Get(), o.VolumePath.IsSet()
}

// HasVolumePath returns a boolean if a field has been set.
func (o *RestoredFileInfo) HasVolumePath() bool {
	if o != nil && o.VolumePath.IsSet() {
		return true
	}

	return false
}

// SetVolumePath gets a reference to the given NullableString and assigns it to the VolumePath field.
func (o *RestoredFileInfo) SetVolumePath(v string) {
	o.VolumePath.Set(&v)
}
// SetVolumePathNil sets the value for VolumePath to be an explicit nil
func (o *RestoredFileInfo) SetVolumePathNil() {
	o.VolumePath.Set(nil)
}

// UnsetVolumePath ensures that no value is present for VolumePath, not even an explicit nil
func (o *RestoredFileInfo) UnsetVolumePath() {
	o.VolumePath.Unset()
}

func (o RestoredFileInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AbsolutePath.IsSet() {
		toSerialize["absolutePath"] = o.AbsolutePath.Get()
	}
	if o.AttachedDiskId.IsSet() {
		toSerialize["attachedDiskId"] = o.AttachedDiskId.Get()
	}
	if o.DiskPartitionId.IsSet() {
		toSerialize["diskPartitionId"] = o.DiskPartitionId.Get()
	}
	if o.FsUuid.IsSet() {
		toSerialize["fsUuid"] = o.FsUuid.Get()
	}
	if o.InodeNumber.IsSet() {
		toSerialize["inodeNumber"] = o.InodeNumber.Get()
	}
	if o.IsDirectory.IsSet() {
		toSerialize["isDirectory"] = o.IsDirectory.Get()
	}
	if o.IsNonSimpleLdmVol.IsSet() {
		toSerialize["isNonSimpleLdmVol"] = o.IsNonSimpleLdmVol.Get()
	}
	if o.RestoreBaseDirectory.IsSet() {
		toSerialize["restoreBaseDirectory"] = o.RestoreBaseDirectory.Get()
	}
	if o.RestoreMountPoint.IsSet() {
		toSerialize["restoreMountPoint"] = o.RestoreMountPoint.Get()
	}
	if o.SizeBytes.IsSet() {
		toSerialize["sizeBytes"] = o.SizeBytes.Get()
	}
	if o.VirtualDiskFile.IsSet() {
		toSerialize["virtualDiskFile"] = o.VirtualDiskFile.Get()
	}
	if o.VolumeId.IsSet() {
		toSerialize["volumeId"] = o.VolumeId.Get()
	}
	if o.VolumePath.IsSet() {
		toSerialize["volumePath"] = o.VolumePath.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRestoredFileInfo struct {
	value *RestoredFileInfo
	isSet bool
}

func (v NullableRestoredFileInfo) Get() *RestoredFileInfo {
	return v.value
}

func (v *NullableRestoredFileInfo) Set(val *RestoredFileInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoredFileInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoredFileInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoredFileInfo(val *RestoredFileInfo) *NullableRestoredFileInfo {
	return &NullableRestoredFileInfo{value: val, isSet: true}
}

func (v NullableRestoredFileInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoredFileInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


