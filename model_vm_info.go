/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// VmInfo VmInfo specifies information of a VM.
type VmInfo struct {
	// Specifies the reason if vm is unhealthy.
	HealthDetail NullableString `json:"healthDetail,omitempty"`
	// Specifies the current health status of the app instance.
	HealthStatus NullableInt32 `json:"healthStatus,omitempty"`
	// Specifies name of the VM.
	Name NullableString `json:"name,omitempty"`
	// Specifies nodeports assigned to the vm.
	NodePorts []NodePort `json:"nodePorts,omitempty"`
}

// NewVmInfo instantiates a new VmInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmInfo() *VmInfo {
	this := VmInfo{}
	return &this
}

// NewVmInfoWithDefaults instantiates a new VmInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmInfoWithDefaults() *VmInfo {
	this := VmInfo{}
	return &this
}

// GetHealthDetail returns the HealthDetail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmInfo) GetHealthDetail() string {
	if o == nil || o.HealthDetail.Get() == nil {
		var ret string
		return ret
	}
	return *o.HealthDetail.Get()
}

// GetHealthDetailOk returns a tuple with the HealthDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmInfo) GetHealthDetailOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HealthDetail.Get(), o.HealthDetail.IsSet()
}

// HasHealthDetail returns a boolean if a field has been set.
func (o *VmInfo) HasHealthDetail() bool {
	if o != nil && o.HealthDetail.IsSet() {
		return true
	}

	return false
}

// SetHealthDetail gets a reference to the given NullableString and assigns it to the HealthDetail field.
func (o *VmInfo) SetHealthDetail(v string) {
	o.HealthDetail.Set(&v)
}
// SetHealthDetailNil sets the value for HealthDetail to be an explicit nil
func (o *VmInfo) SetHealthDetailNil() {
	o.HealthDetail.Set(nil)
}

// UnsetHealthDetail ensures that no value is present for HealthDetail, not even an explicit nil
func (o *VmInfo) UnsetHealthDetail() {
	o.HealthDetail.Unset()
}

// GetHealthStatus returns the HealthStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmInfo) GetHealthStatus() int32 {
	if o == nil || o.HealthStatus.Get() == nil {
		var ret int32
		return ret
	}
	return *o.HealthStatus.Get()
}

// GetHealthStatusOk returns a tuple with the HealthStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmInfo) GetHealthStatusOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HealthStatus.Get(), o.HealthStatus.IsSet()
}

// HasHealthStatus returns a boolean if a field has been set.
func (o *VmInfo) HasHealthStatus() bool {
	if o != nil && o.HealthStatus.IsSet() {
		return true
	}

	return false
}

// SetHealthStatus gets a reference to the given NullableInt32 and assigns it to the HealthStatus field.
func (o *VmInfo) SetHealthStatus(v int32) {
	o.HealthStatus.Set(&v)
}
// SetHealthStatusNil sets the value for HealthStatus to be an explicit nil
func (o *VmInfo) SetHealthStatusNil() {
	o.HealthStatus.Set(nil)
}

// UnsetHealthStatus ensures that no value is present for HealthStatus, not even an explicit nil
func (o *VmInfo) UnsetHealthStatus() {
	o.HealthStatus.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmInfo) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmInfo) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *VmInfo) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *VmInfo) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *VmInfo) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *VmInfo) UnsetName() {
	o.Name.Unset()
}

// GetNodePorts returns the NodePorts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmInfo) GetNodePorts() []NodePort {
	if o == nil  {
		var ret []NodePort
		return ret
	}
	return o.NodePorts
}

// GetNodePortsOk returns a tuple with the NodePorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmInfo) GetNodePortsOk() (*[]NodePort, bool) {
	if o == nil || o.NodePorts == nil {
		return nil, false
	}
	return &o.NodePorts, true
}

// HasNodePorts returns a boolean if a field has been set.
func (o *VmInfo) HasNodePorts() bool {
	if o != nil && o.NodePorts != nil {
		return true
	}

	return false
}

// SetNodePorts gets a reference to the given []NodePort and assigns it to the NodePorts field.
func (o *VmInfo) SetNodePorts(v []NodePort) {
	o.NodePorts = v
}

func (o VmInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.HealthDetail.IsSet() {
		toSerialize["healthDetail"] = o.HealthDetail.Get()
	}
	if o.HealthStatus.IsSet() {
		toSerialize["healthStatus"] = o.HealthStatus.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.NodePorts != nil {
		toSerialize["nodePorts"] = o.NodePorts
	}
	return json.Marshal(toSerialize)
}

type NullableVmInfo struct {
	value *VmInfo
	isSet bool
}

func (v NullableVmInfo) Get() *VmInfo {
	return v.value
}

func (v *NullableVmInfo) Set(val *VmInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVmInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVmInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmInfo(val *VmInfo) *NullableVmInfo {
	return &NullableVmInfo{value: val, isSet: true}
}

func (v NullableVmInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


