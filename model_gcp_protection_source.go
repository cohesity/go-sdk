/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// GcpProtectionSource Specifies a Protection Source in GCP environment.
type GcpProtectionSource struct {
	// Specifies Client email address associated with the service account.
	ClientEmailAddress NullableString `json:"clientEmailAddress,omitempty"`
	// Specifies Client private associated with the service account.
	ClientPrivateKey NullableString `json:"clientPrivateKey,omitempty"`
	// Specifies the entity type such as 'kIAMUser' if the environment is kGCP. Specifies the type of a GCP source entity. 'kIAMUser' indicates a unique user within a GCP account. 'kProject' represents compute resources and storage. 'kRegion' indicates a geographical region in the global infrastructure. 'kAvailabilityZone' indicates an availability zone within a region. 'kVirtualMachine' indicates a Virtual Machine running in GCP environment. 'kVPC' indicates a virtual private cloud (VPC) network within GCP. 'kSubnet' indicates a subnet inside the VPC. 'kNetworkSecurityGroup' represents a network security group. 'kInstanceType' represents various machine types. 'kLabel' represents a label present on the instances. 'kMetaData' represents a custom metadata present on instances. 'kTag' represents a network tag on instances. 'kVPCConnector' represents a VPC connector used for serverless VPC access.
	GcpType NullableString `json:"gcpType,omitempty"`
	// Specifies the host project id. It is populated in entities of type kSubnet if the subnet is part of a shared VPC. This contains the ID of host project the subnet belongs to. Populated in entities of type kProject if the project is a service project in a Shared VPC setup. This contains the ID of the host project it is attached to.
	HostProjectId NullableString `json:"hostProjectId,omitempty"`
	// Specifies the OS type of the Protection Source of type 'kVirtualMachine' such as 'kWindows' or 'kLinux'. overrideDescription: true 'kLinux' indicates the Linux operating system. 'kWindows' indicates the Microsoft Windows operating system. 'kAix' indicates the IBM AIX operating system. 'kSolaris' indicates the Oracle Solaris operating system. 'kSapHana' indicates the Sap Hana database system developed by SAP SE. 'kOther' indicates the other types of operating system.
	HostType NullableString `json:"hostType,omitempty"`
	// Specifies the IP address of the entity of type 'kVirtualMachine'.
	IpAddressesVM NullableString `json:"ipAddressesVM,omitempty"`
	// Specifies the name of the Object set by the Cloud Provider. If the provider did not set a name for the object, this field is not set.
	Name NullableString `json:"name,omitempty"`
	// Specifies the owner id of the resource in GCP environment. With type, name and ownerId gives a globally unique identity to the GCP entity.
	OwnerId NullableString `json:"ownerId,omitempty"`
	// Specifies the Protection Source id of the registered Physical Host. If the cloud entity is protected using a Physical Agent, it must be registered as a physical host.
	PhysicalSourceId NullableInt64 `json:"physicalSourceId,omitempty"`
	// Specifies the project Id. For the kIAMUser entity this contains the id of the project to be used to deploy proxy VMs. For entities of type kVirtualMachine this contains the id of the project the virtual machine belongs to.
	ProjectId NullableString `json:"projectId,omitempty"`
	// Specifies the region Id. For the kIAMUser entity this contains the region to be used to deploy proxy VMs. For entities of type kVirtualMachine this contains the region the virtual machine belongs to.
	RegionId NullableString `json:"regionId,omitempty"`
	// Specifies the unique Id of the resource given by the cloud provider.
	ResourceId NullableString `json:"resourceId,omitempty"`
	// Specifies the id of the \"convert and deploy\" restore task that created the entity in the cloud.  It is required to support the DR-to-cloud usecase where we replicate an on-prem entity to a cluster running in cloud, bring it up using \"convert and deploy\" mechanism, protect it using a cloud job that uses physical adapter, and convert it back to the on-prem format before replication.  Before replicating, we need to update the backup task state of the backed up entity using the on-prem entity and on-prem entity's parent. The id is used to lookup the restore entity that contains details about the on-prem entity.  It is set at the time of refreshing the cloud entity hierarchy if all the following conditions are met: Name of the current entity matches with name of any cloud entity deployed using the \"convert and deploy\" restore task. Restore entity associated with the above matched cloud entity has 'failed_over' flag set to true in its cloud extension.
	RestoreTaskId NullableInt64 `json:"restoreTaskId,omitempty"`
	// Specifies the list of GCP tag attributes.
	TagAttributes []TagAttribute `json:"tagAttributes,omitempty"`
	// Specifies the type of an GCP Protection Source Object such as 'kIAMUser', 'kProject', 'kRegion', etc. Specifies the type of a GCP source entity. 'kIAMUser' indicates a unique user within a GCP account. 'kProject' represents compute resources and storage. 'kRegion' indicates a geographical region in the global infrastructure. 'kAvailabilityZone' indicates an availability zone within a region. 'kVirtualMachine' indicates a Virtual Machine running in GCP environment. 'kVPC' indicates a virtual private cloud (VPC) network within GCP. 'kSubnet' indicates a subnet inside the VPC. 'kNetworkSecurityGroup' represents a network security group. 'kInstanceType' represents various machine types. 'kLabel' represents a label present on the instances. 'kMetaData' represents a custom metadata present on instances. 'kTag' represents a network tag on instances. 'kVPCConnector' represents a VPC connector used for serverless VPC access.
	Type NullableString `json:"type,omitempty"`
	// Specifies the VPC Network to deploy proxy VMs.
	VpcNetwork NullableString `json:"vpcNetwork,omitempty"`
	// Specifies the subnetwork to deploy proxy VMs.
	VpcSubnetwork NullableString `json:"vpcSubnetwork,omitempty"`
}

// NewGcpProtectionSource instantiates a new GcpProtectionSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGcpProtectionSource() *GcpProtectionSource {
	this := GcpProtectionSource{}
	return &this
}

// NewGcpProtectionSourceWithDefaults instantiates a new GcpProtectionSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGcpProtectionSourceWithDefaults() *GcpProtectionSource {
	this := GcpProtectionSource{}
	return &this
}

// GetClientEmailAddress returns the ClientEmailAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GcpProtectionSource) GetClientEmailAddress() string {
	if o == nil || o.ClientEmailAddress.Get() == nil {
		var ret string
		return ret
	}
	return *o.ClientEmailAddress.Get()
}

// GetClientEmailAddressOk returns a tuple with the ClientEmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GcpProtectionSource) GetClientEmailAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClientEmailAddress.Get(), o.ClientEmailAddress.IsSet()
}

// HasClientEmailAddress returns a boolean if a field has been set.
func (o *GcpProtectionSource) HasClientEmailAddress() bool {
	if o != nil && o.ClientEmailAddress.IsSet() {
		return true
	}

	return false
}

// SetClientEmailAddress gets a reference to the given NullableString and assigns it to the ClientEmailAddress field.
func (o *GcpProtectionSource) SetClientEmailAddress(v string) {
	o.ClientEmailAddress.Set(&v)
}
// SetClientEmailAddressNil sets the value for ClientEmailAddress to be an explicit nil
func (o *GcpProtectionSource) SetClientEmailAddressNil() {
	o.ClientEmailAddress.Set(nil)
}

// UnsetClientEmailAddress ensures that no value is present for ClientEmailAddress, not even an explicit nil
func (o *GcpProtectionSource) UnsetClientEmailAddress() {
	o.ClientEmailAddress.Unset()
}

// GetClientPrivateKey returns the ClientPrivateKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GcpProtectionSource) GetClientPrivateKey() string {
	if o == nil || o.ClientPrivateKey.Get() == nil {
		var ret string
		return ret
	}
	return *o.ClientPrivateKey.Get()
}

// GetClientPrivateKeyOk returns a tuple with the ClientPrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GcpProtectionSource) GetClientPrivateKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClientPrivateKey.Get(), o.ClientPrivateKey.IsSet()
}

// HasClientPrivateKey returns a boolean if a field has been set.
func (o *GcpProtectionSource) HasClientPrivateKey() bool {
	if o != nil && o.ClientPrivateKey.IsSet() {
		return true
	}

	return false
}

// SetClientPrivateKey gets a reference to the given NullableString and assigns it to the ClientPrivateKey field.
func (o *GcpProtectionSource) SetClientPrivateKey(v string) {
	o.ClientPrivateKey.Set(&v)
}
// SetClientPrivateKeyNil sets the value for ClientPrivateKey to be an explicit nil
func (o *GcpProtectionSource) SetClientPrivateKeyNil() {
	o.ClientPrivateKey.Set(nil)
}

// UnsetClientPrivateKey ensures that no value is present for ClientPrivateKey, not even an explicit nil
func (o *GcpProtectionSource) UnsetClientPrivateKey() {
	o.ClientPrivateKey.Unset()
}

// GetGcpType returns the GcpType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GcpProtectionSource) GetGcpType() string {
	if o == nil || o.GcpType.Get() == nil {
		var ret string
		return ret
	}
	return *o.GcpType.Get()
}

// GetGcpTypeOk returns a tuple with the GcpType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GcpProtectionSource) GetGcpTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.GcpType.Get(), o.GcpType.IsSet()
}

// HasGcpType returns a boolean if a field has been set.
func (o *GcpProtectionSource) HasGcpType() bool {
	if o != nil && o.GcpType.IsSet() {
		return true
	}

	return false
}

// SetGcpType gets a reference to the given NullableString and assigns it to the GcpType field.
func (o *GcpProtectionSource) SetGcpType(v string) {
	o.GcpType.Set(&v)
}
// SetGcpTypeNil sets the value for GcpType to be an explicit nil
func (o *GcpProtectionSource) SetGcpTypeNil() {
	o.GcpType.Set(nil)
}

// UnsetGcpType ensures that no value is present for GcpType, not even an explicit nil
func (o *GcpProtectionSource) UnsetGcpType() {
	o.GcpType.Unset()
}

// GetHostProjectId returns the HostProjectId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GcpProtectionSource) GetHostProjectId() string {
	if o == nil || o.HostProjectId.Get() == nil {
		var ret string
		return ret
	}
	return *o.HostProjectId.Get()
}

// GetHostProjectIdOk returns a tuple with the HostProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GcpProtectionSource) GetHostProjectIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HostProjectId.Get(), o.HostProjectId.IsSet()
}

// HasHostProjectId returns a boolean if a field has been set.
func (o *GcpProtectionSource) HasHostProjectId() bool {
	if o != nil && o.HostProjectId.IsSet() {
		return true
	}

	return false
}

// SetHostProjectId gets a reference to the given NullableString and assigns it to the HostProjectId field.
func (o *GcpProtectionSource) SetHostProjectId(v string) {
	o.HostProjectId.Set(&v)
}
// SetHostProjectIdNil sets the value for HostProjectId to be an explicit nil
func (o *GcpProtectionSource) SetHostProjectIdNil() {
	o.HostProjectId.Set(nil)
}

// UnsetHostProjectId ensures that no value is present for HostProjectId, not even an explicit nil
func (o *GcpProtectionSource) UnsetHostProjectId() {
	o.HostProjectId.Unset()
}

// GetHostType returns the HostType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GcpProtectionSource) GetHostType() string {
	if o == nil || o.HostType.Get() == nil {
		var ret string
		return ret
	}
	return *o.HostType.Get()
}

// GetHostTypeOk returns a tuple with the HostType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GcpProtectionSource) GetHostTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HostType.Get(), o.HostType.IsSet()
}

// HasHostType returns a boolean if a field has been set.
func (o *GcpProtectionSource) HasHostType() bool {
	if o != nil && o.HostType.IsSet() {
		return true
	}

	return false
}

// SetHostType gets a reference to the given NullableString and assigns it to the HostType field.
func (o *GcpProtectionSource) SetHostType(v string) {
	o.HostType.Set(&v)
}
// SetHostTypeNil sets the value for HostType to be an explicit nil
func (o *GcpProtectionSource) SetHostTypeNil() {
	o.HostType.Set(nil)
}

// UnsetHostType ensures that no value is present for HostType, not even an explicit nil
func (o *GcpProtectionSource) UnsetHostType() {
	o.HostType.Unset()
}

// GetIpAddressesVM returns the IpAddressesVM field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GcpProtectionSource) GetIpAddressesVM() string {
	if o == nil || o.IpAddressesVM.Get() == nil {
		var ret string
		return ret
	}
	return *o.IpAddressesVM.Get()
}

// GetIpAddressesVMOk returns a tuple with the IpAddressesVM field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GcpProtectionSource) GetIpAddressesVMOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IpAddressesVM.Get(), o.IpAddressesVM.IsSet()
}

// HasIpAddressesVM returns a boolean if a field has been set.
func (o *GcpProtectionSource) HasIpAddressesVM() bool {
	if o != nil && o.IpAddressesVM.IsSet() {
		return true
	}

	return false
}

// SetIpAddressesVM gets a reference to the given NullableString and assigns it to the IpAddressesVM field.
func (o *GcpProtectionSource) SetIpAddressesVM(v string) {
	o.IpAddressesVM.Set(&v)
}
// SetIpAddressesVMNil sets the value for IpAddressesVM to be an explicit nil
func (o *GcpProtectionSource) SetIpAddressesVMNil() {
	o.IpAddressesVM.Set(nil)
}

// UnsetIpAddressesVM ensures that no value is present for IpAddressesVM, not even an explicit nil
func (o *GcpProtectionSource) UnsetIpAddressesVM() {
	o.IpAddressesVM.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GcpProtectionSource) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GcpProtectionSource) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *GcpProtectionSource) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *GcpProtectionSource) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *GcpProtectionSource) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *GcpProtectionSource) UnsetName() {
	o.Name.Unset()
}

// GetOwnerId returns the OwnerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GcpProtectionSource) GetOwnerId() string {
	if o == nil || o.OwnerId.Get() == nil {
		var ret string
		return ret
	}
	return *o.OwnerId.Get()
}

// GetOwnerIdOk returns a tuple with the OwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GcpProtectionSource) GetOwnerIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OwnerId.Get(), o.OwnerId.IsSet()
}

// HasOwnerId returns a boolean if a field has been set.
func (o *GcpProtectionSource) HasOwnerId() bool {
	if o != nil && o.OwnerId.IsSet() {
		return true
	}

	return false
}

// SetOwnerId gets a reference to the given NullableString and assigns it to the OwnerId field.
func (o *GcpProtectionSource) SetOwnerId(v string) {
	o.OwnerId.Set(&v)
}
// SetOwnerIdNil sets the value for OwnerId to be an explicit nil
func (o *GcpProtectionSource) SetOwnerIdNil() {
	o.OwnerId.Set(nil)
}

// UnsetOwnerId ensures that no value is present for OwnerId, not even an explicit nil
func (o *GcpProtectionSource) UnsetOwnerId() {
	o.OwnerId.Unset()
}

// GetPhysicalSourceId returns the PhysicalSourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GcpProtectionSource) GetPhysicalSourceId() int64 {
	if o == nil || o.PhysicalSourceId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.PhysicalSourceId.Get()
}

// GetPhysicalSourceIdOk returns a tuple with the PhysicalSourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GcpProtectionSource) GetPhysicalSourceIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PhysicalSourceId.Get(), o.PhysicalSourceId.IsSet()
}

// HasPhysicalSourceId returns a boolean if a field has been set.
func (o *GcpProtectionSource) HasPhysicalSourceId() bool {
	if o != nil && o.PhysicalSourceId.IsSet() {
		return true
	}

	return false
}

// SetPhysicalSourceId gets a reference to the given NullableInt64 and assigns it to the PhysicalSourceId field.
func (o *GcpProtectionSource) SetPhysicalSourceId(v int64) {
	o.PhysicalSourceId.Set(&v)
}
// SetPhysicalSourceIdNil sets the value for PhysicalSourceId to be an explicit nil
func (o *GcpProtectionSource) SetPhysicalSourceIdNil() {
	o.PhysicalSourceId.Set(nil)
}

// UnsetPhysicalSourceId ensures that no value is present for PhysicalSourceId, not even an explicit nil
func (o *GcpProtectionSource) UnsetPhysicalSourceId() {
	o.PhysicalSourceId.Unset()
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GcpProtectionSource) GetProjectId() string {
	if o == nil || o.ProjectId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProjectId.Get()
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GcpProtectionSource) GetProjectIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProjectId.Get(), o.ProjectId.IsSet()
}

// HasProjectId returns a boolean if a field has been set.
func (o *GcpProtectionSource) HasProjectId() bool {
	if o != nil && o.ProjectId.IsSet() {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given NullableString and assigns it to the ProjectId field.
func (o *GcpProtectionSource) SetProjectId(v string) {
	o.ProjectId.Set(&v)
}
// SetProjectIdNil sets the value for ProjectId to be an explicit nil
func (o *GcpProtectionSource) SetProjectIdNil() {
	o.ProjectId.Set(nil)
}

// UnsetProjectId ensures that no value is present for ProjectId, not even an explicit nil
func (o *GcpProtectionSource) UnsetProjectId() {
	o.ProjectId.Unset()
}

// GetRegionId returns the RegionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GcpProtectionSource) GetRegionId() string {
	if o == nil || o.RegionId.Get() == nil {
		var ret string
		return ret
	}
	return *o.RegionId.Get()
}

// GetRegionIdOk returns a tuple with the RegionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GcpProtectionSource) GetRegionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RegionId.Get(), o.RegionId.IsSet()
}

// HasRegionId returns a boolean if a field has been set.
func (o *GcpProtectionSource) HasRegionId() bool {
	if o != nil && o.RegionId.IsSet() {
		return true
	}

	return false
}

// SetRegionId gets a reference to the given NullableString and assigns it to the RegionId field.
func (o *GcpProtectionSource) SetRegionId(v string) {
	o.RegionId.Set(&v)
}
// SetRegionIdNil sets the value for RegionId to be an explicit nil
func (o *GcpProtectionSource) SetRegionIdNil() {
	o.RegionId.Set(nil)
}

// UnsetRegionId ensures that no value is present for RegionId, not even an explicit nil
func (o *GcpProtectionSource) UnsetRegionId() {
	o.RegionId.Unset()
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GcpProtectionSource) GetResourceId() string {
	if o == nil || o.ResourceId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ResourceId.Get()
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GcpProtectionSource) GetResourceIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ResourceId.Get(), o.ResourceId.IsSet()
}

// HasResourceId returns a boolean if a field has been set.
func (o *GcpProtectionSource) HasResourceId() bool {
	if o != nil && o.ResourceId.IsSet() {
		return true
	}

	return false
}

// SetResourceId gets a reference to the given NullableString and assigns it to the ResourceId field.
func (o *GcpProtectionSource) SetResourceId(v string) {
	o.ResourceId.Set(&v)
}
// SetResourceIdNil sets the value for ResourceId to be an explicit nil
func (o *GcpProtectionSource) SetResourceIdNil() {
	o.ResourceId.Set(nil)
}

// UnsetResourceId ensures that no value is present for ResourceId, not even an explicit nil
func (o *GcpProtectionSource) UnsetResourceId() {
	o.ResourceId.Unset()
}

// GetRestoreTaskId returns the RestoreTaskId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GcpProtectionSource) GetRestoreTaskId() int64 {
	if o == nil || o.RestoreTaskId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RestoreTaskId.Get()
}

// GetRestoreTaskIdOk returns a tuple with the RestoreTaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GcpProtectionSource) GetRestoreTaskIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RestoreTaskId.Get(), o.RestoreTaskId.IsSet()
}

// HasRestoreTaskId returns a boolean if a field has been set.
func (o *GcpProtectionSource) HasRestoreTaskId() bool {
	if o != nil && o.RestoreTaskId.IsSet() {
		return true
	}

	return false
}

// SetRestoreTaskId gets a reference to the given NullableInt64 and assigns it to the RestoreTaskId field.
func (o *GcpProtectionSource) SetRestoreTaskId(v int64) {
	o.RestoreTaskId.Set(&v)
}
// SetRestoreTaskIdNil sets the value for RestoreTaskId to be an explicit nil
func (o *GcpProtectionSource) SetRestoreTaskIdNil() {
	o.RestoreTaskId.Set(nil)
}

// UnsetRestoreTaskId ensures that no value is present for RestoreTaskId, not even an explicit nil
func (o *GcpProtectionSource) UnsetRestoreTaskId() {
	o.RestoreTaskId.Unset()
}

// GetTagAttributes returns the TagAttributes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GcpProtectionSource) GetTagAttributes() []TagAttribute {
	if o == nil  {
		var ret []TagAttribute
		return ret
	}
	return o.TagAttributes
}

// GetTagAttributesOk returns a tuple with the TagAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GcpProtectionSource) GetTagAttributesOk() (*[]TagAttribute, bool) {
	if o == nil || o.TagAttributes == nil {
		return nil, false
	}
	return &o.TagAttributes, true
}

// HasTagAttributes returns a boolean if a field has been set.
func (o *GcpProtectionSource) HasTagAttributes() bool {
	if o != nil && o.TagAttributes != nil {
		return true
	}

	return false
}

// SetTagAttributes gets a reference to the given []TagAttribute and assigns it to the TagAttributes field.
func (o *GcpProtectionSource) SetTagAttributes(v []TagAttribute) {
	o.TagAttributes = v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GcpProtectionSource) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GcpProtectionSource) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *GcpProtectionSource) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *GcpProtectionSource) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *GcpProtectionSource) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *GcpProtectionSource) UnsetType() {
	o.Type.Unset()
}

// GetVpcNetwork returns the VpcNetwork field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GcpProtectionSource) GetVpcNetwork() string {
	if o == nil || o.VpcNetwork.Get() == nil {
		var ret string
		return ret
	}
	return *o.VpcNetwork.Get()
}

// GetVpcNetworkOk returns a tuple with the VpcNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GcpProtectionSource) GetVpcNetworkOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VpcNetwork.Get(), o.VpcNetwork.IsSet()
}

// HasVpcNetwork returns a boolean if a field has been set.
func (o *GcpProtectionSource) HasVpcNetwork() bool {
	if o != nil && o.VpcNetwork.IsSet() {
		return true
	}

	return false
}

// SetVpcNetwork gets a reference to the given NullableString and assigns it to the VpcNetwork field.
func (o *GcpProtectionSource) SetVpcNetwork(v string) {
	o.VpcNetwork.Set(&v)
}
// SetVpcNetworkNil sets the value for VpcNetwork to be an explicit nil
func (o *GcpProtectionSource) SetVpcNetworkNil() {
	o.VpcNetwork.Set(nil)
}

// UnsetVpcNetwork ensures that no value is present for VpcNetwork, not even an explicit nil
func (o *GcpProtectionSource) UnsetVpcNetwork() {
	o.VpcNetwork.Unset()
}

// GetVpcSubnetwork returns the VpcSubnetwork field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GcpProtectionSource) GetVpcSubnetwork() string {
	if o == nil || o.VpcSubnetwork.Get() == nil {
		var ret string
		return ret
	}
	return *o.VpcSubnetwork.Get()
}

// GetVpcSubnetworkOk returns a tuple with the VpcSubnetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GcpProtectionSource) GetVpcSubnetworkOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VpcSubnetwork.Get(), o.VpcSubnetwork.IsSet()
}

// HasVpcSubnetwork returns a boolean if a field has been set.
func (o *GcpProtectionSource) HasVpcSubnetwork() bool {
	if o != nil && o.VpcSubnetwork.IsSet() {
		return true
	}

	return false
}

// SetVpcSubnetwork gets a reference to the given NullableString and assigns it to the VpcSubnetwork field.
func (o *GcpProtectionSource) SetVpcSubnetwork(v string) {
	o.VpcSubnetwork.Set(&v)
}
// SetVpcSubnetworkNil sets the value for VpcSubnetwork to be an explicit nil
func (o *GcpProtectionSource) SetVpcSubnetworkNil() {
	o.VpcSubnetwork.Set(nil)
}

// UnsetVpcSubnetwork ensures that no value is present for VpcSubnetwork, not even an explicit nil
func (o *GcpProtectionSource) UnsetVpcSubnetwork() {
	o.VpcSubnetwork.Unset()
}

func (o GcpProtectionSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClientEmailAddress.IsSet() {
		toSerialize["clientEmailAddress"] = o.ClientEmailAddress.Get()
	}
	if o.ClientPrivateKey.IsSet() {
		toSerialize["clientPrivateKey"] = o.ClientPrivateKey.Get()
	}
	if o.GcpType.IsSet() {
		toSerialize["gcpType"] = o.GcpType.Get()
	}
	if o.HostProjectId.IsSet() {
		toSerialize["hostProjectId"] = o.HostProjectId.Get()
	}
	if o.HostType.IsSet() {
		toSerialize["hostType"] = o.HostType.Get()
	}
	if o.IpAddressesVM.IsSet() {
		toSerialize["ipAddressesVM"] = o.IpAddressesVM.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.OwnerId.IsSet() {
		toSerialize["ownerId"] = o.OwnerId.Get()
	}
	if o.PhysicalSourceId.IsSet() {
		toSerialize["physicalSourceId"] = o.PhysicalSourceId.Get()
	}
	if o.ProjectId.IsSet() {
		toSerialize["projectId"] = o.ProjectId.Get()
	}
	if o.RegionId.IsSet() {
		toSerialize["regionId"] = o.RegionId.Get()
	}
	if o.ResourceId.IsSet() {
		toSerialize["resourceId"] = o.ResourceId.Get()
	}
	if o.RestoreTaskId.IsSet() {
		toSerialize["restoreTaskId"] = o.RestoreTaskId.Get()
	}
	if o.TagAttributes != nil {
		toSerialize["tagAttributes"] = o.TagAttributes
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.VpcNetwork.IsSet() {
		toSerialize["vpcNetwork"] = o.VpcNetwork.Get()
	}
	if o.VpcSubnetwork.IsSet() {
		toSerialize["vpcSubnetwork"] = o.VpcSubnetwork.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableGcpProtectionSource struct {
	value *GcpProtectionSource
	isSet bool
}

func (v NullableGcpProtectionSource) Get() *GcpProtectionSource {
	return v.value
}

func (v *NullableGcpProtectionSource) Set(val *GcpProtectionSource) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpProtectionSource) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpProtectionSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpProtectionSource(val *GcpProtectionSource) *NullableGcpProtectionSource {
	return &NullableGcpProtectionSource{value: val, isSet: true}
}

func (v NullableGcpProtectionSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpProtectionSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


