/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// AdAttribute Represnts the information about the AD attribute of the object. It also contains information regarding whether it is system attribute and whether the attribute is equal on both Snapshot and Production AD.
type AdAttribute struct {
	// Specifies the flags related to the attribute of the AD object. 'kEqual' indicates the attribute value of AD object from Snapshot and Production AD are equal. 'kNotEqual' indicates the attribute value of AD object from Snapshot and Production AD are not equal. 'kNotFound' indicates attribute of the AD object is missing from both Snapshot and Production AD. 'kSystem' indicates this is system attribute. This can only be updated by the AD internal component. 'kMultiValue' indicates that the attribute is mutli-value attribute. This attribute supports mutli-value merge during attribute restore operation.
	AdAttributeFlags []string `json:"adAttributeFlags,omitempty"`
	DestinationValue *AttributeValue `json:"destinationValue,omitempty"`
	// Specifies the error message regarding the attribute
	ErrorMessage NullableString `json:"errorMessage,omitempty"`
	// Specifies the name of the attribute of the AD object.
	Name NullableString `json:"name,omitempty"`
	SameValue *AttributeValue `json:"sameValue,omitempty"`
	SourceValue *AttributeValue `json:"sourceValue,omitempty"`
}

// NewAdAttribute instantiates a new AdAttribute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdAttribute() *AdAttribute {
	this := AdAttribute{}
	return &this
}

// NewAdAttributeWithDefaults instantiates a new AdAttribute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdAttributeWithDefaults() *AdAttribute {
	this := AdAttribute{}
	return &this
}

// GetAdAttributeFlags returns the AdAttributeFlags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdAttribute) GetAdAttributeFlags() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.AdAttributeFlags
}

// GetAdAttributeFlagsOk returns a tuple with the AdAttributeFlags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdAttribute) GetAdAttributeFlagsOk() (*[]string, bool) {
	if o == nil || o.AdAttributeFlags == nil {
		return nil, false
	}
	return &o.AdAttributeFlags, true
}

// HasAdAttributeFlags returns a boolean if a field has been set.
func (o *AdAttribute) HasAdAttributeFlags() bool {
	if o != nil && o.AdAttributeFlags != nil {
		return true
	}

	return false
}

// SetAdAttributeFlags gets a reference to the given []string and assigns it to the AdAttributeFlags field.
func (o *AdAttribute) SetAdAttributeFlags(v []string) {
	o.AdAttributeFlags = v
}

// GetDestinationValue returns the DestinationValue field value if set, zero value otherwise.
func (o *AdAttribute) GetDestinationValue() AttributeValue {
	if o == nil || o.DestinationValue == nil {
		var ret AttributeValue
		return ret
	}
	return *o.DestinationValue
}

// GetDestinationValueOk returns a tuple with the DestinationValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdAttribute) GetDestinationValueOk() (*AttributeValue, bool) {
	if o == nil || o.DestinationValue == nil {
		return nil, false
	}
	return o.DestinationValue, true
}

// HasDestinationValue returns a boolean if a field has been set.
func (o *AdAttribute) HasDestinationValue() bool {
	if o != nil && o.DestinationValue != nil {
		return true
	}

	return false
}

// SetDestinationValue gets a reference to the given AttributeValue and assigns it to the DestinationValue field.
func (o *AdAttribute) SetDestinationValue(v AttributeValue) {
	o.DestinationValue = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdAttribute) GetErrorMessage() string {
	if o == nil || o.ErrorMessage.Get() == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdAttribute) GetErrorMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *AdAttribute) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *AdAttribute) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}
// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *AdAttribute) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *AdAttribute) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdAttribute) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdAttribute) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *AdAttribute) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *AdAttribute) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *AdAttribute) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *AdAttribute) UnsetName() {
	o.Name.Unset()
}

// GetSameValue returns the SameValue field value if set, zero value otherwise.
func (o *AdAttribute) GetSameValue() AttributeValue {
	if o == nil || o.SameValue == nil {
		var ret AttributeValue
		return ret
	}
	return *o.SameValue
}

// GetSameValueOk returns a tuple with the SameValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdAttribute) GetSameValueOk() (*AttributeValue, bool) {
	if o == nil || o.SameValue == nil {
		return nil, false
	}
	return o.SameValue, true
}

// HasSameValue returns a boolean if a field has been set.
func (o *AdAttribute) HasSameValue() bool {
	if o != nil && o.SameValue != nil {
		return true
	}

	return false
}

// SetSameValue gets a reference to the given AttributeValue and assigns it to the SameValue field.
func (o *AdAttribute) SetSameValue(v AttributeValue) {
	o.SameValue = &v
}

// GetSourceValue returns the SourceValue field value if set, zero value otherwise.
func (o *AdAttribute) GetSourceValue() AttributeValue {
	if o == nil || o.SourceValue == nil {
		var ret AttributeValue
		return ret
	}
	return *o.SourceValue
}

// GetSourceValueOk returns a tuple with the SourceValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdAttribute) GetSourceValueOk() (*AttributeValue, bool) {
	if o == nil || o.SourceValue == nil {
		return nil, false
	}
	return o.SourceValue, true
}

// HasSourceValue returns a boolean if a field has been set.
func (o *AdAttribute) HasSourceValue() bool {
	if o != nil && o.SourceValue != nil {
		return true
	}

	return false
}

// SetSourceValue gets a reference to the given AttributeValue and assigns it to the SourceValue field.
func (o *AdAttribute) SetSourceValue(v AttributeValue) {
	o.SourceValue = &v
}

func (o AdAttribute) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AdAttributeFlags != nil {
		toSerialize["adAttributeFlags"] = o.AdAttributeFlags
	}
	if o.DestinationValue != nil {
		toSerialize["destinationValue"] = o.DestinationValue
	}
	if o.ErrorMessage.IsSet() {
		toSerialize["errorMessage"] = o.ErrorMessage.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.SameValue != nil {
		toSerialize["sameValue"] = o.SameValue
	}
	if o.SourceValue != nil {
		toSerialize["sourceValue"] = o.SourceValue
	}
	return json.Marshal(toSerialize)
}

type NullableAdAttribute struct {
	value *AdAttribute
	isSet bool
}

func (v NullableAdAttribute) Get() *AdAttribute {
	return v.value
}

func (v *NullableAdAttribute) Set(val *AdAttribute) {
	v.value = val
	v.isSet = true
}

func (v NullableAdAttribute) IsSet() bool {
	return v.isSet
}

func (v *NullableAdAttribute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdAttribute(val *AdAttribute) *NullableAdAttribute {
	return &NullableAdAttribute{value: val, isSet: true}
}

func (v NullableAdAttribute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdAttribute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


