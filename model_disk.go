/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// Disk Specifies information about a disk and partitions in a volume.
type Disk struct {
	// Array of Disk Blocks.  Specifies a set of disk blocks by defining the location and offset of disk blocks in a disk.
	DiskBlocks []DiskBlock `json:"diskBlocks,omitempty"`
	// Specifies the format of the virtual disk. 'kVMDK' indicates VMware's Virtual Disk format. 'kVHD' indicates Microsoft's Virtual Hard Drive format. 'kVHDx' indicates Microsoft's Hyper-V Virtual Hard Drive format. 'kRaw' indicates Raw disk format used by KVM, Acropolis. 'kUnknow' indicates Unknown disk format.
	DiskFormat NullableString `json:"diskFormat,omitempty"`
	// Array of Partitions.  Specifies information about all the partitions in this disk.
	DiskPartitions []DiskPartition `json:"diskPartitions,omitempty"`
	// Specifies partition table format on a disk. 'kNoPartition' indicates missing partition table. 'kMBRPartition' indicates partition table is in Master Boot Record format. 'kGPTPartition' indicates partition table is in Guid Partition Table format. 'kSGIPartition' indicates partition table uses SGI scheme. 'kSUNPartition' indicates partition table uses SUN scheme.
	PartitionTableFormat NullableString `json:"partitionTableFormat,omitempty"`
	// Specifies the sector size of hard disk. It is used for mapping the disk blocks of the disk file into a linear list of sectors.
	SectorSizeBytes NullableInt64 `json:"sectorSizeBytes,omitempty"`
	// Specifies the disk uuid.
	Uuid NullableString `json:"uuid,omitempty"`
	// Specifies the disk file name. This is the VMDK name and not the flat file name.
	VmdkFileName NullableString `json:"vmdkFileName,omitempty"`
	// Specifies the disk size in bytes.
	VmdkSizeBytes NullableInt64 `json:"vmdkSizeBytes,omitempty"`
}

// NewDisk instantiates a new Disk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDisk() *Disk {
	this := Disk{}
	return &this
}

// NewDiskWithDefaults instantiates a new Disk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskWithDefaults() *Disk {
	this := Disk{}
	return &this
}

// GetDiskBlocks returns the DiskBlocks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Disk) GetDiskBlocks() []DiskBlock {
	if o == nil  {
		var ret []DiskBlock
		return ret
	}
	return o.DiskBlocks
}

// GetDiskBlocksOk returns a tuple with the DiskBlocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetDiskBlocksOk() (*[]DiskBlock, bool) {
	if o == nil || o.DiskBlocks == nil {
		return nil, false
	}
	return &o.DiskBlocks, true
}

// HasDiskBlocks returns a boolean if a field has been set.
func (o *Disk) HasDiskBlocks() bool {
	if o != nil && o.DiskBlocks != nil {
		return true
	}

	return false
}

// SetDiskBlocks gets a reference to the given []DiskBlock and assigns it to the DiskBlocks field.
func (o *Disk) SetDiskBlocks(v []DiskBlock) {
	o.DiskBlocks = v
}

// GetDiskFormat returns the DiskFormat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Disk) GetDiskFormat() string {
	if o == nil || o.DiskFormat.Get() == nil {
		var ret string
		return ret
	}
	return *o.DiskFormat.Get()
}

// GetDiskFormatOk returns a tuple with the DiskFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetDiskFormatOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DiskFormat.Get(), o.DiskFormat.IsSet()
}

// HasDiskFormat returns a boolean if a field has been set.
func (o *Disk) HasDiskFormat() bool {
	if o != nil && o.DiskFormat.IsSet() {
		return true
	}

	return false
}

// SetDiskFormat gets a reference to the given NullableString and assigns it to the DiskFormat field.
func (o *Disk) SetDiskFormat(v string) {
	o.DiskFormat.Set(&v)
}
// SetDiskFormatNil sets the value for DiskFormat to be an explicit nil
func (o *Disk) SetDiskFormatNil() {
	o.DiskFormat.Set(nil)
}

// UnsetDiskFormat ensures that no value is present for DiskFormat, not even an explicit nil
func (o *Disk) UnsetDiskFormat() {
	o.DiskFormat.Unset()
}

// GetDiskPartitions returns the DiskPartitions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Disk) GetDiskPartitions() []DiskPartition {
	if o == nil  {
		var ret []DiskPartition
		return ret
	}
	return o.DiskPartitions
}

// GetDiskPartitionsOk returns a tuple with the DiskPartitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetDiskPartitionsOk() (*[]DiskPartition, bool) {
	if o == nil || o.DiskPartitions == nil {
		return nil, false
	}
	return &o.DiskPartitions, true
}

// HasDiskPartitions returns a boolean if a field has been set.
func (o *Disk) HasDiskPartitions() bool {
	if o != nil && o.DiskPartitions != nil {
		return true
	}

	return false
}

// SetDiskPartitions gets a reference to the given []DiskPartition and assigns it to the DiskPartitions field.
func (o *Disk) SetDiskPartitions(v []DiskPartition) {
	o.DiskPartitions = v
}

// GetPartitionTableFormat returns the PartitionTableFormat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Disk) GetPartitionTableFormat() string {
	if o == nil || o.PartitionTableFormat.Get() == nil {
		var ret string
		return ret
	}
	return *o.PartitionTableFormat.Get()
}

// GetPartitionTableFormatOk returns a tuple with the PartitionTableFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetPartitionTableFormatOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PartitionTableFormat.Get(), o.PartitionTableFormat.IsSet()
}

// HasPartitionTableFormat returns a boolean if a field has been set.
func (o *Disk) HasPartitionTableFormat() bool {
	if o != nil && o.PartitionTableFormat.IsSet() {
		return true
	}

	return false
}

// SetPartitionTableFormat gets a reference to the given NullableString and assigns it to the PartitionTableFormat field.
func (o *Disk) SetPartitionTableFormat(v string) {
	o.PartitionTableFormat.Set(&v)
}
// SetPartitionTableFormatNil sets the value for PartitionTableFormat to be an explicit nil
func (o *Disk) SetPartitionTableFormatNil() {
	o.PartitionTableFormat.Set(nil)
}

// UnsetPartitionTableFormat ensures that no value is present for PartitionTableFormat, not even an explicit nil
func (o *Disk) UnsetPartitionTableFormat() {
	o.PartitionTableFormat.Unset()
}

// GetSectorSizeBytes returns the SectorSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Disk) GetSectorSizeBytes() int64 {
	if o == nil || o.SectorSizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SectorSizeBytes.Get()
}

// GetSectorSizeBytesOk returns a tuple with the SectorSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetSectorSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SectorSizeBytes.Get(), o.SectorSizeBytes.IsSet()
}

// HasSectorSizeBytes returns a boolean if a field has been set.
func (o *Disk) HasSectorSizeBytes() bool {
	if o != nil && o.SectorSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetSectorSizeBytes gets a reference to the given NullableInt64 and assigns it to the SectorSizeBytes field.
func (o *Disk) SetSectorSizeBytes(v int64) {
	o.SectorSizeBytes.Set(&v)
}
// SetSectorSizeBytesNil sets the value for SectorSizeBytes to be an explicit nil
func (o *Disk) SetSectorSizeBytesNil() {
	o.SectorSizeBytes.Set(nil)
}

// UnsetSectorSizeBytes ensures that no value is present for SectorSizeBytes, not even an explicit nil
func (o *Disk) UnsetSectorSizeBytes() {
	o.SectorSizeBytes.Unset()
}

// GetUuid returns the Uuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Disk) GetUuid() string {
	if o == nil || o.Uuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.Uuid.Get()
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Uuid.Get(), o.Uuid.IsSet()
}

// HasUuid returns a boolean if a field has been set.
func (o *Disk) HasUuid() bool {
	if o != nil && o.Uuid.IsSet() {
		return true
	}

	return false
}

// SetUuid gets a reference to the given NullableString and assigns it to the Uuid field.
func (o *Disk) SetUuid(v string) {
	o.Uuid.Set(&v)
}
// SetUuidNil sets the value for Uuid to be an explicit nil
func (o *Disk) SetUuidNil() {
	o.Uuid.Set(nil)
}

// UnsetUuid ensures that no value is present for Uuid, not even an explicit nil
func (o *Disk) UnsetUuid() {
	o.Uuid.Unset()
}

// GetVmdkFileName returns the VmdkFileName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Disk) GetVmdkFileName() string {
	if o == nil || o.VmdkFileName.Get() == nil {
		var ret string
		return ret
	}
	return *o.VmdkFileName.Get()
}

// GetVmdkFileNameOk returns a tuple with the VmdkFileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetVmdkFileNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VmdkFileName.Get(), o.VmdkFileName.IsSet()
}

// HasVmdkFileName returns a boolean if a field has been set.
func (o *Disk) HasVmdkFileName() bool {
	if o != nil && o.VmdkFileName.IsSet() {
		return true
	}

	return false
}

// SetVmdkFileName gets a reference to the given NullableString and assigns it to the VmdkFileName field.
func (o *Disk) SetVmdkFileName(v string) {
	o.VmdkFileName.Set(&v)
}
// SetVmdkFileNameNil sets the value for VmdkFileName to be an explicit nil
func (o *Disk) SetVmdkFileNameNil() {
	o.VmdkFileName.Set(nil)
}

// UnsetVmdkFileName ensures that no value is present for VmdkFileName, not even an explicit nil
func (o *Disk) UnsetVmdkFileName() {
	o.VmdkFileName.Unset()
}

// GetVmdkSizeBytes returns the VmdkSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Disk) GetVmdkSizeBytes() int64 {
	if o == nil || o.VmdkSizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.VmdkSizeBytes.Get()
}

// GetVmdkSizeBytesOk returns a tuple with the VmdkSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetVmdkSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VmdkSizeBytes.Get(), o.VmdkSizeBytes.IsSet()
}

// HasVmdkSizeBytes returns a boolean if a field has been set.
func (o *Disk) HasVmdkSizeBytes() bool {
	if o != nil && o.VmdkSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetVmdkSizeBytes gets a reference to the given NullableInt64 and assigns it to the VmdkSizeBytes field.
func (o *Disk) SetVmdkSizeBytes(v int64) {
	o.VmdkSizeBytes.Set(&v)
}
// SetVmdkSizeBytesNil sets the value for VmdkSizeBytes to be an explicit nil
func (o *Disk) SetVmdkSizeBytesNil() {
	o.VmdkSizeBytes.Set(nil)
}

// UnsetVmdkSizeBytes ensures that no value is present for VmdkSizeBytes, not even an explicit nil
func (o *Disk) UnsetVmdkSizeBytes() {
	o.VmdkSizeBytes.Unset()
}

func (o Disk) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DiskBlocks != nil {
		toSerialize["diskBlocks"] = o.DiskBlocks
	}
	if o.DiskFormat.IsSet() {
		toSerialize["diskFormat"] = o.DiskFormat.Get()
	}
	if o.DiskPartitions != nil {
		toSerialize["diskPartitions"] = o.DiskPartitions
	}
	if o.PartitionTableFormat.IsSet() {
		toSerialize["partitionTableFormat"] = o.PartitionTableFormat.Get()
	}
	if o.SectorSizeBytes.IsSet() {
		toSerialize["sectorSizeBytes"] = o.SectorSizeBytes.Get()
	}
	if o.Uuid.IsSet() {
		toSerialize["uuid"] = o.Uuid.Get()
	}
	if o.VmdkFileName.IsSet() {
		toSerialize["vmdkFileName"] = o.VmdkFileName.Get()
	}
	if o.VmdkSizeBytes.IsSet() {
		toSerialize["vmdkSizeBytes"] = o.VmdkSizeBytes.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDisk struct {
	value *Disk
	isSet bool
}

func (v NullableDisk) Get() *Disk {
	return v.value
}

func (v *NullableDisk) Set(val *Disk) {
	v.value = val
	v.isSet = true
}

func (v NullableDisk) IsSet() bool {
	return v.isSet
}

func (v *NullableDisk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisk(val *Disk) *NullableDisk {
	return &NullableDisk{value: val, isSet: true}
}

func (v NullableDisk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


