/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ObjectsProtectedByPolicy Objects (e.g. VMs) protected by Policy.
type ObjectsProtectedByPolicy struct {
	// Protected Objects.
	ObjectsProtected []ObjectsByEnv `json:"objectsProtected,omitempty"`
	// Id of the policy.
	PolicyId NullableString `json:"policyId,omitempty"`
	// Name of the policy.
	PolicyName NullableString `json:"policyName,omitempty"`
}

// NewObjectsProtectedByPolicy instantiates a new ObjectsProtectedByPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectsProtectedByPolicy() *ObjectsProtectedByPolicy {
	this := ObjectsProtectedByPolicy{}
	return &this
}

// NewObjectsProtectedByPolicyWithDefaults instantiates a new ObjectsProtectedByPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectsProtectedByPolicyWithDefaults() *ObjectsProtectedByPolicy {
	this := ObjectsProtectedByPolicy{}
	return &this
}

// GetObjectsProtected returns the ObjectsProtected field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectsProtectedByPolicy) GetObjectsProtected() []ObjectsByEnv {
	if o == nil  {
		var ret []ObjectsByEnv
		return ret
	}
	return o.ObjectsProtected
}

// GetObjectsProtectedOk returns a tuple with the ObjectsProtected field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectsProtectedByPolicy) GetObjectsProtectedOk() (*[]ObjectsByEnv, bool) {
	if o == nil || o.ObjectsProtected == nil {
		return nil, false
	}
	return &o.ObjectsProtected, true
}

// HasObjectsProtected returns a boolean if a field has been set.
func (o *ObjectsProtectedByPolicy) HasObjectsProtected() bool {
	if o != nil && o.ObjectsProtected != nil {
		return true
	}

	return false
}

// SetObjectsProtected gets a reference to the given []ObjectsByEnv and assigns it to the ObjectsProtected field.
func (o *ObjectsProtectedByPolicy) SetObjectsProtected(v []ObjectsByEnv) {
	o.ObjectsProtected = v
}

// GetPolicyId returns the PolicyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectsProtectedByPolicy) GetPolicyId() string {
	if o == nil || o.PolicyId.Get() == nil {
		var ret string
		return ret
	}
	return *o.PolicyId.Get()
}

// GetPolicyIdOk returns a tuple with the PolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectsProtectedByPolicy) GetPolicyIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PolicyId.Get(), o.PolicyId.IsSet()
}

// HasPolicyId returns a boolean if a field has been set.
func (o *ObjectsProtectedByPolicy) HasPolicyId() bool {
	if o != nil && o.PolicyId.IsSet() {
		return true
	}

	return false
}

// SetPolicyId gets a reference to the given NullableString and assigns it to the PolicyId field.
func (o *ObjectsProtectedByPolicy) SetPolicyId(v string) {
	o.PolicyId.Set(&v)
}
// SetPolicyIdNil sets the value for PolicyId to be an explicit nil
func (o *ObjectsProtectedByPolicy) SetPolicyIdNil() {
	o.PolicyId.Set(nil)
}

// UnsetPolicyId ensures that no value is present for PolicyId, not even an explicit nil
func (o *ObjectsProtectedByPolicy) UnsetPolicyId() {
	o.PolicyId.Unset()
}

// GetPolicyName returns the PolicyName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectsProtectedByPolicy) GetPolicyName() string {
	if o == nil || o.PolicyName.Get() == nil {
		var ret string
		return ret
	}
	return *o.PolicyName.Get()
}

// GetPolicyNameOk returns a tuple with the PolicyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectsProtectedByPolicy) GetPolicyNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PolicyName.Get(), o.PolicyName.IsSet()
}

// HasPolicyName returns a boolean if a field has been set.
func (o *ObjectsProtectedByPolicy) HasPolicyName() bool {
	if o != nil && o.PolicyName.IsSet() {
		return true
	}

	return false
}

// SetPolicyName gets a reference to the given NullableString and assigns it to the PolicyName field.
func (o *ObjectsProtectedByPolicy) SetPolicyName(v string) {
	o.PolicyName.Set(&v)
}
// SetPolicyNameNil sets the value for PolicyName to be an explicit nil
func (o *ObjectsProtectedByPolicy) SetPolicyNameNil() {
	o.PolicyName.Set(nil)
}

// UnsetPolicyName ensures that no value is present for PolicyName, not even an explicit nil
func (o *ObjectsProtectedByPolicy) UnsetPolicyName() {
	o.PolicyName.Unset()
}

func (o ObjectsProtectedByPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ObjectsProtected != nil {
		toSerialize["objectsProtected"] = o.ObjectsProtected
	}
	if o.PolicyId.IsSet() {
		toSerialize["policyId"] = o.PolicyId.Get()
	}
	if o.PolicyName.IsSet() {
		toSerialize["policyName"] = o.PolicyName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableObjectsProtectedByPolicy struct {
	value *ObjectsProtectedByPolicy
	isSet bool
}

func (v NullableObjectsProtectedByPolicy) Get() *ObjectsProtectedByPolicy {
	return v.value
}

func (v *NullableObjectsProtectedByPolicy) Set(val *ObjectsProtectedByPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectsProtectedByPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectsProtectedByPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectsProtectedByPolicy(val *ObjectsProtectedByPolicy) *NullableObjectsProtectedByPolicy {
	return &NullableObjectsProtectedByPolicy{value: val, isSet: true}
}

func (v NullableObjectsProtectedByPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectsProtectedByPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


