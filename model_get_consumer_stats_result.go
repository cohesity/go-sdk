/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// GetConsumerStatsResult GetConsumerStatsResult is the result of get consumerStats api.
type GetConsumerStatsResult struct {
	// Specifies an opaque string to pass to get the next set of active opens. If null is returned, this response is the last set of active opens.
	Cookie NullableString `json:"cookie,omitempty"`
	// Specifies a list of consumer stats.
	StatsList []ConsumerStats `json:"statsList,omitempty"`
}

// NewGetConsumerStatsResult instantiates a new GetConsumerStatsResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetConsumerStatsResult() *GetConsumerStatsResult {
	this := GetConsumerStatsResult{}
	return &this
}

// NewGetConsumerStatsResultWithDefaults instantiates a new GetConsumerStatsResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetConsumerStatsResultWithDefaults() *GetConsumerStatsResult {
	this := GetConsumerStatsResult{}
	return &this
}

// GetCookie returns the Cookie field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetConsumerStatsResult) GetCookie() string {
	if o == nil || o.Cookie.Get() == nil {
		var ret string
		return ret
	}
	return *o.Cookie.Get()
}

// GetCookieOk returns a tuple with the Cookie field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetConsumerStatsResult) GetCookieOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Cookie.Get(), o.Cookie.IsSet()
}

// HasCookie returns a boolean if a field has been set.
func (o *GetConsumerStatsResult) HasCookie() bool {
	if o != nil && o.Cookie.IsSet() {
		return true
	}

	return false
}

// SetCookie gets a reference to the given NullableString and assigns it to the Cookie field.
func (o *GetConsumerStatsResult) SetCookie(v string) {
	o.Cookie.Set(&v)
}
// SetCookieNil sets the value for Cookie to be an explicit nil
func (o *GetConsumerStatsResult) SetCookieNil() {
	o.Cookie.Set(nil)
}

// UnsetCookie ensures that no value is present for Cookie, not even an explicit nil
func (o *GetConsumerStatsResult) UnsetCookie() {
	o.Cookie.Unset()
}

// GetStatsList returns the StatsList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetConsumerStatsResult) GetStatsList() []ConsumerStats {
	if o == nil  {
		var ret []ConsumerStats
		return ret
	}
	return o.StatsList
}

// GetStatsListOk returns a tuple with the StatsList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetConsumerStatsResult) GetStatsListOk() (*[]ConsumerStats, bool) {
	if o == nil || o.StatsList == nil {
		return nil, false
	}
	return &o.StatsList, true
}

// HasStatsList returns a boolean if a field has been set.
func (o *GetConsumerStatsResult) HasStatsList() bool {
	if o != nil && o.StatsList != nil {
		return true
	}

	return false
}

// SetStatsList gets a reference to the given []ConsumerStats and assigns it to the StatsList field.
func (o *GetConsumerStatsResult) SetStatsList(v []ConsumerStats) {
	o.StatsList = v
}

func (o GetConsumerStatsResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Cookie.IsSet() {
		toSerialize["cookie"] = o.Cookie.Get()
	}
	if o.StatsList != nil {
		toSerialize["statsList"] = o.StatsList
	}
	return json.Marshal(toSerialize)
}

type NullableGetConsumerStatsResult struct {
	value *GetConsumerStatsResult
	isSet bool
}

func (v NullableGetConsumerStatsResult) Get() *GetConsumerStatsResult {
	return v.value
}

func (v *NullableGetConsumerStatsResult) Set(val *GetConsumerStatsResult) {
	v.value = val
	v.isSet = true
}

func (v NullableGetConsumerStatsResult) IsSet() bool {
	return v.isSet
}

func (v *NullableGetConsumerStatsResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetConsumerStatsResult(val *GetConsumerStatsResult) *NullableGetConsumerStatsResult {
	return &NullableGetConsumerStatsResult{value: val, isSet: true}
}

func (v NullableGetConsumerStatsResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetConsumerStatsResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


