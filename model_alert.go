/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// Alert Specifies information about an Alert such as the type, id assigned by the Cohesity Cluster, number of duplicates, severity, etc.
type Alert struct {
	// Specifies the category of an Alert. kDisk - Alerts that are related to Disk. kNode - Alerts that are related to Node. kCluster - Alerts that are related to Cluster. kNodeHealth - Alerts that are related to Node Health. kClusterHealth - Alerts that are related to Cluster Health. kBackupRestore - Alerts that are related to Backup/Restore. kEncryption - Alerts that are related to Encryption. kArchivalRestore - Alerts that are related to Archival/Restore. kRemoteReplication - Alerts that are related to Remote Replication. kQuota - Alerts that are related to Quota. kLicense - Alerts that are related to License. kHeliosProActiveWellness - Alerts that are related to Helios ProActive Wellness. kHeliosAnalyticsJobs - Alerts that are related to Helios Analytics Jobs. kHeliosSignatureJobs - Alerts that are related to Helios Signature Jobs. kSecurity - Alerts that are related to Security. kAppsInfra - Alerts that are related to applications infra. kAntivirus - Alerts that are related to antivirus. kArchivalCopy - Alerts that are related to archival copies.
	AlertCategory NullableString `json:"alertCategory,omitempty"`
	// Specifies a unique code that categorizes the Alert, for example: CE00200014, where CE stands for Cohesity Error, the alert state next 3 digits is the id of the Alert Category (e.g. 002 for 'kNode') and the last 5 digits is the id of the Alert Type (e.g. 00014 for 'kNodeHighCpuUsage').
	AlertCode NullableString `json:"alertCode,omitempty"`
	AlertDocument *AlertDocument `json:"alertDocument,omitempty"`
	// Specifies the current state of the Alert. kAlertNote - Alerts that are just for note. kAlertOpen - Alerts that are unresolved. kAlertResolved - Alerts that are already marked as resolved. kAlertSuppressed - Alerts that are suppressed due to snooze settings.
	AlertState NullableString `json:"alertState,omitempty"`
	// Specifies a 5 digit unique digital id for the Alert Type, such as 00014 for 'kNodeHighCpuUsage'. This id is used in alertCode.
	AlertType NullableInt32 `json:"alertType,omitempty"`
	// Specifies the Alert type bucket. Specifies the Alert type bucket. kSoftware - Alerts which are related to Cohesity services. kHardware - Alerts related to hardware on which Cohesity software is running. kService - Alerts related to other external services. kOther - Alerts not of one of above categories.
	AlertTypeBucket NullableString `json:"alertTypeBucket,omitempty"`
	// Specifies id of the cluster where the alert was raised.
	ClusterId NullableInt64 `json:"clusterId,omitempty"`
	// Specifies name of the cluster where the alert was raised.
	ClusterName NullableString `json:"clusterName,omitempty"`
	// Specifies total count of duplicated Alerts even if there are more than 25 occurrences.
	DedupCount NullableInt32 `json:"dedupCount,omitempty"`
	// Specifies Unix epoch Timestamps (in microseconds) for the last 25 occurrences of duplicated Alerts that are stored with the original/primary Alert. Alerts are grouped into one Alert if the Alerts are the same type, are reporting on the same Object and occur within one hour. 'dedupCount' always reports the total count of duplicated Alerts even if there are more than 25 occurrences. For example, if there are 100 occurrences of this Alert, dedupTimestamps stores the timestamps of the last 25 occurrences and dedupCount equals 100.
	DedupTimestamps []int64 `json:"dedupTimestamps,omitempty"`
	// Specifies source where the event occurred.
	EventSource NullableString `json:"eventSource,omitempty"`
	// Specifies Unix epoch Timestamp (in microseconds) of the first occurrence of the Alert.
	FirstTimestampUsecs NullableInt64 `json:"firstTimestampUsecs,omitempty"`
	// Specifies unique id of this Alert.
	Id NullableString `json:"id,omitempty"`
	// Specifies Unix epoch Timestamp (in microseconds) of the most recent occurrence of the Alert.
	LatestTimestampUsecs NullableInt64 `json:"latestTimestampUsecs,omitempty"`
	// Specifies array of key-value pairs associated with the Alert. The Cohesity Cluster may autogenerate properties depending on the Alert type. This list includes both autogenerated and specified properties.
	PropertyList []AlertProperty `json:"propertyList,omitempty"`
	ResolutionDetails *AlertResolutionDetails `json:"resolutionDetails,omitempty"`
	// Specifies the severity level of an Alert. kCritical - Alerts whose severity type is Critical. kWarning - Alerts whose severity type is Warning. kInfo - Alerts whose severity type is Info.
	Severity NullableString `json:"severity,omitempty"`
	// Specifies unique id generated when the Alert is suppressed by the admin.
	SuppressionId NullableInt64 `json:"suppressionId,omitempty"`
	// Specifies the tenants for which this alert has been raised.
	TenantIds []string `json:"tenantIds,omitempty"`
}

// NewAlert instantiates a new Alert object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlert() *Alert {
	this := Alert{}
	return &this
}

// NewAlertWithDefaults instantiates a new Alert object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertWithDefaults() *Alert {
	this := Alert{}
	return &this
}

// GetAlertCategory returns the AlertCategory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Alert) GetAlertCategory() string {
	if o == nil || o.AlertCategory.Get() == nil {
		var ret string
		return ret
	}
	return *o.AlertCategory.Get()
}

// GetAlertCategoryOk returns a tuple with the AlertCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Alert) GetAlertCategoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AlertCategory.Get(), o.AlertCategory.IsSet()
}

// HasAlertCategory returns a boolean if a field has been set.
func (o *Alert) HasAlertCategory() bool {
	if o != nil && o.AlertCategory.IsSet() {
		return true
	}

	return false
}

// SetAlertCategory gets a reference to the given NullableString and assigns it to the AlertCategory field.
func (o *Alert) SetAlertCategory(v string) {
	o.AlertCategory.Set(&v)
}
// SetAlertCategoryNil sets the value for AlertCategory to be an explicit nil
func (o *Alert) SetAlertCategoryNil() {
	o.AlertCategory.Set(nil)
}

// UnsetAlertCategory ensures that no value is present for AlertCategory, not even an explicit nil
func (o *Alert) UnsetAlertCategory() {
	o.AlertCategory.Unset()
}

// GetAlertCode returns the AlertCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Alert) GetAlertCode() string {
	if o == nil || o.AlertCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.AlertCode.Get()
}

// GetAlertCodeOk returns a tuple with the AlertCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Alert) GetAlertCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AlertCode.Get(), o.AlertCode.IsSet()
}

// HasAlertCode returns a boolean if a field has been set.
func (o *Alert) HasAlertCode() bool {
	if o != nil && o.AlertCode.IsSet() {
		return true
	}

	return false
}

// SetAlertCode gets a reference to the given NullableString and assigns it to the AlertCode field.
func (o *Alert) SetAlertCode(v string) {
	o.AlertCode.Set(&v)
}
// SetAlertCodeNil sets the value for AlertCode to be an explicit nil
func (o *Alert) SetAlertCodeNil() {
	o.AlertCode.Set(nil)
}

// UnsetAlertCode ensures that no value is present for AlertCode, not even an explicit nil
func (o *Alert) UnsetAlertCode() {
	o.AlertCode.Unset()
}

// GetAlertDocument returns the AlertDocument field value if set, zero value otherwise.
func (o *Alert) GetAlertDocument() AlertDocument {
	if o == nil || o.AlertDocument == nil {
		var ret AlertDocument
		return ret
	}
	return *o.AlertDocument
}

// GetAlertDocumentOk returns a tuple with the AlertDocument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetAlertDocumentOk() (*AlertDocument, bool) {
	if o == nil || o.AlertDocument == nil {
		return nil, false
	}
	return o.AlertDocument, true
}

// HasAlertDocument returns a boolean if a field has been set.
func (o *Alert) HasAlertDocument() bool {
	if o != nil && o.AlertDocument != nil {
		return true
	}

	return false
}

// SetAlertDocument gets a reference to the given AlertDocument and assigns it to the AlertDocument field.
func (o *Alert) SetAlertDocument(v AlertDocument) {
	o.AlertDocument = &v
}

// GetAlertState returns the AlertState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Alert) GetAlertState() string {
	if o == nil || o.AlertState.Get() == nil {
		var ret string
		return ret
	}
	return *o.AlertState.Get()
}

// GetAlertStateOk returns a tuple with the AlertState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Alert) GetAlertStateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AlertState.Get(), o.AlertState.IsSet()
}

// HasAlertState returns a boolean if a field has been set.
func (o *Alert) HasAlertState() bool {
	if o != nil && o.AlertState.IsSet() {
		return true
	}

	return false
}

// SetAlertState gets a reference to the given NullableString and assigns it to the AlertState field.
func (o *Alert) SetAlertState(v string) {
	o.AlertState.Set(&v)
}
// SetAlertStateNil sets the value for AlertState to be an explicit nil
func (o *Alert) SetAlertStateNil() {
	o.AlertState.Set(nil)
}

// UnsetAlertState ensures that no value is present for AlertState, not even an explicit nil
func (o *Alert) UnsetAlertState() {
	o.AlertState.Unset()
}

// GetAlertType returns the AlertType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Alert) GetAlertType() int32 {
	if o == nil || o.AlertType.Get() == nil {
		var ret int32
		return ret
	}
	return *o.AlertType.Get()
}

// GetAlertTypeOk returns a tuple with the AlertType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Alert) GetAlertTypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AlertType.Get(), o.AlertType.IsSet()
}

// HasAlertType returns a boolean if a field has been set.
func (o *Alert) HasAlertType() bool {
	if o != nil && o.AlertType.IsSet() {
		return true
	}

	return false
}

// SetAlertType gets a reference to the given NullableInt32 and assigns it to the AlertType field.
func (o *Alert) SetAlertType(v int32) {
	o.AlertType.Set(&v)
}
// SetAlertTypeNil sets the value for AlertType to be an explicit nil
func (o *Alert) SetAlertTypeNil() {
	o.AlertType.Set(nil)
}

// UnsetAlertType ensures that no value is present for AlertType, not even an explicit nil
func (o *Alert) UnsetAlertType() {
	o.AlertType.Unset()
}

// GetAlertTypeBucket returns the AlertTypeBucket field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Alert) GetAlertTypeBucket() string {
	if o == nil || o.AlertTypeBucket.Get() == nil {
		var ret string
		return ret
	}
	return *o.AlertTypeBucket.Get()
}

// GetAlertTypeBucketOk returns a tuple with the AlertTypeBucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Alert) GetAlertTypeBucketOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AlertTypeBucket.Get(), o.AlertTypeBucket.IsSet()
}

// HasAlertTypeBucket returns a boolean if a field has been set.
func (o *Alert) HasAlertTypeBucket() bool {
	if o != nil && o.AlertTypeBucket.IsSet() {
		return true
	}

	return false
}

// SetAlertTypeBucket gets a reference to the given NullableString and assigns it to the AlertTypeBucket field.
func (o *Alert) SetAlertTypeBucket(v string) {
	o.AlertTypeBucket.Set(&v)
}
// SetAlertTypeBucketNil sets the value for AlertTypeBucket to be an explicit nil
func (o *Alert) SetAlertTypeBucketNil() {
	o.AlertTypeBucket.Set(nil)
}

// UnsetAlertTypeBucket ensures that no value is present for AlertTypeBucket, not even an explicit nil
func (o *Alert) UnsetAlertTypeBucket() {
	o.AlertTypeBucket.Unset()
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Alert) GetClusterId() int64 {
	if o == nil || o.ClusterId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ClusterId.Get()
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Alert) GetClusterIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterId.Get(), o.ClusterId.IsSet()
}

// HasClusterId returns a boolean if a field has been set.
func (o *Alert) HasClusterId() bool {
	if o != nil && o.ClusterId.IsSet() {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given NullableInt64 and assigns it to the ClusterId field.
func (o *Alert) SetClusterId(v int64) {
	o.ClusterId.Set(&v)
}
// SetClusterIdNil sets the value for ClusterId to be an explicit nil
func (o *Alert) SetClusterIdNil() {
	o.ClusterId.Set(nil)
}

// UnsetClusterId ensures that no value is present for ClusterId, not even an explicit nil
func (o *Alert) UnsetClusterId() {
	o.ClusterId.Unset()
}

// GetClusterName returns the ClusterName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Alert) GetClusterName() string {
	if o == nil || o.ClusterName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ClusterName.Get()
}

// GetClusterNameOk returns a tuple with the ClusterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Alert) GetClusterNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterName.Get(), o.ClusterName.IsSet()
}

// HasClusterName returns a boolean if a field has been set.
func (o *Alert) HasClusterName() bool {
	if o != nil && o.ClusterName.IsSet() {
		return true
	}

	return false
}

// SetClusterName gets a reference to the given NullableString and assigns it to the ClusterName field.
func (o *Alert) SetClusterName(v string) {
	o.ClusterName.Set(&v)
}
// SetClusterNameNil sets the value for ClusterName to be an explicit nil
func (o *Alert) SetClusterNameNil() {
	o.ClusterName.Set(nil)
}

// UnsetClusterName ensures that no value is present for ClusterName, not even an explicit nil
func (o *Alert) UnsetClusterName() {
	o.ClusterName.Unset()
}

// GetDedupCount returns the DedupCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Alert) GetDedupCount() int32 {
	if o == nil || o.DedupCount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.DedupCount.Get()
}

// GetDedupCountOk returns a tuple with the DedupCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Alert) GetDedupCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DedupCount.Get(), o.DedupCount.IsSet()
}

// HasDedupCount returns a boolean if a field has been set.
func (o *Alert) HasDedupCount() bool {
	if o != nil && o.DedupCount.IsSet() {
		return true
	}

	return false
}

// SetDedupCount gets a reference to the given NullableInt32 and assigns it to the DedupCount field.
func (o *Alert) SetDedupCount(v int32) {
	o.DedupCount.Set(&v)
}
// SetDedupCountNil sets the value for DedupCount to be an explicit nil
func (o *Alert) SetDedupCountNil() {
	o.DedupCount.Set(nil)
}

// UnsetDedupCount ensures that no value is present for DedupCount, not even an explicit nil
func (o *Alert) UnsetDedupCount() {
	o.DedupCount.Unset()
}

// GetDedupTimestamps returns the DedupTimestamps field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Alert) GetDedupTimestamps() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.DedupTimestamps
}

// GetDedupTimestampsOk returns a tuple with the DedupTimestamps field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Alert) GetDedupTimestampsOk() (*[]int64, bool) {
	if o == nil || o.DedupTimestamps == nil {
		return nil, false
	}
	return &o.DedupTimestamps, true
}

// HasDedupTimestamps returns a boolean if a field has been set.
func (o *Alert) HasDedupTimestamps() bool {
	if o != nil && o.DedupTimestamps != nil {
		return true
	}

	return false
}

// SetDedupTimestamps gets a reference to the given []int64 and assigns it to the DedupTimestamps field.
func (o *Alert) SetDedupTimestamps(v []int64) {
	o.DedupTimestamps = v
}

// GetEventSource returns the EventSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Alert) GetEventSource() string {
	if o == nil || o.EventSource.Get() == nil {
		var ret string
		return ret
	}
	return *o.EventSource.Get()
}

// GetEventSourceOk returns a tuple with the EventSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Alert) GetEventSourceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EventSource.Get(), o.EventSource.IsSet()
}

// HasEventSource returns a boolean if a field has been set.
func (o *Alert) HasEventSource() bool {
	if o != nil && o.EventSource.IsSet() {
		return true
	}

	return false
}

// SetEventSource gets a reference to the given NullableString and assigns it to the EventSource field.
func (o *Alert) SetEventSource(v string) {
	o.EventSource.Set(&v)
}
// SetEventSourceNil sets the value for EventSource to be an explicit nil
func (o *Alert) SetEventSourceNil() {
	o.EventSource.Set(nil)
}

// UnsetEventSource ensures that no value is present for EventSource, not even an explicit nil
func (o *Alert) UnsetEventSource() {
	o.EventSource.Unset()
}

// GetFirstTimestampUsecs returns the FirstTimestampUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Alert) GetFirstTimestampUsecs() int64 {
	if o == nil || o.FirstTimestampUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.FirstTimestampUsecs.Get()
}

// GetFirstTimestampUsecsOk returns a tuple with the FirstTimestampUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Alert) GetFirstTimestampUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FirstTimestampUsecs.Get(), o.FirstTimestampUsecs.IsSet()
}

// HasFirstTimestampUsecs returns a boolean if a field has been set.
func (o *Alert) HasFirstTimestampUsecs() bool {
	if o != nil && o.FirstTimestampUsecs.IsSet() {
		return true
	}

	return false
}

// SetFirstTimestampUsecs gets a reference to the given NullableInt64 and assigns it to the FirstTimestampUsecs field.
func (o *Alert) SetFirstTimestampUsecs(v int64) {
	o.FirstTimestampUsecs.Set(&v)
}
// SetFirstTimestampUsecsNil sets the value for FirstTimestampUsecs to be an explicit nil
func (o *Alert) SetFirstTimestampUsecsNil() {
	o.FirstTimestampUsecs.Set(nil)
}

// UnsetFirstTimestampUsecs ensures that no value is present for FirstTimestampUsecs, not even an explicit nil
func (o *Alert) UnsetFirstTimestampUsecs() {
	o.FirstTimestampUsecs.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Alert) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Alert) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *Alert) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *Alert) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *Alert) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *Alert) UnsetId() {
	o.Id.Unset()
}

// GetLatestTimestampUsecs returns the LatestTimestampUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Alert) GetLatestTimestampUsecs() int64 {
	if o == nil || o.LatestTimestampUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LatestTimestampUsecs.Get()
}

// GetLatestTimestampUsecsOk returns a tuple with the LatestTimestampUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Alert) GetLatestTimestampUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LatestTimestampUsecs.Get(), o.LatestTimestampUsecs.IsSet()
}

// HasLatestTimestampUsecs returns a boolean if a field has been set.
func (o *Alert) HasLatestTimestampUsecs() bool {
	if o != nil && o.LatestTimestampUsecs.IsSet() {
		return true
	}

	return false
}

// SetLatestTimestampUsecs gets a reference to the given NullableInt64 and assigns it to the LatestTimestampUsecs field.
func (o *Alert) SetLatestTimestampUsecs(v int64) {
	o.LatestTimestampUsecs.Set(&v)
}
// SetLatestTimestampUsecsNil sets the value for LatestTimestampUsecs to be an explicit nil
func (o *Alert) SetLatestTimestampUsecsNil() {
	o.LatestTimestampUsecs.Set(nil)
}

// UnsetLatestTimestampUsecs ensures that no value is present for LatestTimestampUsecs, not even an explicit nil
func (o *Alert) UnsetLatestTimestampUsecs() {
	o.LatestTimestampUsecs.Unset()
}

// GetPropertyList returns the PropertyList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Alert) GetPropertyList() []AlertProperty {
	if o == nil  {
		var ret []AlertProperty
		return ret
	}
	return o.PropertyList
}

// GetPropertyListOk returns a tuple with the PropertyList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Alert) GetPropertyListOk() (*[]AlertProperty, bool) {
	if o == nil || o.PropertyList == nil {
		return nil, false
	}
	return &o.PropertyList, true
}

// HasPropertyList returns a boolean if a field has been set.
func (o *Alert) HasPropertyList() bool {
	if o != nil && o.PropertyList != nil {
		return true
	}

	return false
}

// SetPropertyList gets a reference to the given []AlertProperty and assigns it to the PropertyList field.
func (o *Alert) SetPropertyList(v []AlertProperty) {
	o.PropertyList = v
}

// GetResolutionDetails returns the ResolutionDetails field value if set, zero value otherwise.
func (o *Alert) GetResolutionDetails() AlertResolutionDetails {
	if o == nil || o.ResolutionDetails == nil {
		var ret AlertResolutionDetails
		return ret
	}
	return *o.ResolutionDetails
}

// GetResolutionDetailsOk returns a tuple with the ResolutionDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetResolutionDetailsOk() (*AlertResolutionDetails, bool) {
	if o == nil || o.ResolutionDetails == nil {
		return nil, false
	}
	return o.ResolutionDetails, true
}

// HasResolutionDetails returns a boolean if a field has been set.
func (o *Alert) HasResolutionDetails() bool {
	if o != nil && o.ResolutionDetails != nil {
		return true
	}

	return false
}

// SetResolutionDetails gets a reference to the given AlertResolutionDetails and assigns it to the ResolutionDetails field.
func (o *Alert) SetResolutionDetails(v AlertResolutionDetails) {
	o.ResolutionDetails = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Alert) GetSeverity() string {
	if o == nil || o.Severity.Get() == nil {
		var ret string
		return ret
	}
	return *o.Severity.Get()
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Alert) GetSeverityOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Severity.Get(), o.Severity.IsSet()
}

// HasSeverity returns a boolean if a field has been set.
func (o *Alert) HasSeverity() bool {
	if o != nil && o.Severity.IsSet() {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given NullableString and assigns it to the Severity field.
func (o *Alert) SetSeverity(v string) {
	o.Severity.Set(&v)
}
// SetSeverityNil sets the value for Severity to be an explicit nil
func (o *Alert) SetSeverityNil() {
	o.Severity.Set(nil)
}

// UnsetSeverity ensures that no value is present for Severity, not even an explicit nil
func (o *Alert) UnsetSeverity() {
	o.Severity.Unset()
}

// GetSuppressionId returns the SuppressionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Alert) GetSuppressionId() int64 {
	if o == nil || o.SuppressionId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SuppressionId.Get()
}

// GetSuppressionIdOk returns a tuple with the SuppressionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Alert) GetSuppressionIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SuppressionId.Get(), o.SuppressionId.IsSet()
}

// HasSuppressionId returns a boolean if a field has been set.
func (o *Alert) HasSuppressionId() bool {
	if o != nil && o.SuppressionId.IsSet() {
		return true
	}

	return false
}

// SetSuppressionId gets a reference to the given NullableInt64 and assigns it to the SuppressionId field.
func (o *Alert) SetSuppressionId(v int64) {
	o.SuppressionId.Set(&v)
}
// SetSuppressionIdNil sets the value for SuppressionId to be an explicit nil
func (o *Alert) SetSuppressionIdNil() {
	o.SuppressionId.Set(nil)
}

// UnsetSuppressionId ensures that no value is present for SuppressionId, not even an explicit nil
func (o *Alert) UnsetSuppressionId() {
	o.SuppressionId.Unset()
}

// GetTenantIds returns the TenantIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Alert) GetTenantIds() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.TenantIds
}

// GetTenantIdsOk returns a tuple with the TenantIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Alert) GetTenantIdsOk() (*[]string, bool) {
	if o == nil || o.TenantIds == nil {
		return nil, false
	}
	return &o.TenantIds, true
}

// HasTenantIds returns a boolean if a field has been set.
func (o *Alert) HasTenantIds() bool {
	if o != nil && o.TenantIds != nil {
		return true
	}

	return false
}

// SetTenantIds gets a reference to the given []string and assigns it to the TenantIds field.
func (o *Alert) SetTenantIds(v []string) {
	o.TenantIds = v
}

func (o Alert) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AlertCategory.IsSet() {
		toSerialize["alertCategory"] = o.AlertCategory.Get()
	}
	if o.AlertCode.IsSet() {
		toSerialize["alertCode"] = o.AlertCode.Get()
	}
	if o.AlertDocument != nil {
		toSerialize["alertDocument"] = o.AlertDocument
	}
	if o.AlertState.IsSet() {
		toSerialize["alertState"] = o.AlertState.Get()
	}
	if o.AlertType.IsSet() {
		toSerialize["alertType"] = o.AlertType.Get()
	}
	if o.AlertTypeBucket.IsSet() {
		toSerialize["alertTypeBucket"] = o.AlertTypeBucket.Get()
	}
	if o.ClusterId.IsSet() {
		toSerialize["clusterId"] = o.ClusterId.Get()
	}
	if o.ClusterName.IsSet() {
		toSerialize["clusterName"] = o.ClusterName.Get()
	}
	if o.DedupCount.IsSet() {
		toSerialize["dedupCount"] = o.DedupCount.Get()
	}
	if o.DedupTimestamps != nil {
		toSerialize["dedupTimestamps"] = o.DedupTimestamps
	}
	if o.EventSource.IsSet() {
		toSerialize["eventSource"] = o.EventSource.Get()
	}
	if o.FirstTimestampUsecs.IsSet() {
		toSerialize["firstTimestampUsecs"] = o.FirstTimestampUsecs.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.LatestTimestampUsecs.IsSet() {
		toSerialize["latestTimestampUsecs"] = o.LatestTimestampUsecs.Get()
	}
	if o.PropertyList != nil {
		toSerialize["propertyList"] = o.PropertyList
	}
	if o.ResolutionDetails != nil {
		toSerialize["resolutionDetails"] = o.ResolutionDetails
	}
	if o.Severity.IsSet() {
		toSerialize["severity"] = o.Severity.Get()
	}
	if o.SuppressionId.IsSet() {
		toSerialize["suppressionId"] = o.SuppressionId.Get()
	}
	if o.TenantIds != nil {
		toSerialize["tenantIds"] = o.TenantIds
	}
	return json.Marshal(toSerialize)
}

type NullableAlert struct {
	value *Alert
	isSet bool
}

func (v NullableAlert) Get() *Alert {
	return v.value
}

func (v *NullableAlert) Set(val *Alert) {
	v.value = val
	v.isSet = true
}

func (v NullableAlert) IsSet() bool {
	return v.isSet
}

func (v *NullableAlert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlert(val *Alert) *NullableAlert {
	return &NullableAlert{value: val, isSet: true}
}

func (v NullableAlert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


